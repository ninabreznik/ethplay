{
  "address": "0x1a795d04b963c489e0fc01897d398f1a84c15b8e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigWallet",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-15\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20 _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <[emailÂ protected]>\n/// modified by Juwita Winadwiastuti - <juwita.winadwiastuti[at]hara.ag>\n///             Arkan Gilang - <arkan.gilang[at]hara.ag>\ncontract MultiSigWallet {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    using SafeERC20 for ERC20;\n\n    /*\n     *  Constants\n     */\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    mapping (uint => address) public tokens;\n    mapping (uint => bool) public tokenset;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint txType; // 0 = etherWithdraw 1 = addOwner 2 = removeOwner 10-19 = tokenWithdraw\n        uint value;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    modifier tokenIsSet(uint tokenId) {\n        require(tokenset[tokenId]);\n        _;\n    }\n\n    modifier tokenNotSet(uint tokenId) {\n        require(!tokenset[tokenId]);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit wei.\n    function()        \n        public\n        payable\n    {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    constructor()\n        public\n    {\n        owners = [msg.sender];\n        isOwner[msg.sender] = true;\n        required = 1;\n    }\n    \n    function setToken(uint tokenId, address tokenContract)\n        public\n        tokenNotSet(tokenId)\n    {\n        tokens[tokenId]=tokenContract;\n        tokenset[tokenId]=true;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by owner.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        private\n        ownerExists(msg.sender)\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n        returns (bool) \n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n        uint halfOwner = uint(owners.length)/2;\n        changeRequirement(halfOwner + 1);\n        return true;\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by owner.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        private\n        ownerExists(owner)\n        ownerExists(msg.sender)\n        returns (bool) \n    {\n        uint halfOwner = uint(owners.length - 1)/2;\n        changeRequirement(halfOwner + 1);\n\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        emit OwnerRemoval(owner);\n        return true;\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by owner.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        ownerExists(msg.sender)\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by owner.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        private\n        ownerExists(msg.sender)\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a withdraw transaction.\n    /// @param destination Withdraw destination address.\n    /// @param value Number of wei to withdraw.\n    /// @return Returns transaction ID.\n    function submitWithdrawTransaction(address destination, uint value)\n        public\n        ownerExists(msg.sender)\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, 0);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to submit and confirm a withdraw token transaction.\n    /// @param tokenId token id.\n    /// @param destination Withdraw destination address.\n    /// @param value Number of token to withdraw.\n    /// @return Returns transaction ID.\n    function submitWithdrawTokenTransaction(uint tokenId, address destination, uint value)\n        public\n        ownerExists(msg.sender)\n        tokenIsSet(tokenId)\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, tokenId+10);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to submit and confirm a withdraw token transaction.\n    /// @param owner new owner.\n    /// @return Returns transaction ID.\n    function submitAddOwnerTransaction(address owner)\n        public\n        ownerExists(msg.sender)\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(owner, 0, 1);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to submit and confirm a withdraw token transaction.\n    /// @param owner old owner.\n    /// @return Returns transaction ID.\n    function submitRemoveOwnerTransaction(address owner)\n        public\n        ownerExists(msg.sender)\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(owner, 0, 2);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (txn.txType == 0 && withdraw(txn.destination, txn.value))\n                emit Execution(transactionId);\n            else if (txn.txType == 1 && addOwner(txn.destination))\n                emit Execution(transactionId);\n            else if (txn.txType == 2 && removeOwner(txn.destination))\n                emit Execution(transactionId);\n            else if (txn.txType > 3 && tokenWithdraw(txn.txType-10,txn.destination,txn.value))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n    \n    function tokenWithdraw(uint tokenId, address destination, uint value)\n        ownerExists(msg.sender)\n        tokenIsSet(tokenId)\n        private \n        returns (bool) \n    {\n        ERC20 _token = ERC20(tokens[tokenId]);\n        _token.safeTransfer(destination, value);\n        return true;\n    }\n\n    /// @dev Function to send wei to address.\n    /// @param destination Address destination to send wei.\n    /// @param value Amount of wei to send.\n    /// @return Confirmation status.\n    function withdraw(address destination, uint value) \n        ownerExists(msg.sender)\n        private \n        returns (bool) \n    {\n        destination.transfer(value);\n        return true;\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction wei value.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, uint txType)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            txType: txType,\n            value: value,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"submitAddOwnerTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"submitWithdrawTokenTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"submitRemoveOwnerTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"txType\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"submitWithdrawTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060408051602081019091523381526200003090600590600162000057565b50336000908152600260205260409020805460ff19166001908117909155600655620000eb565b828054828255906000526020600020908101928215620000af579160200282015b82811115620000af5782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019062000078565b50620000bd929150620000c1565b5090565b620000e891905b80821115620000bd578054600160a060020a0319168155600101620000c8565b90565b6115d280620000fb6000396000f3006080604052600436106101325763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025e7c27811461017457806320ea8d86146101a857806324ed57c1146101c05780632b9cd08b146101ec5780632f54bf6e1461021f5780633411c81c146102405780633c279f1f146102645780634f64b2be1461028b57806354741525146102a357806360c72285146102c2578063784547a7146102e35780638b51d13f146102fb5780639ace38c214610313578063a0e67e2b1461035d578063af906cf3146103c2578063b5dc40c3146103e6578063b77bf600146103fe578063c01a8c8414610413578063d74f8edd1461042b578063dc8452cd14610440578063e20056e614610455578063e29bfe131461047c578063ee22610b146104a0575b60003411156101725760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b34801561018057600080fd5b5061018c6004356104b8565b60408051600160a060020a039092168252519081900360200190f35b3480156101b457600080fd5b506101726004356104e0565b3480156101cc57600080fd5b506101d860043561059a565b604080519115158252519081900360200190f35b3480156101f857600080fd5b5061020d600160a060020a03600435166105af565b60408051918252519081900360200190f35b34801561022b57600080fd5b506101d8600160a060020a03600435166105ee565b34801561024c57600080fd5b506101d8600435600160a060020a0360243516610603565b34801561027057600080fd5b5061020d600435600160a060020a0360243516604435610623565b34801561029757600080fd5b5061018c600435610685565b3480156102af57600080fd5b5061020d600435151560243515156106a0565b3480156102ce57600080fd5b5061020d600160a060020a036004351661070c565b3480156102ef57600080fd5b506101d860043561073a565b34801561030757600080fd5b5061020d6004356107be565b34801561031f57600080fd5b5061032b600435610827565b60408051600160a060020a03909516855260208501939093528383019190915215156060830152519081900360800190f35b34801561036957600080fd5b5061037261085b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103ae578181015183820152602001610396565b505050509050019250505060405180910390f35b3480156103ce57600080fd5b50610172600435600160a060020a03602435166108be565b3480156103f257600080fd5b5061037260043561092d565b34801561040a57600080fd5b5061020d610aa6565b34801561041f57600080fd5b50610172600435610aac565b34801561043757600080fd5b5061020d610b77565b34801561044c57600080fd5b5061020d610b7c565b34801561046157600080fd5b50610172600160a060020a0360043581169060243516610b82565b34801561048857600080fd5b5061020d600160a060020a0360043516602435610d20565b3480156104ac57600080fd5b50610172600435610d58565b60058054829081106104c657fe5b600091825260209091200154600160a060020a0316905081565b3360008181526002602052604090205460ff1615156104fe57600080fd5b60008281526001602090815260408083203380855292529091205483919060ff16151561052a57600080fd5b600084815260208190526040902060030154849060ff161561054b57600080fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60046020526000908152604090205460ff1681565b3360008181526002602052604081205490919060ff1615156105d057600080fd5b6105dd8360006001610f61565b91506105e882610aac565b50919050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b3360008181526002602052604081205490919060ff16151561064457600080fd5b600085815260046020526040902054859060ff16151561066357600080fd5b610671858588600a01610f61565b925061067c83610aac565b50509392505050565b600360205260009081526040902054600160a060020a031681565b6000805b600754811015610705578380156106cd575060008181526020819052604090206003015460ff16155b806106f157508280156106f1575060008181526020819052604090206003015460ff165b156106fd576001820191505b6001016106a4565b5092915050565b3360008181526002602052604081205490919060ff16151561072d57600080fd5b6105dd8360006002610f61565b600080805b6005548110156107b7576000848152600160205260408120600580549192918490811061076857fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff161561079c576001820191505b6006548214156107af57600192506107b7565b60010161073f565b5050919050565b6000805b6005548110156105e857600083815260016020526040812060058054919291849081106107eb57fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff161561081f576001820191505b6001016107c2565b6000602081905290815260409020805460018201546002830154600390930154600160a060020a0390921692909160ff1684565b606060058054806020026020016040519081016040528092919081815260200182805480156108b357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610895575b505050505090505b90565b600082815260046020526040902054829060ff16156108dc57600080fd5b506000918252600360209081526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039490941693909317909255600490529020805460ff19166001179055565b606080600080600580549050604051908082528060200260200182016040528015610962578160200160208202803883390190505b50925060009150600090505b600554811015610a1f576000858152600160205260408120600580549192918490811061099757fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff1615610a175760058054829081106109d257fe5b6000918252602090912001548351600160a060020a03909116908490849081106109f857fe5b600160a060020a03909216602092830290910190910152600191909101905b60010161096e565b81604051908082528060200260200182016040528015610a49578160200160208202803883390190505b509350600090505b81811015610a9e578281815181101515610a6757fe5b906020019060200201518482815181101515610a7f57fe5b600160a060020a03909216602092830290910190910152600101610a51565b505050919050565b60075481565b3360008181526002602052604090205460ff161515610aca57600080fd5b6000828152602081905260409020548290600160a060020a03161515610aef57600080fd5b60008381526001602090815260408083203380855292529091205484919060ff1615610b1a57600080fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a3610b7085610d58565b5050505050565b603281565b60065481565b3360008181526002602052604081205490919060ff161515610ba357600080fd5b600160a060020a038416600090815260026020526040902054849060ff161515610bcc57600080fd5b600160a060020a038416600090815260026020526040902054849060ff1615610bf457600080fd5b600093505b600554841015610c855785600160a060020a0316600585815481101515610c1c57fe5b600091825260209091200154600160a060020a03161415610c7a5784600585815481101515610c4757fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550610c85565b600190930192610bf9565b600160a060020a03808716600081815260026020526040808220805460ff1990811690915593891682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a2604051600160a060020a038616907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a2505050505050565b3360008181526002602052604081205490919060ff161515610d4157600080fd5b610d4d84846000610f61565b915061070582610aac565b3360008181526002602052604081205490919060ff161515610d7957600080fd5b60008381526001602090815260408083203380855292529091205484919060ff161515610da557600080fd5b600085815260208190526040902060030154859060ff1615610dc657600080fd5b610dcf8661073a565b15610f5957600086815260208190526040902060038101805460ff19166001908117909155810154909550158015610e1c575084546002860154610e1c91600160a060020a03169061103a565b15610e3f57604051869060008051602061158783398151915290600090a2610f59565b84600101546001148015610e6257508454610e6290600160a060020a031661109c565b15610e8557604051869060008051602061158783398151915290600090a2610f59565b84600101546002148015610ea857508454610ea890600160a060020a03166111f3565b15610ecb57604051869060008051602061158783398151915290600090a2610f59565b60038560010154118015610efe5750600185015485546002870154610efe926009190191600160a060020a031690611386565b15610f2157604051869060008051602061158783398151915290600090a2610f59565b60405186907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038501805460ff191690555b505050505050565b600083600160a060020a0381161515610f7957600080fd5b6007805460408051608081018252600160a060020a03898116825260208083018981528385018b8152600060608601818152888252938190528681209551865473ffffffffffffffffffffffffffffffffffffffff1916951694909417855590516001808601919091559051600285015590516003909301805460ff19169315159390931790925584549091019093555190935083917fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5191a2509392505050565b3360008181526002602052604081205490919060ff16151561105b57600080fd5b604051600160a060020a0385169084156108fc029085906000818181858888f19350505050158015611091573d6000803e3d6000fd5b506001949350505050565b336000818152600260205260408120549091829160ff1615156110be57600080fd5b600160a060020a038416600090815260026020526040902054849060ff16156110e657600080fd5b84600160a060020a03811615156110fc57600080fd5b600580549050600101600654603282111580156111195750818111155b801561112457508015155b801561112f57508115155b151561113a57600080fd5b600160a060020a038816600081815260026020526040808220805460ff1916600190811790915560058054918201815583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a26005546002900495506111e5866001016113ff565b506001979650505050505050565b600160a060020a03811660009081526002602052604081205481908190849060ff16151561122057600080fd5b3360008181526002602052604090205460ff16151561123e57600080fd5b60055460029060001901049350611257846001016113ff565b600160a060020a0386166000908152600260205260408120805460ff1916905592505b600554600019018310156113325785600160a060020a03166005848154811015156112a157fe5b600091825260209091200154600160a060020a03161415611327576005805460001981019081106112ce57fe5b60009182526020909120015460058054600160a060020a0390921691859081106112f457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550611332565b60019092019161127a565b6005805460001901906113459082611549565b50604051600160a060020a038716907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a250600195945050505050565b336000818152600260205260408120549091829160ff1615156113a857600080fd5b600086815260046020526040902054869060ff1615156113c757600080fd5b600087815260036020526040902054600160a060020a031692506113f283878763ffffffff61149116565b5060019695505050505050565b3360008181526002602052604090205460ff16151561141d57600080fd5b60055482603282118015906114325750818111155b801561143d57508015155b801561144857508115155b151561145357600080fd5b60068490556040805185815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a150505050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561150d57600080fd5b505af1158015611521573d6000803e3d6000fd5b505050506040513d602081101561153757600080fd5b5051151561154457600080fd5b505050565b815481835581811115611544576000838152602090206115449181019083016108bb91905b80821115611582576000815560010161156e565b5090560033e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75a165627a7a723058204f63e7c7a95ba0d034837b842790d02006b2995739757ce9db7da88a033aa1410029"
}