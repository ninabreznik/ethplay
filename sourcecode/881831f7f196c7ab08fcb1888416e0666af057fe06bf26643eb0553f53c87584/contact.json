{
  "address": "0x8095ff4eea862eefead05b68a2f75f3aef7b81d0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoSaga: Arena Ver1",
  "contractName": "CryptoSagaArenaVer1",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\n/**\n * @title ERC721 interface\n * @dev see https://github.com/ethereum/eips/issues/721\n */\ncontract ERC721 {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function transfer(address _to, uint256 _tokenId) public;\n  function approve(address _to, uint256 _tokenId) public;\n  function takeOwnership(uint256 _tokenId) public;\n}\n\n\n/**\n * @title ERC721Token\n * Generic implementation for the required functionality of the ERC721 standard\n */\ncontract ERC721Token is ERC721 {\n  using SafeMath for uint256;\n\n  // Total amount of tokens\n  uint256 private totalTokens;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private tokenApprovals;\n\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) private ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private ownedTokensIndex;\n\n  /**\n  * @dev Guarantees msg.sender is owner of the given token\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n  */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n  * @dev Gets the total amount of tokens stored by the contract\n  * @return uint256 representing the total amount of tokens\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalTokens;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address\n  * @param _owner address to query the balance of\n  * @return uint256 representing the amount owned by the passed address\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return ownedTokens[_owner].length;\n  }\n\n  /**\n  * @dev Gets the list of tokens owned by a given address\n  * @param _owner address to query the tokens of\n  * @return uint256[] representing the list of tokens owned by the passed address\n  */\n  function tokensOf(address _owner) public view returns (uint256[]) {\n    return ownedTokens[_owner];\n  }\n\n  /**\n  * @dev Gets the owner of the specified token ID\n  * @param _tokenId uint256 ID of the token to query the owner of\n  * @return owner address currently marked as the owner of the given token ID\n  */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Gets the approved address to take ownership of a given token ID\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved to take ownership of the given token ID\n   */\n  function approvedFor(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n  * @dev Transfers the ownership of a given token ID to another address\n  * @param _to address to receive the ownership of the given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n  }\n\n  /**\n  * @dev Approves another address to claim for the ownership of the given token ID\n  * @param _to address to be approved for the given token ID\n  * @param _tokenId uint256 ID of the token to be approved\n  */\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n      tokenApprovals[_tokenId] = _to;\n      Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n  * @dev Claims the ownership of a given token ID\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n  */\n  function takeOwnership(uint256 _tokenId) public {\n    require(isApprovedFor(msg.sender, _tokenId));\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n  }\n\n  /**\n  * @dev Mint token function\n  * @param _to The address that will own the minted token\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n  */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addToken(_to, _tokenId);\n    Transfer(0x0, _to, _tokenId);\n  }\n\n  /**\n  * @dev Burns a specific token\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n  */\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n    if (approvedFor(_tokenId) != 0) {\n      clearApproval(msg.sender, _tokenId);\n    }\n    removeToken(msg.sender, _tokenId);\n    Transfer(msg.sender, 0x0, _tokenId);\n  }\n\n  /**\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\n   * @param _owner address of the owner to query the approval of\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return bool whether the msg.sender is approved for the given token ID or not\n   */\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n    return approvedFor(_tokenId) == _owner;\n  }\n\n  /**\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n  * @param _from address which you want to send tokens from\n  * @param _to address which you want to transfer the token to\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    require(_to != ownerOf(_tokenId));\n    require(ownerOf(_tokenId) == _from);\n\n    clearApproval(_from, _tokenId);\n    removeToken(_from, _tokenId);\n    addToken(_to, _tokenId);\n    Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to clear current approval of a given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApproval(address _owner, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _owner);\n    tokenApprovals[_tokenId] = 0;\n    Approval(_owner, 0, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to add a token ID to the list of a given address\n  * @param _to address representing the new owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n  */\n  function addToken(address _to, uint256 _tokenId) private {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    uint256 length = balanceOf(_to);\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n    totalTokens = totalTokens.add(1);\n  }\n\n  /**\n  * @dev Internal function to remove a token ID from the list of a given address\n  * @param _from address representing the previous owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n  */\n  function removeToken(address _from, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _from);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    tokenOwner[_tokenId] = 0;\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n    totalTokens = totalTokens.sub(1);\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title AccessDeposit\n * @dev Adds grant/revoke functions to the contract.\n */\ncontract AccessDeposit is Claimable {\n\n  // Access for adding deposit.\n  mapping(address => bool) private depositAccess;\n\n  // Modifier for accessibility to add deposit.\n  modifier onlyAccessDeposit {\n    require(msg.sender == owner || depositAccess[msg.sender] == true);\n    _;\n  }\n\n  // @dev Grant acess to deposit heroes.\n  function grantAccessDeposit(address _address)\n    onlyOwner\n    public\n  {\n    depositAccess[_address] = true;\n  }\n\n  // @dev Revoke acess to deposit heroes.\n  function revokeAccessDeposit(address _address)\n    onlyOwner\n    public\n  {\n    depositAccess[_address] = false;\n  }\n\n}\n\n\n/**\n * @title AccessDeploy\n * @dev Adds grant/revoke functions to the contract.\n */\ncontract AccessDeploy is Claimable {\n\n  // Access for deploying heroes.\n  mapping(address => bool) private deployAccess;\n\n  // Modifier for accessibility to deploy a hero on a location.\n  modifier onlyAccessDeploy {\n    require(msg.sender == owner || deployAccess[msg.sender] == true);\n    _;\n  }\n\n  // @dev Grant acess to deploy heroes.\n  function grantAccessDeploy(address _address)\n    onlyOwner\n    public\n  {\n    deployAccess[_address] = true;\n  }\n\n  // @dev Revoke acess to deploy heroes.\n  function revokeAccessDeploy(address _address)\n    onlyOwner\n    public\n  {\n    deployAccess[_address] = false;\n  }\n\n}\n\n/**\n * @title AccessMint\n * @dev Adds grant/revoke functions to the contract.\n */\ncontract AccessMint is Claimable {\n\n  // Access for minting new tokens.\n  mapping(address => bool) private mintAccess;\n\n  // Modifier for accessibility to define new hero types.\n  modifier onlyAccessMint {\n    require(msg.sender == owner || mintAccess[msg.sender] == true);\n    _;\n  }\n\n  // @dev Grant acess to mint heroes.\n  function grantAccessMint(address _address)\n    onlyOwner\n    public\n  {\n    mintAccess[_address] = true;\n  }\n\n  // @dev Revoke acess to mint heroes.\n  function revokeAccessMint(address _address)\n    onlyOwner\n    public\n  {\n    mintAccess[_address] = false;\n  }\n\n}\n\n\n/**\n * @title Gold\n * @dev ERC20 Token that can be minted.\n */\ncontract Gold is StandardToken, Claimable, AccessMint {\n\n  string public constant name = \"Gold\";\n  string public constant symbol = \"G\";\n  uint8 public constant decimals = 18;\n\n  // Event that is fired when minted.\n  event Mint(\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n\n  // @dev Mint tokens with _amount to the address.\n  function mint(address _to, uint256 _amount) \n    onlyAccessMint\n    public \n    returns (bool) \n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n}\n\n\n/**\n * @title CryptoSaga Card\n * @dev ERC721 Token that repesents CryptoSaga's cards.\n *  Buy consuming a card, players of CryptoSaga can get a heroe.\n */\ncontract CryptoSagaCard is ERC721Token, Claimable, AccessMint {\n\n  string public constant name = \"CryptoSaga Card\";\n  string public constant symbol = \"CARD\";\n\n  // Rank of the token.\n  mapping(uint256 => uint8) public tokenIdToRank;\n\n  // The number of tokens ever minted.\n  uint256 public numberOfTokenId;\n\n  // The converter contract.\n  CryptoSagaCardSwap private swapContract;\n\n  // Event that should be fired when card is converted.\n  event CardSwap(address indexed _by, uint256 _tokenId, uint256 _rewardId);\n\n  // @dev Set the address of the contract that represents CryptoSaga Cards.\n  function setCryptoSagaCardSwapContract(address _contractAddress)\n    public\n    onlyOwner\n  {\n    swapContract = CryptoSagaCardSwap(_contractAddress);\n  }\n\n  function rankOf(uint256 _tokenId) \n    public view\n    returns (uint8)\n  {\n    return tokenIdToRank[_tokenId];\n  }\n\n  // @dev Mint a new card.\n  function mint(address _beneficiary, uint256 _amount, uint8 _rank)\n    onlyAccessMint\n    public\n  {\n    for (uint256 i = 0; i < _amount; i++) {\n      _mint(_beneficiary, numberOfTokenId);\n      tokenIdToRank[numberOfTokenId] = _rank;\n      numberOfTokenId ++;\n    }\n  }\n\n  // @dev Swap this card for reward.\n  //  The card will be burnt.\n  function swap(uint256 _tokenId)\n    onlyOwnerOf(_tokenId)\n    public\n    returns (uint256)\n  {\n    require(address(swapContract) != address(0));\n\n    var _rank = tokenIdToRank[_tokenId];\n    var _rewardId = swapContract.swapCardForReward(this, _rank);\n    CardSwap(ownerOf(_tokenId), _tokenId, _rewardId);\n    _burn(_tokenId);\n    return _rewardId;\n  }\n\n}\n\n\n/**\n * @title The interface contract for Card-For-Hero swap functionality.\n * @dev With this contract, a card holder can swap his/her CryptoSagaCard for reward.\n *  This contract is intended to be inherited by CryptoSagaCardSwap implementation contracts.\n */\ncontract CryptoSagaCardSwap is Ownable {\n\n  // Card contract.\n  address internal cardAddess;\n\n  // Modifier for accessibility to define new hero types.\n  modifier onlyCard {\n    require(msg.sender == cardAddess);\n    _;\n  }\n  \n  // @dev Set the address of the contract that represents ERC721 Card.\n  function setCardContract(address _contractAddress)\n    public\n    onlyOwner\n  {\n    cardAddess = _contractAddress;\n  }\n\n  // @dev Convert card into reward.\n  //  This should be implemented by CryptoSagaCore later.\n  function swapCardForReward(address _by, uint8 _rank)\n    onlyCard\n    public \n    returns (uint256);\n\n}\n\n\n/**\n * @title CryptoSagaHero\n * @dev The token contract for the hero.\n *  Also a superset of the ERC721 standard that allows for the minting\n *  of the non-fungible tokens.\n */\ncontract CryptoSagaHero is ERC721Token, Claimable, Pausable, AccessMint, AccessDeploy, AccessDeposit {\n\n  string public constant name = \"CryptoSaga Hero\";\n  string public constant symbol = \"HERO\";\n  \n  struct HeroClass {\n    // ex) Soldier, Knight, Fighter...\n    string className;\n    // 0: Common, 1: Uncommon, 2: Rare, 3: Heroic, 4: Legendary.\n    uint8 classRank;\n    // 0: Human, 1: Celestial, 2: Demon, 3: Elf, 4: Dark Elf, 5: Yogoe, 6: Furry, 7: Dragonborn, 8: Undead, 9: Goblin, 10: Troll, 11: Slime, and more to come.\n    uint8 classRace;\n    // How old is this hero class? \n    uint32 classAge;\n    // 0: Fighter, 1: Rogue, 2: Mage.\n    uint8 classType;\n\n    // Possible max level of this class.\n    uint32 maxLevel; \n    // 0: Water, 1: Fire, 2: Nature, 3: Light, 4: Darkness.\n    uint8 aura; \n\n    // Base stats of this hero type. \n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] baseStats;\n    // Minimum IVs for stats. \n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] minIVForStats;\n    // Maximum IVs for stats.\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] maxIVForStats;\n    \n    // Number of currently instanced heroes.\n    uint32 currentNumberOfInstancedHeroes;\n  }\n    \n  struct HeroInstance {\n    // What is this hero's type? ex) John, Sally, Mark...\n    uint32 heroClassId;\n    \n    // Individual hero's name.\n    string heroName;\n    \n    // Current level of this hero.\n    uint32 currentLevel;\n    // Current exp of this hero.\n    uint32 currentExp;\n\n    // Where has this hero been deployed? (0: Never depolyed ever.) ex) Dungeon Floor #1, Arena #5...\n    uint32 lastLocationId;\n    // When a hero is deployed, it takes time for the hero to return to the base. This is in Unix epoch.\n    uint256 availableAt;\n\n    // Current stats of this hero. \n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] currentStats;\n    // The individual value for this hero's stats. \n    // This will affect the current stats of heroes.\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\n    uint32[5] ivForStats;\n  }\n\n  // Required exp for level up will increase when heroes level up.\n  // This defines how the value will increase.\n  uint32 public requiredExpIncreaseFactor = 100;\n\n  // Required Gold for level up will increase when heroes level up.\n  // This defines how the value will increase.\n  uint256 public requiredGoldIncreaseFactor = 1000000000000000000;\n\n  // Existing hero classes.\n  mapping(uint32 => HeroClass) public heroClasses;\n  // The number of hero classes ever defined.\n  uint32 public numberOfHeroClasses;\n\n  // Existing hero instances.\n  // The key is _tokenId.\n  mapping(uint256 => HeroInstance) public tokenIdToHeroInstance;\n  // The number of tokens ever minted. This works as the serial number.\n  uint256 public numberOfTokenIds;\n\n  // Gold contract.\n  Gold public goldContract;\n\n  // Deposit of players (in Gold).\n  mapping(address => uint256) public addressToGoldDeposit;\n\n  // Random seed.\n  uint32 private seed = 0;\n\n  // Event that is fired when a hero type defined.\n  event DefineType(\n    address indexed _by,\n    uint32 indexed _typeId,\n    string _className\n  );\n\n  // Event that is fired when a hero is upgraded.\n  event LevelUp(\n    address indexed _by,\n    uint256 indexed _tokenId,\n    uint32 _newLevel\n  );\n\n  // Event that is fired when a hero is deployed.\n  event Deploy(\n    address indexed _by,\n    uint256 indexed _tokenId,\n    uint32 _locationId,\n    uint256 _duration\n  );\n\n  // @dev Get the class's entire infomation.\n  function getClassInfo(uint32 _classId)\n    external view\n    returns (string className, uint8 classRank, uint8 classRace, uint32 classAge, uint8 classType, uint32 maxLevel, uint8 aura, uint32[5] baseStats, uint32[5] minIVs, uint32[5] maxIVs) \n  {\n    var _cl = heroClasses[_classId];\n    return (_cl.className, _cl.classRank, _cl.classRace, _cl.classAge, _cl.classType, _cl.maxLevel, _cl.aura, _cl.baseStats, _cl.minIVForStats, _cl.maxIVForStats);\n  }\n\n  // @dev Get the class's name.\n  function getClassName(uint32 _classId)\n    external view\n    returns (string)\n  {\n    return heroClasses[_classId].className;\n  }\n\n  // @dev Get the class's rank.\n  function getClassRank(uint32 _classId)\n    external view\n    returns (uint8)\n  {\n    return heroClasses[_classId].classRank;\n  }\n\n  // @dev Get the heroes ever minted for the class.\n  function getClassMintCount(uint32 _classId)\n    external view\n    returns (uint32)\n  {\n    return heroClasses[_classId].currentNumberOfInstancedHeroes;\n  }\n\n  // @dev Get the hero's entire infomation.\n  function getHeroInfo(uint256 _tokenId)\n    external view\n    returns (uint32 classId, string heroName, uint32 currentLevel, uint32 currentExp, uint32 lastLocationId, uint256 availableAt, uint32[5] currentStats, uint32[5] ivs, uint32 bp)\n  {\n    HeroInstance memory _h = tokenIdToHeroInstance[_tokenId];\n    var _bp = _h.currentStats[0] + _h.currentStats[1] + _h.currentStats[2] + _h.currentStats[3] + _h.currentStats[4];\n    return (_h.heroClassId, _h.heroName, _h.currentLevel, _h.currentExp, _h.lastLocationId, _h.availableAt, _h.currentStats, _h.ivForStats, _bp);\n  }\n\n  // @dev Get the hero's class id.\n  function getHeroClassId(uint256 _tokenId)\n    external view\n    returns (uint32)\n  {\n    return tokenIdToHeroInstance[_tokenId].heroClassId;\n  }\n\n  // @dev Get the hero's name.\n  function getHeroName(uint256 _tokenId)\n    external view\n    returns (string)\n  {\n    return tokenIdToHeroInstance[_tokenId].heroName;\n  }\n\n  // @dev Get the hero's level.\n  function getHeroLevel(uint256 _tokenId)\n    external view\n    returns (uint32)\n  {\n    return tokenIdToHeroInstance[_tokenId].currentLevel;\n  }\n  \n  // @dev Get the hero's location.\n  function getHeroLocation(uint256 _tokenId)\n    external view\n    returns (uint32)\n  {\n    return tokenIdToHeroInstance[_tokenId].lastLocationId;\n  }\n\n  // @dev Get the time when the hero become available.\n  function getHeroAvailableAt(uint256 _tokenId)\n    external view\n    returns (uint256)\n  {\n    return tokenIdToHeroInstance[_tokenId].availableAt;\n  }\n\n  // @dev Get the hero's BP.\n  function getHeroBP(uint256 _tokenId)\n    public view\n    returns (uint32)\n  {\n    var _tmp = tokenIdToHeroInstance[_tokenId].currentStats;\n    return (_tmp[0] + _tmp[1] + _tmp[2] + _tmp[3] + _tmp[4]);\n  }\n\n  // @dev Get the hero's required gold for level up.\n  function getHeroRequiredGoldForLevelUp(uint256 _tokenId)\n    public view\n    returns (uint256)\n  {\n    return (uint256(2) ** (tokenIdToHeroInstance[_tokenId].currentLevel / 10)) * requiredGoldIncreaseFactor;\n  }\n\n  // @dev Get the hero's required exp for level up.\n  function getHeroRequiredExpForLevelUp(uint256 _tokenId)\n    public view\n    returns (uint32)\n  {\n    return ((tokenIdToHeroInstance[_tokenId].currentLevel + 2) * requiredExpIncreaseFactor);\n  }\n\n  // @dev Get the deposit of gold of the player.\n  function getGoldDepositOfAddress(address _address)\n    external view\n    returns (uint256)\n  {\n    return addressToGoldDeposit[_address];\n  }\n\n  // @dev Get the token id of the player's #th token.\n  function getTokenIdOfAddressAndIndex(address _address, uint256 _index)\n    external view\n    returns (uint256)\n  {\n    return tokensOf(_address)[_index];\n  }\n\n  // @dev Get the total BP of the player.\n  function getTotalBPOfAddress(address _address)\n    external view\n    returns (uint32)\n  {\n    var _tokens = tokensOf(_address);\n    uint32 _totalBP = 0;\n    for (uint256 i = 0; i < _tokens.length; i ++) {\n      _totalBP += getHeroBP(_tokens[i]);\n    }\n    return _totalBP;\n  }\n\n  // @dev Set the hero's name.\n  function setHeroName(uint256 _tokenId, string _name)\n    onlyOwnerOf(_tokenId)\n    public\n  {\n    tokenIdToHeroInstance[_tokenId].heroName = _name;\n  }\n\n  // @dev Set the address of the contract that represents ERC20 Gold.\n  function setGoldContract(address _contractAddress)\n    onlyOwner\n    public\n  {\n    goldContract = Gold(_contractAddress);\n  }\n\n  // @dev Set the required golds to level up a hero.\n  function setRequiredExpIncreaseFactor(uint32 _value)\n    onlyOwner\n    public\n  {\n    requiredExpIncreaseFactor = _value;\n  }\n\n  // @dev Set the required golds to level up a hero.\n  function setRequiredGoldIncreaseFactor(uint256 _value)\n    onlyOwner\n    public\n  {\n    requiredGoldIncreaseFactor = _value;\n  }\n\n  // @dev Contructor.\n  function CryptoSagaHero(address _goldAddress)\n    public\n  {\n    require(_goldAddress != address(0));\n\n    // Assign Gold contract.\n    setGoldContract(_goldAddress);\n\n    // Initial heroes.\n    // Name, Rank, Race, Age, Type, Max Level, Aura, Stats.\n    defineType(\"Archangel\", 4, 1, 13540, 0, 99, 3, [uint32(74), 75, 57, 99, 95], [uint32(8), 6, 8, 5, 5], [uint32(8), 10, 10, 6, 6]);\n    defineType(\"Shadowalker\", 3, 4, 134, 1, 75, 4, [uint32(45), 35, 60, 80, 40], [uint32(3), 2, 10, 4, 5], [uint32(5), 5, 10, 7, 5]);\n    defineType(\"Pyromancer\", 2, 0, 14, 2, 50, 1, [uint32(50), 28, 17, 40, 35], [uint32(5), 3, 2, 3, 3], [uint32(8), 4, 3, 4, 5]);\n    defineType(\"Magician\", 1, 3, 224, 2, 30, 0, [uint32(35), 15, 25, 25, 30], [uint32(3), 1, 2, 2, 2], [uint32(5), 2, 3, 3, 3]);\n    defineType(\"Farmer\", 0, 0, 59, 0, 15, 2, [uint32(10), 22, 8, 15, 25], [uint32(1), 2, 1, 1, 2], [uint32(1), 3, 1, 2, 3]);\n  }\n\n  // @dev Define a new hero type (class).\n  function defineType(string _className, uint8 _classRank, uint8 _classRace, uint32 _classAge, uint8 _classType, uint32 _maxLevel, uint8 _aura, uint32[5] _baseStats, uint32[5] _minIVForStats, uint32[5] _maxIVForStats)\n    onlyOwner\n    public\n  {\n    require(_classRank < 5);\n    require(_classType < 3);\n    require(_aura < 5);\n    require(_minIVForStats[0] <= _maxIVForStats[0] && _minIVForStats[1] <= _maxIVForStats[1] && _minIVForStats[2] <= _maxIVForStats[2] && _minIVForStats[3] <= _maxIVForStats[3] && _minIVForStats[4] <= _maxIVForStats[4]);\n\n    HeroClass memory _heroType = HeroClass({\n      className: _className,\n      classRank: _classRank,\n      classRace: _classRace,\n      classAge: _classAge,\n      classType: _classType,\n      maxLevel: _maxLevel,\n      aura: _aura,\n      baseStats: _baseStats,\n      minIVForStats: _minIVForStats,\n      maxIVForStats: _maxIVForStats,\n      currentNumberOfInstancedHeroes: 0\n    });\n\n    // Save the hero class.\n    heroClasses[numberOfHeroClasses] = _heroType;\n\n    // Fire event.\n    DefineType(msg.sender, numberOfHeroClasses, _heroType.className);\n\n    // Increment number of hero classes.\n    numberOfHeroClasses ++;\n\n  }\n\n  // @dev Mint a new hero, with _heroClassId.\n  function mint(address _owner, uint32 _heroClassId)\n    onlyAccessMint\n    public\n    returns (uint256)\n  {\n    require(_owner != address(0));\n    require(_heroClassId < numberOfHeroClasses);\n\n    // The information of the hero's class.\n    var _heroClassInfo = heroClasses[_heroClassId];\n\n    // Mint ERC721 token.\n    _mint(_owner, numberOfTokenIds);\n\n    // Build random IVs for this hero instance.\n    uint32[5] memory _ivForStats;\n    uint32[5] memory _initialStats;\n    for (uint8 i = 0; i < 5; i++) {\n      _ivForStats[i] = (random(_heroClassInfo.maxIVForStats[i] + 1, _heroClassInfo.minIVForStats[i]));\n      _initialStats[i] = _heroClassInfo.baseStats[i] + _ivForStats[i];\n    }\n\n    // Temporary hero instance.\n    HeroInstance memory _heroInstance = HeroInstance({\n      heroClassId: _heroClassId,\n      heroName: \"\",\n      currentLevel: 1,\n      currentExp: 0,\n      lastLocationId: 0,\n      availableAt: now,\n      currentStats: _initialStats,\n      ivForStats: _ivForStats\n    });\n\n    // Save the hero instance.\n    tokenIdToHeroInstance[numberOfTokenIds] = _heroInstance;\n\n    // Increment number of token ids.\n    // This will only increment when new token is minted, and will never be decemented when the token is burned.\n    numberOfTokenIds ++;\n\n     // Increment instanced number of heroes.\n    _heroClassInfo.currentNumberOfInstancedHeroes ++;\n\n    return numberOfTokenIds - 1;\n  }\n\n  // @dev Set where the heroes are deployed, and when they will return.\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\n  function deploy(uint256 _tokenId, uint32 _locationId, uint256 _duration)\n    onlyAccessDeploy\n    public\n    returns (bool)\n  {\n    // The hero should be possessed by anybody.\n    require(ownerOf(_tokenId) != address(0));\n\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\n\n    // The character should be avaiable. \n    require(_heroInstance.availableAt <= now);\n\n    _heroInstance.lastLocationId = _locationId;\n    _heroInstance.availableAt = now + _duration;\n\n    // As the hero has been deployed to another place, fire event.\n    Deploy(msg.sender, _tokenId, _locationId, _duration);\n  }\n\n  // @dev Add exp.\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\n  function addExp(uint256 _tokenId, uint32 _exp)\n    onlyAccessDeploy\n    public\n    returns (bool)\n  {\n    // The hero should be possessed by anybody.\n    require(ownerOf(_tokenId) != address(0));\n\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\n\n    var _newExp = _heroInstance.currentExp + _exp;\n\n    // Sanity check to ensure we don't overflow.\n    require(_newExp == uint256(uint128(_newExp)));\n\n    _heroInstance.currentExp += _newExp;\n\n  }\n\n  // @dev Add deposit.\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\n  function addDeposit(address _to, uint256 _amount)\n    onlyAccessDeposit\n    public\n  {\n    // Increment deposit.\n    addressToGoldDeposit[_to] += _amount;\n  }\n\n  // @dev Level up the hero with _tokenId.\n  //  This function is called by the owner of the hero.\n  function levelUp(uint256 _tokenId)\n    onlyOwnerOf(_tokenId) whenNotPaused\n    public\n  {\n\n    // Hero instance.\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\n\n    // The character should be avaiable. (Should have already returned from the dungeons, arenas, etc.)\n    require(_heroInstance.availableAt <= now);\n\n    // The information of the hero's class.\n    var _heroClassInfo = heroClasses[_heroInstance.heroClassId];\n\n    // Hero shouldn't level up exceed its max level.\n    require(_heroInstance.currentLevel < _heroClassInfo.maxLevel);\n\n    // Required Exp.\n    var requiredExp = getHeroRequiredExpForLevelUp(_tokenId);\n\n    // Need to have enough exp.\n    require(_heroInstance.currentExp >= requiredExp);\n\n    // Required Gold.\n    var requiredGold = getHeroRequiredGoldForLevelUp(_tokenId);\n\n    // Owner of token.\n    var _ownerOfToken = ownerOf(_tokenId);\n\n    // Need to have enough Gold balance.\n    require(addressToGoldDeposit[_ownerOfToken] >= requiredGold);\n\n    // Increase Level.\n    _heroInstance.currentLevel += 1;\n\n    // Increase Stats.\n    for (uint8 i = 0; i < 5; i++) {\n      _heroInstance.currentStats[i] = _heroClassInfo.baseStats[i] + (_heroInstance.currentLevel - 1) * _heroInstance.ivForStats[i];\n    }\n    \n    // Deduct exp.\n    _heroInstance.currentExp -= requiredExp;\n\n    // Deduct gold.\n    addressToGoldDeposit[_ownerOfToken] -= requiredGold;\n\n    // Fire event.\n    LevelUp(msg.sender, _tokenId, _heroInstance.currentLevel);\n  }\n\n  // @dev Transfer deposit (with the allowance pattern.)\n  function transferDeposit(uint256 _amount)\n    whenNotPaused\n    public\n  {\n    require(goldContract.allowance(msg.sender, this) >= _amount);\n\n    // Send msg.sender's Gold to this contract.\n    if (goldContract.transferFrom(msg.sender, this, _amount)) {\n       // Increment deposit.\n      addressToGoldDeposit[msg.sender] += _amount;\n    }\n  }\n\n  // @dev Withdraw deposit.\n  function withdrawDeposit(uint256 _amount)\n    public\n  {\n    require(addressToGoldDeposit[msg.sender] >= _amount);\n\n    // Send deposit of Golds to msg.sender. (Rather minting...)\n    if (goldContract.transfer(msg.sender, _amount)) {\n      // Decrement deposit.\n      addressToGoldDeposit[msg.sender] -= _amount;\n    }\n  }\n\n  // @dev return a pseudo random number between lower and upper bounds\n  function random(uint32 _upper, uint32 _lower)\n    private\n    returns (uint32)\n  {\n    require(_upper > _lower);\n\n    seed = uint32(keccak256(keccak256(block.blockhash(block.number), seed), now));\n    return seed % (_upper - _lower) + _lower;\n  }\n\n}\n\n\n/**\n * @title CryptoSagaCorrectedHeroStats\n * @dev Corrected hero stats is needed to fix the bug in hero stats.\n */\ncontract CryptoSagaCorrectedHeroStats {\n\n  // The hero contract.\n  CryptoSagaHero private heroContract;\n\n  // @dev Constructor.\n  function CryptoSagaCorrectedHeroStats(address _heroContractAddress)\n    public\n  {\n    heroContract = CryptoSagaHero(_heroContractAddress);\n  }\n\n  // @dev Get the hero's stats and some other infomation.\n  function getCorrectedStats(uint256 _tokenId)\n    external view\n    returns (uint32 currentLevel, uint32 currentExp, uint32[5] currentStats, uint32[5] ivs, uint32 bp)\n  {\n    var (, , _currentLevel, _currentExp, , , _currentStats, _ivs, ) = heroContract.getHeroInfo(_tokenId);\n    \n    if (_currentLevel != 1) {\n      for (uint8 i = 0; i < 5; i ++) {\n        _currentStats[i] += _ivs[i];\n      }\n    }\n\n    var _bp = _currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4];\n    return (_currentLevel, _currentExp, _currentStats, _ivs, _bp);\n  }\n\n  // @dev Get corrected total BP of the address.\n  function getCorrectedTotalBPOfAddress(address _address)\n    external view\n    returns (uint32)\n  {\n    var _balance = heroContract.balanceOf(_address);\n\n    uint32 _totalBP = 0;\n\n    for (uint256 i = 0; i < _balance; i ++) {\n      var (, , _currentLevel, , , , _currentStats, _ivs, ) = heroContract.getHeroInfo(heroContract.getTokenIdOfAddressAndIndex(_address, i));\n      if (_currentLevel != 1) {\n        for (uint8 j = 0; j < 5; j ++) {\n          _currentStats[j] += _ivs[j];\n        }\n      }\n      _totalBP += (_currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4]);\n    }\n\n    return _totalBP;\n  }\n\n  // @dev Get corrected total BP of the address.\n  function getCorrectedTotalBPOfTokens(uint256[] _tokens)\n    external view\n    returns (uint32)\n  {\n    uint32 _totalBP = 0;\n\n    for (uint256 i = 0; i < _tokens.length; i ++) {\n      var (, , _currentLevel, , , , _currentStats, _ivs, ) = heroContract.getHeroInfo(_tokens[i]);\n      if (_currentLevel != 1) {\n        for (uint8 j = 0; j < 5; j ++) {\n          _currentStats[j] += _ivs[j];\n        }\n      }\n      _totalBP += (_currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4]);\n    }\n\n    return _totalBP;\n  }\n}\n\n\n\n/**\n * @title CryptoSagaArenaRecord\n * @dev The record of battles in the Arena.\n */\ncontract CryptoSagaArenaRecord is Pausable, AccessDeploy {\n\n  // Number of players for the leaderboard.\n  uint8 public numberOfLeaderboardPlayers = 25;\n\n  // Top players in the leaderboard.\n  address[] public leaderBoardPlayers;\n\n  // For checking whether the player is in the leaderboard.\n  mapping(address => bool) public addressToIsInLeaderboard;\n\n  // Number of recent player recorded for matchmaking.\n  uint8 public numberOfRecentPlayers = 50;\n\n  // List of recent players.\n  address[] public recentPlayers;\n\n  // Front of recent players.\n  uint256 public recentPlayersFront;\n\n  // Back of recent players.\n  uint256 public recentPlayersBack;\n\n  // Record of each player.\n  mapping(address => uint32) public addressToElo;\n\n  // Event that is fired when a new change has been made to the leaderboard.\n  event UpdateLeaderboard(\n    address indexed _by,\n    uint256 _dateTime\n  );\n\n  // @dev Get elo rating of a player.\n  function getEloRating(address _address)\n    external view\n    returns (uint32)\n  {\n    if (addressToElo[_address] != 0)\n      return addressToElo[_address];\n    else\n      return 1500;\n  }\n\n  // @dev Get players in the leaderboard.\n  function getLeaderboardPlayers()\n    external view\n    returns (address[])\n  {\n    return leaderBoardPlayers;\n  }\n\n  // @dev Get current length of the leaderboard.\n  function getLeaderboardLength()\n    external view\n    returns (uint256)\n  {\n    return leaderBoardPlayers.length;\n  }\n\n  // @dev Get recently played players.\n  function getRecentPlayers()\n    external view\n    returns (address[])\n  {\n    return recentPlayers;\n  }\n\n  // @dev Get current number of players in the recently played players queue.\n  function getRecentPlayersCount()\n    public view\n    returns (uint256) \n  {\n    return recentPlayersBack - recentPlayersFront;\n  }\n\n  // @dev Constructor.\n  function CryptoSagaArenaRecord(\n    address _firstPlayerAddress,\n    address _previousSeasonRecord,\n    uint8 _numberOfLeaderboardPlayers, \n    uint8 _numberOfRecentPlayers)\n    public\n  {\n\n    numberOfLeaderboardPlayers = _numberOfLeaderboardPlayers;\n    numberOfRecentPlayers = _numberOfRecentPlayers;\n\n    // The initial player gets into leaderboard.\n    leaderBoardPlayers.push(_firstPlayerAddress);\n    addressToIsInLeaderboard[_firstPlayerAddress] = true;\n\n    // The initial player pushed into the recent players queue. \n    pushPlayer(_firstPlayerAddress);\n    \n    // The initial player's Elo.\n    addressToElo[_firstPlayerAddress] = 1500;\n\n    // Get instance of previous season.\n    CryptoSagaArenaRecord _previous = CryptoSagaArenaRecord(_previousSeasonRecord);\n\n    for (uint256 i = _previous.recentPlayersFront(); i < _previous.recentPlayersBack(); i++) {\n      var _player = _previous.recentPlayers(i);\n      // The initial player's Elo.\n      addressToElo[_player] = _previous.getEloRating(_player);\n    }\n  }\n\n  // @dev Update record.\n  function updateRecord(address _myAddress, address _enemyAddress, bool _didWin)\n    whenNotPaused onlyAccessDeploy\n    public\n  {\n    address _winnerAddress = _didWin? _myAddress: _enemyAddress;\n    address _loserAddress = _didWin? _enemyAddress: _myAddress;\n    \n    // Initial value of Elo.\n    uint32 _winnerElo = addressToElo[_winnerAddress];\n    if (_winnerElo == 0)\n      _winnerElo = 1500;\n    uint32 _loserElo = addressToElo[_loserAddress];\n    if (_loserElo == 0)\n      _loserElo = 1500;\n\n    // Adjust Elo.\n    if (_winnerElo >= _loserElo) {\n      if (_winnerElo - _loserElo < 50) {\n        addressToElo[_winnerAddress] = _winnerElo + 5;\n        addressToElo[_loserAddress] = _loserElo - 5;\n      } else if (_winnerElo - _loserElo < 80) {\n        addressToElo[_winnerAddress] = _winnerElo + 4;\n        addressToElo[_loserAddress] = _loserElo - 4;\n      } else if (_winnerElo - _loserElo < 150) {\n        addressToElo[_winnerAddress] = _winnerElo + 3;\n        addressToElo[_loserAddress] = _loserElo - 3;\n      } else if (_winnerElo - _loserElo < 250) {\n        addressToElo[_winnerAddress] = _winnerElo + 2;\n        addressToElo[_loserAddress] = _loserElo - 2;\n      } else {\n        addressToElo[_winnerAddress] = _winnerElo + 1;\n        addressToElo[_loserAddress] = _loserElo - 1;\n      }\n    } else {\n      if (_loserElo - _winnerElo < 50) {\n        addressToElo[_winnerAddress] = _winnerElo + 5;\n        addressToElo[_loserAddress] = _loserElo - 5;\n      } else if (_loserElo - _winnerElo < 80) {\n        addressToElo[_winnerAddress] = _winnerElo + 6;\n        addressToElo[_loserAddress] = _loserElo - 6;\n      } else if (_loserElo - _winnerElo < 150) {\n        addressToElo[_winnerAddress] = _winnerElo + 7;\n        addressToElo[_loserAddress] = _loserElo - 7;\n      } else if (_loserElo - _winnerElo < 250) {\n        addressToElo[_winnerAddress] = _winnerElo + 8;\n        addressToElo[_loserAddress] = _loserElo - 8;\n      } else {\n        addressToElo[_winnerAddress] = _winnerElo + 9;\n        addressToElo[_loserAddress] = _loserElo - 9;\n      }\n    }\n\n    // Update recent players list.\n    if (!isPlayerInQueue(_myAddress)) {\n      \n      // If the queue is full, pop a player.\n      if (getRecentPlayersCount() >= numberOfRecentPlayers)\n        popPlayer();\n      \n      // Push _myAddress to the queue.\n      pushPlayer(_myAddress);\n    }\n\n    // Update leaderboards.\n    if(updateLeaderboard(_enemyAddress) || updateLeaderboard(_myAddress))\n    {\n      UpdateLeaderboard(_myAddress, now);\n    }\n\n  }\n\n  // @dev Update leaderboard.\n  function updateLeaderboard(address _addressToUpdate)\n    whenNotPaused\n    private\n    returns (bool isChanged)\n  {\n\n    // If this players is already in the leaderboard, there's no need for replace the minimum recorded player.\n    if (addressToIsInLeaderboard[_addressToUpdate]) {\n      // Do nothing.\n    } else {\n      if (leaderBoardPlayers.length >= numberOfLeaderboardPlayers) {\n        \n        // Need to replace existing player.\n        // First, we need to find the player with miminum Elo value.\n        uint32 _minimumElo = 99999;\n        uint8 _minimumEloPlayerIndex = numberOfLeaderboardPlayers;\n        for (uint8 i = 0; i < leaderBoardPlayers.length; i ++) {\n          if (_minimumElo > addressToElo[leaderBoardPlayers[i]]) {\n            _minimumElo = addressToElo[leaderBoardPlayers[i]];\n            _minimumEloPlayerIndex = i;\n          }\n        }\n\n        // Second, if the minimum elo value is smaller than the player's elo value, then replace the entity.\n        if (_minimumElo <= addressToElo[_addressToUpdate]) {\n          addressToIsInLeaderboard[leaderBoardPlayers[_minimumEloPlayerIndex]] = false;\n          leaderBoardPlayers[_minimumEloPlayerIndex] = _addressToUpdate;\n          addressToIsInLeaderboard[_addressToUpdate] = true;\n          isChanged = true;\n        }\n      } else {\n        // The list is not full yet. \n        // Just add the player to the list.\n        leaderBoardPlayers.push(_addressToUpdate);\n        addressToIsInLeaderboard[_addressToUpdate] = true;\n        isChanged = true;\n      }\n    }\n  }\n\n  // #dev Check whether contain the element or not.\n  function isPlayerInQueue(address _player)\n    view private\n    returns (bool isContain)\n  {\n    isContain = false;\n    for (uint256 i = recentPlayersFront; i < recentPlayersBack; i++) {\n      if (_player == recentPlayers[i]) {\n        isContain = true;\n      }\n    }\n  }\n    \n  // @dev Push a new player into the queue.\n  function pushPlayer(address _player)\n    private\n  {\n    recentPlayers.push(_player);\n    recentPlayersBack++;\n  }\n    \n  // @dev Pop the oldest player in this queue.\n  function popPlayer() \n    private\n    returns (address player)\n  {\n    if (recentPlayersBack == recentPlayersFront)\n      return address(0);\n    player = recentPlayers[recentPlayersFront];\n    delete recentPlayers[recentPlayersFront];\n    recentPlayersFront++;\n  }\n\n}\n\n\n/**\n * @title CryptoSagaArenaVer1\n * @dev The actual gameplay is done by this contract. Version 1.0.2.\n */\ncontract CryptoSagaArenaVer1 is Claimable, Pausable {\n\n  struct PlayRecord {\n    // This is needed for reconstructing the record.\n    uint32 initialSeed;\n    // The address of the enemy player.\n    address enemyAddress;\n    // Hero's token ids.\n    uint256[8] tokenIds;\n    // Unit's class ids. 0 ~ 3: Heroes. 4 ~ 7: Mobs.\n    uint32[8] unitClassIds;\n    // Unit's levels. 0 ~ 3: Heroes. 4 ~ 7: Mobs.\n    uint32[8] unitLevels;\n    // Exp reward given.\n    uint32 expReward;\n    // Gold Reward given.\n    uint256 goldReward;\n  }\n\n  // This information can be reconstructed with seed and dateTime.\n  // For the optimization this won't be really used.\n  struct TurnInfo {\n    // Number of turns before a team was vanquished.\n    uint8 turnLength;\n    // Turn order of units.\n    uint8[8] turnOrder;\n    // Defender list. (The unit that is attacked.)\n    uint8[24] defenderList;\n    // Damage list. (The damage given to the defender.)\n    uint32[24] damageList;\n    // Heroes' original Exps.\n    uint32[4] originalExps;\n  }\n\n  // Progress contract.\n  CryptoSagaArenaRecord public recordContract;\n\n  // The hero contract.\n  CryptoSagaHero public heroContract;\n\n  // Corrected hero stats contract.\n  CryptoSagaCorrectedHeroStats public correctedHeroContract;\n\n  // Gold contract.\n  Gold public goldContract;\n\n  // Card contract.\n  CryptoSagaCard public cardContract;\n\n  // The location Id of this contract.\n  // Will be used when calling deploy function of hero contract.\n  uint32 public locationId = 100;\n\n  // Hero cooldown time. (Default value: 60 mins.)\n  uint256 public coolHero = 3600;\n\n  // The exp reward for fighting in this arena.\n  uint32 public expReward = 100;\n\n  // The Gold reward when fighting in this arena.\n  uint256 public goldReward = 1000000000000000000;\n\n  // Should this contract save the turn data?\n  bool public isTurnDataSaved = true;\n\n  // Last game's record of the player.\n  mapping(address => PlayRecord) public addressToPlayRecord;\n\n  // Additional information on last game's record of the player.\n  mapping(address => TurnInfo) public addressToTurnInfo;\n\n  // Random seed.\n  uint32 private seed = 0;\n\n  // Event that is fired when a player fights in this arena.\n  event TryArena(\n    address indexed _by,\n    address indexed _against,\n    bool _didWin\n  );\n\n  // @dev Get previous game record.\n  function getPlayRecord(address _address)\n    external view\n    returns (uint32, address, uint256[8], uint32[8], uint32[8], uint32, uint256, uint8, uint8[8], uint8[24], uint32[24])\n  {\n    PlayRecord memory _p = addressToPlayRecord[_address];\n    TurnInfo memory _t = addressToTurnInfo[_address];\n    return (\n      _p.initialSeed,\n      _p.enemyAddress,\n      _p.tokenIds,\n      _p.unitClassIds,\n      _p.unitLevels,\n      _p.expReward,\n      _p.goldReward,\n      _t.turnLength,\n      _t.turnOrder,\n      _t.defenderList,\n      _t.damageList\n    );\n  }\n\n  // @dev Get previous game record.\n  function getPlayRecordNoTurnData(address _address)\n    external view\n    returns (uint32, address, uint256[8], uint32[8], uint32[8], uint32, uint256)\n  {\n    PlayRecord memory _p = addressToPlayRecord[_address];\n    return (\n      _p.initialSeed,\n      _p.enemyAddress,\n      _p.tokenIds,\n      _p.unitClassIds,\n      _p.unitLevels,\n      _p.expReward,\n      _p.goldReward\n      );\n  }\n\n  // @dev Set location id.\n  function setLocationId(uint32 _value)\n    onlyOwner\n    public\n  {\n    locationId = _value;\n  }\n\n  // @dev Set cooldown of heroes entered this arena.\n  function setCoolHero(uint32 _value)\n    onlyOwner\n    public\n  {\n    coolHero = _value;\n  }\n\n  // @dev Set the Exp given to the player for fighting in this arena.\n  function setExpReward(uint32 _value)\n    onlyOwner\n    public\n  {\n    expReward = _value;\n  }\n\n  // @dev Set the Golds given to the player for fighting in this arena.\n  function setGoldReward(uint256 _value)\n    onlyOwner\n    public\n  {\n    goldReward = _value;\n  }\n\n  // @dev Set wether the turn data saved or not.\n  function setIsTurnDataSaved(bool _value)\n    onlyOwner\n    public\n  {\n    isTurnDataSaved = _value;\n  }\n\n  // @dev Set Record Contract.\n  function setRecordContract(address _address)\n    onlyOwner\n    public\n  {\n    recordContract = CryptoSagaArenaRecord(_address);\n  }\n\n  // @dev Constructor.\n  function CryptoSagaArenaVer1(\n    address _recordContractAddress,\n    address _heroContractAddress,\n    address _correctedHeroContractAddress,\n    address _cardContractAddress,\n    address _goldContractAddress,\n    address _firstPlayerAddress,\n    uint32 _locationId,\n    uint256 _coolHero,\n    uint32 _expReward,\n    uint256 _goldReward,\n    bool _isTurnDataSaved)\n    public\n  {\n    recordContract = CryptoSagaArenaRecord(_recordContractAddress);\n    heroContract = CryptoSagaHero(_heroContractAddress);\n    correctedHeroContract = CryptoSagaCorrectedHeroStats(_correctedHeroContractAddress);\n    cardContract = CryptoSagaCard(_cardContractAddress);\n    goldContract = Gold(_goldContractAddress);\n\n    // Save first player's record.\n    // This is for preventing errors.\n    PlayRecord memory _playRecord;\n    _playRecord.initialSeed = seed;\n    _playRecord.enemyAddress = _firstPlayerAddress;\n    _playRecord.tokenIds[0] = 1;\n    _playRecord.tokenIds[1] = 2;\n    _playRecord.tokenIds[2] = 3;\n    _playRecord.tokenIds[3] = 4;\n    _playRecord.tokenIds[4] = 5;\n    _playRecord.tokenIds[5] = 6;\n    _playRecord.tokenIds[6] = 7;\n    _playRecord.tokenIds[7] = 8;\n    addressToPlayRecord[_firstPlayerAddress] = _playRecord;\n    \n    locationId = _locationId;\n    coolHero = _coolHero;\n    expReward = _expReward;\n    goldReward = _goldReward;\n    \n    isTurnDataSaved = _isTurnDataSaved;\n  }\n  \n  // @dev Enter this arena.\n  function enterArena(uint256[4] _tokenIds, address _enemyAddress)\n    whenNotPaused\n    public\n  {\n\n    // Shouldn't fight against self.\n    require(msg.sender != _enemyAddress);\n\n    // Each hero should be with different ids.\n    require(_tokenIds[0] == 0 || (_tokenIds[0] != _tokenIds[1] && _tokenIds[0] != _tokenIds[2] && _tokenIds[0] != _tokenIds[3]));\n    require(_tokenIds[1] == 0 || (_tokenIds[1] != _tokenIds[0] && _tokenIds[1] != _tokenIds[2] && _tokenIds[1] != _tokenIds[3]));\n    require(_tokenIds[2] == 0 || (_tokenIds[2] != _tokenIds[0] && _tokenIds[2] != _tokenIds[1] && _tokenIds[2] != _tokenIds[3]));\n    require(_tokenIds[3] == 0 || (_tokenIds[3] != _tokenIds[0] && _tokenIds[3] != _tokenIds[1] && _tokenIds[3] != _tokenIds[2]));\n\n    // Check ownership and availability of the heroes.\n    require(checkOwnershipAndAvailability(msg.sender, _tokenIds));\n\n    // The play record of the enemy should exist.\n    // The check is done with the enemy's enemy address, because the default value of it will be address(0).\n    require(addressToPlayRecord[_enemyAddress].enemyAddress != address(0));\n\n    // Set seed.\n    seed += uint32(now);\n\n    // Define play record here.\n    PlayRecord memory _playRecord;\n    _playRecord.initialSeed = seed;\n    _playRecord.enemyAddress = _enemyAddress;\n    _playRecord.tokenIds[0] = _tokenIds[0];\n    _playRecord.tokenIds[1] = _tokenIds[1];\n    _playRecord.tokenIds[2] = _tokenIds[2];\n    _playRecord.tokenIds[3] = _tokenIds[3];\n\n    // The information that can give additional information.\n    TurnInfo memory _turnInfo;\n\n    // Step 1: Retrieve Hero information (0 ~ 3) & Enemy information (4 ~ 7).\n\n    uint32[5][8] memory _unitStats; // Stats of units for given levels and class ids.\n    uint8[2][8] memory _unitTypesAuras; // 0: Types of units for given levels and class ids. 1: Auras of units for given levels and class ids.\n\n    // Retrieve deployed hero information.\n    if (_tokenIds[0] != 0) {\n      _playRecord.unitClassIds[0] = heroContract.getHeroClassId(_tokenIds[0]);\n      (_playRecord.unitLevels[0], _turnInfo.originalExps[0], _unitStats[0], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[0]);\n      (, , , , _unitTypesAuras[0][0], , _unitTypesAuras[0][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[0]);\n    }\n    if (_tokenIds[1] != 0) {\n      _playRecord.unitClassIds[1] = heroContract.getHeroClassId(_tokenIds[1]);\n      (_playRecord.unitLevels[1], _turnInfo.originalExps[1], _unitStats[1], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[1]);\n      (, , , , _unitTypesAuras[1][0], , _unitTypesAuras[1][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[1]);\n    }\n    if (_tokenIds[2] != 0) {\n      _playRecord.unitClassIds[2] = heroContract.getHeroClassId(_tokenIds[2]);\n      (_playRecord.unitLevels[2], _turnInfo.originalExps[2], _unitStats[2], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[2]);\n      (, , , , _unitTypesAuras[2][0], , _unitTypesAuras[2][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[2]);\n    }\n    if (_tokenIds[3] != 0) {\n      _playRecord.unitClassIds[3] = heroContract.getHeroClassId(_tokenIds[3]);\n      (_playRecord.unitLevels[3], _turnInfo.originalExps[3], _unitStats[3], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[3]);\n      (, , , , _unitTypesAuras[3][0], , _unitTypesAuras[3][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[3]);\n    }\n\n    // Retrieve enemy information.\n    PlayRecord memory _enemyPlayRecord = addressToPlayRecord[_enemyAddress];\n    if (_enemyPlayRecord.tokenIds[0] != 0) {\n      _playRecord.unitClassIds[4] = heroContract.getHeroClassId(_enemyPlayRecord.tokenIds[0]);\n      (_playRecord.unitLevels[4], , _unitStats[4], , ) = correctedHeroContract.getCorrectedStats(_enemyPlayRecord.tokenIds[0]);\n      (, , , , _unitTypesAuras[4][0], , _unitTypesAuras[4][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[4]);\n    }\n    if (_enemyPlayRecord.tokenIds[1] != 0) {\n      _playRecord.unitClassIds[5] = heroContract.getHeroClassId(_enemyPlayRecord.tokenIds[1]);\n      (_playRecord.unitLevels[5], , _unitStats[5], , ) = correctedHeroContract.getCorrectedStats(_enemyPlayRecord.tokenIds[1]);\n      (, , , , _unitTypesAuras[5][0], , _unitTypesAuras[5][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[5]);\n    }\n    if (_enemyPlayRecord.tokenIds[2] != 0) {\n      _playRecord.unitClassIds[6] = heroContract.getHeroClassId(_enemyPlayRecord.tokenIds[2]);\n      (_playRecord.unitLevels[6], , _unitStats[6], , ) = correctedHeroContract.getCorrectedStats(_enemyPlayRecord.tokenIds[2]);\n      (, , , , _unitTypesAuras[6][0], , _unitTypesAuras[6][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[6]);\n    }\n    if (_enemyPlayRecord.tokenIds[3] != 0) {\n      _playRecord.unitClassIds[7] = heroContract.getHeroClassId(_enemyPlayRecord.tokenIds[3]);\n      (_playRecord.unitLevels[7], , _unitStats[7], , ) = correctedHeroContract.getCorrectedStats(_enemyPlayRecord.tokenIds[3]);\n      (, , , , _unitTypesAuras[7][0], , _unitTypesAuras[7][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[7]);\n    }\n\n    // Additional token ids for enemies.\n    // Unlike dungeons, arena needs IVs for the enemy heroes.\n    _playRecord.tokenIds[4] = _enemyPlayRecord.tokenIds[0];\n    _playRecord.tokenIds[5] = _enemyPlayRecord.tokenIds[1];\n    _playRecord.tokenIds[6] = _enemyPlayRecord.tokenIds[2];\n    _playRecord.tokenIds[7] = _enemyPlayRecord.tokenIds[3];\n\n    // Step 2. Run the battle logic.\n    \n    // Firstly, we need to assign the unit's turn order with AGLs of the units.\n    uint32[8] memory _unitAGLs;\n    for (uint8 i = 0; i < 8; i ++) {\n      _unitAGLs[i] = _unitStats[i][2];\n    }\n    _turnInfo.turnOrder = getOrder(_unitAGLs);\n    \n    // Fight for 24 turns. (8 units x 3 rounds.)\n    _turnInfo.turnLength = 24;\n    for (i = 0; i < 24; i ++) {\n      if (_unitStats[4][4] == 0 && _unitStats[5][4] == 0 && _unitStats[6][4] == 0 && _unitStats[7][4] == 0) {\n        _turnInfo.turnLength = i;\n        break;\n      } else if (_unitStats[0][4] == 0 && _unitStats[1][4] == 0 && _unitStats[2][4] == 0 && _unitStats[3][4] == 0) {\n        _turnInfo.turnLength = i;\n        break;\n      }\n      \n      var _slotId = _turnInfo.turnOrder[(i % 8)];\n      if (_slotId < 4 && _tokenIds[_slotId] == 0) {\n        // This means the slot is empty.\n        // Defender should be default value.\n        _turnInfo.defenderList[i] = 127;\n      } else if (_unitStats[_slotId][4] == 0) {\n        // This means the unit on this slot is dead.\n        // Defender should be default value.\n        _turnInfo.defenderList[i] = 128;\n      } else {\n        // 1) Check number of attack targets that are alive.\n        uint8 _targetSlotId = 255;\n        if (_slotId < 4) {\n          if (_unitStats[4][4] > 0)\n            _targetSlotId = 4;\n          else if (_unitStats[5][4] > 0)\n            _targetSlotId = 5;\n          else if (_unitStats[6][4] > 0)\n            _targetSlotId = 6;\n          else if (_unitStats[7][4] > 0)\n            _targetSlotId = 7;\n        } else {\n          if (_unitStats[0][4] > 0)\n            _targetSlotId = 0;\n          else if (_unitStats[1][4] > 0)\n            _targetSlotId = 1;\n          else if (_unitStats[2][4] > 0)\n            _targetSlotId = 2;\n          else if (_unitStats[3][4] > 0)\n            _targetSlotId = 3;\n        }\n        \n        // Target is the defender.\n        _turnInfo.defenderList[i] = _targetSlotId;\n        \n        // Base damage. (Attacker's ATK * 1.5 - Defender's DEF).\n        uint32 _damage = 10;\n        if ((_unitStats[_slotId][0] * 150 / 100) > _unitStats[_targetSlotId][1])\n          _damage = max((_unitStats[_slotId][0] * 150 / 100) - _unitStats[_targetSlotId][1], 10);\n        else\n          _damage = 10;\n\n        // Check miss / success.\n        if ((_unitStats[_slotId][3] * 150 / 100) > _unitStats[_targetSlotId][2]) {\n          if (min(max(((_unitStats[_slotId][3] * 150 / 100) - _unitStats[_targetSlotId][2]), 75), 99) <= random(100, 0))\n            _damage = _damage * 0;\n        }\n        else {\n          if (75 <= random(100, 0))\n            _damage = _damage * 0;\n        }\n\n        // Is the attack critical?\n        if (_unitStats[_slotId][3] > _unitStats[_targetSlotId][3]) {\n          if (min(max((_unitStats[_slotId][3] - _unitStats[_targetSlotId][3]), 5), 75) > random(100, 0))\n            _damage = _damage * 150 / 100;\n        }\n        else {\n          if (5 > random(100, 0))\n            _damage = _damage * 150 / 100;\n        }\n\n        // Is attacker has the advantageous Type?\n        if (_unitTypesAuras[_slotId][0] == 0 && _unitTypesAuras[_targetSlotId][0] == 1) // Fighter > Rogue\n          _damage = _damage * 125 / 100;\n        else if (_unitTypesAuras[_slotId][0] == 1 && _unitTypesAuras[_targetSlotId][0] == 2) // Rogue > Mage\n          _damage = _damage * 125 / 100;\n        else if (_unitTypesAuras[_slotId][0] == 2 && _unitTypesAuras[_targetSlotId][0] == 0) // Mage > Fighter\n          _damage = _damage * 125 / 100;\n\n        // Is attacker has the advantageous Aura?\n        if (_unitTypesAuras[_slotId][1] == 0 && _unitTypesAuras[_targetSlotId][1] == 1) // Water > Fire\n          _damage = _damage * 150 / 100;\n        else if (_unitTypesAuras[_slotId][1] == 1 && _unitTypesAuras[_targetSlotId][1] == 2) // Fire > Nature\n          _damage = _damage * 150 / 100;\n        else if (_unitTypesAuras[_slotId][1] == 2 && _unitTypesAuras[_targetSlotId][1] == 0) // Nature > Water\n          _damage = _damage * 150 / 100;\n        else if (_unitTypesAuras[_slotId][1] == 3 && _unitTypesAuras[_targetSlotId][1] == 4) // Light > Darkness\n          _damage = _damage * 150 / 100;\n        else if (_unitTypesAuras[_slotId][1] == 4 && _unitTypesAuras[_targetSlotId][1] == 3) // Darkness > Light\n          _damage = _damage * 150 / 100;\n        \n        // Apply damage so that reduce hp of defender.\n        if(_unitStats[_targetSlotId][4] > _damage)\n          _unitStats[_targetSlotId][4] -= _damage;\n        else\n          _unitStats[_targetSlotId][4] = 0;\n\n        // Save damage to play record.\n        _turnInfo.damageList[i] = _damage;\n      }\n    }\n    \n    // Step 3. Apply the result of this battle.\n\n    // Set heroes deployed.\n    if (_tokenIds[0] != 0)\n      heroContract.deploy(_tokenIds[0], locationId, coolHero);\n    if (_tokenIds[1] != 0)\n      heroContract.deploy(_tokenIds[1], locationId, coolHero);\n    if (_tokenIds[2] != 0)\n      heroContract.deploy(_tokenIds[2], locationId, coolHero);\n    if (_tokenIds[3] != 0)\n      heroContract.deploy(_tokenIds[3], locationId, coolHero);\n\n    uint8 _deadHeroes = 0;\n    uint8 _deadEnemies = 0;\n\n    // Check result.\n    if (_unitStats[0][4] == 0)\n      _deadHeroes ++;\n    if (_unitStats[1][4] == 0)\n      _deadHeroes ++;\n    if (_unitStats[2][4] == 0)\n      _deadHeroes ++;\n    if (_unitStats[3][4] == 0)\n      _deadHeroes ++;\n    if (_unitStats[4][4] == 0)\n      _deadEnemies ++;\n    if (_unitStats[5][4] == 0)\n      _deadEnemies ++;\n    if (_unitStats[6][4] == 0)\n      _deadEnemies ++;\n    if (_unitStats[7][4] == 0)\n      _deadEnemies ++;\n      \n    if (_deadEnemies > _deadHeroes) { // Win\n      // Fire TryArena event.\n      TryArena(msg.sender, _enemyAddress, true);\n      \n      // Give reward.\n      (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, true, _turnInfo.originalExps);\n\n      // Save the record.\n      recordContract.updateRecord(msg.sender, _enemyAddress, true);\n    }\n    else if (_deadEnemies < _deadHeroes) { // Lose\n      // Fire TryArena event.\n      TryArena(msg.sender, _enemyAddress, false);\n\n      // Rewards.\n      (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, false, _turnInfo.originalExps);\n\n      // Save the record.\n      recordContract.updateRecord(msg.sender, _enemyAddress, false);\n    }\n    else { // Draw\n      // Fire TryArena event.\n      TryArena(msg.sender, _enemyAddress, false);\n\n      // Rewards.\n      (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, false, _turnInfo.originalExps);\n    }\n\n    // Save the result of this gameplay.\n    addressToPlayRecord[msg.sender] = _playRecord;\n\n    // Save the turn data.\n    // This is commented as this information can be reconstructed with intitial seed and date time.\n    // By commenting this, we can reduce about 400k gas.\n    if (isTurnDataSaved) {\n      addressToTurnInfo[msg.sender] = _turnInfo;\n    }\n  }\n\n  // @dev Check ownership.\n  function checkOwnershipAndAvailability(address _playerAddress, uint256[4] _tokenIds)\n    private view\n    returns(bool)\n  {\n    if ((_tokenIds[0] == 0 || heroContract.ownerOf(_tokenIds[0]) == _playerAddress) && (_tokenIds[1] == 0 || heroContract.ownerOf(_tokenIds[1]) == _playerAddress) && (_tokenIds[2] == 0 || heroContract.ownerOf(_tokenIds[2]) == _playerAddress) && (_tokenIds[3] == 0 || heroContract.ownerOf(_tokenIds[3]) == _playerAddress)) {\n      \n      // Retrieve avail time of heroes.\n      uint256[4] memory _heroAvailAts;\n      if (_tokenIds[0] != 0)\n        ( , , , , , _heroAvailAts[0], , , ) = heroContract.getHeroInfo(_tokenIds[0]);\n      if (_tokenIds[1] != 0)\n        ( , , , , , _heroAvailAts[1], , , ) = heroContract.getHeroInfo(_tokenIds[1]);\n      if (_tokenIds[2] != 0)\n        ( , , , , , _heroAvailAts[2], , , ) = heroContract.getHeroInfo(_tokenIds[2]);\n      if (_tokenIds[3] != 0)\n        ( , , , , , _heroAvailAts[3], , , ) = heroContract.getHeroInfo(_tokenIds[3]);\n\n      if (_heroAvailAts[0] <= now && _heroAvailAts[1] <= now && _heroAvailAts[2] <= now && _heroAvailAts[3] <= now) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  // @dev Give rewards.\n  function giveReward(uint256[4] _heroes, bool _didWin, uint32[4] _originalExps)\n    private\n    returns (uint32 expRewardGiven, uint256 goldRewardGiven)\n  {\n    if (!_didWin) {\n      // In case lost.\n      // Give baseline gold reward.\n      goldRewardGiven = goldReward / 10;\n      expRewardGiven = expReward / 5;\n    } else {\n      // In case win.\n      goldRewardGiven = goldReward;\n      expRewardGiven = expReward;\n    }\n\n    // Give reward Gold.\n    goldContract.mint(msg.sender, goldRewardGiven);\n    \n    // Give reward EXP.\n    if(_heroes[0] != 0)\n      heroContract.addExp(_heroes[0], uint32(2)**32 - _originalExps[0] + expRewardGiven);\n    if(_heroes[1] != 0)\n      heroContract.addExp(_heroes[1], uint32(2)**32 - _originalExps[1] + expRewardGiven);\n    if(_heroes[2] != 0)\n      heroContract.addExp(_heroes[2], uint32(2)**32 - _originalExps[2] + expRewardGiven);\n    if(_heroes[3] != 0)\n      heroContract.addExp(_heroes[3], uint32(2)**32 - _originalExps[3] + expRewardGiven);\n  }\n\n  // @dev Return a pseudo random number between lower and upper bounds\n  function random(uint32 _upper, uint32 _lower)\n    private\n    returns (uint32)\n  {\n    require(_upper > _lower);\n\n    seed = seed % uint32(1103515245) + 12345;\n    return seed % (_upper - _lower) + _lower;\n  }\n\n  // @dev Retreive order based on given array _by.\n  function getOrder(uint32[8] _by)\n    private pure\n    returns (uint8[8])\n  {\n    uint8[8] memory _order = [uint8(0), 1, 2, 3, 4, 5, 6, 7];\n    for (uint8 i = 0; i < 8; i ++) {\n      for (uint8 j = i + 1; j < 8; j++) {\n        if (_by[i] < _by[j]) {\n          uint32 tmp1 = _by[i];\n          _by[i] = _by[j];\n          _by[j] = tmp1;\n          uint8 tmp2 = _order[i];\n          _order[i] = _order[j];\n          _order[j] = tmp2;\n        }\n      }\n    }\n    return _order;\n  }\n\n  // @return Bigger value of two uint32s.\n  function max(uint32 _value1, uint32 _value2)\n    private pure\n    returns (uint32)\n  {\n    if(_value1 >= _value2)\n      return _value1;\n    else\n      return _value2;\n  }\n\n  // @return Bigger value of two uint32s.\n  function min(uint32 _value1, uint32 _value2)\n    private pure\n    returns (uint32)\n  {\n    if(_value2 >= _value1)\n      return _value1;\n    else\n      return _value2;\n  }\n\n  // @return Square root of the given value.\n  function sqrt(uint32 _value) \n    private pure\n    returns (uint32) \n  {\n    uint32 z = (_value + 1) / 2;\n    uint32 y = _value;\n    while (z < y) {\n      y = z;\n      z = (_value / z + z) / 2;\n    }\n    return y;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"heroContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPlayRecord\",\"outputs\":[{\"name\":\"initialSeed\",\"type\":\"uint32\"},{\"name\":\"enemyAddress\",\"type\":\"address\"},{\"name\":\"expReward\",\"type\":\"uint32\"},{\"name\":\"goldReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"correctedHeroContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsTurnDataSaved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTurnInfo\",\"outputs\":[{\"name\":\"turnLength\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTurnDataSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setExpReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setGoldReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPlayRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[8]\"},{\"name\":\"\",\"type\":\"uint32[8]\"},{\"name\":\"\",\"type\":\"uint32[8]\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8[8]\"},{\"name\":\"\",\"type\":\"uint8[24]\"},{\"name\":\"\",\"type\":\"uint32[24]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRecordContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setLocationId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coolHero\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[4]\"},{\"name\":\"_enemyAddress\",\"type\":\"address\"}],\"name\":\"enterArena\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locationId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPlayRecordNoTurnData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[8]\"},{\"name\":\"\",\"type\":\"uint32[8]\"},{\"name\":\"\",\"type\":\"uint32[8]\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setCoolHero\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_recordContractAddress\",\"type\":\"address\"},{\"name\":\"_heroContractAddress\",\"type\":\"address\"},{\"name\":\"_correctedHeroContractAddress\",\"type\":\"address\"},{\"name\":\"_cardContractAddress\",\"type\":\"address\"},{\"name\":\"_goldContractAddress\",\"type\":\"address\"},{\"name\":\"_firstPlayerAddress\",\"type\":\"address\"},{\"name\":\"_locationId\",\"type\":\"uint32\"},{\"name\":\"_coolHero\",\"type\":\"uint256\"},{\"name\":\"_expReward\",\"type\":\"uint32\"},{\"name\":\"_goldReward\",\"type\":\"uint256\"},{\"name\":\"_isTurnDataSaved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_against\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_didWin\",\"type\":\"bool\"}],\"name\":\"TryArena\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60606040526001805460a060020a60ff02191681556006805460a060020a63ffffffff02191674640000000000000000000000000000000000000000179055610e1060075560088054606463ffffffff1991821617909155670de0b6b3a7640000600955600a805460ff1916909217909155600d8054909116905534156200008657600080fd5b604051610160806200499483398101604052808051919060200180519190602001805191906020018051919060200180519190602001805191906020018051919060200180519190602001805191906020018051919060200180519150620000ef905062000300565b60008054600160a060020a031990811633600160a060020a03908116919091179092556002805482168f84161790556003805482168e84161790556004805482168d84161790556006805482168c8416179055600580549091168a8316179055600d5463ffffffff16825287166020820152600160408201515260026040820151602001526003604082015160026020020152600460408201516060015260056040820151608001526006604082015160a001526007604082015160c001526008604082015160e00152600160a060020a0387166000908152600b6020526040902081908151815463ffffffff191663ffffffff9190911617815560208201518154600160a060020a039190911664010000000002602060020a60c060020a031990911617815560408201516200022d906001830190600862000356565b50606082015162000245906009830190600862000399565b5060808201516200025d90600a830190600862000399565b5060a0820151600b8201805463ffffffff191663ffffffff9290921691909117905560c0820151600c919091015550506006805460a060020a63ffffffff0219167401000000000000000000000000000000000000000063ffffffff978816021790556007939093556008805463ffffffff19169290941691909117909255600991909155600a805460ff191691151591909117905550620004cf945050505050565b61038060405190810160409081526000808352602083015281016200032462000438565b81526020016200033362000461565b81526020016200034262000461565b815260006020820181905260409091015290565b826008810192821562000387579160200282015b82811115620003875782518255916020019190600101906200036a565b50620003959291506200048b565b5090565b6001830191839082156200042a5791602002820160005b83821115620003f657835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620003b0565b8015620004285782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620003f6565b505b5062000395929150620004ab565b6101006040519081016040526008815b6000815260200190600190039081620004485790505090565b6101006040519081016040526008815b600081526000199091019060200181620004715790505090565b620004a891905b8082111562000395576000815560010162000492565b90565b620004a891905b808211156200039557805463ffffffff19168155600101620004b2565b6144b580620004df6000396000f3006060604052600436106101505763ffffffff60e060020a6000350416630daf999a81146101555780630faac0e21461018457806310ece9c6146101de5780632b99f3e1146101f15780633789ddd21461020b5780633f4ba83a1461024057806345fd3666146102535780634a5e4fa81461027a5780634e71e0c8146102965780635c975abb146102a957806360e587f9146102bc578063693bd2d0146102e15780638456cb59146102f4578063862eb9c01461030757806389698f021461031d5780638da5cb5b146103305780639686898a146103435780639f512ebc146104b2578063c4e6aaa6146104d1578063d9c76d61146104ed578063e30c397814610500578063e712bbad14610513578063e8aadc3f14610556578063eeb8491014610582578063f019c5da14610669578063f2fde38b1461067c578063fc36cc9d1461069b578063fc996557146106b7575b600080fd5b341561016057600080fd5b6101686106ca565b604051600160a060020a03909116815260200160405180910390f35b341561018f57600080fd5b6101a3600160a060020a03600435166106d9565b60405163ffffffff9485168152600160a060020a03909316602084015292166040808301919091526060820192909252608001905180910390f35b34156101e957600080fd5b610168610716565b34156101fc57600080fd5b6102096004351515610725565b005b341561021657600080fd5b61022a600160a060020a0360043516610753565b60405160ff909116815260200160405180910390f35b341561024b57600080fd5b610209610768565b341561025e57600080fd5b6102666107e7565b604051901515815260200160405180910390f35b341561028557600080fd5b61020963ffffffff600435166107f0565b34156102a157600080fd5b610209610827565b34156102b457600080fd5b6102666108b5565b34156102c757600080fd5b6102cf6108c5565b60405190815260200160405180910390f35b34156102ec57600080fd5b6101686108cb565b34156102ff57600080fd5b6102096108da565b341561031257600080fd5b61020960043561095e565b341561032857600080fd5b61016861097e565b341561033b57600080fd5b61016861098d565b341561034e57600080fd5b610362600160a060020a036004351661099c565b60405163ffffffff8c168152600160a060020a038b166020820152604081018a61010080838360005b838110156103a357808201518382015260200161038b565b5050505090500189600860200280838360005b838110156103ce5780820151838201526020016103b6565b5050505090500188600860200280838360005b838110156103f95780820151838201526020016103e1565b5050505063ffffffff8a169201918252506020810187905260ff861660408201526060018461010080838360005b8381101561043f578082015183820152602001610427565b5050505090500183601860200280838360005b8381101561046a578082015183820152602001610452565b5050505090500182601860200280838360005b8381101561049557808201518382015260200161047d565b505050509050019b50505050505050505050505060405180910390f35b34156104bd57600080fd5b610209600160a060020a0360043516610d8d565b34156104dc57600080fd5b61020963ffffffff60043516610dd7565b34156104f857600080fd5b6102cf610e29565b341561050b57600080fd5b610168610e2f565b341561051e57600080fd5b6102096004608481806080604051908101604052919082826080808284375093955050509135600160a060020a03169150610e3e9050565b341561056157600080fd5b61056961334f565b60405163ffffffff909116815260200160405180910390f35b341561058d57600080fd5b6105a1600160a060020a0360043516613362565b60405163ffffffff88168152600160a060020a0387166020820152604081018661010080838360005b838110156105e25780820151838201526020016105ca565b5050505090500185600860200280838360005b8381101561060d5780820151838201526020016105f5565b5050505090500184600860200280838360005b83811015610638578082015183820152602001610620565b505050509050018363ffffffff1663ffffffff16815260200182815260200197505050505050505060405180910390f35b341561067457600080fd5b61056961352e565b341561068757600080fd5b610209600160a060020a036004351661353a565b34156106a657600080fd5b61020963ffffffff60043516613584565b34156106c257600080fd5b6101686135aa565b600354600160a060020a031681565b600b602081905260009182526040909120805491810154600c9091015463ffffffff808416936401000000009004600160a060020a031692169084565b600454600160a060020a031681565b60005433600160a060020a0390811691161461074057600080fd5b600a805460ff1916911515919091179055565b600c6020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461078357600080fd5b60015460a060020a900460ff16151561079b57600080fd5b6001805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600a5460ff1681565b60005433600160a060020a0390811691161461080b57600080fd5b6008805463ffffffff191663ffffffff92909216919091179055565b60015433600160a060020a0390811691161461084257600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60015460a060020a900460ff1681565b60095481565b600654600160a060020a031681565b60005433600160a060020a039081169116146108f557600080fd5b60015460a060020a900460ff161561090c57600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60005433600160a060020a0390811691161461097957600080fd5b600955565b600254600160a060020a031681565b600054600160a060020a031681565b6000806109a76140a8565b6109af6140d0565b6109b76140d0565b60008060006109c46140d0565b6109cc6140f9565b6109d46140f9565b6109dc614114565b6109e4614164565b600160a060020a038e166000908152600b6020526040908190209060e090519081016040908152825463ffffffff811683526401000000009004600160a060020a0316602083015290919080830190600183019060089061010090519081016040529190610100830182845b815481526020019060010190808311610a5057505050918352505060200160098201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610a8c5790505050509183525050602001600a8201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610af157905050505050508152602001600b820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600c820154815250509150600c60008f600160a060020a0316600160a060020a0316815260200190815260200160002060a06040519081016040908152825460ff16825290919060208301906001830190600890610100905190810160405291906101008301826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610bc8579050505050918352505060200160028201601861030060405190810160405291906103008301826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610c1f579050505050918352505060200160038201601861030060405190810160405291906103008301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610c7657905050505091835250506020016006820160046080604051908101604052919060808301826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610cd95790505050505050815250509050816000015182602001518360400151846060015185608001518660a001518760c001518751886020015189604001518a606001518898508797508696508292508191508090509c509c509c509c509c509c509c509c509c509c509c50505091939597999b90929496989a50565b60005433600160a060020a03908116911614610da857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610df257600080fd5b6006805463ffffffff90921660a060020a0277ffffffff000000000000000000000000000000000000000019909216919091179055565b60075481565b600154600160a060020a031681565b610e46614114565b610e4e614164565b610e566141ac565b610e5e6141da565b610e66614114565b610e6e6140d0565b600080600080600080600160149054906101000a900460ff16151515610e9357600080fd5b8c600160a060020a031633600160a060020a031614151515610eb457600080fd5b8d511580610ee8575060208e01518e5114158015610ed7575060408e01518e5114155b8015610ee8575060608e01518e5114155b1515610ef357600080fd5b60208e01511580610f3057508d5160208f015114158015610f1c575060408e015160208f015114155b8015610f30575060608e015160208f015114155b1515610f3b57600080fd5b60408e01511580610f7857508d5160408f015114158015610f64575060208e015160408f015114155b8015610f78575060608e015160408f015114155b1515610f8357600080fd5b60608e01511580610fc057508d5160608f015114158015610fac575060208e015160608f015114155b8015610fc0575060408e015160608f015114155b1515610fcb57600080fd5b610fd5338f6135b9565b1515610fe057600080fd5b600160a060020a038d81166000908152600b6020526040902054640100000000900416151561100e57600080fd5b600d805463ffffffff1981164263ffffffff9283160182161791829055168c52600160a060020a038d1660208d01528d600060200201518c604001515260208e01518c604001516020015260408e01518c604001516040015260608e01518c60400151606001528d511561126a57600354600160a060020a031663d1f699028f5160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156110ce57600080fd5b6102c65a03f115156110df57600080fd5b505050604051805190508c6060015163ffffffff919091169052600454600160a060020a031663763901448f5160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b151561114d57600080fd5b6102c65a03f1151561115e57600080fd5b5050506040518051906020018051906020018060a0018060a0018051506020016040525060808f015160808f0151918e5263ffffffff92831690915291169052600354600160a060020a0316636ccd5cbe60608e01515160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b15156111f857600080fd5b6102c65a03f1151561120957600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d9250600091506112529050565b60200201518b5160ff92831660209190910152911690525b60208e01511561148757600354600160a060020a031663d1f699028f6001602002015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156112cc57600080fd5b6102c65a03f115156112dd57600080fd5b505050604051805190508c60600151600163ffffffff9092166020929092020152600454600160a060020a031663763901448f6001602002015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b151561135857600080fd5b6102c65a03f1151561136957600080fd5b5050506040518051906020018051906020018060a0018060a0018051506020016040525060808f015160200160808f015160208f81019390935263ffffffff93841692019190915291169052600354600160a060020a0316636ccd5cbe60608e01516020015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561141257600080fd5b6102c65a03f1151561142357600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d92506001915061146c9050565b602002015160208c015160ff92831660209190910152911690525b60408e0151156116a457600354600160a060020a031663d1f699028f6002602002015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156114e957600080fd5b6102c65a03f115156114fa57600080fd5b505050604051805190508c60600151600263ffffffff9092166020929092020152600454600160a060020a031663763901448f6002602002015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b151561157557600080fd5b6102c65a03f1151561158657600080fd5b5050506040518051906020018051906020018060a0018060a0018051506020016040525060808f015160400160808f015160408f81019390935263ffffffff93841692019190915291169052600354600160a060020a0316636ccd5cbe60608e01516040015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561162f57600080fd5b6102c65a03f1151561164057600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d9250600291506116899050565b602002015160408c015160ff92831660209190910152911690525b60608e0151156118e557600360009054906101000a9004600160a060020a0316600160a060020a031663d1f699028f60036004811015156116e157fe5b602002015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561172557600080fd5b6102c65a03f1151561173657600080fd5b505050604051805190508c60600151600363ffffffff9092166020929092020152600454600160a060020a031663763901448f6003602002015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b15156117b157600080fd5b6102c65a03f115156117c257600080fd5b5050506040518051906020018051906020018060a0018060a0018051506020016040525060808f015160600160808f01516003602002018e6003602002019290925263ffffffff92831690915291169052600354600160a060020a0316636ccd5cbe60608e01516060015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561187057600080fd5b6102c65a03f1151561188157600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d9250600391506118ca9050565b602002015160608c015160ff92831660209190910152911690525b600160a060020a038d166000908152600b6020526040908190209060e090519081016040908152825463ffffffff811683526401000000009004600160a060020a0316602083015290919080830190600183019060089061010090519081016040529190610100830182845b81548152602001906001019080831161195157505050918352505060200160098201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161198d5790505050509183525050602001600a8201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116119f257505050928452505050600b82015463ffffffff166020820152600c909101546040918201529098508801515115611c5d57600354600160a060020a031663d1f6990260408a01515160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611ab357600080fd5b6102c65a03f11515611ac457600080fd5b505050604051805190508c6060015163ffffffff91909116608090910152600454600160a060020a0316637639014460408a01515160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b1515611b3a57600080fd5b6102c65a03f11515611b4b57600080fd5b5050506040518051906020018051906020018060a0018060a00180515060200160405250905060808e015160808d81019290925263ffffffff92909216910152600354600160a060020a0316636ccd5cbe60608e01516080015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b1515611be857600080fd5b6102c65a03f11515611bf957600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d925060049150611c429050565b602002015160808c015160ff92831660209190910152911690525b87604001516020015115611e7157600354600160a060020a031663d1f6990260408a01516020015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611cc457600080fd5b6102c65a03f11515611cd557600080fd5b505050604051805190508c6060015163ffffffff9190911660a090910152600454600160a060020a0316637639014460408a01516020015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b1515611d4e57600080fd5b6102c65a03f11515611d5f57600080fd5b5050506040518051906020018051906020018060a0018060a00180515060200160405250905060808e015160a08d81019290925263ffffffff92909216910152600354600160a060020a0316636ccd5cbe60608e015160a0015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b1515611dfc57600080fd5b6102c65a03f11515611e0d57600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d925060059150611e569050565b602002015160a08c015160ff92831660209190910152911690525b8760400151604001511561208557600354600160a060020a031663d1f6990260408a01516040015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611ed857600080fd5b6102c65a03f11515611ee957600080fd5b505050604051805190508c6060015163ffffffff9190911660c090910152600454600160a060020a0316637639014460408a01516040015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b1515611f6257600080fd5b6102c65a03f11515611f7357600080fd5b5050506040518051906020018051906020018060a0018060a00180515060200160405250905060808e015160c08d81019290925263ffffffff92909216910152600354600160a060020a0316636ccd5cbe60608e015160c0015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561201057600080fd5b6102c65a03f1151561202157600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d92506006915061206a9050565b602002015160c08c015160ff92831660209190910152911690525b8760400151606001511561229957600354600160a060020a031663d1f6990260408a01516060015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156120ec57600080fd5b6102c65a03f115156120fd57600080fd5b505050604051805190508c6060015163ffffffff9190911660e090910152600454600160a060020a0316637639014460408a01516060015160006040516101a0015260405160e060020a63ffffffff841602815260048101919091526024016101a060405180830381600087803b151561217657600080fd5b6102c65a03f1151561218757600080fd5b5050506040518051906020018051906020018060a0018060a00180515060200160405250905060808e015160e08d81019290925263ffffffff92909216910152600354600160a060020a0316636ccd5cbe60608e015160e0015160006040516102c0015260405163ffffffff83811660e060020a0282529190911660048201526024016102c060405180830381600087803b151561222457600080fd5b6102c65a03f1151561223557600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180516102009091016040529195509093508d92506007915061227e9050565b602002015160e08c015160ff92831660209190910152911690525b8760400151518c60400151608001526040880151602001518c6040015160a001526040880151604001518c6040015160c001526040880151606001518c6040015160e00152600095505b60088660ff161015612331578960ff8716600881106122fe57fe5b6020020151604001518760ff88166008811061231657fe5b63ffffffff90921660209290920201526001909501946122e3565b61233a87613b68565b60208c015260188b52600095505b60188660ff161015612beb5760808a01516080015163ffffffff1615801561237c575060a08a01516080015163ffffffff16155b8015612394575060c08a01516080015163ffffffff16155b80156123ac575060e08a01516080015163ffffffff16155b156123bc5760ff86168b52612beb565b89516080015163ffffffff161580156123e1575060208a01516080015163ffffffff16155b80156123f9575060408a01516080015163ffffffff16155b8015612411575060608a01516080015163ffffffff16155b156124215760ff86168b52612beb565b8a60200151600860ff88160660ff1660088110151561243c57fe5b6020020151945060048560ff1610801561246757508d60ff86166004811061246057fe5b6020020151155b1561249357607f8b6040015160ff88166018811061248157fe5b60ff9092166020929092020152612be0565b8960ff8616600881106124a257fe5b60200201516080015163ffffffff1615156124cc5760808b6040015160ff88166018811061248157fe5b60ff935060048560ff16101561255d57600060808b01516080015163ffffffff1611156124fc5760049350612558565b600060a08b01516080015163ffffffff16111561251c5760059350612558565b600060c08b01516080015163ffffffff16111561253c5760069350612558565b600060e08b01516080015163ffffffff16111561255857600793505b6125d6565b60008a516080015163ffffffff16111561257a57600093506125d6565b600060208b01516080015163ffffffff16111561259a57600193506125d6565b600060408b01516080015163ffffffff1611156125ba57600293506125d6565b600060608b01516080015163ffffffff1611156125d657600393505b838b6040015160ff8816601881106125ea57fe5b60ff9283166020919091029190910152600a93508a9085166008811061260c57fe5b60200201516020015163ffffffff1660648b60ff88166008811061262c57fe5b60200201515160960263ffffffff1681151561264457fe5b0463ffffffff1611156126a55761269e8a60ff86166008811061266357fe5b60200201516020015160648c60ff89166008811061267d57fe5b60200201515160960263ffffffff1681151561269557fe5b0403600a613d14565b92506126aa565b600a92505b8960ff8516600881106126b957fe5b60200201516040015163ffffffff1660648b60ff8816600881106126d957fe5b60200201516060015160960263ffffffff168115156126f457fe5b0463ffffffff1611156127825761270d60646000613d36565b63ffffffff1661276d6127668c60ff88166008811061272857fe5b60200201516040015160648e60ff8b166008811061274257fe5b60200201516060015160960263ffffffff1681151561275d57fe5b0403604b613d14565b6063613d9a565b63ffffffff161161277d57600092505b6127a0565b61278e60646000613d36565b63ffffffff16604b116127a057600092505b8960ff8516600881106127af57fe5b60200201516060015163ffffffff168a60ff8716600881106127cd57fe5b60200201516060015163ffffffff16111561285a576127ee60646000613d36565b63ffffffff166128396128328c60ff88166008811061280957fe5b6020020151606001518d60ff8a166008811061282157fe5b602002015160600151036005613d14565b604b613d9a565b63ffffffff16111561285557606463ffffffff60968502160492505b612884565b61286660646000613d36565b63ffffffff166005111561288457606463ffffffff60968502160492505b8860ff86166008811061289357fe5b60200201515160ff161580156128c057508860ff8516600881106128b357fe5b60200201515160ff166001145b156128da57606463ffffffff607d8502165b04925061297f565b8860ff8616600881106128e957fe5b60200201515160ff16600114801561291857508860ff85166008811061290b57fe5b60200201515160ff166002145b1561292e57606463ffffffff607d8502166128d2565b8860ff86166008811061293d57fe5b60200201515160ff16600214801561296a57508860ff85166008811061295f57fe5b60200201515160ff16155b1561297f57606463ffffffff607d8502160492505b8860ff86166008811061298e57fe5b60200201516020015160ff161580156129c157508860ff8516600881106129b157fe5b60200201516020015160ff166001145b156129db57606463ffffffff60968502165b049250612b40565b8860ff8616600881106129ea57fe5b60200201516020015160ff166001148015612a1f57508860ff851660088110612a0f57fe5b60200201516020015160ff166002145b15612a3557606463ffffffff60968502166129d3565b8860ff861660088110612a4457fe5b60200201516020015160ff166002148015612a7757508860ff851660088110612a6957fe5b60200201516020015160ff16155b15612a8d57606463ffffffff60968502166129d3565b8860ff861660088110612a9c57fe5b60200201516020015160ff166003148015612ad157508860ff851660088110612ac157fe5b60200201516020015160ff166004145b15612ae757606463ffffffff60968502166129d3565b8860ff861660088110612af657fe5b60200201516020015160ff166004148015612b2b57508860ff851660088110612b1b57fe5b60200201516020015160ff166003145b15612b4057606463ffffffff60968502160492505b63ffffffff83168a60ff861660088110612b5657fe5b60200201516080015163ffffffff161115612b9557828a60ff861660088110612b7b57fe5b60200201516080018181510363ffffffff16905250612bbb565b60008a60ff861660088110612ba657fe5b602002015163ffffffff919091166080909101525b828b6060015160ff881660188110612bcf57fe5b63ffffffff90921660209290920201525b600190950194612348565b8d5115612c9257600354600160a060020a031663284fb3638f51600660149054906101000a900463ffffffff166007546000604051602001526040518463ffffffff1660e060020a028152600401808481526020018363ffffffff1663ffffffff1681526020018281526020019350505050602060405180830381600087803b1515612c7657600080fd5b6102c65a03f11515612c8757600080fd5b505050604051805150505b60208e015115612d4257600354600160a060020a031663284fb3638f60016020020151600660149054906101000a900463ffffffff166007546000604051602001526040518463ffffffff1660e060020a028152600401808481526020018363ffffffff1663ffffffff1681526020018281526020019350505050602060405180830381600087803b1515612d2657600080fd5b6102c65a03f11515612d3757600080fd5b505050604051805150505b60408e015115612df257600354600160a060020a031663284fb3638f60026020020151600660149054906101000a900463ffffffff166007546000604051602001526040518463ffffffff1660e060020a028152600401808481526020018363ffffffff1663ffffffff1681526020018281526020019350505050602060405180830381600087803b1515612dd657600080fd5b6102c65a03f11515612de757600080fd5b505050604051805150505b60608e015115612ec157600360009054906101000a9004600160a060020a0316600160a060020a031663284fb3638f6003600481101515612e2f57fe5b6020020151600660149054906101000a900463ffffffff166007546000604051602001526040518463ffffffff1660e060020a028152600401808481526020018363ffffffff1663ffffffff1681526020018281526020019350505050602060405180830381600087803b1515612ea557600080fd5b6102c65a03f11515612eb657600080fd5b505050604051805150505b50600090508089516080015163ffffffff161515612ee0576001909101905b60208a01516080015163ffffffff161515612efc576001909101905b60408a01516080015163ffffffff161515612f18576001909101905b60608a01516080015163ffffffff161515612f34576001909101905b60808a01516080015163ffffffff161515612f4d576001015b60a08a01516080015163ffffffff161515612f66576001015b60c08a01516080015163ffffffff161515612f7f576001015b60e08a01516080015163ffffffff161515612f98576001015b8160ff168160ff16111561308d578c600160a060020a031633600160a060020a03167ffa17b61080902731a2720bfa418fcae6de065aa77e52ffc41759dd96a761a2e46001604051901515815260200160405180910390a36130008e60018d60800151613db3565b60c08e015263ffffffff1660a08d0152600254600160a060020a031663b52db3b9338f600160405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201529015156044820152606401600060405180830381600087803b151561307457600080fd5b6102c65a03f1151561308557600080fd5b5050506131d4565b8160ff168160ff161015613169578c600160a060020a031633600160a060020a03167ffa17b61080902731a2720bfa418fcae6de065aa77e52ffc41759dd96a761a2e46000604051901515815260200160405180910390a36130f58e60008d60800151613db3565b60c08e015263ffffffff1660a08d0152600254600160a060020a031663b52db3b9338f600060405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201529015156044820152606401600060405180830381600087803b151561307457600080fd5b8c600160a060020a031633600160a060020a03167ffa17b61080902731a2720bfa418fcae6de065aa77e52ffc41759dd96a761a2e46000604051901515815260200160405180910390a36131c38e60008d60800151613db3565b60c08e015263ffffffff1660a08d01525b600160a060020a0333166000908152600b602052604090208c908151815463ffffffff191663ffffffff9190911617815560208201518154600160a060020a03919091166401000000000277ffffffffffffffffffffffffffffffffffffffff000000001990911617815560408201516132549060018301906008614208565b50606082015161326a9060098301906008614246565b50608082015161328090600a8301906008614246565b5060a0820151600b8201805463ffffffff191663ffffffff9290921691909117905560c0820151600c9091015550600a5460ff161561333f57600160a060020a0333166000908152600c602052604090208b908151815460ff191660ff9190911617815560208201516132f990600183019060086142de565b50604082015161330f90600283019060186142de565b506060820151613325906003830190601861436d565b50608082015161333b9060068301906004614246565b5050505b5050505050505050505050505050565b60065460a060020a900463ffffffff1681565b60008061336d6140a8565b6133756140d0565b61337d6140d0565b600080613388614114565b600160a060020a0389166000908152600b6020526040908190209060e090519081016040908152825463ffffffff811683526401000000009004600160a060020a0316602083015290919080830190600183019060089061010090519081016040529190610100830182845b8154815260200190600101908083116133f457505050918352505060200160098201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116134305790505050509183525050602001600a8201600861010060405190810160405291906101008301826000855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161349557505050928452505050600b82015463ffffffff166020820152600c909101546040909101529050805181602001518260400151836060015184608001518560a001518660c00151959f949e50929c50909a509850965090945092505050565b60085463ffffffff1681565b60005433600160a060020a0390811691161461355557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a0390811691161461359f57600080fd5b63ffffffff16600755565b600554600160a060020a031681565b60006135c36143c6565b825115806136485750600354600160a060020a038581169116636352211e855160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561362257600080fd5b6102c65a03f1151561363357600080fd5b50505060405180519050600160a060020a0316145b80156136da5750602083015115806136da5750600354600160a060020a038581169116636352211e602086015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156136b457600080fd5b6102c65a03f115156136c557600080fd5b50505060405180519050600160a060020a0316145b801561376c57506040830151158061376c5750600354600160a060020a038581169116636352211e604086015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561374657600080fd5b6102c65a03f1151561375757600080fd5b50505060405180519050600160a060020a0316145b80156137fe5750606083015115806137fe5750600354600160a060020a038581169116636352211e606086015160006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156137d857600080fd5b6102c65a03f115156137e957600080fd5b50505060405180519050600160a060020a0316145b15613b5c578251156138c457600354600160a060020a03166375e39f2684516000604051610220015260405160e060020a63ffffffff8416028152600481019190915260240161022060405180830381600087803b151561385e57600080fd5b6102c65a03f1151561386f57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018060a0018060a00180515060200160405250909550869450600093506138be92505050565b60200201525b60208301511561398b57600354600160a060020a03166375e39f2660208501516000604051610220015260405160e060020a63ffffffff8416028152600481019190915260240161022060405180830381600087803b151561392557600080fd5b6102c65a03f1151561393657600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018060a0018060a001805150602001604052509095508694506001935061398592505050565b60200201525b604083015115613a5257600354600160a060020a03166375e39f2660408501516000604051610220015260405160e060020a63ffffffff8416028152600481019190915260240161022060405180830381600087803b15156139ec57600080fd5b6102c65a03f115156139fd57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018060a0018060a0018051506020016040525090955086945060029350613a4c92505050565b60200201525b606083015115613b1957600354600160a060020a03166375e39f2660608501516000604051610220015260405160e060020a63ffffffff8416028152600481019190915260240161022060405180830381600087803b1515613ab357600080fd5b6102c65a03f11515613ac457600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018060a0018060a0018051506020016040525090955086945060039350613b1392505050565b60200201525b42815111158015613b2e575042602082015111155b8015613b3e575042604082015111155b8015613b4e575042606082015111155b15613b5c5760019150613b61565b600091505b5092915050565b613b706140d0565b613b786140d0565b60008060008061010060405190810160409081526000808352600160208401526002918301919091526003606083015260046080830152600560a0830152600660c0830152600760e083015290955093505b60088460ff161015613d09578360010192505b60088360ff161015613cfe578660ff841660088110613bf857fe5b602002015163ffffffff168760ff861660088110613c1257fe5b602002015163ffffffff161015613cf3578660ff851660088110613c3257fe5b602002015191508660ff841660088110613c4857fe5b60200201518760ff861660088110613c5c57fe5b63ffffffff9092166020929092020152818760ff851660088110613c7c57fe5b63ffffffff90921660209290920201528460ff851660088110613c9b57fe5b602002015190508460ff841660088110613cb157fe5b60200201518560ff861660088110613cc557fe5b60ff928316602091909102919091015281908690851660088110613ce557fe5b60ff90921660209290920201525b600190920191613bdd565b600190930192613bca565b509295945050505050565b600063ffffffff80831690841610613d2d575081613d30565b50805b92915050565b600063ffffffff80831690841611613d4d57600080fd5b600d546341c64e6d9063ffffffff16600d805463ffffffff1916929091066130390163ffffffff9081169290921790819055839182860381169116811515613d9157fe5b06019392505050565b600063ffffffff80841690831610613d2d575081613d30565b600080831515613dda575050600954600854600563ffffffff9091160490600a9004613dea565b505060095460085463ffffffff16905b600554600160a060020a03166340c10f19338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515613e4957600080fd5b6102c65a03f11515613e5a57600080fd5b5050506040518051508590505115613eed57600354600160a060020a0316631debbe2f8651848651640100000000030160006040516020015260405163ffffffff84811660e060020a028252600482019390935291166024820152604401602060405180830381600087803b1515613ed157600080fd5b6102c65a03f11515613ee257600080fd5b505050604051805150505b602085015115613f7e57600354600160a060020a0316631debbe2f6020870151846020870151640100000000030160006040516020015260405163ffffffff84811660e060020a028252600482019390935291166024820152604401602060405180830381600087803b1515613f6257600080fd5b6102c65a03f11515613f7357600080fd5b505050604051805150505b60408501511561400f57600354600160a060020a0316631debbe2f6040870151846040870151640100000000030160006040516020015260405163ffffffff84811660e060020a028252600482019390935291166024820152604401602060405180830381600087803b1515613ff357600080fd5b6102c65a03f1151561400457600080fd5b505050604051805150505b6060850151156140a057600354600160a060020a0316631debbe2f6060870151846060870151640100000000030160006040516020015260405163ffffffff84811660e060020a028252600482019390935291166024820152604401602060405180830381600087803b151561408457600080fd5b6102c65a03f1151561409557600080fd5b505050604051805150505b935093915050565b6101006040519081016040526008815b60008152602001906001900390816140b85790505090565b6101006040519081016040526008815b6000815260001990910190602001816140e05790505090565b610300604051908101604052600081526017602082016140e0565b61038060405190810160409081526000808352602083015281016141366140a8565b81526020016141436140d0565b81526020016141506140d0565b815260006020820181905260409091015290565b6107a060405190810160405260008152602081016141806140d0565b815260200161418d6140f9565b815260200161419a6140f9565b81526020016141a76143e0565b905290565b6105006040519081016040526008815b6141c46143fa565b8152602001906001900390816141bc5790505090565b6102006040519081016040526008815b6141f2614414565b8152602001906001900390816141ea5790505090565b8260088101928215614236579160200282015b8281111561423657825182559160200191906001019061421b565b5061424292915061442d565b5090565b6001830191839082156142d25791602002820160005b838211156142a057835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261425c565b80156142d05782816101000a81549063ffffffff02191690556004016020816003010492830192600103026142a0565b505b5061424292915061444a565b6001830191839082156143615791602002820160005b8382111561433257835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026142f4565b801561435f5782816101000a81549060ff0219169055600101602081600001049283019260010302614332565b505b5061424292915061446b565b6003830191839082156142d2579160200282016000838211156142a057835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261425c565b6080604051908101604052600081526003602082016140b8565b6080604051908101604052600081526003602082016140e0565b60a0604051908101604052600081526004602082016140e0565b60408051908101604052600081526001602082016140e0565b61444791905b808211156142425760008155600101614433565b90565b61444791905b8082111561424257805463ffffffff19168155600101614450565b61444791905b8082111561424257805460ff191681556001016144715600a165627a7a7230582082c22d41fa2b1d9dfb606d91556cea992ad18eb5faa4359125cd4cfb9299ce330029000000000000000000000000951a2a90a2384ae86c1ed822e468c35912ce0721000000000000000000000000abc7e6c01237e8eef355bba2bf925a730b714d5f0000000000000000000000001f6f71e1e6a56dc348f1ec9a22b200ac44459fe40000000000000000000000001b5242794288b45831ce069c9934a29b89af019700000000000000000000000059bcded9c87ce46ec97c13640bfc0390ceb00e990000000000000000000000006589adf7720a5b5f80bd391c0bbf2148d00be5ae0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000951a2a90a2384ae86c1ed822e468c35912ce0721000000000000000000000000abc7e6c01237e8eef355bba2bf925a730b714d5f0000000000000000000000001f6f71e1e6a56dc348f1ec9a22b200ac44459fe40000000000000000000000001b5242794288b45831ce069c9934a29b89af019700000000000000000000000059bcded9c87ce46ec97c13640bfc0390ceb00e990000000000000000000000006589adf7720a5b5f80bd391c0bbf2148d00be5ae0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000000000000000000000"
}