{
  "address": "0x53742f3184cea2378de14e4402c7fd9e1c6ad97b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SocialTrading",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-20\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/socialtrading/libs/LibUserInfo.sol\n\ncontract LibUserInfo {\n  struct Following {\n    address leader;\n    uint percentage; // percentage times (1 ether)\n    uint timeStamp;\n    uint index;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/socialtrading/interfaces/ISocialTrading.sol\n\ncontract ISocialTrading is Ownable {\n\n  /**\n   * @dev Follow leader to copy trade.\n   */\n  function follow(address _leader, uint _percentage) external;\n\n  /**\n   * @dev UnFollow leader to stop copy trade.\n   */\n  function unfollow(address _leader) external;\n\n  /**\n  * Friends - we refer to \"friends\" as the users that a specific user follows (e.g., following).\n  */\n  function getFriends(address _user) public view returns (address[]);\n\n  /**\n  * Followers - refers to the users that follow a specific user.\n  */\n  function getFollowers(address _user) public view returns (address[]);\n}\n\n// File: contracts/socialtrading/SocialTrading.sol\n\ncontract SocialTrading is ISocialTrading {\n  mapping(address => mapping(address => LibUserInfo.Following)) public followerToLeaders; // Following list\n  mapping(address => address[]) public followerToLeadersIndex; // Following list\n  mapping(address => mapping(address => uint)) public leaderToFollowers;\n  mapping(address => address[]) public leaderToFollowersIndex; // Follower list\n\n  event Follow(address indexed leader, address indexed follower, uint percentage);\n  event UnFollow(address indexed leader, address indexed follower);\n\n  function() public {\n    revert();\n  }\n\n  /**\n   * @dev Follow leader to copy trade.\n   */\n  function follow(address _leader, uint _percentage) external {\n    require(getCurrentPercentage(msg.sender) + _percentage <= 100 ether, \"Your percentage more than 100%.\");\n    uint index = followerToLeadersIndex[msg.sender].push(_leader) - 1;\n    followerToLeaders[msg.sender][_leader] = LibUserInfo.Following(_leader, _percentage, now, index);\n\n    uint index2 = leaderToFollowersIndex[_leader].push(msg.sender) - 1;\n    leaderToFollowers[_leader][msg.sender] = index2;\n    emit Follow(_leader, msg.sender, _percentage);\n  }\n\n  /**\n   * @dev UnFollow leader to stop copy trade.\n   */\n  function unfollow(address _leader) external {\n    _unfollow(msg.sender, _leader);\n  }\n\n  function _unfollow(address _follower, address _leader) private {\n    uint rowToDelete = followerToLeaders[_follower][_leader].index;\n    address keyToMove = followerToLeadersIndex[_follower][followerToLeadersIndex[_follower].length - 1];\n    followerToLeadersIndex[_follower][rowToDelete] = keyToMove;\n    followerToLeaders[_follower][keyToMove].index = rowToDelete;\n    followerToLeadersIndex[_follower].length -= 1;\n\n    uint rowToDelete2 = leaderToFollowers[_leader][_follower];\n    address keyToMove2 = leaderToFollowersIndex[_leader][leaderToFollowersIndex[_leader].length - 1];\n    leaderToFollowersIndex[_leader][rowToDelete2] = keyToMove2;\n    leaderToFollowers[_leader][keyToMove2] = rowToDelete2;\n    leaderToFollowersIndex[_leader].length -= 1;\n    emit UnFollow(_leader, _follower);\n  }\n\n  function getFriends(address _user) public view returns (address[]) {\n    address[] memory result = new address[](followerToLeadersIndex[_user].length);\n    uint counter = 0;\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\n      result[counter] = followerToLeadersIndex[_user][i];\n      counter++;\n    }\n    return result;\n  }\n\n  function getFollowers(address _user) public view returns (address[]) {\n    address[] memory result = new address[](leaderToFollowersIndex[_user].length);\n    uint counter = 0;\n    for (uint i = 0; i < leaderToFollowersIndex[_user].length; i++) {\n      result[counter] = leaderToFollowersIndex[_user][i];\n      counter++;\n    }\n    return result;\n  }\n\n  function getCurrentPercentage(address _user) internal returns (uint) {\n    uint sum = 0;\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\n      address leader = followerToLeadersIndex[_user][i];\n      sum += followerToLeaders[_user][leader].percentage;\n    }\n    return sum;\n  }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611817806100536000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063015a4ead146100c15780630ec83370146101045780635cbb7caa146101515780635f4daa1c146101e95780636515485c14610276578063715018a6146103035780638da5cb5b1461031a5780638fa02c7514610371578063ba81626a146103e8578063c2fe2022146104a0578063f2fde38b14610538575b3480156100bb57600080fd5b50600080fd5b3480156100cd57600080fd5b50610102600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061057b565b005b34801561011057600080fd5b5061014f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610588565b005b34801561015d57600080fd5b50610192600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061096c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101d55780820151818401526020810190506101ba565b505050509050019250505060405180910390f35b3480156101f557600080fd5b50610234600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b1a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028257600080fd5b506102c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b67565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030f57600080fd5b50610318610bb4565b005b34801561032657600080fd5b5061032f610cb6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037d57600080fd5b506103d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cdb565b6040518082815260200191505060405180910390f35b3480156103f457600080fd5b50610449600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d00565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156104ac57600080fd5b506104e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d5d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610524578082015181840152602081019050610509565b505050509050019250505060405180910390f35b34801561054457600080fd5b50610579600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f0b565b005b6105853382610f72565b50565b60008068056bc75e2d631000008361059f33611532565b0111151515610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f596f75722070657263656e74616765206d6f7265207468616e20313030252e0081525060200191505060405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055500391506080604051908101604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200142815260200183815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301559050506001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000203390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555003905080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f746fcfa151ee3943ec31afc7f9fcd10ff63205b70c789b7aa01117eca7a6281f856040518082815260200191505060405180910390a350505050565b606080600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506040519080825280602002602001820160405280156109e35781602001602082028038833980820191505090505b50925060009150600090505b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610b0f57600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481101515610a8557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383815181101515610abe57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818060010192505080806001019150506109ef565b829350505050919050565b600460205281600052604060002081815481101515610b3557fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260205281600052604060002081815481101515610b8257fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0f57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003602052816000526040600020602052806000526040600020600091509150505481565b6001602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b606080600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050604051908082528060200260200182016040528015610dd45781602001602082028038833980820191505090505b50925060009150600090505b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610f0057600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481101515610e7657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383815181101515610eaf57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081806001019250508080600101915050610de0565b829350505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6657600080fd5b610f6f816116a0565b50565b600080600080600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549350600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500381548110151561108b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925082600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110151561110557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506001600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081818054905003915081611226919061179a565b50600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500381548110151561133757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156113b157fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818180549050039150816114cf919061179a565b508573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fe5dcccfe8e7890c6d4aa94d44c3b409fb6f023337f29c3308077c0c4068192c460405160405180910390a3505050505050565b60008060008060009250600091505b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905082101561169557600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156115d757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154830192508180600101925050611541565b829350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116dc57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8154818355818111156117c1578183600052602060002091820191016117c091906117c6565b5b505050565b6117e891905b808211156117e45760008160009055506001016117cc565b5090565b905600a165627a7a7230582045df2943acfe4ee16648c2c463020e618aee1ad24c761a5eedaba1d4159e1a650029"
}