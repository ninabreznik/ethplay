{
  "address": "0x2027f91de5e696c5190a58f6ef5d53261788f7c1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ALLN",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-27\n*/\n\npragma solidity 0.4.21;\n// sol token\n// \n// Professor Rui-Shan Lu Team\n// Lursun <[emailÂ protected]>\n// reference https://ethereum.org/token\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract TokenERC20 is owned {\n    address public deployer;\n    // Public variables of the token\n    string public name =\"Airline & Life Networking\";\n    string public symbol = \"ALLN\";\n    uint8 public decimals = 4;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20() public {\n        deployer = msg.sender;\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowance[_from][msg.sender] >= _value);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is TokenERC20 {\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken() TokenERC20() public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require(balanceOf[_from] >= _value);               // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        uint tempSupply = totalSupply;\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        require(totalSupply >= tempSupply);\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function () payable public {\n        require(false);\n    }\n\n}\n\ncontract ALLN is MyAdvancedToken {\n    mapping(address => uint) public lockdate;\n    mapping(address => uint) public lockTokenBalance;\n\n    event LockToken(address account, uint amount, uint unixtime);\n\n    function ALLN() MyAdvancedToken() public {}\n    function getLockBalance(address account) internal returns(uint) {\n        if(now >= lockdate[account]) {\n            lockdate[account] = 0;\n            lockTokenBalance[account] = 0;\n        }\n        return lockTokenBalance[account];\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        uint usableBalance = balanceOf[_from] - getLockBalance(_from);\n        require(balanceOf[_from] >= usableBalance);\n        require(_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\n        require(usableBalance >= _value);                   // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n\n    function lockTokenToDate(address account, uint amount, uint unixtime) onlyOwner public {\n        require(unixtime >= lockdate[account]);\n        require(unixtime >= now);\n        if(balanceOf[account] >= amount) {\n            lockdate[account] = unixtime;\n            lockTokenBalance[account] = amount;\n            emit LockToken(account, amount, unixtime);\n        }\n    }\n\n    function lockTokenDays(address account, uint amount, uint _days) public {\n        uint unixtime = _days * 1 days + now;\n        lockTokenToDate(account, amount, unixtime);\n    }\n\n     /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\n        uint usableBalance = balanceOf[msg.sender] - getLockBalance(msg.sender);\n        require(balanceOf[msg.sender] >= usableBalance);\n        require(usableBalance >= _value);           // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}",
  "bytecode": "606060405260408051908101604052601981527f4169726c696e652026204c696665204e6574776f726b696e67000000000000006020820152600290805161004b9291602001906100db565b5060408051908101604052600481527f414c4c4e00000000000000000000000000000000000000000000000000000000602082015260039080516100939291602001906100db565b506004805460ff19168117905534156100ab57600080fd5b60008054600160a060020a033316600160a060020a03199182168117909255600180549091169091179055610176565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011c57805160ff1916838001178555610149565b82800160010185558215610149579182015b8281111561014957825182559160200191906001019061012e565b50610155929150610159565b5090565b61017391905b80821115610155576000815560010161015f565b90565b610c0b806101856000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610118578063095ea7b3146101a257806318160ddd146101d857806323b872dd146101fd57806324ab83d314610225578063313ce5671461024457806342966c681461026d5780634aafef501461028357806370a08231146102a257806379c65068146102c15780638da5cb5b146102e357806395d89b4114610312578063a9059cbb14610325578063b414d4b614610347578063d472fa2614610366578063d5f394881461038b578063d95405f21461039e578063dd62ed3e146103c3578063e724529c146103e8578063f2fde38b1461040c575b600080fd5b005b341561012357600080fd5b61012b61042b565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016757808201518382015260200161014f565b50505050905090810190601f1680156101945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ad57600080fd5b6101c4600160a060020a03600435166024356104c9565b604051901515815260200160405180910390f35b34156101e357600080fd5b6101eb610535565b60405190815260200160405180910390f35b341561020857600080fd5b6101c4600160a060020a036004358116906024351660443561053b565b341561023057600080fd5b6101eb600160a060020a03600435166105b3565b341561024f57600080fd5b6102576105c5565b60405160ff909116815260200160405180910390f35b341561027857600080fd5b6101c46004356105ce565b341561028e57600080fd5b6101eb600160a060020a0360043516610693565b34156102ad57600080fd5b6101eb600160a060020a03600435166106a5565b34156102cc57600080fd5b610116600160a060020a03600435166024356106b7565b34156102ee57600080fd5b6102f6610797565b604051600160a060020a03909116815260200160405180910390f35b341561031d57600080fd5b61012b6107a6565b341561033057600080fd5b610116600160a060020a0360043516602435610811565b341561035257600080fd5b6101c4600160a060020a0360043516610820565b341561037157600080fd5b610116600160a060020a0360043516602435604435610835565b341561039657600080fd5b6102f661092d565b34156103a957600080fd5b610116600160a060020a036004351660243560443561093c565b34156103ce57600080fd5b6101eb600160a060020a0360043581169060243516610955565b34156103f357600080fd5b610116600160a060020a03600435166024351515610972565b341561041757600080fd5b610116600160a060020a03600435166109fe565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b505050505081565b600160a060020a03338116600081815260076020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60055481565b600160a060020a038084166000908152600760209081526040808320339094168352929052908120548290101561057157600080fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220805483900390556105a9848484610a48565b5060019392505050565b60096020526000908152604090205481565b60045460ff1681565b60008054819033600160a060020a039081169116146105ec57600080fd5b6105f533610b7d565b600160a060020a03331660009081526006602052604090205490810391508190101561062057600080fd5b8281101561062d57600080fd5b600160a060020a03331660008181526006602052604090819020805486900390556005805486900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59085905190815260200160405180910390a250600192915050565b600a6020526000908152604090205481565b60066020526000908152604090205481565b6000805433600160a060020a039081169116146106d357600080fd5b5060058054600160a060020a03841660009081526006602052604090208054840190558154830191829055908190101561070c57600080fd5b30600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a382600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3505050565b600054600160a060020a031681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c15780601f10610496576101008083540402835291602001916104c1565b61081c338383610a48565b5050565b60086020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461085057600080fd5b600160a060020a03831660009081526009602052604090205481101561087557600080fd5b4281101561088257600080fd5b600160a060020a03831660009081526006602052604090205482901061092857600160a060020a0383166000908152600960209081526040808320849055600a909152908190208390557f2d814308d70a2c356e04b9495a463b35b22563f541e00d2dad99471d2849661290849084908490518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a15b505050565b600154600160a060020a031681565b620151808102420161094f848483610835565b50505050565b600760209081526000928352604080842090915290825290205481565b60005433600160a060020a0390811691161461098d57600080fd5b600160a060020a03821660009081526008602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610a1957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610a5384610b7d565b600160a060020a038516600090815260066020526040902054908103915081901015610a7e57600080fd5b600160a060020a0383161515610a9357600080fd5b81811015610aa057600080fd5b600160a060020a03831660009081526006602052604090205482810111610ac657600080fd5b600160a060020a03841660009081526008602052604090205460ff1615610aec57600080fd5b600160a060020a03831660009081526008602052604090205460ff1615610b1257600080fd5b600160a060020a038085166000818152600660205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350505050565b600160a060020a0381166000908152600960205260408120544210610bc357600160a060020a0382166000908152600960209081526040808320839055600a9091528120555b50600160a060020a03166000908152600a6020526040902054905600a165627a7a723058209e68436625f4a462c40a9705cb109c6050d71b3d6a3891d2ea8f73719eebf1850029"
}