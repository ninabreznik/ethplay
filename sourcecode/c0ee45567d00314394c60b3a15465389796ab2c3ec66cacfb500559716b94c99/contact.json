{
  "address": "0x271a0b465d5b453bb835afd2d671c76b2b76900e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoToon",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-02\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC721Basic {\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n    function exists(uint256 _tokenId) public view returns (bool _exists);\n\n    function approve(address _to, uint256 _tokenId) public;\n\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n    function setApprovalForAll(address _operator, bool _approved) public;\n\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    //    function safeTransferFrom(\n    //        address _from,\n    //        address _to,\n    //        uint256 _tokenId,\n    //        bytes _data\n    //    )\n    //    public;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n    function totalSupply() public view returns (uint256);\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n\n    function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n    function name() public view returns (string _name);\n\n    function symbol() public view returns (string _symbol);\n\n    function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\ncontract ToonInterface is ERC721 {\n\n    function isToonInterface() external pure returns (bool);\n\n    /**\n    * @notice   Returns an address of the toon author. 0x0 if\n    *           the toon has been created by us.\n    */\n    function authorAddress() external view returns (address);\n\n    /**\n    * @notice   Returns maximum supply. In other words there will\n    *           be never more toons that that number. It has to\n    *           be constant.\n    *           If there is no limit function returns 0.\n    */\n    function maxSupply() external view returns (uint256);\n\n    function getToonInfo(uint _id) external view returns (\n        uint genes,\n        uint birthTime,\n        address owner\n    );\n\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS NOT paused\n     */\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused returns (bool) {\n        paused = true;\n        emit Pause();\n        return true;\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused returns (bool) {\n        paused = false;\n        emit Unpause();\n        return true;\n    }\n}\n\ncontract Withdrawable {\n\n    mapping(address => uint) private pendingWithdrawals;\n\n    event Withdrawal(address indexed receiver, uint amount);\n    event BalanceChanged(address indexed _address, uint oldBalance, uint newBalance);\n\n    /**\n    * Returns amount of wei that given address is able to withdraw.\n    */\n    function getPendingWithdrawal(address _address) public view returns (uint) {\n        return pendingWithdrawals[_address];\n    }\n\n    /**\n    * Add pending withdrawal for an address.\n    */\n    function addPendingWithdrawal(address _address, uint _amount) internal {\n        require(_address != 0x0);\n\n        uint oldBalance = pendingWithdrawals[_address];\n        pendingWithdrawals[_address] += _amount;\n\n        emit BalanceChanged(_address, oldBalance, oldBalance + _amount);\n    }\n\n    /**\n    * Withdraws all pending withdrawals.\n    */\n    function withdraw() external {\n        uint amount = getPendingWithdrawal(msg.sender);\n        require(amount > 0);\n\n        pendingWithdrawals[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\n        emit Withdrawal(msg.sender, amount);\n        emit BalanceChanged(msg.sender, amount, 0);\n    }\n\n}\n\ncontract ClockAuctionBase is Withdrawable, Pausable {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Address of a contract\n        address _contract;\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n    }\n\n    // Reference to contract tracking NFT ownership\n    ToonInterface[] public toonContracts;\n    mapping(address => uint256) addressToIndex;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Values 0-10,000 map to 0%-100%\n    // Author's share from the owner cut.\n    uint256 public authorShare;\n\n    // Map from token ID to their corresponding auction.\n    //    mapping(uint256 => Auction) tokenIdToAuction;\n    mapping(address => mapping(uint256 => Auction)) tokenToAuction;\n\n    event AuctionCreated(address indexed _contract, uint256 indexed tokenId,\n        uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    event AuctionSuccessful(address indexed _contract, uint256 indexed tokenId,\n        uint256 totalPrice, address indexed winner);\n    event AuctionCancelled(address indexed _contract, uint256 indexed tokenId);\n\n    /**\n    * @notice   Adds a new toon contract.\n    */\n    function addToonContract(address _toonContractAddress) external onlyOwner {\n        ToonInterface _interface = ToonInterface(_toonContractAddress);\n        require(_interface.isToonInterface());\n\n        uint _index = toonContracts.push(_interface) - 1;\n        addressToIndex[_toonContractAddress] = _index;\n    }\n\n    /// @dev Returns true if the claimant owns the token.\n    /// @param _contract - address of a toon contract\n    /// @param _claimant - Address claiming to own the token.\n    /// @param _tokenId - ID of token whose ownership to verify.\n    function _owns(address _contract, address _claimant, uint256 _tokenId)\n    internal\n    view\n    returns (bool) {\n        ToonInterface _interface = _interfaceByAddress(_contract);\n        address _owner = _interface.ownerOf(_tokenId);\n\n        return (_owner == _claimant);\n    }\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    function _escrow(address _contract, address _owner, uint256 _tokenId) internal {\n        ToonInterface _interface = _interfaceByAddress(_contract);\n        // it will throw if transfer fails\n        _interface.transferFrom(_owner, this, _tokenId);\n    }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _contract, address _receiver, uint256 _tokenId) internal {\n        ToonInterface _interface = _interfaceByAddress(_contract);\n        // it will throw if transfer fails\n        _interface.transferFrom(this, _receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(address _contract, uint256 _tokenId, Auction _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        _isAddressSupportedContract(_contract);\n        tokenToAuction[_contract][_tokenId] = _auction;\n\n        emit AuctionCreated(\n            _contract,\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }\n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(address _contract, uint256 _tokenId, address _seller) internal {\n        _removeAuction(_contract, _tokenId);\n        _transfer(_contract, _seller, _tokenId);\n        emit AuctionCancelled(_contract, _tokenId);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bid(address _contract, uint256 _tokenId, uint256 _bidAmount)\n    internal\n    returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n        ToonInterface _interface = _interfaceByAddress(auction._contract);\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_contract, _tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut;\n            uint256 authorCut;\n            uint256 sellerProceeds;\n            (auctioneerCut, authorCut, sellerProceeds) = _computeCut(_interface, price);\n\n            if (authorCut > 0) {\n                address authorAddress = _interface.authorAddress();\n                addPendingWithdrawal(authorAddress, authorCut);\n            }\n\n            addPendingWithdrawal(owner, auctioneerCut);\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Calculate any excess funds included with the bid. If the excess\n        // is anything worth worrying about, transfer it back to bidder.\n        // NOTE: We checked above that the bid amount is greater than or\n        // equal to the price so this cannot underflow.\n        uint256 bidExcess = _bidAmount - price;\n\n        // Return the funds. Similar to the previous transfer, this is\n        // not susceptible to a re-entry attack because the auction is\n        // removed before any transfers occur.\n        msg.sender.transfer(bidExcess);\n\n        // Tell the world!\n        emit AuctionSuccessful(_contract, _tokenId, price, msg.sender);\n\n        return price;\n    }\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(address _contract, uint256 _tokenId) internal {\n        delete tokenToAuction[_contract][_tokenId];\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    /// @dev Returns current price of an NFT on auction. Broken into two\n    ///  functions (this one, that computes the duration from the auction\n    ///  structure, and the other that does the price computation) so we\n    ///  can easily test that the price computation works correctly.\n    function _currentPrice(Auction storage _auction)\n    internal\n    view\n    returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    /// @dev Computes the current price of an auction. Factored out\n    ///  from _currentPrice so we can run extensive unit tests.\n    ///  When testing, make this function public and turn on\n    ///  `Current price computation` test suite.\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n    internal\n    pure\n    returns (uint256)\n    {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }\n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(ToonInterface _interface, uint256 _price) internal view returns (\n        uint256 ownerCutValue,\n        uint256 authorCutValue,\n        uint256 sellerProceeds\n    ) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n\n        uint256 _totalCut = _price * ownerCut / 10000;\n        uint256 _authorCut = 0;\n        uint256 _ownerCut = 0;\n        if (_interface.authorAddress() != 0x0) {\n            _authorCut = _totalCut * authorShare / 10000;\n        }\n\n        _ownerCut = _totalCut - _authorCut;\n        uint256 _sellerProfit = _price - _ownerCut - _authorCut;\n        require(_sellerProfit + _ownerCut + _authorCut == _price);\n\n        return (_ownerCut, _authorCut, _sellerProfit);\n    }\n\n    function _interfaceByAddress(address _address) internal view returns (ToonInterface) {\n        uint _index = addressToIndex[_address];\n        ToonInterface _interface = toonContracts[_index];\n        require(_address == address(_interface));\n\n        return _interface;\n    }\n\n    function _isAddressSupportedContract(address _address) internal view returns (bool) {\n        uint _index = addressToIndex[_address];\n        ToonInterface _interface = toonContracts[_index];\n        return _address == address(_interface);\n    }\n}\n\ncontract ClockAuction is ClockAuctionBase {\n\n    /// @dev The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n\n    bool public isSaleClockAuction = true;\n\n    /// @dev Constructor creates a reference to the NFT ownership contract\n    ///  and verifies the owner cut is in the valid range.\n    /// @param _ownerCut - percent cut the owner takes on each auction, must be\n    ///  between 0-10,000.\n    /// @param _authorShare - percent share of the author of the toon.\n    ///  Calculated from the ownerCut\n    constructor(uint256 _ownerCut, uint256 _authorShare) public {\n        require(_ownerCut <= 10000);\n        require(_authorShare <= 10000);\n\n        ownerCut = _ownerCut;\n        authorShare = _authorShare;\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        address _contract,\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n    external\n    whenNotPaused\n    {\n        require(_isAddressSupportedContract(_contract));\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        _escrow(_contract, _seller, _tokenId);\n\n        Auction memory auction = Auction(\n            _contract,\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_contract, _tokenId, auction);\n    }\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(address _contract, uint256 _tokenId)\n    external\n    payable\n    whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_contract, _tokenId, msg.value);\n        _transfer(_contract, msg.sender, _tokenId);\n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(address _contract, uint256 _tokenId)\n    external\n    {\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_contract, _tokenId, seller);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(address _contract, uint256 _tokenId)\n    whenPaused\n    onlyOwner\n    external\n    {\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_contract, _tokenId, auction.seller);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(address _contract, uint256 _tokenId)\n    external\n    view\n    returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt,\n        uint256 currentPrice\n    ) {\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n\n        if (!_isOnAuction(auction)) {\n            return (0x0, 0, 0, 0, 0, 0);\n        }\n\n        return (\n        auction.seller,\n        auction.startingPrice,\n        auction.endingPrice,\n        auction.duration,\n        auction.startedAt,\n        getCurrentPrice(_contract, _tokenId)\n        );\n    }\n\n    /// @dev Returns the current price of an auction.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(address _contract, uint256 _tokenId)\n    public\n    view\n    returns (uint256)\n    {\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n}\n\n\n\ncontract AccessControl is Ownable {\n    // This facet controls access control for CryptoKitties. There are four roles managed here:\n    //\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\n    //         set to the address that created the smart contract in the KittyCore constructor.\n    //\n    //     - The CFO: The CFO can withdraw funds from KittyCore and its auction contracts.\n    //\n    //     - The COO: The COO can release gen0 kitties to auction, and mint promo cats.\n    //\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\n    // account.\n\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n    bool public paused = false;\n\n    /// @dev Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CFO-only functionality\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for COO-only functionality\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    constructor() public {\n        ceoAddress = owner;\n        cfoAddress = owner;\n        cooAddress = owner;\n    }\n\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n    /// @param _newCFO The address of the new CFO\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\n    ///  a bug or exploit is detected and we need to limit damage.\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n    ///  one reason we may pause the contract is when CFO or COO accounts are\n    ///  compromised.\n    /// @notice This is public rather than external so it can be called by\n    ///  derived contracts.\n    function unpause() public onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n}\n\ninterface ERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\ncontract ERC165MappingImplementation is ERC165 {\n    /// @dev You must not set element 0xffffffff to true\n    mapping(bytes4 => bool) internal supportedInterfaces;\n\n    constructor() internal {\n        supportedInterfaces[this.supportsInterface.selector] = true;\n    }\n\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\n        return supportedInterfaces[interfaceID];\n    }\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function toString(uint i) internal pure returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint length;\n        while (j != 0){\n            length++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(length);\n        uint k = length - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n\n}\n\nlibrary AddressUtils {\n\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     *  as the code is not actually created until after the constructor finishes.\n     * @param addr address to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n        return size > 0;\n    }\n\n}\n\ncontract ERC721Receiver {\n    /**\n     * @dev Magic value to be returned upon successful reception of an NFT\n     *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n     *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n     */\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     *  after a `safetransfer`. This function MAY throw to revert and reject the\n     *  transfer. This function MUST use 50,000 gas or less. Return of other\n     *  than the magic value MUST result in the transaction being reverted.\n     *  Note: the contract address is always the message sender.\n     * @param _from The sending address\n     * @param _tokenId The NFT identifier which is being transfered\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n}\n\ncontract ERC721BasicToken is ERC721Basic, ERC165MappingImplementation {\n    using SafeMath for uint256;\n    using AddressUtils for address;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n    // Mapping from token ID to owner\n    mapping(uint256 => address) internal tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) internal tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping(address => uint256) internal ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) internal operatorApprovals;\n\n    /**\n     * @dev Guarantees msg.sender is owner of the given token\n     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n     */\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n    constructor() public {\n        supportedInterfaces[0x80ac58cd] = true;\n    }\n\n    /**\n     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n     * @param _tokenId uint256 ID of the token to validate\n     */\n    modifier canTransfer(uint256 _tokenId) {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        _;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param _owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        require(_owner != address(0));\n        return ownedTokensCount[_owner];\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param _tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        address owner = tokenOwner[_tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param _tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function exists(uint256 _tokenId) public view returns (bool) {\n        address owner = tokenOwner[_tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * @dev The zero address indicates there is no approved address.\n     * @dev There can only be one approved address per token at a given time.\n     * @dev Can only be called by the token owner or an approved operator.\n     * @param _to address to be approved for the given token ID\n     * @param _tokenId uint256 ID of the token to be approved\n     */\n    function approve(address _to, uint256 _tokenId) public {\n        address owner = ownerOf(_tokenId);\n        require(_to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n            tokenApprovals[_tokenId] = _to;\n            emit Approval(owner, _to, _tokenId);\n        }\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * @param _tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 _tokenId) public view returns (address) {\n        return tokenApprovals[_tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param _to operator address to set the approval\n     * @param _approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address _to, bool _approved) public {\n        require(_to != msg.sender);\n        operatorApprovals[msg.sender][_to] = _approved;\n        emit ApprovalForAll(msg.sender, _to, _approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param _owner owner address which you want to query the approval of\n     * @param _operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n        return operatorApprovals[_owner][_operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n        require(_from != address(0));\n        require(_to != address(0));\n\n        clearApproval(_from, _tokenId);\n        removeTokenFrom(_from, _tokenId);\n        addTokenTo(_to, _tokenId);\n\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\n     *  which is called upon a safe transfer, and return the magic value\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n     *  the transfer is reverted.\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n    public\n    canTransfer(_tokenId)\n    {\n        // solium-disable-next-line arg-overflow\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\n     *  which is called upon a safe transfer, and return the magic value\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n     *  the transfer is reverted.\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n    public\n    canTransfer(_tokenId)\n    {\n        transferFrom(_from, _to, _tokenId);\n        // solium-disable-next-line arg-overflow\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param _spender address of the spender to query\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *  is an operator of the owner, or is the owner of the token\n     */\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n        address owner = ownerOf(_tokenId);\n        return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n    }\n\n    /**\n     * @dev Internal function to mint a new token\n     * @dev Reverts if the given token ID already exists\n     * @param _to The address that will own the minted token\n     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n     */\n    function _mint(address _to, uint256 _tokenId) internal {\n        require(_to != address(0));\n        addTokenTo(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n    }\n\n    /**\n     * @dev Internal function to clear current approval of a given token ID\n     * @dev Reverts if the given address is not indeed the owner of the token\n     * @param _owner owner of the token\n     * @param _tokenId uint256 ID of the token to be transferred\n     */\n    function clearApproval(address _owner, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _owner);\n        if (tokenApprovals[_tokenId] != address(0)) {\n            tokenApprovals[_tokenId] = address(0);\n            emit Approval(_owner, address(0), _tokenId);\n        }\n    }\n\n    /**\n     * @dev Internal function to add a token ID to the list of a given address\n     * @param _to address representing the new owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        require(tokenOwner[_tokenId] == address(0));\n        tokenOwner[_tokenId] = _to;\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n    }\n\n    /**\n     * @dev Internal function to remove a token ID from the list of a given address\n     * @param _from address representing the previous owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _from);\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n        tokenOwner[_tokenId] = address(0);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * @dev The call is not executed if the target address is not a contract\n     * @param _from address representing the previous owner of the given token ID\n     * @param _to target address that will receive the tokens\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function checkAndCallSafeTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n    internal\n    returns (bool)\n    {\n        if (!_to.isContract()) {\n            return true;\n        }\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n        return (retval == ERC721_RECEIVED);\n    }\n}\n\ncontract ERC721Token is ERC721, ERC721BasicToken {\n\n    // Token name\n    string internal name_;\n\n    // Token symbol\n    string internal symbol_;\n\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) internal ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) internal ownedTokensIndex;\n\n    /**\n     * @dev Constructor function\n     */\n    constructor(string _name, string _symbol) public {\n        supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\n        supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\n\n        name_ = _name;\n        symbol_ = _symbol;\n    }\n\n    /**\n     * @dev Gets the token name\n     * @return string representing the token name\n     */\n    function name() public view returns (string) {\n        return name_;\n    }\n\n    /**\n     * @dev Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() public view returns (string) {\n        return symbol_;\n    }\n\n    /**\n     * @dev Returns an URI for a given token ID\n     * @dev Throws if the token ID does not exist. May return an empty string.\n     * @param _tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 _tokenId) public view returns (string);\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\n     * @param _owner address owning the tokens list to be accessed\n     * @param _index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n        require(_index < balanceOf(_owner));\n        return ownedTokens[_owner][_index];\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256);\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * @dev Reverts if the index is greater or equal to the total number of tokens\n     * @param _index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\n        require(_index < totalSupply());\n\n        //In our case id is an index and vice versa.\n        return _index;\n    }\n\n    /**\n     * @dev Internal function to add a token ID to the list of a given address\n     * @param _to address representing the new owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        super.addTokenTo(_to, _tokenId);\n        uint256 length = ownedTokens[_to].length;\n        ownedTokens[_to].push(_tokenId);\n        ownedTokensIndex[_tokenId] = length;\n    }\n\n    /**\n     * @dev Internal function to remove a token ID from the list of a given address\n     * @param _from address representing the previous owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        super.removeTokenFrom(_from, _tokenId);\n\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n        ownedTokens[_from][tokenIndex] = lastToken;\n        ownedTokens[_from][lastTokenIndex] = 0;\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n        ownedTokens[_from].length--;\n        ownedTokensIndex[_tokenId] = 0;\n        ownedTokensIndex[lastToken] = tokenIndex;\n    }\n\n}\n\nlibrary StringUtils {\n\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string memory self) internal pure returns (slice memory) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n}\n\ncontract ToonBase is ERC721Token, AccessControl, ToonInterface {\n\n    using StringUtils for *;\n    using SafeMath for uint;\n\n    Toon[] private toons;\n    uint public maxSupply;\n    uint32 public maxPromoToons;\n    address public authorAddress;\n\n    string public endpoint = \"https://mindhouse.io:3100/metadata/\";\n\n    constructor(string _name, string _symbol, uint _maxSupply, uint32 _maxPromoToons, address _author)\n    public\n    ERC721Token(_name, _symbol) {\n        require(_maxPromoToons <= _maxSupply);\n\n        maxSupply = _maxSupply;\n        maxPromoToons = _maxPromoToons;\n        authorAddress = _author;\n    }\n\n    function maxSupply() external view returns (uint) {\n        return maxSupply;\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return toons.length;\n    }\n\n    /**\n     * @dev Returns an URI for a given token ID\n     * @dev Throws if the token ID does not exist. May return an empty string.\n     * @param _tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 _tokenId) public view returns (string) {\n        require(exists(_tokenId));\n        string memory slash = \"/\";\n        return endpoint.toSlice().concat(name_.toSlice()).toSlice().concat(slash.toSlice()).toSlice().concat(_tokenId.toString().toSlice());\n    }\n\n    function authorAddress() external view returns (address) {\n        return authorAddress;\n    }\n\n    function changeEndpoint(string newEndpoint) external onlyOwner {\n        endpoint = newEndpoint;\n    }\n\n    function isToonInterface() external pure returns (bool) {\n        return true;\n    }\n\n    function _getToon(uint _id) internal view returns (Toon){\n        require(_id <= totalSupply());\n        return toons[_id];\n    }\n\n    function _createToon(uint _genes, address _owner) internal {\n        require(totalSupply() < maxSupply);\n\n        Toon memory _toon = Toon(_genes, now);\n        uint id = toons.push(_toon) - 1;\n\n        _mint(_owner, id);\n    }\n\n    struct Toon {\n        uint256 genes;\n\n        uint256 birthTime;\n    }\n}\n\nlibrary SafeMath32 {\n\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint32 a, uint32 b) internal pure returns (uint32 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint32 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\ncontract ToonMinting is ToonBase {\n    using SafeMath32 for uint32;\n\n    uint32 public promoToonsMinted = 0;\n\n    constructor(string _name, string _symbol, uint _maxSupply, uint32 _maxPromoToons, address _author)\n    public\n    ToonBase(_name, _symbol, _maxSupply, _maxPromoToons, _author) {\n    }\n\n    function createPromoToon(uint _genes, address _owner) external onlyCOO {\n        require(promoToonsMinted < maxPromoToons);\n        address _toonOwner = _owner;\n        if (_toonOwner == 0x0) {\n            _toonOwner = cooAddress;\n        }\n\n        _createToon(_genes, _toonOwner);\n        promoToonsMinted = promoToonsMinted.add(1);\n    }\n\n}\n\ncontract ToonAuction is ToonMinting {\n\n    ClockAuction public saleAuction;\n\n    constructor(string _name, string _symbol, uint _maxSupply, uint32 _maxPromoToons, address _author)\n    public\n    ToonMinting(_name, _symbol, _maxSupply, _maxPromoToons, _author) {\n    }\n\n    function setSaleAuctionAddress(address _address) external onlyCEO {\n        ClockAuction candidateContract = ClockAuction(_address);\n        require(candidateContract.isSaleClockAuction());\n\n        // Set the new contract address\n        saleAuction = candidateContract;\n    }\n\n    function createSaleAuction(\n        uint256 _toonId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n    external\n    whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If toon is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(ownerOf(_toonId) == msg.sender);\n        approve(saleAuction, _toonId);\n\n        // Sale auction throws if inputs are invalid and clears\n        // transfer approval after escrowing the toon.\n        saleAuction.createAuction(\n            this,\n            _toonId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n}\n\ncontract CryptoToon is ToonAuction {\n\n    constructor(string _name, string _symbol, uint _maxSupply, uint32 _maxPromoToons, address _author)\n    public\n    ToonAuction(_name, _symbol, _maxSupply, _maxPromoToons, _author) {\n    }\n\n    function getToonInfo(uint _id) external view returns (\n        uint genes,\n        uint birthTime,\n        address owner\n    ) {\n        Toon memory _toon = _getToon(_id);\n        return (_toon.genes, _toon.birthTime, ownerOf(_id));\n    }\n\n}",
  "bytecode": "600c805460a060020a60ff021916905560e0604052602360808190527f68747470733a2f2f6d696e64686f7573652e696f3a333130302f6d657461646160a09081527f74612f000000000000000000000000000000000000000000000000000000000060c052620000749160109190620002b8565b506011805463ffffffff191690553480156200008f57600080fd5b5060405162002121380380620021218339810160409081528151602080840151928401516060850151608086015160008085527f67be87c3ff9960ca1e9cfac5cab2ff4747269cf9ed20c9b7306235ac35a491c58054600160ff1991821681179092557ff7815fccbf112960a73756e185887fedcb9fc64ca0a16cc5923b7960ed78080080548216831790557f9562381dfbc2d8b8b66e765249f330164b73e329e5f01670660643571d1974df80548216831790557f780e9d63000000000000000000000000000000000000000000000000000000009092527f77b7bbe0e49b76487c9476b5db3354cf5270619d0037ccb899c2a4c4a75b4318805490921617905593860180519096959095019491939092909186918691869186918691869186918691869186918691869186918691869186918691620001d691600591850190620002b8565b508051620001ec906006906020840190620002b8565b50506009805433600160a060020a03199182161791829055600a8054600160a060020a0390931692821683179055600b8054821683179055600c805490911690911790555063ffffffff82168310156200024557600080fd5b600e92909255600f805463ffffffff191663ffffffff92909216919091177fffffffffffffffff0000000000000000000000000000000000000000ffffffff16640100000000600160a060020a0390931692909202919091179055506200035d9f50505050505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002fb57805160ff19168380011785556200032b565b828001600101855582156200032b579182015b828111156200032b5782518255916020019190600101906200030e565b50620003399291506200033d565b5090565b6200035a91905b8082111562000339576000815560010162000344565b90565b611db4806200036d6000396000f3006080604052600436106101d45763ffffffff60e060020a60003504166301ffc9a781146101d957806302a86781146102245780630519ce791461025557806306fdde031461026a578063081812fc146102f4578063095ea7b31461030c5780630a0f81681461033257806318160ddd146103475780631d9070751461036e57806323b872dd146103ad57806327d7874c146103d75780632ba73c15146103f85780632f745c591461041957806335bb5fd21461043d5780633d7d3f5a146104525780633f4ba83a1461047357806342842e0e146104885780634e0a3379146104b25780634f558e79146104d35780634f6ccce7146104eb5780635c975abb146105035780635e280f11146105185780636352211e1461052d5780636fbde40d1461054557806370a08231146105665780637d01a517146105875780638456cb59146105a75780638da5cb5b146105bc57806395d89b41146105d1578063a22cb465146105e6578063a27771a61461060c578063ab90f85514610630578063b047fb501461065e578063b88d4fde14610673578063c87b56dd146106e2578063d5abeb01146106fa578063e6cbe3511461070f578063e985e9c514610724578063f2fde38b1461074b578063f42541be1461076c575b600080fd5b3480156101e557600080fd5b506102107bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610781565b604080519115158252519081900360200190f35b34801561023057600080fd5b506102396107b5565b60408051600160a060020a039092168252519081900360200190f35b34801561026157600080fd5b506102396107cd565b34801561027657600080fd5b5061027f6107dc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102b95781810151838201526020016102a1565b50505050905090810190601f1680156102e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030057600080fd5b50610239600435610872565b34801561031857600080fd5b50610330600160a060020a036004351660243561088d565b005b34801561033e57600080fd5b50610239610972565b34801561035357600080fd5b5061035c610981565b60408051918252519081900360200190f35b34801561037a57600080fd5b50610386600435610987565b604080519384526020840192909252600160a060020a031682820152519081900360600190f35b3480156103b957600080fd5b50610330600160a060020a03600435811690602435166044356109c0565b3480156103e357600080fd5b50610330600160a060020a0360043516610a6f565b34801561040457600080fd5b50610330600160a060020a0360043516610abd565b34801561042557600080fd5b5061035c600160a060020a0360043516602435610b0b565b34801561044957600080fd5b50610210610b58565b34801561045e57600080fd5b50610330600435602435604435606435610b5d565b34801561047f57600080fd5b50610330610c5b565b34801561049457600080fd5b50610330600160a060020a0360043581169060243516604435610caa565b3480156104be57600080fd5b50610330600160a060020a0360043516610ce2565b3480156104df57600080fd5b50610210600435610d30565b3480156104f757600080fd5b5061035c600435610d4d565b34801561050f57600080fd5b50610210610d66565b34801561052457600080fd5b5061027f610d76565b34801561053957600080fd5b50610239600435610e04565b34801561055157600080fd5b50610330600160a060020a0360043516610e2e565b34801561057257600080fd5b5061035c600160a060020a0360043516610efc565b34801561059357600080fd5b506103306004803560248101910135610f2f565b3480156105b357600080fd5b50610330610f52565b3480156105c857600080fd5b50610239610fd2565b3480156105dd57600080fd5b5061027f610fe1565b3480156105f257600080fd5b50610330600160a060020a03600435166024351515611042565b34801561061857600080fd5b50610330600435600160a060020a03602435166110c6565b34801561063c57600080fd5b5061064561115c565b6040805163ffffffff9092168252519081900360200190f35b34801561066a57600080fd5b50610239611168565b34801561067f57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261033094600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506111779650505050505050565b3480156106ee57600080fd5b5061027f6004356111b6565b34801561070657600080fd5b5061035c611335565b34801561071b57600080fd5b5061023961133b565b34801561073057600080fd5b50610210600160a060020a0360043581169060243516611352565b34801561075757600080fd5b50610330600160a060020a0360043516611380565b34801561077857600080fd5b50610645611408565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b600f546401000000009004600160a060020a03165b90565b600b54600160a060020a031681565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108685780601f1061083d57610100808354040283529160200191610868565b820191906000526020600020905b81548152906001019060200180831161084b57829003601f168201915b5050505050905090565b600090815260026020526040902054600160a060020a031690565b600061089882610e04565b9050600160a060020a0383811690821614156108b357600080fd5b33600160a060020a03821614806108cf57506108cf8133611352565b15156108da57600080fd5b60006108e583610872565b600160a060020a03161415806109035750600160a060020a03831615155b1561096d576000828152600260209081526040918290208054600160a060020a031916600160a060020a03878116918217909255835186815293519093918516927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35b505050565b600a54600160a060020a031681565b600d5490565b6000806000610994611cbd565b61099d85611414565b9050806000015181602001516109b287610e04565b935093509350509193909250565b806109cb3382611472565b15156109d657600080fd5b600160a060020a03841615156109eb57600080fd5b600160a060020a0383161515610a0057600080fd5b610a0a84836114d1565b610a148483611572565b610a1e83836116ab565b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b600a54600160a060020a03163314610a8657600080fd5b600160a060020a0381161515610a9b57600080fd5b600a8054600160a060020a031916600160a060020a0392909216919091179055565b600a54600160a060020a03163314610ad457600080fd5b600160a060020a0381161515610ae957600080fd5b600c8054600160a060020a031916600160a060020a0392909216919091179055565b6000610b1683610efc565b8210610b2157600080fd5b600160a060020a0383166000908152600760205260409020805483908110610b4557fe5b9060005260206000200154905092915050565b600190565b600c5460a060020a900460ff1615610b7457600080fd5b33610b7e85610e04565b600160a060020a031614610b9157600080fd5b601154610baf906401000000009004600160a060020a03168561088d565b601154604080517fe6effbe9000000000000000000000000000000000000000000000000000000008152306004820152602481018790526044810186905260648101859052608481018490523360a48201529051640100000000909204600160a060020a03169163e6effbe99160c48082019260009290919082900301818387803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b5050505050505050565b600a54600160a060020a03163314610c7257600080fd5b600c5460a060020a900460ff161515610c8a57600080fd5b600c805474ff000000000000000000000000000000000000000019169055565b80610cb53382611472565b1515610cc057600080fd5b610cdc8484846020604051908101604052806000815250611177565b50505050565b600a54600160a060020a03163314610cf957600080fd5b600160a060020a0381161515610d0e57600080fd5b600b8054600160a060020a031916600160a060020a0392909216919091179055565b600090815260016020526040902054600160a060020a0316151590565b6000610d57610981565b8210610d6257600080fd5b5090565b600c5460a060020a900460ff1681565b6010805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dfc5780601f10610dd157610100808354040283529160200191610dfc565b820191906000526020600020905b815481529060010190602001808311610ddf57829003601f168201915b505050505081565b600081815260016020526040812054600160a060020a0316801515610e2857600080fd5b92915050565b600a54600090600160a060020a03163314610e4857600080fd5b81905080600160a060020a03166385b861886040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e8957600080fd5b505af1158015610e9d573d6000803e3d6000fd5b505050506040513d6020811015610eb357600080fd5b50511515610ec057600080fd5b60118054600160a060020a039092166401000000000277ffffffffffffffffffffffffffffffffffffffff000000001990921691909117905550565b6000600160a060020a0382161515610f1357600080fd5b50600160a060020a031660009081526003602052604090205490565b600954600160a060020a03163314610f4657600080fd5b61096d60108383611cd4565b600c54600160a060020a0316331480610f755750600a54600160a060020a031633145b80610f8a5750600b54600160a060020a031633145b1515610f9557600080fd5b600c5460a060020a900460ff1615610fac57600080fd5b600c805474ff0000000000000000000000000000000000000000191660a060020a179055565b600954600160a060020a031681565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108685780601f1061083d57610100808354040283529160200191610868565b600160a060020a03821633141561105857600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600c54600090600160a060020a031633146110e057600080fd5b600f5460115463ffffffff9182169116106110fa57600080fd5b5080600160a060020a038116151561111a5750600c54600160a060020a03165b61112483826116f4565b60115461113d9063ffffffff9081169060019061179b16565b6011805463ffffffff191663ffffffff92909216919091179055505050565b600f5463ffffffff1681565b600c54600160a060020a031681565b816111823382611472565b151561118d57600080fd5b6111988585856109c0565b6111a4858585856117b1565b15156111af57600080fd5b5050505050565b6060806111c283610d30565b15156111cd57600080fd5b5060408051808201909152600181527f2f00000000000000000000000000000000000000000000000000000000000000602082015261132e6112166112118561191e565b611a45565b61132261121161122585611a45565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261132293611211936112c0938301828280156112b65780601f1061128b576101008083540402835291602001916112b6565b820191906000526020600020905b81548152906001019060200180831161129957829003601f168201915b5050505050611a45565b60108054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261132293909290918301828280156112b65780601f1061128b576101008083540402835291602001916112b6565b9063ffffffff611a6b16565b9392505050565b600e5490565b6011546401000000009004600160a060020a031681565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600954600160a060020a0316331461139757600080fd5b600160a060020a03811615156113ac57600080fd5b600954604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360098054600160a060020a031916600160a060020a0392909216919091179055565b60115463ffffffff1681565b61141c611cbd565b611424610981565b82111561143057600080fd5b600d80548390811061143e57fe5b9060005260206000209060020201604080519081016040529081600082015481526020016001820154815250509050919050565b60008061147e83610e04565b905080600160a060020a031684600160a060020a031614806114b9575083600160a060020a03166114ae84610872565b600160a060020a0316145b806114c957506114c98185611352565b949350505050565b81600160a060020a03166114e482610e04565b600160a060020a0316146114f757600080fd5b600081815260026020526040902054600160a060020a03161561156e5760008181526002602090815260408083208054600160a060020a031916905580518481529051600160a060020a038616927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35b5050565b60008060006115818585611ae2565b600084815260086020908152604080832054600160a060020a03891684526007909252909120549093506115bc90600163ffffffff611b6b16565b600160a060020a0386166000908152600760205260409020805491935090839081106115e457fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561162457fe5b6000918252602080832090910192909255600160a060020a038716815260079091526040812080548490811061165657fe5b6000918252602080832090910192909255600160a060020a038716815260079091526040902080549061168d906000198301611d4e565b50600093845260086020526040808520859055908452909220555050565b60006116b78383611b7d565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6116fc611cbd565b6000600e54611709610981565b1061171357600080fd5b5050604080518082019091528281524260208201908152600d80546001810182556000919091528251600282027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb581019190915591517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb690920191909155610cdc8382611c00565b81810163ffffffff8084169082161015610e2857fe5b6000806117c685600160a060020a0316611c64565b15156117d55760019150611915565b84600160a060020a031663f0b9e5ba8786866040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561185457818101518382015260200161183c565b50505050905090810190601f1680156118815780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156118a257600080fd5b505af11580156118b6573d6000803e3d6000fd5b505050506040513d60208110156118cc57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167ff0b9e5ba0000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b606060008082818515156119675760408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201529450611a3c565b8593505b831561198257600190920191600a8404935061196b565b826040519080825280601f01601f1916602001820160405280156119b0578160200160208202803883390190505b5091505060001982015b8515611a385781516000198201917f01000000000000000000000000000000000000000000000000000000000000006030600a8a0601029184919081106119fd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a860495506119ba565b8194505b50505050919050565b611a4d611cbd565b50604080518082019091528151815260209182019181019190915290565b606080600083600001518560000151016040519080825280601f01601f191660200182016040528015611aa8578160200160208202803883390190505b509150602082019050611ac48186602001518760000151611c6c565b845160208501518551611ada9284019190611c6c565b509392505050565b81600160a060020a0316611af582610e04565b600160a060020a031614611b0857600080fd5b600160a060020a038216600090815260036020526040902054611b3290600163ffffffff611b6b16565b600160a060020a039092166000908152600360209081526040808320949094559181526001909152208054600160a060020a0319169055565b600082821115611b7757fe5b50900390565b600081815260016020526040902054600160a060020a031615611b9f57600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a0388169081179091558452600390915290912054611be091611cb0565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a0382161515611c1557600080fd5b611c1f82826116ab565b604080518281529051600160a060020a038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000903b1190565b60005b60208210611c91578251845260209384019390920191601f1990910190611c6f565b50905182516020929092036101000a6000190180199091169116179052565b81810182811015610e2857fe5b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611d155782800160ff19823516178555611d42565b82800160010185558215611d42579182015b82811115611d42578235825591602001919060010190611d27565b50610d62929150611d6e565b81548183558181111561096d5760008381526020902061096d9181019083015b6107ca91905b80821115610d625760008155600101611d745600a165627a7a723058208246bb84ec0d1a749ed819ca32d1477785a69128e574de50a5ded6b34daf257d002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b44617070446f6e6b657973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343544e0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b44617070446f6e6b657973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343544e0000000000000000000000000000000000000000000000000000000000"
}