{
  "address": "0x41a322b28d0ff354040e2cbc676f0320d8c8850d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SupeRare Token",
  "contractName": "SupeRare",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-13\n*/\n\npragma solidity ^0.4.18;\n\n\n\n/**\n * @title ERC721 interface\n * @dev see https://github.com/ethereum/eips/issues/721\n */\ncontract ERC721 {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function transfer(address _to, uint256 _tokenId) public;\n  function approve(address _to, uint256 _tokenId) public;\n  function takeOwnership(uint256 _tokenId) public;\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC721Token\n * Generic implementation for the required functionality of the ERC721 standard\n */\ncontract ERC721Token is ERC721 {\n  using SafeMath for uint256;\n\n  // Total amount of tokens\n  uint256 private totalTokens;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private tokenApprovals;\n\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) private ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private ownedTokensIndex;\n\n  /**\n  * @dev Guarantees msg.sender is owner of the given token\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n  */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n  * @dev Gets the total amount of tokens stored by the contract\n  * @return uint256 representing the total amount of tokens\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalTokens;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address\n  * @param _owner address to query the balance of\n  * @return uint256 representing the amount owned by the passed address\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return ownedTokens[_owner].length;\n  }\n\n  /**\n  * @dev Gets the list of tokens owned by a given address\n  * @param _owner address to query the tokens of\n  * @return uint256[] representing the list of tokens owned by the passed address\n  */\n  function tokensOf(address _owner) public view returns (uint256[]) {\n    return ownedTokens[_owner];\n  }\n\n  /**\n  * @dev Gets the owner of the specified token ID\n  * @param _tokenId uint256 ID of the token to query the owner of\n  * @return owner address currently marked as the owner of the given token ID\n  */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Gets the approved address to take ownership of a given token ID\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved to take ownership of the given token ID\n   */\n  function approvedFor(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n  * @dev Transfers the ownership of a given token ID to another address\n  * @param _to address to receive the ownership of the given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n  }\n\n  /**\n  * @dev Approves another address to claim for the ownership of the given token ID\n  * @param _to address to be approved for the given token ID\n  * @param _tokenId uint256 ID of the token to be approved\n  */\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n      tokenApprovals[_tokenId] = _to;\n      Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n  * @dev Claims the ownership of a given token ID\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n  */\n  function takeOwnership(uint256 _tokenId) public {\n    require(isApprovedFor(msg.sender, _tokenId));\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n  }\n\n  /**\n  * @dev Mint token function\n  * @param _to The address that will own the minted token\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n  */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addToken(_to, _tokenId);\n    Transfer(0x0, _to, _tokenId);\n  }\n\n  /**\n  * @dev Burns a specific token\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n  */\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n    if (approvedFor(_tokenId) != 0) {\n      clearApproval(msg.sender, _tokenId);\n    }\n    removeToken(msg.sender, _tokenId);\n    Transfer(msg.sender, 0x0, _tokenId);\n  }\n\n  /**\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\n   * @param _owner address of the owner to query the approval of\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return bool whether the msg.sender is approved for the given token ID or not\n   */\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n    return approvedFor(_tokenId) == _owner;\n  }\n\n  /**\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n  * @param _from address which you want to send tokens from\n  * @param _to address which you want to transfer the token to\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    require(_to != ownerOf(_tokenId));\n    require(ownerOf(_tokenId) == _from);\n\n    clearApproval(_from, _tokenId);\n    removeToken(_from, _tokenId);\n    addToken(_to, _tokenId);\n    Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to clear current approval of a given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApproval(address _owner, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _owner);\n    tokenApprovals[_tokenId] = 0;\n    Approval(_owner, 0, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to add a token ID to the list of a given address\n  * @param _to address representing the new owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n  */\n  function addToken(address _to, uint256 _tokenId) private {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    uint256 length = balanceOf(_to);\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n    totalTokens = totalTokens.add(1);\n  }\n\n  /**\n  * @dev Internal function to remove a token ID from the list of a given address\n  * @param _from address representing the previous owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n  */\n  function removeToken(address _from, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _from);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    tokenOwner[_tokenId] = 0;\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n    totalTokens = totalTokens.sub(1);\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f\ninterface ERC721Metadata /* is ERC721 */ {\n  /// @notice A descriptive name for a collection of NFTs in this contract\n  function name() external pure returns (string _name);\n\n  /// @notice An abbreviated name for NFTs in this contract\n  function symbol() external pure returns (string _symbol);\n\n  /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n  /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n  ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\n  ///  Metadata JSON Schema\".\n  function tokenURI(uint256 _tokenId) external view returns (string);\n}\n\n\ncontract SupeRare is ERC721Token, Ownable, ERC721Metadata {\n    using SafeMath for uint256;\n    \n    // Percentage to owner of SupeRare. (* 10) to allow for < 1% \n    uint256 public maintainerPercentage = 30; \n    \n    // Percentage to creator of artwork. (* 10) to allow for tens decimal. \n    uint256 public creatorPercentage = 100; \n    \n    // Mapping from token ID to the address bidding\n    mapping(uint256 => address) private tokenBidder;\n\n    // Mapping from token ID to the current bid amount\n    mapping(uint256 => uint256) private tokenCurrentBid;\n    \n    // Mapping from token ID to the owner sale price\n    mapping(uint256 => uint256) private tokenSalePrice;\n\n    // Mapping from token ID to the creator's address\n    mapping(uint256 => address) private tokenCreator;\n  \n    // Mapping from token ID to the metadata uri\n    mapping(uint256 => string) private tokenToURI;\n    \n    // Mapping from metadata uri to the token ID\n    mapping(string => uint256) private uriOriginalToken;\n    \n    // Mapping from token ID to whether the token has been sold before.\n    mapping(uint256 => bool) private tokenSold;\n\n    // Mapping of address to boolean indicating whether the add\n    mapping(address => bool) private creatorWhitelist;\n\n\n    event WhitelistCreator(address indexed _creator);\n    event Bid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId);\n    event AcceptBid(address indexed _bidder, address indexed _seller, uint256 _amount, uint256 indexed _tokenId);\n    event CancelBid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId);\n    event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId);\n    event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price);\n\n    /**\n     * @dev Guarantees _uri has not been used with a token already\n     * @param _uri string of the metadata uri associated with the token\n     */\n    modifier uniqueURI(string _uri) {\n        require(uriOriginalToken[_uri] == 0);\n        _;\n    }\n\n    /**\n     * @dev Guarantees msg.sender is not the owner of the given token\n     * @param _tokenId uint256 ID of the token to validate its ownership does not belongs to msg.sender\n     */\n    modifier notOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) != msg.sender);\n        _;\n    }\n\n    /**\n     * @dev Guarantees msg.sender is a whitelisted creator of SupeRare\n     */\n    modifier onlyCreator() {\n        require(creatorWhitelist[msg.sender] == true);\n        _;\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Sets the token to be on its second sale.\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n     */\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        tokenSold[_tokenId] = true;\n        tokenSalePrice[_tokenId] = 0;\n        clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n    }\n\n    /**\n     * @dev Adds a new unique token to the supply\n     * @param _uri string metadata uri associated with the token\n     */\n    function addNewToken(string _uri) public uniqueURI(_uri) onlyCreator {\n        uint256 newId = createToken(_uri, msg.sender);\n        uriOriginalToken[_uri] = newId;\n    }\n\n    /**\n     * @dev Adds a new unique token to the supply with N editions. The sale price is set for all editions\n     * @param _uri string metadata uri associated with the token.\n     * @param _editions uint256 number of editions to create.\n     * @param _salePrice uint256 wei price of editions.\n     */\n    function addNewTokenWithEditions(string _uri, uint256 _editions, uint256 _salePrice) public uniqueURI(_uri) onlyCreator {\n      uint256 originalId = createToken(_uri, msg.sender);\n      uriOriginalToken[_uri] = originalId;\n\n      for (uint256 i=0; i<_editions; i++){\n        uint256 newId = createToken(_uri, msg.sender);\n        tokenSalePrice[newId] = _salePrice;\n        SalePriceSet(newId, _salePrice);\n      }\n    }\n\n    /**\n    * @dev Bids on the token, replacing the bid if the bid is higher than the current bid. You cannot bid on a token you already own.\n    * @param _tokenId uint256 ID of the token to bid on\n    */\n    function bid(uint256 _tokenId) public payable notOwnerOf(_tokenId) {\n        require(isGreaterBid(_tokenId));\n        returnCurrentBid(_tokenId);\n        tokenBidder[_tokenId] = msg.sender;\n        tokenCurrentBid[_tokenId] = msg.value;\n        Bid(msg.sender, msg.value, _tokenId);\n    }\n\n    /**\n     * @dev Accept the bid on the token, transferring ownership to the current bidder and paying out the owner.\n     * @param _tokenId uint256 ID of the token with the standing bid\n     */\n    function acceptBid(uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        uint256 currentBid = tokenCurrentBid[_tokenId];\n        address currentBidder = tokenBidder[_tokenId];\n        address tokenOwner = ownerOf(_tokenId);\n        address creator = tokenCreator[_tokenId];\n        clearApprovalAndTransfer(msg.sender, currentBidder, _tokenId);\n        payout(currentBid, owner, creator, tokenOwner, _tokenId);\n        clearBid(_tokenId);\n        AcceptBid(currentBidder, tokenOwner, currentBid, _tokenId);\n        tokenSalePrice[_tokenId] = 0;\n    }\n    \n    /**\n     * @dev Cancels the bid on the token, returning the bid amount to the bidder.\n     * @param _tokenId uint256 ID of the token with a bid\n     */\n    function cancelBid(uint256 _tokenId) public {\n        address bidder = tokenBidder[_tokenId];\n        require(msg.sender == bidder);\n        uint256 bidAmount = tokenCurrentBid[_tokenId];\n        msg.sender.transfer(bidAmount);\n        clearBid(_tokenId);\n        CancelBid(bidder, bidAmount, _tokenId);\n    }\n    \n    /**\n     * @dev Purchase the token if there is a sale price; transfers ownership to buyer and pays out owner.\n     * @param _tokenId uint256 ID of the token to be purchased\n     */\n    function buy(uint256 _tokenId) public payable notOwnerOf(_tokenId) {\n        uint256 salePrice = tokenSalePrice[_tokenId];\n        uint256 sentPrice = msg.value;\n        address buyer = msg.sender;\n        address tokenOwner = ownerOf(_tokenId);\n        address creator = tokenCreator[_tokenId];\n        require(salePrice > 0);\n        require(sentPrice >= salePrice);\n        returnCurrentBid(_tokenId);\n        clearBid(_tokenId);\n        clearApprovalAndTransfer(tokenOwner, buyer, _tokenId);\n        payout(sentPrice, owner, creator, tokenOwner, _tokenId);\n        tokenSalePrice[_tokenId] = 0;\n        Sold(buyer, tokenOwner, sentPrice, _tokenId);\n    }\n\n    /**\n     * @dev Set the sale price of the token\n     * @param _tokenId uint256 ID of the token with the standing bid\n     */\n    function setSalePrice(uint256 _tokenId, uint256 _salePrice) public onlyOwnerOf(_tokenId) {\n        uint256 currentBid = tokenCurrentBid[_tokenId];\n        require(_salePrice > currentBid);\n        tokenSalePrice[_tokenId] = _salePrice;\n        SalePriceSet(_tokenId, _salePrice);\n    }\n\n    /**\n     * @dev Adds the provided address to the whitelist of creators\n     * @param _creator address to be added to the whitelist\n     */\n    function whitelistCreator(address _creator) public onlyOwner {\n      creatorWhitelist[_creator] = true;\n      WhitelistCreator(_creator);\n    }\n    \n    /**\n     * @dev Set the maintainer Percentage. Needs to be 10 * target percentage\n     * @param _percentage uint256 percentage * 10.\n     */\n    function setMaintainerPercentage(uint256 _percentage) public onlyOwner() {\n       maintainerPercentage = _percentage;\n    }\n    \n    /**\n     * @dev Set the creator Percentage. Needs to be 10 * target percentage\n     * @param _percentage uint256 percentage * 10.\n     */\n    function setCreatorPercentage(uint256 _percentage) public onlyOwner() {\n       creatorPercentage = _percentage;\n    }\n    \n    /**\n     * @notice A descriptive name for a collection of NFTs in this contract\n     */\n    function name() external pure returns (string _name) {\n        return 'SupeRare';\n    }\n\n    /**\n     * @notice An abbreviated name for NFTs in this contract\n     */\n    function symbol() external pure returns (string _symbol) {\n        return 'SUPR';\n    }\n\n    /**\n     * @notice approve is not a supported function for this contract\n     */\n    function approve(address _to, uint256 _tokenId) public {\n        revert();\n    }\n\n    /** \n     * @dev Returns whether the creator is whitelisted\n     * @param _creator address to check\n     * @return bool \n     */\n    function isWhitelisted(address _creator) external view returns (bool) {\n      return creatorWhitelist[_creator];\n    }\n\n    /** \n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n     * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n     * 3986. The URI may point to a JSON file that conforms to the \"ERC721\n     * Metadata JSON Schema\".\n     */\n    function tokenURI(uint256 _tokenId) external view returns (string) {\n        ownerOf(_tokenId);\n        return tokenToURI[_tokenId];\n    }\n\n    /**\n    * @dev Gets the specified token ID of the uri. It only\n    * returns ids of originals.\n    * Throw if not connected to a token ID.\n    * @param _uri string uri of metadata\n    * @return uint256 token ID\n    */\n    function originalTokenOfUri(string _uri) public view returns (uint256) {\n        uint256 tokenId = uriOriginalToken[_uri];\n        ownerOf(tokenId);\n        return tokenId;\n    }\n\n    /**\n    * @dev Gets the current bid and bidder of the token\n    * @param _tokenId uint256 ID of the token to get bid details\n    * @return bid amount and bidder address of token\n    */\n    function currentBidDetailsOfToken(uint256 _tokenId) public view returns (uint256, address) {\n        return (tokenCurrentBid[_tokenId], tokenBidder[_tokenId]);\n    }\n\n    /**\n    * @dev Gets the creator of the token\n    * @param _tokenId uint256 ID of the token\n    * @return address of the creator\n    */\n    function creatorOfToken(uint256 _tokenId) public view returns (address) {\n        return tokenCreator[_tokenId];\n    }\n    \n    /**\n    * @dev Gets the sale price of the token\n    * @param _tokenId uint256 ID of the token\n    * @return sale price of the token\n    */\n    function salePriceOfToken(uint256 _tokenId) public view returns (uint256) {\n        return tokenSalePrice[_tokenId];\n    }\n    \n    /**\n    * @dev Internal function to return funds to current bidder.\n    * @param _tokenId uint256 ID of the token with the standing bid\n    */\n    function returnCurrentBid(uint256 _tokenId) private {\n        uint256 currentBid = tokenCurrentBid[_tokenId];\n        address currentBidder = tokenBidder[_tokenId];\n        if(currentBidder != address(0)) {\n            currentBidder.transfer(currentBid);\n        }\n    }\n    \n    /**\n    * @dev Internal function to check that the bid is larger than current bid\n    * @param _tokenId uint256 ID of the token with the standing bid\n    */\n    function isGreaterBid(uint256 _tokenId) private view returns (bool) {\n        return msg.value > tokenCurrentBid[_tokenId];\n    }\n    \n    /**\n    * @dev Internal function to clear bid\n    * @param _tokenId uint256 ID of the token with the standing bid\n    */\n    function clearBid(uint256 _tokenId) private {\n        tokenBidder[_tokenId] = address(0);\n        tokenCurrentBid[_tokenId] = 0;\n    }\n    \n    /**\n    * @dev Internal function to pay the bidder, creator, and maintainer\n    * @param _val uint256 value to be split\n    * @param _maintainer address of account maintaining SupeRare\n    * @param _creator address of the creator of token\n    * @param _maintainer address of the owner of token\n    */\n    function payout(uint256 _val, address _maintainer, address _creator, address _tokenOwner, uint256 _tokenId) private {\n        uint256 maintainerPayment;\n        uint256 creatorPayment;\n        uint256 ownerPayment;\n        if (tokenSold[_tokenId]) {\n            maintainerPayment = _val.mul(maintainerPercentage).div(1000);\n            creatorPayment = _val.mul(creatorPercentage).div(1000);\n            ownerPayment = _val.sub(creatorPayment).sub(maintainerPayment); \n        } else {\n            maintainerPayment = 0;\n            creatorPayment = _val;\n            ownerPayment = 0;\n            tokenSold[_tokenId] = true;\n        }\n        _maintainer.transfer(maintainerPayment);\n        _creator.transfer(creatorPayment);\n        _tokenOwner.transfer(ownerPayment);\n      \n    }\n\n    /**\n     * @dev Internal function creating a new token.\n     * @param _uri string metadata uri associated with the token\n     */\n    function createToken(string _uri, address _creator) private  returns (uint256){\n      uint256 newId = totalSupply() + 1;\n      _mint(_creator, newId);\n      tokenCreator[newId] = _creator;\n      tokenToURI[newId] = _uri;\n      return newId;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_uri\",\"type\":\"string\"},{\"name\":\"_editions\",\"type\":\"uint256\"},{\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"addNewTokenWithEditions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"currentBidDetailsOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setMaintainerPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"whitelistCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"originalTokenOfUri\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"salePriceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setCreatorPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creatorOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addNewToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintainerPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"WhitelistCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"AcceptBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SalePriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052601e600655606460075560058054600160a060020a03191633600160a060020a031617905561195d806100386000396000f30060606040526004361061017f5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663019871e98114610184578063053992c5146101de57806306fdde03146101f7578063095ea7b31461028157806318160ddd146102a35780631a289aea146102c85780632a6dd48f146102ff5780632b1fd58a146103315780633af32abf14610347578063454a2ab31461037a5780635a3f2672146103855780635c68a557146103f757806362f11dd21461040d5780636352211e1461042c578063653436fd1461044257806370a08231146104935780638da5cb5b146104b257806395d89b41146104c55780639703ef35146104d85780639f2a3c32146104ee578063a9059cbb14610504578063b2e6ceeb14610526578063c0ec93e71461053c578063c87b56dd14610552578063d5da8d4414610568578063d96a094a1461057e578063d9856c2114610589578063f071bf4f146105da578063f2bf6b8c146105ed578063f2fde38b14610600575b600080fd5b341561018f57600080fd5b6101dc60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505084359460200135935061061f92505050565b005b34156101e957600080fd5b6101dc6004356024356107a4565b341561020257600080fd5b61020a610832565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024657808201518382015260200161022e565b50505050905090810190601f1680156102735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028c57600080fd5b6101dc600160a060020a036004351660243561017f565b34156102ae57600080fd5b6102b6610874565b60405190815260200160405180910390f35b34156102d357600080fd5b6102de60043561087a565b604051918252600160a060020a031660208201526040908101905180910390f35b341561030a57600080fd5b6103156004356108a3565b604051600160a060020a03909116815260200160405180910390f35b341561033c57600080fd5b6101dc6004356108be565b341561035257600080fd5b610366600160a060020a03600435166109c6565b604051901515815260200160405180910390f35b6101dc6004356109e4565b341561039057600080fd5b6103a4600160a060020a0360043516610a98565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156103e35780820151838201526020016103cb565b505050509050019250505060405180910390f35b341561040257600080fd5b6101dc600435610b1b565b341561041857600080fd5b6101dc600160a060020a0360043516610b3b565b341561043757600080fd5b610315600435610ba9565b341561044d57600080fd5b6102b660046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610bd395505050505050565b341561049e57600080fd5b6102b6600160a060020a0360043516610c4e565b34156104bd57600080fd5b610315610c69565b34156104d057600080fd5b61020a610c78565b34156104e357600080fd5b6101dc600435610cb9565b34156104f957600080fd5b6102b6600435610d6d565b341561050f57600080fd5b6101dc600160a060020a0360043516602435610d7f565b341561053157600080fd5b6101dc600435610dda565b341561054757600080fd5b6101dc600435610e05565b341561055d57600080fd5b61020a600435610e25565b341561057357600080fd5b610315600435610ee0565b6101dc600435610efb565b341561059457600080fd5b6101dc60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061102395505050505050565b34156105e557600080fd5b6102b661113a565b34156105f857600080fd5b6102b6611140565b341561060b57600080fd5b6101dc600160a060020a0360043516611146565b600080600085600d816040518082805190602001908083835b602083106106575780518252601f199092019160209182019101610638565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020541561069657600080fd5b600160a060020a0333166000908152600f602052604090205460ff1615156001146106c057600080fd5b6106ca87336111d4565b935083600d886040518082805190602001908083835b602083106106ff5780518252601f1990920191602091820191016106e0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902055600092505b8583101561079b5761074b87336111d4565b6000818152600a602052604090819020879055909250859083907fe23ea816dce6d7f5c0b85cbd597e7c3b97b2453791152c0b94e5e5c5f314d2f0905160405180910390a3600190920191610739565b50505050505050565b60008233600160a060020a03166107ba82610ba9565b600160a060020a0316146107cd57600080fd5b60008481526009602052604090205491508183116107ea57600080fd5b6000848152600a602052604090819020849055839085907fe23ea816dce6d7f5c0b85cbd597e7c3b97b2453791152c0b94e5e5c5f314d2f0905160405180910390a350505050565b61083a611867565b60408051908101604052600881527f5375706552617265000000000000000000000000000000000000000000000000602082015290505b90565b60005490565b600081815260096020908152604080832054600890925290912054600160a060020a0316915091565b600090815260026020526040902054600160a060020a031690565b6000806000808433600160a060020a03166108d882610ba9565b600160a060020a0316146108eb57600080fd5b600086815260096020908152604080832054600890925290912054909550600160a060020a0316935061091d86610ba9565b6000878152600b6020526040902054909350600160a060020a03169150610945338588611238565b60055461095f908690600160a060020a031684868a6112fe565b61096886611442565b8583600160a060020a031685600160a060020a03167fd6deddb2e105b46d4644d24aac8c58493a0f107e7973b2fe8d8fa7931a2912be8860405190815260200160405180910390a450505060009283525050600a6020526040812055565b600160a060020a03166000908152600f602052604090205460ff1690565b8033600160a060020a03166109f882610ba9565b600160a060020a03161415610a0c57600080fd5b610a158261146b565b1515610a2057600080fd5b610a298261147f565b60008281526008602090815260408083208054600160a060020a03191633600160a060020a0316908117909155600990925291829020349081905584929091907f19421268847f42dd61705778018ddfc43bcdce8517e7a630acb12f122c709481905160405180910390a45050565b610aa0611867565b6003600083600160a060020a0316600160a060020a03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610b0f57602002820191906000526020600020905b815481526020019060010190808311610afb575b50505050509050919050565b60055433600160a060020a03908116911614610b3657600080fd5b600655565b60055433600160a060020a03908116911614610b5657600080fd5b600160a060020a0381166000818152600f602052604090819020805460ff191660011790557f55eed0aed3ec6e015b9ad5e984675fe36c0ce3aebdcb70f467670773f19f7f8d905160405180910390a250565b600081815260016020526040812054600160a060020a0316801515610bcd57600080fd5b92915050565b600080600d836040518082805190602001908083835b60208310610c085780518252601f199092019160209182019101610be9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050610c4781610ba9565b5092915050565b600160a060020a031660009081526003602052604090205490565b600554600160a060020a031681565b610c80611867565b60408051908101604052600481527f53555052000000000000000000000000000000000000000000000000000000006020820152905090565b600081815260086020526040812054600160a060020a03908116919033168214610ce257600080fd5b50600082815260096020526040908190205490600160a060020a0333169082156108fc0290839051600060405180830381858888f193505050501515610d2757600080fd5b610d3083611442565b828183600160a060020a03167f09dcebe16a733e22cc47e4959c50d4f21624d9f1815db32c2e439fbbd7b3eda060405160405180910390a4505050565b6000908152600a602052604090205490565b8033600160a060020a0316610d9382610ba9565b600160a060020a031614610da657600080fd5b6000828152600e60209081526040808320805460ff19166001179055600a909152812055610dd5338484611238565b505050565b610de433826114da565b1515610def57600080fd5b610e02610dfb82610ba9565b3383611238565b50565b60055433600160a060020a03908116911614610e2057600080fd5b600755565b610e2d611867565b610e3682610ba9565b50600c60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b0f5780601f10610eb357610100808354040283529160200191610b0f565b820191906000526020600020905b815481529060010190602001808311610ec15750939695505050505050565b6000908152600b6020526040902054600160a060020a031690565b60008060008060008533600160a060020a0316610f1782610ba9565b600160a060020a03161415610f2b57600080fd5b6000878152600a60205260409020549550349450339350610f4b87610ba9565b6000888152600b6020526040812054919450600160a060020a0390911692508611610f7557600080fd5b85851015610f8257600080fd5b610f8b8761147f565b610f9487611442565b610f9f838589611238565b600554610fb9908690600160a060020a031684868b6112fe565b6000600a6000898152602001908152602001600020819055508683600160a060020a031685600160a060020a03167f16dd16959a056953a63cf14bf427881e762e54f03d86b864efea8238dd3b822f8860405190815260200160405180910390a450505050505050565b600081600d816040518082805190602001908083835b602083106110585780518252601f199092019160209182019101611039565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020541561109757600080fd5b600160a060020a0333166000908152600f602052604090205460ff1615156001146110c157600080fd5b6110cb83336111d4565b915081600d846040518082805190602001908083835b602083106111005780518252601f1990920191602091820191016110e1565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902055505050565b60075481565b60065481565b60055433600160a060020a0390811691161461116157600080fd5b600160a060020a038116151561117657600080fd5b600554600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360058054600160a060020a031916600160a060020a0392909216919091179055565b6000806111df610874565b60010190506111ee8382611500565b6000818152600b602090815260408083208054600160a060020a031916600160a060020a038816179055600c9091529020848051611230929160200190611879565b509392505050565b600160a060020a038216151561124d57600080fd5b61125681610ba9565b600160a060020a038381169116141561126e57600080fd5b82600160a060020a031661128182610ba9565b600160a060020a03161461129457600080fd5b61129e8382611562565b6112a883826115e7565b6112b28282611745565b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3505050565b6000818152600e60205260408120548190819060ff1615611386576113406103e86113346006548b6117fd90919063ffffffff16565b9063ffffffff61182f16565b925061135d6103e86113346007548b6117fd90919063ffffffff16565b915061137f836113738a8563ffffffff61184616565b9063ffffffff61184616565b90506113a5565b5050506000818152600e60205260408120805460ff1916600117905585815b600160a060020a03871683156108fc0284604051600060405180830381858888f1935050505015156113d657600080fd5b600160a060020a03861682156108fc0283604051600060405180830381858888f19350505050151561140757600080fd5b600160a060020a03851681156108fc0282604051600060405180830381858888f19350505050151561143857600080fd5b5050505050505050565b60009081526008602090815260408083208054600160a060020a03191690556009909152812055565b600090815260096020526040902054341190565b600081815260096020908152604080832054600890925290912054600160a060020a03168015610dd557600160a060020a03811682156108fc0283604051600060405180830381858888f193505050501515610dd557600080fd5b600082600160a060020a03166114ef836108a3565b600160a060020a0316149392505050565b600160a060020a038216151561151557600080fd5b61151f8282611745565b81600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b81600160a060020a031661157582610ba9565b600160a060020a03161461158857600080fd5b6000818152600260205260408082208054600160a060020a0319169055600160a060020a038416907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b600080600084600160a060020a03166115ff85610ba9565b600160a060020a03161461161257600080fd5b6000848152600460205260409020549250611631600161137387610c4e565b600160a060020a03861660009081526003602052604090208054919350908390811061165957fe5b60009182526020808320909101548683526001825260408084208054600160a060020a0319169055600160a060020a03891684526003909252912080549192508291859081106116a557fe5b6000918252602080832090910192909255600160a060020a03871681526003909152604081208054849081106116d757fe5b6000918252602080832090910192909255600160a060020a038716815260039091526040902080549061170e9060001983016118f7565b5060008481526004602052604080822082905582825281208490555461173b90600163ffffffff61184616565b6000555050505050565b600081815260016020526040812054600160a060020a03161561176757600080fd5b60008281526001602052604090208054600160a060020a031916600160a060020a03851617905561179783610c4e565b600160a060020a0384166000908152600360205260409020805491925090600181016117c383826118f7565b5060009182526020808320919091018490558382526004905260408120829055546117f590600163ffffffff61185816565b600055505050565b6000808315156118105760009150610c47565b5082820282848281151561182057fe5b041461182857fe5b9392505050565b600080828481151561183d57fe5b04949350505050565b60008282111561185257fe5b50900390565b60008282018381101561182857fe5b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106118ba57805160ff19168380011785556118e7565b828001600101855582156118e7579182015b828111156118e75782518255916020019190600101906118cc565b506118f3929150611917565b5090565b815481835581811511610dd557600083815260209020610dd59181019083015b61087191905b808211156118f3576000815560010161191d5600a165627a7a72305820a5a90035ddc72fcfd3293a41dad9a688e046d74d8130c2dda9fc71bd5ebf65450029"
}