{
  "address": "0xce038523e278b6c1344d9e4f735f6064ad7a6032",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenSwap",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-17\n*/\n\npragma solidity ^0.4.18;\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply) {}\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of tovimken to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/*\nThis implements ONLY the standard functions and NOTHING else.\nFor a token like you would want to deploy in something like Mist, see HumanStandardToken.sol.\n\nIf you deploy this, you won't have anything useful.\n\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n.*/\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n}\n\n/*\nThis Token Contract implements the standard token functionality (https://github.com/ethereum/EIPs/issues/20) as well as the following OPTIONAL extras intended for use by humans.\n\nIn other words. This is intended for deployment in something like a Token Factory or Mist wallet, and then used by humans.\nImagine coins, currencies, shares, voting weight, etc.\nMachine-based, rapid creation of many tokens would not necessarily need these extra features or will be minted in other manners.\n\n1) Initial Finite Supply (upon creation one specifies how much is minted).\n2) In the absence of a token registry: Optional Decimal, Symbol & Name.\n3) Optional approveAndCall() functionality to notify a contract if an approval() has occurred.\n\n.*/\n\ncontract HumanStandardToken is StandardToken {\n\n    function () {\n        //if ether is sent to this address, send it back.\n        throw;\n    }\n\n    /* Public variables of the token */\n\n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    They allow one to customise the token contract & in no way influences the core functionality.\n    Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name;                   //fancy name: eg Simon Bucks\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public symbol;                 //An identifier: eg SBX\n    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n\n    function HumanStandardToken(\n        uint256 _initialAmount,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol\n        ) {\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n        totalSupply = _initialAmount;                        // Update total supply\n        name = _tokenName;                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        \n        return true;\n    }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/// @title Token Swap Contract for Neverdie\n/// @author Julia Altenried, Yuriy Kashnikov\ncontract TokenSwap is Ownable {\n\n    /* neverdie token contract address and its instance, can be set by owner only */\n    HumanStandardToken public ndc;\n    /* neverdie token contract address and its instance, can be set by owner only */\n    HumanStandardToken public tpt;\n    /* signer address, verified in 'swap' method, can be set by owner only */\n    address public neverdieSigner;\n    /* minimal amount for swap, the amount passed to 'swap method can't be smaller\n       than this value, can be set by owner only */\n    uint256 public minSwapAmount = 40;\n\n    event Swap(\n        address indexed to,\n        address indexed PTaddress,\n        uint256 rate,\n        uint256 amount,\n        uint256 ptAmount\n    );\n\n    event BuyNDC(\n        address indexed to,\n        uint256 NDCprice,\n        uint256 value,\n        uint256 amount\n    );\n\n    event BuyTPT(\n        address indexed to,\n        uint256 TPTprice,\n        uint256 value,\n        uint256 amount\n    );\n\n    /// @dev handy constructor to initialize TokenSwap with a set of proper parameters\n    /// NOTE: min swap amount is left with default value, set it manually if needed\n    /// @param _teleportContractAddress Teleport token address \n    /// @param _neverdieContractAddress Neverdie token address\n    /// @param _signer signer address, verified further in swap functions\n    function TokenSwap(address _teleportContractAddress, address _neverdieContractAddress, address _signer) public {\n        tpt = HumanStandardToken(_teleportContractAddress);\n        ndc = HumanStandardToken(_neverdieContractAddress);\n        neverdieSigner = _signer;\n    }\n\n    function setTeleportContractAddress(address _to) external onlyOwner {\n        tpt = HumanStandardToken(_to);\n    }\n\n    function setNeverdieContractAddress(address _to) external onlyOwner {\n        ndc = HumanStandardToken(_to);\n    }\n\n    function setNeverdieSignerAddress(address _to) external onlyOwner {\n        neverdieSigner = _to;\n    }\n\n    function setMinSwapAmount(uint256 _amount) external onlyOwner {\n        minSwapAmount = _amount;\n    }\n\n    /// @dev receiveApproval calls function encoded as extra data\n    /// @param _sender token sender\n    /// @param _value value allowed to be spent\n    /// @param _tokenContract callee, should be equal to neverdieContractAddress\n    /// @param _extraData  this should be a well formed calldata with function signature preceding which is used to call, for example, 'swap' method\n    function receiveApproval(address _sender, uint256 _value, address _tokenContract, bytes _extraData) external {\n        require(_tokenContract == address(ndc));\n        assert(this.call(_extraData));\n    }\n\n    \n\n    /// @dev One-way swapFor function, swaps NDC for purchasable token for a given spender\n    /// @param _spender account that wants to swap NDC for purchasable token \n    /// @param _rate current NDC to purchasable token rate, i.e. that the returned amount \n    ///              of purchasable tokens equals to (_amount * _rate) / 1000\n    /// @param _PTaddress the address of the purchasable token  \n    /// @param _amount amount of NDC being offered\n    /// @param _expiration expiration timestamp \n    /// @param _v ECDCA signature\n    /// @param _r ECDSA signature\n    /// @param _s ECDSA signature\n    function swapFor(address _spender,\n                     uint256 _rate,\n                     address _PTaddress,\n                     uint256 _amount,\n                     uint256 _expiration,\n                     uint8 _v,\n                     bytes32 _r,\n                     bytes32 _s) public {\n\n        // Check if the signature did not expire yet by inspecting the timestamp\n        require(_expiration >= block.timestamp);\n\n        // Check if the signature is coming from the neverdie signer address\n        address signer = ecrecover(keccak256(_spender, _rate, _PTaddress, _amount, _expiration), _v, _r, _s);\n        require(signer == neverdieSigner);\n\n        // Check if the amount of NDC is higher than the minimum amount \n        require(_amount >= minSwapAmount);\n       \n        // Check that we hold enough tokens\n        HumanStandardToken ptoken = HumanStandardToken(_PTaddress);\n        uint256 ptAmount;\n        uint8 decimals = ptoken.decimals();\n        if (decimals <= 18) {\n          ptAmount = SafeMath.div(SafeMath.div(SafeMath.mul(_amount, _rate), 1000), 10**(uint256(18 - decimals)));\n        } else {\n          ptAmount = SafeMath.div(SafeMath.mul(SafeMath.mul(_amount, _rate), 10**(uint256(decimals - 18))), 1000);\n        }\n\n        assert(ndc.transferFrom(_spender, this, _amount) && ptoken.transfer(_spender, ptAmount));\n\n        // Emit Swap event\n        Swap(_spender, _PTaddress, _rate, _amount, ptAmount);\n    }\n\n    /// @dev One-way swap function, swaps NDC to purchasable tokens\n    /// @param _rate current NDC to purchasable token rate, i.e. that the returned amount of purchasable tokens equals to _amount * _rate \n    /// @param _PTaddress the address of the purchasable token  \n    /// @param _amount amount of NDC being offered\n    /// @param _expiration expiration timestamp \n    /// @param _v ECDCA signature\n    /// @param _r ECDSA signature\n    /// @param _s ECDSA signature\n    function swap(uint256 _rate,\n                  address _PTaddress,\n                  uint256 _amount,\n                  uint256 _expiration,\n                  uint8 _v,\n                  bytes32 _r,\n                  bytes32 _s) external {\n        swapFor(msg.sender, _rate, _PTaddress, _amount, _expiration, _v, _r, _s);\n    }\n\n    /// @dev buy NDC with ether\n    /// @param _NDCprice NDC price in Wei\n    /// @param _expiration expiration timestamp\n    /// @param _v ECDCA signature\n    /// @param _r ECDSA signature\n    /// @param _s ECDSA signature\n    function buyNDC(uint256 _NDCprice,\n                    uint256 _expiration,\n                    uint8 _v,\n                    bytes32 _r,\n                    bytes32 _s\n                   ) payable external {\n        // Check if the signature did not expire yet by inspecting the timestamp\n        require(_expiration >= block.timestamp);\n\n        // Check if the signature is coming from the neverdie address\n        address signer = ecrecover(keccak256(_NDCprice, _expiration), _v, _r, _s);\n        require(signer == neverdieSigner);\n\n        uint256 a = SafeMath.div(SafeMath.mul(msg.value, 10**18), _NDCprice);\n        assert(ndc.transfer(msg.sender, a));\n\n        // Emit BuyNDC event\n        BuyNDC(msg.sender, _NDCprice, msg.value, a);\n    }\n\n    /// @dev buy TPT with ether\n    /// @param _TPTprice TPT price in Wei\n    /// @param _expiration expiration timestamp\n    /// @param _v ECDCA signature\n    /// @param _r ECDSA signature\n    /// @param _s ECDSA signature\n    function buyTPT(uint256 _TPTprice,\n                    uint256 _expiration,\n                    uint8 _v,\n                    bytes32 _r,\n                    bytes32 _s\n                   ) payable external {\n        // Check if the signature did not expire yet by inspecting the timestamp\n        require(_expiration >= block.timestamp);\n\n        // Check if the signature is coming from the neverdie address\n        address signer = ecrecover(keccak256(_TPTprice, _expiration), _v, _r, _s);\n        require(signer == neverdieSigner);\n\n        uint256 a = SafeMath.div(SafeMath.mul(msg.value, 10**18), _TPTprice);\n        assert(tpt.transfer(msg.sender, a));\n\n        // Emit BuyNDC event\n        BuyTPT(msg.sender, _TPTprice, msg.value, a);\n    }\n\n    /// @dev fallback function to reject any ether coming directly to the contract\n    function () payable public { \n        revert(); \n    }\n\n    /// @dev withdraw all ether\n    function withdrawEther() external onlyOwner {\n        owner.transfer(this.balance);\n    }\n\n    /// @dev withdraw token\n    /// @param _tokenContract any kind of ERC20 token to withdraw from\n    function withdraw(address _tokenContract) external onlyOwner {\n        ERC20 token = ERC20(_tokenContract);\n        uint256 balance = token.balanceOf(this);\n        assert(token.transfer(owner, balance));\n    }\n\n    /// @dev kill contract, but before transfer all TPT, NDC tokens and ether to owner\n    function kill() onlyOwner public {\n        uint256 allNDC = ndc.balanceOf(this);\n        uint256 allTPT = tpt.balanceOf(this);\n        assert(ndc.transfer(owner, allNDC) && tpt.transfer(owner, allTPT));\n        selfdestruct(owner);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"neverdieSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSwapAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setNeverdieSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_NDCprice\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyNDC\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tpt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ndc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_PTaddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swapFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_TPTprice\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyTPT\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setNeverdieContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_PTaddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setTeleportContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teleportContractAddress\",\"type\":\"address\"},{\"name\":\"_neverdieContractAddress\",\"type\":\"address\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"PTaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ptAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"NDCprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyNDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"TPTprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyTPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c596bd09d652827b0106292d3e378d5938df4b12000000000000000000000000a54ddc7b3cce7fc8b1e3fa0256d0db80d2c10970000000000000000000000000c376324f519fc5f570ec43783cf5d9412f66edf5"
}