{
  "address": "0xbf5eed8d51b20834c9d887b22c229237922055d7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ObizcoinCrowdsaleToken",
  "compilerVersion": "v0.4.19-nightly.2017.11.11+commit.284c3839",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-07\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n\n    function balanceOf(address who) public constant returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping (address => uint256) balances;\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public  constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        var _allowance = allowed[_from][msg.sender];\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n\n    event MintFinished();\n\n\n    bool public mintingFinished = false;\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        return true;\n    }\n\n    function destroy(uint256 _amount, address destroyer) public onlyOwner {\n        uint256 myBalance = balances[destroyer];\n        if (myBalance > _amount) {\n            totalSupply = totalSupply.sub(_amount);\n            balances[destroyer] = myBalance.sub(_amount);\n        }\n        else {\n            if (myBalance != 0) totalSupply = totalSupply.sub(myBalance);\n            balances[destroyer] = 0;\n        }\n    }\n\n    function finishMinting() public onlyOwner returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\n\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    // The token being sold\n    ObizcoinCrowdsaleToken public token;\n    // address where funds are collected\n    address public wallet;\n    // amount of raised money in wei\n    uint256 public weiRaised;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint mytime);\n\n    function Crowdsale()public {\n        token = createTokenContract();\n        wallet = msg.sender;\n    }\n\n    function setNewWallet(address newWallet) public onlyOwner {\n        require(newWallet != 0x0);\n        wallet = newWallet;\n    }\n\n    function createTokenContract() internal returns (ObizcoinCrowdsaleToken) {\n        return new ObizcoinCrowdsaleToken();\n    }\n    // fallback function can be used to buy tokens\n    function() public payable {\n        buyTokens(msg.sender);\n    }\n\n    function profitSharing() payable public {\n        uint256 weiAmount = msg.value;\n        uint256 ballanceOfHolder;\n        for (uint i = 0; i < holders.length; i++)\n        {\n            ballanceOfHolder = token.balanceOf(holders[i]);\n            if (ballanceOfHolder > 0) {\n                holders[i].transfer(ballanceOfHolder.mul(weiAmount).div(token.totalSupply()));\n            }\n        }\n    }\n\n    function destroyMyToken(uint256 amount) public onlyOwner {\n        token.destroy(amount.mul(1000000000000000000), msg.sender);\n    }\n\n    uint time0 = 1512970200; // now; // 11th dec, 2017 at 05:30 hrs UTC\n    //uint time0 = block.timestamp;\n    uint time1 = time0 + 15 days;\n\n    uint time2 = time1 + 44 days + 5 hours + 5 minutes; // 24th Jan,2018 at 11:00 hrs UTC\n\n    uint time3 = time0 + 49 days;\n\n    uint time4 = time3 + 1 weeks;\n\n    uint time5 = time3 + 2 weeks;\n\n    uint time6 = time3 + 3 weeks;\n\n    uint time7 = time2 + 34 days;\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) public payable {\n        require(beneficiary != 0x0);\n        require(validPurchase());\n        require(!hasEnded());\n        uint256 weiAmount = msg.value;\n        uint256 tokens;\n        // calculate token amount to be created\n\n        if (block.timestamp >= time0 && block.timestamp < time2) tokens = weiAmount.mul(11000);\n        else if (block.timestamp >= time3 && block.timestamp < time7) tokens = weiAmount.mul(10000);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n        token.mint(beneficiary, tokens);\n        addNewHolder(beneficiary);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, block.timestamp);\n        forwardFunds();\n    }\n\n    function mintTokens(address beneficiary, uint256 tokens) internal {\n        uint256 weiAmount;\n        if (block.timestamp >= time0 && block.timestamp < time2) weiAmount = tokens.div(11000);\n        else if (block.timestamp >= time3 && block.timestamp < time7) weiAmount = tokens.div(10000);\n\n        weiRaised = weiRaised.add(weiAmount);\n        token.mint(beneficiary, tokens);\n        addNewHolder(beneficiary);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, block.timestamp);\n    }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal constant returns (bool) {\n        return msg.value != 0;\n    }\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        return block.timestamp < time0 || (block.timestamp > time2 && block.timestamp < time3) || block.timestamp > time7;\n    }\n\n    mapping (address => bool) isHolder;\n\n    address[] public holders;\n\n    function addNewHolder(address newHolder) internal {\n        if (!isHolder[newHolder]) {\n            holders.push(newHolder);\n            isHolder[newHolder] = true;\n        }\n    }\n}\n\n\ncontract ObizcoinCrowdsaleToken is MintableToken {\n    string public name;\n\n    string public symbol;\n\n    uint8 public decimals;\n\n    function ObizcoinCrowdsaleToken() public {\n        name = \"OBZ ICO TOKEN SALE\";\n        symbol = \"OBZ\";\n        decimals = 18;\n    }\n}\n\n\ncontract ObizcoinCrowdsale is Crowdsale {\n\n    uint256 public investors;\n\n    ProfitSharingObizcoin public profitSharingContract;\n\n    function ObizcoinCrowdsale () public\n    Crowdsale()\n    {\n        investors = 0;\n        profitSharingContract = new ProfitSharingObizcoin();\n    }\n\n\n    function buyObizcoinTokens(address _sender) public payable {\n        investors++;\n        buyTokens(_sender);\n    }\n\n    function mintObizcoinTokens(address beneficiary, uint256 tokens) public onlyOwner {\n        investors++;\n        mintTokens(beneficiary, tokens.mul(1000000000000000000));\n    }\n\n    function() public payable {\n        buyObizcoinTokens(msg.sender);\n    }\n\n}\n\n\ncontract ProfitSharingObizcoin is Ownable {\n\n    ObizcoinCrowdsale crowdsale;\n\n    function ProfitSharingObizcoin()public {\n        crowdsale = ObizcoinCrowdsale(msg.sender);\n    }\n\n    function() public payable {\n        crowdsale.profitSharing.value(msg.value)();\n    }\n}",
  "bytecode": "60606040526000600360146101000a81548160ff02191690831515021790555034156200002b57600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280601281526020017f4f425a2049434f20544f4b454e2053414c45000000000000000000000000000081525060049080519060200190620000b99291906200012a565b506040805190810160405280600381526020017f4f425a000000000000000000000000000000000000000000000000000000000081525060059080519060200190620001079291906200012a565b506012600660006101000a81548160ff021916908360ff160217905550620001d9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016d57805160ff19168380011785556200019e565b828001600101855582156200019e579182015b828111156200019d57825182559160200191906001019062000180565b5b509050620001ad9190620001b1565b5090565b620001d691905b80821115620001d2576000816000905550600101620001b8565b5090565b90565b6112e580620001e96000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146100e057806306fdde031461010d578063095ea7b31461019b57806318160ddd146101f557806323b872dd1461021e578063313ce5671461029757806340c10f19146102c657806370a08231146103205780637d64bcb41461036d5780638da5cb5b1461039a5780638dec3daa146103ef57806395d89b4114610431578063a9059cbb146104bf578063dd62ed3e14610519578063f2fde38b14610585575b600080fd5b34156100eb57600080fd5b6100f36105be565b604051808215151515815260200191505060405180910390f35b341561011857600080fd5b6101206105d1565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610160578082015181840152602081019050610145565b50505050905090810190601f16801561018d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a657600080fd5b6101db600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061066f565b604051808215151515815260200191505060405180910390f35b341561020057600080fd5b6102086107f6565b6040518082815260200191505060405180910390f35b341561022957600080fd5b61027d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107fc565b604051808215151515815260200191505060405180910390f35b34156102a257600080fd5b6102aa610aac565b604051808260ff1660ff16815260200191505060405180910390f35b34156102d157600080fd5b610306600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610abf565b604051808215151515815260200191505060405180910390f35b341561032b57600080fd5b610357600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c41565b6040518082815260200191505060405180910390f35b341561037857600080fd5b610380610c8a565b604051808215151515815260200191505060405180910390f35b34156103a557600080fd5b6103ad610d36565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103fa57600080fd5b61042f600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d5c565b005b341561043c57600080fd5b610444610eeb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610484578082015181840152602081019050610469565b50505050905090810190601f1680156104b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104ca57600080fd5b6104ff600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f89565b604051808215151515815260200191505060405180910390f35b341561052457600080fd5b61056f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611124565b6040518082815260200191505060405180910390f35b341561059057600080fd5b6105bc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111ab565b005b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b505050505081565b6000808214806106fb57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561070657600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506108d083600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128290919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061096583600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112a090919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109bb83826112a090919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600660009054906101000a900460ff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1d57600080fd5b600360149054906101000a900460ff16151515610b3957600080fd5b610b4e8260005461128290919063ffffffff16565b600081905550610ba682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128290919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a26001905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ce857600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dba57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811115610e7a57610e19836000546112a090919063ffffffff16565b600081905550610e3283826112a090919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ee6565b600081141515610ea057610e99816000546112a090919063ffffffff16565b6000819055505b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b505050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f815780601f10610f5657610100808354040283529160200191610f81565b820191906000526020600020905b815481529060010190602001808311610f6457829003601f168201915b505050505081565b6000610fdd82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112a090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061107282600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128290919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561120757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561127f5780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600080828401905083811015151561129657fe5b8091505092915050565b60008282111515156112ae57fe5b8183039050929150505600a165627a7a72305820877ac178c2c6d299b6254f99544720f9cc25bfa0851a06133e6abd90ae3ebf9e0029"
}