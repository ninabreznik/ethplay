{
  "address": "0x69a53cb980eb6b08a9a13017faac550732d173c6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TitanToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-17\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n *      See RBAC.sol for example usage.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an address access to this role\n     */\n    function add(Role storage role, address addr)\n    internal\n    {\n        role.bearer[addr] = true;\n    }\n\n    /**\n     * @dev remove an address' access to this role\n     */\n    function remove(Role storage role, address addr)\n    internal\n    {\n        role.bearer[addr] = false;\n    }\n\n    /**\n     * @dev check if an address has this role\n     * // reverts\n     */\n    function check(Role storage role, address addr)\n    view\n    internal\n    {\n        require(has(role, addr));\n    }\n\n    /**\n     * @dev check if an address has this role\n     * @return bool\n     */\n    function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n    {\n        return role.bearer[addr];\n    }\n}\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * @dev Supports unlimited numbers of roles and addresses.\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n *  for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n *  to avoid typos.\n */\ncontract RBAC {\n    using Roles for Roles.Role;\n\n    mapping (string => Roles.Role) private roles;\n\n    event RoleAdded(address addr, string roleName);\n    event RoleRemoved(address addr, string roleName);\n\n    /**\n     * @dev reverts if addr does not have role\n     * @param addr address\n     * @param roleName the name of the role\n     * // reverts\n     */\n    function checkRole(address addr, string roleName)\n    view\n    public\n    {\n        roles[roleName].check(addr);\n    }\n\n    /**\n     * @dev determine if addr has role\n     * @param addr address\n     * @param roleName the name of the role\n     * @return bool\n     */\n    function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n    {\n        return roles[roleName].has(addr);\n    }\n\n    /**\n     * @dev add a role to an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function addRole(address addr, string roleName)\n    internal\n    {\n        roles[roleName].add(addr);\n        emit RoleAdded(addr, roleName);\n    }\n\n    /**\n     * @dev remove a role from an address\n     * @param addr address\n     * @param roleName the name of the role\n     */\n    function removeRole(address addr, string roleName)\n    internal\n    {\n        roles[roleName].remove(addr);\n        emit RoleRemoved(addr, roleName);\n    }\n\n    /**\n     * @dev modifier to scope access to a single role (uses msg.sender as addr)\n     * @param roleName the name of the role\n     * // reverts\n     */\n    modifier onlyRole(string roleName)\n    {\n        checkRole(msg.sender, roleName);\n        _;\n    }\n\n    /**\n     * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n     * @param roleNames the names of the roles to scope access to\n     * // reverts\n     *\n     * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n     *  see: https://github.com/ethereum/solidity/issues/2467\n     */\n    // modifier onlyRoles(string[] roleNames) {\n    //     bool hasAnyRole = false;\n    //     for (uint8 i = 0; i < roleNames.length; i++) {\n    //         if (hasRole(msg.sender, roleNames[i])) {\n    //             hasAnyRole = true;\n    //             break;\n    //         }\n    //     }\n\n    //     require(hasAnyRole);\n\n    //     _;\n    // }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n/**\n * @title Titan Coin Contract\n */\ncontract TitanToken is Ownable, StandardToken, RBAC {\n\n    string public name = 'Titan Coin';\n    string public symbol = 'TC';\n    uint256 public decimals = 8;\n\n    string public constant ROLE_EXCHANGER = \"exchanger\";\n\n    uint256 public constant INITIAL_SUPPLY = 100000000 * 10 ** 8;\n    uint256 public MAXIMUM_ICO_TOKENS = 87000000 * 10 ** 8;\n\n    uint256 public MAX_BOUNTY_ALLOCATED_TOKENS = 3000000;\n    uint256 public OWNERS_ALLOCATED_TOKENS = 100000000;\n\n    modifier hasExchangePermission() {\n        checkRole(msg.sender, ROLE_EXCHANGER);\n        _;\n    }\n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[this] = INITIAL_SUPPLY;\n    }\n\n    /**\n     * @dev add an exchanger role to an address\n     * @param exchanger address\n     */\n    function addExchanger(address exchanger) onlyOwner public {\n        addRole(exchanger, ROLE_EXCHANGER);\n    }\n\n    /**\n     * @dev remove an exchanger role from an address\n     * @param exchanger address\n     */\n    function removeExchanger(address exchanger) onlyOwner public {\n        removeRole(exchanger, ROLE_EXCHANGER);\n    }\n\n    function exchangeTokens(address _to, uint256 _amount) hasExchangePermission public returns (bool) {\n        this.transfer(_to, _amount);\n        return true;\n    }\n}",
  "bytecode": "60c0604052600a60808190527f546974616e20436f696e0000000000000000000000000000000000000000000060a0908152620000409160059190620000f9565b506040805180820190915260028082527f544300000000000000000000000000000000000000000000000000000000000060209092019182526200008791600691620000f9565b506008600755661ee89a998bc000600855622dc6c06009556305f5e100600a55348015620000b457600080fd5b5060008054600160a060020a03191633600160a060020a03908116919091178255662386f26fc10000600281905530909116825260016020526040909120556200019e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013c57805160ff19168380011785556200016c565b828001600101855582156200016c579182015b828111156200016c5782518255916020019190600101906200014f565b506200017a9291506200017e565b5090565b6200019b91905b808211156200017a576000815560010162000185565b90565b61110180620001ae6000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610137578063095ea7b3146101c15780630988ca8c146101f957806318160ddd14610262578063217fe6c61461028957806323b872dd146102f05780632ff2e9dc1461031a578063313ce5671461032f5780633f9a3886146103445780634256fa9f1461035957806342df70851461037d578063506bd3a61461039257806366188463146103b357806370a08231146103d75780638da5cb5b146103f8578063919d34011461042957806395d89b411461043e578063a024ea1614610453578063a9059cbb14610468578063d73dd6231461048c578063dd62ed3e146104b0578063f2fde38b146104d7578063f89f2a65146104f8575b600080fd5b34801561014357600080fd5b5061014c610519565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018657818101518382015260200161016e565b50505050905090810190601f1680156101b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cd57600080fd5b506101e5600160a060020a03600435166024356105a7565b604080519115158252519081900360200190f35b34801561020557600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610260958335600160a060020a03169536956044949193909101919081908401838280828437509497506106119650505050505050565b005b34801561026e57600080fd5b5061027761067f565b60408051918252519081900360200190f35b34801561029557600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101e5958335600160a060020a03169536956044949193909101919081908401838280828437509497506106859650505050505050565b3480156102fc57600080fd5b506101e5600160a060020a03600435811690602435166044356106f8565b34801561032657600080fd5b5061027761087a565b34801561033b57600080fd5b50610277610885565b34801561035057600080fd5b5061027761088b565b34801561036557600080fd5b506101e5600160a060020a0360043516602435610891565b34801561038957600080fd5b5061014c610971565b34801561039e57600080fd5b50610260600160a060020a0360043516610996565b3480156103bf57600080fd5b506101e5600160a060020a03600435166024356109e1565b3480156103e357600080fd5b50610277600160a060020a0360043516610ada565b34801561040457600080fd5b5061040d610af5565b60408051600160a060020a039092168252519081900360200190f35b34801561043557600080fd5b50610277610b04565b34801561044a57600080fd5b5061014c610b0a565b34801561045f57600080fd5b50610277610b65565b34801561047457600080fd5b506101e5600160a060020a0360043516602435610b6b565b34801561049857600080fd5b506101e5600160a060020a0360043516602435610c66565b3480156104bc57600080fd5b50610277600160a060020a0360043581169060243516610d08565b3480156104e357600080fd5b50610260600160a060020a0360043516610d33565b34801561050457600080fd5b50610260600160a060020a0360043516610dcb565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b505050505081565b600160a060020a03338116600081815260036020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b61067b826004836040518082805190602001908083835b602083106106475780518252601f199092019160209182019101610628565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050610e13565b5050565b60025490565b60006106f1836004846040518082805190602001908083835b602083106106bd5780518252601f19909201916020918201910161069e565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050610e28565b9392505050565b6000600160a060020a038316151561070f57600080fd5b600160a060020a03841660009081526001602052604090205482111561073457600080fd5b600160a060020a038085166000908152600360209081526040808320339094168352929052205482111561076757600080fd5b600160a060020a038416600090815260016020526040902054610790908363ffffffff610e4716565b600160a060020a0380861660009081526001602052604080822093909355908516815220546107c5908363ffffffff610e5916565b600160a060020a0380851660009081526001602090815260408083209490945587831682526003815283822033909316825291909152205461080d908363ffffffff610e4716565b600160a060020a038086166000818152600360209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b662386f26fc1000081565b60075481565b600a5481565b60006108c0336040805190810160405280600981526020016000805160206110b6833981519152815250610611565b30600160a060020a031663a9059cbb84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b505050506040513d602081101561096657600080fd5b506001949350505050565b60408051808201909152600981526000805160206110b6833981519152602082015281565b60005433600160a060020a039081169116146109b157600080fd5b6109de816040805190810160405280600981526020016000805160206110b6833981519152815250610e6c565b50565b600160a060020a03338116600090815260036020908152604080832093861683529290529081205480831115610a3e57600160a060020a033381166000908152600360209081526040808320938816835292905290812055610a75565b610a4e818463ffffffff610e4716565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a031681565b60085481565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561059f5780601f106105745761010080835404028352916020019161059f565b60095481565b6000600160a060020a0383161515610b8257600080fd5b600160a060020a033316600090815260016020526040902054821115610ba757600080fd5b600160a060020a033316600090815260016020526040902054610bd0908363ffffffff610e4716565b600160a060020a033381166000908152600160205260408082209390935590851681522054610c05908363ffffffff610e5916565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b600160a060020a033381166000908152600360209081526040808320938616835292905290812054610c9e908363ffffffff610e5916565b600160a060020a0333811660008181526003602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610d4e57600080fd5b600160a060020a0381161515610d6357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610de657600080fd5b6109de816040805190810160405280600981526020016000805160206110b6833981519152815250610f8d565b610e1d8282610e28565b151561067b57600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b600082821115610e5357fe5b50900390565b81810182811015610e6657fe5b92915050565b610ed6826004836040518082805190602001908083835b60208310610ea25780518252601f199092019160209182019101610e83565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061106e565b7fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a82826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f4e578181015183820152602001610f36565b50505050905090810190601f168015610f7b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b610ff7826004836040518082805190602001908083835b60208310610fc35780518252601f199092019160209182019101610fa4565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611090565b7fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b70048982826040518083600160a060020a0316600160a060020a03168152602001806020018281038252838181518152602001915080519060200190808383600083811015610f4e578181015183820152602001610f36565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055560065786368616e6765720000000000000000000000000000000000000000000000a165627a7a723058208b06cceeef6a0701ee84690d8d498c64d4d2b06d8c43af7ed1b31da602d3fce10029"
}