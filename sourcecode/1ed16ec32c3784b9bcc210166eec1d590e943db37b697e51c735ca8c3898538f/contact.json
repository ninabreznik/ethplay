{
  "address": "0xd68cb83b9fb0acd8e2ab4eabbf20d94761becf57",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AacInterface",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n//-----------------------------------------------------------------------------\n/// @title AAC Ownership\n/// @notice defines AAC ownership-tracking structures and view functions.\n//-----------------------------------------------------------------------------\ncontract AacOwnership {\n    struct Aac {\n        // owner ID list\n        address payable owner;\n        // unique identifier\n        uint uid;\n        // timestamp\n        uint timestamp;\n        // exp\n        uint exp;\n        // AAC data\n        bytes aacData;\n    }\n\n    struct ExternalNft{\n        // Contract address\n        address nftContractAddress;\n        // Token Identifier\n        uint nftId;\n    }\n\n    // Array containing all AACs. The first element in aacArray returns as\n    //  invalid\n    Aac[] aacArray;\n    // Mapping containing all UIDs tracked by this contract. Valid UIDs map to\n    //  index numbers, invalid UIDs map to 0.\n    mapping (uint => uint) uidToAacIndex;\n    // Mapping containing linked external NFTs. Linked AACs always map to\n    //  non-zero numbers, invalid AACs map to 0.\n    mapping (uint => ExternalNft) uidToExternalNft;\n    // Mapping containing tokens IDs for tokens created by an external contract\n    //  and whether or not it is linked to an AAC. \n    mapping (address => mapping (uint => bool)) linkedExternalNfts;\n    \n    //-------------------------------------------------------------------------\n    /// @dev Throws if AAC #`_tokenId` isn't tracked by the aacArray.\n    //-------------------------------------------------------------------------\n    modifier mustExist(uint _tokenId) {\n        require (uidToAacIndex[_tokenId] != 0);\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @dev Throws if AAC #`_tokenId` isn't owned by sender.\n    //-------------------------------------------------------------------------\n    modifier mustOwn(uint _tokenId) {\n        require (ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @dev Throws if parameter is zero\n    //-------------------------------------------------------------------------\n    modifier notZero(uint _param) {\n        require(_param != 0);\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @dev Creates an empty AAC as a [0] placeholder for invalid AAC queries.\n    //-------------------------------------------------------------------------\n    constructor () public {\n        aacArray.push(Aac(address(0), 0, 0, 0, \"\"));\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Find the owner of AAC #`_tokenId`\n    /// @dev throws if `_owner` is the zero address.\n    /// @param _tokenId The identifier for an AAC\n    /// @return The address of the owner of the AAC\n    //-------------------------------------------------------------------------\n    function ownerOf(uint256 _tokenId) \n        public \n        view \n        mustExist(_tokenId) \n        returns (address payable) \n    {\n        // owner must not be the zero address\n        require (aacArray[uidToAacIndex[_tokenId]].owner != address(0));\n        return aacArray[uidToAacIndex[_tokenId]].owner;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Count all AACs assigned to an owner\n    /// @dev throws if `_owner` is the zero address.\n    /// @param _owner An address to query\n    /// @return The number of AACs owned by `_owner`, possibly zero\n    //-------------------------------------------------------------------------\n    function balanceOf(address _owner) \n        public \n        view \n        notZero(uint(_owner)) \n        returns (uint256) \n    {\n        uint owned;\n        for (uint i = 1; i < aacArray.length; ++i) {\n            if(aacArray[i].owner == _owner) {\n                ++owned;\n            }\n        }\n        return owned;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get a list of AACs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    ///  `_owner` is the zero address, representing invalid AACs.\n    /// @param _owner Address to query for AACs.\n    /// @return The complete list of Unique Indentifiers for AACs\n    ///  assigned to `_owner`\n    //-------------------------------------------------------------------------\n    function tokensOfOwner(address _owner) external view returns (uint[] memory) {\n        uint aacsOwned = balanceOf(_owner);\n        require(aacsOwned > 0);\n        uint counter = 0;\n        uint[] memory result = new uint[](aacsOwned);\n        for (uint i = 0; i < aacArray.length; i++) {\n            if(aacArray[i].owner == _owner) {\n                result[counter] = aacArray[i].uid;\n                counter++;\n            }\n        }\n        return result;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get number of AACs tracked by this contract\n    /// @return A count of valid AACs tracked by this contract, where\n    ///  each one has an assigned and queryable owner.\n    //-------------------------------------------------------------------------\n    function totalSupply() external view returns (uint256) {\n        return (aacArray.length - 1);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get the UID of AAC with index number `index`.\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The UID for the #`_index` AAC in the AAC array.\n    //-------------------------------------------------------------------------\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        // index must correspond to an existing AAC\n        require (_index > 0 && _index < aacArray.length);\n        return (aacArray[_index].uid);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    ///  `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner Address to query for AACs.\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The Unique Indentifier for the #`_index` AAC assigned to\n    ///  `_owner`, (sort order not specified)\n    //-------------------------------------------------------------------------\n    function tokenOfOwnerByIndex(\n        address _owner, \n        uint256 _index\n    ) external view notZero(uint(_owner)) returns (uint256) {\n        uint aacsOwned = balanceOf(_owner);\n        require(aacsOwned > 0);\n        require(_index < aacsOwned);\n        uint counter = 0;\n        for (uint i = 0; i < aacArray.length; i++) {\n            if (aacArray[i].owner == _owner) {\n                if (counter == _index) {\n                    return(aacArray[i].uid);\n                } else {\n                    counter++;\n                }\n            }\n        }\n    }\n}\n\n\n//-----------------------------------------------------------------------------\n/// @title Token Receiver Interface\n//-----------------------------------------------------------------------------\ninterface TokenReceiverInterface {\n    function onERC721Received(\n        address _operator, \n        address _from, \n        uint256 _tokenId, \n        bytes calldata _data\n    ) external returns(bytes4);\n}\n\n\n//-----------------------------------------------------------------------------\n/// @title VIP-181 Interface\n//-----------------------------------------------------------------------------\ninterface VIP181 {\n    function transferFrom (\n        address _from, \n        address _to, \n        uint256 _tokenId\n    ) external payable;\n    function ownerOf(uint _tokenId) external returns(address);\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n    function tokenURI(uint _tokenId) external view returns (string memory);\n}\n\n\n//-----------------------------------------------------------------------------\n/// @title AAC Transfers\n/// @notice Defines transfer functionality for AACs to transfer ownership.\n///  Defines approval functionality for 3rd parties to enable transfers on\n///  owners' behalf.\n//-----------------------------------------------------------------------------\ncontract AacTransfers is AacOwnership {\n    //-------------------------------------------------------------------------\n    /// @dev Transfer emits when ownership of an AAC changes by any\n    ///  mechanism. This event emits when AACs are created ('from' == 0).\n    ///  At the time of any transfer, the approved address for that AAC\n    ///  (if any) is reset to address(0).\n    //-------------------------------------------------------------------------\n    event Transfer(\n        address indexed _from, \n        address indexed _to, \n        uint256 indexed _tokenId\n    );\n\n    //-------------------------------------------------------------------------\n    /// @dev Approval emits when the approved address for an AAC is\n    ///  changed or reaffirmed. The zero address indicates there is no approved\n    ///  address. When a Transfer event emits, this also indicates that the\n    ///  approved address for that AAC (if any) is reset to none.\n    //-------------------------------------------------------------------------\n    event Approval(\n        address indexed _owner, \n        address indexed _approved, \n        uint256 indexed _tokenId\n    );\n\n    //-------------------------------------------------------------------------\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all AACs of the owner.\n    //-------------------------------------------------------------------------\n    event ApprovalForAll(\n        address indexed _owner, \n        address indexed _operator, \n        bool _approved\n    );\n\n    // Mapping from token ID to approved address\n    mapping (uint => address) idToApprovedAddress;\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) operatorApprovals;\n\n    //-------------------------------------------------------------------------\n    /// @dev Throws if called by any account other than token owner, approved\n    ///  address, or authorized operator.\n    //-------------------------------------------------------------------------\n    modifier canOperate(uint _uid) {\n        // sender must be owner of AAC #uid, or sender must be the\n        //  approved address of AAC #uid, or an authorized operator for\n        //  AAC owner\n        require (\n            msg.sender == aacArray[uidToAacIndex[_uid]].owner ||\n            msg.sender == idToApprovedAddress[_uid] ||\n            operatorApprovals[aacArray[uidToAacIndex[_uid]].owner][msg.sender]\n        );\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Change or reaffirm the approved address for AAC #`_tokenId`.\n    /// @dev The zero address indicates there is no approved address.\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner.\n    /// @param _approved The new approved AAC controller\n    /// @param _tokenId The AAC to approve\n    //-------------------------------------------------------------------------\n    function approve(address _approved, uint256 _tokenId) external payable {\n        address owner = ownerOf(_tokenId);\n        // msg.sender must be the current NFT owner, or an authorized operator\n        //  of the current owner.\n        require (\n            msg.sender == owner || isApprovedForAll(owner, msg.sender)\n        );\n        idToApprovedAddress[_tokenId] = _approved;\n        emit Approval(owner, _approved, _tokenId);\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if\n    ///  there is none\n    //-------------------------------------------------------------------------\n    function getApproved(\n        uint256 _tokenId\n    ) external view mustExist(_tokenId) returns (address) {\n        return idToApprovedAddress[_tokenId];\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Enable or disable approval for a third party (\"operator\") to\n    ///  manage all of sender's AACs\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow multiple\n    ///  operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke\n    ///  approval\n    //-------------------------------------------------------------------------\n    function setApprovalForAll(address _operator, bool _approved) external {\n        require(_operator != msg.sender);\n        operatorApprovals[msg.sender][_operator] = _approved;\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Get whether '_operator' is approved to manage all of '_owner's\n    ///  AACs\n    /// @param _owner AAC Owner.\n    /// @param _operator Address to check for approval.\n    /// @return True if '_operator' is approved to manage all of '_owner's' AACs.\n    //-------------------------------------------------------------------------\n    function isApprovedForAll(\n        address _owner, \n        address _operator\n    ) public view returns (bool) {\n        return operatorApprovals[_owner][_operator];\n    }\n\n    \n    //-------------------------------------------------------------------------\n    /// @notice Transfers ownership of AAC #`_tokenId` from `_from` to \n    ///  `_to`\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, checks if\n    ///  `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `0x150b7a02`. If AAC is linked to an external NFT, this function\n    ///  calls TransferFrom from the external address. Throws if this contract\n    ///  is not an approved operator for the external NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    //-------------------------------------------------------------------------\n    function safeTransferFrom(address _from, address payable _to, uint256 _tokenId) \n        external \n        payable \n        mustExist(_tokenId) \n        canOperate(_tokenId) \n        notZero(uint(_to)) \n    {\n        address owner = ownerOf(_tokenId);\n        // _from address must be current owner of the AAC\n        require (_from == owner);\n               \n        // if AAC has a linked external NFT, call TransferFrom on the \n        //  external NFT contract\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\n        if (externalNft.nftContractAddress != address(0)) {\n            // initialize external NFT contract\n            VIP181 externalContract = VIP181(externalNft.nftContractAddress);\n            // check that sender is authorized to transfer external NFT\n            address nftOwner = externalContract.ownerOf(externalNft.nftId);\n            if(\n                msg.sender == nftOwner ||\n                msg.sender == externalContract.getApproved(externalNft.nftId) ||\n                externalContract.isApprovedForAll(nftOwner, msg.sender)\n            ) {\n                // call TransferFrom\n                externalContract.transferFrom(_from, _to, externalNft.nftId);\n            }\n        }\n\n        // clear approval\n        idToApprovedAddress[_tokenId] = address(0);\n        // transfer ownership\n        aacArray[uidToAacIndex[_tokenId]].owner = _to;\n\n        emit Transfer(_from, _to, _tokenId);\n\n        // check and call onERC721Received. Throws and rolls back the transfer\n        //  if _to does not implement the expected interface\n        uint size;\n        assembly { size := extcodesize(_to) }\n        if (size > 0) {\n            bytes4 retval = TokenReceiverInterface(_to).onERC721Received(msg.sender, _from, _tokenId, \"\");\n            require(\n                retval == 0x150b7a02\n            );\n        }\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Transfers ownership of AAC #`_tokenId` from `_from` to \n    ///  `_to`\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. If AAC is linked to an external\n    ///  NFT, this function calls TransferFrom from the external address.\n    ///  Throws if this contract is not an approved operator for the external\n    ///  NFT. When transfer is complete, checks if `_to` is a smart contract\n    ///  (code size > 0). If so, it calls `onERC721Received` on `_to` and\n    ///  throws if the return value is not `0x150b7a02`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param _data Additional data with no pre-specified format\n    //-------------------------------------------------------------------------\n    function safeTransferFrom(\n        address _from, \n        address payable _to, \n        uint256 _tokenId, \n        bytes calldata _data\n    ) \n        external \n        payable \n        mustExist(_tokenId) \n        canOperate(_tokenId) \n        notZero(uint(_to)) \n    {\n        address owner = ownerOf(_tokenId);\n        // _from address must be current owner of the AAC\n        require (_from == owner);\n        \n        // if AAC has a linked external NFT, call TransferFrom on the \n        //  external NFT contract\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\n        if (externalNft.nftContractAddress != address(0)) {\n            // initialize external NFT contract\n            VIP181 externalContract = VIP181(externalNft.nftContractAddress);\n            // check that sender is authorized to transfer external NFT\n            address nftOwner = externalContract.ownerOf(externalNft.nftId);\n            if(\n                msg.sender == nftOwner ||\n                msg.sender == externalContract.getApproved(externalNft.nftId) ||\n                externalContract.isApprovedForAll(nftOwner, msg.sender)\n            ) {\n                // call TransferFrom\n                externalContract.transferFrom(_from, _to, externalNft.nftId);\n            }\n        }\n\n        // clear approval\n        idToApprovedAddress[_tokenId] = address(0);\n        // transfer ownership\n        aacArray[uidToAacIndex[_tokenId]].owner = _to;\n\n        emit Transfer(_from, _to, _tokenId);\n\n        // check and call onERC721Received. Throws and rolls back the transfer\n        //  if _to does not implement the expected interface\n        uint size;\n        assembly { size := extcodesize(_to) }\n        if (size > 0) {\n            bytes4 retval = TokenReceiverInterface(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n            require (retval == 0x150b7a02);\n        }\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. If AAC is linked to an external\n    ///  NFT, this function calls TransferFrom from the external address.\n    ///  Throws if this contract is not an approved operator for the external\n    ///  NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    //-------------------------------------------------------------------------\n    function transferFrom(address _from, address payable _to, uint256 _tokenId)\n        external \n        payable \n        mustExist(_tokenId) \n        canOperate(_tokenId) \n        notZero(uint(_to)) \n    {\n        address owner = ownerOf(_tokenId);\n        // _from address must be current owner of the AAC\n        require (_from == owner && _from != address(0));\n        \n        // if AAC has a linked external NFT, call TransferFrom on the \n        //  external NFT contract\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\n        if (externalNft.nftContractAddress != address(0)) {\n            // initialize external NFT contract\n            VIP181 externalContract = VIP181(externalNft.nftContractAddress);\n            // check that sender is authorized to transfer external NFT\n            address nftOwner = externalContract.ownerOf(externalNft.nftId);\n            if(\n                msg.sender == nftOwner ||\n                msg.sender == externalContract.getApproved(externalNft.nftId) ||\n                externalContract.isApprovedForAll(nftOwner, msg.sender)\n            ) {\n                // call TransferFrom\n                externalContract.transferFrom(_from, _to, externalNft.nftId);\n            }\n        }\n\n        // clear approval\n        idToApprovedAddress[_tokenId] = address(0);\n        // transfer ownership\n        aacArray[uidToAacIndex[_tokenId]].owner = _to;\n\n        emit Transfer(_from, _to, _tokenId);\n    }\n}\n\n//-----------------------------------------------------------------------------\n/// @title Ownable\n/// @dev The Ownable contract has an owner address, and provides basic \n///  authorization control functions, this simplifies the implementation of\n///  \"user permissions\".\n//-----------------------------------------------------------------------------\ncontract Ownable {\n    //-------------------------------------------------------------------------\n    /// @dev Emits when owner address changes by any mechanism.\n    //-------------------------------------------------------------------------\n    event OwnershipTransfer (address previousOwner, address newOwner);\n    \n    // Wallet address that can sucessfully execute onlyOwner functions\n    address owner;\n    \n    //-------------------------------------------------------------------------\n    /// @dev Sets the owner of the contract to the sender account.\n    //-------------------------------------------------------------------------\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @dev Throws if called by any account other than `owner`.\n    //-------------------------------------------------------------------------\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Transfer control of the contract to a newOwner.\n    /// @dev Throws if `_newOwner` is zero address.\n    /// @param _newOwner The address to transfer ownership to.\n    //-------------------------------------------------------------------------\n    function transferOwnership(address _newOwner) public onlyOwner {\n        // for safety, new owner parameter must not be 0\n        require (_newOwner != address(0));\n        // define local variable for old owner\n        address oldOwner = owner;\n        // set owner to new owner\n        owner = _newOwner;\n        // emit ownership transfer event\n        emit OwnershipTransfer(oldOwner, _newOwner);\n    }\n}\n\n\n//-----------------------------------------------------------------------------\n/// @title ERC-165 Pseudo-Introspection Interface Support\n/// @notice Defines supported interfaces\n//-----------------------------------------------------------------------------\ncontract ERC165 {\n    // mapping of all possible interfaces to whether they are supported\n    mapping (bytes4 => bool) interfaceIdToIsSupported;\n    \n    bytes4 constant ERC_165 = 0x01ffc9a7;\n    bytes4 constant ERC_721 = 0x80ac58cd;\n    bytes4 constant ERC_721_ENUMERATION = 0x780e9d63;\n    bytes4 constant ERC_721_METADATA = 0x5b5e139f;\n    \n    //-------------------------------------------------------------------------\n    /// @notice AacInterfaceSupport constructor. Sets to true interfaces\n    ///  supported at launch.\n    //-------------------------------------------------------------------------\n    constructor () public {\n        // supports ERC-165\n        interfaceIdToIsSupported[ERC_165] = true;\n        // supports ERC-721\n        interfaceIdToIsSupported[ERC_721] = true;\n        // supports ERC-721 Enumeration\n        interfaceIdToIsSupported[ERC_721_ENUMERATION] = true;\n        // supports ERC-721 Metadata\n        interfaceIdToIsSupported[ERC_721_METADATA] = true;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    //-------------------------------------------------------------------------\n    function supportsInterface(\n        bytes4 interfaceID\n    ) external view returns (bool) {\n        if(interfaceID == 0xffffffff) {\n            return false;\n        } else {\n            return interfaceIdToIsSupported[interfaceID];\n        }\n    }\n}\n\n\n//-----------------------------------------------------------------------------\n/// @title AAC Creation\n/// @notice Defines new AAC creation (minting) and AAC linking to\n///  RFID-enabled physical objects.\n//-----------------------------------------------------------------------------\ncontract AacCreation is AacTransfers, ERC165, Ownable {\n    //-------------------------------------------------------------------------\n    /// @dev Link emits when an empty AAC gets assigned to a valid RFID.\n    //-------------------------------------------------------------------------\n    event Link(uint _oldUid, uint _newUid);\n\n    address public creationHandlerContractAddress;\n    // UID value is 7 bytes. Max value is 2**56 - 1\n    uint constant UID_MAX = 0xFFFFFFFFFFFFFF;\n    \n    function setCreationHandlerContractAddress(address _creationHandlerAddress) \n    external \n    notZero(uint(_creationHandlerAddress))\n    onlyOwner \n    {\n        creationHandlerContractAddress = _creationHandlerAddress;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Transfer EHrTs to mint a new empty AAC for '_to'.\n    /// @dev Sender must have approved this contract address as an authorized\n    ///  spender with at least \"priceToMint\" tokens. Throws if the sender has\n    ///  insufficient balance. Throws if sender has not granted this contract's\n    ///  address sufficient allowance.\n    /// @param _to The address to deduct EHrTs from and send new AAC to.\n    //-------------------------------------------------------------------------\n    function mintAndSend(address payable _to) external {\n        require (msg.sender == creationHandlerContractAddress);\n\n        uint uid = UID_MAX + aacArray.length + 1;\n        uint index = aacArray.push(Aac(_to, uid, 0, 0, \"\"));\n        uidToAacIndex[uid] = index - 1;\n\n        emit Transfer(address(0), _to, uid);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Change AAC #`_aacId` to AAC #`_newUid`. Writes any\n    ///  data passed through '_data' into the AAC's public data.\n    /// @dev Throws if AAC #`_aacId` does not exist. Throws if sender is\n    ///  not approved to operate for AAC. Throws if '_aacId' is smaller\n    ///  than 8 bytes. Throws if '_newUid' is bigger than 7 bytes. Throws if \n    ///  '_newUid' is zero. Throws if '_newUid' is already taken.\n    /// @param _newUid The UID of the RFID chip to link to the AAC\n    /// @param _aacId The UID of the empty AAC to link\n    /// @param _data A byte string of data to attach to the AAC\n    //-------------------------------------------------------------------------\n    function link(\n        bytes7 _newUid, \n        uint _currentUid, \n        bytes calldata _data\n    ) external {\n        require (msg.sender == creationHandlerContractAddress);\n        Aac storage aac = aacArray[uidToAacIndex[_currentUid]];\n        uint newUid = uint(uint56(_newUid));\n\n        // set new UID's mapping to index to old UID's mapping\n        uidToAacIndex[newUid] = uidToAacIndex[_currentUid];\n        // reset old UID's mapping to index\n        uidToAacIndex[_currentUid] = 0;\n        // set AAC's UID to new UID\n        aac.uid = newUid;\n        // set any data\n        aac.aacData = _data;\n        // reset the timestamp\n        aac.timestamp = now;\n        // set new uid to externalNft\n        if (uidToExternalNft[_currentUid].nftContractAddress != address(0)) {\n            uidToExternalNft[newUid] = uidToExternalNft[_currentUid];\n        }\n\n        emit Link(_currentUid, newUid);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Set external NFT #`_externalId` as AAC #`_aacUid`'s\n    ///  linked external NFT.\n    /// @dev Throws if sender is not authorized to operate AAC #`_aacUid`\n    ///  Throws if external NFT is already linked. Throws if sender is not\n    ///  authorized to operate external NFT.\n    /// @param _aacUid The UID of the AAC to link\n    /// @param _externalAddress The contract address of the external NFT\n    /// @param _externalId The UID of the external NFT to link\n    //-------------------------------------------------------------------------\n    function linkExternalNft(\n        uint _aacUid, \n        address _externalAddress, \n        uint _externalId\n    ) external canOperate(_aacUid) {\n        require (linkedExternalNfts[_externalAddress][_externalId] == false);\n        require (ERC165(_externalAddress).supportsInterface(ERC_721));\n        require (msg.sender == VIP181(_externalAddress).ownerOf(_externalId));\n        uidToExternalNft[_aacUid] = ExternalNft(_externalAddress, _externalId);\n        linkedExternalNfts[_externalAddress][_externalId] = true;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Gets whether or not an AAC #`_uid` exists.\n    //-------------------------------------------------------------------------\n    function checkExists(uint _tokenId) external view returns(bool) {\n        return (uidToAacIndex[_tokenId] != 0);\n    }\n}\n\n\n//-----------------------------------------------------------------------------\n/// @title AAC Experience\n/// @notice Defines AAC exp increaser contract and function\n//-----------------------------------------------------------------------------\ncontract AacExperience is AacCreation {\n    address public expIncreaserContractAddress;\n\n    function setExpIncreaserContractAddress(address _expAddress) \n    external \n    notZero(uint(_expAddress))\n    onlyOwner \n    {\n        expIncreaserContractAddress = _expAddress;\n    }\n    \n    function addExp(uint _uid, uint _amount) external mustExist(_uid) {\n        require (msg.sender == expIncreaserContractAddress);\n        aacArray[uidToAacIndex[_uid]].exp += _amount;\n    }\n}\n\n\n//-----------------------------------------------------------------------------\n/// @title AAC Interface\n/// @notice Interface for highest-level AAC getters\n//-----------------------------------------------------------------------------\ncontract AacInterface is AacExperience {\n    // URL Containing AAC metadata\n    string metadataUrl;\n\n    //-------------------------------------------------------------------------\n    /// @notice Change old metadata URL to `_newUrl`\n    /// @dev Throws if new URL is empty\n    /// @param _newUrl The new URL containing AAC metadata\n    //-------------------------------------------------------------------------\n    function updateMetadataUrl(string calldata _newUrl)\n        external \n        onlyOwner \n        notZero(bytes(_newUrl).length)\n    {\n        metadataUrl = _newUrl;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Sets all data for AAC #`_uid`.\n    /// @dev Throws if AAC #`_uid` does not exist. Throws if not authorized to\n    ///  operate AAC.\n    /// @param _uid the UID of the AAC to change.\n    //-------------------------------------------------------------------------\n    function changeAacData(uint _uid, bytes calldata _data) \n        external \n        mustExist(_uid)\n        canOperate(_uid)\n    {\n        aacArray[uidToAacIndex[_uid]].aacData = _data;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Gets all public info for AAC #`_uid`.\n    /// @dev Throws if AAC #`_uid` does not exist.\n    /// @param _uid the UID of the AAC to view.\n    /// @return AAC owner, AAC UID, Creation Timestamp, Experience,\n    ///  and Public Data.\n    //-------------------------------------------------------------------------\n    function getAac(uint _uid) \n        external\n        view \n        mustExist(_uid) \n        returns (address, uint, uint, uint, bytes memory) \n    {\n        Aac memory aac = aacArray[uidToAacIndex[_uid]];\n        return(aac.owner, aac.uid, aac.timestamp, aac.exp, aac.aacData);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Gets all info for AAC #`_uid`'s linked NFT.\n    /// @dev Throws if AAC #`_uid` does not exist.\n    /// @param _uid the UID of the AAC to view.\n    /// @return NFT contract address, External NFT ID.\n    //-------------------------------------------------------------------------\n    function getLinkedNft(uint _uid) \n        external\n        view \n        mustExist(_uid) \n        returns (address, uint) \n    {\n        ExternalNft memory nft = uidToExternalNft[_uid];\n        return (nft.nftContractAddress, nft.nftId);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Gets whether NFT #`_externalId` is linked to an AAC.\n    /// @param _externalAddress the contract address for the external NFT\n    /// @param _externalId the UID of the external NFT to view.\n    /// @return NFT contract address, External NFT ID.\n    //-------------------------------------------------------------------------\n    function externalNftIsLinked(address _externalAddress, uint _externalId)\n        external\n        view\n        returns(bool)\n    {\n        return linkedExternalNfts[_externalAddress][_externalId];\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    //-------------------------------------------------------------------------\n    function name() external pure returns (string memory) {\n        return \"Authentic Asset Certificates\";\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice An abbreviated name for NFTs in this contract\n    //-------------------------------------------------------------------------\n    function symbol() external pure returns (string memory) { return \"AAC\"; }\n\n    //-------------------------------------------------------------------------\n    /// @notice A distinct URL for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    ///  If:\n    ///  * The URI is a URL\n    ///  * The URL is accessible\n    ///  * The URL points to a valid JSON file format (ECMA-404 2nd ed.)\n    ///  * The JSON base element is an object\n    ///  then these names of the base element SHALL have special meaning:\n    ///  * \"name\": A string identifying the item to which `_tokenId` grants\n    ///    ownership\n    ///  * \"description\": A string detailing the item to which `_tokenId`\n    ///    grants ownership\n    ///  * \"image\": A URI pointing to a file of image/* mime type representing\n    ///    the item to which `_tokenId` grants ownership\n    ///  Wallets and exchanges MAY display this to the end user.\n    ///  Consider making any images at a width between 320 and 1080 pixels and\n    ///  aspect ratio between 1.91:1 and 4:5 inclusive.\n    /// @param _tokenId The AAC whose metadata address is being queried\n    //-------------------------------------------------------------------------\n    function tokenURI(uint _tokenId) external view returns (string memory) {\n        if (uidToExternalNft[_tokenId].nftContractAddress != address(0) && \n            ERC165(uidToExternalNft[_tokenId].nftContractAddress).supportsInterface(ERC_721_METADATA)) \n        {\n            return VIP181(uidToExternalNft[_tokenId].nftContractAddress).tokenURI(_tokenId);\n        }\n        else {\n            // convert AAC UID to a 14 character long string of character bytes\n            bytes memory uidString = intToBytes(_tokenId);\n            // declare new string of bytes with combined length of url and uid \n            bytes memory fullUrlBytes = new bytes(bytes(metadataUrl).length + uidString.length);\n            // copy URL string and uid string into new string\n            uint counter = 0;\n            for (uint i = 0; i < bytes(metadataUrl).length; i++) {\n                fullUrlBytes[counter++] = bytes(metadataUrl)[i];\n            }\n            for (uint i = 0; i < uidString.length; i++) {\n                fullUrlBytes[counter++] = uidString[i];\n            }\n            // return full URL\n            return string(fullUrlBytes);\n        }\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Convert int to 14 character bytes\n    //-------------------------------------------------------------------------\n    function intToBytes(uint _tokenId) \n        private \n        pure \n        returns (bytes memory) \n    {\n        // convert int to bytes32\n        bytes32 x = bytes32(_tokenId);\n        \n        // convert each byte into two, and assign each byte a hex digit\n        bytes memory uidBytes64 = new bytes(64);\n        for (uint i = 0; i < 32; i++) {\n            byte b = byte(x[i]);\n            byte hi = byte(uint8(b) / 16);\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\n            uidBytes64[i*2] = char(hi);\n            uidBytes64[i*2+1] = char(lo);\n        }\n        \n        // reduce size to last 14 chars (7 bytes)\n        bytes memory uidBytes = new bytes(14);\n        for (uint i = 0; i < 14; ++i) {\n            uidBytes[i] = uidBytes64[i + 50];\n        }\n        return uidBytes;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Convert byte to UTF-8-encoded hex character\n    //-------------------------------------------------------------------------\n    function char(byte b) private pure returns (byte c) {\n        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aacUid\",\"type\":\"uint256\"},{\"name\":\"_externalAddress\",\"type\":\"address\"},{\"name\":\"_externalId\",\"type\":\"uint256\"}],\"name\":\"linkExternalNft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getAac\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expIncreaserContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getLinkedNft\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUrl\",\"type\":\"string\"}],\"name\":\"updateMetadataUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creationHandlerAddress\",\"type\":\"address\"}],\"name\":\"setCreationHandlerContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUid\",\"type\":\"bytes7\"},{\"name\":\"_currentUid\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"link\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_externalAddress\",\"type\":\"address\"},{\"name\":\"_externalId\",\"type\":\"uint256\"}],\"name\":\"externalNftIsLinked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"changeAacData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_expAddress\",\"type\":\"address\"}],\"name\":\"setExpIncreaserContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationHandlerContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUid\",\"type\":\"uint256\"}],\"name\":\"Link\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": ""
}