{
  "address": "0xb4e7040a9247d5d9d129af6150ea09382c4c5cc9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ldohtoken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.4.25;\n\n/**\n\n\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \n\n \n*/\n\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\tevent Burn(address indexed _from, uint256 _value); \n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\ncontract Ldohtoken is ERC20Interface {\n\t\n\taddress public owner;\n    string \tpublic symbol;\n    string \tpublic name;\n    uint8 \tpublic decimals;\n    uint256 public _totalSupply;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \n\t\n    constructor() public {\n\t\towner = msg.sender;\n\t}\n\t\tmodifier restricted {\n        require(msg.sender == owner);\n        _;\n\t\t\n        symbol = \"HLD\";\n        name = \"LDOH TOKEN\";\n        decimals = 18;\n        _totalSupply = 20000000000000000000000000000;\n\t\t\n        balances[0x6C3e1e834f780ECa69d01C5f3E9C6F5AFb93eb55] = _totalSupply;\n        emit Transfer(address(0), 0x6C3e1e834f780ECa69d01C5f3E9C6F5AFb93eb55, _totalSupply);\n    }\n\n    function transfer(address to, uint256 _value) public returns (bool success) {\n\t\tif (to == 0x0) revert();                               \n\t\tif (_value <= 0) revert(); \n        if (balances[msg.sender] < _value) revert();           \t\t\n        if (balances[to] + _value < balances[to]) revert(); \t\t\n\t\t\n        balances[msg.sender] \t\t= sub(balances[msg.sender], _value);\n        balances[to] \t\t\t\t= add(balances[to], _value);\n        emit Transfer(msg.sender, to, _value);\n        return true;\n    }\n\t\n    function approve(address spender, uint256 _value) public returns (bool success) {\n\t\tif (_value <= 0) revert(); \n        allowed[msg.sender][spender] = _value;\n        emit Approval(msg.sender, spender, _value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 _value) public returns (bool success) {\n\t\tif (to == 0x0) revert();                                \t\t\t\t\t\t\n\t\tif (_value <= 0) revert(); \n        if (balances[from] < _value) revert();                 \t\t\t\t\t\n        if (balances[to]  + _value < balances[to]) revert();  \t\t\t\t\t\n        if (_value > allowed[from][msg.sender]) revert();     \t\t\t\t\t\t\n\t\t\n        balances[from] \t\t\t\t= sub(balances[from], _value);\n        allowed[from][msg.sender] \t= sub(allowed[from][msg.sender], _value);\n        balances[to] \t\t\t\t= add(balances[to], _value);\n        emit Transfer(from, to, _value);\n        return true;\n    }\n\t\n\tfunction burn(uint256 _value) public returns (bool success) {\n        if (balances[msg.sender] < _value) revert();            \t\t\t\t\t\t\n\t\tif (_value <= 0) revert(); \n        balances[msg.sender] \t= sub(balances[msg.sender], _value);                     \n        _totalSupply \t\t\t= sub(_totalSupply, _value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n\n    function allowance(address TokenAddress, address spender) public constant returns (uint remaining) {\n        return allowed[TokenAddress][spender];\n    }\n\t\n\tfunction totalSupply() public constant returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n    function balanceOf(address TokenAddress) public constant returns (uint balance) {\n        return balances[TokenAddress];\n\t\t\n    }\n\t\n\tfunction approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\t\n\t\n\t/*==============================\n    =           ADDITIONAL         =\n    ==============================*/ \n\t\n\n    function () public payable {\n    }\n\t\n    function WithdrawEth() restricted public {\n        require(address(this).balance > 0); \n\t\tuint256 amount = address(this).balance;\n        \n        msg.sender.transfer(amount);\n    }\n\n    function TransferERC20Token(address tokenAddress, uint tokens) public restricted returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n\t\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TransferERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"TokenAddress\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611aea806100606000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100dd578063095ea7b31461016d57806318160ddd146101d2578063223ffb42146101fd57806323b872dd14610262578063313ce567146102e75780633eaaf86b1461031857806342966c681461034357806370a08231146103885780638da5cb5b146103df57806394606d0c1461043657806395d89b411461044d578063a9059cbb146104dd578063cae9ca5114610542578063dd62ed3e146105ed575b005b3480156100e957600080fd5b506100f2610664565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610132578082015181840152602081019050610117565b50505050905090810190601f16801561015f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017957600080fd5b506101b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610702565b604051808215151515815260200191505060405180910390f35b3480156101de57600080fd5b506101e7610802565b6040518082815260200191505060405180910390f35b34801561020957600080fd5b50610248600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061084d565b604051808215151515815260200191505060405180910390f35b34801561026e57600080fd5b506102cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b4e565b604051808215151515815260200191505060405180910390f35b3480156102f357600080fd5b506102fc610f72565b604051808260ff1660ff16815260200191505060405180910390f35b34801561032457600080fd5b5061032d610f85565b6040518082815260200191505060405180910390f35b34801561034f57600080fd5b5061036e60048036038101908080359060200190929190505050610f8b565b604051808215151515815260200191505060405180910390f35b34801561039457600080fd5b506103c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110dd565b6040518082815260200191505060405180910390f35b3480156103eb57600080fd5b506103f4611126565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044257600080fd5b5061044b61114b565b005b34801561045957600080fd5b506104626113cf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104a2578082015181840152602081019050610487565b50505050905090810190601f1680156104cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104e957600080fd5b50610528600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061146d565b604051808215151515815260200191505060405180910390f35b34801561054e57600080fd5b506105d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611701565b604051808215151515815260200191505060405180910390f35b3480156105f957600080fd5b5061064e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611950565b6040518082815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106fa5780601f106106cf576101008083540402835291602001916106fa565b820191906000526020600020905b8154815290600101906020018083116106dd57829003601f168201915b505050505081565b6000808211151561071257600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600560008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460045403905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108aa57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561096e57600080fd5b505af1158015610982573d6000803e3d6000fd5b505050506040513d602081101561099857600080fd5b810190808051906020019092919050505090506040805190810160405280600381526020017f484c440000000000000000000000000000000000000000000000000000000000815250600190805190602001906109f6929190611a19565b506040805190810160405280600a81526020017f4c444f4820544f4b454e0000000000000000000000000000000000000000000081525060029080519060200190610a42929190611a19565b506012600360006101000a81548160ff021916908360ff1602179055506b409f9cbc7c4a04c22000000060048190555060045460056000736c3e1e834f780eca69d01c5f3e9c6f5afb93eb5573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550736c3e1e834f780eca69d01c5f3e9c6f5afb93eb5573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a392915050565b6000808373ffffffffffffffffffffffffffffffffffffffff161415610b7357600080fd5b600082111515610b8257600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bce57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015610c5b57600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610ce457600080fd5b610d2d600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836119d7565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610df6600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836119d7565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ebf600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836119f8565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b60045481565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610fd957600080fd5b600082111515610fe857600080fd5b611031600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836119d7565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611080600454836119d7565b6004819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111a857600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff16311115156111ce57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163190503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561122e573d6000803e3d6000fd5b506040805190810160405280600381526020017f484c4400000000000000000000000000000000000000000000000000000000008152506001908051906020019061127a929190611a19565b506040805190810160405280600a81526020017f4c444f4820544f4b454e00000000000000000000000000000000000000000000815250600290805190602001906112c6929190611a19565b506012600360006101000a81548160ff021916908360ff1602179055506b409f9cbc7c4a04c22000000060048190555060045460056000736c3e1e834f780eca69d01c5f3e9c6f5afb93eb5573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550736c3e1e834f780eca69d01c5f3e9c6f5afb93eb5573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a350565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114655780601f1061143a57610100808354040283529160200191611465565b820191906000526020600020905b81548152906001019060200180831161144857829003601f168201915b505050505081565b6000808373ffffffffffffffffffffffffffffffffffffffff16141561149257600080fd5b6000821115156114a157600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156114ed57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101561157a57600080fd5b6115c3600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836119d7565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061164f600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836119f8565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156118de5780820151818401526020810190506118c3565b50505050905090810190601f16801561190b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561192d57600080fd5b505af1158015611941573d6000803e3d6000fd5b50505050600190509392505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808383111515156119e957600080fd5b82840390508091505092915050565b6000808284019050838110151515611a0f57600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a5a57805160ff1916838001178555611a88565b82800160010185558215611a88579182015b82811115611a87578251825591602001919060010190611a6c565b5b509050611a959190611a99565b5090565b611abb91905b80821115611ab7576000816000905550600101611a9f565b5090565b905600a165627a7a723058208d3d7f2620c7c0003becac0249ec9fa88b92a80b6f4c1bb47efc441a31fd02100029"
}