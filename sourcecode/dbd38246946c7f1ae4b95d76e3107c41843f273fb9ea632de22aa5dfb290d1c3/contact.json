{
  "address": "0x76063ea512a2f8700ebb5b01d8540b2d0f602cd4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TradeWeapon",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\npragma solidity ^0.4.25;\n/* \n  this version of tradiing contracts uses mappings insead of array to keep track of\n  weapons on sale\n */\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a && c>=b);\n    return c;\n  }\n}\n\ncontract WeaponTokenize {\n  event GameProprietaryDataUpdated(uint weaponId, string gameData);\n  event PublicDataUpdated(uint weaponId, string publicData);\n  event OwnerProprietaryDataUpdated(uint weaponId, string ownerProprietaryData);\n  event WeaponAdded(uint weaponId, string gameData, string publicData, string ownerData);\n  function updateOwnerOfWeapon (uint, address) public  returns(bool res);\n  function getOwnerOf (uint _weaponId) public view returns(address _owner) ;\n}\n\ncontract ERC20Interface {\n  function transfer(address to, uint tokens) public returns (bool success);\n  function balanceOf(address _sender) public returns (uint _bal);\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n  event Transfer(address indexed from, address indexed to, uint tokens);\n      function transferFrom(address from, address to, uint tokens) public returns (bool success);\n}\n\n\ncontract TradeWeapon {\n  using SafeMath for uint;\n  // state variables\n  address public owner;\n  WeaponTokenize public weaponTokenize;\n  ERC20Interface public RCCToken;\n  uint public rate = 100; // 1 ETH = 100 RCC\n  uint public commssion_n = 50; // 1% commssion of each trade from both buyers and sellers\n  uint public commssion_d = 100;\n  bool public saleDisabled = false;\n  bool public ethSaleDisabled = false;\n\n  // statics\n  uint public totalOrdersPlaced = 0;\n  uint public totalOrdersCancelled = 0;\n  uint public totalOrdersMatched = 0;\n\n  struct item{\n    uint sellPrice;\n    uint commssion;\n    address seller;\n  }\n\n  // this mapping contains weaponId to details of sale\n  mapping (uint => item) public weaponDetail;\n  // total weapon on Sale\n  uint totalWeaponOnSale;\n  // index => weaponId\n  mapping(uint => uint) public indexToWeaponId;\n  // weaponId => index\n  mapping(uint => uint) public weaponIdToIndex;\n  // mapping of weaponId to saleStatus\n  mapping (uint => bool) public isOnSale;\n  // address to operator\n  mapping (address => mapping(address => bool)) private operators;\n  \n  // events\n  event OrderPlaced(address _seller, address _placedBy, uint _weaponId, uint _sp);\n  event OderUpdated(address _seller, address _placedBy, uint _weaponId, uint _sp);\n  event OrderCacelled(address _placedBy, uint _weaponId);\n  event OrderMatched(address _buyer, address _seller, uint _sellPrice, address _placedBy, uint _commssion, string _payType);\n  \n  constructor (address _tokenizeAddress, address _rccAddress) public{\n    owner = msg.sender;\n    weaponTokenize =  WeaponTokenize(_tokenizeAddress);\n    RCCToken = ERC20Interface(_rccAddress);\n  }\n\n  modifier onlyOwnerOrOperator(uint _weaponId) {\n    address weaponOwner = weaponTokenize.getOwnerOf(_weaponId);\n    require (\n      (msg.sender == weaponOwner ||\n      checkOperator(weaponOwner, msg.sender)\n      ), '2');\n    _;\n  }\n\n  modifier onlyIfOnSale(uint _weaponId) {\n    require(isOnSale[_weaponId], '3');\n    _;\n  }\n\n  modifier ifSaleLive(){\n    require(!saleDisabled, '6');\n    _;\n  }\n\n  modifier ifEthSaleLive() {\n    require(!ethSaleDisabled, '7');\n    _;\n  }\n\n  modifier onlyOwner() {\n    require (msg.sender == owner, '1');\n    _;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////\n                    // Only Owner //\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  function updateRate(uint _newRate) onlyOwner public {\n    rate = _newRate;\n  }\n\n  function updateCommission(uint _commssion_n, uint _commssion_d) onlyOwner public {\n    commssion_n = _commssion_n;\n    commssion_d = _commssion_d;\n  }\n\n  function disableSale() public onlyOwner {\n    saleDisabled = true;\n  }\n\n  function enableSale() public onlyOwner {\n    saleDisabled = false;\n  }\n\n  function disableEthSale() public onlyOwner {\n    ethSaleDisabled = false;\n  }\n\n  function enableEthSale() public onlyOwner {\n    ethSaleDisabled = true;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////\n                    // Public Functions //\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  function addOperator(address newOperator) public{\n    operators[msg.sender][newOperator] =  true;\n  }\n\n  function removeOperator(address _operator) public {\n    operators[msg.sender][_operator] =  false;\n  }\n\n\n\n  function sellWeapon(uint _weaponId, uint _sellPrice) ifSaleLive onlyOwnerOrOperator(_weaponId) public {\n    // weapon should not be already on sale\n    require( ! isOnSale[_weaponId], '4');\n    // get owner of weapon from Tokenization contract\n    address weaponOwner = weaponTokenize.getOwnerOf(_weaponId);\n    // calculate commssion\n    uint _commssion = calculateCommission(_sellPrice);\n    \n    item memory testItem = item(_sellPrice, _commssion, weaponOwner);\n    // put weapon on sale\n    putWeaponOnSale(_weaponId, testItem);\n    // emit sell event\n    emit OrderPlaced(weaponOwner, msg.sender, _weaponId, _sellPrice);\n  }\n\n  function updateSale(uint _weaponId, uint _sellPrice) ifSaleLive onlyIfOnSale(_weaponId) onlyOwnerOrOperator(_weaponId) public {\n    // calculate commssion\n    uint _commssion = calculateCommission(_sellPrice);\n    // get owner of weapon\n    address weaponOwner = weaponTokenize.getOwnerOf(_weaponId);\n    item memory testItem = item(_sellPrice ,_commssion, weaponOwner);\n    weaponDetail[_weaponId] = testItem;\n    emit OderUpdated(weaponOwner, msg.sender, _weaponId, _sellPrice);\n  }\n\n\n  function cancelSale(uint _weaponId) ifSaleLive onlyIfOnSale(_weaponId) onlyOwnerOrOperator(_weaponId) public {\n    (address weaponOwner,,) = getWeaponDetails(_weaponId);\n    removeWeaponFromSale(_weaponId);\n    totalOrdersCancelled = totalOrdersCancelled.add(1);\n    weaponTokenize.updateOwnerOfWeapon(_weaponId, weaponOwner);\n    emit OrderCacelled(msg.sender, _weaponId);\n  }\n\n  function buyWeaponWithRCC(uint _weaponId, address _buyer) ifSaleLive onlyIfOnSale(_weaponId) public{\n    if (_buyer != address(0)){\n      buywithRCC(_weaponId, _buyer);\n    }else{\n      buywithRCC(_weaponId, msg.sender);\n    }\n  }\n\n  function buyWeaponWithEth(uint _weaponId, address _buyer) ifSaleLive ifEthSaleLive onlyIfOnSale(_weaponId) public payable {\n    if (_buyer != address(0)){\n      buywithEth(_weaponId, _buyer, msg.value);\n    }else{\n      buywithEth(_weaponId, msg.sender, msg.value);\n    }\n  }\n\n\n  ///////////////////////////////////////////////////////////////////////////////////\n                    // Internal Fns //\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  function buywithRCC(uint _weaponId, address _buyer) internal {\n    // get details of weapon on sale\n    (address seller, uint spOfWeapon, uint commssion) = getWeaponDetails(_weaponId);\n    // get allowance to trading contract from buyer\n    uint allowance = RCCToken.allowance(_buyer, address(this));\n    // calculate selling price (= sp + commission)\n    uint sellersPrice = spOfWeapon.sub(commssion);\n    require(allowance >= spOfWeapon, '5');\n    // delete weapon for sale\n    removeWeaponFromSale(_weaponId);\n    // transfer coins\n    if(spOfWeapon > 0){\n      RCCToken.transferFrom(_buyer, seller, sellersPrice);\n    }\n    if(commssion > 0){\n      RCCToken.transferFrom(_buyer, owner, commssion);\n    }\n    // add to total orders matched\n\t  totalOrdersMatched = totalOrdersMatched.add(1);\n    // update ownership to buyer\n    weaponTokenize.updateOwnerOfWeapon(_weaponId, _buyer);\n    emit OrderMatched(_buyer, seller, spOfWeapon, msg.sender, commssion, 'RCC');\n  }\n\n  function buywithEth(uint _weaponId, address _buyer, uint weiPaid) internal {\n    // basic validations\n    require ( rate > 0, '8');\n\n    // get weapon details\n    (address seller, uint spOfWeapon, uint commssion) = getWeaponDetails(_weaponId);\n\n    // calculate prices in wei\n    uint spInWei = spOfWeapon.div(rate);\n    require(spInWei > 0, '9');\n    require(weiPaid == spInWei, '10');\n    uint sellerPrice = spOfWeapon.sub(commssion);\n\n    // send RCC to seller\n    require (RCCToken.balanceOf(address(this)) >= sellerPrice, '11');\n    RCCToken.transfer(seller, sellerPrice);\n\n    // send ETH to admin\n    //address(owner).transfer(weiPaid);\n\n    // remove weapon from sale\n    removeWeaponFromSale(_weaponId);\n\n    // add to total orders matched\n\t  totalOrdersMatched = totalOrdersMatched.add(1);\n\n    // transfer weapon to buyer\n    weaponTokenize.updateOwnerOfWeapon(_weaponId, _buyer);\n    emit OrderMatched(_buyer, seller, spOfWeapon,  msg.sender, commssion, 'ETH');\n  } \n\n  function putWeaponOnSale(uint _weaponId, item memory _testItem) internal {\n    // chnage ownership of weapon to this contract\n    weaponTokenize.updateOwnerOfWeapon(_weaponId, address(this));\n    // allocate last index to this weapon id\n    indexToWeaponId[totalWeaponOnSale.add(1)] = _weaponId;\n    //\n    weaponIdToIndex[_weaponId] = totalWeaponOnSale.add(1);\n    // increase totalWeapons\n    totalWeaponOnSale = totalWeaponOnSale.add(1);\n    // map weaponId to weaponDetail\n    weaponDetail[_weaponId] = _testItem;\n    // set on sale flag to true\n    isOnSale[_weaponId] = true;\n    // add to total orders placed\n    totalOrdersPlaced = totalOrdersPlaced.add(1);\n  }\n\n  function removeWeaponFromSale(uint _weaponId) internal {\n    // set on sale property to false\n    isOnSale[_weaponId] = false;\n    // reset values of struct\n    weaponDetail[_weaponId] = item(0, 0,address(0));\n    uint indexOfDeletedWeapon = weaponIdToIndex[_weaponId];\n    if(indexOfDeletedWeapon != totalWeaponOnSale){\n      uint weaponAtLastIndex = indexToWeaponId[totalWeaponOnSale];\n      // map last elment to current one\n      weaponIdToIndex[weaponAtLastIndex] = indexOfDeletedWeapon;\n      indexToWeaponId[indexOfDeletedWeapon] = weaponAtLastIndex;\n      // last element to 0\n      weaponIdToIndex[_weaponId] = 0;\n      indexToWeaponId[totalWeaponOnSale] = 0;\n    } else{\n      weaponIdToIndex[_weaponId] = 0;\n      indexToWeaponId[indexOfDeletedWeapon] = 0;\n    }\n    totalWeaponOnSale = totalWeaponOnSale.sub(1);\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////\n                    // Constant functions //\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  function getWeaponDetails (uint _weaponId) public view returns (address, uint, uint) {\n    item memory currentItem = weaponDetail[_weaponId];\n    return (currentItem.seller, currentItem.sellPrice, currentItem.commssion);\n  }\n\n  function calculateCommission (uint _amount) public view returns (uint) {\n    return _amount.mul(commssion_n).div(commssion_d).div(100);\n  }\n\n  function getTotalWeaponOnSale() public view returns (uint) {\n    return totalWeaponOnSale;\n  }\n\n  function getWeaponAt(uint index) public view returns(address, uint, uint, uint) {\n    uint weaponId =  indexToWeaponId[index];\n    item memory currentItem = weaponDetail[weaponId];\n    return (currentItem.seller, currentItem.sellPrice, currentItem.commssion, weaponId);\n  }\n\n  function checkOperator(address _user, address _operator) public view returns (bool){\n    return operators[_user][_operator];\n  }\n\n}",
  "bytecode": "60806040526064600355603260045560646005556000600660006101000a81548160ff0219169083151502179055506000600660016101000a81548160ff02191690831515021790555060006007556000600855600060095534801561006457600080fd5b506040516040806138258339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506136c1806101646000396000f3006080604052600436106101a1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a4740ff146101a6578063106cbf90146101bd5780632c4e722e146102385780633bb0e13914610263578063427a90f91461028e57806342a2561f146102a55780634ce41a34146103205780635134468614610377578063668d40ce1461038e57806369ea1771146104095780638da5cb5b146104365780639870d7fe1461048d578063ab5eac1b146104d0578063ac8a584a14610507578063b979c9591461054a578063bc116d2414610575578063bd94b005146105a0578063bdde7897146105cd578063c683d8e414610604578063ce9b43211461061b578063d5315edc1461065c578063d594cd3614610687578063d62c168814610709578063d77a871c14610749578063dd6b04891461078a578063ddf02e9b146107b9578063e100fd6e146107f0578063f0f2805f1461083d578063f90057ce14610882578063f92abe68146108ad578063f9b243eb146108dc578063fda7ba4514610907578063ffd9397f1461095e575b600080fd5b3480156101b257600080fd5b506101bb61099f565b005b3480156101c957600080fd5b506101e860048036038101908080359060200190929190505050610a80565b604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390f35b34801561024457600080fd5b5061024d610aca565b6040518082815260200191505060405180910390f35b34801561026f57600080fd5b50610278610ad0565b6040518082815260200191505060405180910390f35b34801561029a57600080fd5b506102a3610ad6565b005b3480156102b157600080fd5b506102d060048036038101908080359060200190929190505050610bb7565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561032c57600080fd5b50610335610c6c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038357600080fd5b5061038c610c92565b005b34801561039a57600080fd5b506103ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d73565b604051808215151515815260200191505060405180910390f35b34801561041557600080fd5b5061043460048036038101908080359060200190929190505050610e07565b005b34801561044257600080fd5b5061044b610ed5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049957600080fd5b506104ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610efa565b005b3480156104dc57600080fd5b506105056004803603810190808035906020019092919080359060200190929190505050610f92565b005b34801561051357600080fd5b50610548600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611068565b005b34801561055657600080fd5b5061055f611100565b6040518082815260200191505060405180910390f35b34801561058157600080fd5b5061058a611106565b6040518082815260200191505060405180910390f35b3480156105ac57600080fd5b506105cb6004803603810190808035906020019092919050505061110c565b005b3480156105d957600080fd5b506106026004803603810190808035906020019092919080359060200190929190505050611553565b005b34801561061057600080fd5b50610619611a2e565b005b34801561062757600080fd5b5061064660048036038101908080359060200190929190505050611b0f565b6040518082815260200191505060405180910390f35b34801561066857600080fd5b50610671611b54565b6040518082815260200191505060405180910390f35b34801561069357600080fd5b506106b260048036038101908080359060200190929190505050611b5a565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390f35b61074760048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c2c565b005b34801561075557600080fd5b5061077460048036038101908080359060200190929190505050611e23565b6040518082815260200191505060405180910390f35b34801561079657600080fd5b5061079f611e3b565b604051808215151515815260200191505060405180910390f35b3480156107c557600080fd5b506107ee6004803603810190808035906020019092919080359060200190929190505050611e4e565b005b3480156107fc57600080fd5b5061083b60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122c0565b005b34801561084957600080fd5b5061086860048036038101908080359060200190929190505050612430565b604051808215151515815260200191505060405180910390f35b34801561088e57600080fd5b50610897612450565b6040518082815260200191505060405180910390f35b3480156108b957600080fd5b506108c2612456565b604051808215151515815260200191505060405180910390f35b3480156108e857600080fd5b506108f1612469565b6040518082815260200191505060405180910390f35b34801561091357600080fd5b5061091c612473565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096a57600080fd5b5061098960048036038101908080359060200190929190505050612499565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a63576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f310000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600660006101000a81548160ff021916908315150217905550565b600a6020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b60035481565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f310000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600660016101000a81548160ff021916908315150217905550565b6000806000610bc461365d565b600a60008681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806040015181600001518260200151935093509350509193909250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d56576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f310000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600660016101000a81548160ff021916908315150217905550565b6000600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ecb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f310000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060038190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611056576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f310000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600481905550806005819055505050565b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60045481565b60085481565b6000600660009054906101000a900460ff16151515611193576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f360000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600e600082815260200190815260200160002060009054906101000a900460ff161515611229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f330000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b826000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166383638710836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156112bd57600080fd5b505af11580156112d1573d6000803e3d6000fd5b505050506040513d60208110156112e757600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061133a57506113398133610d73565b5b15156113ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f320000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6113b785610bb7565b505093506113c4856124b1565b6113da600160085461267c90919063ffffffff16565b600881905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371f027fa86866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156114a557600080fd5b505af11580156114b9573d6000803e3d6000fd5b505050506040513d60208110156114cf57600080fd5b8101908080519060200190929190505050507fb51a8a936b1336f49648da8a388acde86e4b72dcd099634ea216a78ba711ced53386604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050505050565b60008061155e61365d565b600660009054906101000a900460ff161515156115e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f360000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b84600e600082815260200190815260200160002060009054906101000a900460ff161515611679576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f330000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b856000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166383638710836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561170d57600080fd5b505af1158015611721573d6000803e3d6000fd5b505050506040513d602081101561173757600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061178a57506117898133610d73565b5b15156117fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f320000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61180787611b0f565b9550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166383638710896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561189a57600080fd5b505af11580156118ae573d6000803e3d6000fd5b505050506040513d60208110156118c457600080fd5b810190808051906020019092919050505094506060604051908101604052808881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff16815250935083600a60008a8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fbec36fd0e775088cb36849dd3bfdbe83e027033cc03d241edbb0f2c64a6c74dd85338a8a604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611af2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f310000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600660006101000a81548160ff021916908315150217905550565b6000611b4d6064611b3f600554611b31600454876126a690919063ffffffff16565b6126e190919063ffffffff16565b6126e190919063ffffffff16565b9050919050565b60095481565b6000806000806000611b6a61365d565b600c6000888152602001908152602001600020549150600a60008381526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080604001518160000151826020015184955095509550955050509193509193565b600660009054906101000a900460ff16151515611cb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f360000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600660019054906101000a900460ff16151515611d36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f370000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600e600082815260200190815260200160002060009054906101000a900460ff161515611dcc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f330000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515611e1257611e0d8383346126fc565b611e1e565b611e1d8333346126fc565b5b505050565b600c6020528060005260406000206000915090505481565b600660009054906101000a900460ff1681565b600080611e5961365d565b600660009054906101000a900460ff16151515611ede576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f360000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b846000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166383638710836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b505050506040513d6020811015611f9c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611fef5750611fee8133610d73565b5b1515612063576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f320000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600e600088815260200190815260200160002060009054906101000a900460ff161515156120f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f340000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166383638710886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561218a57600080fd5b505af115801561219e573d6000803e3d6000fd5b505050506040513d60208110156121b457600080fd5b810190808051906020019092919050505094506121d086611b0f565b93506060604051908101604052808781526020018581526020018673ffffffffffffffffffffffffffffffffffffffff1681525092506122108784612d5b565b7f2470206de0d597332cec41e79165bf24fb8e706aca788e7c1aea6ebc5abb2d3885338989604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a150505050505050565b600660009054906101000a900460ff16151515612345576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f360000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600e600082815260200190815260200160002060009054906101000a900460ff1615156123db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f330000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415156124205761241b8383612f90565b61242b565b61242a8333612f90565b5b505050565b600e6020528060005260406000206000915054906101000a900460ff1681565b60055481565b600660019054906101000a900460ff1681565b6000600b54905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d6020528060005260406000206000915090505481565b6000806000600e600085815260200190815260200160002060006101000a81548160ff0219169083151502179055506060604051908101604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250600a6000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600d6000848152602001908152602001600020549150600b548214151561262857600c6000600b54815260200190815260200160002054905081600d60008381526020019081526020016000208190555080600c6000848152602001908152602001600020819055506000600d6000858152602001908152602001600020819055506000600c6000600b5481526020019081526020016000208190555061265b565b6000600d6000858152602001908152602001600020819055506000600c6000848152602001908152602001600020819055505b6126716001600b5461364490919063ffffffff16565b600b81905550505050565b60008082840190508381101580156126945750828110155b151561269c57fe5b8091505092915050565b60008060008414156126bb57600091506126da565b82840290508284828115156126cc57fe5b041415156126d657fe5b8091505b5092915050565b60008082848115156126ef57fe5b0490508091505092915050565b60008060008060008060035411151561277d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f380000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61278688610bb7565b9450945094506127a1600354856126e190919063ffffffff16565b915060008211151561281b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f390000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8186141515612892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f313000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6128a5838561364490919063ffffffff16565b905080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561296557600080fd5b505af1158015612979573d6000803e3d6000fd5b505050506040513d602081101561298f57600080fd5b810190808051906020019092919050505010151515612a16576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f313100000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612adb57600080fd5b505af1158015612aef573d6000803e3d6000fd5b505050506040513d6020811015612b0557600080fd5b810190808051906020019092919050505050612b20886124b1565b612b36600160095461267c90919063ffffffff16565b600981905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371f027fa89896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015612c0157600080fd5b505af1158015612c15573d6000803e3d6000fd5b505050506040513d6020811015612c2b57600080fd5b8101908080519060200190929190505050507fb6002c39a6f4a0904b6e41ba4170a929eda70e00666a8410db16c26ba164e7638786863387604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200180602001828103825260038152602001807f4554480000000000000000000000000000000000000000000000000000000000815250602001965050505050505060405180910390a15050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371f027fa83306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015612e2057600080fd5b505af1158015612e34573d6000803e3d6000fd5b505050506040513d6020811015612e4a57600080fd5b81019080805190602001909291905050505081600c6000612e776001600b5461267c90919063ffffffff16565b815260200190815260200160002081905550612e9f6001600b5461267c90919063ffffffff16565b600d600084815260200190815260200160002081905550612ecc6001600b5461267c90919063ffffffff16565b600b8190555080600a6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506001600e600084815260200190815260200160002060006101000a81548160ff021916908315150217905550612f86600160075461267c90919063ffffffff16565b6007819055505050565b6000806000806000612fa187610bb7565b945094509450600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e87306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561309857600080fd5b505af11580156130ac573d6000803e3d6000fd5b505050506040513d60208110156130c257600080fd5b810190808051906020019092919050505091506130e8838561364490919063ffffffff16565b9050838210151515613162576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f350000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61316b876124b1565b60008411156132aa57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8787846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561326d57600080fd5b505af1158015613281573d6000803e3d6000fd5b505050506040513d602081101561329757600080fd5b8101908080519060200190929190505050505b600083111561340a57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd876000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156133cd57600080fd5b505af11580156133e1573d6000803e3d6000fd5b505050506040513d60208110156133f757600080fd5b8101908080519060200190929190505050505b613420600160095461267c90919063ffffffff16565b600981905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371f027fa88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156134eb57600080fd5b505af11580156134ff573d6000803e3d6000fd5b505050506040513d602081101561351557600080fd5b8101908080519060200190929190505050507fb6002c39a6f4a0904b6e41ba4170a929eda70e00666a8410db16c26ba164e7638686863387604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200180602001828103825260038152602001807f5243430000000000000000000000000000000000000000000000000000000000815250602001965050505050505060405180910390a150505050505050565b600082821115151561365257fe5b818303905092915050565b6060604051908101604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905600a165627a7a72305820f55d9eb16614186a2552d38bd21ad02ae25d9bfc154f2234270c2ad7a7087f3d00290000000000000000000000007a74c8b0d5993e358f109750cf1ead1cb49cc6dd0000000000000000000000009b6443b0fb9c241a7fdac375595cea13e6b7807a",
  "constructorArguments": "0000000000000000000000007a74c8b0d5993e358f109750cf1ead1cb49cc6dd0000000000000000000000009b6443b0fb9c241a7fdac375595cea13e6b7807a"
}