{
  "address": "0xadf10eb786b160aea0037887a4b95341b9b68434",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "LTO Network: Token Sale",
  "contractName": "LTOTokenSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-14\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n  function burnFrom(address from, uint256 value) public {\n    _burnFrom(from, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter;\n\n  constructor() internal {\n    // The counter starts at one to prevent changing it from zero to a non-zero\n    // value, which is a more expensive operation.\n    _guardCounter = 1;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n\n}\n\n// File: contracts/LTOTokenSale.sol\n\n/**\n * @title ERC20 LTO Network token\n * @dev see https://github.com/legalthings/tokensale\n */\ncontract LTOTokenSale is Ownable, ReentrancyGuard {\n\n  using SafeMath for uint256;\n\n  uint256 constant minimumAmount = 0.1 ether;     // Minimum amount of ether to transfer\n  uint256 constant maximumCapAmount = 40 ether;  // Maximium amount of ether you can send with being caplisted\n  uint256 constant ethDecimals = 1 ether;         // Amount used to divide ether with to calculate proportion\n  uint256 constant ltoEthDiffDecimals = 10**10;   // Amount used to get the number of desired decimals, so  convert from 18 to 8\n  uint256 constant bonusRateDivision = 10000;     // Amount used to divide the amount so the bonus can be calculated\n\n  ERC20Burnable public token;\n  address public receiverAddr;\n  uint256 public totalSaleAmount;\n  uint256 public totalWannaBuyAmount;\n  uint256 public startTime;\n  uint256 public bonusEndTime;\n  uint256 public bonusPercentage;\n  uint256 public bonusDecreaseRate;\n  uint256 public endTime;\n  uint256 public userWithdrawalStartTime;\n  uint256 public clearStartTime;\n  uint256 public withdrawn;\n  uint256 public proportion = 1 ether;\n  uint256 public globalAmount;\n  uint256 public rate;\n  uint256 public nrOfTransactions = 0;\n\n  address public capListAddress;\n  mapping (address => bool) public capFreeAddresses;\n\n  struct PurchaserInfo {\n    bool withdrew;\n    bool recorded;\n    uint256 received;     // Received ether\n    uint256 accounted;    // Received ether + bonus\n    uint256 unreceived;   // Ether stuck because failed withdraw\n  }\n\n  struct Purchase {\n    uint256 received;     // Received ether\n    uint256 used;         // Received ether multiplied by the proportion\n    uint256 tokens;       // To receive tokens\n  }\n  mapping(address => PurchaserInfo) public purchaserMapping;\n  address[] public purchaserList;\n\n  modifier onlyOpenTime {\n    require(isStarted());\n    require(!isEnded());\n    _;\n  }\n\n  modifier onlyAutoWithdrawalTime {\n    require(isEnded());\n    _;\n  }\n\n  modifier onlyUserWithdrawalTime {\n    require(isUserWithdrawalTime());\n    _;\n  }\n\n  modifier purchasersAllWithdrawn {\n    require(withdrawn==purchaserList.length);\n    _;\n  }\n\n  modifier onlyClearTime {\n    require(isClearTime());\n    _;\n  }\n\n  modifier onlyCapListAddress {\n    require(msg.sender == capListAddress);\n    _;\n  }\n\n  constructor(address _receiverAddr, ERC20Burnable _token, uint256 _totalSaleAmount, address _capListAddress) public {\n    require(_receiverAddr != address(0));\n    require(_token != address(0));\n    require(_capListAddress != address(0));\n    require(_totalSaleAmount > 0);\n\n    receiverAddr = _receiverAddr;\n    token = _token;\n    totalSaleAmount = _totalSaleAmount;\n    capListAddress = _capListAddress;\n  }\n\n  function isStarted() public view returns(bool) {\n    return 0 < startTime && startTime <= now && endTime != 0;\n  }\n\n  function isEnded() public view returns(bool) {\n    return 0 < endTime && now > endTime;\n  }\n\n  function isUserWithdrawalTime() public view returns(bool) {\n    return 0 < userWithdrawalStartTime && now > userWithdrawalStartTime;\n  }\n\n  function isClearTime() public view returns(bool) {\n    return 0 < clearStartTime && now > clearStartTime;\n  }\n\n  function isBonusPeriod() public view returns(bool) {\n    return now >= startTime && now <= bonusEndTime;\n  }\n\n  function startSale(uint256 _startTime, uint256 _rate, uint256 duration,\n    uint256 bonusDuration, uint256 _bonusPercentage, uint256 _bonusDecreaseRate,\n    uint256 userWithdrawalDelaySec, uint256 clearDelaySec) public onlyOwner {\n    require(endTime == 0);\n    require(_startTime > 0);\n    require(_rate > 0);\n    require(duration > 0);\n    require(token.balanceOf(this) == totalSaleAmount);\n\n    rate = _rate;\n    bonusPercentage = _bonusPercentage;\n    bonusDecreaseRate = _bonusDecreaseRate;\n    startTime = _startTime;\n    bonusEndTime = startTime.add(bonusDuration);\n    endTime = startTime.add(duration);\n    userWithdrawalStartTime = endTime.add(userWithdrawalDelaySec);\n    clearStartTime = endTime.add(clearDelaySec);\n  }\n\n  function getPurchaserCount() public view returns(uint256) {\n    return purchaserList.length;\n  }\n\n  function _calcProportion() internal {\n    assert(totalSaleAmount > 0);\n\n    if (totalSaleAmount >= totalWannaBuyAmount) {\n      proportion = ethDecimals;\n      return;\n    }\n    proportion = totalSaleAmount.mul(ethDecimals).div(totalWannaBuyAmount);\n  }\n\n  function getSaleInfo(address purchaser) internal view returns (Purchase p) {\n    PurchaserInfo storage pi = purchaserMapping[purchaser];\n    return Purchase(\n      pi.received,\n      pi.received.mul(proportion).div(ethDecimals),\n      pi.accounted.mul(proportion).div(ethDecimals).mul(rate).div(ltoEthDiffDecimals)\n    );\n  }\n\n  function getPublicSaleInfo(address purchaser) public view returns (uint256, uint256, uint256) {\n    Purchase memory purchase = getSaleInfo(purchaser);\n    return (purchase.received, purchase.used, purchase.tokens);\n  }\n\n  function () payable public {\n    buy();\n  }\n\n  function buy() payable public onlyOpenTime {\n    require(msg.value >= minimumAmount);\n\n    uint256 amount = msg.value;\n    PurchaserInfo storage pi = purchaserMapping[msg.sender];\n    if (!pi.recorded) {\n      pi.recorded = true;\n      purchaserList.push(msg.sender);\n    }\n    uint256 totalAmount = pi.received.add(amount);\n    if (totalAmount > maximumCapAmount && !isCapFree(msg.sender)) {\n      uint256 recap = totalAmount.sub(maximumCapAmount);\n      amount = amount.sub(recap);\n      if (amount <= 0) {\n        revert();\n      } else {\n        msg.sender.transfer(recap);\n      }\n    }\n    pi.received = pi.received.add(amount);\n\n    globalAmount = globalAmount.add(amount);\n    if (isBonusPeriod() && bonusDecreaseRate.mul(nrOfTransactions) < bonusPercentage) {\n      uint256 percentage = bonusPercentage.sub(bonusDecreaseRate.mul(nrOfTransactions));\n      uint256 bonus = amount.div(bonusRateDivision).mul(percentage);\n      amount = amount.add(bonus);\n    }\n    pi.accounted = pi.accounted.add(amount);\n    totalWannaBuyAmount = totalWannaBuyAmount.add(amount.mul(rate).div(ltoEthDiffDecimals));\n    _calcProportion();\n    nrOfTransactions = nrOfTransactions.add(1);\n  }\n\n  function _withdrawal(address purchaser) internal {\n    require(purchaser != 0x0);\n    PurchaserInfo storage pi = purchaserMapping[purchaser];\n    if (pi.withdrew || !pi.recorded) {\n      return;\n    }\n    pi.withdrew = true;\n    withdrawn = withdrawn.add(1);\n    Purchase memory purchase = getSaleInfo(purchaser);\n    if (purchase.used > 0 && purchase.tokens > 0) {\n      receiverAddr.transfer(purchase.used);\n      require(token.transfer(purchaser, purchase.tokens));\n\n      uint256 unused = purchase.received.sub(purchase.used);\n      if (unused > 0) {\n        if (!purchaser.send(unused)) {\n          pi.unreceived = unused;\n        }\n      }\n    } else {\n      assert(false);\n    }\n    return;\n  }\n\n  function withdrawal() public onlyUserWithdrawalTime {\n    _withdrawal(msg.sender);\n  }\n\n  function withdrawalFor(uint256 index, uint256 stop) public onlyAutoWithdrawalTime onlyOwner {\n    for (; index < stop; index++) {\n      _withdrawal(purchaserList[index]);\n    }\n  }\n\n  function clear(uint256 tokenAmount, uint256 etherAmount) public purchasersAllWithdrawn onlyClearTime onlyOwner {\n    if (tokenAmount > 0) {\n      token.burn(tokenAmount);\n    }\n    if (etherAmount > 0) {\n      receiverAddr.transfer(etherAmount);\n    }\n  }\n\n  function withdrawFailed(address alternativeAddress) public onlyUserWithdrawalTime nonReentrant {\n    require(alternativeAddress != 0x0);\n    PurchaserInfo storage pi = purchaserMapping[msg.sender];\n\n    require(pi.recorded);\n    require(pi.unreceived > 0);\n    if (alternativeAddress.send(pi.unreceived)) {\n      pi.unreceived = 0;\n    }\n  }\n\n  function addCapFreeAddress(address capFreeAddress) public onlyCapListAddress {\n    require(capFreeAddress != address(0));\n\n    capFreeAddresses[capFreeAddress] = true;\n  }\n\n  function removeCapFreeAddress(address capFreeAddress) public onlyCapListAddress {\n    require(capFreeAddress != address(0));\n\n    capFreeAddresses[capFreeAddress] = false;\n  }\n\n  function isCapFree(address capFreeAddress) internal view returns (bool) {\n    return (capFreeAddresses[capFreeAddress]);\n  }\n\n  function currentBonus() public view returns(uint256) {\n    return bonusPercentage.sub(bonusDecreaseRate.mul(nrOfTransactions));\n  }\n}",
  "bytecode": "6080604052670de0b6b3a7640000600e55600060115534801561002157600080fd5b506040516080806114fe833981016040818152825160208401519184015160609094015160008054600160a060020a0319163317808255929593949192600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018055600160a060020a03841615156100a657600080fd5b600160a060020a03831615156100bb57600080fd5b600160a060020a03811615156100d057600080fd5b600082116100dd57600080fd5b60038054600160a060020a03958616600160a060020a0319918216179091556002805494861694821694909417909355600491909155601280549190931691161790556113cf8061012f6000396000f3006080604052600436106101ed5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663088266b581146101f757806328d6ce3d146102205780632c4e722e1461024d5780633197cbb61461027457806341ee903e14610289578063463d5ce1146102a45780634e51b3bd146102b9578063544736e6146102ce5780635b4246d4146102e35780635d977c02146102f857806367e476d7146103135780636f6297c314610352578063715018a614610373578063721f52511461038857806378e979251461039d578063813d6c9a146103b2578063814e5c9b146103c75780638815ee86146103dc5780638da5cb5b146104105780638f32d59b1461042557806391de54741461043a5780639565feeb1461044f578063a3dcb4d214610464578063a4fd6f5614610479578063a6f2ae3a146101ed578063a8754caa1461048e578063ad78dc8e146104dc578063af21037f146104f1578063b47b611614610506578063c80ec52214610527578063ce334b001461053c578063d4e9329214610551578063dd7b22e514610566578063eca73f641461057b578063ee1a629514610590578063f2fde38b146105a5578063f3784dec146105c6578063f7e2ff00146105e7578063f87d7236146105fc578063fc0c546a1461061d575b6101f5610632565b005b34801561020357600080fd5b5061020c6108dc565b604080519115158252519081900360200190f35b34801561022c57600080fd5b506101f560043560243560443560643560843560a43560c43560e4356108f6565b34801561025957600080fd5b50610262610a52565b60408051918252519081900360200190f35b34801561028057600080fd5b50610262610a58565b34801561029557600080fd5b506101f5600435602435610a5e565b3480156102b057600080fd5b5061020c610b65565b3480156102c557600080fd5b50610262610b7d565b3480156102da57600080fd5b5061020c610b83565b3480156102ef57600080fd5b50610262610ba9565b34801561030457600080fd5b506101f5600435602435610baf565b34801561031f57600080fd5b50610334600160a060020a0360043516610c14565b60408051938452602084019290925282820152519081900360600190f35b34801561035e57600080fd5b5061020c600160a060020a0360043516610c44565b34801561037f57600080fd5b506101f5610c59565b34801561039457600080fd5b50610262610cc3565b3480156103a957600080fd5b50610262610cc9565b3480156103be57600080fd5b50610262610ccf565b3480156103d357600080fd5b50610262610cd5565b3480156103e857600080fd5b506103f4600435610cdb565b60408051600160a060020a039092168252519081900360200190f35b34801561041c57600080fd5b506103f4610d03565b34801561043157600080fd5b5061020c610d12565b34801561044657600080fd5b50610262610d23565b34801561045b57600080fd5b5061020c610d29565b34801561047057600080fd5b506103f4610d42565b34801561048557600080fd5b5061020c610d51565b34801561049a57600080fd5b506104af600160a060020a0360043516610d69565b60408051951515865293151560208601528484019290925260608401526080830152519081900360a00190f35b3480156104e857600080fd5b50610262610d9b565b3480156104fd57600080fd5b50610262610da1565b34801561051257600080fd5b506101f5600160a060020a0360043516610da7565b34801561053357600080fd5b50610262610df4565b34801561054857600080fd5b506103f4610dfa565b34801561055d57600080fd5b506101f5610e09565b34801561057257600080fd5b50610262610e27565b34801561058757600080fd5b50610262610e2d565b34801561059c57600080fd5b50610262610e49565b3480156105b157600080fd5b506101f5600160a060020a0360043516610e4f565b3480156105d257600080fd5b506101f5600160a060020a0360043516610e6e565b3480156105f357600080fd5b50610262610f1d565b34801561060857600080fd5b506101f5600160a060020a0360043516610f23565b34801561062957600080fd5b506103f4610f73565b600080600080600080610643610b83565b151561064e57600080fd5b610656610d51565b1561066057600080fd5b67016345785d8a000034101561067557600080fd5b3360009081526014602052604090208054349750909550610100900460ff1615156106f757845461ff001916610100178555601580546001810182556000919091527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501805473ffffffffffffffffffffffffffffffffffffffff1916331790555b600185015461070c908763ffffffff610f8216565b935068022b1c8c1227a000008411801561072c575061072a33610f9f565b155b1561079a5761074a8468022b1c8c1227a0000063ffffffff610fbd16565b925061075c868463ffffffff610fbd16565b95506000861161076b57600080fd5b604051339084156108fc029085906000818181858888f19350505050158015610798573d6000803e3d6000fd5b505b60018501546107af908763ffffffff610f8216565b6001860155600f546107c7908763ffffffff610f8216565b600f556107d2610d29565b80156107f357506008546011546009546107f19163ffffffff610fd416565b105b1561085a57610821610812601154600954610fd490919063ffffffff16565b6008549063ffffffff610fbd16565b9150610845826108398861271063ffffffff61100216565b9063ffffffff610fd416565b9050610857868263ffffffff610f8216565b95505b600285015461086f908763ffffffff610f8216565b60028601556010546108b2906108a3906402540be40090610897908a9063ffffffff610fd416565b9063ffffffff61100216565b6005549063ffffffff610f8216565b6005556108bd611025565b6011546108d190600163ffffffff610f8216565b601155505050505050565b6000600c5460001080156108f15750600c5442115b905090565b6108fe610d12565b151561090957600080fd5b600a541561091657600080fd5b6000881161092357600080fd5b6000871161093057600080fd5b6000861161093d57600080fd5b60048054600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523094810194909452519192600160a060020a03909116916370a08231916024808201926020929091908290030181600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b505050506040513d60208110156109d457600080fd5b5051146109e057600080fd5b6010879055600884905560098390556006889055610a04888663ffffffff610f8216565b600755600654610a1a908763ffffffff610f8216565b600a819055610a2f908363ffffffff610f8216565b600b55600a54610a45908263ffffffff610f8216565b600c555050505050505050565b60105481565b600a5481565b601554600d5414610a6e57600080fd5b610a766108dc565b1515610a8157600080fd5b610a89610d12565b1515610a9457600080fd5b6000821115610b1c57600254604080517f42966c68000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a03909216916342966c689160248082019260009290919082900301818387803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b505050505b6000811115610b6157600354604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610b5f573d6000803e3d6000fd5b505b5050565b6000600b5460001080156108f1575050600b54421190565b600f5481565b60006006546000108015610b9957504260065411155b80156108f1575050600a54151590565b600e5481565b610bb7610d51565b1515610bc257600080fd5b610bca610d12565b1515610bd557600080fd5b80821015610b6157610c09601583815481101515610bef57fe5b600091825260209091200154600160a060020a0316611075565b600190910190610bd5565b6000806000610c21611381565b610c2a85611266565b805160208201516040909201519097919650945092505050565b60136020526000908152604090205460ff1681565b610c61610d12565b1515610c6c57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60115481565b60065481565b60085481565b60045481565b6015805482908110610ce957fe5b600091825260209091200154600160a060020a0316905081565b600054600160a060020a031690565b600054600160a060020a0316331490565b60155490565b600060065442101580156108f157505060075442111590565b600354600160a060020a031681565b6000600a5460001080156108f1575050600a54421190565b601460205260009081526040902080546001820154600283015460039093015460ff8084169461010090940416929085565b60055481565b600c5481565b601254600160a060020a03163314610dbe57600080fd5b600160a060020a0381161515610dd357600080fd5b600160a060020a03166000908152601360205260409020805460ff19169055565b600d5481565b601254600160a060020a031681565b610e11610b65565b1515610e1c57600080fd5b610e2533611075565b565b60095481565b60006108f1610812601154600954610fd490919063ffffffff16565b60075481565b610e57610d12565b1515610e6257600080fd5b610e6b81611304565b50565b6000610e78610b65565b1515610e8357600080fd5b60018054810190819055600160a060020a0383161515610ea257600080fd5b3360009081526014602052604090208054909250610100900460ff161515610ec957600080fd5b6003820154600010610eda57600080fd5b6003820154604051600160a060020a0385169180156108fc02916000818181858888f1935050505015610f0f57600060038301555b6001548114610b5f57600080fd5b600b5481565b601254600160a060020a03163314610f3a57600080fd5b600160a060020a0381161515610f4f57600080fd5b600160a060020a03166000908152601360205260409020805460ff19166001179055565b600254600160a060020a031681565b600082820183811015610f9457600080fd5b8091505b5092915050565b600160a060020a031660009081526013602052604090205460ff1690565b60008083831115610fcd57600080fd5b5050900390565b600080831515610fe75760009150610f98565b50828202828482811515610ff757fe5b0414610f9457600080fd5b60008080831161101157600080fd5b828481151561101c57fe5b04949350505050565b60045460001061103157fe5b6005546004541061104d57670de0b6b3a7640000600e55610e25565b611070600554610897670de0b6b3a7640000600454610fd490919063ffffffff16565b600e55565b600061107f611381565b6000600160a060020a038416151561109657600080fd5b600160a060020a0384166000908152601460205260409020805490935060ff16806110c857508254610100900460ff16155b156110d257611260565b825460ff191660019081178455600d546110f19163ffffffff610f8216565b600d556110fd84611266565b915060008260200151118015611117575060008260400151115b1561125e576003546020830151604051600160a060020a039092169181156108fc0291906000818181858888f1935050505015801561115a573d6000803e3d6000fd5b5060025460408084015181517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820192909252915192169163a9059cbb916044808201926020929091908290030181600087803b1580156111ce57600080fd5b505af11580156111e2573d6000803e3d6000fd5b505050506040513d60208110156111f857600080fd5b5051151561120557600080fd5b6020820151825161121b9163ffffffff610fbd16565b9050600081111561125957604051600160a060020a0385169082156108fc029083906000818181858888f19350505050151561125957600383018190555b611260565bfe5b50505050565b61126e611381565b600160a060020a0382166000908152601460209081526040918290208251606081019093526001810154808452600e549193928301916112c291670de0b6b3a764000091610897919063ffffffff610fd416565b81526020016112fb6402540be400610897601054610839670de0b6b3a7640000610897600e548a60020154610fd490919063ffffffff16565b90529392505050565b600160a060020a038116151561131957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60606040519081016040528060008152602001600081526020016000815250905600a165627a7a723058205e3f1a5be5731817106d3b5659953ba385bd28bcdf4b57fe15600666781523030029000000000000000000000000df4d1b71aa4b8bb6814b2e5819844c3093a563490000000000000000000000003db6ba6ab6f95efed1a6e794cad492faaabf294d0000000000000000000000000000000000000000000000000019c1d62a9f200000000000000000000000000035c666ddefedfa19ea433f3b8e5e34428b223fc3",
  "constructorArguments": "000000000000000000000000df4d1b71aa4b8bb6814b2e5819844c3093a563490000000000000000000000003db6ba6ab6f95efed1a6e794cad492faaabf294d0000000000000000000000000000000000000000000000000019c1d62a9f200000000000000000000000000035c666ddefedfa19ea433f3b8e5e34428b223fc3"
}