{
  "address": "0x9d1cbf4ef833340120e721e5028c326ec1066c7e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DoubleEther",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-15\n*/\n\npragma solidity 0.5.1; /*\n\n\n___________________________________________________________________\n  _      _                                        ______           \n  |  |  /          /                                /              \n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n\n\n\n██████╗  ██████╗ ██╗   ██╗██████╗ ██╗     ███████╗    ███████╗████████╗██╗  ██╗███████╗██████╗ \n██╔══██╗██╔═══██╗██║   ██║██╔══██╗██║     ██╔════╝    ██╔════╝╚══██╔══╝██║  ██║██╔════╝██╔══██╗\n██║  ██║██║   ██║██║   ██║██████╔╝██║     █████╗      █████╗     ██║   ███████║█████╗  ██████╔╝\n██║  ██║██║   ██║██║   ██║██╔══██╗██║     ██╔══╝      ██╔══╝     ██║   ██╔══██║██╔══╝  ██╔══██╗\n██████╔╝╚██████╔╝╚██████╔╝██████╔╝███████╗███████╗    ███████╗   ██║   ██║  ██║███████╗██║  ██║\n╚═════╝  ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝╚══════╝    ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝\n                                                                                               \n                                                                                               \n// ----------------------------------------------------------------------------\n// 'Double Ether' Token contract with following features\n//      => ERC20 Compliance\n//      => Safeguard functionality \n//      => selfdestruct ability by owner\n//      => SafeMath implementation \n//      => Burnable and no minting\n//\n// Name        : Double Ether\n// Symbol      : DET\n// Total supply: 100,000,000 (100 Million)\n// Decimals    : 18\n//\n// Copyright (c) 2018 Deteth Inc. ( https://deteth.com )\n// Contract designed by EtherAuthority ( https://EtherAuthority.io )\n// ----------------------------------------------------------------------------\n  \n*/ \n\n//*******************************************************************//\n//------------------------ SafeMath Library -------------------------//\n//*******************************************************************//\n    /**\n     * @title SafeMath\n     * @dev Math operations with safety checks that throw on error\n     */\n    library SafeMath {\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n      }\n    \n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n      }\n    \n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n      }\n    \n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n      }\n    }\n\n\n//*******************************************************************//\n//------------------ Contract to Manage Ownership -------------------//\n//*******************************************************************//\n    \n    contract owned {\n        address payable public owner;\n        \n         constructor () public {\n            owner = msg.sender;\n        }\n    \n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n    \n        function transferOwnership(address payable newOwner) onlyOwner public {\n            owner = newOwner;\n        }\n    }\n    \n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata  _extraData) external; }\n\n\n//***************************************************************//\n//------------------ ERC20 Standard Template -------------------//\n//***************************************************************//\n    \n    contract TokenERC20 {\n        // Public variables of the token\n        using SafeMath for uint256;\n        string public name;\n        string public symbol;\n        uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n        uint256 public totalSupply;\n        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n    \n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n    \n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint256 value);\n    \n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint256 value);\n    \n        /**\n         * Constrctor function\n         *\n         * Initializes contract with initial supply tokens to the creator of the contract\n         */\n        constructor (\n            uint256 initialSupply,\n            string memory tokenName,\n            string memory tokenSymbol\n        ) public {\n            \n            totalSupply = initialSupply * 1 ether;      // Update total supply with the decimal amount\n            uint256 halfTotalSupply = totalSupply / 2;  // Half of the totalSupply\n            \n            balanceOf[msg.sender] = halfTotalSupply;    // 50 Million tokens sent to owner\n            balanceOf[address(this)] = halfTotalSupply; // 50 Million tokens sent to smart contract\n            name = tokenName;                           // Set the name for display purposes\n            symbol = tokenSymbol;                       // Set the symbol for display purposes\n            \n            emit Transfer(address(0x0), msg.sender, halfTotalSupply);   // Transfer event\n            emit Transfer(address(0x0), address(this), halfTotalSupply);// Transfer event\n        }\n    \n        /**\n         * Internal transfer, only can be called by this contract\n         */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != address(0x0));\n            // Check if the sender has enough\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n            // Subtract from the sender\n            balanceOf[_from] = balanceOf[_from].sub(_value);\n            // Add the same to the recipient\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            emit Transfer(_from, _to, _value);\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n        }\n    \n        /**\n         * Transfer tokens\n         *\n         * Send `_value` tokens to `_to` from your account\n         *\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transfer(address _to, uint256 _value) public returns (bool success) {\n            _transfer(msg.sender, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Transfer tokens from other address\n         *\n         * Send `_value` tokens to `_to` in behalf of `_from`\n         *\n         * @param _from The address of the sender\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n            _transfer(_from, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         */\n        function approve(address _spender, uint256 _value) public\n            returns (bool success) {\n            require(!safeguard);\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address and notify\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         * @param _extraData some extra information to send to the approved contract\n         */\n        function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n            public\n            returns (bool success) {\n            require(!safeguard);\n            tokenRecipient spender = tokenRecipient(_spender);\n            if (approve(_spender, _value)) {\n                spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n                return true;\n            }\n        }\n    \n        /**\n         * Destroy tokens\n         *\n         * Remove `_value` tokens from the system irreversibly\n         *\n         * @param _value the amount of money to burn\n         */\n        function burn(uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n            emit Burn(msg.sender, _value);\n            return true;\n        }\n    \n        /**\n         * Destroy tokens from other account\n         *\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n         *\n         * @param _from the address of the sender\n         * @param _value the amount of money to burn\n         */\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n            emit  Burn(_from, _value);\n            return true;\n        }\n        \n    }\n    \n//*******************************************************************************//\n//---------------------  DOUBLE ETHER MAIN CODE STARTS HERE ---------------------//\n//*******************************************************************************//\n    \n    contract DoubleEther is owned, TokenERC20 {\n        \n        \n        /********************************/\n        /* Code for the ERC20 DET Token */\n        /********************************/\n    \n        /* Public variables of the token */\n        string internal tokenName = \"Double Ether\";\n        string internal tokenSymbol = \"DET\";\n        uint256 internal initialSupply = 100000000;  //100 Million\n        \n        \n        /* Records for the fronzen accounts */\n        mapping (address => bool) public frozenAccount;\n        \n        /* This generates a public event on the blockchain that will notify clients */\n        event FrozenFunds(address target, bool frozen);\n    \n        /* Initializes contract with initial supply tokens to the creator of the contract */\n        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n        /* Internal transfer, only can be called by this contract */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            require (_to != address(0x0));                      // Prevent transfer to 0x0 address. Use burn() instead\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n            emit Transfer(_from, _to, _value);\n        }\n        \n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n        /// @param target Address to be frozen\n        /// @param freeze either to freeze it or not\n        function freezeAccount(address target, bool freeze) onlyOwner public {\n                frozenAccount[target] = freeze;\n            emit  FrozenFunds(target, freeze);\n        }\n        \n        /**\n         * Change safeguard status on or off\n         *\n         * When safeguard is true, then all the non-owner functions will stop working.\n         * When safeguard is false, then all the functions will resume working back again!\n         */\n        function changeSafeguardStatus() onlyOwner public{\n            if (safeguard == false){\n                safeguard = true;\n            }\n            else{\n                safeguard = false;    \n            }\n        }\n\n\n\n        /*******************************************/\n        /* Code for the Double Ether Functionality */\n        /*******************************************/\n\n        \n        uint256 public returnPercentage = 150;  // 150% return, which is 1.5 times the amount deposited \n        uint256 public additionalFund = 0;\n        address payable[] public winnerQueueAddresses;\n        uint256[] public winnerQueueAmount;\n        \n        // This will log for all the deposits made by users\n        event Deposit(address indexed depositor, uint256 depositAmount);\n        \n        // This will log for any ether paid to users\n        event RewardPaid(address indexed rewardPayee, uint256 rewardAmount);\n        \n        function showPeopleInQueue() public view returns(uint256) {\n            return winnerQueueAmount.length;\n        }\n        \n        //@dev fallback function, which accepts ether\n        function () payable external {\n            require(!safeguard);\n            require(!frozenAccount[msg.sender]);\n            require(msg.value >= 0.5 ether);\n            \n            //If users send more than 3 ether, then it will consider only 3 ether, and rest goes to owner as service fee\n            uint256 _depositedEther;\n            if(msg.value >= 3 ether){\n                _depositedEther = 3 ether;\n                additionalFund += msg.value - 3 ether; \n            }\n            else{\n                _depositedEther = msg.value;\n            }\n            \n            \n            //following loop will send reward to one or more addresses\n            uint256 TotalPeopleInQueue = winnerQueueAmount.length;\n            for(uint256 index = 0; index < TotalPeopleInQueue; index++){\n                \n                if(winnerQueueAmount[0] <= (address(this).balance - additionalFund) ){\n                    \n                    //transfer the ether and token to leader / first position\n                    winnerQueueAddresses[0].transfer(winnerQueueAmount[0]);\n                    _transfer(address(this), winnerQueueAddresses[0], winnerQueueAmount[0]*100/returnPercentage);\n                    \n                    //this will shift one index up in both arrays, removing the person who is paid\n                    for (uint256 i = 0; i<winnerQueueAmount.length-1; i++){\n                        winnerQueueAmount[i] = winnerQueueAmount[i+1];\n                        winnerQueueAddresses[i] = winnerQueueAddresses[i+1];\n                    }\n                    winnerQueueAmount.length--;\n                    winnerQueueAddresses.length--;\n                }\n                else{\n                    //because there is not enough ether in contract to pay for leader, so break.\n                    break;\n                }\n            }\n            \n            //Putting depositor in the queue\n            winnerQueueAddresses.push(msg.sender); \n            winnerQueueAmount.push(_depositedEther * returnPercentage / 100);\n            emit Deposit(msg.sender, msg.value);\n        }\n\n    \n\n        //Just in rare case, owner wants to transfer Ether from contract to owner address.Like owner decided to destruct this contract.\n        function manualWithdrawEtherAll() onlyOwner public{\n            address(owner).transfer(address(this).balance);\n        }\n        \n        //It is useful when owner wants to transfer additionalFund, which is fund sent by users more than 3 ether, or after removing any stuck address.\n        function manualWithdrawEtherAdditionalOnly() onlyOwner public{\n            additionalFund = 0;\n            address(owner).transfer(additionalFund);\n        }\n        \n        //Just in rare case, owner wants to transfer Tokens from contract to owner address\n        function manualWithdrawTokens(uint tokenAmount) onlyOwner public{\n            //no need to validate the input amount as transfer function automatically throws for invalid amounts\n            _transfer(address(this), address(owner), tokenAmount);\n        }\n        \n        //selfdestruct function. just in case owner decided to destruct this contract.\n        function destructContract()onlyOwner public{\n            selfdestruct(owner);\n        }\n        \n        //To remove any stuck address and un-stuck the queue. \n        //This often happen if user have put contract address, and contract does not receive ether.\n        function removeAddressFromQueue(uint256 index) onlyOwner public {\n            require(index <= winnerQueueAmount.length);\n            additionalFund +=  winnerQueueAmount[index];\n            //this will shift one index up in both arrays, removing the address owner specified\n            for (uint256 i = index; i<winnerQueueAmount.length-1; i++){\n                winnerQueueAmount[i] = winnerQueueAmount[i+1];\n                winnerQueueAddresses[i] = winnerQueueAddresses[i+1];\n            }\n            winnerQueueAmount.length--;\n            winnerQueueAddresses.length--;\n        } \n\n        /**\n         * This function removes the 35 queues. And restart the game again.\n         * Those people who did not get the ETH will recieve tokens multiplied by 200\n         * Which is: Ether amount * 200 tokens\n         *\n         * \n         * Ether will remained in the contract will be used toward the next round\n         */\n        function restartTheQueue() onlyOwner public {\n            //To become more gas cost effective, we want to process it differently when addresses are more or less than 35\n            uint256 arrayLength = winnerQueueAmount.length;\n            if(arrayLength < 35){\n                //if addresses are less than 35 then we will just loop through it and send tokens\n                for(uint256 i = 0; i < arrayLength; i++){\n                    _transfer(address(this), winnerQueueAddresses[i], winnerQueueAmount[i]*200*100/returnPercentage);\n                }\n                //then empty the array, and so the game will begin fresh\n                winnerQueueAddresses = new address payable[](0);\n                winnerQueueAmount = new uint256[](0);\n            }\n            else{\n                //if there are more than 35 addresses, then we will process it differently\n                //sending tokens to first 35 addresses\n                for(uint256 i = 0; i < 35; i++){\n                    //doing token transfer\n                    _transfer(address(this), winnerQueueAddresses[i], winnerQueueAmount[i]*200*100/returnPercentage);\n                    \n                    //shifting index one by one\n                    for (uint256 j = 0; j<arrayLength-i-1; j++){\n                        winnerQueueAmount[j] = winnerQueueAmount[j+1];\n                        winnerQueueAddresses[j] = winnerQueueAddresses[j+1];\n                    }\n                }\n                //removing total array length by 35\n                winnerQueueAmount.length -= 35;\n                winnerQueueAddresses.length -= 35;\n            }\n        }\n\n}",
  "bytecode": "6003805460ff1990811660121790915560058054909116905560c0604052600c60808190527f446f75626c65204574686572000000000000000000000000000000000000000060a0908152620000599160089190620002af565b506040805180820190915260038082527f44455400000000000000000000000000000000000000000000000000000000006020909201918252620000a091600991620002af565b506305f5e100600a556096600c556000600d55348015620000c057600080fd5b50600a546008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200014e5780601f1062000122576101008083540402835291602001916200014e565b820191906000526020600020905b8154815290600101906020018083116200013057829003601f168201915b505060098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815295509193509150830182828015620001e05780601f10620001b457610100808354040283529160200191620001e0565b820191906000526020600020905b815481529060010190602001808311620001c257829003601f168201915b505060008054600160a060020a031916339081178255670de0b6b3a76400008802600481905590825260066020908152604080842060029093049283905530845290922081905586519094506200024093506001925090860190620002af565b50815162000256906002906020850190620002af565b50604080518281529051339160009160008051602062001b258339815191529181900360200190a3604080518281529051309160009160008051602062001b258339815191529181900360200190a35050505062000354565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002f257805160ff191683800117855562000322565b8280016001018555821562000322579182015b828111156200032257825182559160200191906001019062000305565b506200033092915062000334565b5090565b6200035191905b808211156200033057600081556001016200033b565b90565b6117c180620003646000396000f3fe60806040526004361061016e577c0100000000000000000000000000000000000000000000000000000000600035046306fdde038114610490578063095ea7b31461051a5780630c8209b6146105675780630ce96e711461057e57806318160ddd146105a857806323b872dd146105cf578063313ce56714610612578063423823531461063d57806342966c68146106525780634bec83351461067c5780635aed37ef1461069157806370a08231146106a657806379cc6790146106d957806383ec0bd2146107125780638da5cb5b146107275780639499e0181461075857806395d89b411461076d578063a8f6d84d14610782578063a9059cbb14610797578063b414d4b6146107d0578063b57dbdc614610803578063b8e0775f14610818578063bd1edf8114610842578063cae9ca5114610857578063cb5d494e1461091f578063dd62ed3e14610949578063e724529c14610984578063f2fde38b146109bf578063fbde8d75146109f2575b60055460ff161561017e57600080fd5b336000908152600b602052604090205460ff161561019b57600080fd5b6706f05b59d3b200003410156101b057600080fd5b60006729a2241af62c000034106101e35750600d805434016729a2241af62bffff190190556729a2241af62c00006101e6565b50345b600f5460005b818110156103d957600d5430600160a060020a03163103600f600081548110151561021357fe5b90600052602060002001541115156103cc57600e8054600090811061023457fe5b6000918252602082200154600f8054600160a060020a03909216926108fc92811061025b57fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015610291573d6000803e3d6000fd5b506102ee30600e60008154811015156102a657fe5b6000918252602082200154600c54600f8054600160a060020a0390931693919290919081106102d157fe5b90600052602060002001546064028115156102e857fe5b04610a1c565b60005b600f546000190181101561039e57600f80546001830190811061031057fe5b9060005260206000200154600f8281548110151561032a57fe5b600091825260209091200155600e80546001830190811061034757fe5b600091825260209091200154600e8054600160a060020a03909216918390811061036d57fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556001016102f1565b50600f8054906103b2906000198301611686565b50600e8054906103c6906000198301611686565b506103d1565b6103d9565b6001016101ec565b50600e805460018082019092557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01805433600160a060020a03199091168117909155600c54600f805493840181556000526064908502047f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802909201919091556040805134815290517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9181900360200190a25050005b34801561049c57600080fd5b506104a5610ba0565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104df5781810151838201526020016104c7565b50505050905090810190601f16801561050c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052657600080fd5b506105536004803603604081101561053d57600080fd5b50600160a060020a038135169060200135610c2d565b604080519115158252519081900360200190f35b34801561057357600080fd5b5061057c610c6e565b005b34801561058a57600080fd5b5061057c600480360360208110156105a157600080fd5b5035610cc3565b3480156105b457600080fd5b506105bd610de7565b60408051918252519081900360200190f35b3480156105db57600080fd5b50610553600480360360608110156105f257600080fd5b50600160a060020a03813581169160208101359091169060400135610ded565b34801561061e57600080fd5b50610627610e9e565b6040805160ff9092168252519081900360200190f35b34801561064957600080fd5b5061057c610ea7565b34801561065e57600080fd5b506105536004803603602081101561067557600080fd5b5035611074565b34801561068857600080fd5b5061057c611127565b34801561069d57600080fd5b5061057c611169565b3480156106b257600080fd5b506105bd600480360360208110156106c957600080fd5b5035600160a060020a03166111ba565b3480156106e557600080fd5b50610553600480360360408110156106fc57600080fd5b50600160a060020a0381351690602001356111cc565b34801561071e57600080fd5b506105bd61131c565b34801561073357600080fd5b5061073c611323565b60408051600160a060020a039092168252519081900360200190f35b34801561076457600080fd5b5061057c611332565b34801561077957600080fd5b506104a5611357565b34801561078e57600080fd5b506105bd6113af565b3480156107a357600080fd5b50610553600480360360408110156107ba57600080fd5b50600160a060020a0381351690602001356113b5565b3480156107dc57600080fd5b50610553600480360360208110156107f357600080fd5b5035600160a060020a03166113cb565b34801561080f57600080fd5b506105536113e0565b34801561082457600080fd5b506105bd6004803603602081101561083b57600080fd5b50356113e9565b34801561084e57600080fd5b506105bd611408565b34801561086357600080fd5b506105536004803603606081101561087a57600080fd5b600160a060020a03823516916020810135918101906060810160408201356401000000008111156108aa57600080fd5b8201836020820111156108bc57600080fd5b803590602001918460018302840111640100000000831117156108de57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061140e945050505050565b34801561092b57600080fd5b5061073c6004803603602081101561094257600080fd5b503561153d565b34801561095557600080fd5b506105bd6004803603604081101561096c57600080fd5b50600160a060020a0381358116916020013516611565565b34801561099057600080fd5b5061057c600480360360408110156109a757600080fd5b50600160a060020a0381351690602001351515611582565b3480156109cb57600080fd5b5061057c600480360360208110156109e257600080fd5b5035600160a060020a03166115fd565b3480156109fe57600080fd5b5061057c60048036036020811015610a1557600080fd5b5035611636565b60055460ff1615610a2c57600080fd5b600160a060020a0382161515610a4157600080fd5b600160a060020a038316600090815260066020526040902054811115610a6657600080fd5b600160a060020a038216600090815260066020526040902054610a8f818363ffffffff61166516565b1015610a9a57600080fd5b600160a060020a0383166000908152600b602052604090205460ff1615610ac057600080fd5b600160a060020a0382166000908152600b602052604090205460ff1615610ae657600080fd5b600160a060020a038316600090815260066020526040902054610b0f908263ffffffff61167416565b600160a060020a038085166000908152600660205260408082209390935590841681522054610b44908263ffffffff61166516565b600160a060020a0380841660008181526006602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c255780601f10610bfa57610100808354040283529160200191610c25565b820191906000526020600020905b815481529060010190602001808311610c0857829003601f168201915b505050505081565b60055460009060ff1615610c4057600080fd5b50336000908152600760209081526040808320600160a060020a039590951683529390529190912055600190565b600054600160a060020a03163314610c8557600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610cc0573d6000803e3d6000fd5b50565b600054600160a060020a03163314610cda57600080fd5b600f54811115610ce957600080fd5b600f805482908110610cf757fe5b600091825260209091200154600d80549091019055805b600f5460001901811015610dbb57600f805460018301908110610d2d57fe5b9060005260206000200154600f82815481101515610d4757fe5b600091825260209091200155600e805460018301908110610d6457fe5b600091825260209091200154600e8054600160a060020a039092169183908110610d8a57fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600101610d0e565b50600f805490610dcf906000198301611686565b50600e805490610de3906000198301611686565b5050565b60045481565b60055460009060ff1615610e0057600080fd5b600160a060020a0384166000908152600760209081526040808320338452909152902054821115610e3057600080fd5b600160a060020a0384166000908152600760209081526040808320338452909152902054610e64908363ffffffff61167416565b600160a060020a0385166000908152600760209081526040808320338452909152902055610e93848484610a1c565b5060015b9392505050565b60035460ff1681565b600054600160a060020a03163314610ebe57600080fd5b600f546023811015610f755760005b81811015610f3357610f2b30600e83815481101515610ee857fe5b600091825260209091200154600c54600f8054600160a060020a039093169286908110610f1157fe5b906000526020600020015460c8026064028115156102e857fe5b600101610ecd565b506040805160008152602081019182905251610f5191600e916116af565b506040805160008152602081019182905251610f6f91600f91611714565b50610cc0565b60005b602381101561104c57610f9430600e83815481101515610ee857fe5b60005b60018284030381101561104357600f805460018301908110610fb557fe5b9060005260206000200154600f82815481101515610fcf57fe5b600091825260209091200155600e805460018301908110610fec57fe5b600091825260209091200154600e8054600160a060020a03909216918390811061101257fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600101610f97565b50600101610f78565b50600f805460221901906110609082611686565b50600e80546022190190610de39082611686565b60055460009060ff161561108757600080fd5b336000908152600660205260409020548211156110a357600080fd5b336000908152600660205260409020546110c3908363ffffffff61167416565b336000908152600660205260409020556004546110e6908363ffffffff61167416565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600054600160a060020a0316331461113e57600080fd5b60055460ff16151561115c576005805460ff19166001179055611167565b6005805460ff191690555b565b600054600160a060020a0316331461118057600080fd5b6000600d8190558054604051600160a060020a03909116916108fc9181818181818888f19350505050158015610cc0573d6000803e3d6000fd5b60066020526000908152604090205481565b60055460009060ff16156111df57600080fd5b600160a060020a03831660009081526006602052604090205482111561120457600080fd5b600160a060020a038316600090815260076020908152604080832033845290915290205482111561123457600080fd5b600160a060020a03831660009081526006602052604090205461125d908363ffffffff61167416565b600160a060020a038416600090815260066020908152604080832093909355600781528282203383529052205461129a908363ffffffff61167416565b600160a060020a03841660009081526007602090815260408083203384529091529020556004546112d1908363ffffffff61167416565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600f545b90565b600054600160a060020a031681565b600054600160a060020a0316331461134957600080fd5b600054600160a060020a0316ff5b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610c255780601f10610bfa57610100808354040283529160200191610c25565b600c5481565b60006113c2338484610a1c565b50600192915050565b600b6020526000908152604090205460ff1681565b60055460ff1681565b600f8054829081106113f757fe5b600091825260209091200154905081565b600d5481565b60055460009060ff161561142157600080fd5b8361142c8185610c2d565b15611535576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156114c45781810151838201526020016114ac565b50505050905090810190601f1680156114f15780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b505050506001915050610e97565b509392505050565b600e80548290811061154b57fe5b600091825260209091200154600160a060020a0316905081565b600760209081526000928352604080842090915290825290205481565b600054600160a060020a0316331461159957600080fd5b600160a060020a0382166000818152600b6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a0316331461161457600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a0316331461164d57600080fd5b600054610cc0903090600160a060020a031683610a1c565b600082820183811015610e9757fe5b60008282111561168057fe5b50900390565b8154818355818111156116aa576000838152602090206116aa918101908301611757565b505050565b828054828255906000526020600020908101928215611704579160200282015b828111156117045782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906116cf565b50611710929150611771565b5090565b82805482825590600052602060002090810192821561174f579160200282015b8281111561174f578251825591602001919060010190611734565b506117109291505b61132091905b80821115611710576000815560010161175d565b61132091905b80821115611710578054600160a060020a031916815560010161177756fea165627a7a723058204183859ea200782d6519956f47a3f1ea24bcb9f1856b0cdc52942e76639e860f0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}