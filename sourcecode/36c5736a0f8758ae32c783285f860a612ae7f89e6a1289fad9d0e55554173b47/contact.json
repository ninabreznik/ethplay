{
  "address": "0x0407b4c4eaed35ce3c5b852bdfa1640b09eeedf4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BlockWRK Token",
  "contractName": "BlockWRKICO",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-14\n*/\n\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\npragma solidity 0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts\\ERC865Basic.sol\n\n/**\n * @title ERC865Basic\n * @dev Simpler version of the ERC865 interface from https://github.com/adilharis2001/ERC865Demo\n * @author jsdavis28\n * @notice ERC865Token allows for users to pay gas costs to a delegate in an ERC20 token\n * https://github.com/ethereum/EIPs/issues/865\n */\n contract ERC865Basic is ERC20 {\n     function _transferPreSigned(\n         bytes _signature,\n         address _from,\n         address _to,\n         uint256 _value,\n         uint256 _fee,\n         uint256 _nonce\n     )\n        internal;\n\n     event TransferPreSigned(\n         address indexed delegate,\n         address indexed from,\n         address indexed to,\n         uint256 value);\n}\n\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts\\ERC865BasicToken.sol\n\n/**\n * @title ERC865BasicToken\n * @dev Simpler version of the ERC865 token from https://github.com/adilharis2001/ERC865Demo\n * @author jsdavis28\n * @notice ERC865Token allows for users to pay gas costs to a delegate in an ERC20 token\n * https://github.com/ethereum/EIPs/issues/865\n */\n\n contract ERC865BasicToken is ERC865Basic, StandardToken {\n    /**\n     * @dev Sets internal variables for contract\n     */\n    address internal feeAccount;\n    mapping(bytes => bool) internal signatures;\n\n    /**\n     * @dev Allows a delegate to submit a transaction on behalf of the token holder.\n     * @param _signature The signature, issued by the token holder.\n     * @param _to The recipient's address.\n     * @param _value The amount of tokens to be transferred.\n     * @param _fee The amount of tokens paid to the delegate for gas costs.\n     * @param _nonce The transaction number.\n     */\n    function _transferPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        internal\n    {\n        //Pre-validate transaction\n        require(_to != address(0));\n        require(signatures[_signature] == false);\n\n        //Create a hash of the transaction details\n        bytes32 hashedTx = _transferPreSignedHashing(_to, _value, _fee, _nonce);\n\n        //Obtain the token holder's address and check balance\n        address from = _recover(hashedTx, _signature);\n        require(from == _from);\n        uint256 total = _value.add(_fee);\n        require(total <= balances[from]);\n\n        //Transfer tokens\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[feeAccount] = balances[feeAccount].add(_fee);\n\n        //Mark transaction as completed\n        signatures[_signature] = true;\n\n        //TransferPreSigned ERC865 events\n        emit TransferPreSigned(msg.sender, from, _to, _value);\n        emit TransferPreSigned(msg.sender, from, feeAccount, _fee);\n        \n        //Transfer ERC20 events\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, feeAccount, _fee);\n    }\n\n    /**\n     * @dev Creates a hash of the transaction information passed to transferPresigned.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     * @return A copy of the hashed message signed by the token holder, with prefix added.\n     */\n    function _transferPreSignedHashing(\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        internal pure\n        returns (bytes32)\n    {\n        //Create a copy of the hashed message signed by the token holder\n        bytes32 hash = keccak256(abi.encodePacked(_to, _value, _fee,_nonce));\n\n        //Add prefix to hash\n        return _prefix(hash);\n    }\n\n    /**\n     * @dev Adds prefix to the hashed message signed by the token holder.\n     * @param _hash The hashed message (keccak256) to be prefixed.\n     * @return Prefixed hashed message to return from _transferPreSignedHashing.\n     */\n    function _prefix(bytes32 _hash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash));\n    }\n\n    /**\n     * @dev Validate the transaction information and recover the token holder's address.\n     * @param _hash A prefixed version of the hash used in the original signed message.\n     * @param _sig The signature submitted by the token holder.\n     * @return The token holder/transaction signer's address.\n     */\n    function _recover(bytes32 _hash, bytes _sig) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        //Check the signature length\n        if (_sig.length != 65) {\n            return (address(0));\n        }\n\n        //Split the signature into r, s and v variables\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            v := byte(0, mload(add(_sig, 96)))\n        }\n\n        //Version of signature should be 27 or 28, but 0 and 1 are also possible\n        if (v < 27) {\n            v += 27;\n        }\n\n        //If the version is correct, return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(_hash, v, r, s);\n        }\n    }\n}\n\n// File: contracts\\TaxedToken.sol\n\n/**\n * @title Taxed token\n * @dev Version of BasicToken that allows for a fee on token transfers.\n * See https://github.com/OpenZeppelin/openzeppelin-solidity/pull/788\n * @author jsdavis28\n */\ncontract TaxedToken is ERC865BasicToken {\n    /**\n     * @dev Sets taxRate fee as public\n     */\n    uint8 public taxRate;\n\n    /**\n     * @dev Transfer tokens to a specified account after diverting a fee to a central account.\n     * @param _to The receiving address.\n     * @param _value The number of tokens to transfer.\n     */\n    function transfer(\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        uint256 fee = _value.mul(taxRate).div(100);\n        uint256 taxedValue = _value.sub(fee);\n\n        balances[_to] = balances[_to].add(taxedValue);\n        emit Transfer(msg.sender, _to, taxedValue);\n        balances[feeAccount] = balances[feeAccount].add(fee);\n        emit Transfer(msg.sender, feeAccount, fee);\n\n        return true;\n    }\n\n    /**\n     * @dev Provides a taxed transfer on StandardToken's transferFrom() function\n     * @param _from The address providing allowance to spend\n     * @param _to The receiving address.\n     * @param _value The number of tokens to transfer.\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        uint256 fee = _value.mul(taxRate).div(100);\n        uint256 taxedValue = _value.sub(fee);\n\n        balances[_to] = balances[_to].add(taxedValue);\n        emit Transfer(_from, _to, taxedValue);\n        balances[feeAccount] = balances[feeAccount].add(fee);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, feeAccount, fee);\n\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts\\Authorizable.sol\n\n/**\n * @title Authorizable\n * @dev The Authorizable contract allows the owner to set a number of additional\n *  acccounts with limited administrative privileges to simplify user permissions.\n * Only the contract owner can add or remove authorized accounts.\n * @author jsdavis28\n */\ncontract Authorizable is Ownable {\n    using SafeMath for uint256;\n\n    address[] public authorized;\n    mapping(address => bool) internal authorizedIndex;\n    uint8 public numAuthorized;\n\n    /**\n     * @dev The Authorizable constructor sets the owner as authorized\n     */\n    constructor() public {\n        authorized.length = 2;\n        authorized[1] = msg.sender;\n        authorizedIndex[msg.sender] = true;\n        numAuthorized = 1;\n    }\n\n    /**\n     * @dev Throws if called by any account other than an authorized account.\n     */\n    modifier onlyAuthorized {\n        require(isAuthorized(msg.sender));\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to add an authorized account.\n     * @param _account The address being added as authorized.\n     */\n    function addAuthorized(address _account) public onlyOwner {\n        if (authorizedIndex[_account] == false) {\n        \tauthorizedIndex[_account] = true;\n        \tauthorized.length++;\n        \tauthorized[authorized.length.sub(1)] = _account;\n        \tnumAuthorized++;\n        }\n    }\n\n    /**\n     * @dev Validates whether an account is authorized for enhanced permissions.\n     * @param _account The address being evaluated.\n     */\n    function isAuthorized(address _account) public constant returns (bool) {\n        if (authorizedIndex[_account] == true) {\n        \treturn true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Allows the current owner to remove an authorized account.\n     * @param _account The address to remove from authorized.\n     */\n    function removeAuthorized(address _account) public onlyOwner {\n        require(isAuthorized(_account)); \n        authorizedIndex[_account] = false;\n        numAuthorized--;\n    }\n}\n\n// File: contracts\\BlockWRKToken.sol\n\n/**\n * @title BlockWRKToken\n * @dev BlockWRKToken contains administrative features that allow the BlockWRK\n *  application to interface with the BlockWRK token, an ERC20-compliant token\n *  that integrates taxed token and ERC865 functionality.\n * @author jsdavis28\n */\n\ncontract BlockWRKToken is TaxedToken, Authorizable {\n    /**\n     * @dev Sets token information.\n     */\n    string public name = \"BlockWRK\";\n    string public symbol = \"WRK\";\n    uint8 public decimals = 4;\n    uint256 public INITIAL_SUPPLY;\n\n    /**\n     * @dev Sets public variables for BlockWRK token.\n     */\n    address public distributionPoolWallet;\n    address public inAppPurchaseWallet;\n    address public reservedTokenWallet;\n    uint256 public premineDistributionPool;\n    uint256 public premineReserved;\n\n    /**\n     * @dev Sets private variables for custom token functions.\n     */\n    uint256 internal decimalValue = 10000;\n\n    constructor() public {\n        feeAccount = 0xeCced56A201d1A6D1Da31A060868F96ACdba99B3;\n        distributionPoolWallet = 0xAB3Edd46E9D52e1b3131757e1Ed87FA885f48019;\n        inAppPurchaseWallet = 0x97eae8151487e054112E27D8c2eE5f17B3C6A83c;\n        reservedTokenWallet = 0xd6E4E287a4aE2E9d8BF7f0323f440acC0d5AD301;\n        premineDistributionPool = decimalValue.mul(5600000000);\n        premineReserved = decimalValue.mul(2000000000);\n        INITIAL_SUPPLY = premineDistributionPool.add(premineReserved);\n        balances[distributionPoolWallet] = premineDistributionPool;\n        emit Transfer(address(this), distributionPoolWallet, premineDistributionPool);\n        balances[reservedTokenWallet] = premineReserved;\n        emit Transfer(address(this), reservedTokenWallet, premineReserved);\n        totalSupply_ = INITIAL_SUPPLY;\n        taxRate = 2;\n    }\n\n    /**\n     * @dev Allows App to distribute WRK tokens to users.\n     * This function will be called by authorized from within the App.\n     * @param _to The recipient's BlockWRK address.\n     * @param _value The amount of WRK to transfer.\n     */\n    function inAppTokenDistribution(\n        address _to,\n        uint256 _value\n    )\n        public\n        onlyAuthorized\n    {\n        require(_value <= balances[distributionPoolWallet]);\n        require(_to != address(0));\n\n        balances[distributionPoolWallet] = balances[distributionPoolWallet].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(distributionPoolWallet, _to, _value);\n    }\n\n    /**\n     * @dev Allows App to process fiat payments for WRK tokens, charging a fee in WRK.\n     * This function will be called by authorized from within the App.\n     * @param _to The buyer's BlockWRK address.\n     * @param _value The amount of WRK to transfer.\n     * @param _fee The fee charged in WRK for token purchase.\n     */\n    function inAppTokenPurchase(\n        address _to,\n        uint256 _value,\n        uint256 _fee\n    )\n        public\n        onlyAuthorized\n    {\n        require(_value <= balances[inAppPurchaseWallet]);\n        require(_to != address(0));\n\n        balances[inAppPurchaseWallet] = balances[inAppPurchaseWallet].sub(_value);\n        uint256 netAmount = _value.sub(_fee);\n        balances[_to] = balances[_to].add(netAmount);\n        emit Transfer(inAppPurchaseWallet, _to, netAmount);\n        balances[feeAccount] = balances[feeAccount].add(_fee);\n        emit Transfer(inAppPurchaseWallet, feeAccount, _fee);\n    }\n\n    /**\n     * @dev Allows owner to set the percentage fee charged by TaxedToken on external transfers.\n     * @param _newRate The amount to be set.\n     */\n    function setTaxRate(uint8 _newRate) public onlyOwner {\n        taxRate = _newRate;\n    }\n\n    /**\n     * @dev Allows owner to set the fee account to receive transfer fees.\n     * @param _newAddress The address to be set.\n     */\n    function setFeeAccount(address _newAddress) public onlyOwner {\n        require(_newAddress != address(0));\n        feeAccount = _newAddress;\n    }\n\n    /**\n     * @dev Allows owner to set the wallet that holds WRK for sale via in-app purchases with fiat.\n     * @param _newAddress The address to be set.\n     */\n    function setInAppPurchaseWallet(address _newAddress) public onlyOwner {\n        require(_newAddress != address(0));\n        inAppPurchaseWallet = _newAddress;\n    }\n\n    /**\n     * @dev Allows authorized to act as a delegate to transfer a pre-signed transaction for ERC865\n     * @param _signature The pre-signed message.\n     * @param _from The token sender.\n     * @param _to The token recipient.\n     * @param _value The amount of WRK to send the recipient.\n     * @param _fee The fee to be paid in WRK (calculated by App off-chain).\n     * @param _nonce The transaction number (stored in App off-chain).\n     */\n    function transactionHandler(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        onlyAuthorized\n    {\n        _transferPreSigned(_signature, _from, _to, _value, _fee, _nonce);\n    }\n}\n\n// File: contracts\\BlockWRKICO.sol\n\n/**\n * @title BlockWRKICO\n * @notice This contract manages the sale of WRK tokens for the BlockWRK ICO.\n * @dev This contract incorporates elements of OpenZeppelin crowdsale contracts with some modifications.\n * @author jsdavis28\n */\n contract BlockWRKICO is BlockWRKToken {\n    /**\n     * @dev Sets public variables for BlockWRK ICO\n     */\n    address public salesWallet;\n    uint256 public cap;\n    uint256 public closingTime;\n    uint256 public currentTierRate;\n    uint256 public openingTime;\n    uint256 public weiRaised;\n\n    /**\n     * @dev Sets private variables for custom token functions.\n     */\n     uint256 internal availableInCurrentTier;\n     uint256 internal availableInSale;\n     uint256 internal totalPremineVolume;\n     uint256 internal totalSaleVolume;\n     uint256 internal totalTokenVolume;\n     uint256 internal tier1Rate;\n     uint256 internal tier2Rate;\n     uint256 internal tier3Rate;\n     uint256 internal tier4Rate;\n     uint256 internal tier5Rate;\n     uint256 internal tier6Rate;\n     uint256 internal tier7Rate;\n     uint256 internal tier8Rate;\n     uint256 internal tier9Rate;\n     uint256 internal tier10Rate;\n     uint256 internal tier1Volume;\n     uint256 internal tier2Volume;\n     uint256 internal tier3Volume;\n     uint256 internal tier4Volume;\n     uint256 internal tier5Volume;\n     uint256 internal tier6Volume;\n     uint256 internal tier7Volume;\n     uint256 internal tier8Volume;\n     uint256 internal tier9Volume;\n     uint256 internal tier10Volume;\n\n     constructor() public {\n         cap = 9999999999999999999999999999999999999999999999;\n         salesWallet = 0xA0E021fC3538ed52F9a3D79249ff1D3A67f91C42;\n         openingTime = 1557856800;\n         closingTime = 1589479200;\n\n         totalPremineVolume = 76000000000000;\n         totalSaleVolume = 43000000000000;\n         totalTokenVolume = 119000000000000;\n         availableInSale = totalSaleVolume;\n         tier1Rate = 100000;\n         tier2Rate = 10000;\n         tier3Rate = 2000;\n         tier4Rate = 1250;\n         tier5Rate = 625;\n         tier6Rate = 312;\n         tier7Rate = 156;\n         tier8Rate = 117;\n         tier9Rate = 104;\n         tier10Rate = 100;\n         tier1Volume = totalPremineVolume.add(1000000000000);\n         tier2Volume = tier1Volume.add(2000000000000);\n         tier3Volume = tier2Volume.add(5000000000000);\n         tier4Volume = tier3Volume.add(5000000000000);\n         tier5Volume = tier4Volume.add(5000000000000);\n         tier6Volume = tier5Volume.add(5000000000000);\n         tier7Volume = tier6Volume.add(5000000000000);\n         tier8Volume = tier7Volume.add(5000000000000);\n         tier9Volume = tier8Volume.add(5000000000000);\n         tier10Volume = tier9Volume.add(5000000000000);\n     }\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(\n        address indexed purchaser,\n        address indexed beneficiary,\n        uint256 value,\n        uint256 amount\n    );\n\n    /**\n     * Event marking the transfer of any remaining WRK to the distribution pool post-ICO\n     * @param wallet The address remaining sale tokens are delivered\n     * @param amount The remaining tokens after the sale has closed\n     */\n     event CloseoutSale(address indexed wallet, uint256 amount);\n\n\n\n    // -----------------------------------------\n    // Crowdsale external interface\n    // -----------------------------------------\n\n    /**\n     * @dev fallback function\n     */\n    function () external payable {\n      buyTokens(msg.sender);\n    }\n\n    /**\n     * @dev Allows ICO participants to purchase WRK tokens\n     * @param _beneficiary The address of the ICO participant\n     */\n    function buyTokens(address _beneficiary) public payable {\n      uint256 weiAmount = msg.value;\n      _preValidatePurchase(_beneficiary, weiAmount);\n\n      //Calculate number of tokens to issue\n      uint256 tokens = _calculateTokens(weiAmount);\n\n      //Calculate new amount of Wei raised\n      weiRaised = weiRaised.add(weiAmount);\n\n      //Process token purchase and forward funcds to salesWallet\n      _processPurchase(_beneficiary, tokens);\n      _forwardFunds();\n      emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n    }\n\n    /**\n     * @dev Checks whether the cap has been reached.\n     * @return Whether the cap was reached\n     */\n    function capReached() public view returns (bool) {\n      return weiRaised >= cap;\n    }\n\n     /**\n      * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n      * @return Whether crowdsale period has elapsed\n      */\n     function hasClosed() public view returns (bool) {\n         // solium-disable-next-line security/no-block-members\n         return block.timestamp > closingTime;\n     }\n\n\n\n    // -----------------------------------------\n    // Internal interface (extensible)\n    // -----------------------------------------\n\n    /**\n     * @dev Calculates total number of tokens to sell, accounting for varied rates per tier.\n     * @param _amountWei Total amount of Wei sent by ICO participant\n     * @return Total number of tokens to send to buyer\n     */\n    function _calculateTokens(uint256 _amountWei) internal returns (uint256) {\n        //Tokens pending in sale\n        uint256 tokenAmountPending;\n\n        //Tokens to be sold\n        uint256 tokenAmountToIssue;\n\n        //Note: tierCaps must take into account reserved and distribution pool tokens\n        //Determine tokens remaining in tier and set current token rate\n        uint256 tokensRemainingInTier = _getRemainingTokens(totalSupply_);\n\n        //Calculate new tokens pending sale\n        uint256 newTokens = _getTokenAmount(_amountWei);\n\n        //Check if _newTokens exceeds _tokensRemainingInTier\n        bool nextTier = true;\n        while (nextTier) {\n            if (newTokens > tokensRemainingInTier) {\n                //Get tokens sold in current tier and add to pending total supply\n                tokenAmountPending = tokensRemainingInTier;\n                uint256 newTotal = totalSupply_.add(tokenAmountPending);\n\n                //Save number of tokens pending from current tier\n                tokenAmountToIssue = tokenAmountToIssue.add(tokenAmountPending);\n\n                //Calculate Wei spent in current tier and set remaining Wei for next tier\n                uint256 pendingAmountWei = tokenAmountPending.div(currentTierRate);\n                uint256 remainingWei = _amountWei.sub(pendingAmountWei);\n\n                //Calculate number of tokens in next tier\n                tokensRemainingInTier = _getRemainingTokens(newTotal);\n                newTokens = _getTokenAmount(remainingWei);\n            } else {\n                tokenAmountToIssue = tokenAmountToIssue.add(newTokens);\n                nextTier = false;\n                _setAvailableInCurrentTier(tokensRemainingInTier, newTokens);\n                _setAvailableInSale(newTokens);\n            }\n        }\n\n        //Return amount of tokens to be issued in this sale\n        return tokenAmountToIssue;\n    }\n\n    /**\n     * @dev Source of tokens.\n     * @param _beneficiary Address performing the token purchase\n     * @param _tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n        totalSupply_ = totalSupply_.add(_tokenAmount);\n        balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds() internal {\n        salesWallet.transfer(msg.value);\n    }\n\n    /**\n     * @dev Performs a binary search of the sale tiers to determine current sales volume and rate.\n     * @param _tokensSold The total number of tokens sold in the ICO prior to this tx\n     * @return The remaining number of tokens for sale in the current sale tier\n     */\n    function _getRemainingTokens(uint256 _tokensSold) internal returns (uint256) {\n        //Deteremine the current sale tier, set current rate and find remaining tokens in tier\n        uint256 remaining;\n        if (_tokensSold < tier5Volume) {\n            if (_tokensSold < tier3Volume) {\n                if (_tokensSold < tier1Volume) {\n                    _setCurrentTierRate(tier1Rate);\n                    remaining = tier1Volume.sub(_tokensSold);\n                } else if (_tokensSold < tier2Volume) {\n                    _setCurrentTierRate(tier2Rate);\n                    remaining = tier2Volume.sub(_tokensSold);\n                } else {\n                    _setCurrentTierRate(tier3Rate);\n                    remaining = tier3Volume.sub(_tokensSold);\n                }\n            } else {\n                if (_tokensSold < tier4Volume) {\n                    _setCurrentTierRate(tier4Rate);\n                    remaining = tier4Volume.sub(_tokensSold);\n                } else {\n                    _setCurrentTierRate(tier5Rate);\n                    remaining = tier5Volume.sub(_tokensSold);\n                }\n            }\n        } else {\n            if (_tokensSold < tier8Volume) {\n                if (_tokensSold < tier6Volume) {\n                    _setCurrentTierRate(tier6Rate);\n                    remaining = tier6Volume.sub(_tokensSold);\n                } else if (_tokensSold < tier7Volume) {\n                    _setCurrentTierRate(tier7Rate);\n                    remaining = tier7Volume.sub(_tokensSold);\n                } else {\n                    _setCurrentTierRate(tier8Rate);\n                    remaining = tier8Volume.sub(_tokensSold);\n                }\n            } else {\n                if (_tokensSold < tier9Volume) {\n                    _setCurrentTierRate(tier9Rate);\n                    remaining = tier9Volume.sub(_tokensSold);\n                } else {\n                    _setCurrentTierRate(tier10Rate);\n                    remaining = tier10Volume.sub(_tokensSold);\n                }\n            }\n        }\n\n        return remaining;\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param _weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        return _weiAmount.mul(currentTierRate).mul(decimalValue).div(1 ether);\n    }\n\n    /**\n     * @dev Validation of an incoming purchase.\n     * @param _beneficiary Address performing the token purchase\n     * @param _weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n        require(weiRaised.add(_weiAmount) <= cap);\n        // solium-disable-next-line security/no-block-members\n        require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n     * @param _beneficiary Address receiving the tokens\n     * @param _tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Calculates remaining tokens available in the current tier after a sale is processed\n     * @param _tierPreviousRemaining Number of tokens remaining prior to sale\n     * @param _newIssue Number of tokens to be purchased\n     */\n    function _setAvailableInCurrentTier(uint256 _tierPreviousRemaining, uint256 _newIssue) internal {\n        availableInCurrentTier = _tierPreviousRemaining.sub(_newIssue);\n    }\n\n    /**\n     * @dev Calculates remaining tokens available in the ICO after a sale is processed\n     * @param _newIssue Number of tokens to be purchased\n     */\n    function _setAvailableInSale(uint256 _newIssue) internal {\n        availableInSale = totalSaleVolume.sub(_newIssue);\n    }\n\n    /**\n     * @dev Sets the current tier rate based on sale volume\n     * @param _rate The new rate\n     */\n    function _setCurrentTierRate(uint256 _rate) internal {\n        currentTierRate = _rate;\n    }\n\n    /**\n     * @dev Returns the remaining number of tokens for sale\n     * @return Total remaining tokens available for sale\n     */\n    function tokensRemainingInSale() public view returns (uint256) {\n        return availableInSale;\n    }\n\n    /**\n     * @dev Returns the remaining number of tokens for sale in the current tier\n     * @return Total remaining tokens available for sale in the current tier\n     */\n    function tokensRemainingInTier() public view returns (uint256) {\n        return availableInCurrentTier;\n    }\n\n    /**\n     * @dev Allows the owner to transfer any remaining tokens not sold to a wallet\n     * @return Total remaining tokens available for sale\n     */\n     function transferRemainingTokens() public onlyOwner {\n         //require that sale is closed\n         require(hasClosed());\n\n         //require that tokens are still remaining after close\n         require(availableInSale > 0);\n\n         //send remaining tokens to distribution pool wallet\n         balances[distributionPoolWallet] = balances[distributionPoolWallet].add(availableInSale);\n         emit CloseoutSale(distributionPoolWallet, availableInSale);\n     }\n}",
  "bytecode": "60806040526040805190810160405280600881526020017f426c6f636b57524b00000000000000000000000000000000000000000000000081525060099080519060200190620000519291906200092b565b506040805190810160405280600381526020017f57524b0000000000000000000000000000000000000000000000000000000000815250600a90805190602001906200009f9291906200092b565b506004600b60006101000a81548160ff021916908360ff160217905550612710601255348015620000cf57600080fd5b5033600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600681620001229190620009b2565b5033600660018154811015156200013557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600860006101000a81548160ff021916908360ff16021790555073ecced56a201d1a6d1da31a060868f96acdba99b3600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ab3edd46e9d52e1b3131757e1ed87fa885f48019600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507397eae8151487e054112e27d8c2ee5f17b3c6a83c600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073d6e4e287a4ae2e9d8bf7f0323f440acc0d5ad301600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200036f64014dc93800601254620008d264010000000002620033dd179091906401000000009004565b6010819055506200039e6377359400601254620008d264010000000002620033dd179091906401000000009004565b601181905550620003cb6011546010546200090e640100000000026200332f179091906401000000009004565b600c81905550601054600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6010546040518082815260200191505060405180910390a3601154600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6011546040518082815260200191505060405180910390a3600c546001819055506002600560006101000a81548160ff021916908360ff1602179055507301c06a5ec5433c60ddaa16406f5a3fffffffffff60148190555073a0e021fc3538ed52f9a3d79249ff1d3a67f91c42601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635cdb0220601781905550635ebd872060158190555065451f2100c000601b8190555065271bb7b9b000601c81905550656c3ad8ba7000601d81905550601c54601a81905550620186a0601e81905550612710601f819055506107d06020819055506104e2602181905550610271602281905550610138602381905550609c6024819055506075602581905550606860268190555060646027819055506200070d64e8d4a51000601b546200090e640100000000026200332f179091906401000000009004565b6028819055506200073e6501d1a94a20006028546200090e640100000000026200332f179091906401000000009004565b6029819055506200076f65048c273950006029546200090e640100000000026200332f179091906401000000009004565b602a81905550620007a065048c27395000602a546200090e640100000000026200332f179091906401000000009004565b602b81905550620007d165048c27395000602b546200090e640100000000026200332f179091906401000000009004565b602c819055506200080265048c27395000602c546200090e640100000000026200332f179091906401000000009004565b602d819055506200083365048c27395000602d546200090e640100000000026200332f179091906401000000009004565b602e819055506200086465048c27395000602e546200090e640100000000026200332f179091906401000000009004565b602f819055506200089565048c27395000602f546200090e640100000000026200332f179091906401000000009004565b603081905550620008c665048c273950006030546200090e640100000000026200332f179091906401000000009004565b60318190555062000a09565b600080831415620008e7576000905062000908565b8183029050818382811515620008f957fe5b041415156200090457fe5b8090505b92915050565b600081830190508281101515156200092257fe5b80905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200096e57805160ff19168380011785556200099f565b828001600101855582156200099f579182015b828111156200099e57825182559160200191906001019062000981565b5b509050620009ae9190620009e1565b5090565b815481835581811115620009dc57818360005260206000209182019101620009db9190620009e1565b5b505050565b62000a0691905b8082111562000a02576000816000905550600101620009e8565b5090565b90565b61419d8062000a196000396000f30060806040526004361061021a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305f7939a1461022557806306fdde0314610250578063095ea7b3146102e05780630d48669a146103455780631515bc2b146103b257806318160ddd146103e15780631bfd816b1461040c57806323b872dd146104635780632ff2e9dc146104e8578063313ce56714610513578063355274ea14610544578063379b4ed01461056f5780634042b66f1461059a578063485d7d94146105c55780634b023cf8146106085780634b6753bc1461064b5780634f935945146106765780635946748c146106a557806363cc4aa2146106d057806366188463146106e75780636c791e041461074c578063705388631461077c57806370a08231146107c9578063715018a614610820578063771a3a1d146108375780637b5f4f5b146108685780637dd6ab72146108ab578063819d95c1146109025780638da5cb5b1461092d57806395d89b4114610984578063a31f898214610a14578063a9059cbb14610a45578063b7a8807c14610aaa578063cf1c316a14610ad5578063d6d2229114610b18578063d73dd62314610bdf578063dd62ed3e14610c44578063e3175c4d14610cbb578063e5ee34a214610d12578063ec8ac4d814610d69578063edf4d84714610d9f578063f2fde38b14610df6578063f4dab3ff14610e39578063fe9fbb8014610e64575b61022333610ebf565b005b34801561023157600080fd5b5061023a610f79565b6040518082815260200191505060405180910390f35b34801561025c57600080fd5b50610265610f7f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a557808201518184015260208101905061028a565b50505050905090810190601f1680156102d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ec57600080fd5b5061032b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061101d565b604051808215151515815260200191505060405180910390f35b34801561035157600080fd5b506103706004803603810190808035906020019092919050505061110f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103be57600080fd5b506103c761114d565b604051808215151515815260200191505060405180910390f35b3480156103ed57600080fd5b506103f6611159565b6040518082815260200191505060405180910390f35b34801561041857600080fd5b50610461600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611163565b005b34801561046f57600080fd5b506104ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115b0565b604051808215151515815260200191505060405180910390f35b3480156104f457600080fd5b506104fd611b1c565b6040518082815260200191505060405180910390f35b34801561051f57600080fd5b50610528611b22565b604051808260ff1660ff16815260200191505060405180910390f35b34801561055057600080fd5b50610559611b35565b6040518082815260200191505060405180910390f35b34801561057b57600080fd5b50610584611b3b565b6040518082815260200191505060405180910390f35b3480156105a657600080fd5b506105af611b41565b6040518082815260200191505060405180910390f35b3480156105d157600080fd5b50610606600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b47565b005b34801561061457600080fd5b50610649600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c45565b005b34801561065757600080fd5b50610660611d21565b6040518082815260200191505060405180910390f35b34801561068257600080fd5b5061068b611d27565b604051808215151515815260200191505060405180910390f35b3480156106b157600080fd5b506106ba611d36565b6040518082815260200191505060405180910390f35b3480156106dc57600080fd5b506106e5611d40565b005b3480156106f357600080fd5b50610732600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f0d565b604051808215151515815260200191505060405180910390f35b34801561075857600080fd5b5061077a600480360381019080803560ff16906020019092919050505061219f565b005b34801561078857600080fd5b506107c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612219565b005b3480156107d557600080fd5b5061080a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124cd565b6040518082815260200191505060405180910390f35b34801561082c57600080fd5b50610835612515565b005b34801561084357600080fd5b5061084c61261a565b604051808260ff1660ff16815260200191505060405180910390f35b34801561087457600080fd5b506108a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061262d565b005b3480156108b757600080fd5b506108c0612709565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561090e57600080fd5b5061091761272f565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b50610942612735565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561099057600080fd5b5061099961275b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109d95780820151818401526020810190506109be565b50505050905090810190601f168015610a065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a2057600080fd5b50610a296127f9565b604051808260ff1660ff16815260200191505060405180910390f35b348015610a5157600080fd5b50610a90600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061280c565b604051808215151515815260200191505060405180910390f35b348015610ab657600080fd5b50610abf612bdd565b6040518082815260200191505060405180910390f35b348015610ae157600080fd5b50610b16600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612be3565b005b348015610b2457600080fd5b50610bdd600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050612dab565b005b348015610beb57600080fd5b50610c2a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612dd5565b604051808215151515815260200191505060405180910390f35b348015610c5057600080fd5b50610ca5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612fd1565b6040518082815260200191505060405180910390f35b348015610cc757600080fd5b50610cd0613058565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d1e57600080fd5b50610d2761307e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610d9d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ebf565b005b348015610dab57600080fd5b50610db46130a4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e0257600080fd5b50610e37600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130ca565b005b348015610e4557600080fd5b50610e4e613132565b6040518082815260200191505060405180910390f35b348015610e7057600080fd5b50610ea5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061313c565b604051808215151515815260200191505060405180910390f35b600080349150610ecf83836131aa565b610ed88261323e565b9050610eef8260185461332f90919063ffffffff16565b601881905550610eff838261334b565b610f07613359565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a3505050565b60115481565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110155780601f10610fea57610100808354040283529160200191611015565b820191906000526020600020905b815481529060010190602001808311610ff857829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60068181548110151561111e57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006015544211905090565b6000600154905090565b600061116e3361313c565b151561117957600080fd5b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156111e857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561122457600080fd5b61129783600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133c490919063ffffffff16565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061130e82846133c490919063ffffffff16565b9050611361816000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361149d82600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156115f057600080fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561163d57600080fd5b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484111515156116c857600080fd5b611719846000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133c490919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117936064611785600560009054906101000a900460ff1660ff16876133dd90919063ffffffff16565b61341590919063ffffffff16565b91506117a882856133c490919063ffffffff16565b90506117fb816000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361191582600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a0884600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133c490919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001925050509392505050565b600c5481565b600b60009054906101000a900460ff1681565b60145481565b60165481565b60185481565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ba357600080fd5b611bac8161313c565b1515611bb757600080fd5b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506008600081819054906101000a900460ff16809291906001900391906101000a81548160ff021916908360ff1602179055505050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ca157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611cdd57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60155481565b60006014546018541015905090565b6000601a54905090565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d9c57600080fd5b611da461114d565b1515611daf57600080fd5b6000601a54111515611dc057600080fd5b611e35601a54600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1227f9baa9c17a74ae4200a9a412668d5892cbf9f1cc63bdcd07cc1be0634192601a546040518082815260200191505060405180910390a2565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808310151561201f576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120b3565b61203283826133c490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121fb57600080fd5b80600560006101000a81548160ff021916908360ff16021790555050565b6122223361313c565b151561222d57600080fd5b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561229c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156122d857600080fd5b61234b81600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133c490919063ffffffff16565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612400816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561257157600080fd5b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600560009054906101000a900460ff1681565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561268957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156126c557600080fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60105481565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127f15780601f106127c6576101008083540402835291602001916127f1565b820191906000526020600020905b8154815290600101906020018083116127d457829003601f168201915b505050505081565b600860009054906101000a900460ff1681565b60008060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561284c57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561289957600080fd5b6128ea846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133c490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129646064612956600560009054906101000a900460ff1660ff16876133dd90919063ffffffff16565b61341590919063ffffffff16565b915061297982856133c490919063ffffffff16565b90506129cc816000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3612ae682600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019250505092915050565b60175481565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c3f57600080fd5b60001515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415612da8576001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060068054809190600101612d049190614120565b50806006612d2160016006805490506133c490919063ffffffff16565b815481101515612d2d57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550505b50565b612db43361313c565b1515612dbf57600080fd5b612dcd86868686868661342b565b505050505050565b6000612e6682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561312657600080fd5b61312f81613a50565b50565b6000601954905090565b600060011515600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156131a057600190506131a5565b600090505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156131e657600080fd5b600081141515156131f657600080fd5b60145461320e8260185461332f90919063ffffffff16565b1115151561321b57600080fd5b601754421015801561322f57506015544211155b151561323a57600080fd5b5050565b6000806000806000806000806000613257600154613b4c565b95506132628a613d3c565b9450600193505b831561331f57858511156132ed5785975061328f8860015461332f90919063ffffffff16565b92506132a4888861332f90919063ffffffff16565b96506132bb6016548961341590919063ffffffff16565b91506132d0828b6133c490919063ffffffff16565b90506132db83613b4c565b95506132e681613d3c565b945061331a565b613300858861332f90919063ffffffff16565b9650600093506133108686613d88565b61331985613da5565b5b613269565b8698505050505050505050919050565b6000818301905082811015151561334257fe5b80905092915050565b6133558282613dc3565b5050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156133c1573d6000803e3d6000fd5b50565b60008282111515156133d257fe5b818303905092915050565b6000808314156133f0576000905061340f565b818302905081838281151561340157fe5b0414151561340b57fe5b8090505b92915050565b6000818381151561342257fe5b04905092915050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561346b57600080fd5b6000151560048a6040518082805190602001908083835b6020831015156134a75780518252602082019150602081019050602083039250613482565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1615151415156134f657600080fd5b61350287878787613e75565b925061350e838a613f63565b91508773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151561354a57600080fd5b61355d858761332f90919063ffffffff16565b90506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156135ac57600080fd5b61360f85613601886000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133c490919063ffffffff16565b6133c490919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506136a2866000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061375785600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160048a6040518082805190602001908083835b6020831015156137f557805182526020820191506020810190506020830392506137d0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055508673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f339e733e8f3d5b80a99579a1bd0d885dd3d96783439f354abebcd98f88b6462c896040518082815260200191505060405180910390a4600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f339e733e8f3d5b80a99579a1bd0d885dd3d96783439f354abebcd98f88b6462c886040518082815260200191505060405180910390a48673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613a8c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080602c54831015613c4857602a54831015613bee57602854831015613b9457613b78601e5461405b565b613b8d836028546133c490919063ffffffff16565b9050613be9565b602954831015613bc557613ba9601f5461405b565b613bbe836029546133c490919063ffffffff16565b9050613be8565b613bd060205461405b565b613be583602a546133c490919063ffffffff16565b90505b5b613c43565b602b54831015613c1f57613c0360215461405b565b613c1883602b546133c490919063ffffffff16565b9050613c42565b613c2a60225461405b565b613c3f83602c546133c490919063ffffffff16565b90505b5b613d33565b602f54831015613cdd57602d54831015613c8357613c6760235461405b565b613c7c83602d546133c490919063ffffffff16565b9050613cd8565b602e54831015613cb457613c9860245461405b565b613cad83602e546133c490919063ffffffff16565b9050613cd7565b613cbf60255461405b565b613cd483602f546133c490919063ffffffff16565b90505b5b613d32565b603054831015613d0e57613cf260265461405b565b613d07836030546133c490919063ffffffff16565b9050613d31565b613d1960275461405b565b613d2e836031546133c490919063ffffffff16565b90505b5b5b80915050919050565b6000613d81670de0b6b3a7640000613d73601254613d65601654876133dd90919063ffffffff16565b6133dd90919063ffffffff16565b61341590919063ffffffff16565b9050919050565b613d9b81836133c490919063ffffffff16565b6019819055505050565b613dba81601c546133c490919063ffffffff16565b601a8190555050565b613dd88160015461332f90919063ffffffff16565b600181905550613e2f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461332f90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008085858585604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018281526020019450505050506040516020818303038152906040526040518082805190602001908083835b602083101515613f205780518252602082019150602081019050602083039250613efb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050613f5881614065565b915050949350505050565b60008060008060418551141515613f7d5760009350614052565b6020850151925060408501519150606085015160001a9050601b8160ff161015613fa857601b810190505b601b8160ff1614158015613fc05750601c8160ff1614155b15613fce5760009350614052565b600186828585604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015614045573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b8060168190555050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156140ec57805182526020820191506020810190506020830392506140c7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b81548183558181111561414757818360005260206000209182019101614146919061414c565b5b505050565b61416e91905b8082111561416a576000816000905550600101614152565b5090565b905600a165627a7a72305820f6c48654dbdf5d07f556060f1719a80abb203dac97e4fce2e43b511dd59fdf030029"
}