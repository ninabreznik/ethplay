{
  "address": "0xd0aa48ed4c42411e61876abb434ff9371760fb62",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BigOne",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-22\n*/\n\npragma solidity ^0.4.24;\n\n/*\n*　　　　　　　　　　　　　　　　　　　　 　 　 ＿＿＿\n*　　　　　　　　　　　　　　　　　　　　　　　|三三三i\n*　　　　　　　　　　　　　　　　　　　　　　　|三三三|  \n*　　神さま　かなえて　happy-end　　　　　　ノ三三三.廴        \n*　　　　　　　　　　　　　　　　　　　　　　从ﾉ_八ﾑ_}ﾉ\n*　　　＿＿}ヽ__　　　　　　　　　　 　 　 　 ヽ‐个‐ｱ.     © Team EC Present. \n*　　 　｀ﾋｙ　　ﾉ三ﾆ==ｪ- ＿＿＿ ｨｪ=ｧ='ﾌ)ヽ-''Lヽ         \n*　　　　 ｀‐⌒L三ﾆ=ﾆ三三三三三三三〈oi 人 ）o〉三ﾆ、　　　 \n*　　　　　　　　　　 　 ｀￣￣￣￣｀弌三三}. !　ｒ三三三iｊ　　　　　　\n*　　　　　　　　　　 　 　 　 　 　 　,': ::三三|. ! ,'三三三刈、\n*　　　　　　　　　 　 　 　 　 　 　 ,': : :::｀i三|人|三三ﾊ三j: ;　　　　　\n*　                  　　　　　　 ,': : : : : 比|　 |三三i |三|: ',\n*　　　　　　　　　　　　　　　　　,': : : : : : :Vi|　 |三三i |三|: : ',\n*　　　　　　　　　　　　　　　　, ': : : : : : : ﾉ }乂{三三| |三|: : :;\n*    BigOne Game v1.0　　  ,': : : : : : : : ::ｊ三三三三|: |三i: : ::,\n*　　　　　　　　　　　 　 　 ,': : : : : : : : :/三三三三〈: :!三!: : ::;\n*　　　　　　　　　 　 　 　 ,': : : : : : : : /三三三三三!, |三!: : : ,\n*　　　　　　　 　 　 　 　 ,': : : : : : : : ::ｊ三三八三三Y {⌒i: : : :,\n*　　　　　　　　 　 　 　 ,': : : : : : : : : /三//: }三三ｊ: : ー': : : : ,\n*　　　　　　 　 　 　 　 ,': : : : : : : : :.//三/: : |三三|: : : : : : : : :;\n*　　　　 　 　 　 　 　 ,': : : : : : : : ://三/: : : |三三|: : : : : : : : ;\n*　　 　 　 　 　 　 　 ,': : : : : : : : :/三ii/ : : : :|三三|: : : : : : : : :;\n*　　　 　 　 　 　 　 ,': : : : : : : : /三//: : : : ::!三三!: : : : : : : : ;\n*　　　　 　 　 　 　 ,': : : : : : : : :ｊ三// : : : : ::|三三!: : : : : : : : :;\n*　　 　 　 　 　 　 ,': : : : : : : : : |三ij: : : : : : ::ｌ三ﾆ:ｊ: : : : : : : : : ;\n*　　　 　 　 　 　 ,': : : : : : : : ::::|三ij: : : : : : : !三刈: : : : : : : : : ;\n*　 　 　 　 　 　 ,': : : : : : : : : : :|三ij: : : : : : ::ｊ三iiﾃ: : : : : : : : : :;\n*　　 　 　 　 　 ,': : : : : : : : : : : |三ij: : : : : : ::|三iiﾘ: : : : : : : : : : ;\n*　　　 　 　 　 ,':: : : : : : : : : : : :|三ij::: : :: :: :::|三リ: : : : : : : : : : :;\n*　　　　　　　 ,': : : : : : : : : : : : :|三ij : : : : : ::ｌ三iﾘ: : : : : : : : : : : ',\n*           　　　　　　　　　　　　　　   ｒ'三三jiY, : : : : : ::|三ij : : : : : : : : : : : ',\n*　 　 　 　 　 　      　　                |三 j´　　　　　　　　｀',    signature:\n*　　　　　　　　　　　　 　 　 　 　 　 　 　  |三三k、\n*                            　　　　　　　　｀ー≠='.  93511761c3aa73c0a197c55537328f7f797c4429 \n*/\n\n\ncontract BigOneEvents {\n    event onNewPlayer\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        bool isNewPlayer,\n        uint256 affiliateID,\n        address affiliateAddress,\n        bytes32 affiliateName,\n        uint256 amountPaid,\n        uint256 timeStamp\n    );\n\n    event onEndTx\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        uint256 roundID,\n        uint256 ethIn,\n        uint256 pot\n    );\n\n    event onWithdraw\n    (\n        uint256 indexed playerID,\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethOut,\n        uint256 timeStamp\n    );\n\n    event onAffiliatePayout\n    (\n        uint256 indexed affiliateID,\n        address affiliateAddress,\n        // bytes32 affiliateName,\n        uint256 indexed roundID,\n        uint256 indexed buyerID,\n        uint256 amount,\n        uint256 timeStamp\n    );\n\n    event onEndRound\n    (\n        uint256 roundID,\n        uint256 roundTypeID,\n        address winnerAddr,\n        uint256 winnerNum,\n        uint256 amountWon\n    );\n}\n\ncontract BigOne is BigOneEvents {\n    using SafeMath for *;\n    using NameFilter for string;\n\n    UserDataManagerInterface constant private UserDataManager = UserDataManagerInterface(0x5576250692275701eFdE5EEb51596e2D9460790b);\n\n    //****************\n    // constant\n    //****************\n    address private admin = msg.sender;\n    address private shareCom1 = 0xdcd90eA01E441654C9e8e8fcfBF407781d196287;\n    address private shareCom2 = 0xaF63842fb4A9B3769E0e1b7DAb9C5068dB78d3d3;\n\n    string constant public name = \"bigOne\";\n    string constant public symbol = \"bigOne\";   \n\n    //****************\n    // var\n    //****************\n    uint256 public rID_;    \n    uint256 public rTypeID_;\n\n    //****************\n    // PLAYER DATA\n    //****************\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\n    mapping (uint256 => BigOneData.Player) public plyr_;   // (pID => data) player data\n    mapping (uint256 => mapping (uint256 => BigOneData.PlayerRoundData)) public plyrRnds_;   // (pID => rID => data) \n    mapping (uint256 => uint256) private playerSecret_;\n\n    //****************\n    // ROUND DATA\n    //****************\n    mapping (uint256 => BigOneData.RoundSetting) public rSettingXTypeID_;   //(rType => setting)\n    mapping (uint256 => BigOneData.Round) public round_;   // (rID => data) round data\n    mapping (uint256 => uint256) public currentRoundxType_;\n    mapping (uint256 => uint256) private roundCommonSecret_;\n\n    //==============================================================================\n    // init\n    //==============================================================================\n    constructor() public {\n        rID_ = 0;\n        rTypeID_ = 0;\n    }\n\n    //==============================================================================\n    // checks\n    //==============================================================================\n    modifier isActivated() {\n        require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\n        _;\n    }\n\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    modifier onlyDevs() {\n        require(admin == msg.sender, \"msg sender is not a dev\");\n        _;\n    }\n\n    modifier isWithinLimits(uint256 _eth,uint256 _typeID) {\n        require(rSettingXTypeID_[_typeID].isValue, \"invaild mode id\");\n        require(_eth >= rSettingXTypeID_[_typeID].perShare, \"less than min allow\");\n        require(_eth <= rSettingXTypeID_[_typeID].limit, \"more than max allow\");\n        _;\n    }\n\n    modifier modeCheck(uint256 _typeID) {\n        require(rSettingXTypeID_[_typeID].isValue, \"invaild mode id\");\n        _;\n    }\n\n    //==============================================================================\n    // admin\n    //==============================================================================\n    bool public activated_ = false;\n    function activate(uint256 _initSecret)\n        onlyDevs()\n        public\n    {\n        require(activated_ == false, \"BigOne already activated\");\n        require(rTypeID_ > 0, \"No round mode setup\");\n        activated_ = true;\n\n        for(uint256 i = 0; i < rTypeID_; i++) {\n            rID_++;\n            round_[rID_].start = now;\n            round_[rID_].typeID = i + 1;\n            round_[rID_].count = 1;\n            round_[rID_].pot = 0;\n            generateRndSecret(rID_,_initSecret);\n            currentRoundxType_[i + 1] = rID_;\n        }\n    }\n\n    function addRoundMode(uint256 _limit, uint256 _perShare, uint256 _shareMax)\n        onlyDevs()\n        public\n    {\n        require(activated_ == false, \"BigOne already started\");\n\n        rTypeID_++;\n        rSettingXTypeID_[rTypeID_].id = rTypeID_;\n        rSettingXTypeID_[rTypeID_].limit = _limit;\n        rSettingXTypeID_[rTypeID_].perShare = _perShare;\n        rSettingXTypeID_[rTypeID_].shareMax = _shareMax;\n        rSettingXTypeID_[rTypeID_].isValue = true;\n    }\n\n    //==============================================================================\n    // public\n    //==============================================================================\n\n    function()\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value,1)\n        public\n        payable\n    {\n        determinePID();\n\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        buyCore(_pID, plyr_[_pID].laff,1);\n    }\n\n    function buyXid(uint256 _affCode, uint256 _mode)\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value,_mode)\n        public\n        payable\n    {\n        determinePID();\n\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        if (_affCode == 0 || _affCode == _pID)\n        {\n            _affCode = plyr_[_pID].laff;\n\n        } else if (_affCode != plyr_[_pID].laff) {\n            plyr_[_pID].laff = _affCode;\n        }\n\n        buyCore(_pID, _affCode, _mode);\n    }\n\n    function buyXaddr(address _affCode, uint256 _mode)\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value,_mode)\n        public\n        payable\n    {\n        determinePID();\n\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        uint256 _affID;\n        if (_affCode == address(0) || _affCode == msg.sender)\n        {\n            _affID = plyr_[_pID].laff;\n\n        } else {\n            _affID = pIDxAddr_[_affCode];\n\n            if (_affID != plyr_[_pID].laff)\n            {\n                plyr_[_pID].laff = _affID;\n            }\n        }\n\n        buyCore(_pID, _affID, _mode);\n    }\n\n    function buyXname(bytes32 _affCode, uint256 _mode)\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value,_mode)\n        public\n        payable\n    {\n        determinePID();\n\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        uint256 _affID;\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\n        {\n            _affID = plyr_[_pID].laff;\n\n        } else {\n            _affID = pIDxName_[_affCode];\n\n            if (_affID != plyr_[_pID].laff)\n            {\n                plyr_[_pID].laff = _affID;\n            }\n        }\n\n        buyCore(_pID, _affID, _mode);\n    }\n\n    function reLoadXid(uint256 _affCode, uint256 _eth, uint256 _mode)\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth,_mode)\n        public\n    {\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        if (_affCode == 0 || _affCode == _pID)\n        {\n            _affCode = plyr_[_pID].laff;\n\n        } else if (_affCode != plyr_[_pID].laff) {\n            plyr_[_pID].laff = _affCode;\n        }\n\n        reLoadCore(_pID, _affCode, _eth, _mode);\n    }\n\n    function reLoadXaddr(address _affCode, uint256 _eth, uint256 _mode)\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth,_mode)\n        public\n    {\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        uint256 _affID;\n        if (_affCode == address(0) || _affCode == msg.sender)\n        {\n            _affID = plyr_[_pID].laff;\n        } else {\n            _affID = pIDxAddr_[_affCode];\n\n            if (_affID != plyr_[_pID].laff)\n            {\n                plyr_[_pID].laff = _affID;\n            }\n        }\n\n        reLoadCore(_pID, _affID, _eth, _mode);\n    }\n\n    function reLoadXname(bytes32 _affCode, uint256 _eth, uint256 _mode)\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth,_mode)\n        public\n    {\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        uint256 _affID;\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\n        {\n            _affID = plyr_[_pID].laff;\n        } else {\n            _affID = pIDxName_[_affCode];\n\n            if (_affID != plyr_[_pID].laff)\n            {\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        reLoadCore(_pID, _affID, _eth,_mode);\n    }\n\n    function withdraw()\n        isActivated()\n        isHuman()\n        public\n    {\n        // grab time\n        uint256 _now = now;\n\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // setup temp var for player eth\n        uint256 _eth;\n        uint256 _withdrawFee;\n    \n        // get their earnings\n        _eth = withdrawEarnings(_pID);\n\n        // gib moni\n        if (_eth > 0)\n        {\n            //10% trade tax\n            _withdrawFee = _eth.div(10);\n\n            shareCom1.transfer((_withdrawFee.div(2)));\n            shareCom2.transfer((_withdrawFee.div(10)));\n            admin.transfer((_withdrawFee.div(10).mul(4)));\n\n            plyr_[_pID].addr.transfer(_eth.sub(_withdrawFee));\n        }\n\n        // fire withdraw event\n        emit BigOneEvents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\n    }\n\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, uint256 _affID) = UserDataManager.registerNameXIDFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\n\n        uint256 _pID = pIDxAddr_[_addr];\n        if(_isNewPlayer) generatePlayerSecret(_pID);\n        emit BigOneEvents.onNewPlayer(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n\n    function registerNameXaddr(string _nameString, address _affCode, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, uint256 _affID) = UserDataManager.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\n\n        uint256 _pID = pIDxAddr_[_addr];\n        if(_isNewPlayer) generatePlayerSecret(_pID);\n        emit BigOneEvents.onNewPlayer(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, uint256 _affID) = UserDataManager.registerNameXnameFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\n\n        uint256 _pID = pIDxAddr_[_addr];\n        if(_isNewPlayer) generatePlayerSecret(_pID);\n        emit BigOneEvents.onNewPlayer(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n\n//==============================================================================\n// query\n//==============================================================================\n\n    function iWantXKeys(uint256 _keys,uint256 _mode)\n        modeCheck(_mode)\n        public\n        view\n        returns(uint256)\n    {\n        return _keys.mul(rSettingXTypeID_[_mode].perShare);\n    }\n\n    function getPlayerVaults(uint256 _pID)\n        public\n        view\n        //win,gen,aff\n        returns(uint256[])\n    {\n        uint256[] memory _vaults = new uint256[](3);\n        _vaults[0] = plyr_[_pID].win;\n        _vaults[1] = plyr_[_pID].gen;\n        _vaults[2] = plyr_[_pID].aff;\n\n        return _vaults;\n    }\n\n    function getCurrentRoundInfo(uint256 _mode)\n        modeCheck(_mode)\n        public\n        view\n        returns(uint256[])\n    {\n        uint256 _rID = currentRoundxType_[_mode];\n\n        uint256[] memory _roundInfos = new uint256[](6);\n        _roundInfos[0] = _mode;\n        _roundInfos[1] = _rID;\n        _roundInfos[2] = round_[_rID].count;\n        _roundInfos[3] = round_[_rID].keyCount;\n        _roundInfos[4] = round_[_rID].eth;\n        _roundInfos[5] = round_[_rID].pot;\n\n        return _roundInfos;\n    }\n\n    function getPlayerInfoByAddress(address _addr,uint256 _mode)\n        modeCheck(_mode)\n        public\n        view\n        returns(uint256, uint256, bytes32)\n    {\n        uint256 _rID = currentRoundxType_[_mode];\n\n        if (_addr == address(0))\n        {\n            _addr == msg.sender;\n        }\n        uint256 _pID = pIDxAddr_[_addr];\n\n        return\n        (\n            _pID,                               //0\n            plyrRnds_[_pID][_rID].eth,          //1\n            plyr_[_pID].name                   //2\n        );\n    }\n\n    function getPlayerKeys(address _addr,uint256 _mode)\n        public\n        view\n        returns(uint256[]) \n    {\n        uint256 _rID = currentRoundxType_[_mode];\n\n        if (_addr == address(0))\n        {\n            _addr == msg.sender;\n        }\n        uint256 _pID = pIDxAddr_[_addr];\n\n        uint256[] memory _keys = new uint256[](plyrRnds_[_pID][_rID].keyCount);\n        uint256 _keyIndex = 0;\n        for(uint256 i = 0;i < plyrRnds_[_pID][_rID].purchaseIDs.length;i++) {\n            uint256 _pIndex = plyrRnds_[_pID][_rID].purchaseIDs[i];\n            BigOneData.PurchaseRecord memory _pr = round_[_rID].purchases[_pIndex];\n            if(_pr.plyr == _pID) {\n                for(uint256 j = _pr.start; j <= _pr.end; j++) {\n                    _keys[_keyIndex] = j;\n                    _keyIndex++;\n                }\n            }\n        }\n        return _keys;\n    }\n\n    function getPlayerAff(uint256 _pID)\n        public\n        view\n        returns (uint256[])\n    {\n        uint256[] memory _affs = new uint256[](3);\n\n        _affs[0] = plyr_[_pID].laffID;\n        if (_affs[0] != 0)\n        {\n            //second level aff\n            _affs[1] = plyr_[_affs[0]].laffID;\n\n            if(_affs[1] != 0)\n            {\n                //third level aff\n                _affs[2] = plyr_[_affs[1]].laffID;\n            }\n        }\n        return _affs;\n    }\n\n//==============================================================================\n// private\n//==============================================================================\n\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _mode)\n        private\n    {\n        uint256 _rID = currentRoundxType_[_mode];\n\n        if (round_[_rID].keyCount < rSettingXTypeID_[_mode].shareMax && round_[_rID].plyr == 0)\n        {\n            core(_rID, _pID, msg.value, _affID,_mode);\n        } else {\n            if (round_[_rID].keyCount >= rSettingXTypeID_[_mode].shareMax && round_[_rID].plyr == 0 && round_[_rID].ended == false)\n            {\n                round_[_rID].ended = true;\n                endRound(_mode); \n            }\n            //directly refund player\n            plyr_[_pID].addr.transfer(msg.value);\n        }\n    }\n\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _eth, uint _mode)\n        private\n    {\n        uint256 _rID = currentRoundxType_[_mode];\n\n        if (round_[_rID].keyCount < rSettingXTypeID_[_mode].shareMax && round_[_rID].plyr == 0)\n        {\n            plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\n            core(_rID, _pID, _eth, _affID,_mode);\n        } else {\n            if (round_[_rID].keyCount >= rSettingXTypeID_[_mode].shareMax && round_[_rID].plyr == 0 && round_[_rID].ended == false) \n            {\n                round_[_rID].ended = true;\n                endRound(_mode);      \n            }\n        }\n    }\n\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _mode)\n        private\n    {\n        if (plyrRnds_[_pID][_rID].keyCount == 0) \n        {\n            managePlayer(_pID,_rID);\n        }\n\n        if (round_[_rID].keyCount < rSettingXTypeID_[_mode].shareMax)\n        {\n            uint256 _ethAdd = ((rSettingXTypeID_[_mode].shareMax).sub(round_[_rID].keyCount)).mul(rSettingXTypeID_[_mode].perShare);\n            if(_eth > _ethAdd) {\n                plyr_[_pID].gen = plyr_[_pID].gen.add(_eth.sub(_ethAdd)); \n            } else {\n                _ethAdd = _eth;\n            }\n\n            uint256 _keyAdd = _ethAdd.div(rSettingXTypeID_[_mode].perShare);\n            uint256 _keyEnd = (round_[_rID].keyCount).add(_keyAdd);\n            \n            BigOneData.PurchaseRecord memory _pr;\n            _pr.plyr = _pID;\n            _pr.start = round_[_rID].keyCount;\n            _pr.end = _keyEnd - 1;\n            round_[_rID].purchases.push(_pr);\n            plyrRnds_[_pID][_rID].purchaseIDs.push(round_[_rID].purchases.length - 1);\n            plyrRnds_[_pID][_rID].keyCount += _keyAdd;\n\n            plyrRnds_[_pID][_rID].eth = _ethAdd.add(plyrRnds_[_pID][_rID].eth);\n            round_[_rID].keyCount = _keyEnd;\n            round_[_rID].eth = _ethAdd.add(round_[_rID].eth);\n            round_[_rID].pot = (round_[_rID].pot).add(_ethAdd.mul(95).div(100));\n\n            distributeExternal(_rID, _pID, _ethAdd, _affID);\n\n            if (round_[_rID].keyCount >= rSettingXTypeID_[_mode].shareMax && round_[_rID].plyr == 0 && round_[_rID].ended == false) \n            {\n                round_[_rID].ended = true;\n                endRound(_mode); \n            }\n\n            emit BigOneEvents.onEndTx\n            (\n               _pID,\n                msg.sender,\n                _rID,\n                _ethAdd,\n                round_[_rID].pot\n            );\n\n        } else {\n            // put back eth in players vault\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_eth);    \n        }\n\n    }\n\n\n//==============================================================================\n// util\n//==============================================================================\n\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff)\n        external\n    {\n        require (msg.sender == address(UserDataManager), \"your not userManager contract\");\n        if (pIDxAddr_[_addr] != _pID)\n            pIDxAddr_[_addr] = _pID;\n        if (pIDxName_[_name] != _pID)\n            pIDxName_[_name] = _pID;\n        if (plyr_[_pID].addr != _addr)\n            plyr_[_pID].addr = _addr;\n        if (plyr_[_pID].name != _name)\n            plyr_[_pID].name = _name;\n        if (plyr_[_pID].laff != _laff)\n            plyr_[_pID].laff = _laff;\n    }\n\n    function determinePID()\n        private\n    {\n        uint256 _pID = pIDxAddr_[msg.sender];\n        if (_pID == 0)\n        {\n            _pID = UserDataManager.getPlayerID(msg.sender);\n            bytes32 _name = UserDataManager.getPlayerName(_pID);\n            uint256 _laff = UserDataManager.getPlayerLaff(_pID);\n\n            pIDxAddr_[msg.sender] = _pID;\n            plyr_[_pID].addr = msg.sender;\n\n            if (_name != \"\")\n            {\n                pIDxName_[_name] = _pID;\n                plyr_[_pID].name = _name;\n            }\n\n            if (_laff != 0 && _laff != _pID) \n            {\n                plyr_[_pID].laff = _laff;\n            }\n            generatePlayerSecret(_pID);\n        }\n    }\n\n    function withdrawEarnings(uint256 _pID)\n        private\n        returns(uint256)\n    {\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\n        if (_earnings > 0)\n        {\n            plyr_[_pID].win = 0;\n            plyr_[_pID].gen = 0;\n            plyr_[_pID].aff = 0;\n        }\n\n        return(_earnings);\n    }\n\n    function managePlayer(uint256 _pID,uint256 _rID)\n        private\n    {\n        plyr_[_pID].lrnd = _rID;\n    }\n\n    function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID)\n        private\n    {\n         // pay community rewards\n        // uint256 _com = _eth / 50;\n        \n\n        // if (address(admin).call.value((_com / 2))() == false)\n        // {\n        //     _p3d = _com / 2;\n        //     _com = _com / 2;\n        // }\n\n        // if (address(shareCom).call.value((_com / 2))() == false)\n        // {\n        //     _p3d = _p3d.add(_com / 2);\n        //     _com = _com.sub(_com / 2);\n        // }\n\n        uint256 _p3d = distributeAff(_rID,_pID,_eth,_affID);\n\n        if (_p3d > 0)\n        {\n            shareCom1.transfer((_p3d.div(2)));\n            shareCom2.transfer((_p3d.div(10)));\n            admin.transfer((_p3d.div(10).mul(4)));\n        }\n    }\n\n    function distributeAff(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID)\n        private\n        returns(uint256)\n    {\n        uint256 _addP3d = 0;\n\n        // distribute share to affiliate\n        uint256 _aff1 = _eth.div(20);\n        // uint256 _aff2 = _eth.div(20);\n        // uint256 _aff3 = _eth.div(100).mul(3);\n\n\n        // decide what to do with affiliate share of fees\n        // affiliate must not be self\n        if ((_affID != 0) && (_affID != _pID) && (plyr_[_affID].addr != address(0)))\n        {\n            plyr_[_pID].laffID = _affID;\n            plyr_[_affID].aff = _aff1.add(plyr_[_affID].aff);\n\n            emit BigOneEvents.onAffiliatePayout(_affID, plyr_[_affID].addr, _rID, _pID, _aff1, now);\n\n            //second level aff\n            // uint256 _secLaff = plyr_[_affID].laffID;\n            // if((_secLaff != 0) && (_secLaff != _pID))\n            // {\n            //     plyr_[_secLaff].aff = _aff3.add(plyr_[_secLaff].aff);\n            //     emit BigOneEvents.onAffiliatePayout(_secLaff, plyr_[_secLaff].addr, _rID, _pID, _aff3, now);\n            // } else {\n            //     _addP3d = _addP3d.add(_aff3);\n            // }\n        } else {\n            _addP3d = _addP3d.add(_aff1);\n        }\n        return(_addP3d);\n    }\n\n    function distributeWinning(uint256 _mode, uint256 _amount, uint256 _affID)\n        private\n    {\n        uint256 _affReward = (rSettingXTypeID_[_mode].limit).div(20);\n        if(_affReward > _amount)\n        {\n            _affReward = _amount;\n        } else {\n            uint256 _rest = _amount.sub(_affReward);\n            if(_rest > 0)\n            {\n                shareCom1.transfer((_rest.div(2)));\n                shareCom2.transfer((_rest.div(10)));\n                admin.transfer((_rest.div(10).mul(4)));\n            }\n        }\n        plyr_[_affID].aff = _affReward.add(plyr_[_affID].aff);\n    }\n\n    function generateRndSecret(uint256 _rID, uint256 _lastSecret)\n        private\n    {\n        roundCommonSecret_[_rID] = uint256(keccak256(abi.encodePacked(_lastSecret, _rID, block.difficulty, now)));\n    }\n\n    function generatePlayerSecret(uint256 _pID)\n        private\n    {\n        playerSecret_[_pID] = uint256(keccak256(abi.encodePacked(block.blockhash(block.number-1), msg.sender, block.difficulty, now)));\n    }\n\n    function endRound(uint256 _mode)\n        private\n    {\n        uint256 _rID = currentRoundxType_[_mode];\n\n        uint256 _winKey = uint256(keccak256(abi.encodePacked(roundCommonSecret_[_rID], playerSecret_[pIDxAddr_[msg.sender]-1], block.difficulty, now))).mod(round_[_rID].keyCount);\n        uint256 _winPID;\n        for(uint256 i = 0;i < round_[_rID].purchases.length; i++) {\n            if(round_[_rID].purchases[i].start <= _winKey && round_[_rID].purchases[i].end >= _winKey) {\n                _winPID = round_[_rID].purchases[i].plyr;\n                break;\n            }\n        }\n\n        if(_winPID != 0) {\n            uint256 _winAmount = (rSettingXTypeID_[_mode].limit).mul(90).div(100);\n\n            // pay our winner\n            plyr_[_winPID].win = (_winAmount).add(plyr_[_winPID].win);\n\n            distributeWinning(_mode, (round_[_rID].pot).sub(_winAmount), plyr_[_winPID].laffID);\n        }\n\n        round_[_rID].plyr = _winPID;\n        round_[_rID].end = now;\n\n        emit BigOneEvents.onEndRound\n        (\n            _rID,\n            _mode,\n            plyr_[_winPID].addr,\n            _winKey,\n            _winAmount\n        );\n\n        // start next round\n        rID_++;\n        round_[rID_].start = now;\n        round_[rID_].typeID = _mode;\n        round_[rID_].count = round_[_rID].count + 1;\n        round_[rID_].pot = 0;\n        generateRndSecret(rID_,roundCommonSecret_[_rID]);\n        currentRoundxType_[_mode] = rID_;\n    }\n}\n\n//==============================================================================\n// interface\n//==============================================================================\n\ninterface UserDataManagerInterface {\n    function getPlayerID(address _addr) external returns (uint256);\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\n    function getPlayerLaff(uint256 _pID) external view returns (uint256);\n    function getPlayerAddr(uint256 _pID) external view returns (address);\n    function getNameFee() external view returns (uint256);\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\n}\n\n//==============================================================================\n// struct\n//==============================================================================\nlibrary BigOneData {\n\n    struct Player {\n        address addr;   // player address\n        bytes32 name;   // player name\n        uint256 win;    // winnings vault\n        uint256 gen;    // general vault\n        uint256 aff;    // affiliate vault\n        uint256 lrnd;   // last round played\n        uint256 laff;   // last affiliate id used\n        uint256 laffID;   // last affiliate id unaffected\n    }\n    struct PlayerRoundData {\n        uint256 eth;    // eth player has added to round \n        uint256[] purchaseIDs;   // keys\n        uint256 keyCount;\n    }\n    struct RoundSetting {\n        uint256 id;\n        uint256 limit;   \n        uint256 perShare; \n        uint256 shareMax;   \n        bool isValue;\n    }\n    struct Round {\n        uint256 plyr;   // pID of player in win\n        uint256 end;    // time ends/ended\n        bool ended;     // has round end function been ran\n        uint256 start;   // time round started\n\n        uint256 keyCount;   // keys\n        BigOneData.PurchaseRecord[] purchases;  \n        uint256 eth;    // total eth in\n        uint256 pot;    // eth to pot (during round) / final amount paid to winner (after round ends)\n\n        uint256 typeID;\n        uint256 count;\n    }\n    struct PurchaseRecord {\n        uint256 plyr;   \n        uint256 start;\n        uint256 end;\n    }\n\n}\n\n\nlibrary NameFilter {\n\n    function nameFilter(string _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n\n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n\n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n\n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n\n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 ||\n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n\n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;\n            }\n        }\n\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n\n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n\nlibrary SafeMath \n{\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "bytecode": "608060405260008054600160a060020a0319908116331790915560018054821673dcd90ea01e441654c9e8e8fcfbf407781d1962871790556002805490911673af63842fb4a9b3769e0e1b7dab9c5068db78d3d3179055600e805460ff1916905534801561006c57600080fd5b50600060038190556004556144fa806100866000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461039c578063079ce327146104265780630c66adf8146104465780630f14d0ae146104ae57806310f01eba146104d857806324c33d33146104f95780632d741372146105585780632e19ebdc1461057c5780633136c61114610594578063349cdcac146105a95780633ccfd60b146105c75780633ddd4698146105dc57806349cc635d14610638578063624ae5c0146106625780636306643414610677578063633891c41461068f5780636395a91c146106a7578063685ffd83146106ec578063743c006b1461073f57806382bfc7391461075a5780638f38f30914610781578063921dec211461078f57806395d89b411461039c57806398a0871d146107e25780639d8c428e146107f9578063a2bccae914610817578063a65b37a11461084b578063b260c42a14610859578063ba85571c14610871578063d53b2679146108b3578063de7874f3146108dc575b600e5460009060ff1615156001146101ee576040805160e560020a62461bcd028152602060048201526029602482015260008051602061448f833981519152604482015260008051602061440f833981519152606482015290519081900360840190fd5b33803b8015610235576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b60016000819052600a6020527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bcb5434919060ff1615156102ad576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060020154821015610304576040805160e560020a62461bcd028152602060048201526013602482015260008051602061442f833981519152604482015290519081900360640190fd5b6000818152600a602052604090206001015482111561035b576040805160e560020a62461bcd028152602060048201526013602482015260008051602061444f833981519152604482015290519081900360640190fd5b61036361093f565b336000908152600560209081526040808320548084526007909252909120600601549095506103959086906001610bcb565b5050505050005b3480156103a857600080fd5b506103b1610cf9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103eb5781810151838201526020016103d3565b50505050905090810190601f1680156104185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043257600080fd5b50610444600435602435604435610d30565b005b34801561045257600080fd5b5061045e600435610f89565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561049a578181015183820152602001610482565b505050509050019250505060405180910390f35b3480156104ba57600080fd5b506104c6600435611119565b60408051918252519081900360200190f35b3480156104e457600080fd5b506104c6600160a060020a036004351661112b565b34801561050557600080fd5b5061051160043561113d565b60408051998a5260208a0198909852951515888801526060880194909452608087019290925260a086015260c085015260e084015261010083015251908190036101200190f35b34801561056457600080fd5b5061045e600160a060020a036004351660243561118c565b34801561058857600080fd5b506104c660043561131f565b3480156105a057600080fd5b506104c6611331565b3480156105b557600080fd5b50610444600435602435604435611337565b3480156105d357600080fd5b5061044461156c565b6040805160206004803580820135601f810184900484028501840190955284845261044494369492936024939284019190819084018382808284375094975050600160a060020a038535169550505050506020013515156117fe565b34801561064457600080fd5b50610444600435600160a060020a03602435166044356064356119d3565b34801561066e57600080fd5b506104c6611b55565b34801561068357600080fd5b5061045e600435611b5b565b34801561069b57600080fd5b5061045e600435611c0f565b3480156106b357600080fd5b506106bf600435611d26565b60408051958652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6040805160206004803580820135601f8101849004840285018401909552848452610444943694929360249392840191908190840183828082843750949750508435955050505050602001351515611d58565b34801561074b57600080fd5b506104c6600435602435611e38565b34801561076657600080fd5b50610444600160a060020a0360043516602435604435611ec0565b61044460043560243561211a565b6040805160206004803580820135601f8101849004840285018401909552848452610444943694929360249392840191908190840183828082843750949750508435955050505050602001351515612355565b610444600160a060020a0360043516602435612435565b34801561080557600080fd5b50610444600435602435604435612697565b34801561082357600080fd5b506108326004356024356127ab565b6040805192835260208301919091528051918290030190f35b6104446004356024356127cf565b34801561086557600080fd5b50610444600435612a23565b34801561087d57600080fd5b50610895600160a060020a0360043516602435612bcd565b60408051938452602084019290925282820152519081900360600190f35b3480156108bf57600080fd5b506108c8612c89565b604080519115158252519081900360200190f35b3480156108e857600080fd5b506108f4600435612c92565b60408051600160a060020a0390991689526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b336000908152600560205260408120549080821515610bc657604080517fe56556a90000000000000000000000000000000000000000000000000000000081523360048201529051735576250692275701efde5eeb51596e2d9460790b9163e56556a99160248083019260209291908290030181600087803b1580156109c457600080fd5b505af11580156109d8573d6000803e3d6000fd5b505050506040513d60208110156109ee57600080fd5b5051604080517f82e37b2c000000000000000000000000000000000000000000000000000000008152600481018390529051919450735576250692275701efde5eeb51596e2d9460790b916382e37b2c916024808201926020929091908290030181600087803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b505050506040513d6020811015610a8b57600080fd5b5051604080517f593a6297000000000000000000000000000000000000000000000000000000008152600481018690529051919350735576250692275701efde5eeb51596e2d9460790b9163593a6297916024808201926020929091908290030181600087803b158015610afe57600080fd5b505af1158015610b12573d6000803e3d6000fd5b505050506040513d6020811015610b2857600080fd5b505133600081815260056020908152604080832088905587835260079091529020805473ffffffffffffffffffffffffffffffffffffffff1916909117905590508115610b94576000828152600660209081526040808320869055858352600790915290206001018290555b8015801590610ba35750828114155b15610bbd5760008381526007602052604090206006018190555b610bc683612ce1565b505050565b6000818152600c6020908152604080832054600a835281842060030154818552600b909352922060040154108015610c0f57506000818152600b6020526040902054155b15610c2657610c218185348686612d94565b610cf3565b6000828152600a6020908152604080832060030154848452600b9092529091206004015410801590610c6457506000818152600b6020526040902054155b8015610c8257506000818152600b602052604090206002015460ff16155b15610cac576000818152600b60205260409020600201805460ff19166001179055610cac82613224565b600084815260076020526040808220549051600160a060020a03909116913480156108fc02929091818181858888f19350505050158015610cf1573d6000803e3d6000fd5b505b50505050565b60408051808201909152600681527f6269674f6e650000000000000000000000000000000000000000000000000000602082015281565b600e54600090819060ff161515600114610d96576040805160e560020a62461bcd028152602060048201526029602482015260008051602061448f833981519152604482015260008051602061440f833981519152606482015290519081900360840190fd5b33803b8015610ddd576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b6000858152600a60205260409020600401548690869060ff161515610e3a576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060020154821015610e91576040805160e560020a62461bcd028152602060048201526013602482015260008051602061442f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060010154821115610ee8576040805160e560020a62461bcd028152602060048201526013602482015260008051602061444f833981519152604482015290519081900360640190fd5b336000908152600560205260409020549550881580610f17575060008681526007602052604090206001015489145b15610f35576000868152600760205260409020600601549450610f72565b6000898152600660208181526040808420548a8552600790925290922001549095508514610f725760008681526007602052604090206006018590555b610f7e86868a8a613586565b505050505050505050565b6000818152600a6020526040812060040154606091908290849060ff161515610fea576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000858152600c602052604090819020548151600680825260e08201909352909450908160200160208202803883390190505091508482600081518110151561102f57fe5b60209081029091010152815183908390600190811061104a57fe5b60209081029091018101919091526000848152600b909152604090206009015482518390600290811061107957fe5b60209081029091018101919091526000848152600b90915260409020600401548251839060039081106110a857fe5b60209081029091018101919091526000848152600b90915260409020600601548251839060049081106110d757fe5b60209081029091018101919091526000848152600b909152604090206007015482518390600590811061110657fe5b6020908102919091010152509392505050565b600c6020526000908152604090205481565b60056020526000908152604090205481565b600b602052600090815260409020805460018201546002830154600384015460048501546006860154600787015460088801546009909801549697959660ff9095169593949293919290919089565b6060600080606060008060006111a06143ec565b6000898152600c6020908152604080832054600160a060020a038e16845260058352818420548085526008845282852082865284528285206002015483518181528186028101909501909352909a5098508015611207578160200160208202803883390190505b50955060009450600093505b60008781526008602090815260408083208b84529091529020600101548410156113105760008781526008602090815260408083208b8452909152902060010180548590811061125f57fe5b90600052602060002001549250600b60008981526020019081526020016000206005018381548110151561128f57fe5b6000918252602091829020604080516060810182526003909302909101805480845260018201549484019490945260020154908201529250871415611305575060208101515b60408201518111611305578086868151811015156112ef57fe5b60209081029091010152600194850194016112d5565b600190930192611213565b50939998505050505050505050565b60066020526000908152604090205481565b60045481565b600e5460009060ff16151560011461139b576040805160e560020a62461bcd028152602060048201526029602482015260008051602061448f833981519152604482015260008051602061440f833981519152606482015290519081900360840190fd5b33803b80156113e2576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b6000848152600a60205260409020600401548590859060ff16151561143f576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060020154821015611496576040805160e560020a62461bcd028152602060048201526013602482015260008051602061442f833981519152604482015290519081900360640190fd5b6000818152600a60205260409020600101548211156114ed576040805160e560020a62461bcd028152602060048201526013602482015260008051602061444f833981519152604482015290519081900360640190fd5b33600090815260056020526040902054945087158061150b57508488145b15611529576000858152600760205260409020600601549750611556565b60008581526007602052604090206006015488146115565760008581526007602052604090206006018890555b61156285898989613586565b5050505050505050565b600e5460009081908190819060ff1615156001146115d6576040805160e560020a62461bcd028152602060048201526029602482015260008051602061448f833981519152604482015260008051602061440f833981519152606482015290519081900360840190fd5b33803b801561161d576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b33600090815260056020526040902054429650945061163b85613692565b9350600084111561179b5761165784600a63ffffffff61370416565b600154909350600160a060020a03166108fc61167a85600263ffffffff61370416565b6040518115909202916000818181858888f193505050501580156116a2573d6000803e3d6000fd5b50600254600160a060020a03166108fc6116c385600a63ffffffff61370416565b6040518115909202916000818181858888f193505050501580156116eb573d6000803e3d6000fd5b50600054600160a060020a03166108fc61171d600461171187600a63ffffffff61370416565b9063ffffffff61372716565b6040518115909202916000818181858888f19350505050158015611745573d6000803e3d6000fd5b50600085815260076020526040902054600160a060020a03166108fc611771868663ffffffff61375c16565b6040518115909202916000818181858888f19350505050158015611799573d6000803e3d6000fd5b505b6000858152600760209081526040918290206001015482513381529182015280820186905260608101889052905186917f8f36579a548bc439baa172a6521207464154da77f411e2da3db2f53affe6cc3a919081900360800190a2505050505050565b6000808080808033803b801561184c576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b6118558b613773565b604080517faa4d490b000000000000000000000000000000000000000000000000000000008152336004820181905260248201849052600160a060020a038e1660448301528c151560648301528251939b509950349850735576250692275701efde5eeb51596e2d9460790b9263aa4d490b928a926084808201939182900301818588803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b50505050506040513d604081101561191157600080fd5b508051602091820151600160a060020a038a16600090815260059093526040909220549096509094509250841561194b5761194b83612ce1565b600084815260076020908152604091829020805460019091015483518915158152928301889052600160a060020a03918216838501526060830152608082018990524260a083015291518a928a169186917fde4c6761faa6394046978e8ea85d6f8f9c55f4e3570549381d9895cb6f4ac2689181900360c00190a45050505050505050505050565b33735576250692275701efde5eeb51596e2d9460790b14611a3e576040805160e560020a62461bcd02815260206004820152601d60248201527f796f7572206e6f7420757365724d616e6167657220636f6e7472616374000000604482015290519081900360640190fd5b600160a060020a0383166000908152600560205260409020548414611a7957600160a060020a03831660009081526005602052604090208490555b6000828152600660205260409020548414611aa05760008281526006602052604090208490555b600084815260076020526040902054600160a060020a03848116911614611af6576000848152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790555b6000848152600760205260409020600101548214611b235760008481526007602052604090206001018290555b6000848152600760205260409020600601548114610cf357600084815260076020526040902060060181905550505050565b60035481565b604080516003808252608082019092526060918291906020820183803883395050506000848152600760205260408120600201548251929350918391908110611ba057fe5b6020908102909101810191909152600084815260079091526040902060030154815182906001908110611bcf57fe5b6020908102909101810191909152600084815260079091526040902060040154815182906002908110611bfe57fe5b602090810290910101529050919050565b604080516003808252608082019092526060918291906020820183803883395050506000848152600760208190526040822001548251929350918391908110611c5457fe5b60209081029091010152805181906000908110611c6d57fe5b6020908102909101015115611d205760076000826000815181101515611c8f57fe5b90602001906020020151815260200190815260200160002060070154816001815181101515611cba57fe5b60209081029091010152805181906001908110611cd357fe5b6020908102909101015115611d205760076000826001815181101515611cf557fe5b90602001906020020151815260200190815260200160002060070154816002815181101515611bfe57fe5b92915050565b600a60205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6000808080808033803b8015611da6576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b611daf8b613773565b604080517f745ea0c1000000000000000000000000000000000000000000000000000000008152336004820181905260248201849052604482018e90528c151560648301528251939b509950349850735576250692275701efde5eeb51596e2d9460790b9263745ea0c1928a926084808201939182900301818588803b1580156118e657600080fd5b6000818152600a6020526040812060040154829060ff161515611e93576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000838152600a6020526040902060020154611eb690859063ffffffff61372716565b91505b5092915050565b600e54600090819060ff161515600114611f26576040805160e560020a62461bcd028152602060048201526029602482015260008051602061448f833981519152604482015260008051602061440f833981519152606482015290519081900360840190fd5b33803b8015611f6d576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b6000858152600a60205260409020600401548690869060ff161515611fca576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060020154821015612021576040805160e560020a62461bcd028152602060048201526013602482015260008051602061442f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060010154821115612078576040805160e560020a62461bcd028152602060048201526013602482015260008051602061444f833981519152604482015290519081900360640190fd5b336000908152600560205260409020549550600160a060020a03891615806120a85750600160a060020a03891633145b156120c6576000868152600760205260409020600601549450610f72565b600160a060020a0389166000908152600560209081526040808320548984526007909252909120600601549095508514610f72576000868152600760205260409020600601859055610f7e86868a8a613586565b600e5460009060ff16151560011461217e576040805160e560020a62461bcd028152602060048201526029602482015260008051602061448f833981519152604482015260008051602061440f833981519152606482015290519081900360840190fd5b33803b80156121c5576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b6000848152600a60205260409020600401543490859060ff161515612222576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060020154821015612279576040805160e560020a62461bcd028152602060048201526013602482015260008051602061442f833981519152604482015290519081900360640190fd5b6000818152600a60205260409020600101548211156122d0576040805160e560020a62461bcd028152602060048201526013602482015260008051602061444f833981519152604482015290519081900360640190fd5b6122d861093f565b3360009081526005602052604090205494508615806122f657508487145b15612314576000858152600760205260409020600601549650612341565b60008581526007602052604090206006015487146123415760008581526007602052604090206006018790555b61234c858888610bcb565b50505050505050565b6000808080808033803b80156123a3576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b6123ac8b613773565b604080517fc0942dfd000000000000000000000000000000000000000000000000000000008152336004820181905260248201849052604482018e90528c151560648301528251939b509950349850735576250692275701efde5eeb51596e2d9460790b9263c0942dfd928a926084808201939182900301818588803b1580156118e657600080fd5b600e54600090819060ff16151560011461249b576040805160e560020a62461bcd028152602060048201526029602482015260008051602061448f833981519152604482015260008051602061440f833981519152606482015290519081900360840190fd5b33803b80156124e2576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b6000858152600a60205260409020600401543490869060ff16151561253f576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060020154821015612596576040805160e560020a62461bcd028152602060048201526013602482015260008051602061442f833981519152604482015290519081900360640190fd5b6000818152600a60205260409020600101548211156125ed576040805160e560020a62461bcd028152602060048201526013602482015260008051602061444f833981519152604482015290519081900360640190fd5b6125f561093f565b336000908152600560205260409020549550600160a060020a03881615806126255750600160a060020a03881633145b1561264357600086815260076020526040902060060154945061268c565b600160a060020a038816600090815260056020908152604080832054898452600790925290912060060154909550851461268c5760008681526007602052604090206006018590555b611562868689610bcb565b600054600160a060020a031633146126f9576040805160e560020a62461bcd02815260206004820152601760248201527f6d73672073656e646572206973206e6f74206120646576000000000000000000604482015290519081900360640190fd5b600e5460ff1615612754576040805160e560020a62461bcd02815260206004820152601660248201527f4269674f6e6520616c7265616479207374617274656400000000000000000000604482015290519081900360640190fd5b6004805460019081018083556000818152600a60205260408082209283559183019690965582548652808620600201949094558154855283852060030192909255805484529190922001805460ff19169091179055565b60086020908152600092835260408084209091529082529020805460029091015482565b600e54600090819060ff161515600114612835576040805160e560020a62461bcd028152602060048201526029602482015260008051602061448f833981519152604482015260008051602061440f833981519152606482015290519081900360840190fd5b33803b801561287c576040805160e560020a62461bcd02815260206004820152601160248201526000805160206144af833981519152604482015290519081900360640190fd5b6000858152600a60205260409020600401543490869060ff1615156128d9576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060020154821015612930576040805160e560020a62461bcd028152602060048201526013602482015260008051602061442f833981519152604482015290519081900360640190fd5b6000818152600a6020526040902060010154821115612987576040805160e560020a62461bcd028152602060048201526013602482015260008051602061444f833981519152604482015290519081900360640190fd5b61298f61093f565b3360009081526005602052604090205495508715806129be575060008681526007602052604090206001015488145b156129dc57600086815260076020526040902060060154945061268c565b6000888152600660208181526040808420548a855260079092529092200154909550851461268c576000868152600760205260409020600601859055611562868689610bcb565b60008054600160a060020a03163314612a86576040805160e560020a62461bcd02815260206004820152601760248201527f6d73672073656e646572206973206e6f74206120646576000000000000000000604482015290519081900360640190fd5b600e5460ff1615612ae1576040805160e560020a62461bcd02815260206004820152601860248201527f4269674f6e6520616c7265616479206163746976617465640000000000000000604482015290519081900360640190fd5b600454600010612b3b576040805160e560020a62461bcd02815260206004820152601360248201527f4e6f20726f756e64206d6f646520736574757000000000000000000000000000604482015290519081900360640190fd5b50600e805460ff1916600117905560005b600454811015612bc9576003805460019081018083556000908152600b60205260408082204290850155835482528082208584016008909101558354825280822060090192909255825481529081206007015554612baa9083613f86565b60035460019091016000818152600c6020526040902091909155612b4c565b5050565b6000818152600a60205260408120600401548190819081908190869060ff161515612c30576040805160e560020a62461bcd02815260206004820152600f602482015260008051602061446f833981519152604482015290519081900360640190fd5b50505060009384525050600c6020908152604080842054600160a060020a039590951684526005825280842054808552600883528185209585529482528084205485855260079092529092206001015492939192919050565b600e5460ff1681565b600760208190526000918252604090912080546001820154600283015460038401546004850154600586015460068701549690970154600160a060020a03909516969395929491939092909188565b604080516000194301406020808301919091526c010000000000000000000000003302828401524460548301524260748084019190915283518084039091018152609490920192839052815191929182918401908083835b60208310612d585780518252601f199092019160209182019101612d39565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120600096875260099091529190942055505050565b6000806000612da16143ec565b60008881526008602090815260408083208c84529091529020600201541515612dce57612dce888a61402a565b6000858152600a60209081526040808320600301548c8452600b9092529091206004015410156131e5576000858152600a6020818152604080842060028101548e8652600b845291852060040154948a905292909152600390910154612e3e92611711919063ffffffff61375c16565b935083871115612e9057612e79612e5b888663ffffffff61375c16565b60008a8152600760205260409020600301549063ffffffff61403f16565b600089815260076020526040902060030155612e94565b8693505b6000858152600a6020526040902060020154612eb790859063ffffffff61370416565b60008a8152600b6020526040902060040154909350612edc908463ffffffff61403f16565b915087816000018181525050600b60008a81526020019081526020016000206004015481602001818152505060018203816040018181525050600b60008a815260200190815260200160002060050181908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000015560208201518160010155604082015181600201555050506008600089815260200190815260200160002060008a81526020019081526020016000206001016001600b60008c81526020019081526020016000206005018054905003908060018154018082558091505090600182039060005260206000200160009091929091909150555082600860008a815260200190815260200160002060008b815260200190815260200160002060020160008282540192505081905550613054600860008a815260200190815260200160002060008b8152602001908152602001600020600001548561403f90919063ffffffff16565b60008981526008602090815260408083208d8452825280832093909355600b905220600481018390556006015461309290859063ffffffff61403f16565b60008a8152600b60205260409020600601556130e76130c960646130bd87605f63ffffffff61372716565b9063ffffffff61370416565b60008b8152600b60205260409020600701549063ffffffff61403f16565b60008a8152600b602052604090206007015561310589898689614051565b6000858152600a60209081526040808320600301548c8452600b909252909120600401541080159061314357506000898152600b6020526040902054155b801561316157506000898152600b602052604090206002015460ff16155b1561318b576000898152600b60205260409020600201805460ff1916600117905561318b85613224565b6000898152600b60209081526040918290206007015482518c815291820187905281830152905133918a917f9d78320cb656c118968fe942542819f8d229f882bdfacb67ac38d28818cad5c69181900360600190a3610f7e565b600088815260076020526040902060030154613207908863ffffffff61403f16565b600089815260076020526040902060030155505050505050505050565b6000818152600c6020908152604080832054808452600b835281842060040154600d8452828520543386526005855283862054600019018652600985528386205484518087019290925281850152446060820152426080808301919091528451808303909101815260a090910193849052805192959485948594859461330594909390929182918401908083835b602083106132d15780518252601f1990920191602091820191016132b2565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120939250506141519050565b9350600091505b6000858152600b60205260409020600501548210156133db576000858152600b6020526040902060050180548591908490811061334557fe5b9060005260206000209060030201600101541115801561339557506000858152600b6020526040902060050180548591908490811061338057fe5b90600052602060002090600302016002015410155b156133d0576000858152600b602052604090206005018054839081106133b757fe5b90600052602060002090600302016000015492506133db565b60019091019061330c565b8215613483576000868152600a602052604090206001015461340b906064906130bd90605a63ffffffff61372716565b60008481526007602052604090206002015490915061343190829063ffffffff61403f16565b600084815260076020818152604080842060020194909455888352600b9052919020015461348390879061346b908463ffffffff61375c16565b60008681526007602081905260409091200154614172565b6000858152600b60209081526040808320868155426001909101558583526007825291829020548251888152918201899052600160a060020a031681830152606081018690526080810183905290517f1fe904dad60c6df04294c594b2dc493d784aa84b59d8a6e3a5e68c925f546f7c9181900360a00190a16003805460019081018083556000908152600b602090815260408083204290860155845483528083206008018b9055898352808320600990810154865485528285209501940193909355835482528282206007018290559254888252600d90935220546135699190613f86565b50506003546000948552600c602052604090942093909355505050565b6000818152600c6020908152604080832054600a835281842060030154818552600b9093529220600401541080156135ca57506000818152600b6020526040902054155b1561360c576135e8836135dc87613692565b9063ffffffff61375c16565b6000868152600760205260409020600301556136078186858786612d94565b610cf1565b6000828152600a6020908152604080832060030154848452600b909252909120600401541080159061364a57506000818152600b6020526040902054155b801561366857506000818152600b602052604090206002015460ff16155b15610cf1576000818152600b60205260409020600201805460ff19166001179055610cf182613224565b60008181526007602052604081206004810154600382015460029092015483926136d292916136c69163ffffffff61403f16565b9063ffffffff61403f16565b90506000811115611d205760009283526007602052604083206002810184905560038101849055600401929092555090565b60008080831161371357600080fd5b828481151561371e57fe5b04949350505050565b60008083151561373a5760009150611eb9565b5082820282848281151561374a57fe5b041461375557600080fd5b9392505050565b6000808383111561376c57600080fd5b5050900390565b805160009082908280806020841180159061378e5750600084115b151561380a576040805160e560020a62461bcd02815260206004820152602a60248201527f737472696e67206d757374206265206265747765656e203120616e642033322060448201527f6368617261637465727300000000000000000000000000000000000000000000606482015290519081900360840190fd5b84600081518110151561381957fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a02141580156138805750846001850381518110151561385857fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214155b15156138fc576040805160e560020a62461bcd02815260206004820152602560248201527f737472696e672063616e6e6f74207374617274206f7220656e6420776974682060448201527f7370616365000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b84600081518110151561390b57fe5b90602001015160f860020a900460f860020a02600160f860020a031916603060f860020a021415613a4e5784600181518110151561394557fe5b90602001015160f860020a900460f860020a02600160f860020a031916607860f860020a02141515156139c2576040805160e560020a62461bcd02815260206004820152601b60248201527f737472696e672063616e6e6f7420737461727420776974682030780000000000604482015290519081900360640190fd5b8460018151811015156139d157fe5b90602001015160f860020a900460f860020a02600160f860020a031916605860f860020a0214151515613a4e576040805160e560020a62461bcd02815260206004820152601b60248201527f737472696e672063616e6e6f7420737461727420776974682030580000000000604482015290519081900360640190fd5b600091505b83821015613f1e5784517f400000000000000000000000000000000000000000000000000000000000000090869084908110613a8b57fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015613aff575084517f5b0000000000000000000000000000000000000000000000000000000000000090869084908110613ae057fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b15613b6c578482815181101515613b1257fe5b90602001015160f860020a900460f860020a0260f860020a900460200160f860020a028583815181101515613b4357fe5b906020010190600160f860020a031916908160001a905350821515613b6757600192505b613f13565b8482815181101515613b7a57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a021480613c4a575084517f600000000000000000000000000000000000000000000000000000000000000090869084908110613bd657fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015613c4a575084517f7b0000000000000000000000000000000000000000000000000000000000000090869084908110613c2b57fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b80613cf4575084517f2f0000000000000000000000000000000000000000000000000000000000000090869084908110613c8057fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015613cf4575084517f3a0000000000000000000000000000000000000000000000000000000000000090869084908110613cd557fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b1515613d70576040805160e560020a62461bcd02815260206004820152602260248201527f737472696e6720636f6e7461696e7320696e76616c696420636861726163746560448201527f7273000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8482815181101515613d7e57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a021415613e5d578482600101815181101515613dba57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214151515613e5d576040805160e560020a62461bcd02815260206004820152602860248201527f737472696e672063616e6e6f7420636f6e7461696e20636f6e7365637574697660448201527f6520737061636573000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b82158015613f09575084517f300000000000000000000000000000000000000000000000000000000000000090869084908110613e9657fe5b90602001015160f860020a900460f860020a02600160f860020a0319161080613f09575084517f390000000000000000000000000000000000000000000000000000000000000090869084908110613eea57fe5b90602001015160f860020a900460f860020a02600160f860020a031916115b15613f1357600192505b600190910190613a53565b600183151514613f78576040805160e560020a62461bcd02815260206004820152601d60248201527f737472696e672063616e6e6f74206265206f6e6c79206e756d62657273000000604482015290519081900360640190fd5b505050506020015192915050565b80824442604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040526040518082805190602001908083835b60208310613fed5780518252601f199092019160209182019101613fce565b51815160209384036101000a600019018019909216911617905260408051929094018290039091206000978852600d909152919095205550505050565b60009182526007602052604090912060050155565b60008282018381101561375557600080fd5b600061405f858585856142e4565b90506000811115610cf157600154600160a060020a03166108fc61408a83600263ffffffff61370416565b6040518115909202916000818181858888f193505050501580156140b2573d6000803e3d6000fd5b50600254600160a060020a03166108fc6140d383600a63ffffffff61370416565b6040518115909202916000818181858888f193505050501580156140fb573d6000803e3d6000fd5b50600054600160a060020a03166108fc614121600461171185600a63ffffffff61370416565b6040518115909202916000818181858888f19350505050158015614149573d6000803e3d6000fd5b505050505050565b600081151561415f57600080fd5b818381151561416a57fe5b069392505050565b6000838152600a6020526040812060010154819061419790601463ffffffff61370416565b9150838211156141a9578391506142a5565b6141b9848363ffffffff61375c16565b905060008111156142a557600154600160a060020a03166108fc6141e483600263ffffffff61370416565b6040518115909202916000818181858888f1935050505015801561420c573d6000803e3d6000fd5b50600254600160a060020a03166108fc61422d83600a63ffffffff61370416565b6040518115909202916000818181858888f19350505050158015614255573d6000803e3d6000fd5b50600054600160a060020a03166108fc61427b600461171185600a63ffffffff61370416565b6040518115909202916000818181858888f193505050501580156142a3573d6000803e3d6000fd5b505b6000838152600760205260409020600401546142c890839063ffffffff61403f16565b6000938452600760205260409093206004019290925550505050565b600080806142f985601463ffffffff61370416565b9050831580159061430a5750858414155b801561432c5750600084815260076020526040902054600160a060020a031615155b156143cf57600086815260076020819052604080832090910186905585825290206004015461436290829063ffffffff61403f16565b600085815260076020908152604091829020600481019390935591548151600160a060020a0390911681529182018390524282820152518791899187917f15ea6d33023704ba2aa6e091de1c802eb29263df7837deb12b300d117206a9e0919081900360600190a46143e2565b6143df828263ffffffff61403f16565b91505b5095945050505050565b606060405190810160405280600081526020016000815260200160008152509056006e20646973636f726400000000000000000000000000000000000000000000006c657373207468616e206d696e20616c6c6f77000000000000000000000000006d6f7265207468616e206d617820616c6c6f7700000000000000000000000000696e7661696c64206d6f64652069640000000000000000000000000000000000697473206e6f74207265616479207965742e2020636865636b203f6574612069736f7272792068756d616e73206f6e6c79000000000000000000000000000000a165627a7a72305820a306e10f6415e400ee5c4fe06e5eb4d28ff7e348c22b81c0b863633db6c8ed460029"
}