{
  "address": "0x645e758796408efDD65bBbD877E8eBcEEB231F4C",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NCStableCoinInterestRateModel",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.24;\n\nimport \"./Exponential.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./CarefulMath.sol\";\nimport \"./InterestRateModel.sol\";\nimport \"./LiquidationChecker.sol\";\n\n/**\n  * @title The Compound Stable Coin Interest Rate Model with LiquidationChecker\n  * @author Compound\n  * @notice See Section 2.4 of the Compound Whitepaper\n  */\ncontract NCStableCoinInterestRateModel is Exponential, LiquidationChecker {\n\n    uint constant oneMinusSpreadBasisPoints = 8500;\n    uint constant blocksPerYear = 2102400;\n    uint constant mantissaTwoPointFivePercent = 25 * 10**15;\n    uint constant mantissaZeroPointFivePercent = 5 * 10**15;\n\n    enum IRError {\n        NO_ERROR,\n        FAILED_TO_ADD_CASH_PLUS_BORROWS,\n        FAILED_TO_GET_EXP,\n        FAILED_TO_MUL_PRODUCT_TIMES_BORROW_RATE\n    }\n\n    constructor(address moneyMarket, address liquidator) LiquidationChecker(moneyMarket, liquidator) {}\n\n    /*\n     * @dev Calculates the utilization rate (borrows / (cash + borrows)) as an Exp\n     */\n    function getUtilizationRate(uint cash, uint borrows) pure internal returns (IRError, Exp memory) {\n        if (borrows == 0) {\n            // Utilization rate is zero when there's no borrows\n            return (IRError.NO_ERROR, Exp({mantissa: 0}));\n        }\n\n        (Error err0, uint cashPlusBorrows) = add(cash, borrows);\n        if (err0 != Error.NO_ERROR) {\n            return (IRError.FAILED_TO_ADD_CASH_PLUS_BORROWS, Exp({mantissa: 0}));\n        }\n\n        (Error err1, Exp memory utilizationRate) = getExp(borrows, cashPlusBorrows);\n        if (err1 != Error.NO_ERROR) {\n            return (IRError.FAILED_TO_GET_EXP, Exp({mantissa: 0}));\n        }\n\n        return (IRError.NO_ERROR, utilizationRate);\n    }\n\n    /*\n     * @dev Calculates the utilization and borrow rates for use by get{Supply,Borrow}Rate functions\n     */\n    function getUtilizationAndAnnualBorrowRate(uint cash, uint borrows) pure internal returns (IRError, Exp memory, Exp memory) {\n        (IRError err0, Exp memory utilizationRate) = getUtilizationRate(cash, borrows);\n        if (err0 != IRError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}), Exp({mantissa: 0}));\n        }\n\n        // Borrow Rate is 2.5% + UtilizationRate * 20%\n        // 20% of utilizationRate, is `rate * 2 / 10`\n        (Error err1, Exp memory utilizationRateMuled) = mulScalar(utilizationRate, 2);\n        // `mulScalar` only overflows when the product is >= 2^256.\n        // utilizationRate is a real number on the interval [0,1], which means that\n        // utilizationRate.mantissa is in the interval [0e18,1e18], which means that 2 times\n        // that is in the interval [0e18,2e18]. That interval has no intersection with 2^256, and therefore\n        // this can never overflow. As such, we assert.\n        assert(err1 == Error.NO_ERROR);\n\n        (Error err2, Exp memory utilizationRateScaled) = divScalar(utilizationRateMuled, 10);\n        // 10 is a constant, and therefore cannot be zero, which is the only error case of divScalar.\n        assert(err2 == Error.NO_ERROR);\n\n        // Add the 2.5% for (2.5% + 20% * Ua)\n        (Error err3, Exp memory annualBorrowRate) = addExp(utilizationRateScaled, Exp({mantissa: mantissaTwoPointFivePercent}));\n        // `addExp` only fails when the addition of mantissas overflow.\n        // As per above, utilizationRateMuled is capped at 2e18,\n        // and utilizationRateScaled is capped at 2e17.\n        // and the rate constant 2.5% is capped at 0.25e17\n        // therefore, addition is capped at 2.25e17, which is less than 2^256.\n        assert(err3 == Error.NO_ERROR);\n\n        return (IRError.NO_ERROR, utilizationRate, annualBorrowRate);\n    }\n\n    /**\n      * @notice Gets the current supply interest rate based on the given asset, total cash and total borrows\n      * @dev The return value should be scaled by 1e18, thus a return value of\n      *      `(true, 1000000000000)` implies an interest rate of 0.000001 or 0.0001% *per block*.\n      * @param _asset The asset to get the interest rate of\n      * @param cash The total cash of the asset in the market\n      * @param borrows The total borrows of the asset in the market\n      * @return Success or failure and the supply interest rate per block scaled by 10e18\n      */\n    function getSupplyRate(address _asset, uint cash, uint borrows) public view returns (uint, uint) {\n        _asset; // pragma ignore unused argument\n\n        (IRError err0, Exp memory utilizationRate0, Exp memory annualBorrowRate) = getUtilizationAndAnnualBorrowRate(cash, borrows);\n        if (err0 != IRError.NO_ERROR) {\n            return (uint(err0), 0);\n        }\n\n        // We're going to multiply the utilization rate by the spread's numerator\n        (Error err1, Exp memory utilizationRate1) = mulScalar(utilizationRate0, oneMinusSpreadBasisPoints);\n        // mulScalar only overflows when product is greater than or equal to 2^256.\n        // utilization rate's mantissa is a number between [0e18,1e18]. That means that\n        // utilizationRate1 is a value between [0e18,8.5e21]. This is strictly less than 2^256.\n        assert(err1 == Error.NO_ERROR);\n\n        // Next multiply this product times the borrow rate\n        (Error err2, Exp memory supplyRate0) = mulExp(utilizationRate1, annualBorrowRate);\n        // If the product of the mantissas for mulExp are both less than 2^256,\n        // then this operation will never fail. TODO: Verify.\n        // We know that borrow rate is in the interval [0, 2.25e17] from above.\n        // We know that utilizationRate1 is in the interval [0, 9e21] from directly above.\n        // As such, the multiplication is in the interval of [0, 2.025e39]. This is strictly\n        // less than 2^256 (which is about 10e77).\n        assert(err2 == Error.NO_ERROR);\n\n        // And then divide down by the spread's denominator (basis points divisor)\n        // as well as by blocks per year.\n        (Error err3, Exp memory supplyRate1) = divScalar(supplyRate0, 10000 * blocksPerYear); // basis points * blocks per year\n        // divScalar only fails when divisor is zero. This is clearly not the case.\n        assert(err3 == Error.NO_ERROR);\n\n        (Error err4, Exp memory floorSupplyRate) = divScalar(Exp({mantissa: mantissaZeroPointFivePercent}), blocksPerYear);\n        // 0.5% APR / blocksPerYear. divScalar only fails when divisor is zero. This is clearly not the case.\n        assert(err4 == Error.NO_ERROR);\n\n        if (lessThanExp(supplyRate1, floorSupplyRate)) {\n          return (uint(IRError.NO_ERROR), floorSupplyRate.mantissa);\n        } else {\n          return (uint(IRError.NO_ERROR), supplyRate1.mantissa);\n        }\n    }\n\n    /**\n      * @notice Gets the current borrow interest rate based on the given asset, total cash and total borrows\n      * @dev The return value should be scaled by 1e18, thus a return value of\n      *      `(true, 1000000000000)` implies an interest rate of 0.000001 or 0.0001% *per block*.\n      * @param asset The asset to get the interest rate of\n      * @param cash The total cash of the asset in the market\n      * @param borrows The total borrows of the asset in the market\n      * @return Success or failure and the borrow interest rate per block scaled by 10e18\n      */\n    function getBorrowRate(address asset, uint cash, uint borrows) public returns (uint, uint) {\n        require(isAllowed(asset, cash, borrows));\n\n        (IRError err0, Exp memory _utilizationRate, Exp memory annualBorrowRate) = getUtilizationAndAnnualBorrowRate(cash, borrows);\n        if (err0 != IRError.NO_ERROR) {\n            return (uint(err0), 0);\n        }\n\n        // And then divide down by blocks per year.\n        (Error err1, Exp memory borrowRate) = divScalar(annualBorrowRate, blocksPerYear); // basis points * blocks per year\n        // divScalar only fails when divisor is zero. This is clearly not the case.\n        assert(err1 == Error.NO_ERROR);\n\n        _utilizationRate; // pragma ignore unused variable\n\n        // Note: mantissa is the rate scaled 1e18, which matches the expected result\n        return (uint(IRError.NO_ERROR), borrowRate.mantissa);\n    }\n}\n",
  "bytecode": "608060405234801561001057600080fd5b5060405160408061145e83398101806040528101908080519060200190929190805190602001909291905050508181816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690831515021790555050505050611370806100ee6000396000f300608060405260043610610077576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680620fba161461007c57806325468f68146100ab5780634046ebae146100da578063517cf73e14610131578063d6d75f51146101a3578063ed2b5a3c146101fa575b600080fd5b34801561008857600080fd5b5061009161026c565b604051808215151515815260200191505060405180910390f35b3480156100b757600080fd5b506100d860048036038101908080351515906020019092919050505061027f565b005b3480156100e657600080fd5b506100ef610387565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013d57600080fd5b50610186600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506103ad565b604051808381526020018281526020019250505060405180910390f35b3480156101af57600080fd5b506101b861056a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561020657600080fd5b5061024f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061058f565b604051808381526020018281526020019250505060405180910390f35b600160149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561036a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4c49515549444154494f4e5f434845434b45525f494e56414c49445f4c49515581526020017f494441544f52000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600160146101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060006103ba611330565b6103c2611330565b60006103cc611330565b60006103d6611330565b60006103e0611330565b60006103ea611330565b6103f48f8f610665565b9a509a509a506000600381111561040757fe5b8b600381111561041357fe5b141515610434578a600381111561042657fe5b60008090509c509c50610557565b6104408a6121346107c3565b975097506000601981111561045157fe5b88601981111561045d57fe5b14151561046657fe5b610470878a610843565b955095506000601981111561048157fe5b86601981111561048d57fe5b14151561049657fe5b6104a7856220148061271002610969565b93509350600060198111156104b857fe5b8460198111156104c457fe5b1415156104cd57fe5b6104f06020604051908101604052806611c37937e0800081525062201480610969565b915091506000601981111561050157fe5b82601981111561050d57fe5b14151561051657fe5b61052083826109e9565b15610540576000600381111561053257fe5b81600001519c509c50610557565b6000600381111561054d57fe5b83600001519c509c505b5050505050505050505050935093915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600061059c611330565b6105a4611330565b60006105ae611330565b6105b98a8a8a6109fe565b15156105c457600080fd5b6105ce8989610665565b945094509450600060038111156105e157fe5b8560038111156105ed57fe5b14151561060e5784600381111561060057fe5b600080905096509650610658565b61061b8362201480610969565b915091506000601981111561062c57fe5b82601981111561063857fe5b14151561064157fe5b6000600381111561064e57fe5b8160000151965096505b5050505050935093915050565b600061066f611330565b610677611330565b6000610681611330565b600061068b611330565b6000610695611330565b600061069f611330565b6106a98d8d610a3f565b97509750600060038111156106ba57fe5b8860038111156106c657fe5b1415156107015787602060405190810160405280600081525060206040519081016040528060008152508191508090509a509a509a506107b4565b61070c8760026107c3565b955095506000601981111561071d57fe5b86601981111561072957fe5b14151561073257fe5b61073d85600a610969565b935093506000601981111561074e57fe5b84601981111561075a57fe5b14151561076357fe5b610783836020604051908101604052806658d15e17628000815250610b2b565b915091506000601981111561079457fe5b8260198111156107a057fe5b1415156107a957fe5b600087829a509a509a505b50505050505050509250925092565b60006107cd611330565b6000806107de866000015186610b6f565b91509150600060198111156107ef57fe5b8260198111156107fb57fe5b141515610820578160206040519081016040528060008152508090509350935061083a565b600060206040519081016040528083815250809050935093505b50509250929050565b600061084d611330565b6000806000806000806108688a600001518a60000151610b6f565b955095506000601981111561087957fe5b86601981111561088557fe5b1415156108aa578560206040519081016040528060008152508090509750975061095c565b6108c86002670de0b6b3a76400008115156108c157fe5b0486610bc4565b93509350600060198111156108d957fe5b8460198111156108e557fe5b14151561090a578360206040519081016040528060008152508090509750975061095c565b61091c83670de0b6b3a7640000610bf7565b915091506000601981111561092d57fe5b82601981111561093957fe5b14151561094257fe5b600060206040519081016040528083815250809050975097505b5050505050509250929050565b6000610973611330565b600080610984866000015186610bf7565b915091506000601981111561099557fe5b8260198111156109a157fe5b1415156109c657816020604051908101604052806000815250809050935093506109e0565b600060206040519081016040528083815250809050935093505b50509250929050565b60008160000151836000015110905092915050565b6000600160149054906101000a900460ff1680610a225750610a208484610c2d565b155b8015610a365750610a34848484610c51565b155b90509392505050565b6000610a49611330565b6000806000610a56611330565b6000871415610a7e576000602060405190810160405280600081525080905095509550610b20565b610a888888610bc4565b9350935060006019811115610a9957fe5b846019811115610aa557fe5b141515610acb576001602060405190810160405280600081525080905095509550610b20565b610ad58784610c78565b9150915060006019811115610ae657fe5b826019811115610af257fe5b141515610b18576002602060405190810160405280600081525080905095509550610b20565b600081955095505b505050509250929050565b6000610b35611330565b600080610b4a86600001518660000151610bc4565b9150915081602060405190810160405280838152508090509350935050509250929050565b600080600080851415610b8b5760008080905092509250610bbc565b8385029050838582811515610b9c57fe5b04141515610bb4576003600080905092509250610bbc565b600081925092505b509250929050565b600080600083850190508481101515610be35760008192509250610bef565b60036000809050925092505b509250929050565b6000806000831415610c13576005600080905091509150610c26565b60008385811515610c2057fe5b04915091505b9250929050565b6000610c398383610d4d565b8015610c495750610c48610e56565b5b905092915050565b6000610c5d84846110a2565b8015610c6f5750610c6e84836111aa565b5b90509392505050565b6000610c82611330565b600080600080610c9a88670de0b6b3a7640000610b6f565b9350935060006019811115610cab57fe5b846019811115610cb757fe5b141515610cdc5783602060405190810160405280600081525080905095509550610d42565b610ce68388610bf7565b9150915060006019811115610cf757fe5b826019811115610d0357fe5b141515610d285781602060405190810160405280600081525080905095509550610d42565b600060206040519081016040528083815250809050955095505b505050509250929050565b6000808373ffffffffffffffffffffffffffffffffffffffff166370a082316000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610e0c57600080fd5b505af1158015610e20573d6000803e3d6000fd5b505050506040513d6020811015610e3657600080fd5b810190808051906020019092919050505090508083101591505092915050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ee157600080fd5b505af1158015610ef5573d6000803e3d6000fd5b505050506040513d6020811015610f0b57600080fd5b810190808051906020019092919050505092503273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663be59b4b16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f9957600080fd5b505af1158015610fad573d6000803e3d6000fd5b505050506040513d6020811015610fc357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16149150438373ffffffffffffffffffffffffffffffffffffffff16636084747f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561105257600080fd5b505af1158015611066573d6000803e3d6000fd5b505050506040513d602081101561107c57600080fd5b810190808051906020019092919050505014905081801561109a5750805b935050505090565b6000808373ffffffffffffffffffffffffffffffffffffffff166370a082316000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561116157600080fd5b505af1158015611175573d6000803e3d6000fd5b505050506040513d602081101561118b57600080fd5b8101908080519060200190929190505050905080831091505092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638e8f294b856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505061012060405180830381600087803b15801561126a57600080fd5b505af115801561127e573d6000803e3d6000fd5b505050506040513d61012081101561129557600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509091929394959697509091929394959650909192939495509091929394509091929350909192509050508091505082811091505092915050565b6020604051908101604052806000815250905600a165627a7a72305820198f0f2c2160e75c0ad3b0f1f42a17e79fad8e16c4baf241f9c64b761d7513ad00290000000000000000000000003fda67f7583380e67ef93072294a7fac882fd7e70000000000000000000000001055be4bf7338c7606d9efdcf80593f180ba043e",
  "constructorArguments": "0000000000000000000000003fda67f7583380e67ef93072294a7fac882fd7e70000000000000000000000001055be4bf7338c7606d9efdcf80593f180ba043e"
}