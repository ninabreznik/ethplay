{
  "address": "0x1e8c423b2e8aae409280c696c5acda62f7e6f23c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QTB",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-06\n*/\n\n// Copyright (C) QTB Team\ncontract ERC20 {\n    function totalSupply() constant returns (uint supply);\n    function balanceOf( address who ) constant returns (uint value);\n    function allowance( address owner, address spender ) constant returns (uint _allowance);\n\n    function transfer( address to, uint value) returns (bool ok);\n    function transferFrom( address from, address to, uint value) returns (bool ok);\n    function approve( address spender, uint value ) returns (bool ok);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}\n\ncontract DSMath {\n\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x - y) <= x);\n    }\n\n}\n\ncontract QTB is ERC20,DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n\n    string   public  symbol;\n    string   public  name;\n    uint256  public  decimals = 18;\n    address  public  owner;\n    bool     public  stopped;\n    \n\n\n    function QTB(string _symbol,string _name,address _owner) {\n        symbol=_symbol;\n        name=_name;\n        owner=_owner;\n    }\n\n    modifier auth {\n        assert (msg.sender==owner);\n        _;\n    }\n    modifier stoppable {\n        assert (!stopped);\n        _;\n    }\n    function stop() auth  {\n        stopped = true;\n    }\n    function start() auth  {\n        stopped = false;\n    }\n\n    function totalSupply() constant returns (uint256) {\n        return _supply;\n    }\n    function balanceOf(address src) constant returns (uint256) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) constant returns (uint256) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) stoppable returns (bool) {\n        assert(_balances[msg.sender] >= wad);\n\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(msg.sender, dst, wad);\n\n        return true;\n    }\n\n    function transferFrom(address src, address dst, uint wad)stoppable returns (bool) {\n        assert(_balances[src] >= wad);\n        assert(_approvals[src][msg.sender] >= wad);\n\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function approve(address guy, uint256 wad) stoppable returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n    function mint(address dst,uint128 wad) auth stoppable {\n        _balances[dst] = add(_balances[dst], wad);\n        _supply = add(_supply, wad);\n    }\n\n    event LogSetOwner     (address indexed owner);\n\n    function setOwner(address owner_) auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n}",
  "bytecode": "6080604052601260055534801561001557600080fd5b50604051610a59380380610a598339810160409081528151602080840151928401519184018051909493909301926100539160039190860190610090565b508151610067906004906020850190610090565b5060068054600160a060020a031916600160a060020a03929092169190911790555061012b9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100d157805160ff19168380011785556100fe565b828001600101855582156100fe579182015b828111156100fe5782518255916020019190600101906100e3565b5061010a92915061010e565b5090565b61012891905b8082111561010a5760008155600101610114565b90565b61091f8061013a6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df57806307da68f514610169578063095ea7b31461018057806313af4035146101b857806318160ddd146101d957806323b872dd14610200578063313ce5671461022a57806370a082311461023f57806375f12b21146102605780638da5cb5b1461027557806395d89b41146102a6578063a9059cbb146102bb578063be29184f146102df578063be9a655514610315578063dd62ed3e1461032a575b600080fd5b3480156100eb57600080fd5b506100f4610351565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061017e6103df565b005b34801561018c57600080fd5b506101a4600160a060020a0360043516602435610419565b604080519115158252519081900360200190f35b3480156101c457600080fd5b5061017e600160a060020a0360043516610498565b3480156101e557600080fd5b506101ee610509565b60408051918252519081900360200190f35b34801561020c57600080fd5b506101a4600160a060020a036004358116906024351660443561050f565b34801561023657600080fd5b506101ee61066e565b34801561024b57600080fd5b506101ee600160a060020a0360043516610674565b34801561026c57600080fd5b506101a461068f565b34801561028157600080fd5b5061028a61069f565b60408051600160a060020a039092168252519081900360200190f35b3480156102b257600080fd5b506100f46106ae565b3480156102c757600080fd5b506101a4600160a060020a0360043516602435610709565b3480156102eb57600080fd5b5061017e600160a060020a03600435166fffffffffffffffffffffffffffffffff602435166107dd565b34801561032157600080fd5b5061017e61087a565b34801561033657600080fd5b506101ee600160a060020a03600435811690602435166108ae565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103d75780601f106103ac576101008083540402835291602001916103d7565b820191906000526020600020905b8154815290600101906020018083116103ba57829003601f168201915b505050505081565b600654600160a060020a031633146103f357fe5b6006805474ff0000000000000000000000000000000000000000191660a060020a179055565b60065460009060a060020a900460ff161561043057fe5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b600654600160a060020a031633146104ac57fe5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60005490565b60065460009060a060020a900460ff161561052657fe5b600160a060020a03841660009081526001602052604090205482111561054857fe5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561057557fe5b600160a060020a03841660009081526002602090815260408083203384529091529020546105a390836108d9565b600160a060020a0385166000818152600260209081526040808320338452825280832094909455918152600190915220546105de90836108d9565b600160a060020a03808616600090815260016020526040808220939093559085168152205461060d90836108e6565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60055481565b600160a060020a031660009081526001602052604090205490565b60065460a060020a900460ff1681565b600654600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103d75780601f106103ac576101008083540402835291602001916103d7565b60065460009060a060020a900460ff161561072057fe5b3360009081526001602052604090205482111561073957fe5b3360009081526001602052604090205461075390836108d9565b3360009081526001602052604080822092909255600160a060020a0385168152205461077f90836108e6565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600654600160a060020a031633146107f157fe5b60065460a060020a900460ff161561080557fe5b600160a060020a03821660009081526001602052604090205461083a906fffffffffffffffffffffffffffffffff83166108e6565b600160a060020a03831660009081526001602052604081209190915554610873906fffffffffffffffffffffffffffffffff83166108e6565b6000555050565b600654600160a060020a0316331461088e57fe5b6006805474ff000000000000000000000000000000000000000019169055565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b8082038281111561049257fe5b8082018281101561049257fe00a165627a7a72305820a9a9b185731d73d523d7dcc201e2829100143f6eb5d36f6f8690b94075c6f3a50029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000004674439c090530eddf0d0a70f1d7ce12a8a7434e00000000000000000000000000000000000000000000000000000000000000035154420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000951544220544f4b454e0000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000004674439c090530eddf0d0a70f1d7ce12a8a7434e00000000000000000000000000000000000000000000000000000000000000035154420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000951544220544f4b454e0000000000000000000000000000000000000000000000"
}