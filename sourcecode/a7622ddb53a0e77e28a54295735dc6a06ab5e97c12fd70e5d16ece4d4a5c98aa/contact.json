{
  "address": "0xe7bf64ee52e15e401dac9248cfa69818143a0e8e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FluenceToken",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-20\n*/\n\npragma solidity 0.5.2;\n\n\n// @title Abstract ERC20 token interface\ninterface IERC20 {\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\n\tfunction transfer(address to, uint256 value) external returns (bool success);\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool success);\n\tfunction approve(address spender, uint256 value) external returns (bool success);\n\tfunction allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\tevent Issuance(address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n\t/**\n\t* @dev Multiplies two numbers, reverts on overflow.\n\t*/\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b);\n\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n\t*/\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); // Solidity only automatically asserts when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Adds two numbers, reverts on overflow.\n\t*/\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n\t* reverts when dividing by zero.\n\t*/\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b != 0);\n\t\treturn a % b;\n\t}\n}\n\ncontract ERC20 is IERC20 {\n\tusing SafeMath for uint256;\n\n\tmapping (address => uint256) private _balances;\n\n\tmapping (address => mapping (address => uint256)) private _allowed;\n\n\tuint256 private _totalSupply;\n\n\t/**\n\t* @dev Total number of tokens in existence\n\t*/\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param owner The address to query the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address owner) public view returns (uint256) {\n\t\treturn _balances[owner];\n\t}\n\n\t/**\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\t * @param owner address The address which owns the funds.\n\t * @param spender address The address which will spend the funds.\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\n\t */\n\tfunction allowance(\n\t\taddress owner,\n\t\taddress spender\n\t )\n\t\tpublic\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\treturn _allowed[owner][spender];\n\t}\n\n\t/**\n\t* @dev Transfer token for a specified address\n\t* @param to The address to transfer to.\n\t* @param value The amount to be transferred.\n\t*/\n\tfunction transfer(address to, uint256 value) public returns (bool) {\n\t\t_transfer(msg.sender, to, value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t * @param spender The address which will spend the funds.\n\t * @param value The amount of tokens to be spent.\n\t */\n\tfunction approve(address spender, uint256 value) public returns (bool) {\n\t\trequire(spender != address(0));\n\n\t\t_allowed[msg.sender][spender] = value;\n\t\temit Approval(msg.sender, spender, value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Transfer tokens from one address to another\n\t * @param from address The address which you want to send tokens from\n\t * @param to address The address which you want to transfer to\n\t * @param value uint256 the amount of tokens to be transferred\n\t */\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 value\n\t)\n\t\tpublic\n\t\treturns (bool)\n\t{\n\t\trequire(value <= _allowed[from][msg.sender]);\n\n\t\t_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\t\t_transfer(from, to, value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n\t * approve should be called when allowed_[_spender] == 0. To increment\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\n\t * the first transaction is mined)\n\t * From MonolithDAO Token.sol\n\t * @param spender The address which will spend the funds.\n\t * @param addedValue The amount of tokens to increase the allowance by.\n\t */\n\tfunction increaseAllowance(\n\t\taddress spender,\n\t\tuint256 addedValue\n\t)\n\t\tpublic\n\t\treturns (bool)\n\t{\n\t\trequire(spender != address(0));\n\n\t\t_allowed[msg.sender][spender] = (\n\t\t\t_allowed[msg.sender][spender].add(addedValue));\n\t\temit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n\t * approve should be called when allowed_[_spender] == 0. To decrement\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\n\t * the first transaction is mined)\n\t * From MonolithDAO Token.sol\n\t * @param spender The address which will spend the funds.\n\t * @param subtractedValue The amount of tokens to decrease the allowance by.\n\t */\n\tfunction decreaseAllowance(\n\t\taddress spender,\n\t\tuint256 subtractedValue\n\t)\n\t\tpublic\n\t\treturns (bool)\n\t{\n\t\trequire(spender != address(0));\n\n\t\t_allowed[msg.sender][spender] = (\n\t\t\t_allowed[msg.sender][spender].sub(subtractedValue));\n\t\temit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Transfer token for a specified addresses\n\t* @param from The address to transfer from.\n\t* @param to The address to transfer to.\n\t* @param value The amount to be transferred.\n\t*/\n\tfunction _transfer(address from, address to, uint256 value) internal {\n\t\trequire(value <= _balances[from]);\n\t\trequire(to != address(0));\n\n\t\t_balances[from] = _balances[from].sub(value);\n\t\t_balances[to] = _balances[to].add(value);\n\t\temit Transfer(from, to, value);\n\t}\n\n\t/**\n\t * @dev Internal function that mints an amount of the token and assigns it to\n\t * an account. This encapsulates the modification of balances such that the\n\t * proper events are emitted.\n\t * @param account The account that will receive the created tokens.\n\t * @param value The amount that will be created.\n\t */\n\tfunction _mint(address account, uint256 value) internal {\n\t\trequire(account != address(0));\n\t\t_totalSupply = _totalSupply.add(value);\n\t\t_balances[account] = _balances[account].add(value);\n\t\temit Transfer(address(0), account, value);\n\t}\n\n\t/**\n\t * @dev Internal function that burns an amount of the token of a given\n\t * account.\n\t * @param account The account whose tokens will be burnt.\n\t * @param value The amount that will be burnt.\n\t */\n\tfunction _burn(address account, uint256 value) internal {\n\t\trequire(account != address(0));\n\t\trequire(value <= _balances[account]);\n\n\t\t_totalSupply = _totalSupply.sub(value);\n\t\t_balances[account] = _balances[account].sub(value);\n\t\temit Transfer(account, address(0), value);\n\t}\n\n\t/**\n\t * @dev Internal function that burns an amount of the token of a given\n\t * account, deducting from the sender's allowance for said account. Uses the\n\t * internal burn function.\n\t * @param account The account whose tokens will be burnt.\n\t * @param value The amount that will be burnt.\n\t */\n\tfunction _burnFrom(address account, uint256 value) internal {\n\t\trequire(value <= _allowed[account][msg.sender]);\n\n\t\t// Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\t\t// this function needs to emit an event with the updated approval.\n\t\t_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\t\t\tvalue);\n\t\t_burn(account, value);\n\t}\n}\n\ncontract ERC20Burnable is ERC20 {\n\n\t/**\n\t * @dev Burns a specific amount of tokens.\n\t * @param value The amount of token to be burned.\n\t */\n\tfunction burn(uint256 value) public {\n\t\t_burn(msg.sender, value);\n\t}\n\n\t/**\n\t * @dev Burns a specific amount of tokens from the target address and decrements allowance\n\t * @param from address The address which you want to send tokens from\n\t * @param value uint256 The amount of token to be burned\n\t */\n\tfunction burnFrom(address from, uint256 value) public {\n\t\t_burnFrom(from, value);\n\t}\n}\n\ncontract Owned {\n\n\taddress public owner = msg.sender;\n\taddress public potentialOwner;\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tmodifier onlyPotentialOwner {\n\t\trequire(msg.sender == potentialOwner);\n\t\t_;\n\t}\n\n\tevent NewOwner(address old, address current);\n\tevent NewPotentialOwner(address old, address potential);\n\n\tfunction setOwner(address _new)\n\t\tpublic\n\t\tonlyOwner\n\t{\n\t\temit NewPotentialOwner(owner, _new);\n\t\tpotentialOwner = _new;\n\t}\n\n\tfunction confirmOwnership()\n\t\tpublic\n\t\tonlyPotentialOwner\n\t{\n\t\temit NewOwner(owner, potentialOwner);\n\t\towner = potentialOwner;\n\t\tpotentialOwner = address(0);\n\t}\n}\n\n/// @title Token contract - Implements Standard ERC20 Token with additional features.\n/// @author Zerion - <[email protected]>\ncontract Token is ERC20Burnable, Owned {\n\n\t// Time of the contract creation\n\tuint256 public creationTime;\n\n\tconstructor() public {\n\t\t/* solium-disable-next-line security/no-block-members */\n\t\tcreationTime = now;\n\t}\n\n\t/// @dev Owner can transfer out any accidentally sent ERC20 tokens\n\tfunction transferERC20Token(IERC20 _token, address _to, uint256 _value)\n\t\tpublic\n\t\tonlyOwner\n\t\treturns (bool success)\n\t{\n\t\trequire(_token.balanceOf(address(this)) >= _value);\n\t\tuint256 receiverBalance = _token.balanceOf(_to);\n\t\trequire(_token.transfer(_to, _value));\n\n\t\tuint256 receiverNewBalance = _token.balanceOf(_to);\n\t\tassert(receiverNewBalance == receiverBalance + _value);\n\n\t\treturn true;\n\t}\n}\n\ncontract FluenceToken is Token {\n\n    string constant public name = 'Fluence Presale Token (Test)';\n    string constant public symbol = 'FPT-test';\n    uint8  constant public decimals = 18;\n\n    uint256 constant public presaleTokens = 6000000e18;\n\n    bool public isVestingEnabled = true;\n    mapping (address => uint256) public vestedTokens;\n\n    // The moment when the crowdsale ends. The time of the first payout.\n    uint256 checkpoint;\n\n    address crowdsaleManager;\n    address migrationManager;\n\n    modifier onlyCrowdsaleManager {\n        require(msg.sender == crowdsaleManager);\n        _;\n    }\n\n    modifier onlyDuringVestingPeriod {\n        require(isVestingEnabled);\n        _;\n    }\n\n    function vest(uint256 amount) public onlyDuringVestingPeriod {\n        _transfer(msg.sender, address(this), amount);\n        vestedTokens[msg.sender] += amount;\n    }\n\n    function unvest(uint256 amount) public {\n        require(onVesting(msg.sender) >= amount);\n        \n        uint256 tokens_to_unvest = (amount * 100) / (100 + _getBonus());\n        _transfer(address(this), msg.sender, tokens_to_unvest);\n        vestedTokens[msg.sender] -= tokens_to_unvest;\n        _mint(msg.sender, amount - tokens_to_unvest);\n    }\n\n    function disableVesting() public onlyCrowdsaleManager {\n        isVestingEnabled = false;\n    }\n\n    function payoutFirstBonus() public onlyCrowdsaleManager {\n        require(!isVestingEnabled && checkpoint == 0);  // can only be called once\n        checkpoint = now;\n    }\n\n    function setCrowdsaleManager(address manager) public onlyOwner {\n        crowdsaleManager = manager;\n    }\n\n    function setMigrationManager(address manager) public onlyOwner {\n        require(migrationManager == address(0));  // can only be called once\n        migrationManager = manager;\n        _mint(migrationManager, presaleTokens);\n    }\n\n    function onVesting(address account) public view returns (uint256) {\n        return vestedTokens[account] * (100 + _getBonus()) / 100;\n    }\n\n    function _getBonus() internal view returns (uint256) {\n        if (checkpoint == 0) {\n            return 0;\n        }\n        uint256 initialBonus = 5;\n        uint256 monthsPassed = (now - checkpoint) / (30 minutes);\n        uint256 additionalBonus = (monthsPassed > 4 ? 4: monthsPassed) * 5;  // 5% for every 30 days; no more than 20%\n        return initialBonus + additionalBonus;\n    }\n}",
  "bytecode": "608060405233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600660006101000a81548160ff0219169083151502179055504260058190555061265f806100766000396000f3fe608060405234801561001057600080fd5b50600436106101ec576000357c0100000000000000000000000000000000000000000000000000000000900480634defd1bf1161012157806391d52567116100bf578063a9059cbb1161008e578063a9059cbb1461090b578063d5d1e77014610971578063d8270dce1461097b578063dd62ed3e14610999576101ec565b806391d525671461076e57806392940bf91461079c57806395d89b4114610822578063a457c2d7146108a5576101ec565b806370a08231116100fb57806370a08231146106345780637762df251461068c57806379cc6790146106d65780638da5cb5b14610724576101ec565b80634defd1bf146105b8578063603eb485146105fc5780636a760b8014610606576101ec565b806323b872dd1161018e578063395093511161016857806339509351146104c25780633cb650d0146105285780633dee03971461053257806342966c681461058a576101ec565b806323b872dd146103c0578063313ce567146104465780633645f7bd1461046a576101ec565b8063095ea7b3116101ca578063095ea7b3146102da5780630a09815c1461034057806313af40351461035e57806318160ddd146103a2576101ec565b8063025cf89f146101f157806306ddb7bb1461023557806306fdde0314610257575b600080fd5b6102336004803603602081101561020757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a11565b005b61023d610b45565b604051808215151515815260200191505060405180910390f35b61025f610b58565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029f578082015181840152602081019050610284565b50505050905090810190601f1680156102cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610326600480360360408110156102f057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b91565b604051808215151515815260200191505060405180910390f35b610348610cbe565b6040518082815260200191505060405180910390f35b6103a06004803603602081101561037457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ccd565b005b6103aa610e26565b6040518082815260200191505060405180910390f35b61042c600480360360608110156103d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e30565b604051808215151515815260200191505060405180910390f35b61044e610fe2565b604051808260ff1660ff16815260200191505060405180910390f35b6104ac6004803603602081101561048057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe7565b6040518082815260200191505060405180910390f35b61050e600480360360408110156104d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611048565b604051808215151515815260200191505060405180910390f35b61053061127f565b005b6105746004803603602081101561054857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f8565b6040518082815260200191505060405180910390f35b6105b6600480360360208110156105a057600080fd5b8101908080359060200190929190505050611310565b005b6105fa600480360360208110156105ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061131d565b005b6106046113bd565b005b6106326004803603602081101561061c57600080fd5b810190808035906020019092919050505061144c565b005b6106766004803603602081101561064a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114c2565b6040518082815260200191505060405180910390f35b61069461150a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610722600480360360408110156106ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611530565b005b61072c61153e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61079a6004803603602081101561078457600080fd5b8101908080359060200190929190505050611564565b005b610808600480360360608110156107b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611600565b604051808215151515815260200191505060405180910390f35b61082a6119f3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561086a57808201518184015260208101905061084f565b50505050905090810190601f1680156108975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108f1600480360360408110156108bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a2c565b604051808215151515815260200191505060405180910390f35b6109576004803603604081101561092157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c63565b604051808215151515815260200191505060405180910390f35b610979611c7a565b005b610983611e58565b6040518082815260200191505060405180910390f35b6109fb600480360360408110156109af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e5e565b6040518082815260200191505060405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a6d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610aca57600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b42600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166a04f68ca6d8cd91c6000000611ee5565b50565b600660009054906101000a900460ff1681565b6040805190810160405280601c81526020017f466c75656e63652050726573616c6520546f6b656e202854657374290000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610bce57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6a04f68ca6d8cd91c600000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d2957600080fd5b7f8a95addc59dddee94a894365b5c66c6c2473b7084d3fd1df9f503db4a2cd6dcc600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600254905090565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ebd57600080fd5b610f4c82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203990919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fd784848461205b565b600190509392505050565b601281565b60006064610ff3612274565b606401600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281151561104057fe5b049050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561108557600080fd5b61111482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122c990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112db57600080fd5b6000600660006101000a81548160ff021916908315150217905550565b60076020528060005260406000206000915090505481565b61131a33826122ea565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561137957600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141957600080fd5b600660009054906101000a900460ff1615801561143857506000600854145b151561144357600080fd5b42600881905550565b600660009054906101000a900460ff16151561146757600080fd5b61147233308361205b565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61153a828261248b565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8061156e33610fe7565b1015151561157b57600080fd5b6000611585612274565b6064016064830281151561159557fe5b0490506115a330338361205b565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506115fc33828403611ee5565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561165e57600080fd5b818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156116f857600080fd5b505afa15801561170c573d6000803e3d6000fd5b505050506040513d602081101561172257600080fd5b81019080805190602001909291905050501015151561174057600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156117db57600080fd5b505afa1580156117ef573d6000803e3d6000fd5b505050506040513d602081101561180557600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506040513d60208110156118e557600080fd5b8101908080519060200190929190505050151561190157600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561199c57600080fd5b505afa1580156119b0573d6000803e3d6000fd5b505050506040513d60208110156119c657600080fd5b81019080805190602001909291905050509050838201811415156119e657fe5b6001925050509392505050565b6040805190810160405280600881526020017f4650542d7465737400000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611a6957600080fd5b611af882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000611c7033848461205b565b6001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cd657600080fd5b7f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60055481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611f2157600080fd5b611f36816002546122c990919063ffffffff16565b600281905550611f8d816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122c990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600082821115151561204a57600080fd5b600082840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156120a857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156120e457600080fd5b612135816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121c8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122c990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080600854141561228957600090506122c6565b600060059050600061070860085442038115156122a257fe5b04905060006005600483116122b757826122ba565b60045b02905080830193505050505b90565b60008082840190508381101515156122e057600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561232657600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561237357600080fd5b6123888160025461203990919063ffffffff16565b6002819055506123df816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561251657600080fd5b6125a581600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203990919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061262f82826122ea565b505056fea165627a7a7230582062a3599fef6122e9dacb60479ef19369d30cc9899c8f5693204190bf06df9c6a0029"
}