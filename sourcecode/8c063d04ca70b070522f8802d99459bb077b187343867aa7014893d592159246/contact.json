{
  "address": "0x54b7a124b44054da3692dbc56b116a35c6a3e561",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LANDAuction",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-09\n*/\n\npragma solidity ^0.4.24;\n\n// File: zos-lib/contracts/Initializable.sol\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool wasInitializing = initializing;\n    initializing = true;\n    initialized = true;\n\n    _;\n\n    initializing = wasInitializing;\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: openzeppelin-eth/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable is Initializable {\n  address private _owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function initialize(address sender) public initializer {\n    _owner = sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(_owner);\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n\n  uint256[50] private ______gap;\n}\n\n// File: openzeppelin-eth/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-eth/contracts/utils/Address.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n}\n\n// File: openzeppelin-eth/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/libs/SafeERC20.sol\n\n/**\n* @dev Library to perform safe calls to standard method for ERC20 tokens.\n* Transfers : transfer methods could have a return value (bool), revert for insufficient funds or\n* unathorized value.\n*\n* Approve: approve method could has a return value (bool) or does not accept 0 as a valid value (BNB token).\n* The common strategy used to clean approvals.\n*/\nlibrary SafeERC20 {\n    /**\n    * @dev Transfer token for a specified address\n    * @param _token erc20 The address of the ERC20 contract\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the _value of tokens to be transferred\n    */\n    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\n        uint256 prevBalance = _token.balanceOf(address(this));\n\n        require(prevBalance >= _value, \"Insufficient funds\");\n\n        bool success = address(_token).call(\n            abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value)\n        );\n\n        if (!success) {\n            return false;\n        }\n\n        require(prevBalance - _value == _token.balanceOf(address(this)), \"Transfer failed\");\n\n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _token erc20 The address of the ERC20 contract\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the _value of tokens to be transferred\n    */\n    function safeTransferFrom(\n        IERC20 _token,\n        address _from,\n        address _to, \n        uint256 _value\n    ) internal returns (bool) \n    {\n        uint256 prevBalance = _token.balanceOf(_from);\n\n        require(prevBalance >= _value, \"Insufficient funds\");\n        require(_token.allowance(_from, address(this)) >= _value, \"Insufficient allowance\");\n\n        bool success = address(_token).call(\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, _to, _value)\n        );\n\n        if (!success) {\n            return false;\n        }\n\n        require(prevBalance - _value == _token.balanceOf(_from), \"Transfer failed\");\n\n        return true;\n    }\n\n   /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * \n   * @param _token erc20 The address of the ERC20 contract\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\n        bool success = address(_token).call(\n            abi.encodeWithSignature(\"approve(address,uint256)\",_spender, _value)\n        ); \n\n        if (!success) {\n            return false;\n        }\n\n        require(_token.allowance(address(this), _spender) == _value, \"Approve failed\");\n\n        return true;\n    }\n\n   /** \n   * @dev Clear approval\n   * Note that if 0 is not a valid value it will be set to 1.\n   * @param _token erc20 The address of the ERC20 contract\n   * @param _spender The address which will spend the funds.\n   */\n    function clearApprove(IERC20 _token, address _spender) internal returns (bool) {\n        bool success = safeApprove(_token, _spender, 0);\n\n        if (!success) {\n            return safeApprove(_token, _spender, 1);\n        }\n\n        return true;\n    }\n}\n\n// File: contracts/dex/ITokenConverter.sol\n\ncontract ITokenConverter {    \n    using SafeMath for uint256;\n\n    /**\n    * @dev Makes a simple ERC20 -> ERC20 token trade\n    * @param _srcToken - IERC20 token\n    * @param _destToken - IERC20 token \n    * @param _srcAmount - uint256 amount to be converted\n    * @param _destAmount - uint256 amount to get after conversion\n    * @return uint256 for the change. 0 if there is no change\n    */\n    function convert(\n        IERC20 _srcToken,\n        IERC20 _destToken,\n        uint256 _srcAmount,\n        uint256 _destAmount\n        ) external returns (uint256);\n\n    /**\n    * @dev Get exchange rate and slippage rate. \n    * Note that these returned values are in 18 decimals regardless of the destination token's decimals.\n    * @param _srcToken - IERC20 token\n    * @param _destToken - IERC20 token \n    * @param _srcAmount - uint256 amount to be converted\n    * @return uint256 of the expected rate\n    * @return uint256 of the slippage rate\n    */\n    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint256 _srcAmount) \n        public view returns(uint256 expectedRate, uint256 slippageRate);\n}\n\n// File: contracts/auction/LANDAuctionStorage.sol\n\n/**\n* @title ERC20 Interface with burn\n* @dev IERC20 imported in ItokenConverter.sol\n*/\ncontract ERC20 is IERC20 {\n    function burn(uint256 _value) public;\n}\n\n\n/**\n* @title Interface for contracts conforming to ERC-721\n*/\ncontract LANDRegistry {\n    function assignMultipleParcels(int[] x, int[] y, address beneficiary) external;\n}\n\n\ncontract LANDAuctionStorage {\n    uint256 constant public PERCENTAGE_OF_TOKEN_BALANCE = 5;\n    uint256 constant public MAX_DECIMALS = 18;\n\n    enum Status { created, finished }\n\n    struct Func {\n        uint256 slope;\n        uint256 base;\n        uint256 limit;\n    }\n\n    struct Token {\n        uint256 decimals;\n        bool shouldBurnTokens;\n        bool shouldForwardTokens;\n        address forwardTarget;\n        bool isAllowed;\n    }\n\n    uint256 public conversionFee = 105;\n    uint256 public totalBids = 0;\n    Status public status;\n    uint256 public gasPriceLimit;\n    uint256 public landsLimitPerBid;\n    ERC20 public manaToken;\n    LANDRegistry public landRegistry;\n    ITokenConverter public dex;\n    mapping (address => Token) public tokensAllowed;\n    uint256 public totalManaBurned = 0;\n    uint256 public totalLandsBidded = 0;\n    uint256 public startTime;\n    uint256 public endTime;\n    uint256 public initialPrice;\n    uint256 public endPrice;\n    uint256 public duration;\n\n    Func[] internal curves;\n\n    event AuctionCreated(\n      address indexed _caller,\n      uint256 _startTime,\n      uint256 _duration,\n      uint256 _initialPrice,\n      uint256 _endPrice\n    );\n\n    event BidConversion(\n      uint256 _bidId,\n      address indexed _token,\n      uint256 _requiredManaAmountToBurn,\n      uint256 _amountOfTokenConverted,\n      uint256 _requiredTokenBalance\n    );\n\n    event BidSuccessful(\n      uint256 _bidId,\n      address indexed _beneficiary,\n      address indexed _token,\n      uint256 _pricePerLandInMana,\n      uint256 _manaAmountToBurn,\n      int[] _xs,\n      int[] _ys\n    );\n\n    event AuctionFinished(\n      address indexed _caller,\n      uint256 _time,\n      uint256 _pricePerLandInMana\n    );\n\n    event TokenBurned(\n      uint256 _bidId,\n      address indexed _token,\n      uint256 _total\n    );\n\n    event TokenTransferred(\n      uint256 _bidId,\n      address indexed _token,\n      address indexed _to,\n      uint256 _total\n    );\n\n    event LandsLimitPerBidChanged(\n      address indexed _caller,\n      uint256 _oldLandsLimitPerBid, \n      uint256 _landsLimitPerBid\n    );\n\n    event GasPriceLimitChanged(\n      address indexed _caller,\n      uint256 _oldGasPriceLimit,\n      uint256 _gasPriceLimit\n    );\n\n    event DexChanged(\n      address indexed _caller,\n      address indexed _oldDex,\n      address indexed _dex\n    );\n\n    event TokenAllowed(\n      address indexed _caller,\n      address indexed _address,\n      uint256 _decimals,\n      bool _shouldBurnTokens,\n      bool _shouldForwardTokens,\n      address indexed _forwardTarget\n    );\n\n    event TokenDisabled(\n      address indexed _caller,\n      address indexed _address\n    );\n\n    event ConversionFeeChanged(\n      address indexed _caller,\n      uint256 _oldConversionFee,\n      uint256 _conversionFee\n    );\n}\n\n// File: contracts/auction/LANDAuction.sol\n\ncontract LANDAuction is Ownable, LANDAuctionStorage {\n    using SafeMath for uint256;\n    using Address for address;\n    using SafeERC20 for ERC20;\n\n    /**\n    * @dev Constructor of the contract.\n    * Note that the last value of _xPoints will be the total duration and\n    * the first value of _yPoints will be the initial price and the last value will be the endPrice\n    * @param _xPoints - uint256[] of seconds\n    * @param _yPoints - uint256[] of prices\n    * @param _startTime - uint256 timestamp in seconds when the auction will start\n    * @param _landsLimitPerBid - uint256 LAND limit for a single bid\n    * @param _gasPriceLimit - uint256 gas price limit for a single bid\n    * @param _manaToken - address of the MANA token\n    * @param _landRegistry - address of the LANDRegistry\n    * @param _dex - address of the Dex to convert ERC20 tokens allowed to MANA\n    */\n    constructor(\n        uint256[] _xPoints, \n        uint256[] _yPoints, \n        uint256 _startTime,\n        uint256 _landsLimitPerBid,\n        uint256 _gasPriceLimit,\n        ERC20 _manaToken,\n        LANDRegistry _landRegistry,\n        address _dex\n    ) public {\n        require(\n            PERCENTAGE_OF_TOKEN_BALANCE == 5, \n            \"Balance of tokens required should be equal to 5%\"\n        );\n        // Initialize owneable\n        Ownable.initialize(msg.sender);\n\n        // Schedule auction\n        require(_startTime > block.timestamp, \"Started time should be after now\");\n        startTime = _startTime;\n\n        // Set LANDRegistry\n        require(\n            address(_landRegistry).isContract(),\n            \"The LANDRegistry token address must be a deployed contract\"\n        );\n        landRegistry = _landRegistry;\n\n        setDex(_dex);\n\n        // Set MANAToken\n        allowToken(\n            address(_manaToken), \n            18,\n            true, \n            false, \n            address(0)\n        );\n        manaToken = _manaToken;\n\n        // Set total duration of the auction\n        duration = _xPoints[_xPoints.length - 1];\n        require(duration > 1 days, \"The duration should be greater than 1 day\");\n\n        // Set Curve\n        _setCurve(_xPoints, _yPoints);\n\n        // Set limits\n        setLandsLimitPerBid(_landsLimitPerBid);\n        setGasPriceLimit(_gasPriceLimit);\n        \n        // Initialize status\n        status = Status.created;      \n\n        emit AuctionCreated(\n            msg.sender,\n            startTime,\n            duration,\n            initialPrice, \n            endPrice\n        );\n    }\n\n    /**\n    * @dev Make a bid for LANDs\n    * @param _xs - uint256[] x values for the LANDs to bid\n    * @param _ys - uint256[] y values for the LANDs to bid\n    * @param _beneficiary - address beneficiary for the LANDs to bid\n    * @param _fromToken - token used to bid\n    */\n    function bid(\n        int[] _xs, \n        int[] _ys, \n        address _beneficiary, \n        ERC20 _fromToken\n    )\n        external \n    {\n        _validateBidParameters(\n            _xs, \n            _ys, \n            _beneficiary, \n            _fromToken\n        );\n        \n        uint256 bidId = _getBidId();\n        uint256 bidPriceInMana = _xs.length.mul(getCurrentPrice());\n        uint256 manaAmountToBurn = bidPriceInMana;\n\n        if (address(_fromToken) != address(manaToken)) {\n            require(\n                address(dex).isContract(), \n                \"Paying with other tokens has been disabled\"\n            );\n            // Convert from the other token to MANA. The amount to be burned might be smaller\n            // because 5% will be burned or forwarded without converting it to MANA.\n            manaAmountToBurn = _convertSafe(bidId, _fromToken, bidPriceInMana);\n        } else {\n            // Transfer MANA to this contract\n            require(\n                _fromToken.safeTransferFrom(msg.sender, address(this), bidPriceInMana),\n                \"Insuficient balance or unauthorized amount (transferFrom failed)\"\n            );\n        }\n\n        // Process funds (burn or forward them)\n        _processFunds(bidId, _fromToken);\n\n        // Assign LANDs to the beneficiary user\n        landRegistry.assignMultipleParcels(_xs, _ys, _beneficiary);\n\n        emit BidSuccessful(\n            bidId,\n            _beneficiary,\n            _fromToken,\n            getCurrentPrice(),\n            manaAmountToBurn,\n            _xs,\n            _ys\n        );  \n\n        // Update stats\n        _updateStats(_xs.length, manaAmountToBurn);        \n    }\n\n    /** \n    * @dev Validate bid function params\n    * @param _xs - int[] x values for the LANDs to bid\n    * @param _ys - int[] y values for the LANDs to bid\n    * @param _beneficiary - address beneficiary for the LANDs to bid\n    * @param _fromToken - token used to bid\n    */\n    function _validateBidParameters(\n        int[] _xs, \n        int[] _ys, \n        address _beneficiary, \n        ERC20 _fromToken\n    ) internal view \n    {\n        require(startTime <= block.timestamp, \"The auction has not started\");\n        require(\n            status == Status.created && \n            block.timestamp.sub(startTime) <= duration, \n            \"The auction has finished\"\n        );\n        require(tx.gasprice <= gasPriceLimit, \"Gas price limit exceeded\");\n        require(_beneficiary != address(0), \"The beneficiary could not be the 0 address\");\n        require(_xs.length > 0, \"You should bid for at least one LAND\");\n        require(_xs.length <= landsLimitPerBid, \"LAND limit exceeded\");\n        require(_xs.length == _ys.length, \"X values length should be equal to Y values length\");\n        require(tokensAllowed[address(_fromToken)].isAllowed, \"Token not allowed\");\n        for (uint256 i = 0; i < _xs.length; i++) {\n            require(\n                -150 <= _xs[i] && _xs[i] <= 150 && -150 <= _ys[i] && _ys[i] <= 150,\n                \"The coordinates should be inside bounds -150 & 150\"\n            );\n        }\n    }\n\n    /**\n    * @dev Current LAND price. \n    * Note that if the auction has not started returns the initial price and when\n    * the auction is finished return the endPrice\n    * @return uint256 current LAND price\n    */\n    function getCurrentPrice() public view returns (uint256) { \n        // If the auction has not started returns initialPrice\n        if (startTime == 0 || startTime >= block.timestamp) {\n            return initialPrice;\n        }\n\n        // If the auction has finished returns endPrice\n        uint256 timePassed = block.timestamp - startTime;\n        if (timePassed >= duration) {\n            return endPrice;\n        }\n\n        return _getPrice(timePassed);\n    }\n\n    /**\n    * @dev Convert allowed token to MANA and transfer the change in the original token\n    * Note that we will use the slippageRate cause it has a 3% buffer and a deposit of 5% to cover\n    * the conversion fee.\n    * @param _bidId - uint256 of the bid Id\n    * @param _fromToken - ERC20 token to be converted\n    * @param _bidPriceInMana - uint256 of the total amount in MANA\n    * @return uint256 of the total amount of MANA to burn\n    */\n    function _convertSafe(\n        uint256 _bidId,\n        ERC20 _fromToken,\n        uint256 _bidPriceInMana\n    ) internal returns (uint256 requiredManaAmountToBurn)\n    {\n        requiredManaAmountToBurn = _bidPriceInMana;\n        Token memory fromToken = tokensAllowed[address(_fromToken)];\n\n        uint256 bidPriceInManaPlusSafetyMargin = _bidPriceInMana.mul(conversionFee).div(100);\n\n        // Get rate\n        uint256 tokenRate = getRate(manaToken, _fromToken, bidPriceInManaPlusSafetyMargin);\n\n        // Check if contract should burn or transfer some tokens\n        uint256 requiredTokenBalance = 0;\n        \n        if (fromToken.shouldBurnTokens || fromToken.shouldForwardTokens) {\n            requiredTokenBalance = _calculateRequiredTokenBalance(requiredManaAmountToBurn, tokenRate);\n            requiredManaAmountToBurn = _calculateRequiredManaAmount(_bidPriceInMana);\n        }\n\n        // Calculate the amount of _fromToken to be converted\n        uint256 tokensToConvertPlusSafetyMargin = bidPriceInManaPlusSafetyMargin\n            .mul(tokenRate)\n            .div(10 ** 18);\n\n        // Normalize to _fromToken decimals\n        if (MAX_DECIMALS > fromToken.decimals) {\n            requiredTokenBalance = _normalizeDecimals(\n                fromToken.decimals, \n                requiredTokenBalance\n            );\n            tokensToConvertPlusSafetyMargin = _normalizeDecimals(\n                fromToken.decimals,\n                tokensToConvertPlusSafetyMargin\n            );\n        }\n\n        // Retrieve tokens from the sender to this contract\n        require(\n            _fromToken.safeTransferFrom(msg.sender, address(this), tokensToConvertPlusSafetyMargin),\n            \"Transfering the totalPrice in token to LANDAuction contract failed\"\n        );\n        \n        // Calculate the total tokens to convert\n        uint256 finalTokensToConvert = tokensToConvertPlusSafetyMargin.sub(requiredTokenBalance);\n\n        // Approve amount of _fromToken owned by contract to be used by dex contract\n        require(_fromToken.safeApprove(address(dex), finalTokensToConvert), \"Error approve\");\n\n        // Convert _fromToken to MANA\n        uint256 change = dex.convert(\n                _fromToken,\n                manaToken,\n                finalTokensToConvert,\n                requiredManaAmountToBurn\n        );\n\n       // Return change in _fromToken to sender\n        if (change > 0) {\n            // Return the change of src token\n            require(\n                _fromToken.safeTransfer(msg.sender, change),\n                \"Transfering the change to sender failed\"\n            );\n        }\n\n        // Remove approval of _fromToken owned by contract to be used by dex contract\n        require(_fromToken.clearApprove(address(dex)), \"Error clear approval\");\n\n        emit BidConversion(\n            _bidId,\n            address(_fromToken),\n            requiredManaAmountToBurn,\n            tokensToConvertPlusSafetyMargin.sub(change),\n            requiredTokenBalance\n        );\n    }\n\n    /**\n    * @dev Get exchange rate\n    * @param _srcToken - IERC20 token\n    * @param _destToken - IERC20 token \n    * @param _srcAmount - uint256 amount to be converted\n    * @return uint256 of the rate\n    */\n    function getRate(\n        IERC20 _srcToken, \n        IERC20 _destToken, \n        uint256 _srcAmount\n    ) public view returns (uint256 rate) \n    {\n        (rate,) = dex.getExpectedRate(_srcToken, _destToken, _srcAmount);\n    }\n\n    /** \n    * @dev Calculate the amount of tokens to process\n    * @param _totalPrice - uint256 price to calculate percentage to process\n    * @param _tokenRate - rate to calculate the amount of tokens\n    * @return uint256 of the amount of tokens required\n    */\n    function _calculateRequiredTokenBalance(\n        uint256 _totalPrice,\n        uint256 _tokenRate\n    ) \n    internal pure returns (uint256) \n    {\n        return _totalPrice.mul(_tokenRate)\n            .div(10 ** 18)\n            .mul(PERCENTAGE_OF_TOKEN_BALANCE)\n            .div(100);\n    }\n\n    /** \n    * @dev Calculate the total price in MANA\n    * Note that PERCENTAGE_OF_TOKEN_BALANCE will be always less than 100\n    * @param _totalPrice - uint256 price to calculate percentage to keep\n    * @return uint256 of the new total price in MANA\n    */\n    function _calculateRequiredManaAmount(\n        uint256 _totalPrice\n    ) \n    internal pure returns (uint256)\n    {\n        return _totalPrice.mul(100 - PERCENTAGE_OF_TOKEN_BALANCE).div(100);\n    }\n\n    /**\n    * @dev Burn or forward the MANA and other tokens earned\n    * Note that as we will transfer or burn tokens from other contracts.\n    * We should burn MANA first to avoid a possible re-entrancy\n    * @param _bidId - uint256 of the bid Id\n    * @param _token - ERC20 token\n    */\n    function _processFunds(uint256 _bidId, ERC20 _token) internal {\n        // Burn MANA\n        _burnTokens(_bidId, manaToken);\n\n        // Burn or forward token if it is not MANA\n        Token memory token = tokensAllowed[address(_token)];\n        if (_token != manaToken) {\n            if (token.shouldBurnTokens) {\n                _burnTokens(_bidId, _token);\n            }\n            if (token.shouldForwardTokens) {\n                _forwardTokens(_bidId, token.forwardTarget, _token);\n            }   \n        }\n    }\n\n    /**\n    * @dev LAND price based on time\n    * Note that will select the function to calculate based on the time\n    * It should return endPrice if _time < duration\n    * @param _time - uint256 time passed before reach duration\n    * @return uint256 price for the given time\n    */\n    function _getPrice(uint256 _time) internal view returns (uint256) {\n        for (uint256 i = 0; i < curves.length; i++) {\n            Func storage func = curves[i];\n            if (_time < func.limit) {\n                return func.base.sub(func.slope.mul(_time));\n            }\n        }\n        revert(\"Invalid time\");\n    }\n\n    /** \n    * @dev Burn tokens\n    * @param _bidId - uint256 of the bid Id\n    * @param _token - ERC20 token\n    */\n    function _burnTokens(uint256 _bidId, ERC20 _token) private {\n        uint256 balance = _token.balanceOf(address(this));\n\n        // Check if balance is valid\n        require(balance > 0, \"Balance to burn should be > 0\");\n        \n        _token.burn(balance);\n\n        emit TokenBurned(_bidId, address(_token), balance);\n\n        // Check if balance of the auction contract is empty\n        balance = _token.balanceOf(address(this));\n        require(balance == 0, \"Burn token failed\");\n    }\n\n    /** \n    * @dev Forward tokens\n    * @param _bidId - uint256 of the bid Id\n    * @param _address - address to send the tokens to\n    * @param _token - ERC20 token\n    */\n    function _forwardTokens(uint256 _bidId, address _address, ERC20 _token) private {\n        uint256 balance = _token.balanceOf(address(this));\n\n        // Check if balance is valid\n        require(balance > 0, \"Balance to burn should be > 0\");\n        \n        _token.safeTransfer(_address, balance);\n\n        emit TokenTransferred(\n            _bidId, \n            address(_token), \n            _address,balance\n        );\n\n        // Check if balance of the auction contract is empty\n        balance = _token.balanceOf(address(this));\n        require(balance == 0, \"Transfer token failed\");\n    }\n\n    /**\n    * @dev Set conversion fee rate\n    * @param _fee - uint256 for the new conversion rate\n    */\n    function setConversionFee(uint256 _fee) external onlyOwner {\n        require(_fee < 200 && _fee >= 100, \"Conversion fee should be >= 100 and < 200\");\n        emit ConversionFeeChanged(msg.sender, conversionFee, _fee);\n        conversionFee = _fee;\n    }\n\n    /**\n    * @dev Finish auction \n    */\n    function finishAuction() public onlyOwner {\n        require(status != Status.finished, \"The auction is finished\");\n\n        uint256 currentPrice = getCurrentPrice();\n\n        status = Status.finished;\n        endTime = block.timestamp;\n\n        emit AuctionFinished(msg.sender, block.timestamp, currentPrice);\n    }\n\n    /**\n    * @dev Set LAND for the auction\n    * @param _landsLimitPerBid - uint256 LAND limit for a single id\n    */\n    function setLandsLimitPerBid(uint256 _landsLimitPerBid) public onlyOwner {\n        require(_landsLimitPerBid > 0, \"The LAND limit should be greater than 0\");\n        emit LandsLimitPerBidChanged(msg.sender, landsLimitPerBid, _landsLimitPerBid);\n        landsLimitPerBid = _landsLimitPerBid;\n    }\n\n    /**\n    * @dev Set gas price limit for the auction\n    * @param _gasPriceLimit - uint256 gas price limit for a single bid\n    */\n    function setGasPriceLimit(uint256 _gasPriceLimit) public onlyOwner {\n        require(_gasPriceLimit > 0, \"The gas price should be greater than 0\");\n        emit GasPriceLimitChanged(msg.sender, gasPriceLimit, _gasPriceLimit);\n        gasPriceLimit = _gasPriceLimit;\n    }\n\n    /**\n    * @dev Set dex to convert ERC20\n    * @param _dex - address of the token converter\n    */\n    function setDex(address _dex) public onlyOwner {\n        require(_dex != address(dex), \"The dex is the current\");\n        if (_dex != address(0)) {\n            require(_dex.isContract(), \"The dex address must be a deployed contract\");\n        }\n        emit DexChanged(msg.sender, dex, _dex);\n        dex = ITokenConverter(_dex);\n    }\n\n    /**\n    * @dev Allow ERC20 to to be used for bidding\n    * Note that if _shouldBurnTokens and _shouldForwardTokens are false, we \n    * will convert the total amount of the ERC20 to MANA\n    * @param _address - address of the ERC20 Token\n    * @param _decimals - uint256 of the number of decimals\n    * @param _shouldBurnTokens - boolean whether we should burn funds\n    * @param _shouldForwardTokens - boolean whether we should transferred funds\n    * @param _forwardTarget - address where the funds will be transferred\n    */\n    function allowToken(\n        address _address,\n        uint256 _decimals,\n        bool _shouldBurnTokens,\n        bool _shouldForwardTokens,\n        address _forwardTarget\n    ) \n    public onlyOwner \n    {\n        require(\n            _address.isContract(),\n            \"Tokens allowed should be a deployed ERC20 contract\"\n        );\n        require(\n            _decimals > 0 && _decimals <= MAX_DECIMALS,\n            \"Decimals should be greather than 0 and less or equal to 18\"\n        );\n        require(\n            !(_shouldBurnTokens && _shouldForwardTokens),\n            \"The token should be either burned or transferred\"\n        );\n        require(\n            !_shouldForwardTokens || \n            (_shouldForwardTokens && _forwardTarget != address(0)),\n            \"The token should be transferred to a deployed contract\"\n        );\n        require(\n            _forwardTarget != address(this) && _forwardTarget != _address, \n            \"The forward target should be different from  this contract and the erc20 token\"\n        );\n        \n        require(!tokensAllowed[_address].isAllowed, \"The ERC20 token is already allowed\");\n\n        tokensAllowed[_address] = Token({\n            decimals: _decimals,\n            shouldBurnTokens: _shouldBurnTokens,\n            shouldForwardTokens: _shouldForwardTokens,\n            forwardTarget: _forwardTarget,\n            isAllowed: true\n        });\n\n        emit TokenAllowed(\n            msg.sender, \n            _address, \n            _decimals,\n            _shouldBurnTokens,\n            _shouldForwardTokens,\n            _forwardTarget\n        );\n    }\n\n    /**\n    * @dev Disable ERC20 to to be used for bidding\n    * @param _address - address of the ERC20 Token\n    */\n    function disableToken(address _address) public onlyOwner {\n        require(\n            tokensAllowed[_address].isAllowed,\n            \"The ERC20 token is already disabled\"\n        );\n        delete tokensAllowed[_address];\n        emit TokenDisabled(msg.sender, _address);\n    }\n\n    /** \n    * @dev Create a combined function.\n    * note that we will set N - 1 function combinations based on N points (x,y)\n    * @param _xPoints - uint256[] of x values\n    * @param _yPoints - uint256[] of y values\n    */\n    function _setCurve(uint256[] _xPoints, uint256[] _yPoints) internal {\n        uint256 pointsLength = _xPoints.length;\n        require(pointsLength == _yPoints.length, \"Points should have the same length\");\n        for (uint256 i = 0; i < pointsLength - 1; i++) {\n            uint256 x1 = _xPoints[i];\n            uint256 x2 = _xPoints[i + 1];\n            uint256 y1 = _yPoints[i];\n            uint256 y2 = _yPoints[i + 1];\n            require(x1 < x2, \"X points should increase\");\n            require(y1 > y2, \"Y points should decrease\");\n            (uint256 base, uint256 slope) = _getFunc(\n                x1, \n                x2, \n                y1, \n                y2\n            );\n            curves.push(Func({\n                base: base,\n                slope: slope,\n                limit: x2\n            }));\n        }\n\n        initialPrice = _yPoints[0];\n        endPrice = _yPoints[pointsLength - 1];\n    }\n\n    /**\n    * @dev Calculate base and slope for the given points\n    * It is a linear function y = ax - b. But The slope should be negative.\n    * As we want to avoid negative numbers in favor of using uints we use it as: y = b - ax\n    * Based on two points (x1; x2) and (y1; y2)\n    * base = (x2 * y1) - (x1 * y2) / (x2 - x1)\n    * slope = (y1 - y2) / (x2 - x1) to avoid negative maths\n    * @param _x1 - uint256 x1 value\n    * @param _x2 - uint256 x2 value\n    * @param _y1 - uint256 y1 value\n    * @param _y2 - uint256 y2 value\n    * @return uint256 for the base\n    * @return uint256 for the slope\n    */\n    function _getFunc(\n        uint256 _x1,\n        uint256 _x2,\n        uint256 _y1, \n        uint256 _y2\n    ) internal pure returns (uint256 base, uint256 slope) \n    {\n        base = ((_x2.mul(_y1)).sub(_x1.mul(_y2))).div(_x2.sub(_x1));\n        slope = (_y1.sub(_y2)).div(_x2.sub(_x1));\n    }\n\n    /**\n    * @dev Return bid id\n    * @return uint256 of the bid id\n    */\n    function _getBidId() private view returns (uint256) {\n        return totalBids;\n    }\n\n    /** \n    * @dev Normalize to _fromToken decimals\n    * @param _decimals - uint256 of _fromToken decimals\n    * @param _value - uint256 of the amount to normalize\n    */\n    function _normalizeDecimals(\n        uint256 _decimals, \n        uint256 _value\n    ) \n    internal pure returns (uint256 _result) \n    {\n        _result = _value.div(10**MAX_DECIMALS.sub(_decimals));\n    }\n\n    /** \n    * @dev Update stats. It will update the following stats:\n    * - totalBids\n    * - totalLandsBidded\n    * - totalManaBurned\n    * @param _landsBidded - uint256 of the number of LAND bidded\n    * @param _manaAmountBurned - uint256 of the amount of MANA burned\n    */\n    function _updateStats(uint256 _landsBidded, uint256 _manaAmountBurned) private {\n        totalBids = totalBids.add(1);\n        totalLandsBidded = totalLandsBidded.add(_landsBidded);\n        totalManaBurned = totalManaBurned.add(_manaAmountBurned);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000005c0e7160000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000004a817c8000000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000f87e31492faf9a91b02ee0deaad50d51d56d5d4d0000000000000000000000008312800ed2480107772570203c8bb2ee92846b61000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000002a3000000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000013c6800000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000002a5a058fc295ed00000000000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000054b40b1f852bda0000000000000000000000000000000000000000000000000003635c9adc5dea00000"
}