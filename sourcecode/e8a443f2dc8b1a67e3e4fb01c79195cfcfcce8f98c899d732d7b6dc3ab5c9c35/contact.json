{
  "address": "0xbe99b09709fc753b09bcf557a992f6605d5997b0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SMARTRealtyToken",
  "contractName": "Asset",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-29\n*/\n\npragma solidity ^0.4.18;\n/**\n* TOKEN Contract\n* ERC-20 Token Standard Compliant\n* @author Fares A. Akel C. [emailÂ protected]\n*/\n\n/**\n * @title SafeMath by OpenZeppelin\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\n/**\n * Token contract interface for external use\n */\ncontract ERC20TokenInterface {\n\n    function balanceOf(address _owner) public constant returns (uint256 value);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    }\n\n\n/**\n* @title Admin parameters\n* @dev Define administration parameters for this contract\n*/\ncontract admined { //This token contract is administered\n    address public admin; //Admin address is public\n    bool public lockTransfer; //Transfer Lock flag\n    address public allowedAddress; //an address that can override lock condition\n\n    /**\n    * @dev Contract constructor\n    * define initial administrator\n    */\n    function admined() internal {\n        admin = msg.sender; //Set initial admin to contract creator\n        Admined(admin);\n    }\n\n   /**\n    * @dev Function to set an allowed address\n    * @param _to The address to give privileges.\n    */\n    function setAllowedAddress(address _to) public {\n        allowedAddress = _to;\n        AllowedSet(_to);\n    }\n\n    modifier onlyAdmin() { //A modifier to define admin-only functions\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier transferLock() { //A modifier to lock transactions\n        require(lockTransfer == false || allowedAddress == msg.sender);\n        _;\n    }\n\n   /**\n    * @dev Function to set new admin address\n    * @param _newAdmin The address to transfer administration to\n    */\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n        require(_newAdmin != 0);\n        admin = _newAdmin;\n        TransferAdminship(admin);\n    }\n\n   /**\n    * @dev Function to set transfer lock\n    * @param _set boolean flag (true | false)\n    */\n    function setTransferLock(bool _set) onlyAdmin public { //Only the admin can set a lock on transfers\n        lockTransfer = _set;\n        SetTransferLock(_set);\n    }\n\n    //All admin actions have a log for public review\n    event AllowedSet(address _to);\n    event SetTransferLock(bool _set);\n    event TransferAdminship(address newAdminister);\n    event Admined(address administer);\n\n}\n\n/**\n* @title Token definition\n* @dev Define token paramters including ERC20 ones\n*/\ncontract ERC20Token is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\n    using SafeMath for uint256;\n    uint256 public totalSupply;\n    mapping (address => uint256) balances; //A mapping of all balances per address\n    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n    mapping (address => bool) frozen; //A mapping of frozen accounts\n\n    /**\n    * @dev Get the balance of an specified address.\n    * @param _owner The address to be query.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 value) {\n      return balances[_owner];\n    }\n\n    /**\n    * @dev transfer token to a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) transferLock public returns (bool success) {\n        require(_to != address(0)); //If you dont want that people destroy token\n        require(frozen[msg.sender]==false);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev transfer token from an address to another specified address using allowance\n    * @param _from The address where token comes.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transferFrom(address _from, address _to, uint256 _value) transferLock public returns (bool success) {\n        require(_to != address(0)); //If you dont want that people destroy token\n        require(frozen[_from]==false);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Assign allowance to an specified address to use the owner balance\n    * @param _spender The address to be allowed to spend.\n    * @param _value The amount to be allowed.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n      allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Get the allowance of an specified address to use another address balance.\n    * @param _owner The address of the owner of the tokens.\n    * @param _spender The address of the allowed spender.\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Frozen account.\n    * @param _target The address to being frozen.\n    * @param _flag The status of the frozen\n    */\n    function setFrozen(address _target,bool _flag) onlyAdmin public {\n        frozen[_target]=_flag;\n        FrozenStatus(_target,_flag);\n    }\n\n    /**\n    * @dev Burn token of an specified address.\n    * @param _burnedAmount amount to burn.\n    */\n    function burnToken(uint256 _burnedAmount) onlyAdmin public {\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _burnedAmount);\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n        Burned(msg.sender, _burnedAmount);\n    }\n\n\n    /**\n    * @dev Log Events\n    */\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burned(address indexed _target, uint256 _value);\n    event FrozenStatus(address _target,bool _flag);\n}\n\n/**\n* @title Asset\n* @dev Initial supply creation\n*/\ncontract Asset is ERC20Token {\n    string public name = 'SMARTRealty';\n    uint8 public decimals = 8;\n    string public symbol = 'RLTY';\n    string public version = '1'; \n\n    address DevExecutiveAdvisorTeams= 0xF9568bd772C9B517193275b3C2E0CDAd38E586bB;\n    address SMARTRealtyEconomy= 0x07ADB1D9399Bd1Fa4fD613D3179DFE883755Bb13;\n    address Marketing= 0xd35909DbeEb5255D65b1ea14602C7f00ce3872f6;\n    address SMARTMortgages= 0x9D2Fe4D5f1dc4FcA1f0Ea5f461C9fAA5D09b9CCE;\n    address Administer= 0x8Bb41848B6dD3D98b8849049b780dC3549568c89;\n    address Contractors= 0xC78DF195DE5717FB15FB3448D5C6893E8e7fB254;\n    address Legal= 0x4690678926BCf9B30985c06806d4568C0C498123;\n    address BountiesandGiveaways= 0x08AF803F0F90ccDBFCe046Bc113822cFf415e148;\n    address CharitableUse= 0x8661dFb67dE4E5569da9859f5CB4Aa676cd5F480;\n\n\n    function Asset() public {\n\n        totalSupply = 500000000 * (10**uint256(decimals)); //initial token creation\n        Transfer(0, this, totalSupply);\n\n        //20% Presale+20% ICO\n        balances[msg.sender] = 200000000 * (10**uint256(decimals));\n        Transfer(this, msg.sender, balances[msg.sender]);        \n\n        //10%\n        balances[DevExecutiveAdvisorTeams] = 50000000 * (10**uint256(decimals));\n        Transfer(this, DevExecutiveAdvisorTeams, balances[DevExecutiveAdvisorTeams]);\n\n        //10%\n        balances[SMARTRealtyEconomy] = 50000000 * (10**uint256(decimals));\n        Transfer(this, SMARTRealtyEconomy, balances[SMARTRealtyEconomy]);\n\n        //10%\n        balances[Marketing] = 50000000 * (10**uint256(decimals));\n        Transfer(this, Marketing, balances[Marketing]);\n\n        //10%\n        balances[SMARTMortgages] = 50000000 * (10**uint256(decimals));\n        Transfer(this, SMARTMortgages, balances[SMARTMortgages]);\n        \n        //5%\n        balances[Administer] = 25000000 * (10**uint256(decimals));\n        Transfer(this, Administer, balances[Administer]);\n\n        //5%\n        balances[Contractors] = 25000000 * (10**uint256(decimals));\n        Transfer(this, Contractors, balances[Contractors]);\n\n        //5%\n        balances[Legal] = 25000000 * (10**uint256(decimals));\n        Transfer(this, Legal, balances[Legal]);\n\n        //4%\n        balances[BountiesandGiveaways] =  20000000 * (10**uint256(decimals));\n        Transfer(this, BountiesandGiveaways, balances[BountiesandGiveaways]);\n\n        //1%\n        balances[CharitableUse] = 5000000  * (10**uint256(decimals));\n        Transfer(this, CharitableUse, balances[CharitableUse]);\n\n    }\n    \n    /**\n    *@dev Function to handle callback calls\n    */\n    function() public {\n        revert();\n    }\n\n}",
  "bytecode": "606060405260408051908101604052600b81527f534d4152545265616c7479000000000000000000000000000000000000000000602082015260069080516200004d929160200190620006a2565b506007805460ff1916600817905560408051908101604052600481527f524c54590000000000000000000000000000000000000000000000000000000060208201526008908051620000a4929160200190620006a2565b5060408051908101604052600181527f310000000000000000000000000000000000000000000000000000000000000060208201526009908051620000ee929160200190620006a2565b50600a8054600160a060020a031990811673f9568bd772c9b517193275b3c2e0cdad38e586bb17909155600b805482167307adb1d9399bd1fa4fd613d3179dfe883755bb13179055600c8054821673d35909dbeeb5255d65b1ea14602c7f00ce3872f6179055600d80548216739d2fe4d5f1dc4fca1f0ea5f461c9faa5d09b9cce179055600e80548216738bb41848b6dd3d98b8849049b780dc3549568c89179055600f8054821673c78df195de5717fb15fb3448d5c6893e8e7fb254179055601080548216734690678926bcf9b30985c06806d4568c0c4981231790556011805482167308af803f0f90ccdbfce046bc113822cff415e14817905560128054909116738661dfb67de4e5569da9859f5cb4aa676cd5f48017905534156200021557600080fd5b60008054600160a060020a03191633600160a060020a0390811691909117918290557fa2b0867ddc9434a6620c27aae2ee7b19d3db53f3e7f059bdbecc3f2091e24f779116604051600160a060020a03909116815260200160405180910390a160075460ff16600a0a631dcd650002600281905530600160a060020a031690600090600080516020620013268339815191529060405190815260200160405180910390a360075433600160a060020a039081166000818152600360205260409081902060ff909416600a0a630bebc20002938490559092309092169160008051602062001326833981519152915190815260200160405180910390a3600754600a8054600160a060020a0390811660009081526003602052604080822060ff909516840a6302faf080029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a3600754600b8054600160a060020a0390811660009081526003602052604080822060ff909516600a0a6302faf080029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a3600754600c8054600160a060020a0390811660009081526003602052604080822060ff909516600a0a6302faf080029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a3600754600d8054600160a060020a0390811660009081526003602052604080822060ff909516600a0a6302faf080029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a3600754600e8054600160a060020a0390811660009081526003602052604080822060ff909516600a0a63017d7840029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a3600754600f8054600160a060020a0390811660009081526003602052604080822060ff909516600a0a63017d7840029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a360075460108054600160a060020a0390811660009081526003602052604080822060ff909516600a0a63017d7840029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a360075460118054600160a060020a0390811660009081526003602052604080822060ff909516600a0a6301312d00029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a360075460128054600160a060020a0390811660009081526003602052604080822060ff909516600a0a624c4b40029094559154811680835291839020549192309091169160008051602062001326833981519152915190815260200160405180910390a362000747565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006e557805160ff191683800117855562000715565b8280016001018555821562000715579182015b8281111562000715578251825591602001919060010190620006f8565b506200072392915062000727565b5090565b6200074491905b808211156200072357600081556001016200072e565b90565b610bcf80620007576000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806318160ddd146101cb5780631a9aea0a146101f05780631b8fc2f01461020357806323b872dd14610224578063313ce5671461024c5780634cf781701461027557806354fd4d50146102a45780635be7cc16146102b757806370a08231146102d65780637b47ec1a146102f557806395d89b411461030b578063a9059cbb1461031e578063ac869cd814610340578063bff3561814610364578063dd62ed3e1461037c578063f851a440146103a1575b341561010657600080fd5b600080fd5b341561011657600080fd5b61011e6103b4565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015a578082015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a057600080fd5b6101b7600160a060020a0360043516602435610452565b604051901515815260200160405180910390f35b34156101d657600080fd5b6101de6104be565b60405190815260200160405180910390f35b34156101fb57600080fd5b6101b76104c4565b341561020e57600080fd5b610222600160a060020a03600435166104d4565b005b341561022f57600080fd5b6101b7600160a060020a036004358116906024351660443561053c565b341561025757600080fd5b61025f6106be565b60405160ff909116815260200160405180910390f35b341561028057600080fd5b6102886106c7565b604051600160a060020a03909116815260200160405180910390f35b34156102af57600080fd5b61011e6106d6565b34156102c257600080fd5b610222600160a060020a0360043516610741565b34156102e157600080fd5b6101de600160a060020a03600435166107e0565b341561030057600080fd5b6102226004356107fb565b341561031657600080fd5b61011e6108a2565b341561032957600080fd5b6101b7600160a060020a036004351660243561090d565b341561034b57600080fd5b610222600160a060020a03600435166024351515610a3a565b341561036f57600080fd5b6102226004351515610ac6565b341561038757600080fd5b6101de600160a060020a0360043581169060243516610b41565b34156103ac57600080fd5b610288610b6c565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561044a5780601f1061041f5761010080835404028352916020019161044a565b820191906000526020600020905b81548152906001019060200180831161042d57829003601f168201915b505050505081565b600160a060020a03338116600081815260046020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60025481565b60005460a060020a900460ff1681565b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790557f742e2ebd0014f6b28dbbce00d10b8f4f4a46f5b69d9a6224c87d0e733a8d997781604051600160a060020a03909116815260200160405180910390a150565b6000805460a060020a900460ff161580610564575060015433600160a060020a039081169116145b151561056f57600080fd5b600160a060020a038316151561058457600080fd5b600160a060020a03841660009081526005602052604090205460ff16156105aa57600080fd5b600160a060020a03808516600090815260046020908152604080832033909416835292905220546105e1908363ffffffff610b7b16565b600160a060020a038086166000818152600460209081526040808320339095168352938152838220949094559081526003909252902054610628908363ffffffff610b7b16565b600160a060020a03808616600090815260036020526040808220939093559085168152205461065d908363ffffffff610b8d16565b600160a060020a03808516600081815260036020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60075460ff1681565b600154600160a060020a031681565b60098054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561044a5780601f1061041f5761010080835404028352916020019161044a565b60005433600160a060020a0390811691161461075c57600080fd5b600160a060020a038116151561077157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290557f4f2723059e5730f1d4ffa943789d401722067ca1121b828944c6965dbd303e089116604051600160a060020a03909116815260200160405180910390a150565b600160a060020a031660009081526003602052604090205490565b60005433600160a060020a0390811691161461081657600080fd5b600160a060020a0333166000908152600360205260409020546108399082610b7b565b600160a060020a03331660009081526003602052604090205560025461085f9082610b7b565b600255600160a060020a0333167f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df78260405190815260200160405180910390a250565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561044a5780601f1061041f5761010080835404028352916020019161044a565b6000805460a060020a900460ff161580610935575060015433600160a060020a039081169116145b151561094057600080fd5b600160a060020a038316151561095557600080fd5b600160a060020a03331660009081526005602052604090205460ff161561097b57600080fd5b600160a060020a0333166000908152600360205260409020546109a4908363ffffffff610b7b16565b600160a060020a0333811660009081526003602052604080822093909355908516815220546109d9908363ffffffff610b8d16565b600160a060020a0380851660008181526003602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005433600160a060020a03908116911614610a5557600080fd5b600160a060020a03821660009081526005602052604090819020805460ff19168315151790557f0adeb3125cc5db4bbcd04a6ad07b095f8c5f7db710ea08e9a35481d7a4bcc471908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610ae157600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a831515021790557ff33f8ef436f631648b30f6761d8d417b93dc359444a28c3d5c5bdb05c10edc1681604051901515815260200160405180910390a150565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600054600160a060020a031681565b600082821115610b8757fe5b50900390565b600082820183811015610b9c57fe5b93925050505600a165627a7a723058202996612ae36b1b7a68af75eaca323d1b1a8a26649eaee16ad406d84b5cef84d40029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}