{
  "address": "0x6e109e9dd7fa1a58bc3eff667e8e41fc3cc07aef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TetherToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-13\n*/\n\npragma solidity ^0.5.2;\n\n/*\n\n    2019 Tether Token - tether.to\n    Deployed by Will Harborne - [emailÂ protected]\n    \n*/\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\ncontract UpgradedStandardToken is ERC20 {\n    // those methods are called by the legacy contract\n    // and they must ensure msg.sender to be the contract address\n    uint public _totalSupply;\n    function transferByLegacy(address from, address to, uint value) public returns (bool);\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public returns (bool);\n    function approveByLegacy(address from, address spender, uint value) public returns (bool);\n    function increaseApprovalByLegacy(address from, address spender, uint addedValue) public returns (bool);\n    function decreaseApprovalByLegacy(address from, address spender, uint subtractedValue) public returns (bool);\n}\n\ncontract BlackList is Ownable {\n\n    /////// Getter to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\n    function getBlackListStatus(address _maker) external view returns (bool) {\n        return isBlackListed[_maker];\n    }\n\n    mapping (address => bool) public isBlackListed;\n\n    function addBlackList (address _evilUser) public onlyOwner {\n        isBlackListed[_evilUser] = true;\n        emit AddedBlackList(_evilUser);\n    }\n\n    function removeBlackList (address _clearedUser) public onlyOwner {\n        isBlackListed[_clearedUser] = false;\n        emit RemovedBlackList(_clearedUser);\n    }\n\n    event AddedBlackList(address indexed _user);\n\n    event RemovedBlackList(address indexed _user);\n\n}\n\ncontract StandardTokenWithFees is ERC20, Ownable {\n\n  // Additional variables for use if transaction fees ever became necessary\n  uint256 public basisPointsRate = 0;\n  uint256 public maximumFee = 0;\n  uint256 constant MAX_SETTABLE_BASIS_POINTS = 20;\n  uint256 constant MAX_SETTABLE_FEE = 50;\n\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  uint public constant MAX_UINT = 2**256 - 1;\n\n  function calcFee(uint _value) internal view returns (uint) {\n    uint fee = (_value.mul(basisPointsRate)).div(10000);\n    if (fee > maximumFee) {\n        fee = maximumFee;\n    }\n    return fee;\n  }\n\n  function transfer(address _to, uint _value) public returns (bool) {\n    uint fee = calcFee(_value);\n    uint sendAmount = _value.sub(fee);\n\n    super.transfer(_to, sendAmount);\n    if (fee > 0) {\n      super.transfer(owner(), fee);\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balanceOf(_from));\n    require(_value <= allowance(_from, msg.sender));\n\n    uint fee = calcFee(_value);\n    uint sendAmount = _value.sub(fee);\n\n    _transfer(_from, _to, sendAmount);\n    if (allowance(_from, msg.sender) < MAX_UINT) {\n        _approve(_from, msg.sender, allowance(_from, msg.sender).sub(_value));\n    }\n    if (fee > 0) {\n        _transfer(_from, owner(), fee);\n    }\n    return true;\n  }\n\n  function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\n      // Ensure transparency by hardcoding limit beyond which fees can never be added\n      require(newBasisPoints < MAX_SETTABLE_BASIS_POINTS);\n      require(newMaxFee < MAX_SETTABLE_FEE);\n\n      basisPointsRate = newBasisPoints;\n      maximumFee = newMaxFee.mul(uint(10)**decimals);\n\n      emit Params(basisPointsRate, maximumFee);\n  }\n\n  // Called if contract ever adds fees\n  event Params(uint feeBasisPoints, uint maxFee);\n\n}\n\ncontract TetherToken is Pausable, StandardTokenWithFees, BlackList {\n\n    address public upgradedAddress;\n    bool public deprecated;\n\n    //  The contract can be initialized with a number of tokens\n    //  All the tokens are deposited to the owner address\n    //\n    // @param _balance Initial supply of the contract\n    // @param _name Token Name\n    // @param _symbol Token symbol\n    // @param _decimals Token decimals\n    constructor (uint _initialSupply, string memory _name, string memory _symbol, uint8 _decimals) public {\n        _mint(owner(), _initialSupply);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        deprecated = false;\n        emit Issue(_initialSupply);\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\n        require(!isBlackListed[msg.sender]);\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n        } else {\n            return super.transfer(_to, _value);\n        }\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool) {\n        require(!isBlackListed[_from]);\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n        } else {\n            return super.transferFrom(_from, _to, _value);\n        }\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function balanceOf(address who) public view returns (uint) {\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n        } else {\n            return super.balanceOf(who);\n        }\n    }\n\n    // Allow checks of balance at time of deprecation\n    function oldBalanceOf(address who) public view returns (uint) {\n        if (deprecated) {\n            return super.balanceOf(who);\n        }\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function approve(address _spender, uint _value) public whenNotPaused returns (bool) {\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n        } else {\n            return super.approve(_spender, _value);\n        }\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).increaseApprovalByLegacy(msg.sender, _spender, _addedValue);\n        } else {\n            return super.increaseAllowance(_spender, _addedValue);\n        }\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).decreaseApprovalByLegacy(msg.sender, _spender, _subtractedValue);\n        } else {\n            return super.decreaseAllowance(_spender, _subtractedValue);\n        }\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        if (deprecated) {\n            return IERC20(upgradedAddress).allowance(_owner, _spender);\n        } else {\n            return super.allowance(_owner, _spender);\n        }\n    }\n\n    // deprecate current contract in favour of a new one\n    function deprecate(address _upgradedAddress) public onlyOwner {\n        require(_upgradedAddress != address(0));\n        deprecated = true;\n        upgradedAddress = _upgradedAddress;\n        emit Deprecate(_upgradedAddress);\n    }\n\n    // deprecate current contract if favour of a new one\n    function totalSupply() public view returns (uint) {\n        if (deprecated) {\n            return IERC20(upgradedAddress).totalSupply();\n        } else {\n            return super.totalSupply();\n        }\n    }\n\n    // Issue a new amount of tokens\n    // these tokens are deposited into the owner address\n    //\n    // @param _amount Number of tokens to be issued\n    function issue(uint amount) public onlyOwner {\n        require(!deprecated);\n        _mint(owner(), amount);\n        emit Issue(amount);\n    }\n\n    // Redeem tokens.\n    // These tokens are withdrawn from the owner address\n    // if the balance must be enough to cover the redeem\n    // or the call will fail.\n    // @param _amount Number of tokens to be issued\n    function redeem(uint amount) public onlyOwner {\n        require(!deprecated);\n        _burn(owner(), amount);\n        emit Redeem(amount);\n    }\n\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n        require(isBlackListed[_blackListedUser]);\n        uint dirtyFunds = balanceOf(_blackListedUser);\n        _burn(_blackListedUser, dirtyFunds);\n        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n    }\n\n    event DestroyedBlackFunds(address indexed _blackListedUser, uint _balance);\n\n    // Called when new token are issued\n    event Issue(uint amount);\n\n    // Called when tokens are redeemed\n    event Redeem(uint amount);\n\n    // Called when contract is deprecated\n    event Deprecate(address newAddress);\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"oldBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]",
  "bytecode": "6080604052600060065560006007553480156200001b57600080fd5b5060405162001e7538038062001e75833981018060405260808110156200004157600080fd5b8151602083018051919392830192916401000000008111156200006357600080fd5b820160208101848111156200007757600080fd5b81516401000000008111828201871017156200009257600080fd5b50509291906020018051640100000000811115620000af57600080fd5b82016020810184811115620000c357600080fd5b8151640100000000811182820187101715620000de57600080fd5b50506020918201519093509150620000fc903390620001fc811b901c565b6001805460ff19169055600580546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a362000173620001666200024e60201b60201c565b856200025e60201b60201c565b825162000188906008906020860190620003c1565b5081516200019e906009906020850190620003c1565b50600a805460ff191660ff8316179055600c8054600160a01b60ff02191690556040805185815290517fcb8241adb0c3fdb35b70c24ce35c5eb0c17af7431c99f827d44a445ca624176a916020908290030190a15050505062000463565b620002178160006200031b60201b6200195b1790919060201c565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6005546001600160a01b03165b90565b6001600160a01b0382166200027257600080fd5b6200028e816004546200037160201b620014151790919060201c565b6004556001600160a01b038216600090815260026020908152604090912054620002c39183906200141562000371821b17901c565b6001600160a01b03831660008181526002602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0381166200032f57600080fd5b6200034182826200038b60201b60201c565b156200034c57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200038457600080fd5b9392505050565b60006001600160a01b038216620003a157600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200040457805160ff191683800117855562000434565b8280016001018555821562000434579182015b828111156200043457825182559160200191906001019062000417565b506200044292915062000446565b5090565b6200025b91905b808211156200044257600081556001016200044d565b611a0280620004736000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c806382dc1ec411610130578063cc872b66116100b8578063e47d60601161007c578063e47d606014610651578063e4997dc514610677578063e5b5019a1461069d578063f2fde38b146106a5578063f3bdc228146106cb57610232565b8063cc872b66146105b5578063d73dd623146105d2578063db006a75146105fe578063dd62ed3e1461061b578063dd644f721461064957610232565b806395d89b41116100ff57806395d89b411461050c578063a457c2d714610514578063a9059cbb14610540578063b7a3446c1461056c578063c0324c771461059257610232565b806382dc1ec4146104ce5780638456cb59146104f45780638da5cb5b146104fc5780638f32d59b1461050457610232565b806335390714116101be5780635c975abb116101825780635c975abb14610464578063661884631461046c5780636ef8d66d1461049857806370a08231146104a0578063715018a6146104c657610232565b806335390714146103dc57806339509351146103e45780633f4ba83a1461041057806346fbf68e1461041857806359bf1abe1461043e57610232565b80630ecb93c0116102055780630ecb93c01461032457806318160ddd1461034a57806323b872dd1461036457806326976e3f1461039a578063313ce567146103be57610232565b806306fdde03146102375780630753c30c146102b4578063095ea7b3146102dc5780630e136b191461031c575b600080fd5b61023f6106f1565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610279578181015183820152602001610261565b50505050905090810190601f1680156102a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102da600480360360208110156102ca57600080fd5b50356001600160a01b031661077f565b005b610308600480360360408110156102f257600080fd5b506001600160a01b038135169060200135610817565b604080519115158252519081900360200190f35b6103086108e1565b6102da6004803603602081101561033a57600080fd5b50356001600160a01b03166108f1565b61035261094e565b60408051918252519081900360200190f35b6103086004803603606081101561037a57600080fd5b506001600160a01b038135811691602081013590911690604001356109f2565b6103a2610aec565b604080516001600160a01b039092168252519081900360200190f35b6103c6610afb565b6040805160ff9092168252519081900360200190f35b610352610b04565b610308600480360360408110156103fa57600080fd5b506001600160a01b038135169060200135610b0a565b6102da610b54565b6103086004803603602081101561042e57600080fd5b50356001600160a01b0316610bb4565b6103086004803603602081101561045457600080fd5b50356001600160a01b0316610bce565b610308610bec565b6103086004803603604081101561048257600080fd5b506001600160a01b038135169060200135610bf5565b6102da610c83565b610352600480360360208110156104b657600080fd5b50356001600160a01b0316610c8e565b6102da610d36565b6102da600480360360208110156104e457600080fd5b50356001600160a01b0316610d91565b6102da610daf565b6103a2610e12565b610308610e21565b61023f610e32565b6103086004803603604081101561052a57600080fd5b506001600160a01b038135169060200135610e8d565b6103086004803603604081101561055657600080fd5b506001600160a01b038135169060200135610ec9565b6103526004803603602081101561058257600080fd5b50356001600160a01b0316610f74565b6102da600480360360408110156105a857600080fd5b5080359060200135610f92565b6102da600480360360208110156105cb57600080fd5b5035611024565b610308600480360360408110156105e857600080fd5b506001600160a01b038135169060200135611093565b6102da6004803603602081101561061457600080fd5b5035611121565b6103526004803603604081101561063157600080fd5b506001600160a01b0381358116916020013516611190565b61035261121b565b6103086004803603602081101561066757600080fd5b50356001600160a01b0316611221565b6102da6004803603602081101561068d57600080fd5b50356001600160a01b0316611236565b610352611290565b6102da600480360360208110156106bb57600080fd5b50356001600160a01b0316611296565b6102da600480360360208110156106e157600080fd5b50356001600160a01b03166112b0565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107775780601f1061074c57610100808354040283529160200191610777565b820191906000526020600020905b81548152906001019060200180831161075a57829003601f168201915b505050505081565b610787610e21565b61079057600080fd5b6001600160a01b0381166107a357600080fd5b600c8054600160a01b74ff000000000000000000000000000000000000000019909116176001600160a01b0319166001600160a01b03831690811790915560408051918252517fcc358699805e9a8b7f77b522628c7cb9abd07d9efb86b6fb616af1609036a99e916020908290030190a150565b60015460009060ff161561082a57600080fd5b600c54600160a01b900460ff16156108ce57600c5460408051600160e01b63aee92d330281523360048201526001600160a01b038681166024830152604482018690529151919092169163aee92d339160648083019260209291908290030181600087803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b505050506040513d60208110156108c557600080fd5b505190506108db565b6108d88383611340565b90505b92915050565b600c54600160a01b900460ff1681565b6108f9610e21565b61090257600080fd5b6001600160a01b0381166000818152600b6020526040808220805460ff19166001179055517f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc9190a250565b600c54600090600160a01b900460ff16156109e457600c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109b157600080fd5b505afa1580156109c5573d6000803e3d6000fd5b505050506040513d60208110156109db57600080fd5b505190506109ef565b6109ec61134d565b90505b90565b60015460009060ff1615610a0557600080fd5b6001600160a01b0384166000908152600b602052604090205460ff1615610a2b57600080fd5b600c54600160a01b900460ff1615610ad757600c5460408051600160e01b638b477adb0281523360048201526001600160a01b03878116602483015286811660448301526064820186905291519190921691638b477adb9160848083019260209291908290030181600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506040513d6020811015610ace57600080fd5b50519050610ae5565b610ae2848484611353565b90505b9392505050565b600c546001600160a01b031681565b600a5460ff1681565b60075481565b3360008181526003602090815260408083206001600160a01b03871684529091528120549091610b4b918590610b46908663ffffffff61141516565b611427565b50600192915050565b610b5d33610bb4565b610b6657600080fd5b60015460ff16610b7557600080fd5b6001805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6000610bc6818363ffffffff6114af16565b90505b919050565b6001600160a01b03166000908152600b602052604090205460ff1690565b60015460ff1690565b60015460009060ff1615610c0857600080fd5b600c54600160a01b900460ff1615610c7957600c5460408051600160e01b636001279f0281523360048201526001600160a01b0386811660248301526044820186905291519190921691636001279f9160648083019260209291908290030181600087803b15801561089b57600080fd5b6108d88383610e8d565b610c8c336114e4565b565b600c54600090600160a01b900460ff1615610d2657600c5460408051600160e01b6370a082310281526001600160a01b038581166004830152915191909216916370a08231916024808301926020929190829003018186803b158015610cf357600080fd5b505afa158015610d07573d6000803e3d6000fd5b505050506040513d6020811015610d1d57600080fd5b50519050610bc9565b610d2f8261152c565b9050610bc9565b610d3e610e21565b610d4757600080fd5b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b610d9a33610bb4565b610da357600080fd5b610dac81611547565b50565b610db833610bb4565b610dc157600080fd5b60015460ff1615610dd157600080fd5b6001805460ff1916811790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6005546001600160a01b031690565b6005546001600160a01b0316331490565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107775780601f1061074c57610100808354040283529160200191610777565b3360008181526003602090815260408083206001600160a01b03871684529091528120549091610b4b918590610b46908663ffffffff61158f16565b60015460009060ff1615610edc57600080fd5b336000908152600b602052604090205460ff1615610ef957600080fd5b600c54600160a01b900460ff1615610f6a57600c5460408051600160e11b63370c4c050281523360048201526001600160a01b0386811660248301526044820186905291519190921691636e18980a9160648083019260209291908290030181600087803b15801561089b57600080fd5b6108d883836115a4565b600c54600090600160a01b900460ff1615610bc957610d2f8261152c565b610f9a610e21565b610fa357600080fd5b60148210610fb057600080fd5b60328110610fbd57600080fd5b6006829055600a8054610fdc91839160ff16900a63ffffffff6115f216565b600781905560065460408051918252602082019290925281517fb044a1e409eac5c48e5af22d4af52670dd1a99059537a78b31b48c6500a6354e929181900390910190a15050565b61102c610e21565b61103557600080fd5b600c54600160a01b900460ff161561104c57600080fd5b61105d611057610e12565b82611619565b6040805182815290517fcb8241adb0c3fdb35b70c24ce35c5eb0c17af7431c99f827d44a445ca624176a9181900360200190a150565b60015460009060ff16156110a657600080fd5b600c54600160a01b900460ff161561111757600c5460408051600160e01b63a95381570281523360048201526001600160a01b038681166024830152604482018690529151919092169163a95381579160648083019260209291908290030181600087803b15801561089b57600080fd5b6108d88383610b0a565b611129610e21565b61113257600080fd5b600c54600160a01b900460ff161561114957600080fd5b61115a611154610e12565b826116c3565b6040805182815290517f702d5967f45f6513a38ffc42d6ba9bf230bd40e8f53b16363c7eb4fd2deb9a449181900360200190a150565b600c54600090600160a01b900460ff161561121157600c5460408051600160e11b636eb1769f0281526001600160a01b03868116600483015285811660248301529151919092169163dd62ed3e916044808301926020929190829003018186803b1580156111fd57600080fd5b505afa1580156108af573d6000803e3d6000fd5b6108d8838361176c565b60065481565b600b6020526000908152604090205460ff1681565b61123e610e21565b61124757600080fd5b6001600160a01b0381166000818152600b6020526040808220805460ff19169055517fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c9190a250565b60001981565b61129e610e21565b6112a757600080fd5b610dac81611797565b6112b8610e21565b6112c157600080fd5b6001600160a01b0381166000908152600b602052604090205460ff166112e657600080fd5b60006112f182610c8e565b90506112fd82826116c3565b6040805182815290516001600160a01b038416917f61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6919081900360200190a25050565b6000610b4b338484611427565b60045490565b60006001600160a01b03831661136857600080fd5b61137184610c8e565b82111561137d57600080fd5b6113878433611190565b82111561139357600080fd5b600061139e83611806565b905060006113b2848363ffffffff61158f16565b90506113bf868683611846565b6000196113cc8733611190565b10156113f1576113f18633610b46876113e58b33611190565b9063ffffffff61158f16565b81156114095761140986611403610e12565b84611846565b50600195945050505050565b6000828201838110156108d857600080fd5b6001600160a01b03821661143a57600080fd5b6001600160a01b03831661144d57600080fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60006001600160a01b0382166114c457600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6114f560008263ffffffff61191316565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6001600160a01b031660009081526002602052604090205490565b61155860008263ffffffff61195b16565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b60008282111561159e57600080fd5b50900390565b6000806115b083611806565b905060006115c4848363ffffffff61158f16565b90506115d085826119a7565b5081156115ea576115e86115e2610e12565b836119a7565b505b505092915050565b600082611601575060006108db565b8282028284828161160e57fe5b04146108d857600080fd5b6001600160a01b03821661162c57600080fd5b60045461163f908263ffffffff61141516565b6004556001600160a01b03821660009081526002602052604090205461166b908263ffffffff61141516565b6001600160a01b03831660008181526002602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166116d657600080fd5b6004546116e9908263ffffffff61158f16565b6004556001600160a01b038216600090815260026020526040902054611715908263ffffffff61158f16565b6001600160a01b0383166000818152600260209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6001600160a01b0381166117aa57600080fd5b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080611830612710611824600654866115f290919063ffffffff16565b9063ffffffff6119b416565b9050600754811115610bc6575060075492915050565b6001600160a01b03821661185957600080fd5b6001600160a01b038316600090815260026020526040902054611882908263ffffffff61158f16565b6001600160a01b0380851660009081526002602052604080822093909355908416815220546118b7908263ffffffff61141516565b6001600160a01b0380841660008181526002602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6001600160a01b03811661192657600080fd5b61193082826114af565b61193957600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b03811661196e57600080fd5b61197882826114af565b1561198257600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6000610b4b338484611846565b60008082116119c257600080fd5b60008284816119cd57fe5b0494935050505056fea165627a7a7230582063e65353870c1dec64632c1aa20e1e1aebbdc413b295cfd0064dcd2f88aca87100290000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a54657468657220434e48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434e485400000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a54657468657220434e48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434e485400000000000000000000000000000000000000000000000000000000"
}