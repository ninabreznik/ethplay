{
  "address": "0xeba2ce101ede65d602f6f739f3e720db693187c2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherbotsPack",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-15\n*/\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\nlibrary SafeMath64 {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint64 a, uint64 b) internal pure returns (uint64 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint64 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ninterface EBInterface {\n    \n    function owns(address, uint) external returns (bool);\n\n    function getPartById(uint) external returns (\n        uint32 tokenId, \n        uint8 partType, \n        uint8 partSubType,  \n        uint8 rarity, \n        uint8 element,\n        uint32 battlesLastDay, \n        uint32 experience, \n        uint32 forgeTime, \n        uint32 battlesLastReset\n    );\n}\n\ninterface EBMarketplace {\n\n    function getAuction(uint id) external returns (address, uint, uint, uint, uint);\n \n}\n\ncontract Ownable {\n\n    address payable public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address payable _owner) public onlyOwner {\n        owner = _owner;\n    }\n\n    function getOwner() public view returns (address payable) {\n        return owner;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"must be owner to call this function\");\n        _;\n    }\n\n}\n\ncontract ICards {\n\n    enum Rarity {\n        Common, Rare, Epic, Legendary, Mythic\n    }\n\n    function getRandomCard(Rarity rarity, uint16 random) public view returns (uint16);\n    function createCard(address user, uint16 proto, uint16 purity) public returns (uint);\n\n\n}\n\ncontract Pack {\n\n    enum Type {\n        Rare, Epic, Legendary, Shiny\n    }\n\n}\n\ncontract RarityProvider {\n\n    ICards cards;\n\n    constructor(ICards _cards) public {\n        cards = _cards;\n    }\n\n    struct RandomnessComponents {\n        uint random;\n        uint32 rarity;\n        uint16 quality;\n        uint16 purity;\n        uint16 proto;\n    }\n\n    // return 'length' bytes of 'num' starting at 'start'\n    function extract(uint num, uint length, uint start) internal pure returns (uint) {\n        return (((1 << (length * 8)) - 1) & (num >> ((start - 1) * 8)));\n    }\n\n    // divides the random seed into components\n    function getComponents(\n        uint cardIndex, uint rand\n    ) internal pure returns (\n        RandomnessComponents memory\n    ) {\n        uint random = uint(keccak256(abi.encodePacked(cardIndex, rand)));\n        return RandomnessComponents({\n            random: random,\n            rarity: uint32(extract(random, 4, 10) % 1000000),\n            quality: uint16(extract(random, 2, 4) % 1000),\n            purity: uint16(extract(random, 2, 6) % 1000),\n            proto: uint16(extract(random, 2, 8) % (2**16-1))\n        });\n    }\n\n    function getCardDetails(Pack.Type packType, uint cardIndex, uint result) internal view returns (uint16, uint16) {\n        if (packType == Pack.Type.Shiny) {\n            return _getShinyCardDetails(cardIndex, result);\n        } else if (packType == Pack.Type.Legendary) {\n            return _getLegendaryCardDetails(cardIndex, result);\n        } else if (packType == Pack.Type.Epic) {\n            return _getEpicCardDetails(cardIndex, result);\n        }\n        return _getRareCardDetails(cardIndex, result);\n    }\n\n    function _getShinyCardDetails(uint cardIndex, uint result) internal view returns (uint16 proto, uint16 purity) {\n        \n        RandomnessComponents memory rc = getComponents(cardIndex, result); \n\n        ICards.Rarity rarity;\n\n        if (cardIndex == 4) {\n            rarity = _getLegendaryPlusRarity(rc.rarity);\n            purity = _getShinyPurityBase(rc.quality) + rc.purity;\n        } else if (cardIndex == 3) {\n            rarity = _getRarePlusRarity(rc.rarity);\n            purity = _getPurityBase(rc.quality) + rc.purity;\n        } else {\n            rarity = _getCommonPlusRarity(rc.rarity);\n            purity = _getPurityBase(rc.quality) + rc.purity;\n        }\n        proto = cards.getRandomCard(rarity, rc.proto);\n        return (proto, purity);\n    }\n\n    function _getLegendaryCardDetails(uint cardIndex, uint result) internal view returns (uint16 proto, uint16 purity) {\n        \n        RandomnessComponents memory rc = getComponents(cardIndex, result);\n\n        ICards.Rarity rarity;\n\n        if (cardIndex == 4) {\n            rarity = _getLegendaryPlusRarity(rc.rarity);\n        } else if (cardIndex == 3) {\n            rarity = _getRarePlusRarity(rc.rarity);\n        } else {\n            rarity = _getCommonPlusRarity(rc.rarity);\n        }\n\n        purity = _getPurityBase(rc.quality) + rc.purity;\n    \n        proto = cards.getRandomCard(rarity, rc.proto);\n\n        return (proto, purity);\n    } \n\n\n    function _getEpicCardDetails(uint cardIndex, uint result) internal view returns (uint16 proto, uint16 purity) {\n        \n        RandomnessComponents memory rc = getComponents(cardIndex, result);\n\n        ICards.Rarity rarity;\n\n        if (cardIndex == 4) {\n            rarity = _getEpicPlusRarity(rc.rarity);\n        } else {\n            rarity = _getCommonPlusRarity(rc.rarity);\n        }\n\n        purity = _getPurityBase(rc.quality) + rc.purity;\n    \n        proto = cards.getRandomCard(rarity, rc.proto);\n\n        return (proto, purity);\n    } \n\n    function _getRareCardDetails(uint cardIndex, uint result) internal view returns (uint16 proto, uint16 purity) {\n\n        RandomnessComponents memory rc = getComponents(cardIndex, result);\n\n        ICards.Rarity rarity;\n\n        if (cardIndex == 4) {\n            rarity = _getRarePlusRarity(rc.rarity);\n        } else {\n            rarity = _getCommonPlusRarity(rc.rarity);\n        }\n\n        purity = _getPurityBase(rc.quality) + rc.purity;\n    \n        proto = cards.getRandomCard(rarity, rc.proto);\n        return (proto, purity);\n    }  \n\n\n    function _getCommonPlusRarity(uint32 rand) internal pure returns (ICards.Rarity) {\n        if (rand == 999999) {\n            return ICards.Rarity.Mythic;\n        } else if (rand >= 998345) {\n            return ICards.Rarity.Legendary;\n        } else if (rand >= 986765) {\n            return ICards.Rarity.Epic;\n        } else if (rand >= 924890) {\n            return ICards.Rarity.Rare;\n        } else {\n            return ICards.Rarity.Common;\n        }\n    }\n\n    function _getRarePlusRarity(uint32 rand) internal pure returns (ICards.Rarity) {\n        if (rand == 999999) {\n            return ICards.Rarity.Mythic;\n        } else if (rand >= 981615) {\n            return ICards.Rarity.Legendary;\n        } else if (rand >= 852940) {\n            return ICards.Rarity.Epic;\n        } else {\n            return ICards.Rarity.Rare;\n        } \n    }\n\n    function _getEpicPlusRarity(uint32 rand) internal pure returns (ICards.Rarity) {\n        if (rand == 999999) {\n            return ICards.Rarity.Mythic;\n        } else if (rand >= 981615) {\n            return ICards.Rarity.Legendary;\n        } else {\n            return ICards.Rarity.Epic;\n        }\n    }\n\n    function _getLegendaryPlusRarity(uint32 rand) internal pure returns (ICards.Rarity) {\n        if (rand == 999999) {\n            return ICards.Rarity.Mythic;\n        } else {\n            return ICards.Rarity.Legendary;\n        } \n    }\n\n    // store purity and shine as one number to save users gas\n    function _getPurityBase(uint16 randOne) internal pure returns (uint16) {\n        if (randOne >= 998) {\n            return 3000;\n        } else if (randOne >= 988) {\n            return 2000;\n        } else if (randOne >= 938) {\n            return 1000;\n        }\n        return 0;\n    }\n\n    function _getShinyPurityBase(uint16 randOne) internal pure returns (uint16) {\n        if (randOne >= 998) {\n            return 3000;\n        } else if (randOne >= 748) {\n            return 2000;\n        } else {\n            return 1000;\n        }\n    }\n\n    function getShine(uint16 purity) public pure returns (uint8) {\n        return uint8(purity / 1000);\n    }\n\n}\n\ncontract EtherbotsPack is Ownable, RarityProvider {\n\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    // fired after user purchases count packs, producing purchase with id \n    event ClaimMade(uint indexed id, address user, uint count, uint[] partIDs);\n    // fired after the callback transaction is successful, replaces RandomnessReceived\n    event CallbackMade(uint indexed id, address indexed user, uint count, uint randomness);\n    // fired after a recommit for a purchase\n    event Recommit(uint indexed id, address indexed user, uint count);\n    // fired after a card is activated, replaces PacksOpened\n    event CardActivated(uint indexed claimID, uint cardIndex, uint indexed cardID, uint16 proto, uint16 purity);\n\n    // Rex, Arcane Sphere, Pyrocannon, Aetherrust, Magic Missile Launcher, Firewall\n    uint16[] commons = [400, 413, 414, 421, 427, 428]; \n    // Banisher, Daemonbot, Nethersaur, Trident\n    uint16[] rares = [389, 415, 416, 422]; \n    // Golden Sabre, Howler Golem, Hasty Trade\n    uint16[] epics = [424, 425, 426]; \n    // Iron Horse, Chest\n    uint16[] legendaries = [382, 420]; \n    // Golden Golem\n    uint16 exclusive = 417;\n\n    uint public commitLag = 0;\n    uint16 public activationLimit = 40;\n    uint16 public multiplier = 4;\n    bool public canClaim = true;\n\n    struct Claim {\n        uint randomness;\n        uint[] state;\n        address user;\n        uint64 commit;\n        uint16 count;\n        uint16[3] exCounts;\n        uint16[3] counts;        \n    }\n\n    mapping(uint => bool) public claimed;\n\n    // TODO: should this be public?\n    Claim[] public claims;\n\n    EBInterface public eb; \n    EBMarketplace public em; \n\n    constructor(ICards _cards, EBInterface _eb, EBMarketplace _em) RarityProvider(_cards) public payable {\n        eb = _eb;\n        em = _em;\n    }\n\n    function setCommitLag(uint lag) public onlyOwner {\n        require(commitLag < 100, \"can't have a commit lag of >100 blocks\");\n        commitLag = lag;\n    }\n\n    function setActivationLimit(uint16 _limit) public onlyOwner {\n        activationLimit = _limit;\n    }\n\n    function setCanClaim(bool _can) public onlyOwner {\n        canClaim = _can;\n    }\n\n    function claimParts(uint[] memory parts) public {\n        \n        require(parts.length > 0, \"must submit some parts\");\n        require(parts.length <= 1000, \"must submit <=1000 parts per purchase\");\n        require(parts.length % 4 == 0, \"must submit a multiple of 4 parts at a time\");\n        require(canClaim, \"must be able to claim\");\n\n        require(ownsOrAuctioning(parts), \"user must control all parts\");\n        require(canBeClaimed(parts), \"at least one part was already claimed\");\n\n        uint packs = parts.length.div(4).mul(multiplier);\n\n        Claim memory claim = Claim({ \n            user: msg.sender,\n            count: uint16(packs),\n            randomness: 0,\n            commit: getCommitBlock(),\n            exCounts: [uint16(0), 0, 0],\n            counts: [uint16(0), 0, 0],\n            state: new uint256[](getStateSize(packs))\n        });\n\n        uint8 partType;\n        uint8 subType;\n        uint8 rarity;\n\n        for (uint i = 0; i < parts.length; i++) {\n            (, partType, subType, rarity, , , , ,) = eb.getPartById(parts[i]);\n            require(rarity > 0, \"invalid rarity\");\n            // rarity is (1, 2, 3)\n            if (isExclusive(partType, subType)) {\n                claim.exCounts[rarity-1] += multiplier;\n            } else {\n                claim.counts[rarity-1] += multiplier;\n            }\n        }\n\n        uint id = claims.push(claim) - 1;\n\n        emit ClaimMade(id, msg.sender, packs, parts);\n    }\n\n    function ownsOrAuctioning(uint[] memory parts) public returns (bool) {\n        for (uint i = 0; i < parts.length; i++) {\n            uint id = parts[i];\n            if (!eb.owns(msg.sender, id)) {\n                address seller;\n                // returns an active auction \n                // will revert if inactive - this is fine, they don't own it then\n                (seller, , , , ) = em.getAuction(id);\n                if (seller != msg.sender) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    function canBeClaimed(uint[] memory parts) public returns (bool) {\n        for (uint i = 0; i < parts.length; i++) {\n            uint id = parts[i];\n            if (id > 18214) {\n                return false;\n            }\n            if (claimed[id]) {\n                return false;\n            }\n            claimed[id] = true;\n        }\n        return true;\n    }\n\n    function getCounts(uint id) public view returns (uint16[3] memory counts, uint16[3] memory exCounts) {\n        Claim memory c = claims[id];\n        return (c.counts, c.exCounts);\n    }\n\n    function callback(uint id) public {\n\n        Claim storage c = claims[id];\n\n        require(c.randomness == 0, \"can only callback once\");\n        require(uint64(block.number) > c.commit, \"cannot callback before commit\");\n        require(c.commit.add(uint64(256)) >= block.number, \"must recommit\");\n\n        bytes32 bhash = blockhash(c.commit);\n        require(uint(bhash) != 0, \"blockhash must not be zero\");\n\n        c.randomness = uint(keccak256(abi.encodePacked(id, bhash, address(this))));\n\n        emit CallbackMade(id, c.user, c.count, c.randomness);\n    }\n\n    function recommit(uint id) public {\n        Claim storage c = claims[id];\n        require(c.randomness == 0, \"randomness already set\");\n        require(block.number >= c.commit.add(uint64(256)), \"no need to recommit\");\n        c.commit = getCommitBlock();\n        emit Recommit(id, c.user, c.count);\n    }\n\n    function predictPacks(uint id) external view returns (uint16[] memory protos, uint16[] memory purities) {\n\n        Claim memory c = claims[id];\n\n        require(c.randomness != 0, \"randomness not yet set\");\n\n        uint result = c.randomness;\n\n        uint cardCount = uint(c.count).mul(5);\n\n        purities = new uint16[](cardCount);\n        protos = new uint16[](cardCount);\n\n        for (uint i = 0; i < cardCount; i++) {\n            (protos[i], purities[i]) = getCard(c, i, result);\n        }\n\n        return (protos, purities);\n    }\n\n    function getCommitBlock() internal view returns (uint64) {\n        return uint64(block.number.add(commitLag));\n    }\n\n    function getStateSize(uint count) public pure returns (uint) {\n        return count.mul(5).sub(1).div(256).add(1);\n    }\n\n    function isExclusive(uint partType, uint partSubType) public pure returns (bool) {\n        // checks whether the part is a lambo or AP\n        return (partType == 3) && (partSubType == 14 || partSubType == 16);\n    }\n\n    function getCard(Claim memory c, uint index, uint result) internal view returns (uint16 proto, uint16 purity) {\n\n        RandomnessComponents memory rc = getComponents(index, result);\n\n        uint16 progress = c.exCounts[0];\n\n        if (progress > index) {\n            proto = exclusive;\n            purity = _getPurityBase(rc.quality) + rc.purity;\n            return (proto, purity);\n        }\n\n        progress += c.exCounts[1];\n        if (progress > index) {\n            proto = exclusive;\n            // will be a random shadow\n            purity = _getPurityBase(940) + rc.purity;\n            return (proto, purity);\n        } \n\n        progress += c.exCounts[2];\n        if (progress > index) {\n            proto = exclusive;\n            // will be a random gold\n            purity = _getPurityBase(990) + rc.purity;\n            return (proto, purity);\n        }\n\n        progress += c.counts[0];\n        if (progress > index) {\n            proto = getRandomCard(rc.rarity, rc.proto);\n            purity = _getPurityBase(rc.quality) + rc.purity;\n            return (proto, purity);\n        }\n\n        progress += c.counts[1];\n        if (progress > index) {\n            proto = getRandomCard(rc.rarity, rc.proto);\n            // will be a random shadow\n            purity = _getPurityBase(940) + rc.purity;\n            return (proto, purity);\n        } \n\n        progress += c.counts[2];\n        if (progress > index) {\n            proto = getRandomCard(rc.rarity, rc.proto);\n            // will be a random gold\n            purity = _getPurityBase(990) + rc.purity;\n            return (proto, purity);\n        }\n\n        // 5 cards for 4 parts --> left over cards just get base stats\n        proto = getRandomCard(rc.rarity, rc.proto);\n        purity = _getPurityBase(rc.quality) + rc.purity;\n\n        return (proto, purity);\n    }  \n\n    function getRandomCard(uint32 rarityRandom, uint16 protoRandom) internal view returns (uint16) {\n        // adjusted from normal probabilities to ensure more appropriate distribution of cards\n        if (rarityRandom >= 970000) {\n            return legendaries[protoRandom % legendaries.length];\n        } else if (rarityRandom >= 890000) {\n            return epics[protoRandom % epics.length];\n        } else if (rarityRandom >= 670000) {\n            return rares[protoRandom % rares.length];\n        } else {\n            return commons[protoRandom % commons.length];\n        }\n    }\n\n    function activateMultiple(uint[] memory pIDs, uint[] memory cardIndices) \n        public returns (uint[] memory ids, uint16[] memory protos, uint16[] memory purities) {\n        uint len = pIDs.length;\n        require(len > 0, \"can't activate no cards\");\n        require(len <= activationLimit, \"can't activate more than the activation limit\");\n        require(len == cardIndices.length, \"must have the same length\");\n        ids = new uint[](len);\n        protos = new uint16[](len);\n        purities = new uint16[](len);\n        for (uint i = 0; i < len; i++) {\n            (ids[i], protos[i], purities[i]) = activate(pIDs[i], cardIndices[i]);\n        }\n        return (ids, protos, purities);\n    }\n\n    function activate(uint claimID, uint cardIndex) public returns (uint id, uint16 proto, uint16 purity) {\n        Claim storage c = claims[claimID];\n        \n        require(c.randomness != 0, \"must have been a callback\");\n        uint cardCount = uint(c.count).mul(5);\n        require(cardIndex < cardCount, \"not a valid card index\");\n        uint bit = getStateBit(claimID, cardIndex);\n        // can only activate each card once\n        require(bit == 0, \"card has already been activated\");\n        uint x = cardIndex.div(256);\n        uint pos = cardIndex % 256;\n        // mark the card as activated by flipping the relevant bit\n        c.state[x] ^= uint(1) << pos;\n        // create the card\n        (proto, purity) = getCard(c, cardIndex, c.randomness);\n        id = cards.createCard(c.user, proto, purity);\n        emit CardActivated(claimID, cardIndex, id, proto, purity);\n        return (id, proto, purity);\n    }\n\n    function isActivated(uint purchaseID, uint cardIndex) public view returns (bool) {\n        return getStateBit(purchaseID, cardIndex) != 0;\n    }\n\n    function getStateBit(uint claimID, uint cardIndex) public view returns (uint) {\n        Claim memory c = claims[claimID];\n        uint x = cardIndex.div(256);\n        uint slot = c.state[x];\n        uint pos = cardIndex % 256;\n        uint bit = (slot >> pos) & uint(1);\n        return bit;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"parts\",\"type\":\"uint256[]\"}],\"name\":\"claimParts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lag\",\"type\":\"uint256\"}],\"name\":\"setCommitLag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"claimID\",\"type\":\"uint256\"},{\"name\":\"cardIndex\",\"type\":\"uint256\"}],\"name\":\"getStateBit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitLag\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"recommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaseID\",\"type\":\"uint256\"},{\"name\":\"cardIndex\",\"type\":\"uint256\"}],\"name\":\"isActivated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eb\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parts\",\"type\":\"uint256[]\"}],\"name\":\"ownsOrAuctioning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getStateSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purity\",\"type\":\"uint16\"}],\"name\":\"getShine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimID\",\"type\":\"uint256\"},{\"name\":\"cardIndex\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proto\",\"type\":\"uint16\"},{\"name\":\"purity\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCounts\",\"outputs\":[{\"name\":\"counts\",\"type\":\"uint16[3]\"},{\"name\":\"exCounts\",\"type\":\"uint16[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parts\",\"type\":\"uint256[]\"}],\"name\":\"canBeClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"name\":\"randomness\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"commit\",\"type\":\"uint64\"},{\"name\":\"count\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"em\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_can\",\"type\":\"bool\"}],\"name\":\"setCanClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"predictPacks\",\"outputs\":[{\"name\":\"protos\",\"type\":\"uint16[]\"},{\"name\":\"purities\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint16\"}],\"name\":\"setActivationLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"partType\",\"type\":\"uint256\"},{\"name\":\"partSubType\",\"type\":\"uint256\"}],\"name\":\"isExclusive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pIDs\",\"type\":\"uint256[]\"},{\"name\":\"cardIndices\",\"type\":\"uint256[]\"}],\"name\":\"activateMultiple\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"protos\",\"type\":\"uint16[]\"},{\"name\":\"purities\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cards\",\"type\":\"address\"},{\"name\":\"_eb\",\"type\":\"address\"},{\"name\":\"_em\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"partIDs\",\"type\":\"uint256[]\"}],\"name\":\"ClaimMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"CallbackMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Recommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"cardID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proto\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"purity\",\"type\":\"uint16\"}],\"name\":\"CardActivated\",\"type\":\"event\"}]",
  "bytecode": "610140604052610190608090815261019d60a05261019e60c0526101a560e0526101ab610100526101ac610120526200003d9060029060066200018e565b5060408051608081018252610185815261019f60208201526101a0918101919091526101a66060820152620000779060039060046200018e565b50604080516060810182526101a881526101a960208201526101aa91810191909152620000a99060049060036200018e565b506040805180820190915261017e81526101a46020820152620000d19060059060026200018e565b50600680546101a161ffff19918216179091556000600755600880546401000000006028919093161763ffff00001916620400001764ff0000000019169190911790556040516060806200314d833981018060405260608110156200013557600080fd5b50805160208201516040909201516000805433600160a060020a031991821617909155600180548216600160a060020a03948516179055600b8054821694841694909417909355600c8054909316911617905562000263565b82805482825590600052602060002090600f016010900481019282156200022c5791602002820160005b83821115620001fa57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302620001b8565b80156200022a5782816101000a81549061ffff0219169055600201602081600101049283019260010302620001fa565b505b506200023a9291506200023e565b5090565b6200026091905b808211156200023a57805461ffff1916815560010162000245565b90565b612eda80620002736000396000f3fe6080604052600436106101505763ffffffff60e060020a6000350416631288337c811461015557806313af40351461020757806318db2d4e1461023a5780631b3ed7221461026457806337a1ff09146102905780634273b8ab146102d257806345d63b66146102e757806350c5625514610311578063580f45d0146103555780635df528a4146103865780636dc7a62714610436578063776ea5c51461044b578063850e376014610475578063893d20e8146104b95780638da5cb5b146104ce5780638ea8f83c146104e3578063999518fa146105365780639dd36c88146105c4578063a888c2cd14610674578063abc7d09e146106d9578063b0074de5146106ee578063c503101e14610703578063ca2bf0471461072f578063d5553136146107f2578063dbe7e3bd14610820578063faa7122c1461084a578063ff585caf1461087a578063ffc05fec146108a4575b600080fd5b34801561016157600080fd5b506102056004803603602081101561017857600080fd5b81019060208101813564010000000081111561019357600080fd5b8201836020820111156101a557600080fd5b803590602001918460208302840111640100000000831117156101c757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610ab6945050505050565b005b34801561021357600080fd5b506102056004803603602081101561022a57600080fd5b5035600160a060020a03166111dd565b34801561024657600080fd5b506102056004803603602081101561025d57600080fd5b503561126b565b34801561027057600080fd5b5061027961134f565b6040805161ffff9092168252519081900360200190f35b34801561029c57600080fd5b506102c0600480360360408110156102b357600080fd5b508035906020013561135f565b60408051918252519081900360200190f35b3480156102de57600080fd5b506102c0611542565b3480156102f357600080fd5b506102056004803603602081101561030a57600080fd5b5035611548565b34801561031d57600080fd5b506103416004803603604081101561033457600080fd5b50803590602001356116e0565b604080519115158252519081900360200190f35b34801561036157600080fd5b5061036a6116f5565b60408051600160a060020a039092168252519081900360200190f35b34801561039257600080fd5b50610341600480360360208110156103a957600080fd5b8101906020810181356401000000008111156103c457600080fd5b8201836020820111156103d657600080fd5b803590602001918460208302840111640100000000831117156103f857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611704945050505050565b34801561044257600080fd5b5061034161188e565b34801561045757600080fd5b506102c06004803603602081101561046e57600080fd5b503561189f565b34801561048157600080fd5b506104a36004803603602081101561049857600080fd5b503561ffff166118e5565b6040805160ff9092168252519081900360200190f35b3480156104c557600080fd5b5061036a6118f3565b3480156104da57600080fd5b5061036a611903565b3480156104ef57600080fd5b506105136004803603604081101561050657600080fd5b5080359060200135611912565b6040805193845261ffff9283166020850152911682820152519081900360600190f35b34801561054257600080fd5b506105606004803603602081101561055957600080fd5b5035611d2d565b6040518083606080838360005b8381101561058557818101518382015260200161056d565b5050505090500182600360200280838360005b838110156105b0578181015183820152602001610598565b505050509050019250505060405180910390f35b3480156105d057600080fd5b50610341600480360360208110156105e757600080fd5b81019060208101813564010000000081111561060257600080fd5b82018360208201111561061457600080fd5b8035906020019184602083028401116401000000008311171561063657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611ee2945050505050565b34801561068057600080fd5b5061069e6004803603602081101561069757600080fd5b5035611f64565b60408051948552600160a060020a03909316602085015267ffffffffffffffff9091168383015261ffff166060830152519081900360800190f35b3480156106e557600080fd5b50610279611fb8565b3480156106fa57600080fd5b5061036a611fc2565b34801561070f57600080fd5b506102056004803603602081101561072657600080fd5b50351515611fd1565b34801561073b57600080fd5b506107596004803603602081101561075257600080fd5b5035612050565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561079d578181015183820152602001610785565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156107dc5781810151838201526020016107c4565b5050505090500194505050505060405180910390f35b3480156107fe57600080fd5b506102056004803603602081101561081557600080fd5b503561ffff16612318565b34801561082c57600080fd5b506103416004803603602081101561084357600080fd5b503561238f565b34801561085657600080fd5b506103416004803603604081101561086d57600080fd5b50803590602001356123a4565b34801561088657600080fd5b506102056004803603602081101561089d57600080fd5b50356123c7565b3480156108b057600080fd5b506109d8600480360360408110156108c757600080fd5b8101906020810181356401000000008111156108e257600080fd5b8201836020820111156108f457600080fd5b8035906020019184602083028401116401000000008311171561091657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561096657600080fd5b82018360208201111561097857600080fd5b8035906020019184602083028401116401000000008311171561099a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612640945050505050565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610a20578181015183820152602001610a08565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610a5f578181015183820152602001610a47565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610a9e578181015183820152602001610a86565b50505050905001965050505050505060405180910390f35b8051600010610b0f576040805160e560020a62461bcd02815260206004820152601660248201527f6d757374207375626d697420736f6d6520706172747300000000000000000000604482015290519081900360640190fd5b80516103e81015610b90576040805160e560020a62461bcd02815260206004820152602560248201527f6d757374207375626d6974203c3d31303030207061727473207065722070757260448201527f6368617365000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b805160031615610c10576040805160e560020a62461bcd02815260206004820152602b60248201527f6d757374207375626d69742061206d756c7469706c65206f662034207061727460448201527f7320617420612074696d65000000000000000000000000000000000000000000606482015290519081900360840190fd5b600854640100000000900460ff161515610c74576040805160e560020a62461bcd02815260206004820152601560248201527f6d7573742062652061626c6520746f20636c61696d0000000000000000000000604482015290519081900360640190fd5b610c7d81611704565b1515610cd3576040805160e560020a62461bcd02815260206004820152601b60248201527f75736572206d75737420636f6e74726f6c20616c6c2070617274730000000000604482015290519081900360640190fd5b610cdc81611ee2565b1515610d58576040805160e560020a62461bcd02815260206004820152602560248201527f6174206c65617374206f6e6520706172742077617320616c726561647920636c60448201527f61696d6564000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6008548151600091610d87916201000090910461ffff1690610d7b9060046128ac565b9063ffffffff6128c116565b9050610d91612cca565b60e06040519081016040528060008152602001610dad8461189f565b604051908082528060200260200182016040528015610dd6578160200160208202803883390190505b508152336020820152604001610dea6128ea565b67ffffffffffffffff16815261ffff84166020808301919091526040805160608181018352600080835282850181905282840181905283860192909252825180820184528281529384018290529183018190529201529091508080805b8651811015610fe557600b548751600160a060020a0390911690636ea34ce490899084908110610e7357fe5b906020019060200201516040518263ffffffff1660e060020a0281526004018082815260200191505061012060405180830381600087803b158015610eb757600080fd5b505af1158015610ecb573d6000803e3d6000fd5b505050506040513d610120811015610ee257600080fd5b50602081015160408201516060909201519095509093509150600060ff831611610f56576040805160e560020a62461bcd02815260206004820152600e60248201527f696e76616c696420726172697479000000000000000000000000000000000000604482015290519081900360640190fd5b610f668460ff168460ff166123a4565b15610fa65760085460a08601516201000090910461ffff1690600019840160ff1660038110610f9157fe5b6020020180519190910161ffff169052610fdd565b60085460c08601516201000090910461ffff1690600019840160ff1660038110610fcc57fe5b6020020180519190910161ffff1690525b600101610e47565b50600a805460018181018084556000938452875160059093027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a881019384556020808a01518051949593948b9493611063937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a9909101920190612d2b565b5060408201516002820180546060850151608086015161ffff1660e060020a027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff90921660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390961673ffffffffffffffffffffffffffffffffffffffff199094169390931794909416919091171691909117905560a08201516111209060038084019190612d76565b5060c08201516111369060048301906003612d76565b505050039050807fdfbc90baa04e2bf23505044a3a926d7e19508d3805f91ac4d95ab279fc34670d33888a6040518084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156111bf5781810151838201526020016111a7565b5050505090500194505050505060405180910390a250505050505050565b600054600160a060020a0316331461123c576040805160e560020a62461bcd0281526020600482015260236024820152600080516020612e8f833981519152604482015260e960020a6234b7b702606482015290519081900360840190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146112ca576040805160e560020a62461bcd0281526020600482015260236024820152600080516020612e8f833981519152604482015260e960020a6234b7b702606482015290519081900360840190fd5b60075460641161134a576040805160e560020a62461bcd02815260206004820152602660248201527f63616e27742068617665206120636f6d6d6974206c6167206f66203e3130302060448201527f626c6f636b730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600755565b60085462010000900461ffff1681565b6000611369612cca565b600a80548590811061137757fe5b906000526020600020906005020160e0604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156113ea57602002820191906000526020600020905b8154815260200190600101908083116113d6575b50505091835250506002820154600160a060020a038116602083015260a060020a810467ffffffffffffffff1660408084019190915260e060020a90910461ffff1660608084019190915281519081019182905260809092019190600380850191826000855b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161145057505050928452505060408051606081019182905260209093019291506004840190600390826000855b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116114af57905050505050508152505090506000611509610100856128ac90919063ffffffff16565b9050600082602001518281518110151561151f57fe5b602090810291909101015160ff861660020a900460011693505050505b92915050565b60075481565b6000600a8281548110151561155957fe5b600091825260209091206005909102018054909150156115c3576040805160e560020a62461bcd02815260206004820152601660248201527f72616e646f6d6e65737320616c72656164792073657400000000000000000000604482015290519081900360640190fd5b60028101546115e59060a060020a900467ffffffffffffffff16610100612906565b67ffffffffffffffff16431015611646576040805160e560020a62461bcd02815260206004820152601360248201527f6e6f206e65656420746f207265636f6d6d697400000000000000000000000000604482015290519081900360640190fd5b61164e6128ea565b60028201805467ffffffffffffffff9290921660a060020a027bffffffffffffffff00000000000000000000000000000000000000001990921691909117908190556040805161ffff60e060020a84041681529051600160a060020a039092169184917f2f3318763a52d0ca1b50428b986984a024e81ab06973577cb1d8cfc60054be08919081900360200190a35050565b60006116ec838361135f565b15159392505050565b600b54600160a060020a031681565b6000805b8251811015611883576000838281518110151561172157fe5b6020908102909101810151600b54604080517f818d4b5d000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051929450600160a060020a039091169263818d4b5d926044808401938290030181600087803b15801561179657600080fd5b505af11580156117aa573d6000803e3d6000fd5b505050506040513d60208110156117c057600080fd5b5051151561187a57600c54604080517f78bd7935000000000000000000000000000000000000000000000000000000008152600481018490529051600092600160a060020a0316916378bd79359160248083019260a092919082900301818787803b15801561182e57600080fd5b505af1158015611842573d6000803e3d6000fd5b505050506040513d60a081101561185857600080fd5b50519050600160a060020a03811633146118785760009350505050611889565b505b50600101611708565b50600190505b919050565b600854640100000000900460ff1681565b600061153c60016118d96101006118cd836118c188600563ffffffff6128c116565b9063ffffffff61292016565b9063ffffffff6128ac16565b9063ffffffff61293216565b6103e861ffff919091160490565b600054600160a060020a03165b90565b600054600160a060020a031681565b600080600080600a8681548110151561192757fe5b6000918252602090912060059091020180549091501515611992576040805160e560020a62461bcd02815260206004820152601960248201527f6d7573742068617665206265656e20612063616c6c6261636b00000000000000604482015290519081900360640190fd5b60028101546000906119b09060e060020a900461ffff1660056128c1565b9050808610611a09576040805160e560020a62461bcd02815260206004820152601660248201527f6e6f7420612076616c6964206361726420696e64657800000000000000000000604482015290519081900360640190fd5b6000611a15888861135f565b90508015611a6d576040805160e560020a62461bcd02815260206004820152601f60248201527f636172642068617320616c7265616479206265656e2061637469766174656400604482015290519081900360640190fd5b6000611a818861010063ffffffff6128ac16565b60018501805491925060ff8a1691600283900a919084908110611aa057fe5b60009182526020918290200180549092189091556040805160e08101825287548152600188018054835181860281018601909452808452611c269492938a9385810193919290830182828015611b1557602002820191906000526020600020905b815481526020019060010190808311611b01575b50505091835250506002820154600160a060020a038116602083015260a060020a810467ffffffffffffffff1660408084019190915260e060020a90910461ffff1660608084019190915281519081019182905260809092019190600380850191826000855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611b7b57505050928452505060408051606081019182905260209093019291506004840190600390826000855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611bda5790505050505050815250508a876000015461293f565b6001546002880154604080517ffb36eba1000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015261ffff8087166024830152851660448201529051949b50929950169163fb36eba1916064808201926020929091908290030181600087803b158015611ca957600080fd5b505af1158015611cbd573d6000803e3d6000fd5b505050506040513d6020811015611cd357600080fd5b5051604080518b815261ffff808b166020830152891681830152905191995089918c917f016564c07f4e521aad64705adfd5535729110215052a927ce84ad3a10b2e0707919081900360600190a350505050509250925092565b611d35612e08565b611d3d612e08565b611d45612cca565b600a805485908110611d5357fe5b906000526020600020906005020160e060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015611dc657602002820191906000526020600020905b815481526020019060010190808311611db2575b50505091835250506002820154600160a060020a038116602083015260a060020a810467ffffffffffffffff1660408084019190915260e060020a90910461ffff1660608084019190915281519081019182905260809092019190600380850191826000855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611e2c57505050928452505060408051606081019182905260209093019291506004840190600390826000855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611e8b57505050929093525050505060c081015160a090910151909590945092505050565b6000805b82518110156118835760008382815181101515611eff57fe5b906020019060200201519050614726811115611f2057600092505050611889565b60008181526009602052604090205460ff1615611f4257600092505050611889565b6000908152600960205260409020805460ff1916600190811790915501611ee6565b600a805482908110611f7257fe5b600091825260209091206005909102018054600290910154909150600160a060020a0381169060a060020a810467ffffffffffffffff169060e060020a900461ffff1684565b60085461ffff1681565b600c54600160a060020a031681565b600054600160a060020a03163314612030576040805160e560020a62461bcd0281526020600482015260236024820152600080516020612e8f833981519152604482015260e960020a6234b7b702606482015290519081900360840190fd5b600880549115156401000000000264ff0000000019909216919091179055565b60608061205b612cca565b600a80548590811061206957fe5b906000526020600020906005020160e0604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156120dc57602002820191906000526020600020905b8154815260200190600101908083116120c8575b50505091835250506002820154600160a060020a038116602083015260a060020a810467ffffffffffffffff1660408084019190915260e060020a90910461ffff1660608084019190915281519081019182905260809092019190600380850191826000855b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161214257505050928452505060408051606081019182905260209093019291506004840190600390826000855b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116121a15750505092909352505082519293505050151561223d576040805160e560020a62461bcd02815260206004820152601660248201527f72616e646f6d6e657373206e6f74207965742073657400000000000000000000604482015290519081900360640190fd5b8051608082015160009061225c9061ffff16600563ffffffff6128c116565b905080604051908082528060200260200182016040528015612288578160200160208202803883390190505b509350806040519080825280602002602001820160405280156122b5578160200160208202803883390190505b50945060005b8181101561230f576122ce84828561293f565b87838151811015156122dc57fe5b90602001906020020187848151811015156122f357fe5b61ffff93841660209182029092010152911690526001016122bb565b50505050915091565b600054600160a060020a03163314612377576040805160e560020a62461bcd0281526020600482015260236024820152600080516020612e8f833981519152604482015260e960020a6234b7b702606482015290519081900360840190fd5b6008805461ffff191661ffff92909216919091179055565b60096020526000908152604090205460ff1681565b60008260031480156123c0575081600e14806123c05750816010145b9392505050565b6000600a828154811015156123d857fe5b60009182526020909120600590910201805490915015612442576040805160e560020a62461bcd02815260206004820152601660248201527f63616e206f6e6c792063616c6c6261636b206f6e636500000000000000000000604482015290519081900360640190fd5b600281015467ffffffffffffffff60a060020a909104811643909116116124b3576040805160e560020a62461bcd02815260206004820152601d60248201527f63616e6e6f742063616c6c6261636b206265666f726520636f6d6d6974000000604482015290519081900360640190fd5b600281015443906124d79060a060020a900467ffffffffffffffff16610100612906565b67ffffffffffffffff161015612537576040805160e560020a62461bcd02815260206004820152600d60248201527f6d757374207265636f6d6d697400000000000000000000000000000000000000604482015290519081900360640190fd5b600281015460a060020a900467ffffffffffffffff16408015156125a5576040805160e560020a62461bcd02815260206004820152601a60248201527f626c6f636b68617368206d757374206e6f74206265207a65726f000000000000604482015290519081900360640190fd5b6040805160208082018690528183018490526c0100000000000000000000000030026060830152825160548184030181526074830180855281519190920120808655600286015461ffff60e060020a82041690925260948301529151600160a060020a03929092169185917f18eadc9f1160df1b804a48c211e2cd9753758e61a21cb71ce4c8fb2787075898919081900360b40190a3505050565b815160609081908190600081116126a1576040805160e560020a62461bcd02815260206004820152601760248201527f63616e2774206163746976617465206e6f206361726473000000000000000000604482015290519081900360640190fd5b60085461ffff16811115612725576040805160e560020a62461bcd02815260206004820152602d60248201527f63616e2774206163746976617465206d6f7265207468616e207468652061637460448201527f69766174696f6e206c696d697400000000000000000000000000000000000000606482015290519081900360840190fd5b8451811461277d576040805160e560020a62461bcd02815260206004820152601960248201527f6d7573742068617665207468652073616d65206c656e67746800000000000000604482015290519081900360640190fd5b806040519080825280602002602001820160405280156127a7578160200160208202803883390190505b509350806040519080825280602002602001820160405280156127d4578160200160208202803883390190505b50925080604051908082528060200260200182016040528015612801578160200160208202803883390190505b50915060005b818110156128a357612847878281518110151561282057fe5b90602001906020020151878381518110151561283857fe5b90602001906020020151611912565b878481518110151561285557fe5b906020019060200201878581518110151561286c57fe5b906020019060200201878681518110151561288357fe5b61ffff948516602091820290920101529290911690915252600101612807565b50509250925092565b600081838115156128b957fe5b049392505050565b60008215156128d25750600061153c565b508181028183828115156128e257fe5b041461153c57fe5b60006129016007544361293290919063ffffffff16565b905090565b81810167ffffffffffffffff808416908216101561153c57fe5b60008282111561292c57fe5b50900390565b8181018281101561153c57fe5b60008061294a612e27565b6129548585612ad6565b60a08701515190915061ffff8116861015612993576006546060830151604084015161ffff90921695509061298890612bac565b019250612ace915050565b60a0870151602001510161ffff81168610156129c457600654606083015161ffff90911694506129886103ac612bac565b60a0870151604001510161ffff81168610156129f557600654606083015161ffff90911694506129886103de612bac565b60c0870151510161ffff8116861015612a2e57612a1a82602001518360800151612bf8565b935081606001516129888360400151612bac565b60c0870151602001510161ffff8116861015612a6857612a5682602001518360800151612bf8565b935081606001516129886103ac612bac565b60c0870151604001510161ffff8116861015612aa257612a9082602001518360800151612bf8565b935081606001516129886103de612bac565b612ab482602001518360800151612bf8565b93508160600151612ac88360400151612bac565b01925050505b935093915050565b612ade612e27565b6040805160208082018690528183018590528251808303840181526060830180855281519190920120610100830190935282815290608001620f4240612b27846004600a612caa565b811515612b3057fe5b0663ffffffff1681526020016103e8612b4c8460026004612caa565b811515612b5557fe5b0661ffff1681526020016103e8612b6f8460026006612caa565b811515612b7857fe5b0661ffff16815260200161ffff612b928460026008612caa565b811515612b9b57fe5b0661ffff1681525091505092915050565b60006103e661ffff831610612bc45750610bb8611889565b6103dc61ffff831610612bda57506107d0611889565b6103aa61ffff831610612bf057506103e8611889565b506000919050565b6000620ecd1063ffffffff841610612c54576005805461ffff8416811515612c1c57fe5b06815481101515612c2957fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff16905061153c565b620d949063ffffffff841610612c76576004805461ffff8416811515612c1c57fe5b620a393063ffffffff841610612c98576003805461ffff8416811515612c1c57fe5b6002805461ffff8416811515612c1c57fe5b6000199081016008908102600290810a909404920290920a919091011690565b6101606040519081016040528060008152602001606081526020016000600160a060020a03168152602001600067ffffffffffffffff168152602001600061ffff168152602001612d19612e08565b8152602001612d26612e08565b905290565b828054828255906000526020600020908101928215612d66579160200282015b82811115612d66578251825591602001919060010190612d4b565b50612d72929150612e55565b5090565b600183019183908215612dfc5791602002820160005b83821115612dcc57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612d8c565b8015612dfa5782816101000a81549061ffff0219169055600201602081600101049283019260010302612dcc565b505b50612d72929150612e6f565b6060604051908101604052806003906020820280388339509192915050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b61190091905b80821115612d725760008155600101612e5b565b61190091905b80821115612d7257805461ffff19168155600101612e7556fe6d757374206265206f776e657220746f2063616c6c20746869732066756e6374a165627a7a723058204be03b1d3d92e896775ce041833d086c1555f68b886cd10e1eb3c24de9a067f100290000000000000000000000006ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab000000000000000000000000d2f81cd7a20d60c0d558496c7169a20968389b4000000000000000000000000098ecf84ac50aa3c090f88b04676babc296d03527",
  "constructorArguments": "0000000000000000000000006ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab000000000000000000000000d2f81cd7a20d60c0d558496c7169a20968389b4000000000000000000000000098ecf84ac50aa3c090f88b04676babc296d03527"
}