{
  "address": "0x16f36e2ca0c2b136595eb3e40ecb3c9be8cd8f57",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TopmonksRegistrar",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-11\n*/\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\ninterface ENS {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n    function setResolver(bytes32 node, address resolver) public;\n    function setOwner(bytes32 node, address owner) public;\n    function setTTL(bytes32 node, uint64 ttl) public;\n    function owner(bytes32 node) public view returns (address);\n    function resolver(bytes32 node) public view returns (address);\n    function ttl(bytes32 node) public view returns (uint64);\n\n}\n\n\ncontract ResolverInterface {\n    function PublicResolver(address ensAddr) public;\n    function setAddr(bytes32 node, address addr) public;\n    function setHash(bytes32 node, bytes32 hash) public;\n    function addr(bytes32 node) public view returns (address);\n    function hash(bytes32 node) public view returns (bytes32);\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool);\n}\n\n\n\ncontract TopmonksRegistrar is Ownable {\n    bytes32 public rootNode;\n    ENS public ens;\n    ResolverInterface public resolver;\n\n    modifier onlyDomainOwner(bytes32 subnode) {\n        address currentOwner = ens.owner(keccak256(abi.encodePacked(rootNode, subnode)));\n        require(currentOwner == 0 || currentOwner == msg.sender, \"Only owner\");\n        _;\n    }\n\n    constructor(bytes32 _node, address _ensAddr, address _resolverAddr) public {\n        rootNode = _node;\n        ens = ENS(_ensAddr);\n        resolver = ResolverInterface(_resolverAddr);\n    }\n\n    function setRootNode(bytes32 _node) public onlyOwner {\n        rootNode = _node;\n    }\n\n    function setResolver(address _resolverAddr) public onlyOwner {\n        resolver = ResolverInterface(_resolverAddr);\n    }\n\n    function setNodeOwner(address _newOwner) public onlyOwner {\n        ens.setOwner(rootNode, _newOwner);\n    }\n\n    function setSubnodeOwner(bytes32 _subnode, address _addr) public onlyOwner {\n        ens.setSubnodeOwner(rootNode, _subnode, _addr);\n    }\n\n    function register(bytes32 _subnode, address _addr) public onlyDomainOwner(_subnode) {\n        ens.setSubnodeOwner(rootNode, _subnode, this);\n        bytes32 node = keccak256(abi.encodePacked(rootNode, _subnode));\n        ens.setResolver(node, resolver);\n        resolver.setAddr(node, _addr);\n        ens.setSubnodeOwner(rootNode, _subnode, _addr);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610a0283398101604090815281516020830151919092015160008054600160a060020a0319908116331790915560019390935560028054600160a060020a039384169085161790556003805492909116919092161790556109858061007d6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304f3bcec81146100b35780633f15457f146100e45780634e543b26146100f9578063715018a61461011c57806377f9996b146101315780638cb8ecec146101525780638da5cb5b14610176578063d20ab1d71461018b578063d22057a9146101a3578063f2fde38b146101c7578063faff50a8146101e8575b600080fd5b3480156100bf57600080fd5b506100c861020f565b60408051600160a060020a039092168252519081900360200190f35b3480156100f057600080fd5b506100c861021e565b34801561010557600080fd5b5061011a600160a060020a036004351661022d565b005b34801561012857600080fd5b5061011a610273565b34801561013d57600080fd5b5061011a600160a060020a03600435166102df565b34801561015e57600080fd5b5061011a600435600160a060020a0360243516610382565b34801561018257600080fd5b506100c861042d565b34801561019757600080fd5b5061011a60043561043c565b3480156101af57600080fd5b5061011a600435600160a060020a0360243516610458565b3480156101d357600080fd5b5061011a600160a060020a03600435166108b3565b3480156101f457600080fd5b506101fd6108d6565b60408051918252519081900360200190f35b600354600160a060020a031681565b600254600160a060020a031681565b600054600160a060020a0316331461024457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461028a57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146102f657600080fd5b600254600154604080517f5b0fc9c30000000000000000000000000000000000000000000000000000000081526004810192909252600160a060020a0384811660248401529051921691635b0fc9c39160448082019260009290919082900301818387803b15801561036757600080fd5b505af115801561037b573d6000803e3d6000fd5b5050505050565b600054600160a060020a0316331461039957600080fd5b600254600154604080517f06ab5923000000000000000000000000000000000000000000000000000000008152600481019290925260248201859052600160a060020a03848116604484015290519216916306ab59239160648082019260009290919082900301818387803b15801561041157600080fd5b505af1158015610425573d6000803e3d6000fd5b505050505050565b600054600160a060020a031681565b600054600160a060020a0316331461045357600080fd5b600155565b60025460015460408051602080820193909352808201869052815180820383018152606090910191829052805160009487948694600160a060020a03909216936302571be3939092918291908401908083835b602083106104ca5780518252601f1990920191602091820191016104ab565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff88167c01000000000000000000000000000000000000000000000000000000000283526004830152925160248083019650939450929083900301905081600087803b15801561054457600080fd5b505af1158015610558573d6000803e3d6000fd5b505050506040513d602081101561056e57600080fd5b50519050600160a060020a03811615806105905750600160a060020a03811633145b15156105fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c79206f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254600154604080517f06ab592300000000000000000000000000000000000000000000000000000000815260048101929092526024820188905230604483015251600160a060020a03909216916306ab59239160648082019260009290919082900301818387803b15801561067357600080fd5b505af1158015610687573d6000803e3d6000fd5b5050600154604080516020808201939093528082018a9052815180820383018152606090910191829052805190945090925082918401908083835b602083106106e15780518252601f1990920191602091820191016106c2565b5181516020939093036101000a6000190180199091169216919091179052604080519190930181900381206002546003547f1896f70a00000000000000000000000000000000000000000000000000000000845260048401839052600160a060020a0390811660248501529451919950939093169450631896f70a9350604480820193600093509182900301818387803b15801561077e57600080fd5b505af1158015610792573d6000803e3d6000fd5b5050600354604080517fd5fa2b0000000000000000000000000000000000000000000000000000000000815260048101889052600160a060020a038981166024830152915191909216935063d5fa2b009250604480830192600092919082900301818387803b15801561080457600080fd5b505af1158015610818573d6000803e3d6000fd5b5050600254600154604080517f06ab59230000000000000000000000000000000000000000000000000000000081526004810192909252602482018a9052600160a060020a0389811660448401529051921693506306ab5923925060648082019260009290919082900301818387803b15801561089457600080fd5b505af11580156108a8573d6000803e3d6000fd5b505050505050505050565b600054600160a060020a031633146108ca57600080fd5b6108d3816108dc565b50565b60015481565b600160a060020a03811615156108f157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058201338b81c87a6f8a5a2ae91cd7d2be6b029118923dace31bb72895a816d32eea800292d2f0498bf774695773cffc0bc0c8a9c48a06ef342ba28bfedc2e43755d0b151000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b000000000000000000000000d6498930853fb0e622e433895b1e0988a10c2eba",
  "constructorArguments": "2d2f0498bf774695773cffc0bc0c8a9c48a06ef342ba28bfedc2e43755d0b151000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b000000000000000000000000d6498930853fb0e622e433895b1e0988a10c2eba"
}