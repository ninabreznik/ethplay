{
  "address": "0xb1a819a4aa03741d8b2af06d78ca91a74c831029",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DOCToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-29\n*/\n\npragma solidity ^0.4.19;\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n// ----------------------------------------------------------------------------\n// Based on the final ERC20 specification at:\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\ncontract ERC20Token is ERC20Interface {\n\n    using SafeMath for uint256;\n\n    string  private tokenName;\n    string  private tokenSymbol;\n    uint8   private tokenDecimals;\n    uint256 internal tokenTotalSupply;\n    uint256 public publicReservedToken;\n    uint256 public tokenConversionFactor = 10**4;\n    mapping(address => uint256) internal balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) internal allowed;\n\n\n    function ERC20Token(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply,address _publicReserved,uint256 _publicReservedPersentage,address[] boardReserved,uint256[] boardReservedPersentage) public {\n        tokenName = _name;\n        tokenSymbol = _symbol;\n        tokenDecimals = _decimals;\n        tokenTotalSupply = _totalSupply;\n\n        // The initial Public Reserved balance of tokens is assigned to the given token holder address.\n        // from total supple 90% tokens assign to public reserved  holder\n        publicReservedToken = _totalSupply.mul(_publicReservedPersentage).div(tokenConversionFactor);\n        balances[_publicReserved] = publicReservedToken;\n\n        //10 persentage token available for board members\n        uint256 boardReservedToken = _totalSupply.sub(publicReservedToken);\n\n        // Per EIP20, the constructor should fire a Transfer event if tokens are assigned to an account.\n        Transfer(0x0, _publicReserved, publicReservedToken);\n\n        // The initial Board Reserved balance of tokens is assigned to the given token holder address.\n        uint256 persentageSum = 0;\n        for(uint i=0; i<boardReserved.length; i++){\n            //\n            persentageSum = persentageSum.add(boardReservedPersentage[i]);\n            require(persentageSum <= 10000);\n            //assigning board members persentage tokens to particular board member address.\n            uint256 token = boardReservedToken.mul(boardReservedPersentage[i]).div(tokenConversionFactor);\n            balances[boardReserved[i]] = token;\n            Transfer(0x0, boardReserved[i], token);\n        }\n\n    }\n\n\n    function name() public view returns (string) {\n        return tokenName;\n    }\n\n\n    function symbol() public view returns (string) {\n        return tokenSymbol;\n    }\n\n\n    function decimals() public view returns (uint8) {\n        return tokenDecimals;\n    }\n\n\n    function totalSupply() public view returns (uint256) {\n        return tokenTotalSupply;\n    }\n\n    // Get the token balance for account `tokenOwner`\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        uint256 fromBalance = balances[msg.sender];\n        if (fromBalance < _value) return false;\n        if (_value > 0 && msg.sender != _to) {\n          balances[msg.sender] = fromBalance.sub(_value);\n          balances[_to] = balances[_to].add(_value);\n        }\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    // Send `tokens` amount of tokens from address `from` to address `to`\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        \n        uint256 spenderAllowance = allowed [_from][msg.sender];\n        if (spenderAllowance < _value) return false;\n        uint256 fromBalance = balances [_from];\n        if (fromBalance < _value) return false;\n    \n        allowed [_from][msg.sender] = spenderAllowance.sub(_value);\n    \n        if (_value > 0 && _from != _to) {\n          balances [_from] = fromBalance.add(_value);\n          balances [_to] = balances[_to].add(_value);\n        }\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n}\n\ncontract Owned {\n\n    address public owner;\n    address public proposedOwner = address(0);\n\n    event OwnershipTransferInitiated(address indexed _proposedOwner);\n    event OwnershipTransferCompleted(address indexed _newOwner);\n    event OwnershipTransferCanceled();\n\n\n    function Owned() public\n    {\n        owner = msg.sender;\n    }\n\n\n    modifier onlyOwner() {\n        require(isOwner(msg.sender));\n        _;\n    }\n\n\n    function isOwner(address _address) public view returns (bool) {\n        return (_address == owner);\n    }\n\n\n    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool) {\n        require(_proposedOwner != address(0));\n        require(_proposedOwner != address(this));\n        require(_proposedOwner != owner);\n\n        proposedOwner = _proposedOwner;\n\n        OwnershipTransferInitiated(proposedOwner);\n\n        return true;\n    }\n\n\n    function cancelOwnershipTransfer() public onlyOwner returns (bool) {\n        //if proposedOwner address already address(0) then it will return true.\n        if (proposedOwner == address(0)) {\n            return true;\n        }\n        //if not then first it will do address(0) then it will return true.\n        proposedOwner = address(0);\n\n        OwnershipTransferCanceled();\n\n        return true;\n    }\n\n\n    function completeOwnershipTransfer() public returns (bool) {\n\n        require(msg.sender == proposedOwner);\n\n        owner = msg.sender;\n        proposedOwner = address(0);\n\n        OwnershipTransferCompleted(owner);\n\n        return true;\n    }\n}\n\ncontract FinalizableToken is ERC20Token, Owned {\n\n    using SafeMath for uint256;\n\n\n    /**\n         * @dev Call publicReservedAddress - library function exposed for testing.\n    */\n    address public publicReservedAddress;\n\n    //board members time list\n    mapping(address=>uint) private boardReservedAccount;\n    uint256[] public BOARD_RESERVED_YEARS = [1 years,2 years,3 years,4 years,5 years,6 years,7 years,8 years,9 years,10 years];\n    \n    event Burn(address indexed burner,uint256 value);\n\n    // The constructor will assign the initial token supply to the owner (msg.sender).\n    function FinalizableToken(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply,address _publicReserved,uint256 _publicReservedPersentage,address[] _boardReserved,uint256[] _boardReservedPersentage) public\n    ERC20Token(_name, _symbol, _decimals, _totalSupply, _publicReserved, _publicReservedPersentage, _boardReserved, _boardReservedPersentage)\n    Owned(){\n        publicReservedAddress = _publicReserved;\n        for(uint i=0; i<_boardReserved.length; i++){\n            boardReservedAccount[_boardReserved[i]] = currentTime() + BOARD_RESERVED_YEARS[i];\n        }\n    }\n\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(validateTransfer(msg.sender, _to));\n        return super.transfer(_to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(validateTransfer(msg.sender, _to));\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    function validateTransfer(address _sender, address _to) private view returns(bool) {\n        //check null address\n        require(_to != address(0));\n        \n        //check board member address\n        uint256 time = boardReservedAccount[_sender];\n        if (time == 0) {\n            //if not then return and allow for transfer\n            return true;\n        }else{\n            // else  then check allowed token for board member\n            return currentTime() > time;\n        }\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        tokenTotalSupply = tokenTotalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n    \n     //get current time\n    function currentTime() public constant returns (uint256) {\n        return now;\n    }\n\n}\n\ncontract DOCTokenConfig {\n\n    string  public constant TOKEN_SYMBOL      = \"DOC\";\n    string  public constant TOKEN_NAME        = \"DOMUSCOINS Token\";\n    uint8   public constant TOKEN_DECIMALS    = 18;\n\n    uint256 public constant DECIMALSFACTOR    = 10**uint256(TOKEN_DECIMALS);\n    uint256 public constant TOKEN_TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\n\n    address public constant PUBLIC_RESERVED = 0x347364f2bc343f6c676620d09eb9c37431dbee60;\n    uint256 public constant PUBLIC_RESERVED_PERSENTAGE = 9000;\n\n    address[] public BOARD_RESERVED = [0x7a59b7a5d6b00745effe411090ff424819b7055a,\n    0x00b9991e08d8e20b6efd12d259321b7ab88a700a,\n    0x4826f541eba27b6db07c14a7c2b1a4ea404eca37,\n    0xf2baf639dc3f7f05912b8760049094adebc85244,\n    0xb64ddc7df18737863eeb613f692595523a0e8d4b,\n    0x46c999a445d6ae5d800ce76e90ce06935188b7ab,\n    0x46c999a445d6ae5d800ce76e90ce06935188b7ab,\n    0x428e8c098453fa9968b712ac59806f91ae202807,\n    0x17a58a997a0a5ea218e82c7ae6d560e04f4defa0,\n    0x03ff44be1efb207fea4a30fd546b0741a476a0e4];\n\n    uint256[] public BOARD_RESERVED_PERSENTAGE = [200,200,200,500,500,1000,1000,2000,2000,2400];\n\n}\n\ncontract DOCToken is FinalizableToken, DOCTokenConfig {\n\n    using SafeMath for uint256;\n    event TokensReclaimed(uint256 _amount);\n\n    function DOCToken() public\n    FinalizableToken(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS, TOKEN_TOTALSUPPLY, PUBLIC_RESERVED, PUBLIC_RESERVED_PERSENTAGE, BOARD_RESERVED, BOARD_RESERVED_PERSENTAGE)\n    {\n\n    }\n\n\n    // Allows the owner to reclaim tokens that have been sent to the token address itself.\n    function reclaimTokens() public onlyOwner returns (bool) {\n\n        address account = address(this);\n        uint256 amount  = balanceOf(account);\n\n        if (amount == 0) {\n            return false;\n        }\n\n        balances[account] = balances[account].sub(amount);\n        balances[owner] = balances[owner].add(amount);\n\n        Transfer(account, owner, amount);\n\n        TokensReclaimed(amount);\n\n        return true;\n    }\n}",
  "bytecode": "60606040526127106005556000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610140604051908101604052806301e1338063ffffffff1681526020016303c2670063ffffffff1681526020016305a39a8063ffffffff168152602001630784ce0063ffffffff168152602001630966018063ffffffff168152602001630b47350063ffffffff168152602001630d28688063ffffffff168152602001630f099c0063ffffffff1681526020016310eacf8063ffffffff1681526020016312cc030063ffffffff16815250600c90600a6200010992919062000a06565b5061014060405190810160405280737a59b7a5d6b00745effe411090ff424819b7055a73ffffffffffffffffffffffffffffffffffffffff16815260200172b9991e08d8e20b6efd12d259321b7ab88a700a73ffffffffffffffffffffffffffffffffffffffff168152602001734826f541eba27b6db07c14a7c2b1a4ea404eca3773ffffffffffffffffffffffffffffffffffffffff16815260200173f2baf639dc3f7f05912b8760049094adebc8524473ffffffffffffffffffffffffffffffffffffffff16815260200173b64ddc7df18737863eeb613f692595523a0e8d4b73ffffffffffffffffffffffffffffffffffffffff1681526020017346c999a445d6ae5d800ce76e90ce06935188b7ab73ffffffffffffffffffffffffffffffffffffffff1681526020017346c999a445d6ae5d800ce76e90ce06935188b7ab73ffffffffffffffffffffffffffffffffffffffff16815260200173428e8c098453fa9968b712ac59806f91ae20280773ffffffffffffffffffffffffffffffffffffffff1681526020017317a58a997a0a5ea218e82c7ae6d560e04f4defa073ffffffffffffffffffffffffffffffffffffffff1681526020017303ff44be1efb207fea4a30fd546b0741a476a0e473ffffffffffffffffffffffffffffffffffffffff16815250600d90600a6200030692919062000a60565b506101406040519081016040528060c861ffff16815260200160c861ffff16815260200160c861ffff1681526020016101f461ffff1681526020016101f461ffff1681526020016103e861ffff1681526020016103e861ffff1681526020016107d061ffff1681526020016107d061ffff16815260200161096061ffff16815250600e90600a6200039992919062000aef565b503415620003a657600080fd5b6040805190810160405280601081526020017f444f4d5553434f494e5320546f6b656e000000000000000000000000000000008152506040805190810160405280600381526020017f444f43000000000000000000000000000000000000000000000000000000000081525060128060ff16600a0a633b9aca000273347364f2bc343f6c676620d09eb9c37431dbee60612328600d805480602002602001604051908101604052809291908181526020018280548015620004bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000472575b5050505050600e8054806020026020016040519081016040528092919081815260200182805480156200051057602002820191906000526020600020905b815481526020019060010190808311620004fb575b5050505050600088888888888888886000806000808b600090805190602001906200053d92919062000b47565b508a600190805190602001906200055692919062000b47565b5089600260006101000a81548160ff021916908360ff16021790555088600381905550620005c0600554620005a3898c6200096a6401000000000262001de1179091906401000000009004565b6200099e6401000000000262001e12179091906401000000009004565b600481905550600454600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620006316004548a620009c46401000000000262001ba1179091906401000000009004565b93508773ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a360009250600091505b85518210156200081a57620006d38583815181101515620006ab57fe5b9060200190602002015184620009e16401000000000262001bbd179091906401000000009004565b92506127108311151515620006e757600080fd5b620007466005546200072987858151811015156200070157fe5b90602001906020020151876200096a6401000000000262001de1179091906401000000009004565b6200099e6401000000000262001e12179091906401000000009004565b9050806006600088858151811015156200075c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508582815181101515620007b357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a381806001019250506200068e565b50505050505050505050505033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b82518110156200095b57600c81815481101515620008c757fe5b906000526020600020900154620008f1620009fe64010000000002620015fd176401000000009004565b01600b600085848151811015156200090557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050620008ad565b50505050505050505062000c3c565b6000818302905060008314806200098c57508183828115156200098957fe5b04145b15156200099857600080fd5b92915050565b60008082111515620009af57600080fd5b8183811515620009bb57fe5b04905092915050565b6000828211151515620009d657600080fd5b818303905092915050565b60008183019050828110151515620009f857600080fd5b92915050565b600042905090565b82805482825590600052602060002090810192821562000a4d579160200282015b8281111562000a4c578251829063ffffffff1690559160200191906001019062000a27565b5b50905062000a5c919062000bce565b5090565b82805482825590600052602060002090810192821562000adc579160200282015b8281111562000adb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000a81565b5b50905062000aeb919062000bf6565b5090565b82805482825590600052602060002090810192821562000b34579160200282015b8281111562000b33578251829061ffff1690559160200191906001019062000b10565b5b50905062000b43919062000bce565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000b8a57805160ff191683800117855562000bbb565b8280016001018555821562000bbb579182015b8281111562000bba57825182559160200191906001019062000b9d565b5b50905062000bca919062000bce565b5090565b62000bf391905b8082111562000bef57600081600090555060010162000bd5565b5090565b90565b62000c3991905b8082111562000c3557600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010162000bfd565b5090565b90565b611e628062000c4c6000396000f30060606040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610190578063095ea7b31461021e57806318160ddd1461027857806318821400146102a15780631b6885651461032f57806323452b9c1461035857806323b872dd146103855780632a905318146103fe5780632f54bf6e1461048c578063313ce567146104dd5780633c54caa51461050c57806342966c681461053957806353105fbc1461055c5780635b7f415c1461058557806360a1b056146105b457806370a08231146105eb57806374c950fb146106385780638bc04eb7146106615780638be4886c1461068a5780638da5cb5b146106df57806395d89b4114610734578063a9059cbb146107c2578063b96743271461081c578063bb1d660c1461087f578063c0b6f561146108b6578063c4f99aa514610907578063d153b60c1461095c578063d18e81b3146109b1578063dd62ed3e146109da578063e1f82d6014610a46578063e71a781114610a6f575b600080fd5b341561019b57600080fd5b6101a3610a9c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e35780820151818401526020810190506101c8565b50505050905090810190601f1680156102105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022957600080fd5b61025e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b44565b604051808215151515815260200191505060405180910390f35b341561028357600080fd5b61028b610c36565b6040518082815260200191505060405180910390f35b34156102ac57600080fd5b6102b4610c40565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102f45780820151818401526020810190506102d9565b50505050905090810190601f1680156103215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033a57600080fd5b610342610c79565b6040518082815260200191505060405180910390f35b341561036357600080fd5b61036b610c7f565b604051808215151515815260200191505060405180910390f35b341561039057600080fd5b6103e4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d6b565b604051808215151515815260200191505060405180910390f35b341561040957600080fd5b610411610d96565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610451578082015181840152602081019050610436565b50505050905090810190601f16801561047e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049757600080fd5b6104c3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dcf565b604051808215151515815260200191505060405180910390f35b34156104e857600080fd5b6104f0610e29565b604051808260ff1660ff16815260200191505060405180910390f35b341561051757600080fd5b61051f610e40565b604051808215151515815260200191505060405180910390f35b341561054457600080fd5b61055a60048080359060200190919050506110af565b005b341561056757600080fd5b61056f611212565b6040518082815260200191505060405180910390f35b341561059057600080fd5b610598611218565b604051808260ff1660ff16815260200191505060405180910390f35b34156105bf57600080fd5b6105d5600480803590602001909190505061121d565b6040518082815260200191505060405180910390f35b34156105f657600080fd5b610622600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611241565b6040518082815260200191505060405180910390f35b341561064357600080fd5b61064b61128a565b6040518082815260200191505060405180910390f35b341561066c57600080fd5b61067461129b565b6040518082815260200191505060405180910390f35b341561069557600080fd5b61069d6112a6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106ea57600080fd5b6106f26112be565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561073f57600080fd5b6107476112e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561078757808201518184015260208101905061076c565b50505050905090810190601f1680156107b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107cd57600080fd5b610802600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061138c565b604051808215151515815260200191505060405180910390f35b341561082757600080fd5b61083d60048080359060200190919050506113b5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561088a57600080fd5b6108a060048080359060200190919050506113f4565b6040518082815260200191505060405180910390f35b34156108c157600080fd5b6108ed600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611418565b604051808215151515815260200191505060405180910390f35b341561091257600080fd5b61091a6115b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561096757600080fd5b61096f6115d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109bc57600080fd5b6109c46115fd565b6040518082815260200191505060405180910390f35b34156109e557600080fd5b610a30600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611605565b6040518082815260200191505060405180910390f35b3415610a5157600080fd5b610a5961168c565b6040518082815260200191505060405180910390f35b3415610a7a57600080fd5b610a82611692565b604051808215151515815260200191505060405180910390f35b610aa4611dcd565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b3a5780601f10610b0f57610100808354040283529160200191610b3a565b820191906000526020600020905b815481529060010190602001808311610b1d57829003601f168201915b5050505050905090565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600354905090565b6040805190810160405280601081526020017f444f4d5553434f494e5320546f6b656e0000000000000000000000000000000081525081565b61232881565b6000610c8a33610dcf565b1515610c9557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610cf55760019050610d68565b6000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f670699162ea7ba4de638b5a57c2148aed9ee8bd69740a5e6a7db727e3886c88b60405160405180910390a1600190505b90565b6000610d7733846117df565b1515610d8257600080fd5b610d8d848484611886565b90509392505050565b6040805190810160405280600381526020017f444f43000000000000000000000000000000000000000000000000000000000081525081565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600260009054906101000a900460ff16905090565b6000806000610e4e33610dcf565b1515610e5957600080fd5b309150610e6582611241565b90506000811415610e7957600092506110aa565b610ecb81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ba190919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f828160066000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bbd90919063ffffffff16565b60066000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a37fbce3cc672456937708767d1642a17cacb1962753bd5cff46c8dbd377906a6b4b816040518082815260200191505060405180910390a1600192505b505090565b600080821115156110bf57600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561110d57600080fd5b33905061116282600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ba190919063ffffffff16565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111ba82600354611ba190919063ffffffff16565b6003819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60055481565b601281565b600c8181548110151561122c57fe5b90600052602060002090016000915090505481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601260ff16600a0a633b9aca000281565b601260ff16600a0a81565b73347364f2bc343f6c676620d09eb9c37431dbee6081565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6112ec611dcd565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113825780601f1061135757610100808354040283529160200191611382565b820191906000526020600020905b81548152906001019060200180831161136557829003601f168201915b5050505050905090565b600061139833846117df565b15156113a357600080fd5b6113ad8383611bd9565b905092915050565b600d818154811015156113c457fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e8181548110151561140357fe5b90600052602060002090016000915090505481565b600061142333610dcf565b151561142e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561146a57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156114a557600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561150257600080fd5b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f20f5afdf40bf7b43c89031a5d4369a30b159e512d164aa46124bcb706b4a1caf60405160405180910390a260019050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600042905090565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60045481565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f057600080fd5b33600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f624adc4c72536289dd9d5439ccdeccd8923cb9af95fb626b21935447c77b840760405160405180910390a26001905090565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561181e57600080fd5b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415611872576001915061187f565b8061187b6115fd565b1191505b5092915050565b6000806000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491508382101561191b5760009250611b98565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561196e5760009250611b98565b6119818483611ba190919063ffffffff16565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600084118015611a3d57508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b15611b2e57611a558482611bbd90919063ffffffff16565b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611aea84600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bbd90919063ffffffff16565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b6000828211151515611bb257600080fd5b818303905092915050565b60008183019050828110151515611bd357600080fd5b92915050565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611c2f5760009150611dc6565b600083118015611c6b57508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611d5c57611c838382611ba190919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d1883600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bbd90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5092915050565b602060405190810160405280600081525090565b600081830290506000831480611e015750818382811515611dfe57fe5b04145b1515611e0c57600080fd5b92915050565b60008082111515611e2257600080fd5b8183811515611e2d57fe5b049050929150505600a165627a7a723058204a12df9bb6830356e824c0a588b258a463eeaca6ea718fd3718fbee37dfe566d0029"
}