{
  "address": "0x117a36055bf56b0157bd1df3cf45bfd7e01e1663",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETCH3dV",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-05\n*/\n\npragma solidity ^0.4.20;\n\n/* Welcome to ETCH3dV\n* This is the first Game with an unique Profit-Sharing System\n* We believe at EtherChain, this game-contract will be one of the most sustainable and successful dividends contract ever created because of the unique profits sharing aspect\" (Steve - Founder)\n* Backed by a solid community, we will grow with you! \n\n* Join our contract-Website: https://etch3dv.etherchain.site/\n* Join our main-Website-: https://etherchain.site/\n* Join our Telegram: https://t.me/EtherChainETCH\n*/\n\ncontract ETCH3dV {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n    \n    \n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if( onlyFounders && ((totalEthereumBalance() - _amountOfEthereum) <= FounderQuota_ )){\n            require(\n                // is the customer in the Founder list?\n                Founders_[_customerAddress] == true &&\n                \n                // does the customer purchase exceed the max Founder quota?\n                (FounderAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= FounderMaxPurchase_\n                \n            );\n            \n            // updated the accumulated quota    \n            FounderAccumulatedQuota_[_customerAddress] = SafeMath.add(FounderAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n        \n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the Founder phase won't reinitiate\n            onlyFounders = false;\n            _;    \n        }\n        \n    }\n    \n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"ETCH3dV\";\n    string public symbol = \"ETCH3dV\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 5; //20% Fee on buys and sells\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 100 tokens). Can be changed later in the game, when the contract moons\n    uint256 public stakingRequirement = 100e18;\n    \n    // Founder program\n    mapping(address => bool) internal Founders_;\n    uint256 constant internal FounderMaxPurchase_ = 2.5 ether;\n    uint256 constant internal FounderQuota_ = 5 ether;\n    \n    \n    \n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal FounderAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n    \n    // when this is set to true, only Founders can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyFounders = true;\n    \n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    function ETCH3dV()\n        public\n    {\n        // add administrators here\n        administrators[0xF1CE6B722A37d8E8a1A4A4974b369851570747a5] = true;\n        \n         // add the Profit-Sharing wallet. Everything from this wallet is distributed to qualified ETCH token holders\n        Founders_[0xf0f0DA16E817f0BfCbdA118E82Cf0ED78A1AE6ab] = true; \n              \n         // add the private wallet of the founder:\n        Founders_[0xF1CE6B722A37d8E8a1A4A4974b369851570747a5] = true;\n        \n\n\n    }\n     \n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n    */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        \n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        \n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        \n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's a 10% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        \n        // make sure we have the requested tokens\n        // also disables transfers until Founder phase is over\n        // ( we dont want whale premines )\n        require(!onlyFounders && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n        \n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n  \n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        \n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        \n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        \n        // fire event\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\n        \n        // ERC20\n        return true;\n       \n    }\n    \n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the Founder phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyFounders = false;\n    }\n    \n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n    \n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend) \n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        return _amountOfTokens;\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n    \n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n            \n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n \n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n            \n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        // fire event\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived = \n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60c0604052600760808190527f455443483364560000000000000000000000000000000000000000000000000060a09081526200004091600091906200015c565b506040805180820190915260078082527f4554434833645600000000000000000000000000000000000000000000000000602090920191825262000087916001916200015c565b5068056bc75e2d631000006002556000600855600b805460ff19166001179055348015620000b457600080fd5b507f78ceb88354a163bcba93ff3b5e81d9efaeeec299f4098f46ab5a1532f9e0e9368054600160ff19918216811790925560036020527f9f0736311b19f703777d3dc81a75e790ed3f5e079af8fb8ba4053a9e5de2b793805482168317905573f1ce6b722a37d8e8a1a4a4974b369851570747a56000527fc738393882371ead21d1ee91bffc553e349ebdc1a39d044623956a47151f43218054909116909117905562000201565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019f57805160ff1916838001178555620001cf565b82800160010185558215620001cf579182015b82811115620001cf578251825591602001919060010190620001b2565b50620001dd929150620001e1565b5090565b620001fe91905b80821115620001dd5760008155600101620001e8565b90565b6115cb80620002116000396000f30060806040526004361061015d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461016b57806306fdde031461019e57806310d0ffdd1461022857806318160ddd146102405780632260937314610255578063313ce5671461026d5780633ccfd60b146102985780634b750334146102af57806356d399e8146102c4578063688abbf7146102d95780636b2f4632146102f357806370a082311461030857806376be1585146103295780638328b6101461035e5780638620410b1461037657806387c950581461038b578063949e8acd146103b157806395d89b41146103c6578063a6aa7f7a146103db578063a8e04f34146103f0578063a9059cbb14610405578063b84c824614610429578063c47f002714610482578063e4849b32146104db578063e9fad8ee146104f3578063f088d54714610508578063fdb5a03e1461051c575b610168346000610531565b50005b34801561017757600080fd5b5061018c600160a060020a0360043516610b06565b60408051918252519081900360200190f35b3480156101aa57600080fd5b506101b3610b41565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ed5781810151838201526020016101d5565b50505050905090810190601f16801561021a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023457600080fd5b5061018c600435610bcf565b34801561024c57600080fd5b5061018c610bff565b34801561026157600080fd5b5061018c600435610c06565b34801561027957600080fd5b50610282610c3f565b6040805160ff9092168252519081900360200190f35b3480156102a457600080fd5b506102ad610c44565b005b3480156102bb57600080fd5b5061018c610d17565b3480156102d057600080fd5b5061018c610d6b565b3480156102e557600080fd5b5061018c6004351515610d71565b3480156102ff57600080fd5b5061018c610db4565b34801561031457600080fd5b5061018c600160a060020a0360043516610db9565b34801561033557600080fd5b5061034a600160a060020a0360043516610dd4565b604080519115158252519081900360200190f35b34801561036a57600080fd5b506102ad600435610de9565b34801561038257600080fd5b5061018c610e0d565b34801561039757600080fd5b506102ad600160a060020a03600435166024351515610e55565b3480156103bd57600080fd5b5061018c610e9f565b3480156103d257600080fd5b506101b3610eb2565b3480156103e757600080fd5b5061034a610f0c565b3480156103fc57600080fd5b506102ad610f15565b34801561041157600080fd5b5061034a600160a060020a0360043516602435610f40565b34801561043557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ad9436949293602493928401919081908401838280828437509497506110fa9650505050505050565b34801561048e57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ad9436949293602493928401919081908401838280828437509497506111309650505050505050565b3480156104e757600080fd5b506102ad600435611161565b3480156104ff57600080fd5b506102ad6112b2565b61018c600160a060020a03600435166112df565b34801561052857600080fd5b506102ad6112eb565b60008060008060008060008060008a6000339050600b60009054906101000a900460ff1680156105725750674563918244f400008261056e610db4565b0311155b1561087f57600160a060020a03811660009081526003602052604090205460ff16151560011480156105c75750600160a060020a0381166000908152600760205260409020546722b1c8c1227a000090830111155b15156105d257600080fd5b600160a060020a0381166000908152600760205260409020546105f590836113a1565b600160a060020a03821660009081526007602052604090205533995061061c8d60056113b7565b98506106298960036113b7565b975061063589896113ce565b96506106418d8a6113ce565b955061064c866113e0565b94506801000000000000000087029350600085118015610676575060085461067486826113a1565b115b151561068157600080fd5b600160a060020a038c16158015906106ab575089600160a060020a03168c600160a060020a031614155b80156106d15750600254600160a060020a038d1660009081526004602052604090205410155b1561071757600160a060020a038c166000908152600560205260409020546106f990896113a1565b600160a060020a038d16600090815260056020526040902055610732565b61072187896113a1565b965068010000000000000000870293505b6000600854111561079657610749600854866113a1565b600881905568010000000000000000880281151561076357fe5b6009805492909104909101905560085468010000000000000000880281151561078857fe5b04850284038403935061079c565b60088590555b600160a060020a038a166000908152600460205260409020546107bf90866113a1565b600460008c600160a060020a0316600160a060020a031681526020019081526020016000208190555083856009540203925082600660008c600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a03168a600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f88604051808381526020018281526020019250505060405180910390a3849a50610af6565b600b805460ff191690553399506108978d60056113b7565b98506108a48960036113b7565b97506108b089896113ce565b96506108bc8d8a6113ce565b95506108c7866113e0565b945068010000000000000000870293506000851180156108f157506008546108ef86826113a1565b115b15156108fc57600080fd5b600160a060020a038c1615801590610926575089600160a060020a03168c600160a060020a031614155b801561094c5750600254600160a060020a038d1660009081526004602052604090205410155b1561099257600160a060020a038c1660009081526005602052604090205461097490896113a1565b600160a060020a038d166000908152600560205260409020556109ad565b61099c87896113a1565b965068010000000000000000870293505b60006008541115610a11576109c4600854866113a1565b60088190556801000000000000000088028115156109de57fe5b60098054929091049091019055600854680100000000000000008802811515610a0357fe5b048502840384039350610a17565b60088590555b600160a060020a038a16600090815260046020526040902054610a3a90866113a1565b600460008c600160a060020a0316600160a060020a031681526020019081526020016000208190555083856009540203925082600660008c600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a03168a600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f88604051808381526020018281526020019250505060405180910390a3849a505b5050505050505050505092915050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600954680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bc75780601f10610b9c57610100808354040283529160200191610bc7565b820191906000526020600020905b815481529060010190602001808311610baa57829003601f168201915b505050505081565b6000808080610bdf8560056113b7565b9250610beb85846113ce565b9150610bf6826113e0565b95945050505050565b6008545b90565b6000806000806008548511151515610c1d57600080fd5b610c2685611472565b9250610c338360056113b7565b9150610bf683836113ce565b601281565b6000806000610c536001610d71565b11610c5d57600080fd5b339150610c6a6000610d71565b600160a060020a038316600081815260066020908152604080832080546801000000000000000087020190556005909152808220805490839055905193019350909183156108fc0291849190818181858888f19350505050158015610cd3573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b60008060008060085460001415610d3557640218711a009350610d65565b610d46670de0b6b3a7640000611472565b9250610d538360056113b7565b9150610d5f83836113ce565b90508093505b50505090565b60025481565b60003382610d8757610d8281610b06565b610dab565b600160a060020a038116600090815260056020526040902054610da982610b06565b015b91505b50919050565b303190565b600160a060020a031660009081526004602052604090205490565b600a6020526000908152604090205460ff1681565b336000818152600a602052604090205460ff161515610e0757600080fd5b50600255565b60008060008060085460001415610e2b5764028fa6ae009350610d65565b610e3c670de0b6b3a7640000611472565b9250610e498360056113b7565b9150610d5f83836113a1565b336000818152600a602052604090205460ff161515610e7357600080fd5b50600160a060020a03919091166000908152600a60205260409020805460ff1916911515919091179055565b600033610eab81610db9565b91505b5090565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bc75780601f10610b9c57610100808354040283529160200191610bc7565b600b5460ff1681565b336000818152600a602052604090205460ff161515610f3357600080fd5b50600b805460ff19169055565b600080600080600080610f51610e9f565b11610f5b57600080fd5b600b5433945060ff16158015610f895750600160a060020a0384166000908152600460205260409020548611155b1515610f9457600080fd5b6000610fa06001610d71565b1115610fae57610fae610c44565b610fb98660056113b7565b9250610fc586846113ce565b9150610fd083611472565b9050610fde600854846113ce565b600855600160a060020a03841660009081526004602052604090205461100490876113ce565b600160a060020a03808616600090815260046020526040808220939093559089168152205461103390836113a1565b600160a060020a0388811660008181526004602090815260408083209590955560098054948a16835260069091528482208054948c029094039093558254918152929092208054928502909201909155546008546110a791906801000000000000000084028115156110a157fe5b046113a1565b600955604080518381529051600160a060020a03808a1692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019695505050505050565b336000818152600a602052604090205460ff16151561111857600080fd5b815161112b906001906020850190611511565b505050565b336000818152600a602052604090205460ff16151561114e57600080fd5b815161112b906000906020850190611511565b6000806000806000806000611174610e9f565b1161117e57600080fd5b3360008181526004602052604090205490965087111561119d57600080fd5b8694506111a985611472565b93506111b68460056113b7565b92506111c284846113ce565b91506111d0600854866113ce565b600855600160a060020a0386166000908152600460205260409020546111f690866113ce565b600160a060020a03871660009081526004602090815260408083209390935560095460069091529181208054928802680100000000000000008602019283900390556008549192501015611266576112626009546008546801000000000000000086028115156110a157fe5b6009555b60408051868152602081018490528151600160a060020a038916927fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139928290030190a250505050505050565b33600081815260046020526040812054908111156112d3576112d381611161565b6112db610c44565b5050565b6000610dae3483610531565b6000806000806112fb6001610d71565b1161130557600080fd5b61130f6000610d71565b33600081815260066020908152604080832080546801000000000000000087020190556005909152812080549082905590920194509250611351908490610531565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b6000828201838110156113b057fe5b9392505050565b60008082848115156113c557fe5b04949350505050565b6000828211156113da57fe5b50900390565b6008546000906b204fce5e3e25026110000000908290633b9aca0061145f6114597259aedfc10d7279c5eed140164540000000000088026002850a670de0b6b3a764000002016f0f0bdc21abb48db201e86d40000000008502017704140c78940f6a24fdffc78873d4490d2100000000000000016114dc565b856113ce565b81151561146857fe5b0403949350505050565b600854600090670de0b6b3a76400008381019181019083906114c9640218711a00828504633b9aca0002018702600283670de0b6b3a763ffff1982890a8b90030104633b9aca00028115156114c357fe5b046113ce565b8115156114d257fe5b0495945050505050565b80600260018201045b81811015610dae5780915060028182858115156114fe57fe5b040181151561150957fe5b0490506114e5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061155257805160ff191683800117855561157f565b8280016001018555821561157f579182015b8281111561157f578251825591602001919060010190611564565b50610eae92610c039250905b80821115610eae576000815560010161158b5600a165627a7a72305820d71ddd252c406febc5f5f70e05b02e6f266ec6668b59f41daad4322f8343b1590029"
}