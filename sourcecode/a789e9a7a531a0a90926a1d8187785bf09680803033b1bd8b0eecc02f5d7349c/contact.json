{
  "address": "0xc86dd185fc95031489b89eeaaa3fd47e11c065e9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OpportyBountyHold",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-28\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract OpportyToken is StandardToken {\n\n  string public constant name = \"OpportyToken\";\n  string public constant symbol = \"OPP\";\n  uint8 public constant decimals = 18;\n\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n  function OpportyToken() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ncontract OpportyBountyHold is Ownable {\n  OpportyToken public token;\n\n  // start and end timestamps where investments are allowed\n  uint public startDate;\n  uint public endDate;\n\n  struct Holder {\n    bool isActive;\n    uint tokens;\n    bool withdrawed;\n  }\n\n  mapping(address => Holder) public holderList;\n  mapping(uint => address) private holderIndexes;\n  uint private holderIndex;\n\n  mapping (uint => address) private assetOwners;\n  mapping (address => uint) private assetOwnersIndex;\n  uint public assetOwnersIndexes;\n\n  event TokensTransfered(address contributor , uint amount);\n  event ManualChangeStartDate(uint beforeDate, uint afterDate);\n  event ManualChangeEndDate(uint beforeDate, uint afterDate);\n  event HolderAdded(address presenter, address holder, uint tokens);\n  event HoldChanged(address presenter, address holder, uint tokens);\n  event TokenChanged(address newAddress);\n\n  modifier onlyAssetsOwners() {\n    require(assetOwnersIndex[msg.sender] > 0 || msg.sender == owner);\n    _;\n  }\n\n  function OpportyBountyHold(uint start, uint end) public {\n    startDate = start;\n    endDate   = end;\n  }\n\n  function addHolder(address holder, uint tokens) onlyAssetsOwners external {\n    if (holderList[holder].isActive == false) {\n        holderList[holder].isActive = true;\n        holderList[holder].tokens = tokens;\n        holderIndexes[holderIndex] = holder;\n        holderIndex++;\n        HolderAdded(msg.sender, holder, tokens);\n    } else {\n        holderList[holder].tokens += tokens;\n        HoldChanged(msg.sender, holder, tokens);\n    }\n  }\n\n  function changeHold(address holder, uint tokens) onlyAssetsOwners public {\n      require(holderList[holder].isActive == true);\n      holderList[holder].tokens = tokens;\n      HoldChanged(msg.sender, holder, tokens);\n  }\n\n  function addAssetsOwner(address _owner) public onlyOwner {\n    assetOwnersIndexes++;\n    assetOwners[assetOwnersIndexes] = _owner;\n    assetOwnersIndex[_owner] = assetOwnersIndexes;\n  }\n\n  function removeAssetsOwner(address _owner) public onlyOwner {\n    uint index = assetOwnersIndex[_owner];\n    delete assetOwnersIndex[_owner];\n    delete assetOwners[index];\n    assetOwnersIndexes--;\n  }\n\n  function getAssetsOwners(uint _index) onlyOwner public constant returns (address) {\n    return assetOwners[_index];\n  }\n\n  function getBalance() public constant returns (uint) {\n    return token.balanceOf(this);\n  }\n\n  function returnTokens(uint nTokens) public onlyOwner returns (bool) {\n    require(nTokens <= getBalance());\n    token.transfer(msg.sender, nTokens);\n    TokensTransfered(msg.sender, nTokens);\n    return true;\n  }\n\n  function unlockTokens() public returns (bool) {\n    require(holderList[msg.sender].isActive);\n    require(!holderList[msg.sender].withdrawed);\n    require(now >= endDate);\n    token.transfer(msg.sender, holderList[msg.sender].tokens); \n    holderList[msg.sender].withdrawed = true;\n    TokensTransfered(msg.sender, holderList[msg.sender].tokens);\n    return true;\n  }\n\n  function getTokenAmount() public view returns (uint) {\n    uint tokens = 0;\n    for (uint i = 0; i < holderIndex; ++i) {\n        if (!holderList[holderIndexes[i]].withdrawed) {\n          tokens += holderList[holderIndexes[i]].tokens;\n        }\n    }\n    return tokens;\n  }\n\n  function setStartDate(uint date) public onlyOwner {\n    uint oldStartDate = startDate;\n    startDate = date;\n    ManualChangeStartDate(oldStartDate, date);\n  }\n\n  function setEndDate(uint date) public onlyOwner {\n    uint oldEndDate = endDate;\n    endDate = date;\n    ManualChangeEndDate(oldEndDate, date);\n  }\n\n  function setToken(address newToken) public onlyOwner {\n    token = OpportyToken(newToken);\n    TokenChanged(token);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516040806119dc83398101604052808051906020019091908051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600281905550806003819055505050611949806100936000396000f300606060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305a955af1461010c5780630b97bc861461016f57806312065fe014610198578063144fa6d7146101c15780632644f9f8146101fa5780633784f0001461025d5780633ae1786f1461028057806361f15236146102bb57806368b2cee0146102fd57806375f91ec81461033657806382d95df51461035f5780638da5cb5b14610382578063a0c86718146103d7578063c24a0f8b14610400578063f0ee1aef14610429578063f2fde38b1461046b578063f968f493146104a4578063fb4ce0a9146104d1578063fc0c546a1461050a575b600080fd5b341561011757600080fd5b610143600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061055f565b604051808415151515815260200183815260200182151515158152602001935050505060405180910390f35b341561017a57600080fd5b6101826105a3565b6040518082815260200191505060405180910390f35b34156101a357600080fd5b6101ab6105a9565b6040518082815260200191505060405180910390f35b34156101cc57600080fd5b6101f8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610690565b005b341561020557600080fd5b61021b60048080359060200190919050506107b4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561026857600080fd5b61027e600480803590602001909190505061084c565b005b341561028b57600080fd5b6102a160048080359060200190919050506108f8565b604051808215151515815260200191505060405180910390f35b34156102c657600080fd5b6102fb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ac8565b005b341561030857600080fd5b610334600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e69565b005b341561034157600080fd5b610349610f98565b6040518082815260200191505060405180910390f35b341561036a57600080fd5b61038060048080359060200190919050506110c6565b005b341561038d57600080fd5b610395611172565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103e257600080fd5b6103ea611197565b6040518082815260200191505060405180910390f35b341561040b57600080fd5b61041361119d565b6040518082815260200191505060405180910390f35b341561043457600080fd5b610469600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111a3565b005b341561047657600080fd5b6104a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611394565b005b34156104af57600080fd5b6104b76114e9565b604051808215151515815260200191505060405180910390f35b34156104dc57600080fd5b610508600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506117ed565b005b341561051557600080fd5b61051d6118f7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60046020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020160009054906101000a900460ff16905083565b60025481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561067057600080fd5b6102c65a03f1151561068157600080fd5b50505060405180519050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106eb57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5d108ca248943e98e1886bbc2c38beda701271994a14354258a11692b81b73cf600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561081157600080fd5b6007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108a957600080fd5b6003549050816003819055507f1359015318dd1f94786883fdb90e4e98c3dbf6757afa0d874b690a768cbb13938183604051808381526020018281526020019250505060405180910390a15050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561095557600080fd5b61095d6105a9565b821115151561096b57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610a3857600080fd5b6102c65a03f11515610a4957600080fd5b50505060405180519050507fa267b5cf59cf96d97abf36d29c63cf7bdef867c208ca8575c47f2cafda39abc93383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160019050919050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180610b6257506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610b6d57600080fd5b60001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151415610d75576001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508160056000600654815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006600081548092919060010191905055507f80862e2b579572ed02c5ffa3a53668ee12cbc6f1caf8c2037d833c1e4c45d084338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1610e65565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825401925050819055507f0164bddf45db440253a98b1e4e4485316467e4700294bd7749dfc4f69ed07f4e338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ec657600080fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556007600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600960008154809291906001900391905055505050565b6000806000809150600090505b6006548110156110be57600460006005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615156110b357600460006005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154820191505b806001019050610fa5565b819250505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561112357600080fd5b6002549050816002819055507f1b5631de18a6469fb059f58c03f3aeed572c1224a199d6e7a5bc3cfdfc353f538183604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60035481565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061123d57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561124857600080fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151415156112aa57600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f0164bddf45db440253a98b1e4e4485316467e4700294bd7749dfc4f69ed07f4e338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113ef57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561142b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151561154657600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515156115a257600080fd5b60035442101515156115b357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156116c257600080fd5b6102c65a03f115156116d357600080fd5b50505060405180519050506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083151502179055507fa267b5cf59cf96d97abf36d29c63cf7bdef867c208ca8575c47f2cafda39abc933600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561184857600080fd5b6009600081548092919060010191905055508060076000600954815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600954600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058208f27c709d0682f980dd8c34f6d1e0fc384b27e5048c870b2dee40f6d2e0f55500029000000000000000000000000000000000000000000000000000000005bd8f080000000000000000000000000000000000000000000000000000000005db8d280",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005bd8f080000000000000000000000000000000000000000000000000000000005db8d280"
}