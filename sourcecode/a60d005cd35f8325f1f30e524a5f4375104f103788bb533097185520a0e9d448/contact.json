{
  "address": "0x47e7326a70adaA0dD88d9A6B2b8d14AdCac7Fa7F",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Voting",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.5.0;\n\n\ncontract IOwnable {\n\n    address public owner;\n    address public newOwner;\n\n    event OwnerChanged(address _oldOwner, address _newOwner);\n\n    function changeOwner(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\ncontract IVoting is IOwnable {\n\n    uint public startDate;\n    uint public endDate;\n    uint public votesYes;\n    uint public votesNo;\n    uint8 public subject;\n    uint public nextVotingDate;\n\n\n    event InitVoting(uint startDate, uint endDate, uint8 subject);\n    event Vote(address _address, int _vote);\n\n    function initProlongationVoting() public;\n    function initTapChangeVoting(uint8 newPercent) public;\n    function inProgress() public view returns (bool);\n    function yes(address _address, uint _votes) public;\n    function no(address _address, uint _votes) public;\n    function vote(address _address) public view returns (int);\n    function votesTotal() public view returns (uint);\n    function isSubjectApproved() public view returns (bool);\n}\n\ncontract Ownable is IOwnable {\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        emit OwnerChanged(address(0), owner);\n    }\n\n    function changeOwner(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerChanged(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(a >= b);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Voting is IVoting, SafeMath, Ownable {\n\n    uint16 private currentVoting;\n    mapping (address => int) private votes;\n    mapping (address => uint16) private lastVoting;\n    bool private prolongationVoted;\n\n    function inProgress() public view returns (bool) {\n        return now >= startDate && now <= endDate;\n    }\n\n    function init(uint _startDate, uint _duration, uint8 _subject) private {\n        require(!inProgress());\n        require(_startDate >= now);\n        require(_subject > 0 && _subject <= 100);\n        currentVoting += 1;\n        startDate = _startDate;\n        endDate = _startDate + _duration;\n        votesYes = 0;\n        votesNo = 0;\n        subject = _subject;\n        emit InitVoting(_startDate, endDate, subject);\n    }\n\n    function yes(address _address, uint _votes) public onlyOwner {\n        require(inProgress());\n        require(lastVoting[_address] < currentVoting);\n        require(_votes > 0);\n        lastVoting[_address] = currentVoting;\n        votes[_address] = int(_votes);\n        votesYes = safeAdd(votesYes, _votes);\n        emit Vote(_address, int(_votes));\n    }\n\n    function no(address _address, uint _votes) public onlyOwner {\n        require(inProgress());\n        require(lastVoting[_address] < currentVoting);\n        require(_votes > 0);\n        lastVoting[_address] = currentVoting;\n        votes[_address] = 0 - int(_votes);\n        votesNo = safeAdd(votesNo, _votes);\n        emit Vote(_address, 0 - int(_votes));\n    }\n\n    function vote(address _address) public view returns (int) {\n        if (lastVoting[_address] == currentVoting) {\n            return votes[_address];\n        } else {\n            return 0;\n        }\n    }\n\n    function votesTotal() public view returns (uint) {\n        return safeAdd(votesYes, votesNo);\n    }\n\n    function isSubjectApproved() public view returns (bool) {\n        return votesYes > votesNo;\n    }\n\n    function initProlongationVoting() public onlyOwner {\n        require(!prolongationVoted);\n        init(now, 24 hours, 30);\n        prolongationVoted = true;\n    }\n\n    function initTapChangeVoting(uint8 newPercent) public onlyOwner {\n        require(now > nextVotingDate);\n        init(now, 14 days, newPercent);\n        nextVotingDate = now + 30 days;\n    }\n}",
  "bytecode": "6080604081815260008054600160a060020a0319163317808255908352600160a060020a031660a0527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a16107f48061005a6000396000f3fe608060405234801561001057600080fd5b5060043610610133576000357c01000000000000000000000000000000000000000000000000000000009004806379ba5097116100bf578063a6f9dae11161008e578063a6f9dae114610254578063b88000d41461027a578063c24a0f8b146102a6578063d4ee1d90146102ae578063e26a4605146102b657610133565b806379ba50971461021857806387351813146102205780638d0fc05a146102285780638da5cb5b1461023057610133565b8063463af19511610106578063463af195146101a65780635299ccc6146101ae57806354218cd8146101ca57806361863e44146101d25780636dd7d8ea146101f257610133565b80630a59a98c146101385780630a92afd2146101565780630b97bc86146101845780632ab130371461019e575b600080fd5b6101406102be565b6040805160ff9092168252519081900360200190f35b6101826004803603604081101561016c57600080fd5b50600160a060020a0381351690602001356102c7565b005b61018c6103c6565b60408051918252519081900360200190f35b61018c6103cc565b6101826103d2565b6101b6610417565b604080519115158252519081900360200190f35b61018c610421565b610182600480360360208110156101e857600080fd5b503560ff16610436565b61018c6004803603602081101561020857600080fd5b5035600160a060020a0316610475565b6101826104c9565b6101b6610560565b61018c610579565b61023861057f565b60408051600160a060020a039092168252519081900360200190f35b6101826004803603602081101561026a57600080fd5b5035600160a060020a031661058e565b6101826004803603604081101561029057600080fd5b50600160a060020a0381351690602001356105d4565b61018c6106cb565b6102386106d1565b61018c6106e0565b60065460ff1681565b600054600160a060020a031633146102de57600080fd5b6102e6610560565b15156102f157600080fd5b600854600160a060020a0383166000908152600a602052604090205461ffff91821691161061031f57600080fd5b6000811161032c57600080fd5b600854600160a060020a0383166000908152600a60209081526040808320805461ffff191661ffff909516949094179093556009905290812090829003905560055461037890826106e6565b60055560408051600160a060020a03841681526000839003602082015281517f30765414d71f0958c667a2404100f9797fdb8149724871b2c42042ee08480d7e929181900390910190a15050565b60025481565b60055481565b600054600160a060020a031633146103e957600080fd5b600b5460ff16156103f957600080fd5b6104084262015180601e6106fc565b600b805460ff19166001179055565b6005546004541190565b60006104316004546005546106e6565b905090565b600054600160a060020a0316331461044d57600080fd5b600754421161045b57600080fd5b6104694262127500836106fc565b5062278d004201600755565b600854600160a060020a0382166000908152600a6020526040812054909161ffff918216911614156104c05750600160a060020a0381166000908152600960205260409020546104c4565b5060005b919050565b600154600160a060020a031633146104e057600080fd5b60005460015460408051600160a060020a03938416815292909116602083015280517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c9281900390910190a1600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b6000600254421015801561043157505060035442111590565b60045481565b600054600160a060020a031681565b600054600160a060020a031633146105a557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146105eb57600080fd5b6105f3610560565b15156105fe57600080fd5b600854600160a060020a0383166000908152600a602052604090205461ffff91821691161061062c57600080fd5b6000811161063957600080fd5b600854600160a060020a0383166000908152600a60209081526040808320805461ffff191661ffff90951694909417909355600990522081905560045461068090826106e6565b60045560408051600160a060020a03841681526020810183905281517f30765414d71f0958c667a2404100f9797fdb8149724871b2c42042ee08480d7e929181900390910190a15050565b60035481565b600154600160a060020a031681565b60075481565b6000828201838110156106f557fe5b9392505050565b610704610560565b1561070e57600080fd5b4283101561071b57600080fd5b60008160ff16118015610732575060648160ff1611155b151561073d57600080fd5b6008805461ffff8082166001011661ffff1990911617905560028390558183016003819055600060048190556005556006805460ff80851660ff199092169190911791829055604080518781526020810194909452911682820152517f2ee7d1a921886c61844dd7e54d8e3f2e9c2fc43c4c4829a29850f9e3c2202f139181900360600190a150505056fea165627a7a723058204645a987dd38b4bb38162b1e99d933383d6920620a7b8662df3bd4bc9ad27ee00029"
}