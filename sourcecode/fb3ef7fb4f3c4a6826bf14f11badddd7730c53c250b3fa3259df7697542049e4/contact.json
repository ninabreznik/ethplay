{
  "address": "0xe58b65d1c0c8e8b2a0e3a3acec633271531084ed",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IronHands",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-18\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * \n * \n *   __________                                                          \n *   \\______   \\ ____   ____   _____   ________________    ____    ____  \n *    |    |  _//  _ \\ /  _ \\ /     \\_/ __ \\_  __ \\__  \\  /    \\  / ___\\ \n *    |    |   (  <_> |  <_> )  Y Y  \\  ___/|  | \\// __ \\|   |  \\/ /_/  >\n *    |______  /\\____/ \\____/|__|_|  /\\___  >__|  (____  /___|  /\\___  / \n *           \\/                    \\/     \\/           \\/     \\//_____/  \n *          .____    .__             .__    .___.__  __                  \n *          |    |   |__| ________ __|__| __| _/|__|/  |_ ___.__.        \n *          |    |   |  |/ ____/  |  \\  |/ __ | |  \\   __<   |  |        \n *          |    |___|  < <_|  |  |  /  / /_/ | |  ||  |  \\___  |        \n *          |_______ \\__|\\__   |____/|__\\____ | |__||__|  / ____|        \n *                  \\/      |__|             \\/           \\/             \n *    _____          __               .__    ___________                .___\n *   /     \\  __ ___/  |_ __ _______  |  |   \\_   _____/_ __  ____    __| _/\n *  /  \\ /  \\|  |  \\   __\\  |  \\__  \\ |  |    |    __)|  |  \\/    \\  / __ | \n * /    Y    \\  |  /|  | |  |  // __ \\|  |__  |     \\ |  |  /   |  \\/ /_/ | \n * \\____|__  /____/ |__| |____/(____  /____/  \\___  / |____/|___|  /\\____ | \n *         \\/                       \\/            \\/             \\/      \\/ \n *     ___________            __               .__                          \n *     \\_   _____/___ _____ _/  |_ __ _________|__| ____    ____            \n *      |    __)/ __ \\\\__  \\\\   __\\  |  \\_  __ \\  |/    \\  / ___\\           \n *      |     \\\\  ___/ / __ \\|  | |  |  /|  | \\/  |   |  \\/ /_/  >          \n *      \\___  / \\___  >____  /__| |____/ |__|  |__|___|  /\\___  /           \n *          \\/      \\/     \\/                          \\//_____/           \n *                   _          _           _            _                      \n *                  /\\ \\       /\\ \\        /\\ \\         /\\ \\     _              \n *                  \\ \\ \\     /  \\ \\      /  \\ \\       /  \\ \\   /\\_\\            \n *                  /\\ \\_\\   / /\\ \\ \\    / /\\ \\ \\     / /\\ \\ \\_/ / /            \n *                 / /\\/_/  / / /\\ \\_\\  / / /\\ \\ \\   / / /\\ \\___/ /             \n *                / / /    / / /_/ / / / / /  \\ \\_\\ / / /  \\/____/              \n *               / / /    / / /__\\/ / / / /   / / // / /    / / /               \n *              / / /    / / /_____/ / / /   / / // / /    / / /                \n *          ___/ / /__  / / /\\ \\ \\  / / /___/ / // / /    / / /                 \n *         /\\__\\/_/___\\/ / /  \\ \\ \\/ / /____\\/ // / /    / / /                  \n *         \\/_________/\\/_/    \\_\\/\\/_________/ \\/_/     \\/_/                   \n *          _       _    _                   _             _            _        \n *         / /\\    / /\\ / /\\                /\\ \\     _    /\\ \\         / /\\      \n *        / / /   / / // /  \\              /  \\ \\   /\\_\\ /  \\ \\____   / /  \\     \n *       / /_/   / / // / /\\ \\            / /\\ \\ \\_/ / // /\\ \\_____\\ / / /\\ \\__  \n *      / /\\ \\__/ / // / /\\ \\ \\          / / /\\ \\___/ // / /\\/___  // / /\\ \\___\\ \n *     / /\\ \\___\\/ // / /  \\ \\ \\        / / /  \\/____// / /   / / / \\ \\ \\ \\/___/ \n *    / / /\\/___/ // / /___/ /\\ \\      / / /    / / // / /   / / /   \\ \\ \\       \n *   / / /   / / // / /_____/ /\\ \\    / / /    / / // / /   / / /_    \\ \\ \\      \n *  / / /   / / // /_________/\\ \\ \\  / / /    / / / \\ \\ \\__/ / //_/\\__/ / /      \n * / / /   / / // / /_       __\\ \\_\\/ / /    / / /   \\ \\___\\/ / \\ \\/___/ /       \n * \\/_/    \\/_/ \\_\\___\\     /____/_/\\/_/     \\/_/     \\/_____/   \\_____\\/        \n *                                                                                        \n *                          .___ __________________ ________                \n *       _____    ____    __| _/ \\______   \\_____  \\\\______ \\               \n *       \\__  \\  /    \\  / __ |   |     ___/ _(__  < |    |  \\              \n *        / __ \\|   |  \\/ /_/ |   |    |    /       \\|    `   \\             \n *       (____  /___|  /\\____ |   |____|   /______  /_______  /             \n *            \\/     \\/      \\/                   \\/        \\/                    \n *\n * ATTENTION!\n * \n * This code? IS NOT DESIGNED FOR ACTUAL USE.\n * \n * The author of this code really wishes you wouldn't send your ETH to it.\n * \n * No, seriously. It's probablly illegal anyway. So don't do it.\n * \n * Let me repeat that: Don't actually send money to this contract. You are \n * likely breaking several local and national laws in doing so.\n * \n * This code is intended to educate. Nothing else. If you use it, expect S.W.A.T \n * teams at your door. I wrote this code because I wanted to experiment\n * with smart contracts, and I think code should be open source. So consider\n * it public domain, No Rights Reserved. Participating in pyramid schemes\n * is genuinely illegal so just don't even think about going beyond\n * reading the code and understanding how it works.\n * \n * Seriously. I'm not kidding. It's probablly broken in some critical way anyway\n * and will suck all your money out your wallet, install a virus on your computer\n * sleep with your wife, kidnap your children and sell them into slavery,\n * make you forget to file your taxes, and give you cancer.\n * \n * So.... tl;dr: This contract sucks, don't send money to it.\n * \n * What it does:\n * \n * It takes 50% of the ETH in it and buys tokens.\n * It takes 50% of the ETH in it and pays back depositors.\n * Depositors get in line and are paid out in order of deposit, plus the deposit\n * percent.\n * The tokens collect dividends, which in turn pay into the payout pool\n * to be split 50/50.\n * \n * If your seeing this contract in it's initial configuration, it should be\n * set to 200% (double deposits), and pointed at PoWH:\n * 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe\n * \n * But you should verify this for yourself.\n *  \n *  \n */\n\ncontract ERC20Interface {\n    function transfer(address to, uint256 tokens) public returns (bool success);\n}\n\ncontract POWH {\n    \n    function buy(address) public payable returns(uint256);\n    function withdraw() public;\n    function myTokens() public view returns(uint256);\n    function myDividends(bool) public view returns(uint256);\n}\n\ncontract Owned {\n    address public owner;\n    address public ownerCandidate;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function changeOwner(address _newOwner) public onlyOwner {\n        ownerCandidate = _newOwner;\n    }\n    \n    function acceptOwnership() public {\n        require(msg.sender == ownerCandidate);  \n        owner = ownerCandidate;\n    }\n    \n}\n\ncontract IronHands is Owned {\n    \n    /**\n     * Modifiers\n     */\n     \n    /**\n     * Only owners are allowed.\n     */\n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n     * The tokens can never be stolen.\n     */\n    modifier notPowh(address aContract){\n        require(aContract != address(weak_hands));\n        _;\n    }\n   \n    /**\n     * Events\n     */\n    event Deposit(uint256 amount, address depositer);\n    event Purchase(uint256 amountSpent, uint256 tokensReceived);\n    event Payout(uint256 amount, address creditor);\n    event Dividends(uint256 amount);\n    event Donation(uint256 amount, address donator);\n    event ContinuityBreak(uint256 position, address skipped, uint256 amount);\n    event ContinuityAppeal(uint256 oldPosition, uint256 newPosition, address appealer);\n\n    /**\n     * Structs\n     */\n    struct Participant {\n        address etherAddress;\n        uint256 payout;\n    }\n\n    //Total ETH managed over the lifetime of the contract\n    uint256 throughput;\n    //Total ETH received from dividends\n    uint256 dividends;\n    //The percent to return to depositers. 100 for 00%, 200 to double, etc.\n    uint256 public multiplier;\n    //Where in the line we are with creditors\n    uint256 public payoutOrder = 0;\n    //How much is owed to people\n    uint256 public backlog = 0;\n    //The creditor line\n    Participant[] public participants;\n    //How much each person is owed\n    mapping(address => uint256) public creditRemaining;\n    //What we will be buying\n    POWH weak_hands;\n\n    /**\n     * Constructor\n     */\n    function IronHands(uint multiplierPercent, address powh) public {\n        multiplier = multiplierPercent;\n        weak_hands = POWH(powh);\n    }\n    \n    \n    /**\n     * Fallback function allows anyone to send money for the cost of gas which\n     * goes into the pool. Used by withdraw/dividend payouts so it has to be cheap.\n     */\n    function() payable public {\n    }\n    \n    /**\n     * Deposit ETH to get in line to be credited back the multiplier as a percent,\n     * add that ETH to the pool, get the dividends and put them in the pool,\n     * then pay out who we owe and buy more tokens.\n     */ \n    function deposit() payable public {\n        //You have to send more than 1000000 wei.\n        require(msg.value > 1000000);\n        //Compute how much to pay them\n        uint256 amountCredited = (msg.value * multiplier) / 100;\n        //Get in line to be paid back.\n        participants.push(Participant(msg.sender, amountCredited));\n        //Increase the backlog by the amount owed\n        backlog += amountCredited;\n        //Increase the amount owed to this address\n        creditRemaining[msg.sender] += amountCredited;\n        //Emit a deposit event.\n        emit Deposit(msg.value, msg.sender);\n        //If I have dividends\n        if(myDividends() > 0){\n            //Withdraw dividends\n            withdraw();\n        }\n        //Pay people out and buy more tokens.\n        payout();\n    }\n    \n    /**\n     * Take 50% of the money and spend it on tokens, which will pay dividends later.\n     * Take the other 50%, and use it to pay off depositors.\n     */\n    function payout() public {\n        //Take everything in the pool\n        uint balance = address(this).balance;\n        //It needs to be something worth splitting up\n        require(balance > 1);\n        //Increase our total throughput\n        throughput += balance;\n        //Split it into two parts\n        uint investment = balance / 2;\n        //Take away the amount we are investing from the amount to send\n        balance -= investment;\n        //Invest it in more tokens.\n        uint256 tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender);\n        //Record that tokens were purchased\n        emit Purchase(investment, tokens);\n        //While we still have money to send\n        while (balance > 0) {\n            //Either pay them what they are owed or however much we have, whichever is lower.\n            uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\n            //if we have something to pay them\n            if(payoutToSend > 0){\n                //subtract how much we've spent\n                balance -= payoutToSend;\n                //subtract the amount paid from the amount owed\n                backlog -= payoutToSend;\n                //subtract the amount remaining they are owed\n                creditRemaining[participants[payoutOrder].etherAddress] -= payoutToSend;\n                //credit their account the amount they are being paid\n                participants[payoutOrder].payout -= payoutToSend;\n                //Try and pay them, making best effort. But if we fail? Run out of gas? That's not our problem any more.\n                if(participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)()){\n                    //Record that they were paid\n                    emit Payout(payoutToSend, participants[payoutOrder].etherAddress);\n                }else{\n                    //undo the accounting, they are being skipped because they are not payable.\n                    balance += payoutToSend;\n                    backlog += payoutToSend;\n                    creditRemaining[participants[payoutOrder].etherAddress] += payoutToSend;\n                    participants[payoutOrder].payout += payoutToSend;\n                }\n\n            }\n            //If we still have balance left over\n            if(balance > 0){\n                // go to the next person in line\n                payoutOrder += 1;\n            }\n            //If we've run out of people to pay, stop\n            if(payoutOrder >= participants.length){\n                return;\n            }\n        }\n    }\n    \n    /**\n     * Number of tokens the contract owns.\n     */\n    function myTokens() public view returns(uint256){\n        return weak_hands.myTokens();\n    }\n    \n    /**\n     * Number of dividends owed to the contract.\n     */\n    function myDividends() public view returns(uint256){\n        return weak_hands.myDividends(true);\n    }\n    \n    /**\n     * Number of dividends received by the contract.\n     */\n    function totalDividends() public view returns(uint256){\n        return dividends;\n    }\n    \n    \n    /**\n     * Request dividends be paid out and added to the pool.\n     */\n    function withdraw() public {\n        uint256 balance = address(this).balance;\n        weak_hands.withdraw.gas(1000000)();\n        uint256 dividendsPaid = address(this).balance - balance;\n        dividends += dividendsPaid;\n        emit Dividends(dividendsPaid);\n    }\n    \n    /**\n     * A charitible contribution will be added to the pool.\n     */\n    function donate() payable public {\n        emit Donation(msg.value, msg.sender);\n    }\n    \n    /**\n     * Number of participants who are still owed.\n     */\n    function backlogLength() public view returns (uint256){\n        return participants.length - payoutOrder;\n    }\n    \n    /**\n     * Total amount still owed in credit to depositors.\n     */\n    function backlogAmount() public view returns (uint256){\n        return backlog;\n    } \n    \n    /**\n     * Total number of deposits in the lifetime of the contract.\n     */\n    function totalParticipants() public view returns (uint256){\n        return participants.length;\n    }\n    \n    /**\n     * Total amount of ETH that the contract has delt with so far.\n     */\n    function totalSpent() public view returns (uint256){\n        return throughput;\n    }\n    \n    /**\n     * Amount still owed to an individual address\n     */\n    function amountOwed(address anAddress) public view returns (uint256) {\n        return creditRemaining[anAddress];\n    }\n     \n     /**\n      * Amount owed to this person.\n      */\n    function amountIAmOwed() public view returns (uint256){\n        return amountOwed(msg.sender);\n    }\n    \n    /**\n     * A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\n     */\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) public onlyOwner notPowh(tokenAddress) returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"amountIAmOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backlog\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backlogAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backlogLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"anAddress\",\"type\":\"address\"}],\"name\":\"amountOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"multiplierPercent\",\"type\":\"uint256\"},{\"name\":\"powh\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"donator\",\"type\":\"address\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skipped\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContinuityBreak\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"appealer\",\"type\":\"address\"}],\"name\":\"ContinuityAppeal\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600555600060065534801561001a57600080fd5b506040516040806115688339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160048190555080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050611488806100e06000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a44b9cf146101355780631b3ed722146101605780633151ecfc1461018b57806335c1d349146101b657806339af05131461022a5780633ccfd60b146102555780633febb0701461026c5780635f504a821461029757806363bd1d4a146102ee5780636cff6f9d1461030557806379ba5097146103305780638da5cb5b14610347578063949e8acd1461039e578063997664d7146103c9578063a0ca0a57146103f4578063a26dbf261461041f578063a6f9dae11461044a578063d0e30db01461048d578063d493b9ac14610497578063e5cf22971461051c578063ed88c68e14610573578063fb346eab1461057d578063ff5d18ca146105a8575b005b34801561014157600080fd5b5061014a6105ff565b6040518082815260200191505060405180910390f35b34801561016c57600080fd5b5061017561060f565b6040518082815260200191505060405180910390f35b34801561019757600080fd5b506101a0610615565b6040518082815260200191505060405180910390f35b3480156101c257600080fd5b506101e1600480360381019080803590602001909291905050506106ed565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561023657600080fd5b5061023f610740565b6040518082815260200191505060405180910390f35b34801561026157600080fd5b5061026a610746565b005b34801561027857600080fd5b5061028161086d565b6040518082815260200191505060405180910390f35b3480156102a357600080fd5b506102ac610877565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102fa57600080fd5b5061030361089d565b005b34801561031157600080fd5b5061031a610da9565b6040518082815260200191505060405180910390f35b34801561033c57600080fd5b50610345610daf565b005b34801561035357600080fd5b5061035c610e6f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103aa57600080fd5b506103b3610e94565b6040518082815260200191505060405180910390f35b3480156103d557600080fd5b506103de610f5c565b6040518082815260200191505060405180910390f35b34801561040057600080fd5b50610409610f66565b6040518082815260200191505060405180910390f35b34801561042b57600080fd5b50610434610f77565b6040518082815260200191505060405180910390f35b34801561045657600080fd5b5061048b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f84565b005b610495611023565b005b3480156104a357600080fd5b50610502600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111e1565b604051808215151515815260200191505060405180910390f35b34801561052857600080fd5b5061055d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611384565b6040518082815260200191505060405180910390f35b61057b6113cd565b005b34801561058957600080fd5b5061059261143a565b6040518082815260200191505060405180910390f35b3480156105b457600080fd5b506105e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611444565b6040518082815260200191505060405180910390f35b600061060a33611384565b905090565b60045481565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663688abbf760016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050602060405180830381600087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b505050506040513d60208110156106d757600080fd5b8101908080519060200190929190505050905090565b6007818154811015156106fc57fe5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60065481565b6000803073ffffffffffffffffffffffffffffffffffffffff16319150600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b620f42406040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600088803b1580156107ed57600080fd5b5087f1158015610801573d6000803e3d6000fd5b5050505050813073ffffffffffffffffffffffffffffffffffffffff1631039050806003600082825401925050819055507fd7cefab74b4b11d01e168f9d1e2a28e7bf8263c3acf9b9fdb802fa666a49455b816040518082815260200191505060405180910390a15050565b6000600654905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000803073ffffffffffffffffffffffffffffffffffffffff163193506001841115156108cc57600080fd5b836002600082825401925050819055506002848115156108e857fe5b0492508284039350600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f088d54784620f424090336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818589803b1580156109b257600080fd5b5088f11580156109c6573d6000803e3d6000fd5b5050505050506040513d60208110156109de57600080fd5b810190808051906020019092919050505091507f350df6fcc944b226b77efc36902e19b43c566d75173622086e809d46dfbc22208383604051808381526020018281526020019250505060405180910390a15b6000841115610da2576007600554815481101515610a4b57fe5b9060005260206000209060020201600101548410610a8b576007600554815481101515610a7457fe5b906000526020600020906002020160010154610a8d565b835b90506000811115610d6d5780840393508060066000828254039250508190555080600860006007600554815481101515610ac357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550806007600554815481101515610b4e57fe5b9060005260206000209060020201600101600082825403925050819055506007600554815481101515610b7d57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681620f424090604051600060405180830381858888f1935050505015610c97577f9b5d1a613fa5f0790b36b13103706e31fca06b229d87e9915b29fc20c1d76490816007600554815481101515610c1857fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1610d6c565b80840193508060066000828254019250508190555080600860006007600554815481101515610cc257fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806007600554815481101515610d4d57fe5b9060005260206000209060020201600101600082825401925050819055505b5b6000841115610d885760016005600082825401925050819055505b600780549050600554101515610d9d57610da3565b610a31565b5b50505050565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0b57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663949e8acd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f1c57600080fd5b505af1158015610f30573d6000803e3d6000fd5b505050506040513d6020811015610f4657600080fd5b8101908080519060200190929190505050905090565b6000600354905090565b600060055460078054905003905090565b6000600780549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fdf57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000620f42403411151561103657600080fd5b6064600454340281151561104657fe5b049050600760408051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050508060066000828254019250508190555080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f4bcc17093cdf51079c755de089be5a85e70fa374ec656c194480fbdcda224a533433604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160006111c7610615565b11156111d6576111d5610746565b5b6111de61089d565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561123e57600080fd5b83600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561129c57600080fd5b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b505050506040513d602081101561136957600080fd5b81019080805190602001909291905050509150509392505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f82add2011d2b1a1fad8fc5ffd954181c064e8f5198c9fcd5caa9749911ed18b93433604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1565b6000600254905090565b600860205280600052604060002060009150905054815600a165627a7a72305820c1e88ec4a01aa5dc4c7eeca39f59b03f79872f8d2245ad87aaf0acb9599c6b85002900000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe"
}