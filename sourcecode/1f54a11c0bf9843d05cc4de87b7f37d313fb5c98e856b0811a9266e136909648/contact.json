{
  "address": "0x8e4fbe2673e154fe9399166e03e18f87a5754420",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BubbleToneToken",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-20\n*/\n\n// Bubble token air drop smart contract.\n// Developed by Phenom.Team <[emailÂ protected]>\npragma solidity ^0.4.18;\n\n/**\n *   @title SafeMath\n *   @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath {\n\n  function mul(uint a, uint b) internal constant returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    uint c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal constant returns(uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function sub(uint a, uint b) internal constant returns(uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal constant returns(uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n *   @title ERC20\n *   @dev Standart ERC20 token interface\n */\n\ncontract ERC20 {\n    uint public totalSupply = 0;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping (address => uint)) allowed;\n\n    function balanceOf(address _owner) constant returns (uint);\n    function transfer(address _to, uint _value) returns (bool);\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\n    function approve(address _spender, uint _value) returns (bool);\n    function allowance(address _owner, address _spender) constant returns (uint);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n}\n\n/**\n *   @title BubbleToneToken\n *   @dev Universal Bonus Token contract\n */\ncontract BubbleToneToken is ERC20 {\n    using SafeMath for uint;\n    string public name = \"Universal Bonus Token | t.me/bubbletonebot\";\n    string public symbol = \"UBT\";\n    uint public decimals = 18;  \n\n    // Smart-contract owner address\n    address public owner;\n    \n    //events\n    event Burn(address indexed _from, uint _value);\n    event Mint(address indexed _to, uint _value);\n    event ManagerAdded(address _manager);\n    event ManagerRemoved(address _manager);\n    event Defrosted(uint timestamp);\n    event Frosted(uint timestamp);\n\n    // Tokens transfer ability status\n    bool public tokensAreFrozen = true;\n\n    // mapping of user permissions\n    mapping(address => bool) public isManager;\n\n\n    // Allows execution by the owner only\n    modifier onlyOwner { \n        require(msg.sender == owner); \n        _; \n    }\n\n    // Allows execution by the managers only\n    modifier onlyManagers { \n        require(isManager[msg.sender]); \n        _; \n    }\n\n\n   /**\n    *   @dev Contract constructor function sets owner address\n    *   @param _owner        owner address\n    */\n    function BubbleToneToken(address _owner) public {\n       owner = _owner;\n       isManager[_owner] = true;\n    }\n\n   /**\n    *   @dev Get balance of tokens holder\n    *   @param _holder        holder's address\n    *   @return               balance of investor\n    */\n    function balanceOf(address _holder) constant returns (uint) {\n         return balances[_holder];\n    }\n\n   /**\n    *   @dev Send coins\n    *   throws on any error rather then return a false flag to minimize\n    *   user errors\n    *   @param _to           target address\n    *   @param _amount       transfer amount\n    *\n    *   @return true if the transfer was successful\n    */\n    function transfer(address _to, uint _amount) public returns (bool) {\n        require(!tokensAreFrozen);\n        require(_to != address(0) && _to != address(this));\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n   /**\n    *   @dev An account/contract attempts to get the coins\n    *   throws on any error rather then return a false flag to minimize user errors\n    *\n    *   @param _from         source address\n    *   @param _to           target address\n    *   @param _amount       transfer amount\n    *\n    *   @return true if the transfer was successful\n    */\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n        require(!tokensAreFrozen);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n     }\n\n\n   /**\n    *   @dev Allows another account/contract to spend some tokens on its behalf\n    *   throws on any error rather then return a false flag to minimize user errors\n    *\n    *   also, to minimize the risk of the approve/transferFrom attack vector\n    *   approve has to be called twice in 2 separate transactions - once to\n    *   change the allowance to 0 and secondly to change it to the new allowance\n    *   value\n    *\n    *   @param _spender      approved address\n    *   @param _amount       allowance amount\n    *\n    *   @return true if the approval was successful\n    */\n    function approve(address _spender, uint _amount) public returns (bool) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n   /**\n    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n    *\n    *   @param _owner        the address which owns the funds\n    *   @param _spender      the address which will spend the funds\n    *\n    *   @return              the amount of tokens still avaible for the spender\n    */\n    function allowance(address _owner, address _spender) constant returns (uint) {\n        return allowed[_owner][_spender];\n    }\n\n\n\n  /**\n   * @dev Function to add an address to the managers\n   * @param _manager         an address that will be added to managers list\n   */\n    function addManager(address _manager) onlyOwner external {\n        require(!isManager[_manager]);\n        isManager[_manager] = true;\n        ManagerAdded(_manager);\n    }\n\n  /**\n   * @dev Function to remove an address to the managers\n   * @param _manager         an address that will be removed from managers list\n   */\n    function removeManager(address _manager) onlyOwner external {\n        require(isManager[_manager]);\n        isManager[_manager] = false;\n        ManagerRemoved(_manager);\n    }\n\n   /**\n    *   @dev Function to enable token transfers\n    */\n    function unfreeze() external onlyOwner {\n       tokensAreFrozen = false;\n       Defrosted(now);\n    }\n\n\n   /**\n    *   @dev Function to enable token transfers\n    */\n    function freeze() external onlyOwner {\n       tokensAreFrozen = true;\n       Frosted(now);\n    }\n\n\n\n    /**\n     * @dev Function to batch mint tokens\n     * @param                _holders an array of addresses that will receive the promo tokens.\n     * @param                _amount an array with the amounts of tokens each address will get minted.\n     */\n    function batchMint(\n        address[] _holders, \n        uint[] _amount) \n        external\n        onlyManagers {\n        require(_holders.length == _amount.length);\n        for (uint i = 0; i < _holders.length; i++) {\n            require(_mint(_holders[i], _amount[i]));\n        }\n    }\n\n   /**\n    *   @dev Function to burn Tokens\n    *   @param _holder       token holder address which the tokens will be burnt\n    *   @param _value        number of tokens to burn\n    */\n    function burnTokens(address _holder, uint _value) external onlyManagers {\n        require(balances[_holder] > 0);\n        totalSupply = totalSupply.sub(_value);\n        balances[_holder] = balances[_holder].sub(_value);\n        Burn(_holder, _value);\n    }\n\n\n\n    /** \n    *   @dev Allows owner to transfer out any accidentally sent ERC20 tokens\n    *\n    *   @param _token        token address\n    *   @param _amount       transfer amount\n    *\n    *\n    */\n    function withdraw(address _token, uint _amount) \n        external\n        onlyOwner \n        returns (bool success) {\n        return ERC20(_token).transfer(owner, _amount);\n    }\n\n   /**\n    *   @dev Function to mint tokens\n    *   @param _holder       beneficiary address the tokens will be issued to\n    *   @param _value        amount of tokens to issue\n    */\n    function _mint(address _holder, uint _value) private returns (bool) {\n        require(_value > 0);\n        require(_holder != address(0) && _holder != address(this));\n        balances[_holder] = balances[_holder].add(_value);\n        totalSupply = totalSupply.add(_value);\n        Transfer(address(0), _holder, _value);\n        return true;\n    }\n\n}",
  "bytecode": "608060405260008055606060405190810160405280602a81526020017f556e6976657273616c20426f6e757320546f6b656e207c20742e6d652f62756281526020017f626c65746f6e65626f7400000000000000000000000000000000000000000000815250600390805190602001906200007c929190620001bc565b506040805190810160405280600381526020017f554254000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000ca929190620001bc565b5060126005556001600660146101000a81548160ff021916908315150217905550348015620000f857600080fd5b5060405160208062001cdd8339810180604052810190808051906020019092919050505080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550506200026b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ff57805160ff191683800117855562000230565b8280016001018555821562000230579182015b828111156200022f57825182559160200191906001019062000212565b5b5090506200023f919062000243565b5090565b6200026891905b80821115620002645760008160009055506001016200024a565b5090565b90565b611a62806200027b6000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461010c578063095ea7b31461019c5780630d1118ce1461020157806318160ddd1461024e57806323b872dd146102795780632d06177a146102fe578063313ce5671461034157806362a5af3b1461036c57806368573107146103835780636a28f000146103d657806370a08231146103ed5780638da5cb5b1461044457806395d89b411461049b578063a9059cbb1461052b578063ac18de4314610590578063ca67065f146105d3578063dd62ed3e14610602578063f3ae241514610679578063f3fef3a3146106d4575b600080fd5b34801561011857600080fd5b50610121610739565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610161578082015181840152602081019050610146565b50505050905090810190601f16801561018e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a857600080fd5b506101e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107d7565b604051808215151515815260200191505060405180910390f35b34801561020d57600080fd5b5061024c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061095e565b005b34801561025a57600080fd5b50610263610b06565b6040518082815260200191505060405180910390f35b34801561028557600080fd5b506102e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b0c565b604051808215151515815260200191505060405180910390f35b34801561030a57600080fd5b5061033f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dd3565b005b34801561034d57600080fd5b50610356610f46565b6040518082815260200191505060405180910390f35b34801561037857600080fd5b50610381610f4c565b005b34801561038f57600080fd5b506103d4600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050610ffc565b005b3480156103e257600080fd5b506103eb6110e1565b005b3480156103f957600080fd5b5061042e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611191565b6040518082815260200191505060405180910390f35b34801561045057600080fd5b506104596111da565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104a757600080fd5b506104b0611200565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104f05780820151818401526020810190506104d5565b50505050905090810190601f16801561051d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561053757600080fd5b50610576600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061129e565b604051808215151515815260200191505060405180910390f35b34801561059c57600080fd5b506105d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114c9565b005b3480156105df57600080fd5b506105e861163b565b604051808215151515815260200191505060405180910390f35b34801561060e57600080fd5b50610663600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061164e565b6040518082815260200191505060405180910390f35b34801561068557600080fd5b506106ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d5565b604051808215151515815260200191505060405180910390f35b3480156106e057600080fd5b5061071f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116f5565b604051808215151515815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107cf5780601f106107a4576101008083540402835291602001916107cf565b820191906000526020600020905b8154815290600101906020018083116107b257829003601f168201915b505050505081565b60008082148061086357506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561086e57600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156109b657600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610a0457600080fd5b610a198160005461185b90919063ffffffff16565b600081905550610a7181600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461185b90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b60005481565b6000600660149054906101000a900460ff16151515610b2a57600080fd5b610b7c82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461185b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c4e82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461185b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d2082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461187490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e2f57600080fd5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610e8857600080fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f3b4a40cccf2058c593542587329dd385be4f0b588db5471fbd9598e56dd7093a81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60055481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fa857600080fd5b6001600660146101000a81548160ff0219169083151502179055507f396b7fa6f0f84ea23c6ccc325e99eee6c71b0f135045346e29a6c0ee8f5b1022426040518082815260200191505060405180910390a1565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561105657600080fd5b828290508585905014151561106a57600080fd5b600090505b848490508110156110da576110c2858583818110151561108b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684848481811015156110b657fe5b90506020020135611892565b15156110cd57600080fd5b808060010191505061106f565b5050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113d57600080fd5b6000600660146101000a81548160ff0219169083151502179055507f9384bedfff7d4a28ce7eaba90fb8e387e686a7856154cd3cca9fb65638bc9b61426040518082815260200191505060405180910390a1565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112965780601f1061126b57610100808354040283529160200191611296565b820191906000526020600020905b81548152906001019060200180831161127957829003601f168201915b505050505081565b6000600660149054906101000a900460ff161515156112bc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561132557503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561133057600080fd5b61138282600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461185b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061141782600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461187490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561152557600080fd5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561157d57600080fd5b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fef69f7d97228658c92417be1b16b19058315de71fecb435d07b7d23728b6bd3181604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600660149054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60076020528060005260406000206000915054906101000a900460ff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561175357600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561181857600080fd5b505af115801561182c573d6000803e3d6000fd5b505050506040513d602081101561184257600080fd5b8101908080519060200190929190505050905092915050565b600082821115151561186957fe5b818303905092915050565b600080828401905083811015151561188857fe5b8091505092915050565b600080821115156118a257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561190b57503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561191657600080fd5b61196882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461187490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119c08260005461187490919063ffffffff16565b6000819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a723058209663ca475eb47d5558be8c0ea9209f6d831bc6b364ea3cd470a75077c4db20810029000000000000000000000000c2db6e5b96dd22d9870a5ca0909cceac6604e21d",
  "constructorArguments": "000000000000000000000000c2db6e5b96dd22d9870a5ca0909cceac6604e21d"
}