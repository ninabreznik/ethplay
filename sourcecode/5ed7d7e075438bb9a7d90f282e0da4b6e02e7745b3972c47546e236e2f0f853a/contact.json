{
  "address": "0x81312b948a47af46cf1cf8bbc94ef52c0c40fecb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BestMultiplier",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-21\n*/\n\npragma solidity ^0.4.25;\n\n/**\n  Multiplier contract: returns 121% of each investment!\n  Automatic payouts!\n  No bugs, no backdoors, NO OWNER - fully automatic!\n  Made and checked by professionals!\n\n  1. Send any sum to smart contract address\n     - sum from 0.01 to 10 ETH\n     - min 250000 gas limit\n     - you are added to a queue\n  2. Wait a little bit\n  3. ...\n  4. PROFIT! You have got 121%\n\n  How is that?\n  1. The first investor in the queue (you will become the\n     first in some time) receives next investments until\n     it become 121% of his initial investment.\n  2. You will receive payments in several parts or all at once\n  3. Once you receive 121% of your initial investment you are\n     removed from the queue.\n  4. You can make multiple deposits\n  5. The balance of this contract should normally be 0 because\n     all the money are immediately go to payouts\n\n\n     So the last pays to the first (or to several first ones\n     if the deposit big enough) and the investors paid 121% are removed from the queue\n\n                new investor --|               brand new investor --|\n                 investor5     |                 new investor       |\n                 investor4     |     =======>      investor5        |\n                 investor3     |                   investor4        |\n    (part. paid) investor2    <|                   investor3        |\n    (fully paid) investor1   <-|                   investor2   <----|  (pay until 121%)\n\n\n  Контракт Умножитель: возвращает 121% от вашего депозита!\n  Автоматические выплаты!\n  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\n  Создан и проверен профессионалами!\n\n  1. Пошлите любую ненулевую сумму на адрес контракта\n     - сумма от 0.01 до 10 ETH\n     - gas limit минимум 250000\n     - вы встанете в очередь\n  2. Немного подождите\n  3. ...\n  4. PROFIT! Вам пришло 121% от вашего депозита.\n\n  Как это возможно?\n  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\n     новых инвесторов до тех пор, пока не получит 121% от своего депозита\n  2. Выплаты могут приходить несколькими частями или все сразу\n  3. Как только вы получаете 121% от вашего депозита, вы удаляетесь из очереди\n  4. Вы можете делать несколько депозитов сразу\n  5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\n     сразу же направляются на выплаты\n\n     Таким образом, последние платят первым, и инвесторы, достигшие выплат 121% от депозита,\n     удаляются из очереди, уступая место остальным\n\n              новый инвестор --|            совсем новый инвестор --|\n                 инвестор5     |                новый инвестор      |\n                 инвестор4     |     =======>      инвестор5        |\n                 инвестор3     |                   инвестор4        |\n (част. выплата) инвестор2    <|                   инвестор3        |\n(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 121%)\n\n*/\n\ncontract BestMultiplier {\n    //Address for reclame expences\n    address constant private Reclame = 0x39D080403562770754d2fA41225b33CaEE85fdDd;\n    //Percent for reclame expences\n    uint constant public Reclame_PERCENT = 3; \n    //3 for advertizing\n    address constant private Admin = 0x0eDd0c239Ef99A285ddCa25EC340064232aD985e;\n    // Address for admin expences\n    uint constant public Admin_PERCENT = 1;\n    // 1 for techsupport\n    address constant private BMG = 0xc42F87a2E51577d56D64BF7Aa8eE3A26F3ffE8cF;\n    // Address for BestMoneyGroup\n    uint constant public BMG_PERCENT = 2;\n    // 2 for BMG\n    uint constant public Refferal_PERCENT = 10;\n    // 10 for Refferal\n    //How many percent for your deposit to be multiplied\n    uint constant public MULTIPLIER = 121;\n\n    //The deposit structure holds all the info about the deposit made\n    struct Deposit {\n        address depositor; //The depositor address\n        uint128 deposit;   //The deposit amount\n        uint128 expect;    //How much we should pay out (initially it is 121% of deposit)\n    }\n\n    Deposit[] private queue;  //The queue\n    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\n\n    //This function receives all the deposits\n    //stores them and make immediate payouts\n    function () public payable {\n        require(tx.gasprice <= 50000000000 wei, \"Gas price is too high! Do not cheat!\");\n        if(msg.value > 0){\n            require(gasleft() >= 220000, \"We require more gas!\"); //We need gas to process queue\n            require(msg.value <= 10 ether); //Do not allow too big investments to stabilize payouts\n\n            //Add the investor into the queue. Mark that he expects to receive 121% of deposit back\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\n\n            //Send some promo to enable this contract to leave long-long time\n            uint promo = msg.value*Reclame_PERCENT/100;\n            Reclame.send(promo);\n            uint admin = msg.value*Admin_PERCENT/100;\n            Admin.send(admin);\n            uint bmg = msg.value*BMG_PERCENT/100;\n            BMG.send(bmg);\n\n            //Pay to first investors in line\n            pay();\n        }\n    \n    }\n        function refferal (address REF) public payable {\n        require(tx.gasprice <= 50000000000 wei, \"Gas price is too high! Do not cheat!\");\n        if(msg.value > 0){\n            require(gasleft() >= 220000, \"We require more gas!\"); //We need gas to process queue\n            require(msg.value <= 10 ether); //Do not allow too big investments to stabilize payouts\n\n            //Add the investor into the queue. Mark that he expects to receive 121% of deposit back\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\n\n            //Send some promo to enable this contract to leave long-long time\n            uint promo = msg.value*Reclame_PERCENT/100;\n            Reclame.send(promo);\n            uint admin = msg.value*Admin_PERCENT/100;\n            Admin.send(admin);\n            uint bmg = msg.value*BMG_PERCENT/100;\n            BMG.send(bmg);\n            require(REF != 0x0000000000000000000000000000000000000000 && REF != msg.sender, \"You need another refferal!\"); //We need gas to process queue\n            uint ref = msg.value*Refferal_PERCENT/100;\n            REF.send(ref);\n            //Pay to first investors in line\n            pay();\n        }\n    \n    }\n    //Used to pay to current investors\n    //Each new transaction processes 1 - 4+ investors in the head of queue \n    //depending on balance and gas left\n    function pay() private {\n        //Try to send all the money on contract to the first investors in line\n        uint128 money = uint128(address(this).balance);\n\n        //We will do cycle on the queue\n        for(uint i=0; i<queue.length; i++){\n\n            uint idx = currentReceiverIndex + i;  //get the index of the currently first investor\n\n            Deposit storage dep = queue[idx]; //get the info of the first investor\n\n            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\n                dep.depositor.send(dep.expect); //Send money to him\n                money -= dep.expect;            //update money left\n\n                //this investor is fully paid, so remove him\n                delete queue[idx];\n            }else{\n                //Here we don't have enough money so partially pay to investor\n                dep.depositor.send(money); //Send to him everything we have\n                dep.expect -= money;       //Update the expected amount\n                break;                     //Exit cycle\n            }\n\n            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\n                break;                     //The next investor will process the line further\n        }\n\n        currentReceiverIndex += i; //Update the index of the current first investor\n    }\n\n    //Get the deposit info by its index\n    //You can get deposit index from\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\n        Deposit storage dep = queue[idx];\n        return (dep.depositor, dep.deposit, dep.expect);\n    }\n\n    //Get the count of deposits of specific investor\n    function getDepositsCount(address depositor) public view returns (uint) {\n        uint c = 0;\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\n            if(queue[i].depositor == depositor)\n                c++;\n        }\n        return c;\n    }\n\n    //Get all deposits (index, deposit, expect) of a specific investor\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\n        uint c = getDepositsCount(depositor);\n\n        idxs = new uint[](c);\n        deposits = new uint128[](c);\n        expects = new uint128[](c);\n\n        if(c > 0) {\n            uint j = 0;\n            for(uint i=currentReceiverIndex; i<queue.length; ++i){\n                Deposit storage dep = queue[i];\n                if(dep.depositor == depositor){\n                    idxs[j] = i;\n                    deposits[j] = dep.deposit;\n                    expects[j] = dep.expect;\n                    j++;\n                }\n            }\n        }\n    }\n    \n    //Get current queue size\n    function getQueueLength() public view returns (uint) {\n        return queue.length - currentReceiverIndex;\n    }\n\n}",
  "bytecode": "6080604052600060015534801561001557600080fd5b50610ce9806100256000396000f3006080604052600436106100ae5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663059f8b1681146103605780632d95663b14610387578063626368071461039c5780637d636d9b146103b157806394f649dd146103c75780639f9fb968146104c6578063b535b65314610506578063b8f770051461051b578063c2ee7e9b14610530578063c67f7df514610545578063d9e01c7214610566575b60008080640ba43b74003a1115610134576040805160e560020a62461bcd028152602060048201526024808201527f47617320707269636520697320746f6f20686967682120446f206e6f7420636860448201527f6561742100000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600034111561035b5762035b605a1015610198576040805160e560020a62461bcd02815260206004820152601460248201527f57652072657175697265206d6f72652067617321000000000000000000000000604482015290519081900360640190fd5b678ac7230489e800003411156101ad57600080fd5b604080516060810182523381526001608060020a033481811660208401908152606460798302819004841685870190815260008054600181018255818052965160029097027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039099169890981790975592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909601805491516fffffffffffffffffffffffffffffffff19909216968616969096178516608060020a919095160293909317909355925160039093020494507339d080403562770754d2fa41225b33caee85fddd916108fc86150291869190818181858888f150606493503492506102da915050565b6040519190049250730edd0c239ef99a285ddca25ec340064232ad985e9083156108fc029084906000818181858888f150606493505034600202915061031d9050565b604051919004915073c42f87a2e51577d56d64bf7aa8ee3a26f3ffe8cf9082156108fc029083906000818181858888f193505050505061035b61057b565b505050005b34801561036c57600080fd5b506103756106ef565b60408051918252519081900360200190f35b34801561039357600080fd5b506103756106f4565b3480156103a857600080fd5b506103756106fa565b6103c5600160a060020a03600435166106ff565b005b3480156103d357600080fd5b506103e8600160a060020a0360043516610a59565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610430578181015183820152602001610418565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561046f578181015183820152602001610457565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156104ae578181015183820152602001610496565b50505050905001965050505050505060405180910390f35b3480156104d257600080fd5b506104de600435610be9565b60408051600160a060020a039094168452602084019290925282820152519081900360600190f35b34801561051257600080fd5b50610375610c42565b34801561052757600080fd5b50610375610c47565b34801561053c57600080fd5b50610375610c51565b34801561055157600080fd5b50610375600160a060020a0360043516610c56565b34801561057257600080fd5b50610375610cb8565b3031600080805b6000548310156106e157826001540191506000828154811015156105a257fe5b600091825260209091206002909102016001810154909150608060020a90046001608060020a039081169085161061066f5780546001820154604051600160a060020a03909216916001608060020a03608060020a9092049190911680156108fc02916000818181858888f150505050600182015460008054608060020a9092046001608060020a03169096039591508390811061063c57fe5b600091825260208220600290910201805473ffffffffffffffffffffffffffffffffffffffff19168155600101556106c8565b8054604051600160a060020a03909116906001608060020a03861680156108fc02916000818181858888f15050506001830180546001608060020a03608060020a80830482168a90038216029116179055506106e19050565b61c3505a116106d6576106e1565b600190920191610582565b505060018054909101905550565b607981565b60015481565b600181565b6000808080640ba43b74003a1115610786576040805160e560020a62461bcd028152602060048201526024808201527f47617320707269636520697320746f6f20686967682120446f206e6f7420636860448201527f6561742100000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000341115610a525762035b605a10156107ea576040805160e560020a62461bcd02815260206004820152601460248201527f57652072657175697265206d6f72652067617321000000000000000000000000604482015290519081900360640190fd5b678ac7230489e800003411156107ff57600080fd5b604080516060810182523381526001608060020a033481811660208401908152606460798302819004841685870190815260008054600181018255818052965160029097027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039099169890981790975592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909601805491516fffffffffffffffffffffffffffffffff19909216968616969096178516608060020a919095160293909317909355925160039093020495507339d080403562770754d2fa41225b33caee85fddd916108fc87150291879190818181858888f1506064935034925061092c915050565b6040519190049350730edd0c239ef99a285ddca25ec340064232ad985e9084156108fc029085906000818181858888f150606493505034600202915061096f9050565b604051919004925073c42f87a2e51577d56d64bf7aa8ee3a26f3ffe8cf9083156108fc029084906000818181858888f150505050600160a060020a03861615801591506109c55750600160a060020a0385163314155b1515610a1b576040805160e560020a62461bcd02815260206004820152601a60248201527f596f75206e65656420616e6f7468657220726566666572616c21000000000000604482015290519081900360640190fd5b506040516064600a34020490600160a060020a0386169082156108fc029083906000818181858888f1935050505050610a5261057b565b5050505050565b6060806060600080600080610a6d88610c56565b935083604051908082528060200260200182016040528015610a99578160200160208202803883390190505b50965083604051908082528060200260200182016040528015610ac6578160200160208202803883390190505b50955083604051908082528060200260200182016040528015610af3578160200160208202803883390190505b5094506000841115610bde576000925060015491505b600054821015610bde576000805483908110610b2157fe5b600091825260209091206002909102018054909150600160a060020a0389811691161415610bd357818784815181101515610b5857fe5b60209081029091010152600181015486516001608060020a0390911690879085908110610b8157fe5b6001608060020a039283166020918202909201015260018201548651608060020a90910490911690869085908110610bb557fe5b6001608060020a039092166020928302909101909101526001909201915b816001019150610b09565b505050509193909250565b600080600080600085815481101515610bfe57fe5b600091825260209091206002909102018054600190910154600160a060020a03909116966001608060020a038083169750608060020a909204909116945092505050565b600281565b6001546000540390565b600a81565b60015460009081905b600054811015610cb15783600160a060020a0316600082815481101515610c8257fe5b6000918252602090912060029091020154600160a060020a03161415610ca9576001909101905b600101610c5f565b5092915050565b6003815600a165627a7a72305820782844ac86c8eb56b91524b7060efa99631e60887960adebbb01c691dedd46470029"
}