{
  "address": "0x7891841c2c93355a33e14dc8d427273807b5fa73",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SoinToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Add two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n}\n  \ncontract SoinToken {\n    using SafeMath for uint256;\n    string public name = \"Soin\";\n    string public symbol = \"SOIN\";\n    uint8 public decimals = 18;\n    \n    // Total Supply of Soin Tokens\n    uint256 public totalSupply = 30000000000000000000000000000;\n\n    // Multi-dimensional mapping to keep allow transfers between addresses\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    // Mapping to retrieve balance of a specific address\n    mapping (address => uint256) public balanceOf;\n\n    /// The owner of contract\n    address public owner;\n\n    /// The admin account of contract\n    address public admin;\n\n    // Mapping of addresses that are locked up\n    mapping (address => bool) internal accountLockup;\n\n    // Mapping that retrieves the current lockup time for a specific address\n    mapping (address => uint256) public accountLockupTime;\n    \n    // Mapping of addresses that are frozen\n    mapping (address => bool) public frozenAccounts;\n    \n    // Mapping of holder addresses (index)\n    mapping (address => uint256) internal holderIndex;\n\n    // Array of holder addressses\n    address[] internal holders;\n\n    ///First round tokens whether isssued.\n    bool internal firstRoundTokenIssued = false;\n\n    /// Contract pause state\n    bool public paused = true;\n\n    /// Issue event index starting from 0.\n    uint256 internal issueIndex = 0;\n\n    // Emitted when a function is invocated without the specified preconditions.\n    event InvalidState(bytes msg);\n\n    // This notifies clients about the token issued.\n    event Issue(uint256 issueIndex, address addr, uint256 ethAmount, uint256 tokenAmount);\n\n    // This notifies clients about the amount to transfer\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount to approve\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    // This notifies clients about the account frozen\n    event FrozenFunds(address target, bool frozen);\n\n    // This notifies clients about the pause\n    event Pause();\n\n    // This notifies clients about the unpause\n    event Unpause();\n\n    /*\n     * MODIFIERS\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(msg.sender == owner || msg.sender == admin);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when account not frozen.\n     */\n    modifier isNotFrozen {\n        require(frozenAccounts[msg.sender] != true && now > accountLockupTime[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier isNotPaused() {\n        require((msg.sender == owner && paused) || (msg.sender == admin && paused) || !paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier isPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev Internal transfer, only can be called by this contract\n     * @param _from The address to transfer from.\n     * @param _to The address to transfer to.\n     * @param _value The amount to transfer between addressses.\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal isNotFrozen isNotPaused {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        // Update Token holders\n        addOrUpdateHolder(_from);\n        addOrUpdateHolder(_to);\n        // Send the Transfer Event\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * @dev Transfer to a specific address\n     * @param _to The address to transfer to.\n     * @param _transferTokensWithDecimal The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _transferTokensWithDecimal) public {\n        _transfer(msg.sender, _to, _transferTokensWithDecimal);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _transferTokensWithDecimal uint the amout of tokens to be transfered\n    */\n    function transferFrom(address _from, address _to, uint256 _transferTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n        require(_transferTokensWithDecimal <= allowance[_from][msg.sender]);\n        // Check allowance\n        allowance[_from][msg.sender] -= _transferTokensWithDecimal;\n        _transfer(_from, _to, _transferTokensWithDecimal);\n        return true;\n    }\n\n    /**\n     * @dev Allows `_spender` to spend no more (allowance) than `_approveTokensWithDecimal` tokens in your behalf\n     *\n     * !!Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address authorized to spend.\n     * @param _approveTokensWithDecimal the max amount they can spend.\n     */\n    function approve(address _spender, uint256 _approveTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n        allowance[msg.sender][_spender] = _approveTokensWithDecimal;\n        Approval(msg.sender, _spender, _approveTokensWithDecimal);\n        return true;\n    }\n\n    /**\n     * @dev Destroy tokens and remove `_value` tokens from the system irreversibly\n     * @param _burnedTokensWithDecimal The amount of tokens to burn. !!IMPORTANT is 18 DECIMALS\n    */\n    function burn(uint256 _burnedTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n        require(balanceOf[msg.sender] >= _burnedTokensWithDecimal);\n        /// Check if the sender has enough\n        balanceOf[msg.sender] -= _burnedTokensWithDecimal;\n        /// Subtract from the sender\n        totalSupply -= _burnedTokensWithDecimal;\n        Burn(msg.sender, _burnedTokensWithDecimal);\n        return true;\n    }\n\n    /**\n     * @dev Destroy tokens (`_value`) from the system irreversibly on behalf of `_from`.\n     * @param _from The address of the sender.\n     * @param _burnedTokensWithDecimal The amount of tokens to burn. !!! IMPORTANT is 18 DECIMALS\n    */\n    function burnFrom(address _from, uint256 _burnedTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n        require(balanceOf[_from] >= _burnedTokensWithDecimal);\n        /// Check if the targeted balance is enough\n        require(_burnedTokensWithDecimal <= allowance[_from][msg.sender]);\n        /// Check allowance\n        balanceOf[_from] -= _burnedTokensWithDecimal;\n        /// Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _burnedTokensWithDecimal;\n        /// Subtract from the sender's allowance\n        totalSupply -= _burnedTokensWithDecimal;\n        Burn(_from, _burnedTokensWithDecimal);\n        return true;\n    }\n\n    /**\n     * @dev Add holder address into `holderIndex` mapping and to the `holders` array.\n     * @param _holderAddr The address of the holder\n    */\n    function addOrUpdateHolder(address _holderAddr) internal {\n        // Check and add holder to array\n        if (holderIndex[_holderAddr] == 0) {\n            holderIndex[_holderAddr] = holders.length++;\n            holders[holderIndex[_holderAddr]] = _holderAddr;\n        }\n    }\n\n    /**\n     * CONSTRUCTOR\n     * @dev Initialize the Soin Token\n     */\n    function SoinToken() public {\n        owner = msg.sender;\n        admin = msg.sender;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        owner = _newOwner;\n    }\n\n    /**\n    * @dev Set admin account to manage contract.\n    */\n    function setAdmin(address _address) public onlyOwner {\n        admin = _address;\n    }\n\n    /**\n    * @dev Issue first round tokens to `owner` address.\n    */\n    function issueFirstRoundToken() public onlyOwner {\n        require(!firstRoundTokenIssued);\n\n        balanceOf[owner] = balanceOf[owner].add(totalSupply);\n        Issue(issueIndex++, owner, 0, totalSupply);\n        addOrUpdateHolder(owner);\n        firstRoundTokenIssued = true;\n    }\n\n    /**\n     * @dev Issue tokens for reserve.\n     * @param _issueTokensWithDecimal The amount of reserve tokens. !!IMPORTANT is 18 DECIMALS\n    */\n    function issueReserveToken(uint256 _issueTokensWithDecimal) onlyOwner public {\n        balanceOf[owner] = balanceOf[owner].add(_issueTokensWithDecimal);\n        totalSupply = totalSupply.add(_issueTokensWithDecimal);\n        Issue(issueIndex++, owner, 0, _issueTokensWithDecimal);\n    }\n\n    /**\n    * @dev Freeze or Unfreeze an address\n    * @param _address address that will be frozen or unfrozen\n    * @param _frozenStatus status indicating if the address will be frozen or unfrozen.\n    */\n    function changeFrozenStatus(address _address, bool _frozenStatus) public onlyAdmin {\n        frozenAccounts[_address] = _frozenStatus;\n    }\n\n    /**\n    * @dev Lockup account till the date. Can't lock-up again when this account locked already.\n    * 1 year = 31536000 seconds, 0.5 year = 15768000 seconds\n    */\n    function lockupAccount(address _address, uint256 _lockupSeconds) public onlyAdmin {\n        require((accountLockup[_address] && now > accountLockupTime[_address]) || !accountLockup[_address]);\n        // lock-up account\n        accountLockupTime[_address] = now + _lockupSeconds;\n        accountLockup[_address] = true;\n    }\n\n    /**\n    * @dev Get the cuurent Soin holder count.\n    */\n    function getHolderCount() public view returns (uint256 _holdersCount){\n        return holders.length - 1;\n    }\n\n    /**\n    * @dev Get the current Soin holder addresses.\n    */\n    function getHolders() public onlyAdmin view returns (address[] _holders){\n        return holders;\n    }\n\n    /**\n    * @dev Pause the contract by only the owner. Triggers Pause() Event.\n    */\n    function pause() onlyAdmin isNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    /**\n    * @dev Unpause the contract by only he owner. Triggers the Unpause() Event.\n    */\n    function unpause() onlyAdmin isPaused public {\n        paused = false;\n        Unpause();\n    }\n\n    /**\n    * @dev Change the symbol attribute of the contract by the Owner.\n    * @param _symbol Short name of the token, symbol.\n    */\n    function setSymbol(string _symbol) public onlyOwner {\n        symbol = _symbol;\n    }\n\n    /**\n    * @dev Change the name attribute of the contract by the Owner.\n    * @param _name Name of the token, full name.\n    */\n    function setName(string _name) public onlyOwner {\n        name = _name;\n    }\n\n    /// @dev This default function rejects anyone to purchase the SOIN (Soin) token. Crowdsale has finished.\n    function() public payable {\n        revert();\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_approveTokensWithDecimal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueFirstRoundToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountLockupTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_transferTokensWithDecimal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_issueTokensWithDecimal\",\"type\":\"uint256\"}],\"name\":\"issueReserveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedTokensWithDecimal\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolderCount\",\"outputs\":[{\"name\":\"_holdersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_burnedTokensWithDecimal\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_frozenStatus\",\"type\":\"bool\"}],\"name\":\"changeFrozenStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_transferTokensWithDecimal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_lockupSeconds\",\"type\":\"uint256\"}],\"name\":\"lockupAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"InvalidState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600481527f536f696e00000000000000000000000000000000000000000000000000000000602082015260009080516200004d92916020019062000106565b5060408051908101604052600481527f534f494e00000000000000000000000000000000000000000000000000000000602082015260019080516200009792916020019062000106565b506002805460ff191660121790556b60ef6b1aba6f072330000000600355600d805461ffff19166101001790556000600e553415620000d557600080fd5b60068054600160a060020a033316600160a060020a03199182168117909255600780549091169091179055620001ab565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014957805160ff191683800117855562000179565b8280016001018555821562000179579182015b82811115620001795782518255916020019190600101906200015c565b50620001879291506200018b565b5090565b620001a891905b8082111562000187576000815560010162000192565b90565b61168980620001bb6000396000f3006060604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461016e578063095ea7b3146101f85780630a968d5e1461022e57806315e0d7d11461024357806318160ddd1461027457806323b872dd14610287578063313ce567146102af578063397b90a5146102d85780633f4ba83a146102ee57806342966c68146103015780635c975abb146103175780635fe8e7cc1461032a578063704b6c021461039057806370a08231146103af5780637136982b146103ce57806379cc6790146103e1578063831064b3146104035780638456cb5914610427578063860838a51461043a5780638da5cb5b1461045957806395d89b4114610488578063a9059cbb1461049b578063aa8acdfd146104bd578063b84c8246146104df578063c47f002714610530578063dd62ed3e14610581578063f2fde38b146105a6578063f851a440146105c5575b600080fd5b341561017957600080fd5b6101816105d8565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101bd5780820151838201526020016101a5565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020357600080fd5b61021a600160a060020a0360043516602435610676565b604051901515815260200160405180910390f35b341561023957600080fd5b61024161079d565b005b341561024e57600080fd5b610262600160a060020a03600435166108a4565b60405190815260200160405180910390f35b341561027f57600080fd5b6102626108b6565b341561029257600080fd5b61021a600160a060020a03600435811690602435166044356108bc565b34156102ba57600080fd5b6102c26109ef565b60405160ff909116815260200160405180910390f35b34156102e357600080fd5b6102416004356109f8565b34156102f957600080fd5b610241610ae2565b341561030c57600080fd5b61021a600435610b67565b341561032257600080fd5b61021a610cb0565b341561033557600080fd5b61033d610cbe565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561037c578082015183820152602001610364565b505050509050019250505060405180910390f35b341561039b57600080fd5b610241600160a060020a0360043516610d5d565b34156103ba57600080fd5b610262600160a060020a0360043516610da7565b34156103d957600080fd5b610262610db9565b34156103ec57600080fd5b61021a600160a060020a0360043516602435610dc3565b341561040e57600080fd5b610241600160a060020a03600435166024351515610f5d565b341561043257600080fd5b610241610fbe565b341561044557600080fd5b61021a600160a060020a036004351661109f565b341561046457600080fd5b61046c6110b4565b604051600160a060020a03909116815260200160405180910390f35b341561049357600080fd5b6101816110c3565b34156104a657600080fd5b610241600160a060020a036004351660243561112e565b34156104c857600080fd5b610241600160a060020a036004351660243561113d565b34156104ea57600080fd5b61024160046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061121695505050505050565b341561053b57600080fd5b61024160046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061124495505050505050565b341561058c57600080fd5b610262600160a060020a0360043581169060243516611272565b34156105b157600080fd5b610241600160a060020a036004351661128f565b34156105d057600080fd5b61046c6112ee565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561066e5780601f106106435761010080835404028352916020019161066e565b820191906000526020600020905b81548152906001019060200180831161065157829003601f168201915b505050505081565b600160a060020a0333166000908152600a602052604081205460ff1615156001148015906106bb5750600160a060020a03331660009081526009602052604090205442115b15156106c657600080fd5b60065433600160a060020a0390811691161480156106eb5750600d54610100900460ff165b80610716575060075433600160a060020a0390811691161480156107165750600d54610100900460ff165b806107295750600d54610100900460ff16155b151561073457600080fd5b600160a060020a03338116600081815260046020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065433600160a060020a039081169116146107b857600080fd5b600d5460ff16156107c857600080fd5b600354600654600160a060020a03166000908152600560205260409020546107f59163ffffffff6112fd16565b60068054600160a060020a0390811660009081526005602052604080822094909455600e80546001810190915592546003547fe316e9c07bf6ee91102f762d73f95b6cab9dcc157278814c7408906855c6a3a69591909316929051938452600160a060020a03909216602084015260408084019190915260608301919091526080909101905180910390a160065461089590600160a060020a0316611313565b600d805460ff19166001179055565b60096020526000908152604090205481565b60035481565b600160a060020a0333166000908152600a602052604081205460ff1615156001148015906109015750600160a060020a03331660009081526009602052604090205442115b151561090c57600080fd5b60065433600160a060020a0390811691161480156109315750600d54610100900460ff165b8061095c575060075433600160a060020a03908116911614801561095c5750600d54610100900460ff165b8061096f5750600d54610100900460ff16155b151561097a57600080fd5b600160a060020a03808516600090815260046020908152604080832033909416835292905220548211156109ad57600080fd5b600160a060020a03808516600090815260046020908152604080832033909416835292905220805483900390556109e58484846113a8565b5060019392505050565b60025460ff1681565b60065433600160a060020a03908116911614610a1357600080fd5b600654600160a060020a0316600090815260056020526040902054610a3e908263ffffffff6112fd16565b600654600160a060020a0316600090815260056020526040902055600354610a6c908263ffffffff6112fd16565b600355600e8054600181019091556006547fe316e9c07bf6ee91102f762d73f95b6cab9dcc157278814c7408906855c6a3a69190600160a060020a0316600084604051938452600160a060020a03909216602084015260408084019190915260608301919091526080909101905180910390a150565b60065433600160a060020a0390811691161480610b0d575060075433600160a060020a039081169116145b1515610b1857600080fd5b600d54610100900460ff161515610b2e57600080fd5b600d805461ff00191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600160a060020a0333166000908152600a602052604081205460ff161515600114801590610bac5750600160a060020a03331660009081526009602052604090205442115b1515610bb757600080fd5b60065433600160a060020a039081169116148015610bdc5750600d54610100900460ff165b80610c07575060075433600160a060020a039081169116148015610c075750600d54610100900460ff165b80610c1a5750600d54610100900460ff16155b1515610c2557600080fd5b600160a060020a03331660009081526005602052604090205482901015610c4b57600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556003805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b600d54610100900460ff1681565b610cc661158a565b60065433600160a060020a0390811691161480610cf1575060075433600160a060020a039081169116145b1515610cfc57600080fd5b600c805480602002602001604051908101604052809291908181526020018280548015610d5257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610d34575b505050505090505b90565b60065433600160a060020a03908116911614610d7857600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60056020526000908152604090205481565b600c546000190190565b600160a060020a0333166000908152600a602052604081205460ff161515600114801590610e085750600160a060020a03331660009081526009602052604090205442115b1515610e1357600080fd5b60065433600160a060020a039081169116148015610e385750600d54610100900460ff165b80610e63575060075433600160a060020a039081169116148015610e635750600d54610100900460ff165b80610e765750600d54610100900460ff16155b1515610e8157600080fd5b600160a060020a03831660009081526005602052604090205482901015610ea757600080fd5b600160a060020a0380841660009081526004602090815260408083203390941683529290522054821115610eda57600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556004825280832033909516835293905282902080548590039055600380548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b60065433600160a060020a0390811691161480610f88575060075433600160a060020a039081169116145b1515610f9357600080fd5b600160a060020a03919091166000908152600a60205260409020805460ff1916911515919091179055565b60065433600160a060020a0390811691161480610fe9575060075433600160a060020a039081169116145b1515610ff457600080fd5b60065433600160a060020a0390811691161480156110195750600d54610100900460ff165b80611044575060075433600160a060020a0390811691161480156110445750600d54610100900460ff165b806110575750600d54610100900460ff16155b151561106257600080fd5b600d805461ff0019166101001790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600a6020526000908152604090205460ff1681565b600654600160a060020a031681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561066e5780601f106106435761010080835404028352916020019161066e565b6111393383836113a8565b5050565b60065433600160a060020a0390811691161480611168575060075433600160a060020a039081169116145b151561117357600080fd5b600160a060020a03821660009081526008602052604090205460ff1680156111b25750600160a060020a03821660009081526009602052604090205442115b806111d65750600160a060020a03821660009081526008602052604090205460ff16155b15156111e157600080fd5b600160a060020a039091166000908152600960209081526040808320429094019093556008905220805460ff19166001179055565b60065433600160a060020a0390811691161461123157600080fd5b600181805161113992916020019061159c565b60065433600160a060020a0390811691161461125f57600080fd5b600081805161113992916020019061159c565b600460209081526000928352604080842090915290825290205481565b60065433600160a060020a039081169116146112aa57600080fd5b600160a060020a03811615156112bf57600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600754600160a060020a031681565b60008282018381101561130c57fe5b9392505050565b600160a060020a0381166000908152600b602052604090205415156113a557600c805490611344906001830161161a565b600160a060020a0382166000908152600b60205260409020819055600c8054839290811061136e57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555b50565b600160a060020a0333166000908152600a602052604081205460ff1615156001148015906113ed5750600160a060020a03331660009081526009602052604090205442115b15156113f857600080fd5b60065433600160a060020a03908116911614801561141d5750600d54610100900460ff165b80611448575060075433600160a060020a0390811691161480156114485750600d54610100900460ff165b8061145b5750600d54610100900460ff16155b151561146657600080fd5b600160a060020a038316151561147b57600080fd5b600160a060020a038416600090815260056020526040902054829010156114a157600080fd5b600160a060020a038316600090815260056020526040902054828101116114c757600080fd5b50600160a060020a03808316600081815260056020526040808220805494881683529082208054868103909155929091528054840190550161150884611313565b61151183611313565b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3600160a060020a0380841660009081526005602052604080822054928716825290205401811461158457fe5b50505050565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115dd57805160ff191683800117855561160a565b8280016001018555821561160a579182015b8281111561160a5782518255916020019190600101906115ef565b50611616929150611643565b5090565b81548183558181151161163e5760008381526020902061163e918101908301611643565b505050565b610d5a91905b8082111561161657600081556001016116495600a165627a7a72305820853f3ed58c9398a533b56e3463398e617f8fd82ab58011b821c26c10e55e15630029"
}