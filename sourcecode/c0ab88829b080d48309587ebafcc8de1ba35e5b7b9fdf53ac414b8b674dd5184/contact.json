{
  "address": "0x896f11b2628208e09bd5cfdd0c4f7c28c0349d61",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoinPledge",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-20\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/CoinPledge.sol\n\n/// @title CoinPledge\n/// @author Igor Yalovoy\n/// @notice Reach your goals and have fun with friends\n/// @dev All function calls are currently implement without side effects\n/// @web: ylv.io\n/// @email: [emailÂ protected]\n/// @gitHub: https://github.com/ylv-io/coinpledge/tree/master\n/// @twitter: https://twitter.com/ylv_io\n\n// Proofs:\n// Public commitment as a motivator for weight loss (https://onlinelibrary.wiley.com/doi/pdf/10.1002/mar.20316)\n\n\npragma solidity ^0.4.24;\n\n\n\ncontract CoinPledge is Ownable {\n\n  using SafeMath for uint256;\n\n  uint constant daysToResolve = 7 days;\n  uint constant bonusPercentage = 50;\n  uint constant serviceFeePercentage = 10;\n  uint constant minBonus = 1 finney;\n\n  struct Challenge {\n    address user;\n    string name;\n    uint value;\n    address mentor;\n    uint startDate;\n    uint time;\n    uint mentorFee;\n\n    bool successed;\n    bool resolved;\n  }\n\n  struct User {\n    address addr;\n    string name;\n  }\n\n  // Events\n  event NewChallenge(\n    uint indexed challengeId,\n    address indexed user,\n    string name,\n    uint value,\n    address indexed mentor,\n    uint startDate,\n    uint time,\n    uint mentorFee\n  );\n\n  event ChallengeResolved(\n    uint indexed challengeId,\n    address indexed user,\n    address indexed mentor,\n    bool decision\n  );\n\n  event BonusFundChanged(\n    address indexed user,\n    uint value\n  );\n\n  event NewUsername(\n    address indexed addr,\n    string name\n  );\n\n\n  event Donation(\n    string name,\n    string url,\n    uint value,\n    uint timestamp\n  );\n\n  /// @notice indicated is game over or not\n  bool public isGameOver;\n\n  /// @notice All Challenges\n  Challenge[] public challenges;\n\n  mapping(uint => address) public challengeToUser;\n  mapping(address => uint) public userToChallengeCount;\n\n  mapping(uint => address) public challengeToMentor;\n  mapping(address => uint) public mentorToChallengeCount;\n\n  /// @notice All Users\n  mapping(address => User) public users;\n  address[] public allUsers;\n  mapping(string => address) private usernameToAddress;\n  \n  /// @notice User's bonuses\n  mapping(address => uint) public bonusFund;\n\n  /// @notice Can access only if game is not over\n  modifier gameIsNotOver() {\n    require(!isGameOver, \"Game should be not over\");\n    _;\n  }\n\n  /// @notice Can access only if game is over\n  modifier gameIsOver() {\n    require(isGameOver, \"Game should be over\");\n    _;\n  }\n\n  /// @notice Get Bonus Fund For User\n  function getBonusFund(address user)\n  external\n  view\n  returns(uint) {\n    return bonusFund[user];\n  }\n\n  /// @notice Get Users Lenght\n  function getUsersCount()\n  external\n  view\n  returns(uint) {\n    return allUsers.length;\n  }\n\n  /// @notice Get Challenges For User\n  function getChallengesForUser(address user)\n  external\n  view\n  returns(uint[]) {\n    require(userToChallengeCount[user] > 0, \"Has zero challenges\");\n\n    uint[] memory result = new uint[](userToChallengeCount[user]);\n    uint counter = 0;\n    for (uint i = 0; i < challenges.length; i++) {\n      if (challengeToUser[i] == user)\n      {\n        result[counter] = i;\n        counter++;\n      }\n    }\n    return result;\n  }\n\n  /// @notice Get Challenges For Mentor\n  function getChallengesForMentor(address mentor)\n  external\n  view\n  returns(uint[]) {\n    require(mentorToChallengeCount[mentor] > 0, \"Has zero challenges\");\n\n    uint[] memory result = new uint[](mentorToChallengeCount[mentor]);\n    uint counter = 0;\n    for (uint i = 0; i < challenges.length; i++) {\n      if (challengeToMentor[i] == mentor)\n      {\n        result[counter] = i;\n        counter++;\n      }\n    }\n    return result;\n  }\n  \n  /// @notice Ends game\n  function gameOver()\n  external\n  gameIsNotOver\n  onlyOwner {\n    isGameOver = true;\n  }\n\n  /// @notice Set Username\n  function setUsername(string name)\n  external\n  gameIsNotOver {\n    require(bytes(name).length > 2, \"Provide a name longer than 2 chars\");\n    require(bytes(name).length <= 32, \"Provide a name shorter than 33 chars\");\n    require(users[msg.sender].addr == address(0x0), \"You already have a name\");\n    require(usernameToAddress[name] == address(0x0), \"Name already taken\");\n\n    users[msg.sender] = User(msg.sender, name);\n    usernameToAddress[name] = msg.sender;\n    allUsers.push(msg.sender);\n\n    emit NewUsername(msg.sender, name);\n  }\n\n  /// @notice Creates Challenge\n  function createChallenge(string name, string mentor, uint time, uint mentorFee)\n  external\n  payable\n  gameIsNotOver\n  returns (uint retId) {\n    require(msg.value >= 0.01 ether, \"Has to stake more than 0.01 ether\");\n    require(mentorFee >= 0 ether, \"Can't be negative\");\n    require(mentorFee <= msg.value, \"Can't be bigger than stake\");\n    require(bytes(mentor).length > 0, \"Has to be a mentor\");\n    require(usernameToAddress[mentor] != address(0x0), \"Mentor has to be registered\");\n    require(time > 0, \"Time has to be greater than zero\");\n\n    address mentorAddr = usernameToAddress[mentor];\n\n    require(msg.sender != mentorAddr, \"Can't be mentor to yourself\");\n\n    uint startDate = block.timestamp;\n    uint id = challenges.push(Challenge(msg.sender, name, msg.value, mentorAddr, startDate, time, mentorFee, false, false)) - 1;\n\n    challengeToUser[id] = msg.sender;\n    userToChallengeCount[msg.sender]++;\n\n    challengeToMentor[id] = mentorAddr;\n    mentorToChallengeCount[mentorAddr]++;\n\n    emit NewChallenge(id, msg.sender, name, msg.value, mentorAddr, startDate, time, mentorFee);\n\n    return id;\n  }\n\n  /// @notice Resolves Challenge\n  function resolveChallenge(uint challengeId, bool decision)\n  external\n  gameIsNotOver {\n    Challenge storage challenge = challenges[challengeId];\n    \n    require(challenge.resolved == false, \"Challenge already resolved.\");\n\n    // if more time passed than endDate + daysToResolve, then user can resolve himself\n    if(block.timestamp < (challenge.startDate + challenge.time + daysToResolve))\n      require(challenge.mentor == msg.sender, \"You are not the mentor for this challenge.\");\n    else require((challenge.user == msg.sender) || (challenge.mentor == msg.sender), \"You are not the user or mentor for this challenge.\");\n\n    uint mentorFee;\n    uint serviceFee;\n    \n    address user = challengeToUser[challengeId];\n    address mentor = challengeToMentor[challengeId];\n\n    // write decision\n    challenge.successed = decision;\n    challenge.resolved = true;\n\n    uint remainingValue = challenge.value;\n\n    // mentor & service fee\n    if(challenge.mentorFee > 0) {\n      serviceFee = challenge.mentorFee.div(100).mul(serviceFeePercentage);\n      mentorFee = challenge.mentorFee.div(100).mul(100 - serviceFeePercentage);\n    }\n    \n    if(challenge.mentorFee > 0)\n      remainingValue = challenge.value.sub(challenge.mentorFee);\n\n    uint valueToPay;\n\n    if(decision) {\n      // value to pay back to user\n      valueToPay = remainingValue;\n      // credit bouns if any\n      uint currentBonus = bonusFund[user];\n      if(currentBonus > 0)\n      {\n        uint bonusValue = bonusFund[user].div(100).mul(bonusPercentage);\n        if(currentBonus <= minBonus)\n          bonusValue = currentBonus;\n        bonusFund[user] -= bonusValue;\n        emit BonusFundChanged(user, bonusFund[user]);\n\n        valueToPay += bonusValue;\n      }\n    }\n    else {\n      bonusFund[user] += remainingValue;\n      emit BonusFundChanged(user, bonusFund[user]);\n    }\n\n    // pay back to the challenger\n    if(valueToPay > 0)\n      user.transfer(valueToPay);\n\n    if(mentorFee > 0)\n      mentor.transfer(mentorFee);\n\n    if(serviceFee > 0)\n      owner().transfer(serviceFee);\n\n    emit ChallengeResolved(challengeId, user, mentor, decision);\n  }\n\n  function withdraw()\n  external\n  gameIsOver {\n    require(bonusFund[msg.sender] > 0, \"You do not have any funds\");\n\n    uint funds = bonusFund[msg.sender];\n    bonusFund[msg.sender] = 0;\n    msg.sender.transfer(funds);\n  }\n\n  function donate(string name, string url)\n  external\n  payable\n  gameIsNotOver {\n    owner().transfer(msg.value);\n    emit Donation(name, url, msg.value, block.timestamp);\n  }\n}",
  "bytecode": "6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3611f3f806100576000396000f3006080604052600436106101325763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630e04a7d881146101375780631653441c146101605780631906a3d61461018157806329fc550f146101b45780633ccfd60b1461022557806341c9028c1461023a5780634af79ba21461025b578063715018a61461027c57806386ddf4dd146102915780638da5cb5b146102b25780638f1d3776146102e35780638f32d59b146103c05780639077c676146103d557806394a754e0146103f65780639c1bea8c14610413578063a2bdedf41461042b578063a4a1e26314610443578063a87430ba14610458578063acc606061461050a578063bdb337d114610522578063ed59313a14610537578063f2fde38b14610557578063f352c45c14610578575b600080fd5b34801561014357600080fd5b5061014c61059d565b604080519115158252519081900360200190f35b61017f60246004803582810192908201359181359182019101356105ad565b005b34801561018d57600080fd5b506101a2600160a060020a03600435166106c3565b60408051918252519081900360200190f35b3480156101c057600080fd5b506101d5600160a060020a03600435166106de565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102115781810151838201526020016101f9565b505050509050019250505060405180910390f35b34801561023157600080fd5b5061017f61080c565b34801561024657600080fd5b506101a2600160a060020a036004351661091b565b34801561026757600080fd5b506101d5600160a060020a036004351661092d565b34801561028857600080fd5b5061017f610a52565b34801561029d57600080fd5b506101a2600160a060020a0360043516610abc565b3480156102be57600080fd5b506102c7610ace565b60408051600160a060020a039092168252519081900360200190f35b3480156102ef57600080fd5b506102fb600435610ade565b60408051600160a060020a03808c16825291810189905290871660608201526080810186905260a0810185905260c0810184905282151560e082015281151561010082015261012060208083018281528b51928401929092528a516101408401918c019080838360005b8381101561037d578181015183820152602001610365565b50505050905090810190601f1680156103aa5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3480156103cc57600080fd5b5061014c610be0565b3480156103e157600080fd5b506101a2600160a060020a0360043516610bf1565b34801561040257600080fd5b5061017f6004356024351515610c03565b34801561041f57600080fd5b506102c7600435611191565b34801561043757600080fd5b506102c76004356111ac565b34801561044f57600080fd5b506101a26111d4565b34801561046457600080fd5b50610479600160a060020a03600435166111da565b6040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104ce5781810151838201526020016104b6565b50505050905090810190601f1680156104fb5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561051657600080fd5b506102c760043561128e565b34801561052e57600080fd5b5061017f6112a9565b34801561054357600080fd5b5061017f6004803560248101910135611332565b34801561056357600080fd5b5061017f600160a060020a0360043516611704565b6101a26024600480358281019290820135918135918201910135604435606435611723565b60005460a060020a900460ff1681565b60005460a060020a900460ff16156105fd576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611ef4833981519152604482015290519081900360640190fd5b610605610ace565b600160a060020a03166108fc349081150290604051600060405180830381858888f1935050505015801561063d573d6000803e3d6000fd5b507f6e8b6487a41d35751143d1be3637919d34ee7fcc13ecce0a6c848d885f821fdf84848484344260405180806020018060200185815260200184815260200183810383528989828181526020019250808284379091018481038352878152602001905087878082843760405192018290039a509098505050505050505050a150505050565b600160a060020a031660009081526009602052604090205490565b600160a060020a038116600090815260036020526040812054606091829181908110610754576040805160e560020a62461bcd02815260206004820152601360248201527f486173207a65726f206368616c6c656e67657300000000000000000000000000604482015290519081900360640190fd5b6003600086600160a060020a0316600160a060020a03168152602001908152602001600020546040519080825280602002602001820160405280156107a3578160200160208202803883390190505b50925060009150600090505b60015481101561080357600081815260026020526040902054600160a060020a03868116911614156107fb578083838151811015156107ea57fe5b602090810290910101526001909101905b6001016107af565b50909392505050565b6000805460a060020a900460ff161515610870576040805160e560020a62461bcd02815260206004820152601360248201527f47616d652073686f756c64206265206f76657200000000000000000000000000604482015290519081900360640190fd5b33600090815260096020526040812054116108d5576040805160e560020a62461bcd02815260206004820152601960248201527f596f7520646f206e6f74206861766520616e792066756e647300000000000000604482015290519081900360640190fd5b5033600081815260096020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610917573d6000803e3d6000fd5b5050565b60096020526000908152604090205481565b600160a060020a0381166000908152600560205260408120546060918291819081106109a3576040805160e560020a62461bcd02815260206004820152601360248201527f486173207a65726f206368616c6c656e67657300000000000000000000000000604482015290519081900360640190fd5b6005600086600160a060020a0316600160a060020a03168152602001908152602001600020546040519080825280602002602001820160405280156109f2578160200160208202803883390190505b50925060009150600090505b60015481101561080357600081815260046020526040902054600160a060020a0386811691161415610a4a57808383815181101515610a3957fe5b602090810290910101526001909101905b6001016109fe565b610a5a610be0565b1515610a6557600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60036020526000908152604090205481565b600054600160a060020a03165b90565b6001805482908110610aec57fe5b600091825260209182902060089091020180546001808301805460408051601f6002600019968516156101000296909601909316949094049182018790048702840187019052808352600160a060020a039093169550929390929190830182828015610b995780601f10610b6e57610100808354040283529160200191610b99565b820191906000526020600020905b815481529060010190602001808311610b7c57829003601f168201915b5050506002840154600385015460048601546005870154600688015460079098015496979396600160a060020a039093169550909350919060ff8082169161010090041689565b600054600160a060020a0316331490565b60056020526000908152604090205481565b60008060008060008060008060008060149054906101000a900460ff16151515610c65576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611ef4833981519152604482015290519081900360640190fd5b600180548c908110610c7357fe5b600091825260209091206008909102016007810154909950610100900460ff1615610ce8576040805160e560020a62461bcd02815260206004820152601b60248201527f4368616c6c656e676520616c7265616479207265736f6c7665642e0000000000604482015290519081900360640190fd5b62093a8089600501548a600401540101421015610d8e576003890154600160a060020a03163314610d89576040805160e560020a62461bcd02815260206004820152602a60248201527f596f7520617265206e6f7420746865206d656e746f7220666f7220746869732060448201527f6368616c6c656e67652e00000000000000000000000000000000000000000000606482015290519081900360840190fd5b610e2e565b8854600160a060020a0316331480610db257506003890154600160a060020a031633145b1515610e2e576040805160e560020a62461bcd02815260206004820152603260248201527f596f7520617265206e6f74207468652075736572206f72206d656e746f72206660448201527f6f722074686973206368616c6c656e67652e0000000000000000000000000000606482015290519081900360840190fd5b600260008c815260200190815260200160002060009054906101000a9004600160a060020a03169550600460008c815260200190815260200160002060009054906101000a9004600160a060020a03169450898960070160006101000a81548160ff02191690831515021790555060018960070160016101000a81548160ff02191690831515021790555088600201549350600089600601541115610f1957610ef6600a610eea60648c60060154611d6a90919063ffffffff16565b9063ffffffff611d9216565b60068a0154909750610f1690605a90610eea90606463ffffffff611d6a16565b97505b600089600601541115610f4257600689015460028a0154610f3f9163ffffffff611dc716565b93505b891561101157600160a060020a038616600090815260096020526040812054859450925082111561100c57600160a060020a038616600090815260096020526040902054610f9e90603290610eea90606463ffffffff611d6a16565b905066038d7ea4c680008211610fb15750805b600160a060020a038616600081815260096020908152604091829020805485900390819055825190815291517f0bfe400dd6d1d0d9446725bc045151fad50d6e8c93d65a20134b05ce6081f43e9281900390910190a2918201915b611067565b600160a060020a0386166000818152600960209081526040918290208054880190819055825190815291517f0bfe400dd6d1d0d9446725bc045151fad50d6e8c93d65a20134b05ce6081f43e9281900390910190a25b60008311156110a857604051600160a060020a0387169084156108fc029085906000818181858888f193505050501580156110a6573d6000803e3d6000fd5b505b60008811156110e957604051600160a060020a0386169089156108fc02908a906000818181858888f193505050501580156110e7573d6000803e3d6000fd5b505b6000871115611134576110fa610ace565b600160a060020a03166108fc889081150290604051600060405180830381858888f19350505050158015611132573d6000803e3d6000fd5b505b84600160a060020a031686600160a060020a03168c7f7594a05a49b456a2fb34d3357cbaf2070ff1c0568ae96c6d9720e166d705fecb8d604051808215151515815260200191505060405180910390a45050505050505050505050565b600260205260009081526040902054600160a060020a031681565b60078054829081106111ba57fe5b600091825260209091200154600160a060020a0316905081565b60075490565b6006602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252600160a060020a039092169492939092908301828280156112845780601f1061125957610100808354040283529160200191611284565b820191906000526020600020905b81548152906001019060200180831161126757829003601f168201915b5050505050905082565b600460205260009081526040902054600160a060020a031681565b60005460a060020a900460ff16156112f9576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611ef4833981519152604482015290519081900360640190fd5b611301610be0565b151561130c57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a179055565b60005460a060020a900460ff1615611382576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611ef4833981519152604482015290519081900360640190fd5b60028111611400576040805160e560020a62461bcd02815260206004820152602260248201527f50726f766964652061206e616d65206c6f6e676572207468616e20322063686160448201527f7273000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b602081111561147e576040805160e560020a62461bcd028152602060048201526024808201527f50726f766964652061206e616d652073686f72746572207468616e203333206360448201527f6861727300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33600090815260066020526040902054600160a060020a0316156114ec576040805160e560020a62461bcd02815260206004820152601760248201527f596f7520616c726561647920686176652061206e616d65000000000000000000604482015290519081900360640190fd5b6000600160a060020a0316600883836040518083838082843790910194855250506040519283900360200190922054600160a060020a03169290921491506115809050576040805160e560020a62461bcd02815260206004820152601260248201527f4e616d6520616c72656164792074616b656e0000000000000000000000000000604482015290519081900360640190fd5b604080519081016040528033600160a060020a0316815260200183838080601f0160208091040260200160405190810160405280939291908181526020018383808284375050509290935250503360009081526006602090815260409091208351815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178155838201518051919350611622926001850192910190611e5b565b5090505033600883836040518083838082843790910194855250506040805193849003602090810185208054600160a060020a039790971673ffffffffffffffffffffffffffffffffffffffff19978816179055600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180549096163390811790965580855284018690527f1baf823fe862656b4bf0b5b9ce919ed86d595c8429b1153e99a9f52d7386062e93879350869250908190810184848082843760405192018290039550909350505050a25050565b61170c610be0565b151561171757600080fd5b61172081611dde565b50565b6000805481908190819060a060020a900460ff161561177a576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611ef4833981519152604482015290519081900360640190fd5b662386f26fc100003410156117ff576040805160e560020a62461bcd02815260206004820152602160248201527f48617320746f207374616b65206d6f7265207468616e20302e3031206574686560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000851015611858576040805160e560020a62461bcd02815260206004820152601160248201527f43616e2774206265206e65676174697665000000000000000000000000000000604482015290519081900360640190fd5b348511156118b0576040805160e560020a62461bcd02815260206004820152601a60248201527f43616e277420626520626967676572207468616e207374616b65000000000000604482015290519081900360640190fd5b60008711611908576040805160e560020a62461bcd02815260206004820152601260248201527f48617320746f2062652061206d656e746f720000000000000000000000000000604482015290519081900360640190fd5b6000600160a060020a0316600889896040518083838082843790910194855250506040519283900360200190922054600160a060020a03169290921415915061199d9050576040805160e560020a62461bcd02815260206004820152601b60248201527f4d656e746f722068617320746f20626520726567697374657265640000000000604482015290519081900360640190fd5b600086116119f5576040805160e560020a62461bcd02815260206004820181905260248201527f54696d652068617320746f2062652067726561746572207468616e207a65726f604482015290519081900360640190fd5b600888886040518083838082843790910194855250506040519283900360200190922054600160a060020a03169450505033831415611a7e576040805160e560020a62461bcd02815260206004820152601b60248201527f43616e2774206265206d656e746f7220746f20796f757273656c660000000000604482015290519081900360640190fd5b4291506001806101206040519081016040528033600160a060020a031681526020018d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437505050928452505034602080840191909152600160a060020a03898116604085015260608401899052608084018d905260a084018c9052600060c0850181905260e090940184905285546001808201808955978652948390208651600890920201805473ffffffffffffffffffffffffffffffffffffffff1916919092161781558482015180519194611b6294508501920190611e5b565b506040820151816002015560608201518160030160006101000a815481600160a060020a030219169083600160a060020a031602179055506080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055506101008201518160070160016101000a81548160ff0219169083151502179055505050039050336002600083815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055506003600033600160a060020a0316600160a060020a0316815260200190815260200160002060008154809291906001019190505550826004600083815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055506005600084600160a060020a0316600160a060020a031681526020019081526020016000206000815480929190600101919050555082600160a060020a031633600160a060020a0316827fb64646c3c4303e7440b2f4ef2242a61a49d30eb012e3a05bb6169d799eeaf0a98d8d34888d8d604051808060200186815260200185815260200184815260200183815260200182810382528888828181526020019250808284376040519201829003995090975050505050505050a49998505050505050505050565b600080808311611d7957600080fd5b8284811515611d8457fe5b0490508091505b5092915050565b600080831515611da55760009150611d8b565b50828202828482811515611db557fe5b0414611dc057600080fd5b9392505050565b60008083831115611dd757600080fd5b5050900390565b600160a060020a0381161515611df357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e9c57805160ff1916838001178555611ec9565b82800160010185558215611ec9579182015b82811115611ec9578251825591602001919060010190611eae565b50611ed5929150611ed9565b5090565b610adb91905b80821115611ed55760008155600101611edf560047616d652073686f756c64206265206e6f74206f766572000000000000000000a165627a7a7230582017911e5a7377b958c15e00a1e3a3d925c08a7c03b1326e18869f65463f7ac8d40029"
}