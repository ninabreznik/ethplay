{
  "address": "0x614e79da2e658ae3ec0e2612349fccee6fff2155",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FFUELCoinToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/token/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/FFUELCoinToken.sol\n\ncontract FFUELCoinToken is MintableToken {\n    string public constant name = \"FIFO FUEL\";\n    string public constant symbol = \"FFUEL\";\n    uint8 public decimals = 18;\n    bool public tradingStarted = false;\n\n    // version cache buster\n    string public constant version = \"v2\";\n\n    // allow exceptional transfer for sender address - this mapping  can be modified only before the starting rounds\n    mapping (address => bool) public transferable;\n\n    /**\n     * @dev modifier that throws if spender address is not allowed to transfer\n     * and the trading is not enabled\n     */\n    modifier allowTransfer(address _spender) {\n\n        require(tradingStarted || transferable[_spender]);\n        _;\n    }\n    /**\n    *\n    * Only the owner of the token smart contract can add allow token to be transfer before the trading has started\n    *\n    */\n\n    function modifyTransferableHash(address _spender, bool value) onlyOwner public {\n        transferable[_spender] = value;\n    }\n\n    /**\n     * @dev Allows the owner to enable the trading.\n     */\n    function startTrading() onlyOwner public {\n        tradingStarted = true;\n    }\n\n    /**\n     * @dev Allows anyone to transfer the tokens once trading has started\n     * @param _to the recipient address of the tokens.\n     * @param _value number of tokens to be transfered.\n     */\n    function transfer(address _to, uint _value) allowTransfer(msg.sender) public returns (bool){\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Allows anyone to transfer the  tokens once trading has started or if the spender is part of the mapping\n\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint _value) allowTransfer(_from) public returns (bool){\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n    function approve(address _spender, uint256 _value) public allowTransfer(_spender) returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * Adding whenNotPaused\n     */\n    function increaseApproval(address _spender, uint _addedValue) public allowTransfer(_spender) returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    /**\n     * Adding whenNotPaused\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public allowTransfer(_spender) returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}",
  "bytecode": "6080604052600380543360a060020a61ffff02199091167512000000000000000000000000000000000000000000177fffffffffffffffffff00ffff000000000000000000000000000000000000000016179055610eb3806100626000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012157806306fdde031461014a578063095ea7b3146101d457806318160ddd146101f857806323b872dd1461021f578063293230b8146102495780632c9c0fb514610260578063313ce5671461028657806340c10f19146102b157806354fd4d50146102d55780635b4f472a146102ea57806366188463146102ff57806370a08231146103235780637d64bcb4146103445780638da5cb5b1461035957806395d89b411461038a578063a9059cbb1461039f578063acb1e61f146103c3578063d73dd623146103e4578063dd62ed3e14610408578063f2fde38b1461042f575b600080fd5b34801561012d57600080fd5b50610136610450565b604080519115158252519081900360200190f35b34801561015657600080fd5b5061015f610471565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610199578181015183820152602001610181565b50505050905090810190601f1680156101c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e057600080fd5b50610136600160a060020a03600435166024356104a8565b34801561020457600080fd5b5061020d6104fa565b60408051918252519081900360200190f35b34801561022b57600080fd5b50610136600160a060020a0360043581169060243516604435610500565b34801561025557600080fd5b5061025e610554565b005b34801561026c57600080fd5b5061025e600160a060020a03600435166024351515610593565b34801561029257600080fd5b5061029b6105d5565b6040805160ff9092168252519081900360200190f35b3480156102bd57600080fd5b50610136600160a060020a03600435166024356105f7565b3480156102e157600080fd5b5061015f610713565b3480156102f657600080fd5b5061013661074a565b34801561030b57600080fd5b50610136600160a060020a036004351660243561075a565b34801561032f57600080fd5b5061020d600160a060020a03600435166107a4565b34801561035057600080fd5b506101366107bf565b34801561036557600080fd5b5061036e610865565b60408051600160a060020a039092168252519081900360200190f35b34801561039657600080fd5b5061015f610874565b3480156103ab57600080fd5b50610136600160a060020a03600435166024356108ab565b3480156103cf57600080fd5b50610136600160a060020a03600435166108f5565b3480156103f057600080fd5b50610136600160a060020a036004351660243561090a565b34801561041457600080fd5b5061020d600160a060020a0360043581169060243516610954565b34801561043b57600080fd5b5061025e600160a060020a036004351661097f565b60035474010000000000000000000000000000000000000000900460ff1681565b60408051808201909152600981527f4649464f204655454c0000000000000000000000000000000000000000000000602082015281565b600354600090839060b060020a900460ff16806104dd5750600160a060020a03811660009081526004602052604090205460ff165b15156104e857600080fd5b6104f28484610a14565b949350505050565b60005481565b600354600090849060b060020a900460ff16806105355750600160a060020a03811660009081526004602052604090205460ff165b151561054057600080fd5b61054b858585610a7a565b95945050505050565b600354600160a060020a0316331461056b57600080fd5b6003805476ff00000000000000000000000000000000000000000000191660b060020a179055565b600354600160a060020a031633146105aa57600080fd5b600160a060020a03919091166000908152600460205260409020805460ff1916911515919091179055565b6003547501000000000000000000000000000000000000000000900460ff1681565b600354600090600160a060020a0316331461061157600080fd5b60035474010000000000000000000000000000000000000000900460ff161561063957600080fd5b60005461064c908363ffffffff610bf316565b6000908155600160a060020a038416815260016020526040902054610677908363ffffffff610bf316565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b60408051808201909152600281527f7632000000000000000000000000000000000000000000000000000000000000602082015281565b60035460b060020a900460ff1681565b600354600090839060b060020a900460ff168061078f5750600160a060020a03811660009081526004602052604090205460ff165b151561079a57600080fd5b6104f28484610c09565b600160a060020a031660009081526001602052604090205490565b600354600090600160a060020a031633146107d957600080fd5b60035474010000000000000000000000000000000000000000900460ff161561080157600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b60408051808201909152600581527f464655454c000000000000000000000000000000000000000000000000000000602082015281565b600354600090339060b060020a900460ff16806108e05750600160a060020a03811660009081526004602052604090205460ff165b15156108eb57600080fd5b6104f28484610cf9565b60046020526000908152604090205460ff1681565b600354600090839060b060020a900460ff168061093f5750600160a060020a03811660009081526004602052604090205460ff165b151561094a57600080fd5b6104f28484610ddc565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461099657600080fd5b600160a060020a03811615156109ab57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a0383161515610a9157600080fd5b600160a060020a038416600090815260016020526040902054821115610ab657600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610ae657600080fd5b600160a060020a038416600090815260016020526040902054610b0f908363ffffffff610e7516565b600160a060020a038086166000908152600160205260408082209390935590851681522054610b44908363ffffffff610bf316565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610b88908363ffffffff610e7516565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082820183811015610c0257fe5b9392505050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610c5e57336000908152600260209081526040808320600160a060020a0388168452909152812055610c93565b610c6e818463ffffffff610e7516565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a0383161515610d1057600080fd5b33600090815260016020526040902054821115610d2c57600080fd5b33600090815260016020526040902054610d4c908363ffffffff610e7516565b3360009081526001602052604080822092909255600160a060020a03851681522054610d7e908363ffffffff610bf316565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610e10908363ffffffff610bf316565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600082821115610e8157fe5b509003905600a165627a7a72305820148dbdfcd97ac8d142309be05d50d4da1c085e6e155887eb6946816db6e2cb730029"
}