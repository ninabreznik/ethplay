{
  "address": "0x1a3c9ea368e1947790b37484680d4087ee261af3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "REOToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-07\n*/\n\npragma solidity ^0.5.0;\n\n/*\n * Creator: CAREONCHAIN (REO) \n */\n\n/*\n * Abstract Token Smart Contract\n *\n */\n\n \n /*\n * Safe Math Smart Contract. \n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\n\ncontract SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\n */\ncontract Token {\n  \n  function totalSupply() public view returns (uint256 supply);\n  function balanceOf(address _owner) public view returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  constructor () public {\n    // Do nothing\n  }\n  \n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(_to != address(0));\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public\n  returns (bool success) {\n    require(_to != address(0));\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false; \n\n    if (_value > 0 && _from != _to) {\n\t  allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   * @param _spender address to allow the owner of to transfer tokens from message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n   function approve (address _spender, uint256 _value) public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    emit Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance(address _owner, address _spender) public view\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n  \n}\n\n\n/**\n * CAREONCHAIN smart contract.\n */\ncontract REOToken is AbstractToken {\n  /**\n   * Maximum allowed number of tokens in circulation.\n   * tokenSupply = tokensIActuallyWant * (10 ^ decimals)\n   */\n   \n   \n  uint256 constant MAX_TOKEN_COUNT = 360000000 * (10**18);\n   \n  /**\n   * Address of the owner of this smart contract.\n   */\n  address private owner;\n  \n  /**\n   * Frozen account list holder\n   */\n  mapping (address => bool) private frozenAccount;\n  \n  /**\n   * Burning account list holder\n   */\n  \n  mapping (address => bool) private burningAccount;\n  \n\n  /**\n   * Current number of tokens in circulation.\n   */\n  uint256 tokenCount = 0;\n  \n \n  /**\n   * True if tokens transfers are currently frozen, false otherwise.\n   */\n  bool frozen = false;\n  \n \n  /**\n   * Create new token smart contract and make msg.sender the\n   * owner of this smart contract.\n   */\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply() public view returns (uint256 supply) {\n    return tokenCount;\n  }\n\n  string constant public name = \"CAREONCHAIN\";\n  string constant public symbol = \"REO\";\n  uint8 constant public decimals = 18;\n  \n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(!frozenAccount[msg.sender]);\n\tif (frozen) return false;\n    else return AbstractToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public\n    returns (bool success) {\n\trequire(!frozenAccount[_from]);\n    if (frozen) return false;\n    else return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n   /**\n   * Change how many tokens given spender is allowed to transfer from message\n   * spender.  In order to prevent double spending of allowance,\n   * To change the approve amount you first have to reduce the addresses`\n   * allowance to zero by calling `approve(_spender, 0)` if it is not\n   * already 0 to mitigate the race condition described here:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value) public\n    returns (bool success) {\n\trequire(allowance (msg.sender, _spender) == 0 || _value == 0);\n    return AbstractToken.approve (_spender, _value);\n  }\n\n  /**\n   * Create _value new tokens and give new created tokens to msg.sender.\n   * Only be called by smart contract owner.\n   *\n   * @param _value number of tokens to create\n   * @return true if tokens were created successfully, false otherwise\n   */\n  function createTokens(uint256 _value) public\n    returns (bool success) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\n\t  \n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n      tokenCount = safeAdd (tokenCount, _value);\n\t  \n\t  // adding transfer event and _from address as null address\n\t  emit Transfer(address(0), msg.sender, _value);\n\t  \n\t  return true;\n    }\n\t\n\t  return false;\n    \n  }\n  \n  \n /**\n   * Burning capable account\n   * Only be called by smart contract owner.\n   */\n  function burningCapableAccount(address[] memory _target) public {\n  \n      require (msg.sender == owner);\n\t  \n\t  for (uint i = 0; i < _target.length; i++) {\n\t\t\tburningAccount[_target[i]] = true;\n        }\n }\n  \n  /**\n   * Burn intended tokens.\n   * Only be called by by burnable addresses.\n   *\n   * @param _value number of tokens to burn\n   * @return true if burnt successfully, false otherwise\n   */\n  \n  function burn(uint256 _value) public returns (bool success) {\n  \n        require(accounts[msg.sender] >= _value); \n\t\t\n\t\trequire(burningAccount[msg.sender]);\n\t\t\n\t\taccounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n\t\t\n        tokenCount = safeSub (tokenCount, _value);\t\n\t\t\n        emit Burn(msg.sender, _value);\n\t\t\n        return true;\n    }\n  \n\n  /**\n   * Set new owner for the smart contract.\n   * Only be called by smart contract owner.\n   *\n   * @param _newOwner address of new owner of the smart contract\n   */\n  function setOwner(address _newOwner) public {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  /**\n   * Freeze ALL token transfers.\n   * Only be called by smart contract owner.\n   */\n  function freezeTransfers () public {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n      emit Freeze ();\n    }\n  }\n\n  /**\n   * Unfreeze ALL token transfers.\n   * Only be called by smart contract owner.\n   */\n  function unfreezeTransfers () public {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      emit Unfreeze ();\n    }\n  }\n  \n  \n  /*A user is able to unintentionally send tokens to a contract \n  * and if the contract is not prepared to refund them they will get stuck in the contract. \n  * The same issue used to happen for Ether too but new Solidity versions added the payable modifier to\n  * prevent unintended Ether transfers. However, there’s no such mechanism for token transfers.\n  * so the below function is created\n  */\n  \n  function refundTokens(address _token, address _refund, uint256 _value) public {\n    require (msg.sender == owner);\n    require(_token != address(this));\n    AbstractToken token = AbstractToken(_token);\n    token.transfer(_refund, _value);\n    emit RefundTokens(_token, _refund, _value);\n  }\n  \n  /**\n   * Freeze specific account\n   * Only be called by smart contract owner.\n   */\n  function freezeAccount(address _target, bool freeze) public {\n      require (msg.sender == owner);\n\t  require (msg.sender != _target);\n      frozenAccount[_target] = freeze;\n      emit FrozenFunds(_target, freeze);\n }\n\n  /**\n   * Logged when token transfers were frozen.\n   */\n  event Freeze ();\n\n  /**\n   * Logged when token transfers were unfrozen.\n   */\n  event Unfreeze ();\n  \n  /**\n   * Logged when a particular account is frozen.\n   */\n  \n  event FrozenFunds(address target, bool frozen);\n  \n  /**\n   * Logged when a token is burnt.\n   */  \n  \n  event Burn(address target,uint256 _value);\n\n\n  \n  /**\n   * when accidentally send other tokens are refunded\n   */\n  \n  event RefundTokens(address _token, address _refund, uint256 _value);\n}",
  "bytecode": "608060405260006005556000600660006101000a81548160ff02191690831515021790555034801561003057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ba2806100816000396000f3fe6080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301502460146100f657806306fdde031461010d578063095ea7b31461019d57806313af40351461021057806318160ddd1461026157806323b872dd1461028c578063313ce5671461031f57806331c420d41461035057806342966c681461036757806370a08231146103ba5780637e1f2bb81461041f57806389519c501461047257806395d89b41146104ed578063a9059cbb1461057d578063dd62ed3e146105f0578063e724529c14610675578063ed361c17146106d2575b600080fd5b34801561010257600080fd5b5061010b610797565b005b34801561011957600080fd5b50610122610853565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610162578082015181840152602081019050610147565b50505050905090810190601f16801561018f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a957600080fd5b506101f6600480360360408110156101c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061088c565b604051808215151515815260200191505060405180910390f35b34801561021c57600080fd5b5061025f6004803603602081101561023357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108c2565b005b34801561026d57600080fd5b50610276610962565b6040518082815260200191505060405180910390f35b34801561029857600080fd5b50610305600480360360608110156102af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061096c565b604051808215151515815260200191505060405180910390f35b34801561032b57600080fd5b506103346109fa565b604051808260ff1660ff16815260200191505060405180910390f35b34801561035c57600080fd5b506103656109ff565b005b34801561037357600080fd5b506103a06004803603602081101561038a57600080fd5b8101908080359060200190929190505050610aba565b604051808215151515815260200191505060405180910390f35b3480156103c657600080fd5b50610409600480360360208110156103dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c71565b6040518082815260200191505060405180910390f35b34801561042b57600080fd5b506104586004803603602081101561044257600080fd5b8101908080359060200190929190505050610cb9565b604051808215151515815260200191505060405180910390f35b34801561047e57600080fd5b506104eb6004803603606081101561049557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e5d565b005b3480156104f957600080fd5b5061050261107d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610542578082015181840152602081019050610527565b50505050905090810190601f16801561056f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058957600080fd5b506105d6600480360360408110156105a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110b6565b604051808215151515815260200191505060405180910390f35b3480156105fc57600080fd5b5061065f6004803603604081101561061357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611142565b6040518082815260200191505060405180910390f35b34801561068157600080fd5b506106d06004803603604081101561069857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506111c9565b005b3480156106de57600080fd5b50610795600480360360208110156106f557600080fd5b810190808035906020019064010000000081111561071257600080fd5b82018360208201111561072457600080fd5b8035906020019184602083028401116401000000008311171561074657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061132a565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f357600080fd5b600660009054906101000a900460ff161515610851576001600660006101000a81548160ff0219169083151502179055507f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de60405160405180910390a15b565b6040805190810160405280600b81526020017f434152454f4e434841494e00000000000000000000000000000000000000000081525081565b6000806108993385611142565b14806108a55750600082145b15156108b057600080fd5b6108ba8383611415565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561091e57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600554905090565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156109c757600080fd5b600660009054906101000a900460ff16156109e557600090506109f3565b6109f0848484611507565b90505b9392505050565b601281565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a5b57600080fd5b600660009054906101000a900460ff1615610ab8576000600660006101000a81548160ff0219169083151502179055507f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded60405160405180910390a15b565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610b0957600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610b6157600080fd5b610ba96000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118ed565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bf7600554836118ed565b6005819055507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca53383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160019050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d1757600080fd5b6000821115610e5357610d386b0129c8f71ad02e2a680000006005546118ed565b821115610d485760009050610e58565b610d906000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611906565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dde60055483611906565b6005819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610e58565b600090505b919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eb957600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ef457600080fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610f9c57600080fd5b505af1158015610fb0573d6000803e3d6000fd5b505050506040513d6020811015610fc657600080fd5b8101908080519060200190929190505050507ffab5e7a27e02736e52f60776d307340051d8bc15aee0ef211c7a4aa2a8cdc154848484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150505050565b6040805190810160405280600381526020017f52454f000000000000000000000000000000000000000000000000000000000081525081565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561111157600080fd5b600660009054906101000a900460ff161561112f576000905061113c565b6111398383611924565b90505b92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561122557600080fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561126057600080fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561138657600080fd5b60008090505b81518110156114115760016004600084848151811015156113a957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808060010191505061138c565b5050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561154457600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156115d157600090506118e6565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561162057600090506118e6565b60008211801561165c57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b1561187c576116e7600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118ed565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117af6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118ed565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118396000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611906565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60008282111515156118fb57fe5b818303905092915050565b600080828401905083811015151561191a57fe5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561196157600080fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156119b05760009050611b70565b6000821180156119ec57508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611b0657611a396000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118ed565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ac36000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611906565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9291505056fea165627a7a72305820642fa654bcfcea151f0a35a427a1fa5e1ebbc847e36d843ba9700a68b2178a170029"
}