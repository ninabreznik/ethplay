{
  "address": "0x24a7de87b3bd7298bbf8966fdf170c558d69ecc4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "METADOLLAR",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-02\n*/\n\npragma solidity ^0.4.18;\n// 'Metadollar' CORE token contract\n//\n// Symbol      : DOL\n// Name        : METADOLLAR\n// Total supply: 1000,000,000,000\n// Decimals    : 18\n // ERC Token Standard #20 Interface\n // https://github.com/ethereum/EIPs/issues/20\n// ----------------------------------------------------------------------------\n   \n   contract SafeMath {\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n    \n contract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract Owned{\n\taddress public owner;\n\taddress constant supervisor  = 0x318B0f768f5c6c567227AA50B51B5b3078902f8C;\n\t\n\tfunction owned(){\n\t\towner = msg.sender;\n\t}\n\n\t/// @notice Functions with this modifier can only be executed by the owner\n\tmodifier isOwner {\n\t\tassert(msg.sender == owner || msg.sender == supervisor);\n\t\t_;\n\t}\n\t\n\t/// @notice Transfer the ownership of this contract\n\tfunction transferOwnership(address newOwner);\n\t\n\tevent ownerChanged(address whoTransferredOwnership, address formerOwner, address newOwner);\n }\n \n\ncontract METADOLLAR is ERC20Interface, Owned, SafeMath {\n    \n    \n\n\tstring public constant name = \"METADOLLAR\";\n\tstring public constant symbol = \"DOL\";\n\tuint public constant decimals = 18;\n\tuint256 public _totalSupply = 1000000000000000000000000000000;\n\tuint256 public icoMin = 1000000000000000;\t\t\t\t\t\n\tuint256 public icoLimit = 1000000000000000000000000000000;\t\t\t\n\tuint256 public countHolders = 0;\t\t\t\t// count how many unique holders have tokens\n\tuint256 public amountOfInvestments = 0;\t// amount of collected wei\n\t\n\t\n\tuint256 public icoPrice;\t\n\tuint256 public dolRate = 1000;\n\tuint256 public ethRate = 1;\n\tuint256 public sellRate = 900;\n\tuint256 public commissionRate = 1000;\n\tuint256 public sellPrice;\n\tuint256 public currentTokenPrice;\t\t\t\t\n\tuint256 public commission;\t\n\t\n\t\n\tbool public icoIsRunning;\n\tbool public minimalGoalReached;\n\tbool public icoIsClosed;\n\n\t//Balances for each account\n\tmapping (address => uint256) public tokenBalanceOf;\n\n\t// Owner of account approves the transfer of an amount to another account\n\tmapping(address => mapping (address => uint256)) allowed;\n\t\n\t//list with information about frozen accounts\n\tmapping(address => bool) frozenAccount;\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent FrozenFunds(address initiator, address account, string status);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent BonusChanged(uint8 bonusOld, uint8 bonusNew);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent minGoalReached(uint256 minIcoAmount, string notice);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent preIcoEnded(uint256 preIcoAmount, string notice);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent priceUpdated(uint256 oldPrice, uint256 newPrice, string notice);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent withdrawed(address _to, uint256 summe, string notice);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent deposited(address _from, uint256 summe, string notice);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent tokenCreated(address _creator, uint256 summe, string notice);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent tokenDestroyed(address _destroyer, uint256 summe, string notice);\n\t\n\t//this generate a public event on a blockchain that will notify clients\n\tevent icoStatusUpdated(address _initiator, string status);\n\n\t/// @notice Constructor of the contract\n\tfunction STARTMETADOLLAR() {\n\t\ticoIsRunning = true;\n\t\tminimalGoalReached = false;\n\t\ticoIsClosed = false;\n\t\ttokenBalanceOf[this] += _totalSupply;\n\t\tallowed[this][owner] = _totalSupply;\n\t\tallowed[this][supervisor] = _totalSupply;\n\t\tcurrentTokenPrice = 1 * 1;\t// initial price of 1 Token\n\t\ticoPrice = ethRate * dolRate;\t\t\n\t\tsellPrice = sellRate * ethRate;\n\t\tupdatePrices();\n\t}\n\n\tfunction () payable {\n\t\trequire(!frozenAccount[msg.sender]);\n\t\tif(msg.value > 0 && !frozenAccount[msg.sender]) {\n\t\t\tbuyToken();\n\t\t}\n\t}\n\n\t/// @notice Returns a whole amount of tokens\n\tfunction totalSupply() constant returns (uint256 totalAmount) {\n\t\ttotalAmount = _totalSupply;\n\t}\n\n\t/// @notice What is the balance of a particular account?\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n\t\treturn tokenBalanceOf[_owner];\n\t}\n\n\t/// @notice Shows how much tokens _spender can spend from _owner address\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\t\n\t/// @notice Calculates amount of weis needed to buy more than one token\n\t/// @param howManyTokenToBuy - Amount of tokens to calculate\n\tfunction calculateTheEndPrice(uint256 howManyTokenToBuy) constant returns (uint256 summarizedPriceInWeis) {\n\t\tif(howManyTokenToBuy > 0) {\n\t\t\tsummarizedPriceInWeis = howManyTokenToBuy * currentTokenPrice;\n\t\t}else {\n\t\t\tsummarizedPriceInWeis = 0;\n\t\t}\n\t}\n\t\n\t/// @notice Shows if account is frozen\n\t/// @param account - Accountaddress to check\n\tfunction checkFrozenAccounts(address account) constant returns (bool accountIsFrozen) {\n\t\taccountIsFrozen = frozenAccount[account];\n\t}\n\n\t/// @notice Buy tokens from contract by sending ether\n\tfunction buy() payable public {\n\t\trequire(!frozenAccount[msg.sender]);\n\t\trequire(msg.value > 0);\n\t\tcommission = msg.value/commissionRate; // % of wei tx\n        require(address(this).send(commission));\n\t\tbuyToken();\n\t}\n\t\n\n\t/// @notice Sell tokens and receive ether from contract\n\tfunction sell(uint256 amount) {\n\t\trequire(!frozenAccount[msg.sender]);\n\t\trequire(tokenBalanceOf[msg.sender] >= amount);         \t// checks if the sender has enough to sell\n\t\trequire(amount > 0);\n\t\trequire(sellPrice > 0);\n\t\t_transfer(msg.sender, this, amount);\n\t\tuint256 revenue = amount * sellPrice;\n\t\trequire(this.balance >= revenue);\n\t\tcommission = msg.value/commissionRate; // % of wei tx\n        require(address(this).send(commission));\n\t\tmsg.sender.transfer(revenue);                \t\t// sends ether to the seller: it's important to do this last to prevent recursion attacks\n\t}\n\t\n   \n\n    function sell2(address _tokenAddress) public payable{\n        METADOLLAR token = METADOLLAR(_tokenAddress);\n        uint tokens = msg.value * sellPrice;\n        require(token.balanceOf(this) >= tokens);\n        commission = msg.value/commissionRate; // % of wei tx\n       require(address(this).send(commission));\n        token.transfer(msg.sender, tokens);\n    }\n\n\t\n\n\t/// @notice Transfer amount of tokens from own wallet to someone else\n\tfunction transfer(address _to, uint256 _value) returns (bool success) {\n\t\tassert(msg.sender != address(0));\n\t\tassert(_to != address(0));\n\t\trequire(!frozenAccount[msg.sender]);\n\t\trequire(!frozenAccount[_to]);\n\t\trequire(tokenBalanceOf[msg.sender] >= _value);\n\t\trequire(tokenBalanceOf[msg.sender] - _value < tokenBalanceOf[msg.sender]);\n\t\trequire(tokenBalanceOf[_to] + _value > tokenBalanceOf[_to]);\n\t\trequire(_value > 0);\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/// @notice  Send _value amount of tokens from address _from to address _to\n\t/// @notice  The transferFrom method is used for a withdraw workflow, allowing contracts to send\n\t/// @notice  tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n\t/// @notice  fees in sub-currencies; the command should fail unless the _from account has\n\t/// @notice  deliberately authorized the sender of the message via some mechanism;\n\tfunction transferFrom(address _from,\taddress _to,\tuint256 _value) returns (bool success) {\n\t\tassert(msg.sender != address(0));\n\t\tassert(_from != address(0));\n\t\tassert(_to != address(0));\n\t\trequire(!frozenAccount[msg.sender]);\n\t\trequire(!frozenAccount[_from]);\n\t\trequire(!frozenAccount[_to]);\n\t\trequire(tokenBalanceOf[_from] >= _value);\n\t\trequire(allowed[_from][msg.sender] >= _value);\n\t\trequire(tokenBalanceOf[_from] - _value < tokenBalanceOf[_from]);\n\t\trequire(tokenBalanceOf[_to] + _value > tokenBalanceOf[_to]);\n\t\trequire(_value > 0);\n\t\torderToTransfer(msg.sender, _from, _to, _value, \"Order to transfer tokens from allowed account\");\n\t\t_transfer(_from, _to, _value);\n\t\tallowed[_from][msg.sender] -= _value;\n\t\treturn true;\n\t}\n\n\t/// @notice Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n\t/// @notice If this function is called again it overwrites the current allowance with _value.\n\tfunction approve(address _spender, uint256 _value) returns (bool success) {\n\t\trequire(!frozenAccount[msg.sender]);\n\t\tassert(_spender != address(0));\n\t\trequire(_value >= 0);\n\t\tallowed[msg.sender][_spender] = _value;\n\t\treturn true;\n\t}\n\n\t/// @notice Check if minimal goal of ICO is reached\n\tfunction checkMinimalGoal() internal {\n\t\tif(tokenBalanceOf[this] <= _totalSupply - icoMin) {\n\t\t\tminimalGoalReached = true;\n\t\t\tminGoalReached(icoMin, \"Minimal goal of ICO is reached!\");\n\t\t}\n\t}\n\n\t/// @notice Check if ICO is ended\n\tfunction checkIcoStatus() internal {\n\t\tif(tokenBalanceOf[this] <= _totalSupply - icoLimit) {\n\t\t\ticoIsRunning = false;\n\t\t}\n\t}\n\n\t/// @notice Processing each buying\n\tfunction buyToken() internal {\n\t\tuint256 value = msg.value;\n\t\taddress sender = msg.sender;\n\t\trequire(!icoIsClosed);\n\t\trequire(!frozenAccount[sender]);\n\t\trequire(value > 0);\n\t\trequire(currentTokenPrice > 0);\n\t\tuint256 amount = value / currentTokenPrice;\t\t\t// calculates amount of tokens\n\t\tuint256 moneyBack = value - (amount * sellPrice);\n\t\trequire(tokenBalanceOf[this] >= amount);              \t\t// checks if contract has enough to sell\n\t\tamountOfInvestments = amountOfInvestments + (value - moneyBack);\n\t\tupdatePrices();\n\t\t_transfer(this, sender, amount);\n\t\tif(moneyBack > 0) {\n\t\t\tsender.transfer(moneyBack);\n\t\t}\n\t}\n\n\t/// @notice Internal transfer, can only be called by this contract\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\n\t\tassert(_from != address(0));\n\t\tassert(_to != address(0));\n\t\trequire(_value > 0);\n\t\trequire(tokenBalanceOf[_from] >= _value);\n\t\trequire(tokenBalanceOf[_to] + _value > tokenBalanceOf[_to]);\n\t\trequire(!frozenAccount[_from]);\n\t\trequire(!frozenAccount[_to]);\n\t\tif(tokenBalanceOf[_to] == 0){\n\t\t\tcountHolders += 1;\n\t\t}\n\t\ttokenBalanceOf[_from] -= _value;\n\t\tif(tokenBalanceOf[_from] == 0){\n\t\t\tcountHolders -= 1;\n\t\t}\n\t\ttokenBalanceOf[_to] += _value;\n\t\tallowed[this][owner] = tokenBalanceOf[this];\n\t\tallowed[this][supervisor] = tokenBalanceOf[this];\n\t\tTransfer(_from, _to, _value);\n\t}\n\n\t/// @notice Set current ICO prices in wei for one token\n\tfunction updatePrices() internal {\n\t\tuint256 oldPrice = currentTokenPrice;\n\t\tif(icoIsRunning) {\n\t\t\tcheckIcoStatus();\n\t\t}\n\t\tif(icoIsRunning) {\n\t\t\tcurrentTokenPrice = icoPrice;\n\t\t}else{\n\t\t\tcurrentTokenPrice = icoPrice;\n\t\t}\n\t\t\n\t\tif(oldPrice != currentTokenPrice) {\n\t\t\tpriceUpdated(oldPrice, currentTokenPrice, \"Token price updated!\");\n\t\t}\n\t}\n\n\t/// @notice Set current ICO price in wei for one token\n\t/// @param priceForIcoInWei - is the amount in wei for one token\n\tfunction setICOPrice(uint256 priceForIcoInWei) isOwner {\n\t\trequire(priceForIcoInWei > 0);\n\t\trequire(icoPrice != priceForIcoInWei);\n\t\ticoPrice = priceForIcoInWei;\n\t\tupdatePrices();\n\t}\n\n\t\n\n\t/// @notice Set the current sell price in wei for one token\n\t/// @param priceInWei - is the amount in wei for one token\n\tfunction setSellRate(uint256 priceInWei) isOwner {\n\t\trequire(priceInWei >= 0);\n\t\tsellRate = priceInWei;\n\t}\n\t\n\t/// @notice Set the current commission rate\n\t/// @param commissionRateInWei - commission rate\n\tfunction setCommissionRate(uint256 commissionRateInWei) isOwner {\n\t\trequire(commissionRateInWei >= 0);\n\t\tcommissionRate = commissionRateInWei;\n\t}\n\t\n\t/// @notice Set the current DOL rate in wei for one eth\n\t/// @param dolInWei - is the amount in wei for one ETH\n\tfunction setDolRate(uint256 dolInWei) isOwner {\n\t\trequire(dolInWei >= 0);\n\t\tdolRate = dolInWei;\n\t}\n\t\n\t/// @notice Set the current ETH rate in wei for one DOL\n\t/// @param ethInWei - is the amount in wei for one DOL\n\tfunction setEthRate(uint256 ethInWei) isOwner {\n\t\trequire(ethInWei >= 0);\n\t\tethRate = ethInWei;\n\t}\n\n\n\n\t/// @notice 'freeze? Prevent | Allow' 'account' from sending and receiving tokens\n\t/// @param account - address to be frozen\n\t/// @param freeze - select is the account frozen or not\n\tfunction freezeAccount(address account, bool freeze) isOwner {\n\t\trequire(account != owner);\n\t\trequire(account != supervisor);\n\t\tfrozenAccount[account] = freeze;\n\t\tif(freeze) {\n\t\t\tFrozenFunds(msg.sender, account, \"Account set frozen!\");\n\t\t}else {\n\t\t\tFrozenFunds(msg.sender, account, \"Account set free for use!\");\n\t\t}\n\t}\n\n\t/// @notice Create an amount of token\n\t/// @param amount - token to create\n\tfunction mintToken(uint256 amount) isOwner {\n\t\trequire(amount > 0);\n\t\trequire(tokenBalanceOf[this] <= icoMin);\t// owner can create token only if the initial amount is strongly not enough to supply and demand ICO\n\t\trequire(_totalSupply + amount > _totalSupply);\n\t\trequire(tokenBalanceOf[this] + amount > tokenBalanceOf[this]);\n\t\t_totalSupply += amount;\n\t\ttokenBalanceOf[this] += amount;\n\t\tallowed[this][owner] = tokenBalanceOf[this];\n\t\tallowed[this][supervisor] = tokenBalanceOf[this];\n\t\ttokenCreated(msg.sender, amount, \"Additional tokens created!\");\n\t}\n\n\t/// @notice Destroy an amount of token\n\t/// @param amount - token to destroy\n\tfunction destroyToken(uint256 amount) isOwner {\n\t\trequire(amount > 0);\n\t\trequire(tokenBalanceOf[this] >= amount);\n\t\trequire(_totalSupply >= amount);\n\t\trequire(tokenBalanceOf[this] - amount >= 0);\n\t\trequire(_totalSupply - amount >= 0);\n\t\ttokenBalanceOf[this] -= amount;\n\t\t_totalSupply -= amount;\n\t\tallowed[this][owner] = tokenBalanceOf[this];\n\t\tallowed[this][supervisor] = tokenBalanceOf[this];\n\t\ttokenDestroyed(msg.sender, amount, \"An amount of tokens destroyed!\");\n\t}\n\n\t/// @notice Transfer the ownership to another account\n\t/// @param newOwner - address who get the ownership\n\tfunction transferOwnership(address newOwner) isOwner {\n\t\tassert(newOwner != address(0));\n\t\taddress oldOwner = owner;\n\t\towner = newOwner;\n\t\townerChanged(msg.sender, oldOwner, newOwner);\n\t\tallowed[this][oldOwner] = 0;\n\t\tallowed[this][newOwner] = tokenBalanceOf[this];\n\t}\n\n\t/// @notice Transfer all ether from smartcontract to owner\n\tfunction collect() isOwner {\n        require(this.balance > 0);\n\t\twithdraw(this.balance);\n    }\n\n\t/// @notice Withdraw an amount of ether\n\t/// @param summeInWei - amout to withdraw\n\tfunction withdraw(uint256 summeInWei) isOwner {\n\t\tuint256 contractbalance = this.balance;\n\t\taddress sender = msg.sender;\n\t\trequire(contractbalance >= summeInWei);\n\t\twithdrawed(sender, summeInWei, \"wei withdrawed\");\n        sender.transfer(summeInWei);\n\t}\n\n\t/// @notice Deposit an amount of ether\n\tfunction deposit() payable isOwner {\n\t\trequire(msg.value > 0);\n\t\trequire(msg.sender.balance >= msg.value);\n\t\tdeposited(msg.sender, msg.value, \"wei deposited\");\n\t}\n\n\n\t/// @notice Stop running ICO\n\t/// @param icoIsStopped - status if this ICO is stopped\n\tfunction stopThisIco(bool icoIsStopped) isOwner {\n\t\trequire(icoIsClosed != icoIsStopped);\n\t\ticoIsClosed = icoIsStopped;\n\t\tif(icoIsStopped) {\n\t\t\ticoStatusUpdated(msg.sender, \"Coin offering was stopped!\");\n\t\t}else {\n\t\t\ticoStatusUpdated(msg.sender, \"Coin offering is running!\");\n\t\t}\n\t}\n\n}",
  "bytecode": "60806040526c0c9f2c9cd04674edea4000000060015566038d7ea4c680006002556c0c9f2c9cd04674edea40000000600355600060045560006005556103e860075560016008556103846009556103e8600a5534801561005e57600080fd5b506142038061006e6000396000f30060806040526004361061023b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063033c6ee6146102fe57806306fdde0314610329578063095ea7b3146103b95780630a2d967b1461041e5780630beb90d31461044d57806318160ddd1461047857806319fac8fd146104a357806323b872dd146104d057806325b5160c146105555780632be2d95e146105825780632e1a7d4d146105ad5780632fa05208146105da5780632fd463e114610609578063313ce5671461062057806334b0e5ed1461064b5780633eaaf86b1461067657806340f3633e146106a15780634b750334146106cc5780634c7d3e3f146106f7578063579fea7d1461072657806358e46275146107535780635ea1d6f8146107945780636217229b146107bf5780636f4215b1146107ea57806370a082311461081757806371b3659e1461086e5780638a7d124b146108995780638da5cb5b146108c65780638e0b017d1461091d57806395d89b411461094a578063a6f2ae3a146109da578063a9059cbb146109e4578063ae04333614610a49578063b1057e9c14610a74578063c5c0116914610aaa578063c634d03214610b05578063cb4e7fdc14610b32578063d0e30db014610b61578063d2d93f9014610b6b578063dd62ed3e14610b96578063df32754b14610c0d578063e148919114610c24578063e42c08f214610c4f578063e4849b3214610ca6578063e522538114610cd3578063e724529c14610cea578063f2fde38b14610d39575b601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561029457600080fd5b6000341180156102ee5750601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156102fc576102fb610d7c565b5b005b34801561030a57600080fd5b50610313610efb565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061033e610f01565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561037e578082015181840152602081019050610363565b50505050905090810190601f1680156103ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c557600080fd5b50610404600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f3a565b604051808215151515815260200191505060405180910390f35b34801561042a57600080fd5b5061044b600480360381019080803515159060200190929190505050611069565b005b34801561045957600080fd5b5061046261128e565b6040518082815260200191505060405180910390f35b34801561048457600080fd5b5061048d611294565b6040518082815260200191505060405180910390f35b3480156104af57600080fd5b506104ce6004803603810190808035906020019092919050505061129e565b005b3480156104dc57600080fd5b5061053b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061135a565b604051808215151515815260200191505060405180910390f35b34801561056157600080fd5b50610580600480360381019080803590602001909291905050506118e7565b005b34801561058e57600080fd5b506105976119bb565b6040518082815260200191505060405180910390f35b3480156105b957600080fd5b506105d8600480360381019080803590602001909291905050506119c1565b005b3480156105e657600080fd5b506105ef611b82565b604051808215151515815260200191505060405180910390f35b34801561061557600080fd5b5061061e611b95565b005b34801561062c57600080fd5b50610635611d9c565b6040518082815260200191505060405180910390f35b34801561065757600080fd5b50610660611da1565b6040518082815260200191505060405180910390f35b34801561068257600080fd5b5061068b611da7565b6040518082815260200191505060405180910390f35b3480156106ad57600080fd5b506106b6611dad565b6040518082815260200191505060405180910390f35b3480156106d857600080fd5b506106e1611db3565b6040518082815260200191505060405180910390f35b34801561070357600080fd5b5061070c611db9565b604051808215151515815260200191505060405180910390f35b34801561073257600080fd5b5061075160048036038101908080359060200190929190505050611dcc565b005b34801561075f57600080fd5b5061077e60048036038101908080359060200190929190505050611e88565b6040518082815260200191505060405180910390f35b3480156107a057600080fd5b506107a9611ea8565b6040518082815260200191505060405180910390f35b3480156107cb57600080fd5b506107d4611eae565b6040518082815260200191505060405180910390f35b3480156107f657600080fd5b5061081560048036038101908080359060200190929190505050611eb4565b005b34801561082357600080fd5b50610858600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f70565b6040518082815260200191505060405180910390f35b34801561087a57600080fd5b50610883611fb9565b6040518082815260200191505060405180910390f35b3480156108a557600080fd5b506108c460048036038101908080359060200190929190505050611fbf565b005b3480156108d257600080fd5b506108db6123ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561092957600080fd5b5061094860048036038101908080359060200190929190505050612412565b005b34801561095657600080fd5b5061095f6124ce565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561099f578082015181840152602081019050610984565b50505050905090810190601f1680156109cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6109e2612507565b005b3480156109f057600080fd5b50610a2f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506125cf565b604051808215151515815260200191505060405180910390f35b348015610a5557600080fd5b50610a5e612882565b6040518082815260200191505060405180910390f35b610aa8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612888565b005b348015610ab657600080fd5b50610aeb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ab3565b604051808215151515815260200191505060405180910390f35b348015610b1157600080fd5b50610b3060048036038101908080359060200190929190505050612b09565b005b348015610b3e57600080fd5b50610b47612f65565b604051808215151515815260200191505060405180910390f35b610b69612f78565b005b348015610b7757600080fd5b50610b806130f5565b6040518082815260200191505060405180910390f35b348015610ba257600080fd5b50610bf7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130fb565b6040518082815260200191505060405180910390f35b348015610c1957600080fd5b50610c22613182565b005b348015610c3057600080fd5b50610c396131c4565b6040518082815260200191505060405180910390f35b348015610c5b57600080fd5b50610c90600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131ca565b6040518082815260200191505060405180910390f35b348015610cb257600080fd5b50610cd1600480360381019080803590602001909291905050506131e2565b005b348015610cdf57600080fd5b50610ce8613384565b005b348015610cf657600080fd5b50610d37600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061346e565b005b348015610d4557600080fd5b50610d7a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506137c2565b005b600080600080349350339250600e60029054906101000a900460ff16151515610da457600080fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610dfd57600080fd5b600084111515610e0c57600080fd5b6000600c54111515610e1d57600080fd5b600c5484811515610e2a57fe5b049150600b5482028403905081600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e8457600080fd5b80840360055401600581905550610e99613b14565b610ea4308484613bef565b6000811115610ef5578273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ef3573d6000803e3d6000fd5b505b50505050565b60045481565b6040805190810160405280600a81526020017f4d455441444f4c4c41520000000000000000000000000000000000000000000081525081565b6000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610f9557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610fce57fe5b60008210151515610fde57600080fd5b81601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611103575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561110b57fe5b801515600e60029054906101000a900460ff1615151415151561112d57600080fd5b80600e60026101000a81548160ff02191690831515021790555080156111ee577fb6230a7436f9b91951884989b5b0fdf39d67358e9608949dc78963f2b83af8a933604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252601a8152602001807f436f696e206f66666572696e67207761732073746f70706564210000000000008152506020019250505060405180910390a161128b565b7fb6230a7436f9b91951884989b5b0fdf39d67358e9608949dc78963f2b83af8a933604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825260198152602001807f436f696e206f66666572696e672069732072756e6e696e6721000000000000008152506020019250505060405180910390a15b50565b60035481565b6000600154905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611338575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561134057fe5b6000811015151561135057600080fd5b80600a8190555050565b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561139457fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156113cd57fe5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561140657fe5b601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561145f57600080fd5b601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156114b857600080fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561151157600080fd5b81600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561155f57600080fd5b81601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115ea57600080fd5b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540310151561167857600080fd5b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561170657600080fd5b60008211151561171557600080fd5b7f887cfc3e80e54d957ad2436a4a554881dfb72d55acb82afe8ca89efec085ec2033858585604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001806020018281038252602d8152602001807f4f7264657220746f207472616e7366657220746f6b656e732066726f6d20616c81526020017f6c6f776564206163636f756e74000000000000000000000000000000000000008152506040019550505050505060405180910390a1611852848484613bef565b81601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600190509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611981575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561198957fe5b60008111151561199857600080fd5b80600654141515156119a957600080fd5b806006819055506119b8613b14565b50565b60055481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611a5e575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611a6657fe5b3073ffffffffffffffffffffffffffffffffffffffff16319150339050828210151515611a9257600080fd5b7fbddefc067f3281540ef23e268f5c5d31c3bb7b11cffd03eb962ba6b983873d528184604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001806020018281038252600e8152602001807f7765692077697468647261776564000000000000000000000000000000000000815250602001935050505060405180910390a18073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611b7c573d6000803e3d6000fd5b50505050565b600e60019054906101000a900460ff1681565b6001600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff0219169083151502179055506000600e60026101000a81548160ff021916908315150217905550600154600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600154601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600154601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600c819055506007546008540260068190555060085460095402600b81905550611d9a613b14565b565b601281565b60065481565b60015481565b60025481565b600b5481565b600e60029054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e66575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611e6e57fe5b60008110151515611e7e57600080fd5b8060078190555050565b600080821115611e9e57600c5482029050611ea3565b600090505b919050565b600a5481565b60095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611f4e575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611f5657fe5b60008110151515611f6657600080fd5b8060088190555050565b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612059575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561206157fe5b60008111151561207057600080fd5b80600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156120be57600080fd5b80600154101515156120cf57600080fd5b600081600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031015151561212057600080fd5b600081600154031015151561213457600080fd5b80600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600160008282540392505081905550600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fd712d06d9fc6b99645c547cde4297ac899f20160a078563b5888aeaa2bb9fd4c3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001806020018281038252601e8152602001807f416e20616d6f756e74206f6620746f6b656e732064657374726f796564210000815250602001935050505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806124ac575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156124b457fe5b600081101515156124c457600080fd5b8060098190555050565b6040805190810160405280600381526020017f444f4c000000000000000000000000000000000000000000000000000000000081525081565b601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561256057600080fd5b60003411151561256f57600080fd5b600a543481151561257c57fe5b04600d819055503073ffffffffffffffffffffffffffffffffffffffff166108fc600d549081150290604051600060405180830381858888f1935050505015156125c557600080fd5b6125cd610d7c565b565b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561260957fe5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561264257fe5b601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561269b57600080fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156126f457600080fd5b81600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561274257600080fd5b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031015156127d057600080fd5b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561285e57600080fd5b60008211151561286d57600080fd5b612878338484613bef565b6001905092915050565b60075481565b600080829150600b5434029050808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561293157600080fd5b505af1158015612945573d6000803e3d6000fd5b505050506040513d602081101561295b57600080fd5b81019080805190602001909291905050501015151561297957600080fd5b600a543481151561298657fe5b04600d819055503073ffffffffffffffffffffffffffffffffffffffff166108fc600d549081150290604051600060405180830381858888f1935050505015156129cf57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a7257600080fd5b505af1158015612a86573d6000803e3d6000fd5b505050506040513d6020811015612a9c57600080fd5b810190808051906020019092919050505050505050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612ba3575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515612bab57fe5b600081111515612bba57600080fd5b600254600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151515612c0a57600080fd5b6001548160015401111515612c1e57600080fd5b600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515612cac57600080fd5b8060016000828254019250508190555080600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f6ec25a0660f8a4450329bb8045a3a6f2cd533b2a5f231bf229df036c6e7f75063382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001806020018281038252601a8152602001807f4164646974696f6e616c20746f6b656e73206372656174656421000000000000815250602001935050505060405180910390a150565b600e60009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613012575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561301a57fe5b60003411151561302957600080fd5b343373ffffffffffffffffffffffffffffffffffffffff16311015151561304f57600080fd5b7fb3fad72f98434732d746238913f9fafec4d4f8f8815476f0a5c6d200500245283334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001806020018281038252600d8152602001807f776569206465706f736974656400000000000000000000000000000000000000815250602001935050505060405180910390a1565b60085481565b6000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600d5481565b600f6020528060005260406000206000915090505481565b6000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561323d57600080fd5b81600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561328b57600080fd5b60008211151561329a57600080fd5b6000600b541115156132ab57600080fd5b6132b6333084613bef565b600b5482029050803073ffffffffffffffffffffffffffffffffffffffff1631101515156132e357600080fd5b600a54348115156132f057fe5b04600d819055503073ffffffffffffffffffffffffffffffffffffffff166108fc600d549081150290604051600060405180830381858888f19350505050151561333957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561337f573d6000803e3d6000fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061341e575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561342657fe5b60003073ffffffffffffffffffffffffffffffffffffffff163111151561344c57600080fd5b61346c3073ffffffffffffffffffffffffffffffffffffffff16316119c1565b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613508575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561351057fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561356c57600080fd5b73318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156135bb57600080fd5b80601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080156136ed577f49251b186b6f02cf3d4e004f30a09bf92fe66bff552aec9ecb12cfd9a88770733383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825260138152602001807f4163636f756e74207365742066726f7a656e2100000000000000000000000000815250602001935050505060405180910390a16137be565b7f49251b186b6f02cf3d4e004f30a09bf92fe66bff552aec9ecb12cfd9a88770733383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825260198152602001807f4163636f756e7420736574206672656520666f72207573652100000000000000815250602001935050505060405180910390a15b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061385e575073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561386657fe5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561389f57fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f714dc20dd28bc70d15b1bb379db6503cc2faadd8de8aa0e48fe3918dc9f115e9338284604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a16000601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000600c549050600e60009054906101000a900460ff1615613b3957613b3861416b565b5b600e60009054906101000a900460ff1615613b5c57600654600c81905550613b66565b600654600c819055505b600c5481141515613bec577f764e50ebf72c7a40008a5116772bcd3c844482c132be52ff6fb2b703a9f0652081600c546040518083815260200182815260200180602001828103825260148152602001807f546f6b656e207072696365207570646174656421000000000000000000000000815250602001935050505060405180910390a15b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613c2857fe5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613c6157fe5b600081111515613c7057600080fd5b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515613cbe57600080fd5b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515613d4c57600080fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515613da557600080fd5b601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515613dfe57600080fd5b6000600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415613e585760016004600082825401925050819055505b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415613eff5760016004600082825403925050819055505b80600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600073318b0f768f5c6c567227aa50b51b5b3078902f8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60035460015403600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156141d5576000600e60006101000a81548160ff0219169083151502179055505b5600a165627a7a72305820c87fdc150efe4467c6314853ffa19ac11d97f30b7bacbcf402c948731f2168630029"
}