{
  "address": "0x9f89388141c632c4c6f36d1060d5f50604ee3abc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CATCrowdsale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-22\n*/\n\npragma solidity ^0.4.11;\n\n//\n// SafeMath\n//\n// Ownable\n// Destructible\n// Pausable\n//\n// ERC20Basic\n// ERC20 : ERC20Basic\n// BasicToken : ERC20Basic\n// StandardToken : ERC20, BasicToken\n// MintableToken : StandardToken, Ownable\n// PausableToken : StandardToken, Pausable\n//\n// CAToken : MintableToken, PausableToken\n//\n// Crowdsale\n// PausableCrowdsale\n// BonusCrowdsale\n// TokensCappedCrowdsale\n// FinalizableCrowdsale\n//\n// CATCrowdsale\n//\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  function Destructible() public payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/**\n* @dev Pre main Bitcalve CAT token ERC20 contract\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n*/\ncontract CAToken is MintableToken, PausableToken {\n    \n    // Metadata\n    string public constant symbol = \"CAT\";\n    string public constant name = \"BitClave - Consumer Activity Token\";\n    uint8 public constant decimals = 18;\n    string public constant version = \"2.0\";\n\n    /**\n    * @dev Override MintableTokenn.finishMinting() to add canMint modifier\n    */\n    function finishMinting() onlyOwner canMint public returns(bool) {\n        return super.finishMinting();\n    }\n\n}\n\n/**\n* @dev Main Bitcalve PreCAT token ERC20 contract\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n*/\ncontract PreCAToken is CAToken, Destructible {\n\n    // Metadata\n    string public constant symbol = \"CAT\";\n    string public constant name = \"BitClave - Consumer Activity Token\";\n    uint8 public constant decimals = 18;\n    string public constant version = \"1.1\";\n\n    // Overrided destructor\n    function destroy() public onlyOwner {\n        require(mintingFinished);\n        super.destroy();\n    }\n\n    // Overrided destructor companion\n    function destroyAndSend(address _recipient) public onlyOwner {\n        require(mintingFinished);\n        super.destroyAndSend(_recipient);\n    }\n\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MintableToken public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_wallet != 0x0);\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new MintableToken();\n  }\n\n\n  // fallback function can be used to buy tokens\n  function () public payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    return now > endTime;\n  }\n\n\n}\n\n/**\n* @dev Parent crowdsale contract extended with support for pausable crowdsale, meaning crowdsale can be paused by owner at any time\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n* \n* While the contract is in paused state, the contributions will be rejected\n* \n*/\ncontract PausableCrowdsale is Crowdsale, Pausable {\n\n    function PausableCrowdsale(bool _paused) public {\n        if (_paused) {\n            pause();\n        }\n    }\n\n    // overriding Crowdsale#validPurchase to add extra paused logic\n    // @return true if investors can buy at the moment\n    function validPurchase() internal constant returns(bool) {\n        return super.validPurchase() && !paused;\n    }\n\n}\n\n/**\n* @dev Parent crowdsale contract with support for time-based and amount based bonuses \n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n* \n*/\ncontract BonusCrowdsale is Crowdsale, Ownable {\n\n    // Constants\n    // The following will be populated by main crowdsale contract\n    uint32[] public BONUS_TIMES;\n    uint32[] public BONUS_TIMES_VALUES;\n    uint32[] public BONUS_AMOUNTS;\n    uint32[] public BONUS_AMOUNTS_VALUES;\n    uint public constant BONUS_COEFF = 1000; // Values should be 10x percents, value 1000 = 100%\n    \n    // Members\n    uint public tokenPriceInCents;\n\n    /**\n    * @dev Contructor\n    * @param _tokenPriceInCents token price in USD cents. The price is fixed\n    */\n    function BonusCrowdsale(uint256 _tokenPriceInCents) public {\n        tokenPriceInCents = _tokenPriceInCents;\n    }\n\n    /**\n    * @dev Retrieve length of bonuses by time array\n    * @return Bonuses by time array length\n    */\n    function bonusesForTimesCount() public constant returns(uint) {\n        return BONUS_TIMES.length;\n    }\n\n    /**\n    * @dev Sets bonuses for time\n    */\n    function setBonusesForTimes(uint32[] times, uint32[] values) public onlyOwner {\n        require(times.length == values.length);\n        for (uint i = 0; i + 1 < times.length; i++) {\n            require(times[i] < times[i+1]);\n        }\n\n        BONUS_TIMES = times;\n        BONUS_TIMES_VALUES = values;\n    }\n\n    /**\n    * @dev Retrieve length of bonuses by amounts array\n    * @return Bonuses by amounts array length\n    */\n    function bonusesForAmountsCount() public constant returns(uint) {\n        return BONUS_AMOUNTS.length;\n    }\n\n    /**\n    * @dev Sets bonuses for USD amounts\n    */\n    function setBonusesForAmounts(uint32[] amounts, uint32[] values) public onlyOwner {\n        require(amounts.length == values.length);\n        for (uint i = 0; i + 1 < amounts.length; i++) {\n            require(amounts[i] > amounts[i+1]);\n        }\n\n        BONUS_AMOUNTS = amounts;\n        BONUS_AMOUNTS_VALUES = values;\n    }\n\n    /**\n    * @dev Overrided buyTokens method of parent Crowdsale contract  to provide bonus by changing and restoring rate variable\n    * @param beneficiary walelt of investor to receive tokens\n    */\n    function buyTokens(address beneficiary) public payable {\n        // Compute usd amount = wei * catsInEth * usdcentsInCat / usdcentsPerUsd / weisPerEth\n        uint256 usdValue = msg.value.mul(rate).mul(tokenPriceInCents).div(100).div(1 ether); \n        \n        // Compute time and amount bonus\n        uint256 bonus = computeBonus(usdValue);\n\n        // Apply bonus by adjusting and restoring rate member\n        uint256 oldRate = rate;\n        rate = rate.mul(BONUS_COEFF.add(bonus)).div(BONUS_COEFF);\n        super.buyTokens(beneficiary);\n        rate = oldRate;\n    }\n\n    /**\n    * @dev Computes overall bonus based on time of contribution and amount of contribution. \n    * The total bonus is the sum of bonus by time and bonus by amount\n    * @return bonus percentage scaled by 10\n    */\n    function computeBonus(uint256 usdValue) public constant returns(uint256) {\n        return computeAmountBonus(usdValue).add(computeTimeBonus());\n    }\n\n    /**\n    * @dev Computes bonus based on time of contribution relative to the beginning of crowdsale\n    * @return bonus percentage scaled by 10\n    */\n    function computeTimeBonus() public constant returns(uint256) {\n        require(now >= startTime);\n\n        for (uint i = 0; i < BONUS_TIMES.length; i++) {\n            if (now.sub(startTime) <= BONUS_TIMES[i]) {\n                return BONUS_TIMES_VALUES[i];\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n    * @dev Computes bonus based on amount of contribution\n    * @return bonus percentage scaled by 10\n    */\n    function computeAmountBonus(uint256 usdValue) public constant returns(uint256) {\n        for (uint i = 0; i < BONUS_AMOUNTS.length; i++) {\n            if (usdValue >= BONUS_AMOUNTS[i]) {\n                return BONUS_AMOUNTS_VALUES[i];\n            }\n        }\n\n        return 0;\n    }\n\n}\n\n\n\n/**\n* @dev Parent crowdsale contract is extended with support for cap in tokens\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n* \n*/\ncontract TokensCappedCrowdsale is Crowdsale {\n\n    uint256 public tokensCap;\n\n    function TokensCappedCrowdsale(uint256 _tokensCap) public {\n        tokensCap = _tokensCap;\n    }\n\n    // overriding Crowdsale#validPurchase to add extra tokens cap logic\n    // @return true if investors can buy at the moment\n    function validPurchase() internal constant returns(bool) {\n        uint256 tokens = token.totalSupply().add(msg.value.mul(rate));\n        bool withinCap = tokens <= tokensCap;\n        return super.validPurchase() && withinCap;\n    }\n\n    // overriding Crowdsale#hasEnded to add tokens cap logic\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns(bool) {\n        bool capReached = token.totalSupply() >= tokensCap;\n        return super.hasEnded() || capReached;\n    }\n\n}\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasEnded());\n\n    finalization();\n    Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n    isFinalized = isFinalized;\n  }\n}\n\n\n   /**\n   * @dev Main BitCalve Crowdsale contract. \n   * Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n   * \n   */\ncontract CATCrowdsale is FinalizableCrowdsale, TokensCappedCrowdsale(CATCrowdsale.CAP), PausableCrowdsale(true), BonusCrowdsale(CATCrowdsale.TOKEN_USDCENT_PRICE) {\n\n    // Constants\n    uint256 public constant DECIMALS = 18;\n    uint256 public constant CAP = 2 * (10**9) * (10**DECIMALS);              // 2B CAT\n    uint256 public constant BITCLAVE_AMOUNT = 1 * (10**9) * (10**DECIMALS);  // 1B CAT\n    uint256 public constant TOKEN_USDCENT_PRICE = 10;                        // $0.10\n\n    // Variables\n    address public remainingTokensWallet;\n    address public presaleWallet;\n\n    /**\n    * @dev Sets CAT to Ether rate. Will be called multiple times durign the crowdsale to adjsut the rate\n    * since CAT cost is fixed in USD, but USD/ETH rate is changing\n    * @param _rate defines CAT/ETH rate: 1 ETH = _rate CATs\n    */\n    function setRate(uint256 _rate) external onlyOwner {\n        require(_rate != 0x0);\n        rate = _rate;\n        RateChange(_rate);\n    }\n\n    /**\n    * @dev Allows to adjust the crowdsale end time\n    */\n    function setEndTime(uint256 _endTime) external onlyOwner {\n        require(!isFinalized);\n        require(_endTime >= startTime);\n        require(_endTime >= now);\n        endTime = _endTime;\n    }\n\n    /**\n    * @dev Sets the wallet to forward ETH collected funds\n    */\n    function setWallet(address _wallet) external onlyOwner {\n        require(_wallet != 0x0);\n        wallet = _wallet;\n    }\n\n    /**\n    * @dev Sets the wallet to hold unsold tokens at the end of ICO\n    */\n    function setRemainingTokensWallet(address _remainingTokensWallet) external onlyOwner {\n        require(_remainingTokensWallet != 0x0);\n        remainingTokensWallet = _remainingTokensWallet;\n    }\n\n    // Events\n    event RateChange(uint256 rate);\n\n    /**\n    * @dev Contructor\n    * @param _startTime startTime of crowdsale\n    * @param _endTime endTime of crowdsale\n    * @param _rate CAT / ETH rate\n    * @param _wallet wallet to forward the collected funds\n    * @param _remainingTokensWallet wallet to hold the unsold tokens\n    * @param _bitClaveWallet wallet to hold the initial 1B tokens of BitClave\n    */\n    function CATCrowdsale(\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _rate,\n        address _wallet,\n        address _remainingTokensWallet,\n        address _bitClaveWallet\n    ) public\n        Crowdsale(_startTime, _endTime, _rate, _wallet)\n    {\n        remainingTokensWallet = _remainingTokensWallet;\n        presaleWallet = this;\n\n        // allocate tokens to BitClave\n        mintTokens(_bitClaveWallet, BITCLAVE_AMOUNT);\n    }\n\n    // Overrided methods\n\n    /**\n    * @dev Creates token contract for ICO\n    * @return ERC20 contract associated with the crowdsale\n    */\n    function createTokenContract() internal returns(MintableToken) {\n        PreCAToken token = new PreCAToken();\n        token.pause();\n        return token;\n    }\n\n    /**\n    * @dev Finalizes the crowdsale\n    */\n    function finalization() internal {\n        super.finalization();\n\n        // Mint tokens up to CAP\n        if (token.totalSupply() < tokensCap) {\n            uint tokens = tokensCap.sub(token.totalSupply());\n            token.mint(remainingTokensWallet, tokens);\n        }\n\n        // disable minting of CATs\n        token.finishMinting();\n\n        // take onwership over CAToken contract\n        token.transferOwnership(owner);\n    }\n\n    // Owner methods\n\n    /**\n    * @dev Helper to Pause CAToken\n    */\n    function pauseTokens() public onlyOwner {\n        PreCAToken(token).pause();\n    }\n\n    /**\n    * @dev Helper to UnPause CAToken\n    */\n    function unpauseTokens() public onlyOwner {\n        PreCAToken(token).unpause();\n    }\n\n    /**\n    * @dev Allocates tokens from preSale to a special wallet. Called once as part of crowdsale setup\n    */\n    function mintPresaleTokens(uint256 tokens) public onlyOwner {\n        mintTokens(presaleWallet, tokens);\n        presaleWallet = 0;\n    }\n\n    /**\n    * @dev Transfer presaled tokens even on paused token contract\n    */\n    function transferPresaleTokens(address destination, uint256 amount) public onlyOwner {\n        unpauseTokens();\n        token.transfer(destination, amount);\n        pauseTokens();\n    }\n\n    // \n    /**\n    * @dev Allocates tokens for investors that contributed from website. These include\n    * whitelisted investors and investors paying with BTC/QTUM/LTC\n    */\n    function mintTokens(address beneficiary, uint256 tokens) public onlyOwner {\n        require(beneficiary != 0x0);\n        require(tokens > 0);\n        require(now <= endTime);                               // Crowdsale (without startTime check)\n        require(!isFinalized);                                 // FinalizableCrowdsale\n        require(token.totalSupply().add(tokens) <= tokensCap); // TokensCappedCrowdsale\n        \n        token.mint(beneficiary, tokens);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"tokensCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_remainingTokensWallet\",\"type\":\"address\"}],\"name\":\"setRemainingTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_AMOUNTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"times\",\"type\":\"uint32[]\"},{\"name\":\"values\",\"type\":\"uint32[]\"}],\"name\":\"setBonusesForTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_AMOUNTS_VALUES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesForTimesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_USDCENT_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesForAmountsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_TIMES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"computeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"computeTimeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"computeAmountBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint32[]\"},{\"name\":\"values\",\"type\":\"uint32[]\"}],\"name\":\"setBonusesForAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BITCLAVE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_COEFF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_TIMES_VALUES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_remainingTokensWallet\",\"type\":\"address\"},{\"name\":\"_bitClaveWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]",
  "bytecode": "60606040526006805460a060020a60ff02191690556008805460ff1916905534156200002a57600080fd5b60405160c08062003c0e8339810160405280805191906020018051919060200180519190602001805191906020018051919060200180519150600a905060016b06765c793fa10079d000000088888888428410156200008857600080fd5b838310156200009657600080fd5b60008211620000a457600080fd5b600160a060020a0381161515620000ba57600080fd5b620000d2640100000000620018c2620001a982021704565b60008054600160a060020a0319908116600160a060020a03938416179091556001959095556002939093556004919091556003805484169183169190911790556006805490921633909116179055600755801562000142576200014264010000000062000d156200024182021704565b50600d55600e8054600160a060020a03808516600160a060020a031992831617909255600f805430909316929091169190911790556200019d816b033b2e3c9fd0803ce8000000640100000000620010d2620002a982021704565b50505050505062000490565b600080620001b66200047f565b604051809103906000f0801515620001cd57600080fd5b905080600160a060020a0316638456cb596040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15156200022657600080fd5b6102c65a03f115156200023857600080fd5b50919392505050565b60065433600160a060020a039081169116146200025d57600080fd5b60085460ff16156200026e57600080fd5b6008805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60065433600160a060020a03908116911614620002c557600080fd5b600160a060020a0382161515620002db57600080fd5b60008111620002e957600080fd5b600254421115620002f957600080fd5b60065474010000000000000000000000000000000000000000900460ff16156200032257600080fd5b60075460008054620003c0918491600160a060020a0316906318160ddd90604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200038f57600080fd5b6102c65a03f11515620003a157600080fd5b5050506040518051919050640100000000620013266200046882021704565b1115620003cc57600080fd5b60008054600160a060020a0316906340c10f199084908490604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200044857600080fd5b6102c65a03f115156200045a57600080fd5b505050604051805150505050565b6000828201838110156200047857fe5b9392505050565b604051610efb8062002d1383390190565b61287380620004a06000396000f3006060604052600436106102005763ffffffff60e060020a600035041663085ceb30811461020b578063143fb46d1461023057806319a1f5921461024f5780631d1eda5e1461027e5780631df0187b1461030d5780631e05e0c8146103235780631ed77dc8146103365780632c4e722e146103655780632e0f2625146103785780633197cbb61461038b57806334fcf4371461039e5780633f4ba83a146103b45780634042b66f146103c7578063416da702146103da5780634bb278f3146103ed578063521eb2731461040057806353da0c7e146104135780635750abfa146104265780635ac5f82c1461043c5780635c975abb14610452578063737aa5a01461047957806377c8d5a01461048c57806378e979251461049f578063816273f6146104b2578063835f6775146104c85780638456cb59146105575780638d4e40831461056a5780638da5cb5b1461057d5780638db8053b146105905780639b03a211146105a6578063a417357c146105c8578063b2a780e4146105db578063c7a1f221146105ee578063ccb98ffc14610601578063de0b5af214610617578063deaa59df1461062a578063e0f74cde14610649578063e5e231dd1461065f578063ec81b48314610672578063ec8ac4d814610685578063ecb70fb714610699578063f0dda65c146106ac578063f2fde38b146106ce578063fc0c546a146106ed575b61020933610700565b005b341561021657600080fd5b61021e610798565b60405190815260200160405180910390f35b341561023b57600080fd5b610209600160a060020a036004351661079e565b341561025a57600080fd5b6102656004356107fd565b60405163ffffffff909116815260200160405180910390f35b341561028957600080fd5b61020960046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061083595505050505050565b341561031857600080fd5b6102656004356108eb565b341561032e57600080fd5b61021e6108f9565b341561034157600080fd5b610349610900565b604051600160a060020a03909116815260200160405180910390f35b341561037057600080fd5b61021e61090f565b341561038357600080fd5b61021e610915565b341561039657600080fd5b61021e61091a565b34156103a957600080fd5b610209600435610920565b34156103bf57600080fd5b610209610982565b34156103d257600080fd5b61021e6109e6565b34156103e557600080fd5b61021e6109ec565b34156103f857600080fd5b6102096109f1565b341561040b57600080fd5b610349610a90565b341561041e57600080fd5b61021e610a9f565b341561043157600080fd5b610265600435610aa5565b341561044757600080fd5b61021e600435610ab3565b341561045d57600080fd5b610465610adb565b604051901515815260200160405180910390f35b341561048457600080fd5b610349610ae4565b341561049757600080fd5b61021e610af3565b34156104aa57600080fd5b61021e610bbb565b34156104bd57600080fd5b61021e600435610bc1565b34156104d357600080fd5b610209600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610c6595505050505050565b341561056257600080fd5b610209610d15565b341561057557600080fd5b610465610d7b565b341561058857600080fd5b610349610d8b565b341561059b57600080fd5b610209600435610d9a565b34156105b157600080fd5b610209600160a060020a0360043516602435610deb565b34156105d357600080fd5b610209610e98565b34156105e657600080fd5b61021e610f08565b34156105f957600080fd5b61021e610f18565b341561060c57600080fd5b610209600435610f1e565b341561062257600080fd5b61021e610f71565b341561063557600080fd5b610209600160a060020a0360043516610f77565b341561065457600080fd5b610265600435610fd6565b341561066a57600080fd5b610209610fe4565b341561067d57600080fd5b61021e61103e565b610209600160a060020a0360043516610700565b34156106a457600080fd5b61046561104e565b34156106b757600080fd5b610209600160a060020a03600435166024356110d2565b34156106d957600080fd5b610209600160a060020a036004351661123a565b34156106f857600080fd5b6103496112d5565b6000806000610749670de0b6b3a764000061073d606461073d600d54610731600454346112e490919063ffffffff16565b9063ffffffff6112e416565b9063ffffffff61130f16565b925061075483610ab3565b60045490925090506107846103e861073d610775828663ffffffff61132616565b6004549063ffffffff6112e416565b60045561079084611335565b600455505050565b60075481565b60065433600160a060020a039081169116146107b957600080fd5b600160a060020a03811615156107ce57600080fd5b600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b80548290811061080b57fe5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b60065460009033600160a060020a0390811691161461085357600080fd5b815183511461086157600080fd5b5060005b82518160010110156108be5782816001018151811061088057fe5b9060200190602002015163ffffffff1683828151811061089c57fe5b9060200190602002015163ffffffff16106108b657600080fd5b600101610865565b60098380516108d19291602001906117fc565b50600a8280516108e59291602001906117fc565b50505050565b600c80548290811061080b57fe5b6009545b90565b600f54600160a060020a031681565b60045481565b601281565b60025481565b60065433600160a060020a0390811691161461093b57600080fd5b80151561094757600080fd5b60048190557f0b6eb270e68ec2b65cffce354325dcd6cb2449e0e8fec1184cd58da0c7b0344b8160405190815260200160405180910390a150565b60065433600160a060020a0390811691161461099d57600080fd5b60085460ff1615156109ae57600080fd5b6008805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055481565b600a81565b60065433600160a060020a03908116911614610a0c57600080fd5b60065460a060020a900460ff1615610a2357600080fd5b610a2b61104e565b1515610a3657600080fd5b610a3e611464565b7f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a16006805474ff0000000000000000000000000000000000000000191660a060020a179055565b600354600160a060020a031681565b600b5490565b600980548290811061080b57fe5b6000610ad5610ac0610af3565b610ac984610bc1565b9063ffffffff61132616565b92915050565b60085460ff1681565b600e54600160a060020a031681565b6000806001544210151515610b0757600080fd5b5060005b600954811015610bb2576009805482908110610b2357fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16610b64600154426116a690919063ffffffff16565b11610baa57600a805482908110610b7757fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff169150610bb7565b600101610b0b565b600091505b5090565b60015481565b6000805b600b54811015610c5a57600b805482908110610bdd57fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1683101515610c5257600c805482908110610c1f57fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff169150610c5f565b600101610bc5565b600091505b50919050565b60065460009033600160a060020a03908116911614610c8357600080fd5b8151835114610c9157600080fd5b5060005b8251816001011015610cee57828160010181518110610cb057fe5b9060200190602002015163ffffffff16838281518110610ccc57fe5b9060200190602002015163ffffffff1611610ce657600080fd5b600101610c95565b600b838051610d019291602001906117fc565b50600c8280516108e59291602001906117fc565b60065433600160a060020a03908116911614610d3057600080fd5b60085460ff1615610d4057600080fd5b6008805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60065460a060020a900460ff1681565b600654600160a060020a031681565b60065433600160a060020a03908116911614610db557600080fd5b600f54610dcb90600160a060020a0316826110d2565b50600f805473ffffffffffffffffffffffffffffffffffffffff19169055565b60065433600160a060020a03908116911614610e0657600080fd5b610e0e610e98565b60008054600160a060020a03169063a9059cbb90849084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e7057600080fd5b6102c65a03f11515610e8157600080fd5b5050506040518051905050610e94610fe4565b5050565b60065433600160a060020a03908116911614610eb357600080fd5b600054600160a060020a0316633f4ba83a6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515610ef257600080fd5b6102c65a03f11515610f0357600080fd5b505050565b6b033b2e3c9fd0803ce800000081565b600d5481565b60065433600160a060020a03908116911614610f3957600080fd5b60065460a060020a900460ff1615610f5057600080fd5b600154811015610f5f57600080fd5b42811015610f6c57600080fd5b600255565b6103e881565b60065433600160a060020a03908116911614610f9257600080fd5b600160a060020a0381161515610fa757600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a80548290811061080b57fe5b60065433600160a060020a03908116911614610fff57600080fd5b600054600160a060020a0316638456cb596040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515610ef257600080fd5b6b06765c793fa10079d000000081565b6007546000805490918291600160a060020a03166318160ddd83604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561109d57600080fd5b6102c65a03f115156110ae57600080fd5b50505060405180519050101590506110c46116b8565b806110cc5750805b91505090565b60065433600160a060020a039081169116146110ed57600080fd5b600160a060020a038216151561110257600080fd5b6000811161110f57600080fd5b60025442111561111e57600080fd5b60065460a060020a900460ff161561113557600080fd5b600754600080546111ae918491600160a060020a0316906318160ddd90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561118757600080fd5b6102c65a03f1151561119857600080fd5b505050604051805191905063ffffffff61132616565b11156111b957600080fd5b60008054600160a060020a0316906340c10f1990849084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561121b57600080fd5b6102c65a03f1151561122c57600080fd5b505050604051805150505050565b60065433600160a060020a0390811691161461125557600080fd5b600160a060020a038116151561126a57600080fd5b600654600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b600082820283158061130057508284828115156112fd57fe5b04145b151561130857fe5b9392505050565b600080828481151561131d57fe5b04949350505050565b60008282018381101561130857fe5b600080600160a060020a038316151561134d57600080fd5b6113556116c0565b151561136057600080fd5b60045434925061137790839063ffffffff6112e416565b60055490915061138d908363ffffffff61132616565b60055560008054600160a060020a0316906340c10f1990859084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113f257600080fd5b6102c65a03f1151561140357600080fd5b505050604051805190505082600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18848460405191825260208201526040908101905180910390a3610f036116de565b600061146e611714565b60075460008054600160a060020a0316906318160ddd90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156114ba57600080fd5b6102c65a03f115156114cb57600080fd5b5050506040518051905010156115da576000805461155391600160a060020a03909116906318160ddd90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561152a57600080fd5b6102c65a03f1151561153b57600080fd5b5050506040518051600754915063ffffffff6116a616565b60008054600e54929350600160a060020a03908116926340c10f199291169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156115be57600080fd5b6102c65a03f115156115cf57600080fd5b505050604051805150505b60008054600160a060020a031690637d64bcb490604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561162357600080fd5b6102c65a03f1151561163457600080fd5b50505060405180515050600054600654600160a060020a039182169163f2fde38b911660405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561169557600080fd5b6102c65a03f115156108e557600080fd5b6000828211156116b257fe5b50900390565b600254421190565b60006116ca611747565b80156116d9575060085460ff16155b905090565b600354600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561171257600080fd5b565b6006805474ff000000000000000000000000000000000000000019811660a060020a9182900460ff161515909102179055565b60008060006117ad611764600454346112e490919063ffffffff16565b60008054600160a060020a0316906318160ddd90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561118757600080fd5b915060075482111590506117bf6117cf565b80156117c85750805b9250505090565b600080600060015442101580156117e857506002544211155b9150503415158180156117c8575092915050565b8280548282559060005260206000209060070160089004810192821561189b5791602002820160005b8382111561186957835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611825565b80156118995782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611869565b505b50610bb7926108fd9250905b80821115610bb757805463ffffffff191681556001016118a7565b6000806118cd61193c565b604051809103906000f08015156118e357600080fd5b905080600160a060020a0316638456cb596040518163ffffffff1660e060020a028152600401600060405180830381600087803b151561192257600080fd5b6102c65a03f1151561193357600080fd5b50919392505050565b604051610efb8061194d833901905600606060405260038054600160b060020a03191633600160a060020a0316179055610ecd8061002e6000396000f3006060604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012c57806306fdde0314610153578063095ea7b3146101dd57806318160ddd146101ff57806323b872dd14610224578063313ce5671461024c5780633f4ba83a1461027557806340c10f191461028a57806354fd4d50146102ac5780635c975abb146102bf57806366188463146102d257806370a08231146102f45780637d64bcb41461031357806383197ef0146103265780638456cb59146103395780638da5cb5b1461034c57806395d89b411461037b578063a9059cbb1461038e578063d73dd623146103b0578063dd62ed3e146103d2578063f2fde38b146103f7578063f5074f4114610416575b600080fd5b341561013757600080fd5b61013f610435565b604051901515815260200160405180910390f35b341561015e57600080fd5b610166610445565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a257808201518382015260200161018a565b50505050905090810190601f1680156101cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e857600080fd5b61013f600160a060020a03600435166024356104a5565b341561020a57600080fd5b6102126104d0565b60405190815260200160405180910390f35b341561022f57600080fd5b61013f600160a060020a03600435811690602435166044356104d6565b341561025757600080fd5b61025f610503565b60405160ff909116815260200160405180910390f35b341561028057600080fd5b610288610508565b005b341561029557600080fd5b61013f600160a060020a0360043516602435610588565b34156102b757600080fd5b610166610695565b34156102ca57600080fd5b61013f6106cc565b34156102dd57600080fd5b61013f600160a060020a03600435166024356106dc565b34156102ff57600080fd5b610212600160a060020a0360043516610700565b341561031e57600080fd5b61013f61071b565b341561033157600080fd5b61028861075d565b341561034457600080fd5b61028861079a565b341561035757600080fd5b61035f61081f565b604051600160a060020a03909116815260200160405180910390f35b341561038657600080fd5b61016661082e565b341561039957600080fd5b61013f600160a060020a0360043516602435610865565b34156103bb57600080fd5b61013f600160a060020a0360043516602435610889565b34156103dd57600080fd5b610212600160a060020a03600435811690602435166108ad565b341561040257600080fd5b610288600160a060020a03600435166108d8565b341561042157600080fd5b610288600160a060020a0360043516610973565b60035460a060020a900460ff1681565b606060405190810160405280602281526020017f426974436c617665202d20436f6e73756d657220416374697669747920546f6b81526020017f656e00000000000000000000000000000000000000000000000000000000000081525081565b60035460009060a860020a900460ff16156104bf57600080fd5b6104c983836109b2565b9392505050565b60005481565b60035460009060a860020a900460ff16156104f057600080fd5b6104fb848484610a1e565b949350505050565b601281565b60035433600160a060020a0390811691161461052357600080fd5b60035460a860020a900460ff16151561053b57600080fd5b6003805475ff000000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60035460009033600160a060020a039081169116146105a657600080fd5b60035460a060020a900460ff16156105bd57600080fd5b6000546105d0908363ffffffff610b4816565b6000908155600160a060020a0384168152600160205260409020546105fb908363ffffffff610b4816565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b60408051908101604052600381527f312e310000000000000000000000000000000000000000000000000000000000602082015281565b60035460a860020a900460ff1681565b60035460009060a860020a900460ff16156106f657600080fd5b6104c98383610b57565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461073957600080fd5b60035460a060020a900460ff161561075057600080fd5b610758610c51565b905090565b60035433600160a060020a0390811691161461077857600080fd5b60035460a060020a900460ff16151561079057600080fd5b610798610cc5565b565b60035433600160a060020a039081169116146107b557600080fd5b60035460a860020a900460ff16156107cc57600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60408051908101604052600381527f4341540000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a860020a900460ff161561087f57600080fd5b6104c98383610cee565b60035460009060a860020a900460ff16156108a357600080fd5b6104c98383610dc4565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146108f357600080fd5b600160a060020a038116151561090857600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035433600160a060020a0390811691161461098e57600080fd5b60035460a060020a900460ff1615156109a657600080fd5b6109af81610e68565b50565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600080600160a060020a0384161515610a3657600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610a7c908463ffffffff610e8f16565b600160a060020a038087166000908152600160205260408082209390935590861681522054610ab1908463ffffffff610b4816565b600160a060020a038516600090815260016020526040902055610ada818463ffffffff610e8f16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b6000828201838110156104c957fe5b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610bb457600160a060020a033381166000908152600260209081526040808320938816835292905290812055610beb565b610bc4818463ffffffff610e8f16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60035460009033600160a060020a03908116911614610c6f57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b60035433600160a060020a03908116911614610ce057600080fd5b600354600160a060020a0316ff5b6000600160a060020a0383161515610d0557600080fd5b600160a060020a033316600090815260016020526040902054610d2e908363ffffffff610e8f16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610d63908363ffffffff610b4816565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610dfc908363ffffffff610b4816565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b60035433600160a060020a03908116911614610e8357600080fd5b80600160a060020a0316ff5b600082821115610e9b57fe5b509003905600a165627a7a7230582007a8687b0129ce616175a75e2cafdbe906783699e195b214b04f2bd6765b98cf0029a165627a7a72305820282ad06cbe4ff3852bb5afb7696febc7318437763fab7b13eb97a1696d67fc4e0029606060405260038054600160b060020a03191633600160a060020a0316179055610ecd8061002e6000396000f3006060604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012c57806306fdde0314610153578063095ea7b3146101dd57806318160ddd146101ff57806323b872dd14610224578063313ce5671461024c5780633f4ba83a1461027557806340c10f191461028a57806354fd4d50146102ac5780635c975abb146102bf57806366188463146102d257806370a08231146102f45780637d64bcb41461031357806383197ef0146103265780638456cb59146103395780638da5cb5b1461034c57806395d89b411461037b578063a9059cbb1461038e578063d73dd623146103b0578063dd62ed3e146103d2578063f2fde38b146103f7578063f5074f4114610416575b600080fd5b341561013757600080fd5b61013f610435565b604051901515815260200160405180910390f35b341561015e57600080fd5b610166610445565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a257808201518382015260200161018a565b50505050905090810190601f1680156101cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e857600080fd5b61013f600160a060020a03600435166024356104a5565b341561020a57600080fd5b6102126104d0565b60405190815260200160405180910390f35b341561022f57600080fd5b61013f600160a060020a03600435811690602435166044356104d6565b341561025757600080fd5b61025f610503565b60405160ff909116815260200160405180910390f35b341561028057600080fd5b610288610508565b005b341561029557600080fd5b61013f600160a060020a0360043516602435610588565b34156102b757600080fd5b610166610695565b34156102ca57600080fd5b61013f6106cc565b34156102dd57600080fd5b61013f600160a060020a03600435166024356106dc565b34156102ff57600080fd5b610212600160a060020a0360043516610700565b341561031e57600080fd5b61013f61071b565b341561033157600080fd5b61028861075d565b341561034457600080fd5b61028861079a565b341561035757600080fd5b61035f61081f565b604051600160a060020a03909116815260200160405180910390f35b341561038657600080fd5b61016661082e565b341561039957600080fd5b61013f600160a060020a0360043516602435610865565b34156103bb57600080fd5b61013f600160a060020a0360043516602435610889565b34156103dd57600080fd5b610212600160a060020a03600435811690602435166108ad565b341561040257600080fd5b610288600160a060020a03600435166108d8565b341561042157600080fd5b610288600160a060020a0360043516610973565b60035460a060020a900460ff1681565b606060405190810160405280602281526020017f426974436c617665202d20436f6e73756d657220416374697669747920546f6b81526020017f656e00000000000000000000000000000000000000000000000000000000000081525081565b60035460009060a860020a900460ff16156104bf57600080fd5b6104c983836109b2565b9392505050565b60005481565b60035460009060a860020a900460ff16156104f057600080fd5b6104fb848484610a1e565b949350505050565b601281565b60035433600160a060020a0390811691161461052357600080fd5b60035460a860020a900460ff16151561053b57600080fd5b6003805475ff000000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60035460009033600160a060020a039081169116146105a657600080fd5b60035460a060020a900460ff16156105bd57600080fd5b6000546105d0908363ffffffff610b4816565b6000908155600160a060020a0384168152600160205260409020546105fb908363ffffffff610b4816565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b60408051908101604052600381527f312e310000000000000000000000000000000000000000000000000000000000602082015281565b60035460a860020a900460ff1681565b60035460009060a860020a900460ff16156106f657600080fd5b6104c98383610b57565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461073957600080fd5b60035460a060020a900460ff161561075057600080fd5b610758610c51565b905090565b60035433600160a060020a0390811691161461077857600080fd5b60035460a060020a900460ff16151561079057600080fd5b610798610cc5565b565b60035433600160a060020a039081169116146107b557600080fd5b60035460a860020a900460ff16156107cc57600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60408051908101604052600381527f4341540000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a860020a900460ff161561087f57600080fd5b6104c98383610cee565b60035460009060a860020a900460ff16156108a357600080fd5b6104c98383610dc4565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146108f357600080fd5b600160a060020a038116151561090857600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035433600160a060020a0390811691161461098e57600080fd5b60035460a060020a900460ff1615156109a657600080fd5b6109af81610e68565b50565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600080600160a060020a0384161515610a3657600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610a7c908463ffffffff610e8f16565b600160a060020a038087166000908152600160205260408082209390935590861681522054610ab1908463ffffffff610b4816565b600160a060020a038516600090815260016020526040902055610ada818463ffffffff610e8f16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b6000828201838110156104c957fe5b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610bb457600160a060020a033381166000908152600260209081526040808320938816835292905290812055610beb565b610bc4818463ffffffff610e8f16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60035460009033600160a060020a03908116911614610c6f57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b60035433600160a060020a03908116911614610ce057600080fd5b600354600160a060020a0316ff5b6000600160a060020a0383161515610d0557600080fd5b600160a060020a033316600090815260016020526040902054610d2e908363ffffffff610e8f16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610d63908363ffffffff610b4816565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610dfc908363ffffffff610b4816565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b60035433600160a060020a03908116911614610e8357600080fd5b80600160a060020a0316ff5b600082821115610e9b57fe5b509003905600a165627a7a7230582007a8687b0129ce616175a75e2cafdbe906783699e195b214b04f2bd6765b98cf0029000000000000000000000000000000000000000000000000000000005a1ea140000000000000000000000000000000000000000000000000000000005a44dcc00000000000000000000000000000000000000000000000000000000000000e4c000000000000000000000000f96ecefe164131df465a959e5440417615462ab5000000000000000000000000049bcba70672076d038009bfe11c766f24542790000000000000000000000000f41cd44a43b1a548a804d7bc24bbafd3803424ad",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005a1ea140000000000000000000000000000000000000000000000000000000005a44dcc00000000000000000000000000000000000000000000000000000000000000e4c000000000000000000000000f96ecefe164131df465a959e5440417615462ab5000000000000000000000000049bcba70672076d038009bfe11c766f24542790000000000000000000000000f41cd44a43b1a548a804d7bc24bbafd3803424ad"
}