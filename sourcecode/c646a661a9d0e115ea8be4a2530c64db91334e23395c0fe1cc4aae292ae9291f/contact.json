{
  "address": "0xb6A0a7fAA6CAB182Cb0DBaf9161605e4219ebc42",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VCNToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\n        if (a == 0) {\n            return 0;\n\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n     \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        \n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\ninterface IERC20 {\n\n    function transfer(address to, uint256 value) external returns (bool);\n    //function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    //function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract VCNToken is IERC20 {\n\n    using SafeMath for uint256;\n    mapping (address => uint256) private _balances;\n    mapping (address => TimeLock[]) private _timeLocks;\n    uint256 private _totalSupply;\n    address private _owner;\n    \n    \n    \n    string public constant name = \"VoltChainNetwork\";\n    \n    string public constant symbol = \"VCN\";\n    uint8 public constant decimals = 18; \n    \n    \n    struct TimeLock{\n        uint256 blockTime;\n        uint256 blockAmount;\n    }\n    \n    constructor(uint256 totalSupply) public{\n        _totalSupply = totalSupply;\n        _owner = msg.sender;\n        _balances[_owner] = _totalSupply;\n    }\n    \n    function getTimeStamp() public view returns(uint256) {\n        return block.timestamp;\n    }\n    \n    \n    function timeLock(address addr, uint256 amount , uint16 lockMonth) public returns(bool){\n        require(msg.sender == _owner);\n        require(lockMonth > 0);\n        require(amount <= getFreeAmount(addr));\n    \n        TimeLock memory timeLockTemp;\n        timeLockTemp.blockTime = block.timestamp + 86400 * 30 * lockMonth;\n        //timeLockTemp.blockTime = block.timestamp + 60 * lockMonth;\n        timeLockTemp.blockAmount = amount;\n        _timeLocks[addr].push(timeLockTemp);\n        \n        return true;\n    }\n    \n    function crowdSale(address to, uint256 amount,  uint16 lockMonth) public returns(bool){\n        require(msg.sender == _owner);\n        \n        _transfer(_owner, to, amount);\n        \n        if(lockMonth > 0){\n            timeLock(to, amount, lockMonth);\n        }\n        \n        return true;\n    }\n    \n    function releaseLock(address owner, uint256 amount) public returns(bool){\n        require(msg.sender == _owner);    \n        \n        uint minIdx = 0;\n        uint256 minTime = 0;\n        uint arrayLength = _timeLocks[owner].length;\n        for (uint i=0; i<arrayLength; i++) {\n            if(block.timestamp < _timeLocks[owner][i].blockTime && _timeLocks[owner][i].blockAmount > 0){\n                if(minTime == 0 || minTime > _timeLocks[owner][i].blockTime){\n                    minIdx = i;\n                    minTime = _timeLocks[owner][i].blockTime;\n                }\n            }\n        }\n        \n        if(minTime >= 0){\n            if(amount > _timeLocks[owner][minIdx].blockAmount){\n                uint256 remain = amount - _timeLocks[owner][minIdx].blockAmount;\n                _timeLocks[owner][minIdx].blockAmount = 0;\n                releaseLock(owner, remain);\n            }else{\n                _timeLocks[owner][minIdx].blockAmount -= amount;\n            }\n            \n        }\n        \n        return true;\n    }\n    \n    \n    function getFreeAmount(address owner) public view returns(uint256){\n        return(balanceOf(owner) - getLockAmount(owner));\n    }\n    \n    function getLockAmount(address owner) public view returns(uint256){\n        uint256 result = 0;\n        uint arrayLength = _timeLocks[owner].length;\n        for (uint i=0; i<arrayLength; i++) {\n            if(block.timestamp < _timeLocks[owner][i].blockTime){\n                result += _timeLocks[owner][i].blockAmount;\n            }\n        }\n            \n        return(result);\n    }\n    \n\n    /**\n     * @dev Total number of tokens in existence\n     */\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        return true;\n    }\n\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        require(from == msg.sender);\n        \n        uint256 available = balanceOf(from) - getLockAmount(from);\n        require(available >= value, \"not enough token\");\n        \n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n\n\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        require(account == msg.sender);\n        \n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n    }\n    \n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"lockMonth\",\"type\":\"uint16\"}],\"name\":\"crowdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"lockMonth\",\"type\":\"uint16\"}],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getFreeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516020806112b38339810180604052602081101561003057600080fd5b81019080805190602001909291905050508060028190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600254600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506111b3806101006000396000f3fe6080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca57806318160ddd1461015a57806323b872dd14610185578063313ce56714610218578063399d64651461024957806370a08231146102ae5780637d3b83f31461031357806395d89b4114610386578063a8183c4f14610416578063a9059cbb14610497578063aa8e98b61461050a578063da235b221461058b578063de1d15ed146105b6575b600080fd5b3480156100d657600080fd5b506100df61061b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b5061016f610654565b6040518082815260200191505060405180910390f35b34801561019157600080fd5b506101fe600480360360608110156101a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061065e565b604051808215151515815260200191505060405180910390f35b34801561022457600080fd5b5061022d610676565b604051808260ff1660ff16815260200191505060405180910390f35b34801561025557600080fd5b506102986004803603602081101561026c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061067b565b6040518082815260200191505060405180910390f35b3480156102ba57600080fd5b506102fd600480360360208110156102d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107b7565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b5061036c6004803603604081101561033657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107ff565b604051808215151515815260200191505060405180910390f35b34801561039257600080fd5b5061039b610c2e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103db5780820151818401526020810190506103c0565b50505050905090810190601f1680156104085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042257600080fd5b5061047d6004803603606081101561043957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803561ffff169060200190929190505050610c67565b604051808215151515815260200191505060405180910390f35b3480156104a357600080fd5b506104f0600480360360408110156104ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d17565b604051808215151515815260200191505060405180910390f35b34801561051657600080fd5b506105716004803603606081101561052d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803561ffff169060200190929190505050610d2e565b604051808215151515815260200191505060405180910390f35b34801561059757600080fd5b506105a0610e70565b6040518082815260200191505060405180910390f35b3480156105c257600080fd5b50610605600480360360208110156105d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e78565b6040518082815260200191505060405180910390f35b6040805190810160405280601081526020017f566f6c74436861696e4e6574776f726b0000000000000000000000000000000081525081565b6000600254905090565b600061066b848484610e94565b600190509392505050565b601281565b600080600090506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008090505b818110156107ac57600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110151561072357fe5b90600052602060002090600202016000015442101561079f57600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110151561078857fe5b906000526020600020906002020160010154830192505b80806001019150506106cf565b508192505050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561085d57600080fd5b600080905060008090506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008090505b81811015610a6c57600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110151561090857fe5b9060005260206000209060020201600001544210801561098557506000600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561097157fe5b906000526020600020906002020160010154115b15610a5f5760008314806109f55750600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811015156109e057fe5b90600052602060002090600202016000015483115b15610a5e57809350600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481101515610a4957fe5b90600052602060002090600202016000015492505b5b80806001019150506108b4565b50600082101515610c2157600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515610ac357fe5b906000526020600020906002020160010154851115610bb4576000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515610b2a57fe5b906000526020600020906002020160010154860390506000600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002085815481101515610b8e57fe5b906000526020600020906002020160010181905550610bad87826107ff565b5050610c20565b84600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515610c0157fe5b9060005260206000209060020201600101600082825403925050819055505b5b6001935050505092915050565b6040805190810160405280600381526020017f56434e000000000000000000000000000000000000000000000000000000000081525081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cc557600080fd5b610cf2600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585610e94565b60008261ffff161115610d0c57610d0a848484610d2e565b505b600190509392505050565b6000610d24338484610e94565b6001905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d8c57600080fd5b60008261ffff16111515610d9f57600080fd5b610da884610e78565b8311151515610db657600080fd5b610dbe61116d565b8261ffff1662278d000262ffffff16420181600001818152505083816020018181525050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001015550505060019150509392505050565b600042905090565b6000610e838261067b565b610e8c836107b7565b039050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610ed057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515610f0a57600080fd5b6000610f158461067b565b610f1e856107b7565b039050818110151515610f99576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f75676820746f6b656e0000000000000000000000000000000081525060200191505060405180910390fd5b610fea826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461112a90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061107d826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114c90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b600082821115151561113b57600080fd5b600082840390508091505092915050565b600080828401905083811015151561116357600080fd5b8091505092915050565b60408051908101604052806000815260200160008152509056fea165627a7a72305820cbcb085270b2a5aa1544bf5028978e563d247770055dbac0e721107d06c1efcf0029000000000000000000000000000000000000000006765c793fa10079d0000000",
  "constructorArguments": "000000000000000000000000000000000000000006765c793fa10079d0000000"
}