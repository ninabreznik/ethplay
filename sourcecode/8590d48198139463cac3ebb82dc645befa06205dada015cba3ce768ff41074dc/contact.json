{
  "address": "0x9c0c41DEAE93535A5CE08ec42F60EF7172CE0b8a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LotteryData",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-15\n*/\n\npragma solidity ^0.5.4;\n\n/**\n    INSTRUCTION:\n    Send more then 0.01 ETH to one of Wallet Contract address\n    [wallet_0, wallet_1, wallet_2], after round end send to This contract 0 ETH\n    transaction and if you choise won, take your winnings.\n\n    DAPP:     http://smartlottery.game (mirror: http://smartlottery.clab)\n    BOT:      http://t.me/SmartLotteryGame_bot\n    LICENSE:  Under proprietary rights. All rights reserved.\n              Except <lib.SafeMath, cont.Ownable> under The MIT License (MIT)\n    AUTHOR:   http://t.me/pironmind\n    \n*/\n\nlibrary SafeMath {\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0);\n        uint256 c = _a / _b;\n        return c;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n        return c;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\ncontract Wallet is Ownable {\n    using SafeMath for uint256;\n\n    LotteryData public lotteryData;\n\n    uint256 public minPaymnent = 10**16;\n\n    function setMinPayment(uint256 value) public onlyOwner {\n        minPaymnent = value;\n    }\n\n    constructor() public {\n        lotteryData = LotteryData(msg.sender);\n    }\n\n    function() payable external {\n        require(msg.value >= minPaymnent);\n        lotteryData.participate(msg.sender, msg.value);\n    }\n\n    function finishDay() external returns(uint256) {\n        require(msg.sender == address(lotteryData));\n        uint256 balance = address(this).balance;\n        if (balance >= minPaymnent) {\n            lotteryData.getFunds.value(balance)();\n            return balance;\n        } else {\n            return 0;\n        }\n    }\n}\n\ncontract LotteryData is Ownable {\n    using SafeMath for uint;\n\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event WinnerWallet(address indexed wallet, uint256 bank);\n\n    Wallet public wallet_0 = new Wallet();\n    Wallet public wallet_1 = new Wallet();\n    Wallet public wallet_2 = new Wallet();\n\n    uint256 public finishTime;\n    uint256 constant roundTime = 86400;\n\n    uint internal dilemma;\n    uint internal max_participators = 100;\n    uint internal participators;\n    uint internal randNonce = 19;\n    uint internal winner;\n    uint internal winner_1;\n    uint internal winner_2;\n    uint256 internal fund;\n    uint256 internal commission;\n    uint256 internal totalBetsWithoutCommission;\n\n    mapping(uint => address) public wallets;\n    mapping(address => mapping (address => uint256)) public playersBets;\n    mapping(address => mapping (uint => address)) public players;\n    mapping(address => uint256) public totalBets;\n    mapping(address => uint) public totalPlayers;\n    mapping(address => uint256) private _deposits;\n\n    uint public games;\n\n    struct wins{\n        address winner;\n        uint256 time;\n    }\n\n    mapping(uint => wins) public gamesLog;\n\n    constructor() public {\n        wallets[0] = address(wallet_0);\n        wallets[1] = address(wallet_1);\n        wallets[2] = address(wallet_2);\n        finishTime = now.add(roundTime);\n    }\n\n    modifier validWallets() {\n        require(\n            msg.sender == address(wallet_0) ||\n            msg.sender == address(wallet_1) ||\n            msg.sender == address(wallet_2)\n        );\n        _;\n    }\n\n    function depositsOf(address payee) public view returns (uint256) {\n        return _deposits[payee];\n    }\n\n    function deposit(address payee, uint256 amount) internal {\n        _deposits[payee] = _deposits[payee].add(amount);\n        emit Deposited(payee, amount);\n    }\n\n    function getFunds() public payable validWallets {}\n\n    function lastWinner() public view returns(address) {\n        return gamesLog[games].winner;\n    }\n\n    function getRandomWallet() internal returns(uint) {\n        uint result = uint(keccak256(abi.encodePacked(now, randNonce, blockhash(block.number - 1)))) % 3;\n        randNonce = randNonce.add(result.add(2));\n        return result;\n    }\n\n    function _fundriser() internal returns(uint256) {\n        fund = fund.add(wallet_0.finishDay());\n        fund = fund.add(wallet_1.finishDay());\n        return fund.add(wallet_2.finishDay());\n    }\n\n    function _randomizer() internal returns(uint) {\n        // random choose one of three wallets\n        winner = getRandomWallet();\n        // check if this address had payments, if no solving it\n        if(totalPlayers[wallets[winner]] == 0) {\n            dilemma = uint(keccak256(abi.encodePacked(now, winner, blockhash(block.number - 1)))) % 2;\n            if(winner == 0) {\n                if(dilemma == 1) {\n                    winner_1 = 2; winner_2 = 1;\n                } else {\n                    winner_1 = 1; winner_2 = 2;\n                }\n            }\n            if(winner == 1) {\n                if(dilemma == 1) {\n                    winner_1 = 2; winner_2 = 0;\n                } else {\n                    winner_1 = 0; winner_2 = 2;\n                }\n            }\n            if(winner == 2) {\n                if(dilemma == 1) {\n                    winner_1 = 1; winner_2 = 0;\n                } else {\n                    winner_1 = 0; winner_2 = 1;\n                }\n            }\n            winner = (totalPlayers[wallets[winner_1]] == 0) ? winner_2 : winner_1;\n        }\n\n        return winner;\n    }\n\n    function _distribute() internal {\n        // calculate commission\n        commission = fund.mul(15).div(100);\n        totalBetsWithoutCommission = fund.sub(commission);\n        deposit(owner, commission);\n        // calculate and make deposits\n        for (uint i = 0; i < totalPlayers[wallets[winner]]; i++) {\n            uint percents = playersBets[wallets[winner]][players[wallets[winner]][i]].mul(10000).div(totalBets[wallets[winner]]);\n            deposit(players[wallets[winner]][i], totalBetsWithoutCommission.mul(percents).div(10000));\n        }\n    }\n\n    function _collector() internal {\n        fund = 0;\n        participators = 0;\n        totalBets[wallets[0]] = 0;\n        for (uint j = 0; j < 3; j++) {\n            for (uint k = 0; k < totalPlayers[wallets[j]]; k++) {\n                playersBets[wallets[j]][players[wallets[j]][k]] = 0;\n                players[wallets[j]][k] = address(0x0);\n            }\n            totalBets[wallets[j]] = 0;\n            totalPlayers[wallets[j]] = 0;\n        }\n    }\n\n    function _logger(address _winner, uint256 _fund) internal {\n        games = games + 1;\n        gamesLog[games].winner =_winner;\n        gamesLog[games].time = now;\n        emit WinnerWallet(_winner, _fund);\n    }\n\n    function participate(address player, uint256 amount) external validWallets {\n        if (now >= finishTime || participators >= max_participators) {\n            // send all funds to this wallet\n            fund = _fundriser();\n            // if it has participators\n            if(fund > 0) {\n                // get winner\n                winner = _randomizer();\n                // _distribute\n                _distribute();\n                // clear state\n                _collector();\n                // log data\n                _logger(wallets[winner], fund);\n            }\n            // update round\n            finishTime = now.add(roundTime);\n        }\n\n        if (playersBets[msg.sender][player] == 0) {\n            players[msg.sender][totalPlayers[msg.sender]] = player;\n            totalPlayers[msg.sender] = totalPlayers[msg.sender].add(1);\n            participators = participators.add(1);\n        }\n        playersBets[msg.sender][player] = playersBets[msg.sender][player].add(amount);\n        totalBets[msg.sender] = totalBets[msg.sender].add(amount);\n    }\n\n    /**\n    * @dev Withdraw accumulated balance for a payee.\n    */\n    function withdraw() public {\n        uint256 payment = _deposits[msg.sender];\n        _deposits[msg.sender] = 0;\n        msg.sender.transfer(payment);\n        emit Withdrawn(msg.sender, payment);\n    }\n\n    function paymentValidator(address _payee, uint256 _amount) internal {\n        if(_payee != address(wallet_0) &&\n           _payee != address(wallet_1) &&\n           _payee != address(wallet_2))\n        {\n            if(_amount == uint(0)) {\n                if(depositsOf(_payee) != uint(0)) {\n                    withdraw();\n                } else {\n                    revert(\"You have zero balance\");\n                }\n            } else {\n                revert(\"You can't do nonzero transaction\");\n            }\n        }\n    }\n\n    function() external payable {\n        paymentValidator(msg.sender, msg.value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesLog\",\"outputs\":[{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playersBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet_2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"games\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"participate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet_1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet_0\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bank\",\"type\":\"uint256\"}],\"name\":\"WinnerWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526040516200001290620001f4565b604051809103906000f0801580156200002f573d6000803e3d6000fd5b5060018054600160a060020a031916600160a060020a03929092169190911790556040516200005e90620001f4565b604051809103906000f0801580156200007b573d6000803e3d6000fd5b5060028054600160a060020a031916600160a060020a0392909216919091179055604051620000aa90620001f4565b604051809103906000f080158015620000c7573d6000803e3d6000fd5b5060038054600160a060020a031916600160a060020a039290921691909117905560646006556013600855348015620000ff57600080fd5b5060008054600160a060020a031990811633178255600154600f6020527ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec37580548316600160a060020a03928316179055600280547f169f97de0d9a84d840042b17d3c6b9638b3d6fd9024c9eb0c7a306a17b49f88f8054851691841691909117905560035493527fa74ba3945261e09fde15ba3db55005b205e61eeb4ad811ac0faa2b315bffeead80549092169216919091179055620001d1426201518064010000000062000fc5620001da82021704565b60045562000202565b600082820183811015620001ed57600080fd5b9392505050565b61049780620013fb83390190565b6111e980620002126000396000f3fe608060405260043610610131576000357c0100000000000000000000000000000000000000000000000000000000900480637ad71f72116100bd578063b82b245e11610081578063b82b245e1461037b578063e3a9db1a14610390578063f2fde38b146103c3578063fb90f9e9146103f6578063fe1881841461040b57610131565b80637ad71f72146102b55780638da5cb5b146102df578063955a015b146102f45780639c75312214610309578063b64afbe51461034257610131565b8063560846641161010457806356084664146101d25780635958611e1461021f5780635d3404c6146102345780637024dc2e1461026f578063715018a6146102a057610131565b80630ab5cb641461013d5780631c4e5e27146101825780633ccfd60b146101b55780634d9b3735146101ca575b61013b3334610420565b005b34801561014957600080fd5b506101706004803603602081101561016057600080fd5b5035600160a060020a0316610566565b60408051918252519081900360200190f35b34801561018e57600080fd5b50610170600480360360208110156101a557600080fd5b5035600160a060020a0316610578565b3480156101c157600080fd5b5061013b61058a565b61013b610605565b3480156101de57600080fd5b506101fc600480360360208110156101f557600080fd5b503561064a565b60408051600160a060020a03909316835260208301919091528051918290030190f35b34801561022b57600080fd5b5061017061066f565b34801561024057600080fd5b506101706004803603604081101561025757600080fd5b50600160a060020a0381358116916020013516610675565b34801561027b57600080fd5b50610284610692565b60408051600160a060020a039092168252519081900360200190f35b3480156102ac57600080fd5b5061013b6106a1565b3480156102c157600080fd5b50610284600480360360208110156102d857600080fd5b503561070d565b3480156102eb57600080fd5b50610284610728565b34801561030057600080fd5b50610170610737565b34801561031557600080fd5b506102846004803603604081101561032c57600080fd5b50600160a060020a03813516906020013561073d565b34801561034e57600080fd5b5061013b6004803603604081101561036557600080fd5b50600160a060020a038135169060200135610763565b34801561038757600080fd5b50610284610965565b34801561039c57600080fd5b50610170600480360360208110156103b357600080fd5b5035600160a060020a0316610974565b3480156103cf57600080fd5b5061013b600480360360208110156103e657600080fd5b5035600160a060020a031661098f565b34801561040257600080fd5b506102846109b2565b34801561041757600080fd5b506102846109c1565b600154600160a060020a0383811691161480159061044c5750600254600160a060020a03838116911614155b80156104665750600354600160a060020a03838116911614155b15610562578015156104fb57600061047d83610974565b1461048f5761048a61058a565b6104f6565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f596f752068617665207a65726f2062616c616e63650000000000000000000000604482015290519081900360640190fd5b610562565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f596f752063616e277420646f206e6f6e7a65726f207472616e73616374696f6e604482015290519081900360640190fd5b5050565b60126020526000908152604090205481565b60136020526000908152604090205481565b33600081815260146020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156105cb573d6000803e3d6000fd5b5060408051828152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a250565b600154600160a060020a03163314806106285750600254600160a060020a031633145b8061063d5750600354600160a060020a031633145b151561064857600080fd5b565b60166020526000908152604090208054600190910154600160a060020a039091169082565b60045481565b601060209081526000928352604080842090915290825290205481565b600354600160a060020a031681565b600054600160a060020a031633146106b857600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600f60205260009081526040902054600160a060020a031681565b600054600160a060020a031681565b60155481565b6011602090815260009283526040808420909152908252902054600160a060020a031681565b600154600160a060020a03163314806107865750600254600160a060020a031633145b8061079b5750600354600160a060020a031633145b15156107a657600080fd5b600454421015806107bb575060065460075410155b1561082f576107c86109df565b600c81905560001015610818576107dd610b58565b6009556107e8610cb4565b6107f0610e02565b6009546000908152600f6020526040902054600c5461081891600160a060020a031690610f3a565b61082b426201518063ffffffff610fc516565b6004555b336000908152601060209081526040808320600160a060020a038616845290915290205415156108dc57336000818152601160209081526040808320601380845282852080548652918452918420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0389161790559390925252546108b4906001610fc5565b336000908152601360205260409020556007546108d890600163ffffffff610fc516565b6007555b336000908152601060209081526040808320600160a060020a0386168452909152902054610910908263ffffffff610fc516565b336000818152601060209081526040808320600160a060020a038816845282528083209490945591815260129091522054610951908263ffffffff610fc516565b336000908152601260205260409020555050565b600254600160a060020a031681565b600160a060020a031660009081526014602052604090205490565b600054600160a060020a031633146109a657600080fd5b6109af81610fe0565b50565b600154600160a060020a031681565b601554600090815260166020526040902054600160a060020a031690565b6000610a8b600160009054906101000a9004600160a060020a0316600160a060020a031663ead3a0fe6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610a5057600080fd5b505af1158015610a64573d6000803e3d6000fd5b505050506040513d6020811015610a7a57600080fd5b5051600c549063ffffffff610fc516565b600c55600254604080517fead3a0fe0000000000000000000000000000000000000000000000000000000081529051610aef92600160a060020a03169163ead3a0fe9160048083019260209291908290030181600087803b158015610a5057600080fd5b600c55600354604080517fead3a0fe0000000000000000000000000000000000000000000000000000000081529051610b5392600160a060020a03169163ead3a0fe9160048083019260209291908290030181600087803b158015610a5057600080fd5b905090565b6000610b6261105d565b60098190556000908152600f6020908152604080832054600160a060020a0316835260139091529020541515610cad5760024260095460014303406040516020018084815260200183815260200182815260200193505050506040516020818303038152906040528051906020012060019004811515610bde57fe5b066005556009541515610c105760055460011415610c05576002600a556001600b55610c10565b6001600a556002600b555b60095460011415610c405760055460011415610c35576002600a556000600b55610c40565b6000600a556002600b555b60095460021415610c705760055460011415610c65576001600a556000600b55610c70565b6000600a556001600b555b600a546000908152600f6020908152604080832054600160a060020a03168352601390915290205415610ca557600a54610ca9565b600b545b6009555b5060095490565b610cdb6064610ccf600f600c546110da90919063ffffffff16565b9063ffffffff61110516565b600d819055600c54610cf29163ffffffff61112916565b600e55600054600d54610d0e91600160a060020a03169061113e565b60005b6009546000908152600f6020908152604080832054600160a060020a0316835260139091529020548110156109af576009546000908152600f6020908152604080832054600160a060020a0390811684526012835281842054601084528285206011855283862087875285528386205490921685529252822054610d9c9190610ccf906127106110da565b6009546000908152600f6020908152604080832054600160a060020a0390811684526011835281842087855290925290912054600e54929350610df992911690610df49061271090610ccf908663ffffffff6110da16565b61113e565b50600101610d11565b6000600c81905560078190557ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec37554600160a060020a031681526012602052604081208190555b60038110156109af5760005b6000828152600f6020908152604080832054600160a060020a031683526013909152902054811015610efa576000828152600f602090815260408083208054600160a060020a03908116855260108452828520601180865284872088885286528487205483168752908552838620869055915416845282528083208484529091529020805473ffffffffffffffffffffffffffffffffffffffff19169055600101610e54565b506000818152600f602090815260408083208054600160a060020a0390811685526012845282852085905590541683526013909152812055600101610e48565b6015805460019081018083556000908152601660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038916908117909155945483529182902042930192909255805184815290517f666f956eb7b61d075828f2d33c61250bc0a4fe212f9576d9fc5242bca6abc87e929181900390910190a25050565b600082820183811015610fd757600080fd5b90505b92915050565b600160a060020a0381161515610ff557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600342600854600143034060405160200180848152602001838152602001828152602001935050505060405160208183030381529060405280519060200120600190048115156110ac57fe5b0690506110d26110c382600263ffffffff610fc516565b6008549063ffffffff610fc516565b600855905090565b60008215156110eb57506000610fda565b8282028284828115156110fa57fe5b0414610fd757600080fd5b600080821161111357600080fd5b6000828481151561112057fe5b04949350505050565b60008282111561113857600080fd5b50900390565b600160a060020a038216600090815260146020526040902054611167908263ffffffff610fc516565b600160a060020a038316600081815260146020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a2505056fea165627a7a72305820ea519b839b4a209429a8044153b6d1a7b419fcc3c06bdbf5196fe88d3297938f00296080604052662386f26fc1000060025534801561001b57600080fd5b506000805433600160a060020a0319918216811783556001805490921617905561044c90819061004b90396000f3fe60806040526004361061008d576000357c010000000000000000000000000000000000000000000000000000000090048063a42b7e0b1161006b578063a42b7e0b14610193578063c5aa6e77146101a8578063ead3a0fe146101cf578063f2fde38b146101e45761008d565b80636d427fa314610121578063715018a61461014d5780638da5cb5b14610162575b60025434101561009c57600080fd5b600154604080517fb64afbe50000000000000000000000000000000000000000000000000000000081523360048201523460248201529051600160a060020a039092169163b64afbe59160448082019260009290919082900301818387803b15801561010757600080fd5b505af115801561011b573d6000803e3d6000fd5b50505050005b34801561012d57600080fd5b5061014b6004803603602081101561014457600080fd5b5035610217565b005b34801561015957600080fd5b5061014b610233565b34801561016e57600080fd5b5061017761029f565b60408051600160a060020a039092168252519081900360200190f35b34801561019f57600080fd5b506101776102ae565b3480156101b457600080fd5b506101bd6102bd565b60408051918252519081900360200190f35b3480156101db57600080fd5b506101bd6102c3565b3480156101f057600080fd5b5061014b6004803603602081101561020757600080fd5b5035600160a060020a0316610380565b600054600160a060020a0316331461022e57600080fd5b600255565b600054600160a060020a0316331461024a57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600154600160a060020a031681565b60025481565b600154600090600160a060020a031633146102dd57600080fd5b600254303190811061037757600160009054906101000a9004600160a060020a0316600160a060020a0316634d9b3735826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561035557600080fd5b505af1158015610369573d6000803e3d6000fd5b50505050508091505061037d565b60009150505b90565b600054600160a060020a0316331461039757600080fd5b6103a0816103a3565b50565b600160a060020a03811615156103b857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820b52691ed9e57a29ff0aeeffadd063b2bcd6b1cf7e53e5fcaa2922f912a53c8320029"
}