{
  "address": "0xc58f1f3ec051b51f10c4feb0cfd10d811d055ef5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ldoh",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-16\n*/\n\npragma solidity ^0.4.25;\n\n/**\n\n\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \n\n*/\n\n\t/*==============================\n    =          Version 7.5         =\n    ==============================*/\n\t\ncontract EthereumSmartContract {    \n    address EthereumNodes; \n\t\n    constructor() public { \n        EthereumNodes = msg.sender;\n    }\n    modifier restricted() {\n        require(msg.sender == EthereumNodes);\n        _;\n    } \n\t\n    function GetEthereumNodes() public view returns (address owner) { return EthereumNodes; }\n}\n\ncontract ldoh is EthereumSmartContract {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onClaimTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\t\n\tevent onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\n\tevent onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime);\t\n\t\n\tevent onHoldplatformsetting(address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime);\t\n\tevent onHoldplatformdeposit(uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onHoldplatformwithdraw(uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onReceiveAirdrop(uint256 amount, uint256 datetime);\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\taddress public DefaultToken;\n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// 15 -- > Cashback Status\n    }\n\t\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// 01 -- > ID number ( Start from 500 )\t\t\t\t\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// 02 -- > Total Smart Contract User\t\t\t\t\n\t\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 03 -- > Cashback Code \t\t\t\t\t\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// 04 -- > Search Address by ID\t\t\t\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 05 -- > Affiliate List by ID\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 06 -- > Contract Address Symbol\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 07 -- > Struct safe database\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 08 -- > Contract Address \t\n\t\n\tmapping(address => uint256) \t\tpublic percent; \t\t\t// 09 -- > Monthly Unlock Percentage (Default 3%)\n\tmapping(address => uint256) \t\tpublic hodlingTime; \t\t// 10 -- > Length of hold time in seconds\n\tmapping(address => uint256) \t\tpublic TokenBalance; \t\t// 11 -- > Token Balance\t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 12 -- > Maximum Contribution\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 13 -- > Deposit amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 14 -- > Withdraw amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic activeuser; \t\t\t// 15 -- > Active User Status\n\t\n\tmapping(uint256 => uint256) \t\tpublic TXCount; \t\t\t\n\t//1st uint256, Category >>> 1 = Total User, 2 = Total TX Hold, 3 = Total TX Unlock, 4 = Total TX Airdrop, 5 = Total TX Affiliate Withdraw\n\n\tmapping (address => mapping (uint256 => uint256)) \tpublic token_price; \t\t\t\t\n\t//2th uint256, Category >>> 1 = Current Price, 2 = ATH Price, 3 = ATL Price\t\t\n\t\t\t\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\n\t//3rd uint256, Category >>> 1 = LifetimeContribution, 2 = LifetimePayments, 3 = Affiliatevault, 4 = Affiliateprofit, 5 = ActiveContribution\n\t\n\t\n\t\t// Airdrop - Hold Platform (HPM)\n\t\t\t\t\t\t\t\t\n\taddress public Holdplatform_address;\t\n\tuint256 public Holdplatform_balance; \t\n\tmapping(address => bool) \tpublic Holdplatform_status;\n\tmapping(address => uint256) public Holdplatform_divider; \t\n\t\n \n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        idnumber \t\t\t\t= 500;\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n\n    function () public payable {    \n        revert();\t \n    }\n\t\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\n\t\tif (cashbackcode[msg.sender] == 0 && activeuser[_cashbackcode] >= 1) { \n\t\tcashbackcode[msg.sender] = _cashbackcode; }\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\t\n\t\t\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function Holdplatform(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && add(Statistics[msg.sender][tokenAddress][5], amount) <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);}\t\t\t\t\t\t\t\n\t}\n\t\n\t\t//--o 02\t\n    function HodlTokens2(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(amount, divider);\n\t\t\n\t\taddress airdropaddress\t\t\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\n\t\temit onReceiveAirdrop(airdrop, now);\n\t\t}\t\n\t\t\n\t\tHodlTokens3(tokenAddress, amount);\n\t}\n\t\n\t\n\t//--o 03\t\n    function HodlTokens3(address ERC, uint256 amount) private {\n\t\t\n\t\tuint256 AvailableBalances \t\t\t\t\t= div(mul(amount, 72), 100);\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0 ) { //--o  Hold without cashback code\n\t\t\n\t\t\taddress ref\t\t\t\t\t\t\t\t= EthereumNodes;\n\t\t\tcashbackcode[msg.sender] \t\t\t\t= EthereumNodes;\n\t\t\tuint256 AvailableCashback \t\t\t\t= 0; \t\t\t\n\t\t\tuint256 zerocashback \t\t\t\t\t= div(mul(amount, 28), 100); \n\t\t\tStatistics[EthereumNodes][ERC][3] \t\t= add(Statistics[EthereumNodes][ERC][3], zerocashback);\n\t\t\tStatistics[EthereumNodes][ERC][4]\t\t= add(Statistics[EthereumNodes][ERC][4], zerocashback); \t\t\n\t\t\t\n\t\t} else { \t//--o  Cashback code has been activated\n\t\t\n\t\t\tref\t\t\t\t\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 affcomission \t\t\t\t\t= div(mul(amount, 12), 100); \t\n\t\t\tAvailableCashback \t\t\t\t\t\t= div(mul(amount, 16), 100);\t\t\t\n\t\t\tuint256 ReferrerContribution \t\t\t= Statistics[ref][ERC][5];\t\t\n\t\t\tuint256 ReferralContribution\t\t\t= add(Statistics[ref][ERC][5], amount);\n\t\t\t\n\t\t\tif (ReferrerContribution >= ReferralContribution) { //--o  if referrer contribution >= referral contribution\n\t\t\n\t\t\t\tStatistics[ref][ERC][3] \t\t\t= add(Statistics[ref][ERC][3], affcomission); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], affcomission); \t\n\t\t\t\t\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t//--o  if referral contribution > referrer contribution\n\t\t\t\n\t\t\t\tuint256 Newbie \t\t\t\t\t\t= div(mul(ReferrerContribution, 12), 100); \t\t\t\n\t\t\t\tStatistics[ref][ERC][3]\t\t\t\t= add(Statistics[ref][ERC][3], Newbie); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], Newbie); \n\t\t\t\t\n\t\t\t\tuint256 NodeFunds \t\t\t\t\t= sub(affcomission, Newbie);\t\n\t\t\t\tStatistics[EthereumNodes][ERC][3] \t= add(Statistics[EthereumNodes][ERC][3], NodeFunds);\n\t\t\t\tStatistics[EthereumNodes][ERC][4] \t= add(Statistics[EthereumNodes][ERC][4], NodeFunds); \t\t\t\t\n\t\t\t}\n\t\t} \n\n\t\tHodlTokens4(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\n\t}\n\t//--o 04\t\n    function HodlTokens4(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\n\t    \n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\n\t\tuint256 TokenPercent \t= percent[ERC];\t\n\t\tuint256 TokenHodlTime \t= hodlingTime[ERC];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[idnumber] = Safe(idnumber, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\n\t\tAllContribution[ERC] \t\t\t\t\t= add(AllContribution[ERC], AM);   \t\n        TokenBalance[ERC] \t\t\t\t\t\t= add(TokenBalance[ERC], AM);  \n\t\tactiveuser[msg.sender] \t\t\t\t\t= 1;  \t\n\n\t\tif(activeuser[msg.sender] == 1 ) {\n        idaddress[msg.sender].push(idnumber); idnumber++; TXCount[2]++;  }\t\t\n\t\telse { \n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; TXCount[1]++; TXCount[2]++; TotalUser++;   }\n\t\t\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\t\n\t\t\t\n\t}\n\n//-------o Function 05 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken2(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now){ //--o  Hold Complete\n        \n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= s.amountbalance;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken3(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount);\n\t\ts.cashbackbalance \t\t\t= 0; \n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken4(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ; \t\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes  ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t\t\t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \n\t\t\n\t\tTXCount[3]++;\n\n\t\tAirdropToken(tokenAddress, amount);   \n\t}\n\t\n\t\t//--o 02\t\n    function AirdropToken(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(div(amount, divider), 4);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\t\n\t\temit onReceiveAirdrop(airdrop, now);\n\t\t}\t\n\t}\n\t\n//-------o Function 06 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return idaddress[hodler].length;\n    }\n\t\n//-------o Function 07 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 08 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\n    }\n\t\n//-------o Function 09 - Withdraw Affiliate Bonus\n\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\t\t\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\n\t\t\n\t\tuint256 amount = Statistics[msg.sender][tokenAddress][3];\n\t\tStatistics[msg.sender][tokenAddress][3] = 0;\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tStatistics[user][tokenAddress][2] \t= add(Statistics[user][tokenAddress][2], amount);\n\n\t\tTXCount[5]++;\t\t\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\tpercent[tokenAddress] \t\t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\n\t\t\n\t\tif (DefaultToken == 0x0000000000000000000000000000000000000000) { DefaultToken = tokenAddress; } \n\t\t\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\n\t\t\tcontractaddress[tokenAddress] \t= true;\n\t\t} else {         \n\t\t\tcontractaddress[tokenAddress] \t= contractstatus; \n\t\t}\t\n\t\t\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n\t\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice) public restricted  {\n\t\t\n\t\tif (Currentprice > 0  ) { token_price[tokenAddress][1] = Currentprice; }\n\t\tif (ATHprice > 0  ) { token_price[tokenAddress][2] = ATHprice; }\n\t\tif (ATLprice > 0  ) { token_price[tokenAddress][3] = ATLprice; }\n\n    }\n\t\n//-------o 03 Hold Platform\n    function Holdplatform_Airdrop(address tokenAddress, bool HPM_status, uint256 HPM_divider) public restricted {\n\t\t\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\n\t\tHoldplatform_divider[tokenAddress] \t= HPM_divider;\t// Airdrop = 100% : Divider\n\t\tuint256 HPM_ratio\t\t\t\t\t= div(100, HPM_divider);\n\t\t\n\t\temit onHoldplatformsetting(tokenAddress, HPM_status, HPM_divider, HPM_ratio, now);\n\t\n    }\t\n\t//--o Deposit\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\n\t\trequire(amount > 0 );\n        \n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n\t\t\n\t\temit onHoldplatformdeposit(amount, newbalance, now);\n    }\n\t//--o Withdraw\n\tfunction Holdplatform_Withdraw(uint256 amount) restricted public {\n        require(Holdplatform_balance > 0);\n        \n\t\tuint256 newbalance\t\t= sub(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n        \n        ERC20Interface token = ERC20Interface(Holdplatform_address);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n\t\t\n\t\temit onHoldplatformwithdraw(amount, newbalance, now);\n    }\n\t\n//-------o 04 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n\n        for(uint256 i = 1; i < idnumber; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\tuint256 amount = add(s.amountbalance, s.cashbackbalance);\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, amount);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n                \n            }\n        }\n\t\t\n    }   \n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetTotalAffiliate\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TXCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hodlingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Statistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthereumNodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"cashbackbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbackcode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_divider\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cashbackcode\",\"type\":\"address\"}],\"name\":\"CashbackCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afflist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeuser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ReturnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxcontribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"Currentprice\",\"type\":\"uint256\"},{\"name\":\"ATHprice\",\"type\":\"uint256\"},{\"name\":\"ATLprice\",\"type\":\"uint256\"}],\"name\":\"TokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"contractstatus\",\"type\":\"bool\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"name\":\"_PercentPermonth\",\"type\":\"uint256\"}],\"name\":\"AddContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"HPM_status\",\"type\":\"bool\"},{\"name\":\"HPM_divider\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DefaultToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cashbackcode\",\"type\":\"address\"}],\"name\":\"onCashbackCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAffiliateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHoldplatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contracthodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractstatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_PercentPermonth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_HodlingTime\",\"type\":\"uint256\"}],\"name\":\"onAddContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Tokenairdrop\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"HPM_status\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"HPM_divider\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"HPM_ratio\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onHoldplatformsetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newbalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onHoldplatformdeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newbalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onHoldplatformwithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onReceiveAirdrop\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f46002819055507323badee11bf49c40669e9b09035f048e9146213e601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550615ee980620000bf6000396000f3006080604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305a2dd26146101bc5780630c5d5323146102135780630d826c0b1461025457806311d2c211146102ab5780631996bc1c1461036757806327a02110146103be57806331b78a921461043f57806336c07a691461049657806338da63d8146104c357806347f849cd146105265780634b698aff146106715780634d6ac6a1146106d25780634d7f917f1461071f5780634eeaa2121461076c57806356b71f71146107c75780635ae33a341461084a5780635df1539c146108a15780636a37f573146108e45780637028b6a31461093b5780638b37932e146109c85780638e9e279514610a1f5780639007710314610a3657806395006c3014610a615780639961395614610ab85780639ff7cdb914610b0f578063b6e2b39514610b70578063bcdf853614610bc7578063be37ec1114610c70578063d1ee27a414610c9d578063d6387b1e14610cfe578063d9d61a1014610d57578063daca166314610dae578063e781495a14610dd9578063ec80571b14610e30578063ee3cd82514610e8b575b600080fd5b3480156101c857600080fd5b506101fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ee2565b6040518082815260200191505060405180910390f35b34801561021f57600080fd5b5061023e60048036038101908080359060200190929190505050610f2e565b6040518082815260200191505060405180910390f35b34801561026057600080fd5b50610295600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f46565b6040518082815260200191505060405180910390f35b3480156102b757600080fd5b506102ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032c578082015181840152602081019050610311565b50505050905090810190601f1680156103595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037357600080fd5b506103a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061100e565b6040518082815260200191505060405180910390f35b3480156103ca57600080fd5b50610429600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611026565b6040518082815260200191505060405180910390f35b34801561044b57600080fd5b50610454611058565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104a257600080fd5b506104c160048036038101908080359060200190929190505050611081565b005b3480156104cf57600080fd5b50610524600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611339565b005b34801561053257600080fd5b5061055160048036038101908080359060200190929190505050611b18565b604051808d81526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a815260200189815260200180602001888152602001878152602001868152602001858152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b8381101561062b578082015181840152602081019050610610565b50505050905090810190601f1680156106585780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b34801561067d57600080fd5b506106bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c81565b6040518082815260200191505060405180910390f35b3480156106de57600080fd5b5061071d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cb1565b005b34801561072b57600080fd5b5061076a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f56565b005b34801561077857600080fd5b506107ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061207f565b604051808215151515815260200191505060405180910390f35b3480156107d357600080fd5b50610808600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061209f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561085657600080fd5b5061088b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120d2565b6040518082815260200191505060405180910390f35b3480156108ad57600080fd5b506108e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120ea565b005b3480156108f057600080fd5b50610925600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061238f565b6040518082815260200191505060405180910390f35b34801561094757600080fd5b50610986600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506123a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109d457600080fd5b50610a09600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123f4565b6040518082815260200191505060405180910390f35b348015610a2b57600080fd5b50610a3461240c565b005b348015610a4257600080fd5b50610a4b612526565b6040518082815260200191505060405180910390f35b348015610a6d57600080fd5b50610a7661252c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ac457600080fd5b50610af9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612552565b6040518082815260200191505060405180910390f35b348015610b1b57600080fd5b50610b6e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061256a565b005b348015610b7c57600080fd5b50610bb1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126eb565b6040518082815260200191505060405180910390f35b348015610bd357600080fd5b50610c6e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050612703565b005b348015610c7c57600080fd5b50610c9b60048036038101908080359060200190929190505050612b57565b005b348015610ca957600080fd5b50610ce8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612d67565b6040518082815260200191505060405180910390f35b348015610d0a57600080fd5b50610d55600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919080359060200190929190505050612d8c565b005b348015610d6357600080fd5b50610d98600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f01565b6040518082815260200191505060405180910390f35b348015610dba57600080fd5b50610dc3612f4d565b6040518082815260200191505060405180910390f35b348015610de557600080fd5b50610dee612f53565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e3c57600080fd5b50610e71600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f79565b604051808215151515815260200191505060405180910390f35b348015610e9757600080fd5b50610ecc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f99565b6040518082815260200191505060405180910390f35b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60116020528060005260406000206000915090505481565b600f6020528060005260406000206000915090505481565b60076020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110065780601f10610fdb57610100808354040283529160200191611006565b820191906000526020600020905b815481529060010190602001808311610fe957829003601f168201915b505050505081565b600b6020528060005260406000206000915090505481565b601360205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110df57600080fd5b60006015541115156110f057600080fd5b6110fc60155484612fb1565b915081601581905550601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156111c657600080fd5b505af11580156111da573d6000803e3d6000fd5b505050506040513d60208110156111f057600080fd5b81019080805190602001909291905050501015151561120e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b505050506040513d60208110156112db57600080fd5b8101908080519060200190929190505050507f79d4c16568bccbab4600abdbdab19c72ee02c75b5e6040c9fe1d8b507d63f83a83834260405180848152602001838152602001828152602001935050505060405180910390a1505050565b600080600060606000808673ffffffffffffffffffffffffffffffffffffffff161415151561136757600080fd5b6000601360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600381526020019081526020016000205411151561140457600080fd5b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600381526020019081526020016000205494506000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006003815260200190815260200160002081905550611572600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486612fb1565b600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115fe600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486612fd2565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550849350859250600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561171a5780601f106116ef5761010080835404028352916020019161171a565b820191906000526020600020905b8154815290600101906020018083116116fd57829003601f168201915b50505050509150859050848173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156117c057600080fd5b505af11580156117d4573d6000803e3d6000fd5b505050506040513d60208110156117ea57600080fd5b81019080805190602001909291905050501015151561180857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156118ab57600080fd5b505af11580156118bf573d6000803e3d6000fd5b505050506040513d60208110156118d557600080fd5b81019080805190602001909291905050505061197f601360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600281526020019081526020016000205486612fd2565b601360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028152602001908152602001600020819055506011600060058152602001908152602001600020600081548092919060010191905055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f772c23bb220b948b929f588a1f309403a056930064c60b1452db4c2904918b918487426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015611ad3578082015181840152602081019050611ab8565b50505050905090810190601f168015611b005780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a350505050505050565b600080600080600060606000806000806000806000600860008f8152602001908152602001600020905080600001548160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836001015484600201548560050186600601548760070154886008015489600901548a600a01548b600b0154868054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c525780601f10611c2757610100808354040283529160200191611c52565b820191906000526020600020905b815481529060010190602001808311611c3557829003601f168201915b505050505096509c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b600560205281600052604060002081815481101515611c9c57fe5b90600052602060002001600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515611cd857600080fd5b600082118015611dbe5750600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbb601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600581526020019081526020016000205484612fd2565b11155b1515611dc957600080fd5b60001515600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415611e2757600080fd5b8290508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611f0157600080fd5b505af1158015611f15573d6000803e3d6000fd5b505050506040513d6020811015611f2b57600080fd5b81019080805190602001909291905050501515611f4757600080fd5b611f518383612ff3565b505050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515611f7d57600080fd5b60008214151515611f8d57600080fd5b6008600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561200057600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561205e57600080fd5b60008160060154141561207057600080fd5b61207a8383613240565b505050565b60096020528060005260406000206000915054906101000a900460ff1681565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60176020528060005260406000206000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561212557600080fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156121ea57506001601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b156122725780600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612312565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b3373ffffffffffffffffffffffffffffffffffffffff167f3bf019f5f0b17480693601e318eb6120c1eac4732d3b7b3a006c5024f9dd69bd82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a250565b600e6020528060005260406000206000915090505481565b6006602052816000526040600020818154811015156123c257fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60106020528060005260406000206000915090505481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561246c57600080fd5b600192505b600254831015612521576008600084815260200190815260200160002091506000826000015414151561251457600082600601541115612513576124bd82600601548360070154612fd2565b90506125128260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613773565b5b5b8280600101935050612471565b505050565b60155481565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125c557600080fd5b60008311156126255782601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020819055505b60008211156126855781601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028152602001908152602001600020819055505b60008111156126e55780601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020819055505b50505050565b600c6020528060005260406000206000915090505481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561276357600080fd5b839250600383101580156127785750600c8311155b151561278357600080fd5b82600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555084600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061281a929190615d98565b5085600d60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061287461286d604885613bb1565b601e613bdb565b9150620151808202905080600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561295b5787600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161480156129bc575060001515871515145b15612a1e576001600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612a76565b86600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b8773ffffffffffffffffffffffffffffffffffffffff167f84e005593e5e94e5aa70dc9c7e68d408611b8860dcba4a9297858b82c88748a68888888886604051808615151515815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015612b0f578082015181840152602081019050612af4565b50505050905090810190601f168015612b3c5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a25050505050505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bb557600080fd5b600083111515612bc457600080fd5b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015612cc057600080fd5b505af1158015612cd4573d6000803e3d6000fd5b505050506040513d6020811015612cea57600080fd5b81019080805190602001909291905050501515612d0657600080fd5b612d1260155484612fd2565b9050806015819055507fcebfc743917aa8553116d86151b3c08d890a029c26b2380b3f6da12aaba4d18083824260405180848152602001838152602001828152602001935050505060405180910390a1505050565b6012602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612de957600080fd5b82601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e8f606483613bb1565b90508373ffffffffffffffffffffffffffffffffffffffff167f83178605eb44efee62ca75af0ae1dd3f3c2fb790255968e44753a9faa3cd57a384848442604051808515151515815260200184815260200183815260200182815260200194505050505060405180910390a250505050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60166020528060005260406000206000915054906101000a900460ff1681565b600a6020528060005260406000206000915090505481565b600080838311151515612fc357600080fd5b82840390508091505092915050565b6000808284019050838110151515612fe957600080fd5b8091505092915050565b60008060008060011515601660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561322e57600060155411151561306357600080fd5b601760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493506130af8585613bb1565b9250601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561317c57600080fd5b505af1158015613190573d6000803e3d6000fd5b505050506040513d60208110156131a657600080fd5b8101908080519060200190929190505050506131c460155484612fb1565b6015819055506011600060048152602001908152602001600020600081548092919060010191905055507f8c684a1cd777e0cf196a1adfac3468dbdef3eeb4778e900fcd2c5ec2c26f50e08342604051808381526020018281526020019250505060405180910390a15b6132388686613c19565b505050505050565b600080600060606000600860008781526020019081526020016000209450600085600001541415151561327257600080fd5b8673ffffffffffffffffffffffffffffffffffffffff168560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156132d057600080fd5b846006015493508460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250846005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133965780601f1061336b57610100808354040283529160200191613396565b820191906000526020600020905b81548152906001019060200180831161337957829003601f168201915b50505050509150428560020154101561375b576133bb85600601548660070154612fd2565b90506134a1601360008760030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008760040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058152602001908152602001600020548660010154612fb1565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006005815260200190815260200160002081905550846006015485600c0181905550600085600601819055504285600801819055506135a68560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613773565b600085600701541180156135cf57506000151585600d0160149054906101000a900460ff161515145b806135ef57506001151585600d0160149054906101000a900460ff161515145b156136355761360d61360686600101546058613bdb565b6064613bb1565b85600b0181905550613628670de0b6b3a76400006058613bdb565b85600a0181905550613672565b61364e61364786600101546048613bdb565b6064613bb1565b85600b0181905550613669670de0b6b3a76400006048613bdb565b85600a01819055505b600085600701819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f959346e7719e944c33f76798af64519a9c17a870c805ae49c011066f18fa9cb08487426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561371a5780820151818401526020810190506136ff565b50505050905090810190601f1680156137475780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a361376a565b6137698786600001546149ff565b5b50505050505050565b6000829050818173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561381457600080fd5b505af1158015613828573d6000803e3d6000fd5b505050506040513d602081101561383e57600080fd5b81019080805190602001909291905050501015151561385c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156138ff57600080fd5b505af1158015613913573d6000803e3d6000fd5b505050506040513d602081101561392957600080fd5b810190808051906020019092919050505050613984600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612fb1565b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613a10600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612fd2565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613aeb601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600281526020019081526020016000205483612fd2565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002815260200190815260200160002081905550601160006003815260200190815260200160002060008154809291906001019190505550613bab8383614b73565b50505050565b600080600083111515613bc357600080fd5b8284811515613bce57fe5b0490508091505092915050565b6000806000841415613bf05760009150613c12565b8284029050828482811515613c0157fe5b04141515613c0e57600080fd5b8091505b5092915050565b6000806000806000806000806000613c3c613c358b6048613bdb565b6064613bb1565b98506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614077576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1697506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060009650613d98613d918b601c613bdb565b6064613bb1565b9550613e53601360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600381526020019081526020016000205487612fd2565b601360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006003815260200190815260200160002081905550613fbf601360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600481526020019081526020016000205487612fd2565b601360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020819055506149e5565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1697506140ee6140e78b600c613bdb565b6064613bb1565b94506141056140fe8b6010613bdb565b6064613bb1565b9650601360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058152602001908152602001600020549350614230601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058152602001908152602001600020548b612fd2565b92508284101515614494576142d3601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600381526020019081526020016000205486612fd2565b601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020819055506143fd601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600481526020019081526020016000205486612fd2565b601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020819055506149e4565b6144a96144a285600c613bdb565b6064613bb1565b9150614543601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600381526020019081526020016000205483612fd2565b601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600381526020019081526020016000208190555061466d601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600481526020019081526020016000205483612fd2565b601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020819055506147098583612fb1565b90506147c4601360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600381526020019081526020016000205482612fd2565b601360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006003815260200190815260200160002081905550614930601360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600481526020019081526020016000205482612fd2565b601360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020819055505b5b6149f28b8b8b8a8c614dc0565b5050505050505050505050565b600080600080600080600080600860008a815260200190815260200160002097506000886000015414151515614a3457600080fd5b8973ffffffffffffffffffffffffffffffffffffffff168860040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515614a9257600080fd5b614aa0428960080154612fb1565b9650614ad3614aca614ac4614abd8b600101548c60090154613bdb565b6064613bb1565b89613bdb565b62278d00613bb1565b9550614ae48860010154600a613bb1565b945084861115614af657849350614afa565b8593505b8760060154841115614b125787600601549250614b16565b8392505b614b24886007015484612fd2565b9150614b34886006015483612fb1565b9050600088600701819055508088600601819055508188600c0181905550428860080181905550614b678a8a83856159a1565b50505050505050505050565b60008060008060011515601660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415614db8576000601554111515614be357600080fd5b601760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549350614c39614c328686613bb1565b6004613bb1565b9250601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015614d0657600080fd5b505af1158015614d1a573d6000803e3d6000fd5b505050506040513d6020811015614d3057600080fd5b810190808051906020019092919050505050614d4e60155484612fb1565b6015819055506011600060048152602001908152602001600020600081548092919060010191905055507f8c684a1cd777e0cf196a1adfac3468dbdef3eeb4778e900fcd2c5ec2c26f50e08342604051808381526020018281526020019250505060405180910390a15b505050505050565b60008060008060008060008b9650600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549550600b60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450614e5c4286612fd2565b93508a925089915088905060009a5060009950600098506101e06040519081016040528060025481526020018481526020018581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015614f3057600080fd5b505af1158015614f44573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015614f6e57600080fd5b810190808051640100000000811115614f8657600080fd5b82810190506020810184811115614f9c57600080fd5b8151856001820283011164010000000082111715614fb957600080fd5b505092919050505081526020018381526020018281526020014281526020018781526020016000815260200160008152602001600081526020018973ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525060086000600254815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190805190602001906150f3929190615e18565b5060c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101c082015181600d0160146101000a81548160ff021916908315150217905550905050615243601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600181526020019081526020016000205484612fd2565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600181526020019081526020016000208190555061536d601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600581526020019081526020016000205484612fd2565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006005815260200190815260200160002081905550615448600e60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612fd2565b600e60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506154d4600c60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612fd2565b600c60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561564a57600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060025490806001815401808255809150509060018203906000526020600020016000909192909190915055506002600081548092919060010191905055506011600060028152602001908152602001600020600081548092919060010191905055506157c5565b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000203390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060025490806001815401808255809150509060018203906000526020600020016000909192909190915055506002600081548092919060010191905055506011600060018152602001908152602001600020600081548092919060010191905055506011600060028152602001908152602001600020600081548092919060010191905055506003600081548092919060010191905055505b8b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f05fb89c4b424ffdc61374e38eb92a8ff16db5b32923736b264aedfcc06be08468973ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561587857600080fd5b505af115801561588c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156158b657600080fd5b8101908080516401000000008111156158ce57600080fd5b828101905060208101848111156158e457600080fd5b815185600182028301116401000000008211171561590157600080fd5b505092919050505086886040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561595757808201518184015260208101905061593c565b50505050905090810190601f1680156159845780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050505050505050505050565b60008060006060600080600080600860008c8152602001908152602001600020975060008860000154141515156159d757600080fd5b8b73ffffffffffffffffffffffffffffffffffffffff168860040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515615a3557600080fd5b8896508760040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550876005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615af75780601f10615acc57610100808354040283529160200191615af7565b820191906000526020600020905b815481529060010190602001808311615ada57829003601f168201915b50505050509450615b17615b108960010154600c613bdb565b6064613bb1565b9350615b32615b2b89600101546010613bdb565b6064613bb1565b92506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415615c0f57615c08615c02615bfc8a6001015487612fb1565b85612fb1565b8b612fb1565b9150615c29565b615c26615c20896001015486612fb1565b8b612fb1565b91505b615c49615c3f8368056bc75e2d63100000613bdb565b8960010154613bb1565b90508188600b01819055508088600a0181905550615cb08860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168960040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b613773565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f959346e7719e944c33f76798af64519a9c17a870c805ae49c011066f18fa9cb0878a426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015615d4e578082015181840152602081019050615d33565b50505050905090810190601f168015615d7b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615dd957805160ff1916838001178555615e07565b82800160010185558215615e07579182015b82811115615e06578251825591602001919060010190615deb565b5b509050615e149190615e98565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615e5957805160ff1916838001178555615e87565b82800160010185558215615e87579182015b82811115615e86578251825591602001919060010190615e6b565b5b509050615e949190615e98565b5090565b615eba91905b80821115615eb6576000816000905550600101615e9e565b5090565b905600a165627a7a72305820556a6316e8411f0a1a5ef9ff91abede07259332f7f648529f80128e3600e45470029"
}