{
  "address": "0x43639f9991e60a14cb737dc4b756f86234c40dd7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BurnManager",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-29\n*/\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n\n\n/// @author Kongliang Zhong - <[email protected]>\n/// @title IFeeHolder - A contract holding fees.\ncontract IFeeHolder {\n\n    event TokenWithdrawn(\n        address owner,\n        address token,\n        uint value\n    );\n\n    // A map of all fee balances\n    mapping(address => mapping(address => uint)) public feeBalances;\n\n    /// @dev   Allows withdrawing the tokens to be burned by\n    ///        authorized contracts.\n    /// @param token The token to be used to burn buy and burn LRC\n    /// @param value The amount of tokens to withdraw\n    function withdrawBurned(\n        address token,\n        uint value\n        )\n        external\n        returns (bool success);\n\n    /// @dev   Allows withdrawing the fee payments funds\n    ///        msg.sender is the recipient of the fee and the address\n    ///        to which the tokens will be sent.\n    /// @param token The token to withdraw\n    /// @param value The amount of tokens to withdraw\n    function withdrawToken(\n        address token,\n        uint value\n        )\n        external\n        returns (bool success);\n\n    function batchAddFeeBalances(\n        bytes32[] calldata batch\n        )\n        external;\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n\n\n/// @title ERC20 safe transfer\n/// @dev see https://github.com/sec-bit/badERC20Fix\n/// @author Brecht Devos - <[email protected]>\nlibrary ERC20SafeTransfer {\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value)\n        internal\n        returns (bool success)\n    {\n        // A transfer is successful when 'call' is successful and depending on the token:\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\n\n        // bytes4(keccak256(\"transfer(address,uint256)\")) = 0xa9059cbb\n        bytes memory callData = abi.encodeWithSelector(\n            bytes4(0xa9059cbb),\n            to,\n            value\n        );\n        (success, ) = token.call(callData);\n        return checkReturnValue(success);\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value)\n        internal\n        returns (bool success)\n    {\n        // A transferFrom is successful when 'call' is successful and depending on the token:\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\n\n        // bytes4(keccak256(\"transferFrom(address,address,uint256)\")) = 0x23b872dd\n        bytes memory callData = abi.encodeWithSelector(\n            bytes4(0x23b872dd),\n            from,\n            to,\n            value\n        );\n        (success, ) = token.call(callData);\n        return checkReturnValue(success);\n    }\n\n    function checkReturnValue(\n        bool success\n        )\n        internal\n        pure\n        returns (bool)\n    {\n        // A transfer/transferFrom is successful when 'call' is successful and depending on the token:\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\n        if (success) {\n            assembly {\n                switch returndatasize()\n                // Non-standard ERC20: nothing is returned so if 'call' was successful we assume the transfer succeeded\n                case 0 {\n                    success := 1\n                }\n                // Standard ERC20: a single boolean value is returned which needs to be true\n                case 32 {\n                    returndatacopy(0, 0, 32)\n                    success := mload(0)\n                }\n                // None of the above: not successful\n                default {\n                    success := 0\n                }\n            }\n        }\n        return success;\n    }\n\n}\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n\n\n/// @title Utility Functions for uint\n/// @author Daniel Wang - <[email protected]>\nlibrary MathUint {\n\n    function mul(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint c)\n    {\n        c = a * b;\n        require(a == 0 || c / a == b, \"INVALID_VALUE\");\n    }\n\n    function sub(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint)\n    {\n        require(b <= a, \"INVALID_VALUE\");\n        return a - b;\n    }\n\n    function add(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint c)\n    {\n        c = a + b;\n        require(c >= a, \"INVALID_VALUE\");\n    }\n\n    function hasRoundingError(\n        uint value,\n        uint numerator,\n        uint denominator\n        )\n        internal\n        pure\n        returns (bool)\n    {\n        uint multiplied = mul(value, numerator);\n        uint remainder = multiplied % denominator;\n        // Return true if the rounding error is larger than 1%\n        return mul(remainder, 100) > multiplied;\n    }\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n\n\n/// @title Errors\ncontract Errors {\n    string constant ZERO_VALUE                 = \"ZERO_VALUE\";\n    string constant ZERO_ADDRESS               = \"ZERO_ADDRESS\";\n    string constant INVALID_VALUE              = \"INVALID_VALUE\";\n    string constant INVALID_ADDRESS            = \"INVALID_ADDRESS\";\n    string constant INVALID_SIZE               = \"INVALID_SIZE\";\n    string constant INVALID_SIG                = \"INVALID_SIG\";\n    string constant INVALID_STATE              = \"INVALID_STATE\";\n    string constant NOT_FOUND                  = \"NOT_FOUND\";\n    string constant ALREADY_EXIST              = \"ALREADY_EXIST\";\n    string constant REENTRY                    = \"REENTRY\";\n    string constant UNAUTHORIZED               = \"UNAUTHORIZED\";\n    string constant UNIMPLEMENTED              = \"UNIMPLEMENTED\";\n    string constant UNSUPPORTED                = \"UNSUPPORTED\";\n    string constant TRANSFER_FAILURE           = \"TRANSFER_FAILURE\";\n    string constant WITHDRAWAL_FAILURE         = \"WITHDRAWAL_FAILURE\";\n    string constant BURN_FAILURE               = \"BURN_FAILURE\";\n    string constant BURN_RATE_FROZEN           = \"BURN_RATE_FROZEN\";\n    string constant BURN_RATE_MINIMIZED        = \"BURN_RATE_MINIMIZED\";\n    string constant UNAUTHORIZED_ONCHAIN_ORDER = \"UNAUTHORIZED_ONCHAIN_ORDER\";\n    string constant INVALID_CANDIDATE          = \"INVALID_CANDIDATE\";\n    string constant ALREADY_VOTED              = \"ALREADY_VOTED\";\n    string constant NOT_OWNER                  = \"NOT_OWNER\";\n}\n\n\n\n/// @title NoDefaultFunc\n/// @dev Disable default functions.\ncontract NoDefaultFunc is Errors {\n    function ()\n        external\n        payable\n    {\n        revert(UNSUPPORTED);\n    }\n}\n\n\n\n/// @author Brecht Devos - <[email protected]>\ncontract BurnManager is NoDefaultFunc {\n    using MathUint for uint;\n    using ERC20SafeTransfer for address;\n\n    address public constant feeHolderAddress = 0x5beaEA36efA78F43a6d61145817FDFf6A9929e60;\n    address public constant lrcAddress = 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD;\n\n    /* constructor( */\n    /*     address _feeHolderAddress, */\n    /*     address _lrcAddress */\n    /*     ) */\n    /*     public */\n    /* { */\n    /*     require(_feeHolderAddress != address(0x0), ZERO_ADDRESS); */\n    /*     require(_lrcAddress != address(0x0), ZERO_ADDRESS); */\n    /*     feeHolderAddress = _feeHolderAddress; */\n    /*     lrcAddress = _lrcAddress; */\n    /* } */\n\n    function burn(\n        address token\n        )\n        external\n        returns (bool)\n    {\n        IFeeHolder feeHolder = IFeeHolder(feeHolderAddress);\n\n        // Withdraw the complete token balance\n        uint balance = feeHolder.feeBalances(token, feeHolderAddress);\n        bool success = feeHolder.withdrawBurned(token, balance);\n        require(success, WITHDRAWAL_FAILURE);\n\n        // We currently only support burning LRC directly\n        if (token != lrcAddress) {\n            require(false, UNIMPLEMENTED);\n        }\n\n        // Burn the LRC\n        require(\n            lrcAddress.safeTransfer(\n                address(0x0),\n                balance\n            ),\n            BURN_FAILURE\n        );\n\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"lrcAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeHolderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "608060405234801561001057600080fd5b506105fe806100206000396000f3fe6080604052600436106100345760003560e01c80633d6cf722146100e257806389afcb4414610113578063fece78261461015a575b6040518060400160405280600b8152602001600160aa1b6a155394d5541413d495115102815250604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156100a757818101518382015260200161008f565b50505050905090810190601f1680156100d45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b3480156100ee57600080fd5b506100f761016f565b604080516001600160a01b039092168252519081900360200190f35b34801561011f57600080fd5b506101466004803603602081101561013657600080fd5b50356001600160a01b0316610187565b604080519115158252519081900360200190f35b34801561016657600080fd5b506100f7610482565b73bbbbca6a901c926f240b89eacb641d8aec7aeafd81565b60408051600160e11b6322b37a450281526001600160a01b0383166004820152735beaea36efa78f43a6d61145817fdff6a9929e606024820181905291516000929183918391634566f48a916044808301926020929190829003018186803b1580156101f257600080fd5b505afa158015610206573d6000803e3d6000fd5b505050506040513d602081101561021c57600080fd5b505160408051600160e01b63787748a70281526001600160a01b0387811660048301526024820184905291519293506000929185169163787748a79160448082019260209290919082900301818787803b15801561027957600080fd5b505af115801561028d573d6000803e3d6000fd5b505050506040513d60208110156102a357600080fd5b505160408051808201909152601281527f5749544844524157414c5f4641494c555245000000000000000000000000000060208201529091508161032b57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156100a757818101518382015260200161008f565b506001600160a01b03851673bbbbca6a901c926f240b89eacb641d8aec7aeafd146103cb57604080518082018252600d81527f554e494d504c454d454e5445440000000000000000000000000000000000000060208083019182529251600160e51b62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083156100a757818101518382015260200161008f565b6103f173bbbbca6a901c926f240b89eacb641d8aec7aeafd60008463ffffffff61049a16565b6040518060400160405280600c81526020017f4255524e5f4641494c55524500000000000000000000000000000000000000008152509061047657604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156100a757818101518382015260200161008f565b50600195945050505050565b735beaea36efa78f43a6d61145817fdff6a9929e6081565b604080516001600160a01b038085166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b0316600160e01b63a9059cbb0217815292518251600094928816928492918291908083835b602083106105185780518252601f1990920191602091820191016104f9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461057a576040519150601f19603f3d011682016040523d82523d6000602084013e61057f565b606091505b50508092505061058e82610597565b95945050505050565b600081156105ce573d80156105b757602081146105c057600092506105cc565b600192506105cc565b60206000803e60005192505b505b509056fea165627a7a723058202713846d399f14de493ecc362ba6226b36d96cb8ec2f5214a714c940f8fcc99a0029"
}