{
  "address": "0xe2c43d2c6d6875c8f24855054d77b5664c7e810f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CozyTimeAuction",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-09\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/Beneficiary.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.24;\n\n\n\n/** @title Beneficiary */\ncontract Beneficiary is Ownable {\n    address public beneficiary;\n\n    constructor() public {\n        beneficiary = msg.sender;\n    }\n\n    /**\n     * @dev Change the beneficiary address\n     * @param _beneficiary Address of the new beneficiary\n     */\n    function setBeneficiary(address _beneficiary) public onlyOwner {\n        beneficiary = _beneficiary;\n    }\n}\n\n// File: contracts/Affiliate.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.25;\n\n\n\n/** @title Affiliate */\ncontract Affiliate is Ownable {\n    mapping(address => bool) public canSetAffiliate;\n    mapping(address => address) public userToAffiliate;\n\n    /** @dev Allows an address to set the affiliate address for a user\n      * @param _setter The address that should be allowed\n      */\n    function setAffiliateSetter(address _setter) public onlyOwner {\n        canSetAffiliate[_setter] = true;\n    }\n\n    /**\n     * @dev Set the affiliate of a user\n     * @param _user user to set affiliate for\n     * @param _affiliate address to set\n     */\n    function setAffiliate(address _user, address _affiliate) public {\n        require(canSetAffiliate[msg.sender]);\n        if (userToAffiliate[_user] == address(0)) {\n            userToAffiliate[_user] = _affiliate;\n        }\n    }\n\n}\n\n// File: contracts/interfaces/ERC721.sol\n\ncontract ERC721 {\n    function implementsERC721() public pure returns (bool);\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\n    function approve(address _to, uint256 _tokenId) public;\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) ;\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n}\n\n// File: contracts/interfaces/PepeInterface.sol\n\ncontract PepeInterface is ERC721{\n    function cozyTime(uint256 _mother, uint256 _father, address _pepeReceiver) public returns (bool);\n    function getCozyAgain(uint256 _pepeId) public view returns(uint64);\n}\n\n// File: contracts/AuctionBase.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.24;\n\n\n\n\n\n/** @title AuctionBase */\ncontract AuctionBase is Beneficiary {\n    mapping(uint256 => PepeAuction) public auctions;//maps pepes to auctions\n    PepeInterface public pepeContract;\n    Affiliate public affiliateContract;\n    uint256 public fee = 37500; //in 1 10000th of a percent so 3.75% at the start\n    uint256 public constant FEE_DIVIDER = 1000000; //Perhaps needs better name?\n\n    struct PepeAuction {\n        address seller;\n        uint256 pepeId;\n        uint64 auctionBegin;\n        uint64 auctionEnd;\n        uint256 beginPrice;\n        uint256 endPrice;\n    }\n\n    event AuctionWon(uint256 indexed pepe, address indexed winner, address indexed seller);\n    event AuctionStarted(uint256 indexed pepe, address indexed seller);\n    event AuctionFinalized(uint256 indexed pepe, address indexed seller);\n\n    constructor(address _pepeContract, address _affiliateContract) public {\n        pepeContract = PepeInterface(_pepeContract);\n        affiliateContract = Affiliate(_affiliateContract);\n    }\n\n    /**\n     * @dev Return a pepe from a auction that has passed\n     * @param  _pepeId the id of the pepe to save\n     */\n    function savePepe(uint256 _pepeId) external {\n        // solhint-disable-next-line not-rely-on-time\n        require(auctions[_pepeId].auctionEnd < now);//auction must have ended\n        require(pepeContract.transfer(auctions[_pepeId].seller, _pepeId));//transfer pepe back to seller\n\n        emit AuctionFinalized(_pepeId, auctions[_pepeId].seller);\n\n        delete auctions[_pepeId];//delete auction\n    }\n\n    /**\n     * @dev change the fee on pepe sales. Can only be lowerred\n     * @param _fee The new fee to set. Must be lower than current fee\n     */\n    function changeFee(uint256 _fee) external onlyOwner {\n        require(_fee < fee);//fee can not be raised\n        fee = _fee;\n    }\n\n    /**\n     * @dev Start a auction\n     * @param  _pepeId Pepe to sell\n     * @param  _beginPrice Price at which the auction starts\n     * @param  _endPrice Ending price of the auction\n     * @param  _duration How long the auction should take\n     */\n    function startAuction(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration) public {\n        require(pepeContract.transferFrom(msg.sender, address(this), _pepeId));\n        // solhint-disable-next-line not-rely-on-time\n        require(now > auctions[_pepeId].auctionEnd);//can only start new auction if no other is active\n\n        PepeAuction memory auction;\n\n        auction.seller = msg.sender;\n        auction.pepeId = _pepeId;\n        // solhint-disable-next-line not-rely-on-time\n        auction.auctionBegin = uint64(now);\n        // solhint-disable-next-line not-rely-on-time\n        auction.auctionEnd = uint64(now) + _duration;\n        require(auction.auctionEnd > auction.auctionBegin);\n        auction.beginPrice = _beginPrice;\n        auction.endPrice = _endPrice;\n\n        auctions[_pepeId] = auction;\n\n        emit AuctionStarted(_pepeId, msg.sender);\n    }\n\n    /**\n     * @dev directly start a auction from the PepeBase contract\n     * @param  _pepeId Pepe to put on auction\n     * @param  _beginPrice Price at which the auction starts\n     * @param  _endPrice Ending price of the auction\n     * @param  _duration How long the auction should take\n     * @param  _seller The address selling the pepe\n     */\n    // solhint-disable-next-line max-line-length\n    function startAuctionDirect(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration, address _seller) public {\n        require(msg.sender == address(pepeContract)); //can only be called by pepeContract\n        //solhint-disable-next-line not-rely-on-time\n        require(now > auctions[_pepeId].auctionEnd);//can only start new auction if no other is active\n\n        PepeAuction memory auction;\n\n        auction.seller = _seller;\n        auction.pepeId = _pepeId;\n        // solhint-disable-next-line not-rely-on-time\n        auction.auctionBegin = uint64(now);\n        // solhint-disable-next-line not-rely-on-time\n        auction.auctionEnd = uint64(now) + _duration;\n        require(auction.auctionEnd > auction.auctionBegin);\n        auction.beginPrice = _beginPrice;\n        auction.endPrice = _endPrice;\n\n        auctions[_pepeId] = auction;\n\n        emit AuctionStarted(_pepeId, _seller);\n    }\n\n  /**\n   * @dev Calculate the current price of a auction\n   * @param  _pepeId the pepeID to calculate the current price for\n   * @return currentBid the current price for the auction\n   */\n    function calculateBid(uint256 _pepeId) public view returns(uint256 currentBid) {\n        PepeAuction storage auction = auctions[_pepeId];\n        // solhint-disable-next-line not-rely-on-time\n        uint256 timePassed = now - auctions[_pepeId].auctionBegin;\n\n        // If auction ended return auction end price.\n        // solhint-disable-next-line not-rely-on-time\n        if (now >= auction.auctionEnd) {\n            return auction.endPrice;\n        } else {\n            // Can be negative\n            int256 priceDifference = int256(auction.endPrice) - int256(auction.beginPrice);\n            // Always positive\n            int256 duration = int256(auction.auctionEnd) - int256(auction.auctionBegin);\n\n            // As already proven in practice by CryptoKitties:\n            //  timePassed -> 64 bits at most\n            //  priceDifference -> 128 bits at most\n            //  timePassed * priceDifference -> 64 + 128 bits at most\n            int256 priceChange = priceDifference * int256(timePassed) / duration;\n\n            // Will be positive, both operands are less than 256 bits\n            int256 price = int256(auction.beginPrice) + priceChange;\n\n            return uint256(price);\n        }\n    }\n\n  /**\n   * @dev collect the fees from the auction\n   */\n    function getFees() public {\n        beneficiary.transfer(address(this).balance);\n    }\n\n\n}\n\n// File: contracts/CozyTimeAuction.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.24;\n\n\n\n/** @title CozyTimeAuction */\ncontract CozyTimeAuction is AuctionBase {\n    // solhint-disable-next-line\n    constructor (address _pepeContract, address _affiliateContract) AuctionBase(_pepeContract, _affiliateContract) public {\n\n    }\n\n    /**\n     * @dev Start an auction\n     * @param  _pepeId The id of the pepe to start the auction for\n     * @param  _beginPrice Start price of the auction\n     * @param  _endPrice End price of the auction\n     * @param  _duration How long the auction should take\n     */\n    function startAuction(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(pepeContract.getCozyAgain(_pepeId) <= now);//need to have this extra check\n        super.startAuction(_pepeId, _beginPrice, _endPrice, _duration);\n    }\n\n    /**\n     * @dev Start a auction direclty from the PepeBase smartcontract\n     * @param  _pepeId The id of the pepe to start the auction for\n     * @param  _beginPrice Start price of the auction\n     * @param  _endPrice End price of the auction\n     * @param  _duration How long the auction should take\n     * @param  _seller The address of the seller\n     */\n    // solhint-disable-next-line max-line-length\n    function startAuctionDirect(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration, address _seller) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(pepeContract.getCozyAgain(_pepeId) <= now);//need to have this extra check\n        super.startAuctionDirect(_pepeId, _beginPrice, _endPrice, _duration, _seller);\n    }\n\n    /**\n     * @dev Buy cozy right from the auction\n     * @param  _pepeId Pepe to cozy with\n     * @param  _cozyCandidate the pepe to cozy with\n     * @param  _candidateAsFather Is the _cozyCandidate father?\n     * @param  _pepeReceiver address receiving the pepe after cozy time\n     */\n    // solhint-disable-next-line max-line-length\n    function buyCozy(uint256 _pepeId, uint256 _cozyCandidate, bool _candidateAsFather, address _pepeReceiver) public payable {\n        require(address(pepeContract) == msg.sender); //caller needs to be the PepeBase contract\n\n        PepeAuction storage auction = auctions[_pepeId];\n        // solhint-disable-next-line not-rely-on-time\n        require(now < auction.auctionEnd);// auction must be still going\n\n        uint256 price = calculateBid(_pepeId);\n        require(msg.value >= price);//must send enough ether\n        uint256 totalFee = price * fee / FEE_DIVIDER; //safe math needed?\n\n        //Send ETH to seller\n        auction.seller.transfer(price - totalFee);\n        //send ETH to beneficiary\n\n        address affiliate = affiliateContract.userToAffiliate(_pepeReceiver);\n\n        //solhint-disable-next-line\n        if (affiliate != address(0) && affiliate.send(totalFee / 2)) { //if user has affiliate\n            //nothing just to suppress warning\n        }\n\n        //actual cozytiming\n        if (_candidateAsFather) {\n            if (!pepeContract.cozyTime(auction.pepeId, _cozyCandidate, _pepeReceiver)) {\n                revert();\n            }\n        } else {\n          // Swap around the two pepes, they have no set gender, the user decides what they are.\n            if (!pepeContract.cozyTime(_cozyCandidate, auction.pepeId, _pepeReceiver)) {\n                revert();\n            }\n        }\n\n        //Send pepe to seller of auction\n        if (!pepeContract.transfer(auction.seller, _pepeId)) {\n            revert(); //can't complete transfer if this fails\n        }\n\n        if (msg.value > price) { //return ether send to much\n            _pepeReceiver.transfer(msg.value - price);\n        }\n\n        emit AuctionWon(_pepeId, _pepeReceiver, auction.seller);//emit event\n\n        delete auctions[_pepeId];//deletes auction\n    }\n\n    /**\n     * @dev Buy cozytime and pass along affiliate\n     * @param  _pepeId Pepe to cozy with\n     * @param  _cozyCandidate the pepe to cozy with\n     * @param  _candidateAsFather Is the _cozyCandidate father?\n     * @param  _pepeReceiver address receiving the pepe after cozy time\n     * @param  _affiliate Affiliate address to set\n     */\n    //solhint-disable-next-line max-line-length\n    function buyCozyAffiliated(uint256 _pepeId, uint256 _cozyCandidate, bool _candidateAsFather, address _pepeReceiver, address _affiliate) public payable {\n        affiliateContract.setAffiliate(_pepeReceiver, _affiliate);\n        buyCozy(_pepeId, _cozyCandidate, _candidateAsFather, _pepeReceiver);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000084ac94f17622241f313511b629e5e98f489ad6e400000000000000000000000008014573ff457d8e08d6fbf2813617def4f28e54"
}