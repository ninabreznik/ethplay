{
  "address": "0x6fd1dada61f2d210a1e4e47b672f73bc851862f9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EestyCoinToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-01\n*/\n\npragma solidity ^0.4.13;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\n/**\n * @title EestyCoinToken contract\n * @author Anatollix\n */\ncontract EestyCoinToken is StandardToken, CanReclaimToken {\n    using SafeMath for uint256;\n\n    string public name = \"EESTYCOIN\";\n    string public symbol = \"EEC\";\n    uint256 public decimals = 18;\n\n    uint8 public emissionStage;\n    uint256[3] public emissionStages;\n\n    modifier canDoEmission() {\n        require(emissionStage < 3);\n        _;\n    }\n\n    event Emission(uint8 stage, uint256 amount);\n\n    function EestyCoinToken() {\n        emissionStages[0] = 10000000000000000000000000; // totalSupply 10 000 000\n        emissionStages[1] = 990000000000000000000000000; // totalSupply 1 000 000 000\n        emissionStages[2] = 7000000000000000000000000000; // totalSupply 8 000 000 000\n    }\n\n    function nextStageEmission() canDoEmission onlyOwner public {\n        uint256 emission = emissionStages[emissionStage];\n\n        totalSupply = totalSupply.add(emission);\n        balances[owner] = balances[owner].add(emission);\n        emissionStage = emissionStage + 1;\n\n        Emission(emissionStage, emission);\n        Transfer(0x0, owner, emission);\n    }\n}",
  "bytecode": "606060405260408051908101604052600981527f4545535459434f494e00000000000000000000000000000000000000000000006020820152600490805161004b92916020019061010f565b5060408051908101604052600381527f45454300000000000000000000000000000000000000000000000000000000006020820152600590805161009392916020019061010f565b50601260065534156100a457600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b6a084595161401484a000000600860005b0160005b50556b0332e8a789bc7ef49e000000600860015b0160005b50556b169e43a85eb381aa58000000600860025b0160005b50555b6101af565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015057805160ff191683800117855561017d565b8280016001018555821561017d579182015b8281111561017d578251825591602001919060010190610162565b5b5061018a92915061018e565b5090565b6101ac91905b8082111561018a5760008155600101610194565b5090565b90565b610de5806101be6000396000f300606060405236156100d55763ffffffff60e060020a60003504166306fdde0381146100da578063095ea7b31461016557806317ffc3201461019b57806318160ddd146101bc57806323b872dd146101e1578063313ce5671461021d578063661884631461024257806370a08231146102785780638da5cb5b146102a957806395d89b41146102d8578063a9059cbb14610363578063c185d77214610399578063c979113c146103c1578063d73dd623146103d6578063dd62ed3e1461040c578063e6f6e19f14610443578063f2fde38b1461046c575b600080fd5b34156100e557600080fd5b6100ed61048d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012a5780820151818401525b602001610111565b50505050905090810190601f1680156101575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017057600080fd5b610187600160a060020a036004351660243561052b565b604051901515815260200160405180910390f35b34156101a657600080fd5b6101ba600160a060020a0360043516610598565b005b34156101c757600080fd5b6101cf610650565b60405190815260200160405180910390f35b34156101ec57600080fd5b610187600160a060020a0360043581169060243516604435610656565b604051901515815260200160405180910390f35b341561022857600080fd5b6101cf610782565b60405190815260200160405180910390f35b341561024d57600080fd5b610187600160a060020a0360043516602435610788565b604051901515815260200160405180910390f35b341561028357600080fd5b6101cf600160a060020a0360043516610884565b60405190815260200160405180910390f35b34156102b457600080fd5b6102bc6108a3565b604051600160a060020a03909116815260200160405180910390f35b34156102e357600080fd5b6100ed6108b2565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012a5780820151818401525b602001610111565b50505050905090810190601f1680156101575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036e57600080fd5b610187600160a060020a0360043516602435610950565b604051901515815260200160405180910390f35b34156103a457600080fd5b6101cf600435610a27565b60405190815260200160405180910390f35b34156103cc57600080fd5b6101ba610a3f565b005b34156103e157600080fd5b610187600160a060020a0360043516602435610b8e565b604051901515815260200160405180910390f35b341561041757600080fd5b6101cf600160a060020a0360043581169060243516610c33565b60405190815260200160405180910390f35b341561044e57600080fd5b610456610c60565b60405160ff909116815260200160405180910390f35b341561047757600080fd5b6101ba600160a060020a0360043516610c69565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60035460009033600160a060020a039081169116146105b657600080fd5b81600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561060d57600080fd5b6102c65a03f1151561061e57600080fd5b505050604051805160035490925061064a9150600160a060020a0384811691168363ffffffff610d0216565b5b5b5050565b60005481565b600080600160a060020a038416151561066e57600080fd5b50600160a060020a038085166000818152600260209081526040808320339095168352938152838220549282526001905291909120546106b4908463ffffffff610d8816565b600160a060020a0380871660009081526001602052604080822093909355908616815220546106e9908463ffffffff610d9f16565b600160a060020a038516600090815260016020526040902055610712818463ffffffff610d8816565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b60065481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107e557600160a060020a03338116600090815260026020908152604080832093881683529290529081205561081c565b6107f5818463ffffffff610d8816565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b505050505081565b6000600160a060020a038316151561096757600080fd5b600160a060020a033316600090815260016020526040902054610990908363ffffffff610d8816565b600160a060020a0333811660009081526001602052604080822093909355908516815220546109c5908363ffffffff610d9f16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b60088160038110610a3457fe5b0160005b5054905081565b600754600090600360ff90911610610a5657600080fd5b60035433600160a060020a03908116911614610a7157600080fd5b60075460089060ff1660038110610a8457fe5b0160005b5054600054909150610aa0908263ffffffff610d9f16565b6000908155600354600160a060020a0316815260016020526040902054610acd908263ffffffff610d9f16565b600354600160a060020a0316600090815260016020819052604091829020929092556007805460ff808216909401841660ff1990911617908190557f93a2fa6c001a3c6bb64a3a2da49a5818df3825ce7609b1fa23585a415580c81892169083905160ff909216825260208201526040908101905180910390a1600354600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35b5b5b50565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610bc6908363ffffffff610d9f16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60075460ff1681565b60035433600160a060020a03908116911614610c8457600080fd5b600160a060020a0381161515610c9957600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610d5f57600080fd5b6102c65a03f11515610d7057600080fd5b505050604051805190501515610d8257fe5b5b505050565b600082821115610d9457fe5b508082035b92915050565b600082820183811015610dae57fe5b8091505b50929150505600a165627a7a723058208a523d1b22c20948c53386925dc90c046460ef14802c71efaa509243d649590c0029"
}