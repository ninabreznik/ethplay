{
  "address": "0xf25c91c87e0b1fd9b4064af0f427157aab0193a7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BASIC",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-22\n*/\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier onlyNewOwner() {\n        require(msg.sender != address(0));\n        require(msg.sender == newOwner);\n        _;\n    }\n    \n    function isOwner(address account) public view returns (bool) {\n        if( account == owner ){\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public onlyNewOwner returns(bool) {\n        emit OwnershipTransferred(owner, newOwner);        \n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\ncontract PauserRole is Ownable{\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender)|| isOwner(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n    \n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) internal _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract BASIC is ERC20Detailed, ERC20Pausable, ERC20Burnable {\n    \n    struct LockInfo {\n        uint256 _releaseTime;\n        uint256 _amount;\n    }\n    \n    address public implementation;\n\n    mapping (address => LockInfo[]) public timelockList;\n\tmapping (address => bool) public frozenAccount;\n    \n    event Freeze(address indexed holder);\n    event Unfreeze(address indexed holder);\n    event Lock(address indexed holder, uint256 value, uint256 releaseTime);\n    event Unlock(address indexed holder, uint256 value);\n\n    modifier notFrozen(address _holder) {\n        require(!frozenAccount[_holder]);\n        _;\n    }\n    \n    constructor() ERC20Detailed(\"BASIC Token\", \"BASIC\", 18) public  {\n        \n        _mint(msg.sender, 10000000000 * (10 ** 18));\n    }\n    \n    function balanceOf(address owner) public view returns (uint256) {\n        \n        uint256 totalBalance = super.balanceOf(owner);\n        if( timelockList[owner].length >0 ){\n            for(uint i=0; i<timelockList[owner].length;i++){\n                totalBalance = totalBalance.add(timelockList[owner][i]._amount);\n            }\n        }\n        \n        return totalBalance;\n    }\n    \n    function transfer(address to, uint256 value) public notFrozen(msg.sender) returns (bool) {\n        if (timelockList[msg.sender].length > 0 ) {\n            _autoUnlock(msg.sender);            \n        }\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public notFrozen(from) returns (bool) {\n        if (timelockList[from].length > 0) {\n            _autoUnlock(msg.sender);            \n        }\n        return super.transferFrom(from, to, value);\n    }\n    \n    function freezeAccount(address holder) public onlyPauser returns (bool) {\n        require(!frozenAccount[holder]);\n        frozenAccount[holder] = true;\n        emit Freeze(holder);\n        return true;\n    }\n\n    function unfreezeAccount(address holder) public onlyPauser returns (bool) {\n        require(frozenAccount[holder]);\n        frozenAccount[holder] = false;\n        emit Unfreeze(holder);\n        return true;\n    }\n    \n    function lock(address holder, uint256 value, uint256 releaseTime) public onlyPauser returns (bool) {\n        require(_balances[holder] >= value,\"There is not enough balances of holder.\");\n        _lock(holder,value,releaseTime);\n        \n        \n        return true;\n    }\n    \n    function transferWithLock(address holder, uint256 value, uint256 releaseTime) public onlyPauser returns (bool) {\n        _transfer(msg.sender, holder, value);\n        _lock(holder,value,releaseTime);\n        return true;\n    }\n    \n    function unlock(address holder, uint256 idx) public onlyPauser returns (bool) {\n        require( timelockList[holder].length > idx, \"There is not lock info.\");\n        _unlock(holder,idx);\n        return true;\n    }\n    \n    /**\n     * @dev Upgrades the implementation address\n     * @param _newImplementation address of the new implementation\n     */\n    function upgradeTo(address _newImplementation) public onlyOwner {\n        require(implementation != _newImplementation);\n        _setImplementation(_newImplementation);\n    }\n    \n    function _lock(address holder, uint256 value, uint256 releaseTime) internal returns(bool) {\n        _balances[holder] = _balances[holder].sub(value);\n        timelockList[holder].push( LockInfo(releaseTime, value) );\n        \n        emit Lock(holder, value, releaseTime);\n        return true;\n    }\n    \n    function _unlock(address holder, uint256 idx) internal returns(bool) {\n        LockInfo storage lockinfo = timelockList[holder][idx];\n        uint256 releaseAmount = lockinfo._amount;\n\n        delete timelockList[holder][idx];\n        timelockList[holder][idx] = timelockList[holder][timelockList[holder].length.sub(1)];\n        timelockList[holder].length -=1;\n        \n        emit Unlock(holder, releaseAmount);\n        _balances[holder] = _balances[holder].add(releaseAmount);\n        \n        return true;\n    }\n    \n    function _autoUnlock(address holder) internal returns(bool) {\n        for(uint256 idx =0; idx < timelockList[holder].length ; idx++ ) {\n            if (timelockList[holder][idx]._releaseTime <= now) {\n                // If lockupinfo was deleted, loop restart at same position.\n                if( _unlock(holder, idx) ) {\n                    idx -=1;\n                }\n            }\n        }\n        return true;\n    }\n    \n    /**\n     * @dev Sets the address of the current implementation\n     * @param _newImp address of the new implementation\n     */\n    function _setImplementation(address _newImp) internal {\n        implementation = _newImp;\n    }\n    \n    /**\n     * @dev Fallback function allowing to perform a delegatecall \n     * to the given implementation. This function will return \n     * whatever the implementation call returns\n     */\n    function () payable external {\n        address impl = implementation;\n        require(impl != address(0));\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize)\n            let result := delegatecall(gas, impl, ptr, calldatasize, 0, 0)\n            let size := returndatasize\n            returndatacopy(ptr, 0, size)\n            \n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604080518082018252600b81527f424153494320546f6b656e00000000000000000000000000000000000000000060208083019182528351808501909452600584527f4241534943000000000000000000000000000000000000000000000000000000908401528151919291601291620000909160009190620002d2565b508151620000a6906001906020850190620002d2565b506002805460ff191660ff92909216919091179055505060068054336001600160a01b03199182168117909255600780549091169055620000ee906200011d602090811b901c565b6009805460ff1916905562000117336b204fce5e3e250261100000006200016f602090811b901c565b62000377565b620001388160086200022c60201b62001a7f1790919060201c565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6001600160a01b0382166200018357600080fd5b6200019f816005546200028260201b620014a01790919060201c565b6005556001600160a01b038216600090815260036020908152604090912054620001d4918390620014a062000282821b17901c565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0381166200024057600080fd5b6200025282826200029c60201b60201c565b156200025d57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200029557600080fd5b9392505050565b60006001600160a01b038216620002b257600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200031557805160ff191683800117855562000345565b8280016001018555821562000345579182015b828111156200034557825182559160200191906001019062000328565b506200035392915062000357565b5090565b6200037491905b808211156200035357600081556001016200035e565b90565b611ba080620003876000396000f3fe6080604052600436106101f95760003560e01c806379ba50971161010d578063a9059cbb116100a0578063dd62ed3e1161006f578063dd62ed3e146107b1578063de6baccb146107ec578063e2ab691d1461082b578063f26c159f1461086a578063f2fde38b1461089d576101f9565b8063a9059cbb146106de578063b414d4b614610717578063d26c4a761461074a578063d4ee1d901461079c576101f9565b80638456cb59116100dc5780638456cb59146106665780638da5cb5b1461067b57806395d89b4114610690578063a457c2d7146106a5576101f9565b806379ba5097146105ac57806379cc6790146105c15780637eee288d146105fa57806382dc1ec414610633576101f9565b80633f4ba83a116101905780635c975abb1161015f5780635c975abb146104e95780636b2c0f55146104fe5780636ef8d66d1461053157806370a0823114610546578063788649ea14610579576101f9565b80633f4ba83a1461044657806342966c681461045b57806346fbf68e146104855780635c60da1b146104b8576101f9565b80632f54bf6e116101cc5780632f54bf6e1461037a578063313ce567146103ad5780633659cfe6146103d8578063395093511461040d576101f9565b806306fdde0314610239578063095ea7b3146102c357806318160ddd1461031057806323b872dd14610337575b60095461010090046001600160a01b03168061021457600080fd5b60405136600082376000803683855af43d806000843e818015610235578184f35b8184fd5b34801561024557600080fd5b5061024e6108d0565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610288578181015183820152602001610270565b50505050905090810190601f1680156102b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102cf57600080fd5b506102fc600480360360408110156102e657600080fd5b506001600160a01b038135169060200135610967565b604080519115158252519081900360200190f35b34801561031c57600080fd5b5061032561098b565b60408051918252519081900360200190f35b34801561034357600080fd5b506102fc6004803603606081101561035a57600080fd5b506001600160a01b03813581169160208101359091169060400135610991565b34801561038657600080fd5b506102fc6004803603602081101561039d57600080fd5b50356001600160a01b03166109f6565b3480156103b957600080fd5b506103c2610a20565b6040805160ff9092168252519081900360200190f35b3480156103e457600080fd5b5061040b600480360360208110156103fb57600080fd5b50356001600160a01b0316610a29565b005b34801561041957600080fd5b506102fc6004803603604081101561043057600080fd5b506001600160a01b038135169060200135610a6c565b34801561045257600080fd5b5061040b610a89565b34801561046757600080fd5b5061040b6004803603602081101561047e57600080fd5b5035610af8565b34801561049157600080fd5b506102fc600480360360208110156104a857600080fd5b50356001600160a01b0316610b02565b3480156104c457600080fd5b506104cd610b1b565b604080516001600160a01b039092168252519081900360200190f35b3480156104f557600080fd5b506102fc610b2f565b34801561050a57600080fd5b5061040b6004803603602081101561052157600080fd5b50356001600160a01b0316610b38565b34801561053d57600080fd5b5061040b610b58565b34801561055257600080fd5b506103256004803603602081101561056957600080fd5b50356001600160a01b0316610b63565b34801561058557600080fd5b506102fc6004803603602081101561059c57600080fd5b50356001600160a01b0316610c0e565b3480156105b857600080fd5b506102fc610ca4565b3480156105cd57600080fd5b5061040b600480360360408110156105e457600080fd5b506001600160a01b038135169060200135610d2e565b34801561060657600080fd5b506102fc6004803603604081101561061d57600080fd5b506001600160a01b038135169060200135610d3c565b34801561063f57600080fd5b5061040b6004803603602081101561065657600080fd5b50356001600160a01b0316610de2565b34801561067257600080fd5b5061040b610e0c565b34801561068757600080fd5b506104cd610e7f565b34801561069c57600080fd5b5061024e610e8e565b3480156106b157600080fd5b506102fc600480360360408110156106c857600080fd5b506001600160a01b038135169060200135610eee565b3480156106ea57600080fd5b506102fc6004803603604081101561070157600080fd5b506001600160a01b038135169060200135610f0b565b34801561072357600080fd5b506102fc6004803603602081101561073a57600080fd5b50356001600160a01b0316610f5d565b34801561075657600080fd5b506107836004803603604081101561076d57600080fd5b506001600160a01b038135169060200135610f72565b6040805192835260208301919091528051918290030190f35b3480156107a857600080fd5b506104cd610fab565b3480156107bd57600080fd5b50610325600480360360408110156107d457600080fd5b506001600160a01b0381358116916020013516610fba565b3480156107f857600080fd5b506102fc6004803603606081101561080f57600080fd5b506001600160a01b038135169060208101359060400135610fe5565b34801561083757600080fd5b506102fc6004803603606081101561084e57600080fd5b506001600160a01b038135169060208101359060400135611029565b34801561087657600080fd5b506102fc6004803603602081101561088d57600080fd5b50356001600160a01b03166110a6565b3480156108a957600080fd5b5061040b600480360360208110156108c057600080fd5b50356001600160a01b0316611140565b60008054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095c5780601f106109315761010080835404028352916020019161095c565b820191906000526020600020905b81548152906001019060200180831161093f57829003601f168201915b505050505090505b90565b60095460009060ff161561097a57600080fd5b610984838361118c565b9392505050565b60055490565b6001600160a01b0383166000908152600b6020526040812054849060ff16156109b957600080fd5b6001600160a01b0385166000908152600a6020526040902054156109e2576109e0336111f6565b505b6109ed85858561127d565b95945050505050565b6006546000906001600160a01b0383811691161415610a1757506001610a1b565b5060005b919050565b60025460ff1690565b6006546001600160a01b03163314610a4057600080fd5b6009546001600160a01b03828116610100909204161415610a6057600080fd5b610a698161129b565b50565b60095460009060ff1615610a7f57600080fd5b61098483836112c3565b610a9233610b02565b80610aa15750610aa1336109f6565b610aaa57600080fd5b60095460ff16610ab957600080fd5b6009805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b610a69338261135f565b6000610b1560088363ffffffff61140816565b92915050565b60095461010090046001600160a01b031681565b60095460ff1690565b6006546001600160a01b03163314610b4f57600080fd5b610a698161143d565b610b613361143d565b565b600080610b6f83611485565b6001600160a01b0384166000908152600a602052604090205490915015610b155760005b6001600160a01b0384166000908152600a6020526040902054811015610c07576001600160a01b0384166000908152600a602052604090208054610bfd919083908110610bdc57fe5b906000526020600020906002020160010154836114a090919063ffffffff16565b9150600101610b93565b5092915050565b6000610c1933610b02565b80610c285750610c28336109f6565b610c3157600080fd5b6001600160a01b0382166000908152600b602052604090205460ff16610c5657600080fd5b6001600160a01b0382166000818152600b6020526040808220805460ff19169055517fca5069937e68fd197927055037f59d7c90bf75ac104e6e375539ef480c3ad6ee9190a2506001919050565b600033610cb057600080fd5b6007546001600160a01b03163314610cc757600080fd5b6007546006546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360078054600680546001600160a01b03199081166001600160a01b0384161790915516905590565b610d3882826114b2565b5050565b6000610d4733610b02565b80610d565750610d56336109f6565b610d5f57600080fd5b6001600160a01b0383166000908152600a60205260409020548210610dce5760408051600160e51b62461bcd02815260206004820152601760248201527f5468657265206973206e6f74206c6f636b20696e666f2e000000000000000000604482015290519081900360640190fd5b610dd88383611562565b5060019392505050565b610deb33610b02565b80610dfa5750610dfa336109f6565b610e0357600080fd5b610a698161172b565b610e1533610b02565b80610e245750610e24336109f6565b610e2d57600080fd5b60095460ff1615610e3d57600080fd5b6009805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6006546001600160a01b031681565b60018054604080516020601f6002600019610100878916150201909516949094049384018190048102820181019092528281526060939092909183018282801561095c5780601f106109315761010080835404028352916020019161095c565b60095460009060ff1615610f0157600080fd5b6109848383611773565b336000818152600b602052604081205490919060ff1615610f2b57600080fd5b336000908152600a602052604090205415610f4b57610f49336111f6565b505b610f5584846117bc565b949350505050565b600b6020526000908152604090205460ff1681565b600a6020528160005260406000208181548110610f8b57fe5b600091825260209091206002909102018054600190910154909250905082565b6007546001600160a01b031681565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6000610ff033610b02565b80610fff5750610fff336109f6565b61100857600080fd5b6110133385856117d9565b61101e8484846118a6565b506001949350505050565b600061103433610b02565b806110435750611043336109f6565b61104c57600080fd5b6001600160a01b03841660009081526003602052604090205483111561101357604051600160e51b62461bcd028152600401808060200182810382526027815260200180611b2e6027913960400191505060405180910390fd5b60006110b133610b02565b806110c057506110c0336109f6565b6110c957600080fd5b6001600160a01b0382166000908152600b602052604090205460ff16156110ef57600080fd5b6001600160a01b0382166000818152600b6020526040808220805460ff19166001179055517faf85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc3230499190a2506001919050565b6006546001600160a01b0316331461115757600080fd5b6001600160a01b03811661116a57600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b0383166111a157600080fd5b3360008181526004602090815260408083206001600160a01b0388168085529083529281902086905580518681529051929392600080516020611b55833981519152929181900390910190a350600192915050565b6000805b6001600160a01b0383166000908152600a6020526040902054811015611274576001600160a01b0383166000908152600a6020526040902080544291908390811061124157fe5b9060005260206000209060020201600001541161126c576112628382611562565b1561126c57600019015b6001016111fa565b50600192915050565b60095460009060ff161561129057600080fd5b610f5584848461196b565b600980546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60006001600160a01b0383166112d857600080fd5b3360009081526004602090815260408083206001600160a01b038716845290915290205461130c908363ffffffff6114a016565b3360008181526004602090815260408083206001600160a01b038916808552908352928190208590558051948552519193600080516020611b55833981519152929081900390910190a350600192915050565b6001600160a01b03821661137257600080fd5b600554611385908263ffffffff611a2216565b6005556001600160a01b0382166000908152600360205260409020546113b1908263ffffffff611a2216565b6001600160a01b0383166000818152600360209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b60006001600160a01b03821661141d57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61144e60088263ffffffff611a3716565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6001600160a01b031660009081526003602052604090205490565b60008282018381101561098457600080fd5b6001600160a01b03821660009081526004602090815260408083203384529091529020546114e6908263ffffffff611a2216565b6001600160a01b0383166000908152600460209081526040808320338452909152902055611514828261135f565b6001600160a01b038216600081815260046020908152604080832033808552908352928190205481519081529051929392600080516020611b55833981519152929181900390910190a35050565b6001600160a01b0382166000908152600a6020526040812080548291908490811061158957fe5b600091825260208083206001600290930201918201546001600160a01b0388168452600a9091526040909220805491935090859081106115c557fe5b60009182526020808320600290920290910182815560019081018390556001600160a01b0388168352600a90915260409091208054909161160c919063ffffffff611a2216565b8154811061161657fe5b9060005260206000209060020201600a6000876001600160a01b03166001600160a01b03168152602001908152602001600020858154811061165457fe5b60009182526020808320845460029093020191825560019384015493909101929092556001600160a01b0387168152600a909152604090208054600019019061169d9082611ad8565b506040805182815290516001600160a01b038716917f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f1919081900360200190a26001600160a01b038516600090815260036020526040902054611706908263ffffffff6114a016565b6001600160a01b03861660009081526003602052604090205550600191505092915050565b61173c60088263ffffffff611a7f16565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b60006001600160a01b03831661178857600080fd5b3360009081526004602090815260408083206001600160a01b038716845290915290205461130c908363ffffffff611a2216565b60095460009060ff16156117cf57600080fd5b6109848383611acb565b6001600160a01b0382166117ec57600080fd5b6001600160a01b038316600090815260036020526040902054611815908263ffffffff611a2216565b6001600160a01b03808516600090815260036020526040808220939093559084168152205461184a908263ffffffff6114a016565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6001600160a01b0383166000908152600360205260408120546118cf908463ffffffff611a2216565b6001600160a01b038516600081815260036020908152604080832094909455600a8152838220845180860186528781528083018981528254600181810185559386529484902091516002909502909101938455519201919091558251868152908101859052825191927f49eaf4942f1237055eb4cfa5f31c9dfe50d5b4ade01e021f7de8be2fbbde557b92918290030190a25060019392505050565b6001600160a01b038316600090815260046020908152604080832033845290915281205461199f908363ffffffff611a2216565b6001600160a01b03851660009081526004602090815260408083203384529091529020556119ce8484846117d9565b6001600160a01b038416600081815260046020908152604080832033808552908352928190205481519081529051929392600080516020611b55833981519152929181900390910190a35060019392505050565b600082821115611a3157600080fd5b50900390565b6001600160a01b038116611a4a57600080fd5b611a548282611408565b611a5d57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b038116611a9257600080fd5b611a9c8282611408565b15611aa657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006112743384846117d9565b815481835581811115611b0457600202816002028360005260206000209182019101611b049190611b09565b505050565b61096491905b80821115611b295760008082556001820155600201611b0f565b509056fe5468657265206973206e6f7420656e6f7567682062616c616e636573206f6620686f6c6465722e8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058200e142307821b4bdff909786cc1c599cec8ffa57a72a8fac005b13bde0b290fd20029"
}