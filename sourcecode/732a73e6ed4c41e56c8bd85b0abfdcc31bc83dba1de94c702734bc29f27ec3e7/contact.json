{
  "address": "0xa846bdd058d9ef4cf472ecb10a46639a1114a161",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LCXCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-18\n*/\n\npragma solidity ^0.4.19;\n\n//safeMath Library for Arithmetic operations\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    \n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\ncontract LCXCoin is ERC20Interface, Owned, SafeMath {\n    string public symbol;\n    string public  name;\n    uint256 public decimals;\n    uint256 public _totalSupply;\n    uint256 public burnt;\n    address public charityFund = 0x1F53b1E1E9771A38eDA9d144eF4877341e47CF51;\n    address public bountyFund = 0xfF311F52ddCC4E9Ba94d2559975efE3eb1Ea3bc6;\n    address public tradingFund = 0xf609127b10DaB6e53B7c489899B265c46Cee1E9d;\n    \n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    \n    mapping (address => bool) public frozenAccount;\n    \n    \n    event FrozenFunds(address target, bool frozen); // notifies clients about the fund frozen\n    event Burn(address indexed burner, uint256 value);\n    event Burnfrom(address indexed _from, uint256 value);\n  \n    // Constructor\n    constructor () public {\n        symbol = \"LCX\";\n        name = \"London Crypto Exchange\";\n        decimals = 18;\n        _totalSupply = 113000000 * 10 ** uint(decimals);    //totalSupply = initialSupply * 10 ** uint(decimals);\n        balances[charityFund] = safeAdd(balances[charityFund], 13000000 * (10 ** decimals)); // 13M to charityFund\n        emit Transfer(address(0), charityFund, 13000000 * (10 ** decimals));     // Event for token transfer\n        balances[bountyFund] = safeAdd(balances[bountyFund], 25000000 * (10 ** decimals)); // 25M to bountyFund\n        emit Transfer(address(0), bountyFund, 25000000 * (10 ** decimals));     // Event for token transfer\n        balances[tradingFund] = safeAdd(balances[tradingFund], 75000000 * (10 ** decimals)); // 75M to tradingFund\n        emit Transfer(address(0), tradingFund, 75000000 * (10 ** decimals));     // Event for token transfer\n    }\n\n    // Total supply\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n    // Get the token balance for account tokenOwner\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // Internal transfer, only can be called by this contract \n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               \t\t\t// Prevent transfer to 0x0 address.\n        require (balances[_from] >= _value);               \t\t\t    // Check if the sender has enough balance\n        require (balances[_to] + _value > balances[_to]); \t\t\t    // Check for overflows\n        require(!frozenAccount[_from]);                     \t\t\t// Check if sender is frozen\n        require(!frozenAccount[_to]);                       \t\t\t// Check if recipient is frozen\n        uint previousBalances = balances[_from] + balances[_to];\t\t// Save this for an assertion in the future\n        balances[_from] = safeSub(balances[_from],_value);    \t\t\t// Subtract from the sender\n        balances[_to] = safeAdd(balances[_to],_value);        \t\t\t// Add the same to the recipient\n        emit Transfer(_from, _to, _value);\t\t\t\t\t\t\t\t\t// raise Event\n        assert(balances[_from] + balances[_to] == previousBalances); \n    }\n    \n   \n    // Transfer the balance from token owner's account to user account\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n        _transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    // Transfer tokens from the from account to the to account\n  \n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        \n        require(tokens <= allowed[from][msg.sender]); \n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens); \n        _transfer(from, to, tokens);\n        return true;\n    }\n    \n    /*\n     * Set allowance for other address\n     *\n     * Allows `spender` to spend no more than `_value` tokens in your behalf\n     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n     * recommends that there are no checks for the approval double-spend attack\n     * as this should be implemented in user interfaces \n\n     */\n     \n    function approve(address spender, uint tokens) public returns (bool success) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((tokens == 0) || (allowed[msg.sender][spender] == 0));\n        \n        allowed[msg.sender][spender] = tokens; // allow tokens to spender\n        emit Approval(msg.sender, spender, tokens); // raise Approval Event\n        return true;\n    }\n\n    // Get the amount of tokens approved by the owner that can be transferred to the spender's account\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account. The spender contract function\n    // receiveApproval(...) is then executed\n    ///* Allow another contract to spend some tokens in your behalf */\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        //allowed[msg.sender][spender] = tokens;\n        //Approval(msg.sender, spender, tokens);\n        \n        require(approve(spender, tokens)); // approve function to be called first\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n    \n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = safeSub(balances[burner],_value);\n        _totalSupply = safeSub(_totalSupply,_value);\n        burnt = safeAdd(burnt,_value);\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n    }\n  \n    function burnFrom(address _from, uint256 _value) public onlyOwner returns  (bool success) {\n        require (balances[_from] >= _value);            \n        require (msg.sender == owner);   \n        _totalSupply = safeSub(_totalSupply,_value);\n        burnt = safeAdd(burnt,_value);\n        balances[_from] = safeSub(balances[_from],_value);                      \n        emit Burnfrom(_from, _value);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Owner can take back  any accidentally sent ERC20 tokens from any address\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "608060405260078054600160a060020a0319908116731f53b1e1e9771a38eda9d144ef4877341e47cf511790915560088054821673ff311f52ddcc4e9ba94d2559975efe3eb1ea3bc61790556009805490911673f609127b10dab6e53b7c489899b265c46cee1e9d1790553480156200007757600080fd5b5060008054600160a060020a031916331790556040805180820190915260038082527f4c435800000000000000000000000000000000000000000000000000000000006020909201918252620000d091600291620002fa565b506040805180820190915260168082527f4c6f6e646f6e2043727970746f2045786368616e67650000000000000000000060209092019182526200011791600391620002fa565b5060126004556a5d78ae464874e411000000600555600754600160a060020a03166000908152600a602052604090205462000167906a0ac0db698068112d000000640100000000620002e3810204565b60078054600160a060020a039081166000908152600a602081815260408084209690965593546004548651920a62c65d4002825294519490921693909260008051602062001350833981519152928290030190a3600854600160a060020a03166000908152600a6020819052604090912054600454620001f7920a63017d784002640100000000620002e3810204565b60088054600160a060020a039081166000908152600a602081815260408084209690965593546004548651920a63017d784002825294519490921693909260008051602062001350833981519152928290030190a3600954600160a060020a03166000908152600a602081905260409091205460045462000288920a63047868c002640100000000620002e3810204565b60098054600160a060020a039081166000908152600a602081815260408084209690965593546004548651920a63047868c002825294519490921693909260008051602062001350833981519152928290030190a36200039f565b81810182811015620002f457600080fd5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033d57805160ff19168380011785556200036d565b828001600101855582156200036d579182015b828111156200036d57825182559160200191906001019062000350565b506200037b9291506200037f565b5090565b6200039c91905b808211156200037b576000815560010162000386565b90565b610fa180620003af6000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461016e578063095ea7b3146101f857806318160ddd1461023057806323b872dd14610257578063313ce567146102815780633eaaf86b1461029657806342966c68146102ab57806357f1d278146102c557806370a08231146102f657806377e1a9fc1461031757806379ba50971461032c57806379cc6790146103415780638da5cb5b1461036557806395d89b411461037a578063a293d1e81461038f578063a9059cbb146103aa578063b192da2d146103ce578063b414d4b6146103e3578063b5931f7c14610404578063c06c66ca1461041f578063cae9ca5114610434578063d05c78da1461049d578063d4ee1d90146104b8578063dc39d06d146104cd578063dd62ed3e146104f1578063e6cb901314610518578063e724529c14610533578063f2fde38b14610559575b600080fd5b34801561017a57600080fd5b5061018361057a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101bd5781810151838201526020016101a5565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020457600080fd5b5061021c600160a060020a0360043516602435610608565b604080519115158252519081900360200190f35b34801561023c57600080fd5b506102456106ab565b60408051918252519081900360200190f35b34801561026357600080fd5b5061021c600160a060020a03600435811690602435166044356106b1565b34801561028d57600080fd5b50610245610748565b3480156102a257600080fd5b5061024561074e565b3480156102b757600080fd5b506102c3600435610754565b005b3480156102d157600080fd5b506102da610848565b60408051600160a060020a039092168252519081900360200190f35b34801561030257600080fd5b50610245600160a060020a0360043516610857565b34801561032357600080fd5b506102da610872565b34801561033857600080fd5b506102c3610881565b34801561034d57600080fd5b5061021c600160a060020a0360043516602435610909565b34801561037157600080fd5b506102da6109fa565b34801561038657600080fd5b50610183610a09565b34801561039b57600080fd5b50610245600435602435610a61565b3480156103b657600080fd5b5061021c600160a060020a0360043516602435610a76565b3480156103da57600080fd5b50610245610a8c565b3480156103ef57600080fd5b5061021c600160a060020a0360043516610a92565b34801561041057600080fd5b50610245600435602435610aa7565b34801561042b57600080fd5b506102da610ac8565b34801561044057600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261021c948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610ad79650505050505050565b3480156104a957600080fd5b50610245600435602435610bf2565b3480156104c457600080fd5b506102da610c17565b3480156104d957600080fd5b5061021c600160a060020a0360043516602435610c26565b3480156104fd57600080fd5b50610245600160a060020a0360043581169060243516610ce1565b34801561052457600080fd5b50610245600435602435610d0c565b34801561053f57600080fd5b506102c3600160a060020a03600435166024351515610d1c565b34801561056557600080fd5b506102c3600160a060020a0360043516610d97565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106005780601f106105d557610100808354040283529160200191610600565b820191906000526020600020905b8154815290600101906020018083116105e357829003601f168201915b505050505081565b60008115806106385750336000908152600b60209081526040808320600160a060020a0387168452909152902054155b151561064357600080fd5b336000818152600b60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60055490565b600160a060020a0383166000908152600b602090815260408083203384529091528120548211156106e157600080fd5b600160a060020a0384166000908152600b6020908152604080832033845290915290205461070f9083610a61565b600160a060020a0385166000908152600b6020908152604080832033845290915290205561073e848484610ddd565b5060019392505050565b60045481565b60055481565b336000908152600a602052604081205482111561077057600080fd5b50336000818152600a602052604090205461078b9083610a61565b600160a060020a0382166000908152600a60205260409020556005546107b19083610a61565b6005556006546107c19083610d0c565b600655604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518381529051600091600160a060020a038416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600954600160a060020a031681565b600160a060020a03166000908152600a602052604090205490565b600754600160a060020a031681565b600154600160a060020a0316331461089857600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60008054600160a060020a0316331461092157600080fd5b600160a060020a0383166000908152600a602052604090205482111561094657600080fd5b600054600160a060020a0316331461095d57600080fd5b61096960055483610a61565b6005556006546109799083610d0c565b600655600160a060020a0383166000908152600a602052604090205461099f9083610a61565b600160a060020a0384166000818152600a6020908152604091829020939093558051858152905191927f1937b7fada40616c51aa17f144b44c8b9cd5494193d27b13042eb7dd90b3ac2692918290030190a250600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106005780601f106105d557610100808354040283529160200191610600565b600082821115610a7057600080fd5b50900390565b6000610a83338484610ddd565b50600192915050565b60065481565b600c6020526000908152604090205460ff1681565b6000808211610ab557600080fd5b8183811515610ac057fe5b049392505050565b600854600160a060020a031681565b6000610ae38484610608565b1515610aee57600080fd5b6040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b83811015610b81578181015183820152602001610b69565b50505050905090810190601f168015610bae5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610bd057600080fd5b505af1158015610be4573d6000803e3d6000fd5b506001979650505050505050565b818102821580610c0c5750818382811515610c0957fe5b04145b15156106a557600080fd5b600154600160a060020a031681565b60008054600160a060020a03163314610c3e57600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b158015610cae57600080fd5b505af1158015610cc2573d6000803e3d6000fd5b505050506040513d6020811015610cd857600080fd5b50519392505050565b600160a060020a039182166000908152600b6020908152604080832093909416825291909152205490565b818101828110156106a557600080fd5b600054600160a060020a03163314610d3357600080fd5b600160a060020a0382166000818152600c6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610dae57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610df457600080fd5b600160a060020a0384166000908152600a6020526040902054821115610e1957600080fd5b600160a060020a0383166000908152600a602052604090205482810111610e3f57600080fd5b600160a060020a0384166000908152600c602052604090205460ff1615610e6557600080fd5b600160a060020a0383166000908152600c602052604090205460ff1615610e8b57600080fd5b50600160a060020a038083166000908152600a602052604080822054928616825290205490810190610ebd9083610a61565b600160a060020a038086166000908152600a60205260408082209390935590851681522054610eec9083610d0c565b600160a060020a038085166000818152600a602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a038084166000908152600a6020526040808220549287168252902054018114610f6f57fe5b505050505600a165627a7a723058208035ca78d7eb3def512cb96cd8baa904d5f3d7cdef3192b6807c01d9c0a4256d0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}