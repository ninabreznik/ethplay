{
  "address": "0xf319ac2acc22421fcde856df0c009450a772fc05",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WaitOrReinvest",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-28\n*/\n\npragma solidity ^0.4.24;\n\n/**\n*\nWaitOrReinvest HYIP strategy:\nWithdraw dividends will reduce investments.\nReinvest dividends will increase investments.\n50% dividends per day.\n*/\ncontract WaitOrReinvest{\n    \n    using SafeMath for uint256;\n\n    mapping(address => uint256) investments;\n    mapping(address => uint256) joined;\n    mapping(address => address) referrer;\n\t\n    uint256 public stepUp = 50; //50% per day\n    address public ownerWallet;\n\n    event Invest(address investor, uint256 amount);\n    event Withdraw(address investor, uint256 amount);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev Ð¡onstructor Sets the original roles of the contract \n     */\n     \n    constructor() public {\n        ownerWallet = msg.sender;\n    }\n\n    /**\n     * @dev Modifiers\n     */\n     \n    modifier onlyOwner() {\n        require(msg.sender == ownerWallet);\n        _;\n    }\n\n    /**\n     * @dev Allows current owner to transfer control of the contract to a newOwner.\n     * @param newOwnerWallet The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwnerWallet) public onlyOwner {\n        require(newOwnerWallet != address(0));\n        emit OwnershipTransferred(ownerWallet, newOwnerWallet);\n        ownerWallet = newOwnerWallet;\n    }\n\n    /**\n     * @dev Investments\n     */\n\t \n    function () public payable {\n\t\tinvest(address(0));\n\t}\n\t\n    function invest(address _ref) public payable {\n        require(msg.value >= 0);\n        if (investments[msg.sender] > 0){\n            reinvest(); \n        }\n        investments[msg.sender] = investments[msg.sender].add(msg.value);\n        joined[msg.sender] = now;\n\t\t\n\t\tuint256 dfFee = msg.value.div(100).mul(5); //dev or ref fee\n        ownerWallet.transfer(dfFee);\n\t\t\n\t\t\n\t\tif (referrer[msg.sender] == address(0) && address(_ref) > 0 && address(_ref) != msg.sender)\n\t\t\treferrer[msg.sender] = _ref;\n\t\t\n\t\taddress ref = referrer[msg.sender];\t\n        if (ref > 0 ) \n\t\t\tref.transfer(dfFee); // bounty program\n\t\t\t\n        emit Invest(msg.sender, msg.value);\n    }\n\t\n    function reinvest() public {\n\t\trequire(investments[msg.sender] > 0);\n\t\trequire((now - joined[msg.sender]) > 5);\n\t\t\n\t\tuint256 balance = getDivsBalance(msg.sender);\n\t\t\n\t\tuint256 dfFee = balance.div(100).mul(5); //dev or ref fee\n\t\t\n\t\tif (address(this).balance > dfFee) {\n\t\t\taddress ref = referrer[msg.sender];\t \n\t\t\tif (ref != address(0))\n\t\t\t\tref.transfer(dfFee); // bounty program\n\t\t\telse \n\t\t\t\townerWallet.transfer(dfFee); // or dev fee\n\t\t\tbalance = balance.sub(dfFee); \n\t\t}\n\t\t\t\n\t\tinvestments[msg.sender] += balance;\n\t\tjoined[msg.sender] = now;\n\t}\t\n\n    /**\n    * @dev Evaluate current balance\n    * @param _address Address of investor\n    */\n    function getDivsBalance(address _address) view public returns (uint256) {\n        uint256 secondsCount = now.sub(joined[_address]);\n        uint256 percentDivs = investments[_address].mul(stepUp).div(100);\n        uint256 dividends = percentDivs.mul(secondsCount).div(86400);\n\n        return dividends;\n    }\n\n    /**\n    * @dev Withdraw dividends from contract\n    */\n    function withdraw() public returns (bool){\n        require(joined[msg.sender] > 0);\n        uint256 balance = getDivsBalance(msg.sender);\n        if (address(this).balance > balance){\n            if (balance > 0){\n\t\t\t\tjoined[msg.sender]=now;\n                msg.sender.transfer(balance);\n\t\t\t\t\n\t\t\t\tif (investments[msg.sender] > balance)\n\t\t\t\t\tinvestments[msg.sender] = SafeMath.sub(investments[msg.sender],balance);\n\t\t\t\telse \n\t\t\t\t\tinvestments[msg.sender] = 0;\n\t\t\t\t\t\n                emit Withdraw(msg.sender, balance);\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n\n    /**\n    * @dev Gets balance of the sender address.\n    * @return An uint256 representing the amount owned by the msg.sender.\n    */\n    function checkDivsBalance() public view returns (uint256) {\n        return getDivsBalance(msg.sender);\n    }\n\n\n    /**\n    * @dev Gets investments of the specified address.\n    * @param _investor The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function checkInvestments(address _investor) public view returns (uint256) {\n        return investments[_investor];\n    }\n\n    \n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "6080604052603260035534801561001557600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611051806100666000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303f9c793146100a557806311a94a2e146100db5780633ccfd60b14610106578063835c11541461013557806385b3b2eb1461018c5780639335dcb7146101e3578063c8e626f81461023a578063f2fde38b14610265578063fdb5a03e146102a8575b6100a360006102bf565b005b6100d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102bf565b005b3480156100e757600080fd5b506100f0610731565b6040518082815260200191505060405180910390f35b34801561011257600080fd5b5061011b610737565b604051808215151515815260200191505060405180910390f35b34801561014157600080fd5b50610176600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109de565b6040518082815260200191505060405180910390f35b34801561019857600080fd5b506101cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a26565b6040518082815260200191505060405180910390f35b3480156101ef57600080fd5b506101f8610b1d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024657600080fd5b5061024f610b43565b6040518082815260200191505060405180910390f35b34801561027157600080fd5b506102a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b53565b005b3480156102b457600080fd5b506102bd610cab565b005b600080600034101515156102d257600080fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561032257610321610cab565b5b610373346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f9890919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506104206005610412606434610fb690919063ffffffff16565b610fd190919063ffffffff16565b9150600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561048a573d6000803e3d6000fd5b50600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561053c575060008373ffffffffffffffffffffffffffffffffffffffff16115b801561057457503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156105f85782600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1611156106c1578073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156106bf573d6000803e3d6000fd5b505b7fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b60035481565b6000806000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561078857600080fd5b61079133610a26565b9050803073ffffffffffffffffffffffffffffffffffffffff163111156109d55760008111156109cc5742600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610845573d6000803e3d6000fd5b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561091b576108d46000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261100c565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610960565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b600191506109da565b600091505b5090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080610a7e600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544261100c90919063ffffffff16565b9250610ae66064610ad86003546000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fd190919063ffffffff16565b610fb690919063ffffffff16565b9150610b1062015180610b028585610fd190919063ffffffff16565b610fb690919063ffffffff16565b9050809350505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610b4e33610a26565b905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610baf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610beb57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610cfc57600080fd5b6005600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544203111515610d4c57600080fd5b610d5533610a26565b9250610d7e6005610d70606486610fb690919063ffffffff16565b610fd190919063ffffffff16565b9150813073ffffffffffffffffffffffffffffffffffffffff16311115610f0357600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e83578073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610e7d573d6000803e3d6000fd5b50610eed565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610eeb573d6000803e3d6000fd5b505b610f00828461100c90919063ffffffff16565b92505b826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000808284019050838110151515610fac57fe5b8091505092915050565b6000808284811515610fc457fe5b0490508091505092915050565b6000806000841415610fe65760009150611005565b8284029050828482811515610ff757fe5b0414151561100157fe5b8091505b5092915050565b600082821115151561101a57fe5b8183039050929150505600a165627a7a7230582026c84c4385e51c1ac68b47c6824727fed9068ab73fe0aea01c7cc65be59f7fde0029"
}