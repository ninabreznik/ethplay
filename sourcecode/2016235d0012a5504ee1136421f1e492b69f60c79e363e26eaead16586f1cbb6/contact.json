{
  "address": "0xeb15326a844b1d173c2f6a4982d35aa68f4beaee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FNTToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-15\n*/\n\n/*************************************************************************\n * This contract has been merged with solidify\n * https://github.com/tiesnetwork/solidify\n *************************************************************************/\n \n pragma solidity ^0.4.18;\n\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/MintableToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./StandardToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./BasicToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../math/SafeMath.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/*************************************************************************\n * import \"../math/SafeMath.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/*************************************************************************\n * import \"./BasicToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./ERC20.sol\" : start\n *************************************************************************/\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n/*************************************************************************\n * import \"./StandardToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../ownership/Ownable.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/*************************************************************************\n * import \"../ownership/Ownable.sol\" : end\n *************************************************************************/\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/MintableToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/BurnableToken.sol\" : start\n *************************************************************************/\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/BurnableToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/PausableToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"../lifecycle/Pausable.sol\" : start\n *************************************************************************/\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n/*************************************************************************\n * import \"../lifecycle/Pausable.sol\" : end\n *************************************************************************/\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/PausableToken.sol\" : end\n *************************************************************************/\n\n/**\n   @title FNTToken, the Friend token\n\n   Implementation of FRND, the ERC20 token for Friend, with extra methods\n   to transfer value and data to execute a call on transfer.\n   Uses OpenZeppelin BurnableToken, MintableToken and PausableToken.\n */\ncontract FNTToken is BurnableToken, MintableToken, PausableToken {\n  // Token Name\n  string public constant NAME = \"Friend Network Token\";\n\n  // Token Symbol\n  string public constant SYMBOL = \"FRND\";\n\n  // Token decimals\n  uint8 public constant DECIMALS = 18;\n\n}",
  "bytecode": "608060405260038054600160b060020a03191633179055610e6f806100256000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b8114610116578063095ea7b31461013f57806318160ddd1461016357806323b872dd1461018a5780632e0f2625146101b45780633f4ba83a146101df57806340c10f19146101f657806342966c681461021a5780635c975abb14610232578063661884631461024757806370a082311461026b5780637d64bcb41461028c5780638456cb59146102a15780638da5cb5b146102b6578063a3f4df7e146102e7578063a9059cbb14610371578063d73dd62314610395578063dd62ed3e146103b9578063f2fde38b146103e0578063f76f8d7814610401575b600080fd5b34801561012257600080fd5b5061012b610416565b604080519115158252519081900360200190f35b34801561014b57600080fd5b5061012b600160a060020a0360043516602435610437565b34801561016f57600080fd5b50610178610462565b60408051918252519081900360200190f35b34801561019657600080fd5b5061012b600160a060020a0360043581169060243516604435610468565b3480156101c057600080fd5b506101c9610495565b6040805160ff9092168252519081900360200190f35b3480156101eb57600080fd5b506101f461049a565b005b34801561020257600080fd5b5061012b600160a060020a0360043516602435610513565b34801561022657600080fd5b506101f460043561062f565b34801561023e57600080fd5b5061012b6106df565b34801561025357600080fd5b5061012b600160a060020a03600435166024356106ef565b34801561027757600080fd5b50610178600160a060020a0360043516610713565b34801561029857600080fd5b5061012b61072e565b3480156102ad57600080fd5b506101f46107d4565b3480156102c257600080fd5b506102cb610852565b60408051600160a060020a039092168252519081900360200190f35b3480156102f357600080fd5b506102fc610861565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033657818101518382015260200161031e565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037d57600080fd5b5061012b600160a060020a0360043516602435610898565b3480156103a157600080fd5b5061012b600160a060020a03600435166024356108bc565b3480156103c557600080fd5b50610178600160a060020a03600435811690602435166108e0565b3480156103ec57600080fd5b506101f4600160a060020a036004351661090b565b34801561040d57600080fd5b506102fc6109a0565b60035474010000000000000000000000000000000000000000900460ff1681565b60035460009060a860020a900460ff161561045157600080fd5b61045b83836109d7565b9392505050565b60005481565b60035460009060a860020a900460ff161561048257600080fd5b61048d848484610a3d565b949350505050565b601281565b600354600160a060020a031633146104b157600080fd5b60035460a860020a900460ff1615156104c957600080fd5b6003805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600354600090600160a060020a0316331461052d57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561055557600080fd5b600054610568908363ffffffff610bb616565b6000908155600160a060020a038416815260016020526040902054610593908363ffffffff610bb616565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b3360009081526001602052604081205482111561064b57600080fd5b503360008181526001602052604090205461066c908363ffffffff610bc516565b600160a060020a03821660009081526001602052604081209190915554610699908363ffffffff610bc516565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b60035460a860020a900460ff1681565b60035460009060a860020a900460ff161561070957600080fd5b61045b8383610bd7565b600160a060020a031660009081526001602052604090205490565b600354600090600160a060020a0316331461074857600080fd5b60035474010000000000000000000000000000000000000000900460ff161561077057600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031633146107eb57600080fd5b60035460a860020a900460ff161561080257600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152601481527f467269656e64204e6574776f726b20546f6b656e000000000000000000000000602082015281565b60035460009060a860020a900460ff16156108b257600080fd5b61045b8383610cc7565b60035460009060a860020a900460ff16156108d657600080fd5b61045b8383610daa565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461092257600080fd5b600160a060020a038116151561093757600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60408051808201909152600481527f46524e4400000000000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a0383161515610a5457600080fd5b600160a060020a038416600090815260016020526040902054821115610a7957600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610aa957600080fd5b600160a060020a038416600090815260016020526040902054610ad2908363ffffffff610bc516565b600160a060020a038086166000908152600160205260408082209390935590851681522054610b07908363ffffffff610bb616565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610b4b908363ffffffff610bc516565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60008282018381101561045b57fe5b600082821115610bd157fe5b50900390565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610c2c57336000908152600260209081526040808320600160a060020a0388168452909152812055610c61565b610c3c818463ffffffff610bc516565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a0383161515610cde57600080fd5b33600090815260016020526040902054821115610cfa57600080fd5b33600090815260016020526040902054610d1a908363ffffffff610bc516565b3360009081526001602052604080822092909255600160a060020a03851681522054610d4c908363ffffffff610bb616565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610dde908363ffffffff610bb616565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3506001929150505600a165627a7a7230582089203944f6fe7ed3b2a885a7ebf94b1d3108cd91956e4b636fb27d38adf71a570029"
}