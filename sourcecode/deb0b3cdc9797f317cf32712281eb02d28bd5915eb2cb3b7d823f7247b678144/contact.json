{
  "address": "0x904afb631a24881d8af2ef57dce1e9d6f117dcb6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MLM",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-10\n*/\n\npragma solidity ^0.4.25;\n\n/*  \n     ==================================================================\n    ||  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  ||\n    ||  + Digital Multi Level Marketing in Ethereum smart-contract +  ||\n    ||  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  ||\n     ==================================================================\n     \n    https://ethmlm.com\n    https://t.me/ethmlm\n    \n    \n         ``..................``  ``....................``  ``..``             ``.``          \n        `..,,,,,,,,,,,,,,,,,,.` ``.,,,,,,,,,,,,,,,,,,,,.`  `.,,.`            `..,.``         \n        `.:::::,,,,,,,,,,,,,,.```.,,,,,,,:::::::,,,,,,,.`  `,::,.            `.,:,.`         \n        `,:;:,,...............`  `.......,,:;::,,.......`  .,::,.`           `.:;,.`         \n        `,:;:,.```````````````   ````````.,:::,.````````   .,::,.`           `.:;,.`         \n     ++++++++++++++++++++    ++++++++++++++++++++++,   ,+++.,::,.`        ++++.:;,.`         \n     ####################    ######################:   ,###.,::,.`        ####.:;,.`         \n     ###';'';;:::::::::::````:::::::::+###;;'';::::.   ,###.,::,.`````````####,:;,.`         \n     ###;,:;:,,.............``        +###.,::,`       ,###.,:;:,,........####::;,.`         \n     ###;,:;:::,,,,,,,,,,,,,.`        +###.,::,`       ,###.,:;::,,,,,,,,,####::;,.`         \n     ###;,:;::,,,,,,,,,,,,,,.`        +###.,::,`       ,###.,:;::,,,,,,,,,####::;,.`         \n     ###;,:;:,..............``        +###.,::,`       ,###.,:::,.````````####,:;,.`         \n     ###;,:;:.``````````````          +###.,::,`       ,###.,::,.`        ####,:;,.`         \n     ###################              +###.,::,`       ,######################.:;,.`         \n     ###################              +###.,::,`       ,######################.:;,.`         \n     ###;,:;:.````````````````        +###.,::,`       ,###.,::,.`        ####.:;,.`         \n     ###;,:;:,................``      +###.,::,`       ,###.,::,.`        ####.:;,.`         \n     ###;,:;:::,,,,,,,,,,,,,,,.`      +###.,::,`       ,###.,::,.`        ####.:;,.`         \n     ###:.,,,,,,,,,,,,,,,,,,,,.`      +###`.,,.`       ,###`.,,.`         ####.,,,.`         \n     ###:`....................``      +###``..``       ,###``..``         ####`...`          \n     ###: `````````````````````       +### ````        ,### ````          #### ```           \n     #####################            +###             ,###               ####               \n     #####################            +###             ,###               ####               \n     ,,,,,,,,,,,,,,,,,,,,,     `````` .,,,`````        `,,,     ```````   ,,,,        `````` \n        `..,,,.``             `..,,.``   ``.,.`                `..,,,.``             `..,,.``\n        `.::::,.`            `.,:::,.`   `.,:,.`               `.,:::,.`            `.,:::,.`\n        .,:;;;:,.`           .,:;;;:.`   `,:;,.`               .,:;;;:,.`           .,:;;;:,`\n        .,:;::::,`          `.,:;;;:.`   `,:;,.`               .,:;::::,`          `.,:::;:,`\n        .,::::::,.`        `.,::::;:.`   `,:;,.`               .,:;::::,.`        `.,::::;:,`\n    .#####+::,,::,`       ######::;:.,###`,:;,.`            ######::::::,`       +#####::;:,`\n    .######:,,,::,.`      ######,:;:.,###`,:;,.`            ######:,,,::,.`      ######,,;:,`\n    .######+,..,::,`     #######,:;:.,###`,:;,.`            ###'###,..,::,`     #######.,;:,`\n    .###.###,.`.,:,.`   .##+####.:;:.,###`,:;,.`            ###.###,.`.,:,.`    #######.,;:,`\n    .###.+###.``,::,`   ###:####.:;:.,###`,:;,.`            ###.'###.`.,::,`   ###:####.,;:,`\n    .###.,###. `.,:,.` :##':####.:;:.,###`,:;,.`            ###.,###,``.,:,.` `##+:####.,;:,`\n    .###.,+###  `,::,.`###:,####.:;:.,###`,:;,.`            ###.,'###` `,::,. ###:,####.,;:,`\n    .###.,:###` `.,::.'##;:,####.:;:.,###`,:;,.`            ###.,:###, `.,::.,##':,####.,;:,`\n    .###.,:'###  `,::,###:,.####.:;:.,###`,:;,.`            ###.,:;###  `,::,###:,.####.,;:,`\n    .###.,::###` `.,:+##::,`####.:;:.,###`,:;,.`            ###.,::###: `.,:'##;:,`####.,;:,`\n    .###.,::;###  `,:###:,.`####.:;:.,###`,:;:,............`###.,::,###  `,:###:,.`####.,;:,`\n    .###.,::,###. `.###::,` ####.:;:.,###`,:;::,,,,,,,,,,,,.###.,::,###; `.+##;:,` ####.,;:,`\n    .###`.::.,###  `##+:,.` ####.,:,.,###`.,:::,,,,,,,,,,,,.###`.,:,.###  `###:,.` ####.,:,.`\n    .###`....`###, ###,..`  ####`.,.`,###``.,,,,,,,,,,,,,,..###`....`###' +##,..`  ####`.,.``\n    .### ```` `###`##'```   ####`````,### ``````````````````### ````  ### ##+```   ####````` \n    .###       ######       ####     .###                   ###       +#####       ####      \n    .###        ####,       ####     .#################     ###        ####'       ####      \n    .###        ####        ####     .#################     ###        '###        ####     \n    \n\n*/\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter;\n\n  constructor() internal {\n    // The counter starts at one to prevent changing it from zero to a non-zero\n    // value, which is a more expensive operation.\n    _guardCounter = 1;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n\n}\n\n\n\ncontract MLM_FOMO_BANK is Ownable {\n    using SafeMath for uint256;\n    \n    //  time to win FOMO bank\n    uint public fomo_period = 3600;     // 1 hour\n    \n    //  FOMO bank balance\n    uint public balance;\n    //  next winner address\n    address public winner;\n    //  win time\n    uint public finish_time;\n    \n    //  MLM contract\n    address _mlm;\n    \n    //  only MLM contract can call method\n    modifier onlyMLM() {\n        require(msg.sender == _mlm);\n        _;\n    }\n\n    \n    event Win(address indexed user, uint amount);\n    \n    \n    function SetMLM(address mlm) public onlyOwner {\n        _mlm = mlm;\n    }\n    \n    //  fill the bank\n    function AddToBank(address user) public payable onlyMLM {\n        //  check for winner\n        CheckWinner();\n        \n        // save last payment info\n        balance = balance.add(msg.value);\n        winner = user;\n        finish_time = now + fomo_period;\n    }\n    \n    // check winner\n    function CheckWinner() internal {\n        if(now > finish_time && winner != address(0)){\n            emit Win(winner, balance);\n            \n            //  it should not be reentrancy, but just in case\n            uint prev_balance = balance;\n            balance = 0;\n            //  send ethers to winner\n            winner.transfer(prev_balance);\n            winner = address(0);\n        }\n    }\n    \n    //  get cuurent FOMO info {balance, finish_time, winner }\n    function GetInfo() public view returns (uint, uint, address) {\n        return (\n            balance,\n            finish_time,\n            winner\n        );\n    }\n}\n\ncontract MLM is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using Address for address;\n    \n    // FOMO bank contract\n    MLM_FOMO_BANK _fomo;\n    \n    struct userStruct {\n        address[] referrers;    //  array with 3 level referrers\n        address[] referrals;    //  array with referrals\n        uint next_payment;      //  time to next payments, seconds\n        bool isRegitered;       //  is user registered\n        bytes32 ref_link;       //  referral link\n    }\n    \n    // mapping with users\n    mapping(address=>userStruct) users;\n    //  mapping with referral links\n    mapping(bytes32=>address) ref_to_users;\n    \n    uint public min_paymnet = 100 finney;               //  minimum payment amount 0,1ETH\n    uint public min_time_to_add = 604800;               //  Time need to add after miimum payment, seconds | 1 week\n    uint[] public reward_parts = [35, 25, 15, 15, 10];  //  how much need to send to referrers, %\n\n    event RegisterEvent(address indexed user, address indexed referrer);\n    event PayEvent(address indexed payer, uint amount, bool[3] levels);\n    \n    \n    constructor(MLM_FOMO_BANK fomo) public {\n        //  set FOMO contract\n        _fomo = fomo;\n    }\n    \n\n\n    function() public payable {\n        //  sender should not be a contract\n        require(!address(msg.sender).isContract());\n        //  user should be registered\n        require(users[msg.sender].isRegitered);\n        //  referrer address is 0x00 because user is already registered and referrer is stored on the first payment\n        Pay(0x00);\n    }\n    \n    \n    /*\n    Make a payment\n    --------------\n    [bytes32 referrer_addr] - referrer's address. it is used only on first payment to save sender as a referral\n    */\n    function Pay(bytes32 referrer_addr) public payable nonReentrant {\n        //  sender should not be a contract\n        require(!address(msg.sender).isContract());\n        //  check minimum amount\n        require(msg.value >= min_paymnet);\n        \n        //  if it is a first payment need to register sender\n        if(!users[msg.sender].isRegitered){\n            _register(referrer_addr);\n        }\n        \n        uint amount = msg.value;\n        //  what referrer levels will received a payments, need on UI\n        bool[3] memory levels = [false,false,false];\n        //  iterate of sender's referrers\n        for(uint i = 0; i < users[msg.sender].referrers.length; i++){\n            //  referrer address at level i\n            address ref = users[msg.sender].referrers[i];\n            //  if referrer is active need to pay him\n            if(users[ref].next_payment > now){\n                //  calculate reward part, i.e. 0.1 * 35 / 100  = 0.035\n                uint reward = amount.mul(reward_parts[i]).div(100);\n                //  send reward to referrer\n                ref.transfer(reward);\n                //  set referrer's level ad payment\n                levels[i] = true;\n            }\n        }\n        \n        //  what address will be saved to FOMO bank, referrer or current sender\n        address fomo_user = msg.sender;\n        if(users[msg.sender].referrers.length>0 && users[users[msg.sender].referrers[0]].next_payment > now)\n            fomo_user = users[msg.sender].referrers[0];\n            \n        //  send 15% to FOMO bank and store selceted user\n        _fomo.AddToBank.value(amount.mul(reward_parts[3]).div(100)).gas(gasleft())(fomo_user);\n        \n        // prolong referral link life\n        if(now > users[msg.sender].next_payment)\n            users[msg.sender].next_payment = now.add(amount.mul(min_time_to_add).div(min_paymnet));\n        else \n            users[msg.sender].next_payment = users[msg.sender].next_payment.add(amount.mul(min_time_to_add).div(min_paymnet));\n        \n        emit PayEvent(msg.sender, amount, levels);\n    }\n    \n    \n    \n    function _register(bytes32 referrer_addr) internal {\n        // sender should not be registered\n        require(!users[msg.sender].isRegitered);\n        \n        // get referrer address\n        address referrer = ref_to_users[referrer_addr];\n        // users could not be a referrer\n        require(referrer!=msg.sender);\n        \n        //  if there is referrer\n        if(referrer != address(0)){\n            //  set refferers for currnet user\n            _setReferrers(referrer, 0);\n        }\n        //  mark user as registered\n        users[msg.sender].isRegitered = true;\n        //  calculate referral link\n        _getReferralLink(referrer);\n        \n\n        emit RegisterEvent(msg.sender, referrer);\n    }\n    \n    //  generate a referral link\n    function _getReferralLink(address referrer) internal {\n        do{\n            users[msg.sender].ref_link = keccak256(abi.encodePacked(uint(msg.sender) ^  uint(referrer) ^ now));\n        } while(ref_to_users[users[msg.sender].ref_link] != address(0));\n        ref_to_users[users[msg.sender].ref_link] = msg.sender;\n    }\n    \n    // set referrers\n    function _setReferrers(address referrer, uint level) internal {\n        //  set referrer only for active user other case use his referrer\n        if(users[referrer].next_payment > now){\n            users[msg.sender].referrers.push(referrer);\n            if(level == 0){\n                //  add current user to referrer's referrals list\n                users[referrer].referrals.push(msg.sender);\n            }\n            level++;\n        }\n        //  set referrers for 3 levels\n        if(level<3 && users[referrer].referrers.length>0)\n            _setReferrers(users[referrer].referrers[0], level);\n    }\n    \n    /*  Get user info\n    \n        uint next_payment\n        bool isRegitered\n        bytes32 ref_link\n    */\n    function GetUser() public view returns(uint, bool, bytes32) {\n        return (\n            users[msg.sender].next_payment,\n            users[msg.sender].isRegitered,\n            users[msg.sender].ref_link\n        );\n    }\n    \n    // Get sender's referrers\n    function GetReferrers() public view returns(address[] memory) {\n        return users[msg.sender].referrers;\n    }\n    \n    //  Get sender's referrals\n    function GetReferrals() public view returns(address[] memory) {\n        return users[msg.sender].referrals;\n    }\n    \n    //  Project's owner can widthdraw contract's balance\n    function widthdraw(address to, uint amount) public onlyOwner {\n        to.transfer(amount);\n    }\n}",
  "bytecode": "67016345785d8a0000600590815562093a8060065561012060405260236080908152601960a052600f60c081905260e052600a6101005261004391600791906100d5565b5034801561005057600080fd5b50604051602080610e84833981016040819052905160008054600160a060020a03191633178082559192600160a060020a0392909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001805560028054600160a060020a031916600160a060020a0392909216919091179055610142565b828054828255906000526020600020908101928215610115579160200282015b82811115610115578251829060ff169055916020019190600101906100f5565b50610121929150610125565b5090565b61013f91905b80821115610121576000815560010161012b565b90565b610d33806101516000396000f3006080604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633faa844481146100fa5780634d1ed1c41461015f5780635d699c4c1461016a5780635ee0f65414610194578063715018a6146101c757806372ee1bc8146101dc5780637ba9eae0146101f157806382877140146102065780638da5cb5b1461021b5780638f32d59b1461024c578063c74b197c14610275578063f2fde38b14610299575b6100c2336102ba565b156100cc57600080fd5b336000908152600360208190526040909120015460ff1615156100ee57600080fd5b6100f860006102c2565b005b34801561010657600080fd5b5061010f6106e8565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561014b578181015183820152602001610133565b505050509050019250505060405180910390f35b6100f86004356102c2565b34801561017657600080fd5b50610182600435610753565b60408051918252519081900360200190f35b3480156101a057600080fd5b506101a9610772565b60408051938452911515602084015282820152519081900360600190f35b3480156101d357600080fd5b506100f861079c565b3480156101e857600080fd5b50610182610806565b3480156101fd57600080fd5b5061010f61080c565b34801561021257600080fd5b50610182610878565b34801561022757600080fd5b5061023061087e565b60408051600160a060020a039092168252519081900360200190f35b34801561025857600080fd5b5061026161088d565b604080519115158252519081900360200190f35b34801561028157600080fd5b506100f8600160a060020a036004351660243561089e565b3480156102a557600080fd5b506100f8600160a060020a03600435166108ec565b6000903b1190565b60006102cc610ce8565b600180548101908190556000908190819081906102e8336102ba565b156102f257600080fd5b60055434101561030157600080fd5b336000908152600360208190526040909120015460ff161515610327576103278861090b565b60408051606081018252600080825260208201819052918101829052349850965094505b3360009081526003602052604090205485101561044a5733600090815260036020526040902080548690811061037d57fe5b6000918252602080832090910154600160a060020a0316808352600390915260409091206002015490945042101561043f576103ec60646103e06007888154811015156103c657fe5b90600052602060002001548a6109cc90919063ffffffff16565b9063ffffffff610a0516565b604051909350600160a060020a0385169084156108fc029085906000818181858888f19350505050158015610425573d6000803e3d6000fd5b50600186866003811061043457fe5b911515602090920201525b60019094019361034b565b336000818152600360205260408120549193501080156104b0575033600090815260036020819052604082208054429391908290811061048657fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902060020154115b156104e957336000908152600360205260408120805490919081106104d157fe5b600091825260209091200154600160a060020a031691505b60025460078054600160a060020a039092169163c2dd631291610532916064916103e091600390811061051857fe5b90600052602060002001548c6109cc90919063ffffffff16565b5a90856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a031681526020019150506000604051808303818589803b15801561059857600080fd5b5088f11580156105ac573d6000803e3d6000fd5b505033600090815260036020526040902060020154421115935061061192505050576105f96105ec6005546103e06006548b6109cc90919063ffffffff16565b429063ffffffff610a2816565b33600090815260036020526040902060020155610662565b61064e61062f6005546103e06006548b6109cc90919063ffffffff16565b336000908152600360205260409020600201549063ffffffff610a2816565b336000908152600360205260409020600201555b33600160a060020a03167fc3a134d98eba6b79c7abee27bf9bffbec3a1c4327ce17d9f839657e59f9d6cc388886040518083815260200182600360200280838360005b838110156106bd5781810151838201526020016106a5565b505050509050019250505060405180910390a260015481146106de57600080fd5b5050505050505050565b3360009081526003602090815260409182902080548351818402810184019094528084526060939283018282801561074957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161072b575b5050505050905090565b600780548290811061076157fe5b600091825260209091200154905081565b33600090815260036020819052604090912060028101549181015460049091015460ff9091169192565b6107a461088d565b15156107af57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60055481565b3360009081526003602090815260409182902060010180548351818402810184019094528084526060939283018282801561074957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161072b575050505050905090565b60065481565b600054600160a060020a031690565b600054600160a060020a0316331490565b6108a661088d565b15156108b157600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156108e7573d6000803e3d6000fd5b505050565b6108f461088d565b15156108ff57600080fd5b61090881610a3a565b50565b3360009081526003602081905260408220015460ff161561092b57600080fd5b50600081815260046020526040902054600160a060020a03163381141561095157600080fd5b600160a060020a0381161561096b5761096b816000610ab7565b33600090815260036020819052604090912001805460ff1916600117905561099281610be4565b604051600160a060020a0382169033907f02ee6a6b019392cd5b195a4446137912f2627560a32b2b2c0f13dbfc4238ec5890600090a35050565b6000808315156109df57600091506109fe565b508282028284828115156109ef57fe5b04146109fa57600080fd5b8091505b5092915050565b600080808311610a1457600080fd5b8284811515610a1f57fe5b04949350505050565b6000828201838110156109fa57600080fd5b600160a060020a0381161515610a4f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260036020526040902060020154421015610b735733600090815260036020908152604082208054600181018255908352912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038416179055801515610b6f57600160a060020a038216600090815260036020908152604082206001908101805491820181558352912001805473ffffffffffffffffffffffffffffffffffffffff1916331790555b6001015b600381108015610b995750600160a060020a038216600090815260036020526040812054115b15610be057600160a060020a03821660009081526003602052604081208054610be092908110610bc557fe5b600091825260209091200154600160a060020a031682610ab7565b5050565b4281600160a060020a031633600160a060020a03161818604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310610c495780518252601f199092019160209182019101610c2a565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912033600090815260038352848120600490810183905591815291529190912054600160a060020a0316159250610ca891505057610be4565b5033600081815260036020908152604080832060049081015484529091529020805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60606040519081016040528060039060208202803883395091929150505600a165627a7a72305820981b13dd984091444d4fa8c1c5560fcda23c278f087e119b26d9cf26a4bbc8da0029000000000000000000000000e20a3aa6b1ef8eb0eab44bfa9503f09635a5ac50",
  "constructorArguments": "000000000000000000000000e20a3aa6b1ef8eb0eab44bfa9503f09635a5ac50"
}