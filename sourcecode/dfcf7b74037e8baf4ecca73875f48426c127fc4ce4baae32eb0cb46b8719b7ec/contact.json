{
  "address": "0xd7faabc1a2ad0b6ba3651816ee97c10dcadd3b85",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OreOreCoin",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-31\n*/\n\npragma solidity ^0.4.8;\n\n// 소유자 관리용 계약\ncontract Owned {\n    // 상태 변수\n    address public owner; // 소유자 주소\n\n    // 소유자 변경 시 이벤트\n    event TransferOwnership(address oldaddr, address newaddr);\n\n    // 소유자 한정 메서드용 수식자\n    modifier onlyOwner() { if (msg.sender != owner) return; _; }\n\n    // 생성자\n    function Owned() public {\n        owner = msg.sender; // 처음에 계약을 생성한 주소를 소유자로 한다\n    }\n    \n    // (1) 소유자 변경\n    function transferOwnership(address _new) onlyOwner public {\n        address oldaddr = owner;\n        owner = _new;\n        emit TransferOwnership(oldaddr, owner);\n    }\n}\n\n// (2) 회원 관리용 계약\ncontract Members is Owned {\n    // (3) 상태 변수 선언\n    address public coin; // 토큰(가상 화폐) 주소\n    MemberStatus[] public status; // 회원 등급 배열\n    mapping(address => History) public tradingHistory; // 회원별 거래 이력\n     \n    // (4) 회원 등급용 구조체\n    struct MemberStatus {\n        string name; // 등급명\n        uint256 times; // 최저 거래 회수\n        uint256 sum; // 최저 거래 금액\n        int8 rate; // 캐시백 비율\n    }\n    // 거래 이력용 구조체\n    struct History {\n        uint256 times; // 거래 회수\n        uint256 sum; // 거래 금액\n        uint256 statusIndex; // 등급 인덱스\n    }\n \n    // (5) 토큰 한정 메서드용 수식자\n    modifier onlyCoin() { if (msg.sender == coin) _; }\n     \n    // (6) 토큰 주소 설정\n    function setCoin(address _addr) onlyOwner public {\n        coin = _addr;\n    }\n     \n    // (7) 회원 등급 추가\n    function pushStatus(string _name, uint256 _times, uint256 _sum, int8 _rate) onlyOwner public {\n        status.push(MemberStatus({\n            name: _name,\n            times: _times,\n            sum: _sum,\n            rate: _rate\n        }));\n    }\n \n    // (8) 회원 등급 내용 변경\n    function editStatus(uint256 _index, string _name, uint256 _times, uint256 _sum, int8 _rate) onlyOwner public {\n        if (_index < status.length) {\n            status[_index].name = _name;\n            status[_index].times = _times;\n            status[_index].sum = _sum;\n            status[_index].rate = _rate;\n        }\n    }\n     \n    // (9) 거래 내역 갱신\n    function updateHistory(address _member, uint256 _value) onlyCoin public {\n        tradingHistory[_member].times += 1;\n        tradingHistory[_member].sum += _value;\n        // 새로운 회원 등급 결정(거래마다 실행)\n        uint256 index;\n        int8 tmprate;\n        for (uint i = 0; i < status.length; i++) {\n            // 최저 거래 횟수, 최저 거래 금액 충족 시 가장 캐시백 비율이 좋은 등급으로 설정\n            if (tradingHistory[_member].times >= status[i].times &&\n                tradingHistory[_member].sum >= status[i].sum &&\n                tmprate < status[i].rate) {\n                index = i;\n            }\n        }\n        tradingHistory[_member].statusIndex = index;\n    }\n\n    // (10) 캐시백 비율 획득(회원의 등급에 해당하는 비율 확인)\n    function getCashbackRate(address _member) public constant returns (int8 rate){\n        rate = status[tradingHistory[_member].statusIndex].rate;\n    }\n}\n     \n// (11) 회원 관리 기능이 구현된 가상 화폐\ncontract OreOreCoin is Owned{\n    // 상태 변수 선언\n    string public name; // 토큰 이름\n    string public symbol; // 토큰 단위\n    uint8 public decimals; // 소수점 이하 자릿수\n    uint256 public totalSupply; // 토큰 총량\n    mapping (address => uint256) public balanceOf; // 각 주소의 잔고\n    mapping (address => int8) public blackList; // 블랙리스트\n    mapping (address => Members) public members; // 각 주소의 회원 정보\n     \n    // 이벤트 알림\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Blacklisted(address indexed target);\n    event DeleteFromBlacklist(address indexed target);\n    event RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint256 value);\n    event RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint256 value);\n    event Cashback(address indexed from, address indexed to, uint256 value);\n     \n    // 생성자\n    function OreOreCoin(uint256 _supply, string _name, string _symbol, uint8 _decimals) public {\n        balanceOf[msg.sender] = _supply;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _supply;\n    }\n \n    // 주소를 블랙리스트에 등록\n    function blacklisting(address _addr) onlyOwner public {\n        blackList[_addr] = 1;\n        emit Blacklisted(_addr);\n    }\n \n    // 주소를 블랙리스트에서 해제\n    function deleteFromBlacklist(address _addr) onlyOwner public {\n        blackList[_addr] = -1;\n        emit DeleteFromBlacklist(_addr);\n    }\n \n    // 회원 관리 계약 설정\n    function setMembers(Members _members) public {\n        members[msg.sender] = Members(_members);\n    }\n \n    // 송금\n    function transfer(address _to, uint256 _value)  public{\n        // 부정 송금 확인\n        if (balanceOf[msg.sender] < _value) return;\n        if (balanceOf[_to] + _value < balanceOf[_to]) return;\n\n        // 블랙리스트에 존재하는 계정은 입출금 불가\n        if (blackList[msg.sender] > 0) {\n            emit RejectedPaymentFromBlacklistedAddr(msg.sender, _to, _value);\n        } else if (blackList[_to] > 0) {\n            emit RejectedPaymentToBlacklistedAddr(msg.sender, _to, _value);\n        } else {\n            // (12) 캐시백 금액을 계산(각 대상의 비율을 사용)\n            uint256 cashback = 0;\n            if(members[_to] > address(0)) {\n                cashback = _value / 100 * uint256(members[_to].getCashbackRate(msg.sender));\n                members[_to].updateHistory(msg.sender, _value);\n            }\n \n            balanceOf[msg.sender] -= (_value - cashback);\n            balanceOf[_to] += (_value - cashback);\n \n            emit Transfer(msg.sender, _to, _value);\n            emit Cashback(_to, msg.sender, cashback);\n        }\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051610a8e380380610a8e833981016040528080519190602001805182019190602001805182019190602001805160008054600160a060020a03191633600160a060020a0316908117825581526005602052604090208690559150600190508380516100809291602001906100b3565b5060028280516100949291602001906100b3565b506003805460ff191660ff92909216919091179055505060045561014e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f457805160ff1916838001178555610121565b82800160010185558215610121579182015b82811115610121578251825591602001919060010190610106565b5061012d929150610131565b5090565b61014b91905b8082111561012d5760008155600101610137565b90565b6109318061015d6000396000f3006060604052600436106100ab5763ffffffff60e060020a60003504166306fdde0381146100b057806308ae4b0c1461013a57806318160ddd14610175578063313ce5671461019a5780634838d165146101c357806370a08231146101fb5780638a294c601461021a5780638da5cb5b1461023b5780638de6b3431461024e57806395d89b411461026d578063a9059cbb14610280578063f2fde38b146102a2578063f3796bdc146102c1575b600080fd5b34156100bb57600080fd5b6100c36102e0565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ff5780820151838201526020016100e7565b50505050905090810190601f16801561012c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557600080fd5b610159600160a060020a036004351661037e565b604051600160a060020a03909116815260200160405180910390f35b341561018057600080fd5b610188610399565b60405190815260200160405180910390f35b34156101a557600080fd5b6101ad61039f565b60405160ff909116815260200160405180910390f35b34156101ce57600080fd5b6101e2600160a060020a03600435166103a8565b604051600091820b90910b815260200160405180910390f35b341561020657600080fd5b610188600160a060020a03600435166103bc565b341561022557600080fd5b610239600160a060020a03600435166103ce565b005b341561024657600080fd5b61015961043d565b341561025957600080fd5b610239600160a060020a036004351661044c565b341561027857600080fd5b6100c36104ba565b341561028b57600080fd5b610239600160a060020a0360043516602435610525565b34156102ad57600080fd5b610239600160a060020a036004351661082e565b34156102cc57600080fd5b610239600160a060020a03600435166108c8565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103765780601f1061034b57610100808354040283529160200191610376565b820191906000526020600020905b81548152906001019060200180831161035957829003601f168201915b505050505081565b600760205260009081526040902054600160a060020a031681565b60045481565b60035460ff1681565b600660205260009081526040812054900b81565b60056020526000908152604090205481565b60005433600160a060020a039081169116146103e95761043a565b600160a060020a03811660008181526006602052604090819020805460ff191660011790557fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b855905160405180910390a25b50565b600054600160a060020a031681565b60005433600160a060020a039081169116146104675761043a565b600160a060020a03811660008181526006602052604090819020805460ff191660ff1790557f2e5392b52e98bf05bdf3784aaec667371398a6ea4fb965a2894852471999bca9905160405180910390a250565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103765780601f1061034b57610100808354040283529160200191610376565b600160a060020a0333166000908152600560205260408120548290101561054b57610829565b600160a060020a038316600090815260056020526040902054828101101561057257610829565b600160a060020a033316600090815260066020526040812054810b810b13156105e15782600160a060020a031633600160a060020a03167f2a04c84c100a93363ee2e1ab7076505a06b5dd417cccc0d6080ec8285e84f79e8460405190815260200160405180910390a3610829565b600160a060020a038316600090815260066020526040812054810b810b13156106505782600160a060020a031633600160a060020a03167fee75d149bb5e330e03f98b125aaa1efcd5864e4e2d5946f23dc6dd30630d56168460405190815260200160405180910390a3610829565b50600160a060020a038281166000908152600760205260408120549091168190111561077557600160a060020a0380841660009081526007602052604090819020549091169063390c58749033905160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156106da57600080fd5b5af115156106e757600080fd5b5050506040518051600160a060020a03858116600090815260076020526040808220549390910b606487040294509116915063777aff7d90339085905160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561076457600080fd5b5af1151561077157600080fd5b5050505b600160a060020a03338116600081815260056020526040808220805486880390819003909155938716808352918190208054909401909355917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a333600160a060020a031683600160a060020a03167f82b105a9603353de51dbdf07d939d19d60f298a181b405653c095bfb286be4c28360405190815260200160405180910390a35b505050565b6000805433600160a060020a0390811691161461084a576108c4565b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1983161792839055908116917f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c91839116604051600160a060020a039283168152911660208201526040908101905180910390a15b5050565b600160a060020a03338116600090815260076020526040902080549190921673ffffffffffffffffffffffffffffffffffffffff199091161790555600a165627a7a72305820acfddfee79809035f0960306aa3ff75c9c5cc193cd2dc34237542e12a4cdc7fe002900000000000000000000000000000000000000001c6f307be4c4687e60000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c446176696e636920636f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034441430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000001c6f307be4c4687e60000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c446176696e636920636f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034441430000000000000000000000000000000000000000000000000000000000"
}