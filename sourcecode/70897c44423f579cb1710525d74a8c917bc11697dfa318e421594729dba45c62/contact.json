{
  "address": "0xa7f598984f6a77da416efaaf6ff18f5f7b9eeab2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CreaturesInterface",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-09\n*/\n\npragma solidity ^0.4.16;\n\npragma solidity ^0.4.16;\n\ncontract Permissions {\n\n\taddress ownerAddress;\n\taddress storageAddress;\n\taddress callerAddress;\n\n\tfunction Permissions() public {\n\t\townerAddress = msg.sender;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == ownerAddress);\n\t\t_;\n\t}\n\n\tmodifier onlyCaller() {\n\t\trequire(msg.sender == callerAddress);\n\t\t_;\n\t}\n\n\tfunction getOwner() view external returns (address) {\n\t\treturn ownerAddress;\n\t}\n\n\tfunction getStorageAddress() view external returns (address) {\n\t\treturn storageAddress;\n\t}\n\n\tfunction getCaller() view external returns (address) {\n\t\treturn callerAddress;\n\t}\n\n\tfunction transferOwnership(address newOwner) external onlyOwner {\n\t\tif (newOwner != address(0)) {\n\t\t\t\townerAddress = newOwner;\n\t\t}\n\t}\n\tfunction newStorage(address _new) external onlyOwner {\n\t\tif (_new != address(0)) {\n\t\t\t\tstorageAddress = _new;\n\t\t}\n\t}\n\tfunction newCaller(address _new) external onlyOwner {\n\t\tif (_new != address(0)) {\n\t\t\t\tcallerAddress = _new;\n\t\t}\n\t}\n}\n\ncontract Creatures is Permissions {\n\tstruct Creature {\n\t\tuint16 species;\n\t\tuint8 subSpecies;\n\t\tuint8 eyeColor;\n\t\tuint64 timestamp;\n\t}\n\tCreature[] creatures;\n\n\tmapping (uint256 =>\taddress) public creatureIndexToOwner;\n\tmapping (address => uint256) ownershipTokenCount;\n\n\tevent CreateCreature(uint256 id, address indexed owner);\n\tevent Transfer(address _from, address _to, uint256 creatureID);\n\n\tfunction add(address _owner, uint16 _species, uint8 _subSpecies, uint8 _eyeColor) external onlyCaller {\n\t\t// do checks in caller function\n\t\tCreature memory _creature = Creature({\n\t\t\tspecies: _species,\n\t\t\tsubSpecies: _subSpecies,\n\t\t\teyeColor: _eyeColor,\n\t\t\ttimestamp: uint64(now)\n\t\t});\n\t\tuint256 newCreatureID = creatures.push(_creature) - 1;\n\t\ttransfer(0, _owner, newCreatureID);\n\t\tCreateCreature(newCreatureID, _owner);\n\t}\n\tfunction getCreature(uint256 id) external view returns (address, uint16, uint8, uint8, uint64) {\n\t\tCreature storage c = creatures[id];\n\t\taddress owner = creatureIndexToOwner[id];\n\t\treturn (\n\t\t\towner,\n\t\t\tc.species,\n\t\t\tc.subSpecies,\n\t\t\tc.eyeColor,\n\t\t\tc.timestamp\n\t\t);\n\t}\n\tfunction transfer(address _from, address _to, uint256 _tokenId) public onlyCaller {\n\t\t// do checks in caller function\n\t\tcreatureIndexToOwner[_tokenId] = _to;\n\t\tif (_from != address(0)) {\n\t\t\townershipTokenCount[_from]--;\n\t\t}\n\t\townershipTokenCount[_to]++;\n\t\tTransfer(_from, _to, _tokenId);\n\t}\n}\n\n\ncontract CreaturesInterface is Permissions {\n\n\tmapping (uint8 => uint256) public creatureCosts;\n\n\tfunction CreaturesInterface() public {\n\t\tcreatureCosts[0] = .10 ether;\n\t\tcreatureCosts[1] = .25 ether;\n\t\tcreatureCosts[2] = .12 ether;\n\t\tcreatureCosts[3] = .50 ether;\n\t\tcreatureCosts[4] = .10 ether;\n\t\tcreatureCosts[5] = 2.0 ether;\n\t\tcreatureCosts[6] = 2.0 ether;\n\t\tcreatureCosts[7] = 1.0 ether;\n\t\tcreatureCosts[8] = .01 ether;\n\t\tcreatureCosts[9] = .025 ether;\n\t}\n\n\tfunction addCreature(uint16 _species, uint8 _subSpecies, uint8 _eyeColor) external payable {\n\t\trequire(_species == 0); // only one species available for now\n\t\trequire(creatureCosts[_subSpecies] > 0);\n\t\trequire(msg.value >= creatureCosts[_subSpecies]);\n\t\tCreatures creatureStorage = Creatures(storageAddress);\n\t\tcreatureStorage.add(msg.sender, _species, _subSpecies, _eyeColor);\n\t}\n    function withdrawBalance() external onlyOwner {\n        ownerAddress.transfer(this.balance);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555067016345785d8a0000600360008060ff168152602001908152602001600020819055506703782dace9d9000060036000600160ff168152602001908152602001600020819055506701aa535d3d0c000060036000600260ff168152602001908152602001600020819055506706f05b59d3b2000060036000600360ff1681526020019081526020016000208190555067016345785d8a000060036000600460ff16815260200190815260200160002081905550671bc16d674ec8000060036000600560ff16815260200190815260200160002081905550671bc16d674ec8000060036000600660ff16815260200190815260200160002081905550670de0b6b3a764000060036000600760ff16815260200190815260200160002081905550662386f26fc1000060036000600860ff168152602001908152602001600020819055506658d15e1762800060036000600960ff1681526020019081526020016000208190555061084b806101c36000396000f300606060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063393a4d341461009e5780633ff33185146100f35780635fd8c7101461012c5780637b8f2e0714610141578063893d20e8146101755780638ff9b84e146101ca578063ab470f0514610203578063ea08bb8914610258578063f2fde38b14610292575b600080fd5b34156100a957600080fd5b6100b16102cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100fe57600080fd5b61012a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506102f5565b005b341561013757600080fd5b61013f6103cb565b005b610173600480803561ffff1690602001909190803560ff1690602001909190803560ff169060200190919050506104a0565b005b341561018057600080fd5b610188610609565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101d557600080fd5b610201600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610632565b005b341561020e57600080fd5b610216610708565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561026357600080fd5b61027c600480803560ff16906020019091905050610732565b6040518082815260200191505060405180910390f35b341561029d57600080fd5b6102c9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061074a565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561035057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156103c85780600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561042657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561049e57600080fd5b565b6000808461ffff161415156104b457600080fd5b6000600360008560ff1660ff168152602001908152602001600020541115156104dc57600080fd5b600360008460ff1660ff16815260200190815260200160002054341015151561050457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663dda69410338686866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff168152602001945050505050600060405180830381600087803b15156105ef57600080fd5b6102c65a03f1151561060057600080fd5b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561068d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156107055780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60036020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107a557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561081c57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505600a165627a7a723058204c228c1f8f7a7a1038c87a05f190d0185f1059391e696e80a2d1e01f72f817bd0029"
}