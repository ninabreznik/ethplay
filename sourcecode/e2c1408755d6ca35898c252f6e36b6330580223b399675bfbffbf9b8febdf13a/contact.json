{
  "address": "0xec67005c4e498ec7f55e092bd1d35cbc47c91892",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Melon Token",
  "contractName": "Melon",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "20000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-27\n*/\n\n// Verified using https://dapp.tools\n// hevm: flattened sources of contracts/Melon.sol\npragma solidity ^0.4.24;\n\n////// contracts/openzeppelin/IERC20.sol\n/* pragma solidity ^0.4.24; */\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n////// contracts/openzeppelin/SafeMath.sol\n/* pragma solidity ^0.4.24; */\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n////// contracts/openzeppelin/ERC20.sol\n/* pragma solidity ^0.4.24; */\n\n/* import \"./IERC20.sol\"; */\n/* import \"./SafeMath.sol\"; */\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n////// contracts/openzeppelin/ERC20Burnable.sol\n/* pragma solidity ^0.4.24; */\n\n/* import \"./ERC20.sol\"; */\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n////// contracts/openzeppelin/ERC20Detailed.sol\n/* pragma solidity ^0.4.24; */\n\n/* import \"./IERC20.sol\"; */\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string name, string symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n////// contracts/Melon.sol\n/* pragma solidity ^0.4.24; */\n\n/* import \"./openzeppelin/ERC20Burnable.sol\"; */\n/* import \"./openzeppelin/ERC20Detailed.sol\"; */\n/* import \"./openzeppelin/SafeMath.sol\"; */\n\ncontract Melon is ERC20Burnable, ERC20Detailed {\n    using SafeMath for uint;\n\n    uint public constant BASE_UNITS = 10 ** 18;\n    uint public constant INFLATION_ENABLE_DATE = 1551398400;\n    uint public constant INITIAL_TOTAL_SUPPLY = uint(932613).mul(BASE_UNITS);\n    uint public constant YEARLY_MINTABLE_AMOUNT = uint(300600).mul(BASE_UNITS);\n    uint public constant MINTING_INTERVAL = 365 days;\n\n    address public council;\n    address public deployer;\n    bool public initialSupplyMinted;\n    uint public nextMinting = INFLATION_ENABLE_DATE;\n\n    modifier onlyDeployer {\n        require(msg.sender == deployer, \"Only deployer can call this\");\n        _;\n    }\n\n    modifier onlyCouncil {\n        require(msg.sender == council, \"Only council can call this\");\n        _;\n    }\n\n    modifier anIntervalHasPassed {\n        require(\n            block.timestamp >= uint(nextMinting),\n            \"Please wait until an interval has passed\"\n        );\n        _;\n    }\n\n    modifier inflationEnabled {\n        require(\n            block.timestamp >= INFLATION_ENABLE_DATE,\n            \"Inflation is not enabled yet\"\n        );\n        _;\n    }\n\n    constructor(\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        address _council\n    ) public ERC20Detailed(_name, _symbol, _decimals) {\n        deployer = msg.sender;\n        council = _council;\n    }\n\n    function changeCouncil(address _newCouncil) public onlyCouncil {\n        council = _newCouncil;\n    }\n\n    function mintInitialSupply(address _initialReceiver) public onlyDeployer {\n        require(!initialSupplyMinted, \"Initial minting already complete\");\n        initialSupplyMinted = true;\n        _mint(_initialReceiver, INITIAL_TOTAL_SUPPLY);\n    }\n\n    function mintInflation() public anIntervalHasPassed inflationEnabled {\n        require(initialSupplyMinted, \"Initial minting not complete\");\n        nextMinting = uint(nextMinting).add(MINTING_INTERVAL);\n        _mint(council, YEARLY_MINTABLE_AMOUNT);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_newCouncil\",\"type\":\"address\"}],\"name\":\"changeCouncil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YEARLY_MINTABLE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialReceiver\",\"type\":\"address\"}],\"name\":\"mintInitialSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INFLATION_ENABLE_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintInflation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"council\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINTING_INTERVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_UNITS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupplyMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_council\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604052635c7876006007553480156200001957600080fd5b5060405162001477380380620014778339810160409081528151602080840151928401516060850151928501805190959490940193909291859185918591620000699160039190860190620000d6565b5081516200007f906004906020850190620000d6565b506005805460068054600160a060020a03191633179055600160a060020a03959095166101000261010060a860020a031960ff90931660ff19909616959095179190911693909317909255506200017b9350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011957805160ff191683800117855562000149565b8280016001018555821562000149579182015b82811115620001495782518255916020019190600101906200012c565b50620001579291506200015b565b5090565b6200017891905b8082111562000157576000815560010162000162565b90565b6112ec806200018b6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302c3b436811461014d57806306fdde031461017d578063095ea7b3146102075780630ffa10151461024c57806318160ddd1461027357806323b872dd14610288578063313ce567146102bf57806339509351146102ea57806342966c681461031b5780635db532021461033357806370a082311461036157806379cc67901461038f5780637c5a7c2a146103c057806395d89b41146103d5578063a457c2d7146103ea578063a9059cbb1461041b578063b4eddb811461044c578063c04fcad814610461578063c551a2f914610476578063d5f394881461048b578063dd62ed3e146104c9578063e2c6d41c146104fd578063f0e0ae3e14610512578063f2c8fb5914610527578063fc2ab6f21461053c575b600080fd5b34801561015957600080fd5b5061017b73ffffffffffffffffffffffffffffffffffffffff60043516610551565b005b34801561018957600080fd5b50610192610628565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cc5781810151838201526020016101b4565b50505050905090810190601f1680156101f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021357600080fd5b5061023873ffffffffffffffffffffffffffffffffffffffff600435166024356106dc565b604080519115158252519081900360200190f35b34801561025857600080fd5b50610261610774565b60408051918252519081900360200190f35b34801561027f57600080fd5b50610261610792565b34801561029457600080fd5b5061023873ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435610798565b3480156102cb57600080fd5b506102d4610888565b6040805160ff9092168252519081900360200190f35b3480156102f657600080fd5b5061023873ffffffffffffffffffffffffffffffffffffffff60043516602435610891565b34801561032757600080fd5b5061017b600435610968565b34801561033f57600080fd5b5061017b73ffffffffffffffffffffffffffffffffffffffff60043516610975565b34801561036d57600080fd5b5061026173ffffffffffffffffffffffffffffffffffffffff60043516610ae8565b34801561039b57600080fd5b5061017b73ffffffffffffffffffffffffffffffffffffffff60043516602435610b10565b3480156103cc57600080fd5b50610261610b1e565b3480156103e157600080fd5b50610192610b26565b3480156103f657600080fd5b5061023873ffffffffffffffffffffffffffffffffffffffff60043516602435610ba5565b34801561042757600080fd5b5061023873ffffffffffffffffffffffffffffffffffffffff60043516602435610c0a565b34801561045857600080fd5b50610261610c20565b34801561046d57600080fd5b50610261610c26565b34801561048257600080fd5b5061017b610c41565b34801561049757600080fd5b506104a0610e29565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156104d557600080fd5b5061026173ffffffffffffffffffffffffffffffffffffffff60043581169060243516610e45565b34801561050957600080fd5b506104a0610e7d565b34801561051e57600080fd5b50610261610e9e565b34801561053357600080fd5b50610261610ea6565b34801561054857600080fd5b50610238610eb2565b600554610100900473ffffffffffffffffffffffffffffffffffffffff1633146105dc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f6e6c7920636f756e63696c2063616e2063616c6c2074686973000000000000604482015290519081900360640190fd5b6005805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d25780601f106106a7576101008083540402835291602001916106d2565b820191906000526020600020905b8154815290600101906020018083116106b557829003601f168201915b5050505050905090565b600073ffffffffffffffffffffffffffffffffffffffff8316151561070057600080fd5b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b61078f62049638670de0b6b3a764000063ffffffff610ed316565b81565b60025490565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602090815260408083203384529091528120546107d9908363ffffffff610f0c16565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160209081526040808320338452909152902055610815848484610f23565b73ffffffffffffffffffffffffffffffffffffffff84166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60055460ff1690565b600073ffffffffffffffffffffffffffffffffffffffff831615156108b557600080fd5b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091529020546108f6908363ffffffff61102416565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6109723382611036565b50565b60065473ffffffffffffffffffffffffffffffffffffffff1633146109fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79206465706c6f7965722063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60065474010000000000000000000000000000000000000000900460ff1615610a8557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f496e697469616c206d696e74696e6720616c726561647920636f6d706c657465604482015290519081900360640190fd5b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017905561097281610ae3620e3b05670de0b6b3a764000063ffffffff610ed316565b611106565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b610b1a82826111d7565b5050565b635c78760081565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106d25780601f106106a7576101008083540402835291602001916106d2565b600073ffffffffffffffffffffffffffffffffffffffff83161515610bc957600080fd5b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091529020546108f6908363ffffffff610f0c16565b6000610c17338484610f23565b50600192915050565b60075481565b61078f620e3b05670de0b6b3a764000063ffffffff610ed316565b600754421015610cd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f506c65617365207761697420756e74696c20616e20696e74657276616c20686160448201527f7320706173736564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b635c787600421015610d4b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f496e666c6174696f6e206973206e6f7420656e61626c65642079657400000000604482015290519081900360640190fd5b60065474010000000000000000000000000000000000000000900460ff161515610dd657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f496e697469616c206d696e74696e67206e6f7420636f6d706c65746500000000604482015290519081900360640190fd5b600754610ded906301e1338063ffffffff61102416565b600755600554610e2790610100900473ffffffffffffffffffffffffffffffffffffffff16610ae362049638670de0b6b3a7640000610ed3565b565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600554610100900473ffffffffffffffffffffffffffffffffffffffff1681565b6301e1338081565b670de0b6b3a764000081565b60065474010000000000000000000000000000000000000000900460ff1681565b600080831515610ee65760009150610f05565b50828202828482811515610ef657fe5b0414610f0157600080fd5b8091505b5092915050565b60008083831115610f1c57600080fd5b5050900390565b73ffffffffffffffffffffffffffffffffffffffff82161515610f4557600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902054610f7b908263ffffffff610f0c16565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082209390935590841681522054610fbd908263ffffffff61102416565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082820183811015610f0157600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216151561105857600080fd5b60025461106b908263ffffffff610f0c16565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020546110a4908263ffffffff610f0c16565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff8216151561112857600080fd5b60025461113b908263ffffffff61102416565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611174908263ffffffff61102416565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160209081526040808320338452909152902054611218908263ffffffff610f0c16565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602090815260408083203384529091529020556112538282611036565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350505600a165627a7a72305820432d2f15c46a3b9546f6495c005aaa585452e08bb1c067506e0968824c70d3480029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000d580ae50b58fe08514deab4e38c0dfdb0d30adc000000000000000000000000000000000000000000000000000000000000000b4d656c6f6e20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d4c4e0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000d580ae50b58fe08514deab4e38c0dfdb0d30adc000000000000000000000000000000000000000000000000000000000000000b4d656c6f6e20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d4c4e0000000000000000000000000000000000000000000000000000000000"
}