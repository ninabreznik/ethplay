{
  "address": "0x0b4d94e04e1fe219d8ad6b9bc7cd0176e273dc28",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Vesting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\npragma solidity 0.4.24;\n \n/**\n * Copyright 2018, Flowchain.co\n *\n * The dapp of team vesting. The lock period is one year.\n */\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface Token {\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);    \n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract Vesting is Ownable {\n    using SafeMath for uint256;\n\n    Token public tokenReward;\n\n    // beneficiary of tokens after they are released\n    address private _beneficiary;\n\n    uint256 private _cliff;\n    uint256 private _start;\n    uint256 private _duration;\n\n    address public _addressOfTokenUsedAsReward;\n    address public creator;\n\n    mapping (address => uint256) private _released;\n\n    uint256 constant public   VESTING_DURATION    =  31536000; // 1 Year in second\n\n    /* Constrctor function */\n    function Vesting() payable {\n        creator = msg.sender;\n        createVestingPeriod(\n            0xA2690D72D6c932AE7Aa1cC0dE48aEaBBDCaf2799,\n            block.timestamp,\n            0,\n            VESTING_DURATION,\n            0x5b53f9755f82439cba66007ec7073c59e0da4a7d\n        );\n    }\n\n    /**\n     * @dev Creates a vesting contract that vests its balance of FLC token to the\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\n     * of the balance will have vested.\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred     \n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\n     * @param start the time (as Unix time) at which point vesting starts\n     * @param duration duration in seconds of the period in which the tokens will vest\n     * @param addressOfTokenUsedAsReward where is the token contract\n     */\n    function createVestingPeriod(address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, address addressOfTokenUsedAsReward) public onlyOwner {\n        require(cliffDuration <= duration);\n        require(duration > 0);\n        require(start.add(duration) > block.timestamp);\n\n        _beneficiary = beneficiary;\n        _duration = duration;\n        _cliff = start.add(cliffDuration);\n        _start = start;\n        _addressOfTokenUsedAsReward = addressOfTokenUsedAsReward;\n        tokenReward = Token(addressOfTokenUsedAsReward);\n    }\n\n    /**\n     * @return the beneficiary of the tokens.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @return the cliff time of the token vesting.\n     */\n    function cliff() public view returns (uint256) {\n        return _cliff;\n    }\n\n    /**\n     * @return the start time of the token vesting.\n     */\n    function start() public view returns (uint256) {\n        return _start;\n    }\n\n    /**\n     * @return the duration of the token vesting.\n     */\n    function duration() public view returns (uint256) {\n        return _duration;\n    }\n\n    /**\n     * @return the amount of the token released.\n     */\n    function released(address token) public view returns (uint256) {\n        return _released[token];\n    }\n\n    /**\n     * @notice Mints and transfers tokens to beneficiary.\n     * @param token ERC20 token which is being vested\n     */\n    function release(address token) public onlyOwner {    \n        uint256 unreleased = _releasableAmount(token);\n\n        require(unreleased > 0);\n\n        _released[token] = _released[token].add(unreleased);\n\n        tokenReward.transfer(_beneficiary, unreleased);\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\n     * @param token ERC20 token which is being vested\n     */\n    function _releasableAmount(address token) private view returns (uint256) {\n        return _vestedAmount(token).sub(_released[token]);\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested.\n     * @param token ERC20 token which is being vested\n     */\n    function _vestedAmount(address token) private view returns (uint256) {\n        uint256 currentBalance = tokenReward.balanceOf(address(this));\n        uint256 totalBalance = currentBalance.add(_released[token]);\n\n        if (block.timestamp < _cliff) {\n            return 0;\n        } else if (block.timestamp >= _start.add(_duration)) {\n            return totalBalance;\n        } else {\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n        }\n    }\n}",
  "bytecode": "6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360078054600160a060020a0319163317905561009d73a2690d72d6c932ae7aa1cc0de48aeabbdcaf27994260006301e13380735b53f9755f82439cba66007ec7073c59e0da4a7d6401000000006100a2810204565b610193565b6100b3640100000000610169810204565b15156100be57600080fd5b818311156100cb57600080fd5b600082116100d857600080fd5b426100f085846401000000006105bf61017a82021704565b116100fa57600080fd5b60028054600160a060020a031916600160a060020a0387161790556005829055610131848464010000000061017a81026105bf1704565b600355600493909355505060068054600160a060020a03909216600160a060020a031992831681179091556001805490921617905550565b600054600160a060020a0316331490565b60008282018381101561018c57600080fd5b9392505050565b61082b806101a26000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146100df5780630fb5a6b41461011057806313d033c014610137578063191655871461014c57806338af3eed1461016f5780634cfc4d30146101845780636e66f6e914610199578063715018a6146101ae5780638da5cb5b146101c35780638f32d59b146101d85780639852595c14610201578063be9a655514610222578063e465cd6714610237578063f2fde38b1461026a578063ff7cea351461028b575b600080fd5b3480156100eb57600080fd5b506100f46102a0565b60408051600160a060020a039092168252519081900360200190f35b34801561011c57600080fd5b506101256102af565b60408051918252519081900360200190f35b34801561014357600080fd5b506101256102b5565b34801561015857600080fd5b5061016d600160a060020a03600435166102bb565b005b34801561017b57600080fd5b506100f46103c4565b34801561019057600080fd5b506101256103d3565b3480156101a557600080fd5b506100f46103db565b3480156101ba57600080fd5b5061016d6103ea565b3480156101cf57600080fd5b506100f4610454565b3480156101e457600080fd5b506101ed610463565b604080519115158252519081900360200190f35b34801561020d57600080fd5b50610125600160a060020a0360043516610474565b34801561022e57600080fd5b5061012561048f565b34801561024357600080fd5b5061016d600160a060020a0360043581169060243590604435906064359060843516610495565b34801561027657600080fd5b5061016d600160a060020a0360043516610559565b34801561029757600080fd5b506100f4610578565b600754600160a060020a031681565b60055490565b60035490565b60006102c5610463565b15156102d057600080fd5b6102d982610587565b9050600081116102e857600080fd5b600160a060020a038216600090815260086020526040902054610311908263ffffffff6105bf16565b600160a060020a0380841660009081526008602090815260408083209490945560015460025485517fa9059cbb000000000000000000000000000000000000000000000000000000008152908516600482015260248101879052945193169363a9059cbb9360448083019491928390030190829087803b15801561039457600080fd5b505af11580156103a8573d6000803e3d6000fd5b505050506040513d60208110156103be57600080fd5b50505050565b600254600160a060020a031690565b6301e1338081565b600154600160a060020a031681565b6103f2610463565b15156103fd57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b600160a060020a031660009081526008602052604090205490565b60045490565b61049d610463565b15156104a857600080fd5b818311156104b557600080fd5b600082116104c257600080fd5b426104d3858463ffffffff6105bf16565b116104dd57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038716179055600582905561051484846105bf565b600355600493909355505060068054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556001805490921617905550565b610561610463565b151561056c57600080fd5b610575816105dc565b50565b600654600160a060020a031681565b600160a060020a0381166000908152600860205260408120546105b9906105ad84610659565b9063ffffffff61079716565b92915050565b6000828201838110156105d157600080fd5b8091505b5092915050565b600160a060020a03811615156105f157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009283928392600160a060020a03909216916370a082319160248082019260209290919082900301818787803b1580156106c557600080fd5b505af11580156106d9573d6000803e3d6000fd5b505050506040513d60208110156106ef57600080fd5b5051600160a060020a03851660009081526008602052604090205490925061071e90839063ffffffff6105bf16565b90506003544210156107335760009250610790565b6005546004546107489163ffffffff6105bf16565b421061075657809250610790565b61078d6005546107816107746004544261079790919063ffffffff16565b849063ffffffff6107ae16565b9063ffffffff6107dc16565b92505b5050919050565b600080838311156107a757600080fd5b5050900390565b6000808315156107c157600091506105d5565b508282028284828115156107d157fe5b04146105d157600080fd5b6000808083116107eb57600080fd5b82848115156107f657fe5b049493505050505600a165627a7a723058208379f18abafc45980dd368d76c4156a5dbc4afc7ac81e58c620f402e5af82b290029"
}