{
  "address": "0x4fd24de60b17f7c412c3d93bd6f87f440ece54f0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VIXCO",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-19\n*/\n\npragma solidity ^0.4.23;\n\ncontract ERC20 {\n\tfunction totalSupply() public view returns (uint256 totalSup);\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC223 {\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n\tevent Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\n}\n\ncontract ERC223ReceivingContract {\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract VIXCO is ERC223, ERC20 {\n    \n\tusing SafeMath for uint256;\n\n\tuint public constant _totalSupply = 21000000000e18;\n\t//starting supply of Token\n\n\tstring public constant symbol = \"VIXCO\";\n\tstring public constant name = \"VIXCO Coin\";\n\tuint8 public constant decimals = 18;\n\n\tmapping(address => uint256) balances;\n\tmapping(address => mapping(address => uint256)) allowed;\n\n\tconstructor() public{\n\t\tbalances[msg.sender] = _totalSupply;\n\t\temit Transfer(0x0, msg.sender, _totalSupply);\n\t}\n\n\tfunction totalSupply() public view returns (uint256 totalSup) {\n\treturn _totalSupply;\n\t}\n\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n    \n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\trequire(\n\t\t\t!isContract(_to)\n\t\t);\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n    \n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success){\n\t\trequire(\n\t\t\tisContract(_to)\n\t\t);\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tERC223ReceivingContract(_to).tokenFallback(msg.sender, _value, _data);\n\t\temit Transfer(msg.sender, _to, _value, _data);\n\t\treturn true;\n\t}\n    \n\tfunction isContract(address _from) private view returns (bool) {\n\t\tuint256 codeSize;\n\t\tassembly {\n\t\t\tcodeSize := extcodesize(_from)\n\t\t}\n\t\treturn codeSize > 0;\n\t}\n    \n    \n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(\n\t\t\tbalances[_from] >= _value\n\t\t\t&& _value > 0\n\t\t);\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n    \n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\trequire(\n\t\t\t(_value == 0) || (allowed[msg.sender][_spender] == 0)\n\t\t);\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n    \n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remain) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\tfunction () public payable {\n\t\trevert();\n\t}\n    \n\tevent Transfer(address  indexed _from, address indexed _to, uint256 _value);\n\tevent Transfer(address indexed _from, address  indexed _to, uint _value, bytes _data);\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}",
  "bytecode": "608060405234801561001057600080fd5b506b43dacaf91c1a84ff080000006000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6b43dacaf91c1a84ff080000006040518082815260200191505060405180910390a3611077806100cb6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b4578063095ea7b31461014457806318160ddd146101a957806323b872dd146101d4578063313ce567146102595780633eaaf86b1461028a57806370a08231146102b557806395d89b411461030c578063a9059cbb1461039c578063be45fd6214610401578063dd62ed3e146104ac575b600080fd5b3480156100c057600080fd5b506100c9610523565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101095780820151818401526020810190506100ee565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015057600080fd5b5061018f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061055c565b604051808215151515815260200191505060405180910390f35b3480156101b557600080fd5b506101be6106e3565b6040518082815260200191505060405180910390f35b3480156101e057600080fd5b5061023f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106f7565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b5061026e6109f7565b604051808260ff1660ff16815260200191505060405180910390f35b34801561029657600080fd5b5061029f6109fc565b6040518082815260200191505060405180910390f35b3480156102c157600080fd5b506102f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a0c565b6040518082815260200191505060405180910390f35b34801561031857600080fd5b50610321610a54565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610361578082015181840152602081019050610346565b50505050905090810190601f16801561038e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a857600080fd5b506103e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a8d565b604051808215151515815260200191505060405180910390f35b34801561040d57600080fd5b50610492600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610c39565b604051808215151515815260200191505060405180910390f35b3480156104b857600080fd5b5061050d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f7a565b6040518082815260200191505060405180910390f35b6040805190810160405280600a81526020017f564958434f20436f696e0000000000000000000000000000000000000000000081525081565b6000808214806105e857506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156105f357600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006b43dacaf91c1a84ff08000000905090565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156107475750600082115b151561075257600080fd5b6107a3826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461100190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610836826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101a90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061090782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461100190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6b43dacaf91c1a84ff0800000081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600581526020017f564958434f00000000000000000000000000000000000000000000000000000081525081565b6000610a9883611038565b151515610aa457600080fd5b610af5826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461100190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b88826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101a90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000610c4484611038565b1515610c4f57600080fd5b610ca0836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461100190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d33836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101a90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e37578082015181840152602081019050610e1c565b50505050905090810190601f168015610e645780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f34578082015181840152602081019050610f19565b50505050905090810190601f168015610f615780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600190509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561100f57fe5b818303905092915050565b600080828401905083811015151561102e57fe5b8091505092915050565b600080823b9050600081119150509190505600a165627a7a72305820df2c64845076983e12daac1b23225a74efc124241d6a1e840edbe7af065898380029"
}