{
  "address": "0x1d556d7fb1af721da8b9c30d44f6d4a52f8e0ba2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-24\n*/\n\npragma solidity ^0.4.18;\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ApproveAndCallReceiver {\n    function receiveApproval(\n    address _from,\n    uint256 _amount,\n    address _token,\n    bytes _data\n    ) public;\n}\n\ncontract ERC20Token {\n\n    using SafeMath for uint256;\n    \n    uint256 public totalSupply;\n    \n    mapping (address => uint256) public balanceOf;\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract TokenI is ERC20Token {\n\n    string public name;                \n    uint8 public decimals;             \n    string public symbol;              \n\n    function approveAndCall(\n    address _spender,\n    uint256 _amount,\n    bytes _extraData\n    ) public returns (bool success);\n\n\n    function generateTokens(address _owner, uint _amount) public returns (bool);\n\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\n\n}\n\ncontract Token is TokenI {\n\n    struct FreezeInfo {\n    address user;\n    uint256 amount;\n    }\n    //Key1: step(募资阶段); Key2: user sequence(用户序列)\n    mapping (uint8 => mapping (uint8 => FreezeInfo)) public freezeOf; //所有锁仓，key 使用序号向上增加，方便程序查询。\n    mapping (uint8 => uint8) public lastFreezeSeq; //最后的 freezeOf 键值。key: step; value: sequence\n    mapping (address => uint256) public airdropOf;//空投用户\n\n    address public owner;\n    bool public paused=false;//是否暂停私募\n    bool public pauseTransfer=false;//是否允许转账\n    uint256 public minFunding = 1 ether;  //最低起投额度\n    uint256 public airdropQty=0;//每个账户空投获得的量\n    uint256 public airdropTotalQty=0;//总共发放的空投代币数量\n    uint256 public tokensPerEther = 10000;//1eth兑换多少代币\n    address private vaultAddress;//存储众筹ETH的地址\n    uint256 public totalCollected = 0;//已经募到ETH的总数量\n\n    event Burn(address indexed from, uint256 value);\n\n    event Freeze(address indexed from, uint256 value);\n\n    event Unfreeze(address indexed from, uint256 value);\n\n    event Payment(address sender, uint256 _ethAmount, uint256 _tokenAmount);\n\n    function Token(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        address _vaultAddress\n    ) public {\n        require(_vaultAddress != 0);\n        totalSupply = initialSupply * 10 ** uint256(decimalUnits);\n        balanceOf[msg.sender] = totalSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n        owner = msg.sender;\n        vaultAddress=_vaultAddress;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier realUser(address user){\n        if(user == 0x0){\n            revert();\n        }\n        _;\n    }\n\n    modifier moreThanZero(uint256 _value){\n        if (_value <= 0){\n            revert();\n        }\n        _;\n    }\n\n    function transfer(address _to, uint256 _value) realUser(_to) moreThanZero(_value) public returns (bool) {\n        require(!pauseTransfer);\n        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                     // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add the same to the recipient\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) moreThanZero(_value) public\n    returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender,_spender,_value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n        require(approve(_spender, _amount));\n        ApproveAndCallReceiver(_spender).receiveApproval(\n        msg.sender,\n        _amount,\n        this,\n        _extraData\n        );\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) realUser(_from) realUser(_to) moreThanZero(_value) public returns (bool success) {\n        require(!pauseTransfer);\n        require(balanceOf[_from] >= _value);                 // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n        require(allowance[_from][msg.sender] >= _value);     // Check allowance\n        balanceOf[_from] = balanceOf[_from].sub(_value);                           // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transferMulti(address[] _to, uint256[] _value) onlyOwner public returns (uint256 amount){\n        require(_to.length == _value.length);\n        uint8 len = uint8(_to.length);\n        for(uint8 j; j<len; j++){\n            amount = amount.add(_value[j]*10**uint256(decimals));\n        }\n        require(balanceOf[msg.sender] >= amount);\n        for(uint8 i; i<len; i++){\n            address _toI = _to[i];\n            uint256 _valueI = _value[i]*10**uint256(decimals);\n            balanceOf[_toI] = balanceOf[_toI].add(_valueI);\n            balanceOf[msg.sender] =balanceOf[msg.sender].sub(_valueI);\n            emit Transfer(msg.sender, _toI, _valueI);\n        }\n    }\n\n    //冻结账户\n    function freeze(address _user, uint256 _value, uint8 _step) moreThanZero(_value) onlyOwner public returns (bool success) {\n        _value=_value*10**uint256(decimals);\n        return _freeze(_user,_value,_step);\n    }\n\n    function _freeze(address _user, uint256 _value, uint8 _step) moreThanZero(_value) private returns (bool success) {\n        //info256(\"balanceOf[_user]\", balanceOf[_user]);\n        require(balanceOf[_user] >= _value);\n        balanceOf[_user] = balanceOf[_user].sub(_value);\n        freezeOf[_step][lastFreezeSeq[_step]] = FreezeInfo({user:_user, amount:_value});\n        lastFreezeSeq[_step]++;\n        emit Freeze(_user, _value);\n        return true;\n    }\n\n\n    //为用户解锁账户资金\n    function unFreeze(uint8 _step) onlyOwner public returns (bool unlockOver) {\n        //_end = length of freezeOf[_step]\n        uint8 _end = lastFreezeSeq[_step];\n        require(_end > 0);\n        unlockOver=false;\n        uint8  _start=0;\n        for(; _end>_start; _end--){\n            FreezeInfo storage fInfo = freezeOf[_step][_end-1];\n            uint256 _amount = fInfo.amount;\n            balanceOf[fInfo.user] += _amount;\n            delete freezeOf[_step][_end-1];\n            lastFreezeSeq[_step]--;\n            emit Unfreeze(fInfo.user, _amount);\n        }\n    }\n\n    function generateTokens(address _user, uint _amount) onlyOwner public returns (bool) {\n        _amount=_amount*10**uint256(decimals);\n        return _generateTokens(_user,_amount);\n    }\n\n    function _generateTokens(address _user, uint _amount)  private returns (bool) {\n        require(balanceOf[owner] >= _amount);\n        balanceOf[_user] = balanceOf[_user].add(_amount);\n        balanceOf[owner] = balanceOf[owner].sub(_amount);\n        emit Transfer(0, _user, _amount);\n        return true;\n    }\n\n    function destroyTokens(address _user, uint256 _amount) onlyOwner public returns (bool) {\n        _amount=_amount*10**uint256(decimals);\n        return _destroyTokens(_user,_amount);\n    }\n\n    function _destroyTokens(address _user, uint256 _amount) private returns (bool) {\n        require(balanceOf[_user] >= _amount);\n        balanceOf[owner] = balanceOf[owner].add(_amount);\n        balanceOf[_user] = balanceOf[_user].sub(_amount);\n        emit Transfer(_user, 0, _amount);\n        emit Burn(_user, _amount);\n        return true;\n    }\n\n\n    function changeOwner(address newOwner) onlyOwner public returns (bool) {\n        balanceOf[newOwner] = balanceOf[owner];\n        balanceOf[owner] = 0;\n        owner = newOwner;\n        return true;\n    }\n\n\n    /**\n     * 修改token兑换比率,1eth兑换多少代币\n     */\n    function changeTokensPerEther(uint256 _newRate) onlyOwner public {\n        tokensPerEther = _newRate;\n    }\n\n    /**\n     * 修改每个账户可获得的空投量\n     */   \n    function changeAirdropQty(uint256 _airdropQty) onlyOwner public {\n        airdropQty = _airdropQty;\n    }\n\n    /**\n     * 修改空投总量\n     */   \n    function changeAirdropTotalQty(uint256 _airdropTotalQty) onlyOwner public {\n        uint256 _token =_airdropTotalQty*10**uint256(decimals);\n        require(balanceOf[owner] >= _token);\n        airdropTotalQty = _airdropTotalQty;\n    }\n\n        ////////////////\n    // 修是否暂停私募\n    ////////////////\n    function changePaused(bool _paused) onlyOwner public {\n        paused = _paused;\n    }\n    \n    function changePauseTranfser(bool _paused) onlyOwner public {\n        pauseTransfer = _paused;\n    }\n\n    //accept ether\n    function() payable public {\n        require(!paused);\n        address _user=msg.sender;\n        uint256 tokenValue;\n        if(msg.value==0){//空投\n            require(airdropQty>0);\n            require(airdropTotalQty>=airdropQty);\n            require(airdropOf[_user]==0);\n            tokenValue=airdropQty*10**uint256(decimals);\n            airdropOf[_user]=tokenValue;\n            airdropTotalQty-=airdropQty;\n            require(_generateTokens(_user, tokenValue));\n            emit Payment(_user, msg.value, tokenValue);\n        }else{\n            require(msg.value >= minFunding);//最低起投\n            require(msg.value % 1 ether==0);//只能投整数倍eth\n            totalCollected +=msg.value;\n            require(vaultAddress.send(msg.value));//Send the ether to the vault\n            tokenValue = (msg.value/1 ether)*(tokensPerEther*10 ** uint256(decimals));\n            require(_generateTokens(_user, tokenValue));\n            uint256 lock1 = tokenValue / 5;\n            require(_freeze(_user, lock1, 0));\n            _freeze(_user, lock1, 1);\n            _freeze(_user, lock1, 2);\n            _freeze(_user, lock1, 3);\n            emit Payment(_user, msg.value, tokenValue);\n\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"changePauseTranfser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeTokensPerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airdropTotalQty\",\"type\":\"uint256\"}],\"name\":\"changeAirdropTotalQty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"changePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"unFreeze\",\"outputs\":[{\"name\":\"unlockOver\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airdropQty\",\"type\":\"uint256\"}],\"name\":\"changeAirdropQty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTotalQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastFreezeSeq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600960146101000a81548160ff0219169083151502179055506000600960156101000a81548160ff021916908315150217905550670de0b6b3a7640000600a556000600b556000600c55612710600d556000600f553480156200006857600080fd5b50604051620031d4380380620031d4833981018060405281019080805190602001909291908051820192919060200180519060200190929190805182019291906020018051906020019092919050505060008173ffffffffffffffffffffffffffffffffffffffff1614151515620000df57600080fd5b8260ff16600a0a8502600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600390805190602001906200014c9291906200020e565b508160059080519060200190620001659291906200020e565b5082600460006101000a81548160ff021916908360ff16021790555033600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620002bd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025157805160ff191683800117855562000282565b8280016001018555821562000282579182015b828111156200028157825182559160200191906001019062000264565b5b50905062000291919062000295565b5090565b620002ba91905b80821115620002b65760008160009055506001016200029c565b5090565b90565b612f0780620002cd6000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146104e5578063095ea7b31461057557806315980795146105da57806318160ddd1461065e578063193a424914610689578063205a76f2146106b457806323b872dd1461070b5780632946ae5d146107905780632c08eb0b146107bf5780632f2d9109146107ec578063313ce5671461081957806335bce6e41461084a5780633842147614610907578063492d06cf146109365780635c975abb1461097e57806370a08231146109ad578063827f32c014610a045780638da5cb5b14610a6957806390a7013914610ac057806395d89b4114610aef5780639703fa2e14610b7f578063a6f9dae114610baa578063a9059cbb14610c05578063b96b8edf14610c6a578063ba4e1c3814610c97578063cae9ca5114610cc2578063d3ce77fe14610d6d578063dd62ed3e14610dd2578063e29eb83614610e49578063f524613f14610e74578063f856d60514610ee6578063f99ec32c14610f11575b6000806000600960149054906101000a900460ff161515156101b757600080fd5b3392506000341415610334576000600b541115156101d457600080fd5b600b54600c54101515156101e757600080fd5b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561023557600080fd5b600460009054906101000a900460ff1660ff16600a0a600b5402915081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c600082825403925050819055506102b18383610f5b565b15156102bc57600080fd5b7f9643c1b5b172b26d5f028be7fe646349bd5e3cd9367bb18f9e825afa828b7d93833484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a16104e0565b600a54341015151561034557600080fd5b6000670de0b6b3a76400003481151561035a57fe5b0614151561036757600080fd5b34600f60008282540192505081905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156103d957600080fd5b600460009054906101000a900460ff1660ff16600a0a600d5402670de0b6b3a76400003481151561040657fe5b040291506104148383610f5b565b151561041f57600080fd5b60058281151561042b57fe5b04905061043a83826000611195565b151561044557600080fd5b61045183826001611195565b5061045e83826002611195565b5061046b83826003611195565b507f9643c1b5b172b26d5f028be7fe646349bd5e3cd9367bb18f9e825afa828b7d93833484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b505050005b3480156104f157600080fd5b506104fa611402565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561053a57808201518184015260208101905061051f565b50505050905090810190601f1680156105675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058157600080fd5b506105c0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114a0565b604051808215151515815260200191505060405180910390f35b3480156105e657600080fd5b50610615600480360381019080803560ff169060200190929190803560ff1690602001909291905050506115a3565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561066a57600080fd5b506106736115f4565b6040518082815260200191505060405180910390f35b34801561069557600080fd5b5061069e6115fa565b6040518082815260200191505060405180910390f35b3480156106c057600080fd5b506106f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611600565b6040518082815260200191505060405180910390f35b34801561071757600080fd5b50610776600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611618565b604051808215151515815260200191505060405180910390f35b34801561079c57600080fd5b506107bd600480360381019080803515159060200190929190505050611aa3565b005b3480156107cb57600080fd5b506107ea60048036038101908080359060200190929190505050611b1c565b005b3480156107f857600080fd5b5061081760048036038101908080359060200190929190505050611b82565b005b34801561082557600080fd5b5061082e611c75565b604051808260ff1660ff16815260200191505060405180910390f35b34801561085657600080fd5b506108f16004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611c88565b6040518082815260200191505060405180910390f35b34801561091357600080fd5b50610934600480360381019080803515159060200190929190505050611fb8565b005b34801561094257600080fd5b50610964600480360381019080803560ff169060200190929190505050612031565b604051808215151515815260200191505060405180910390f35b34801561098a57600080fd5b506109936122cc565b604051808215151515815260200191505060405180910390f35b3480156109b957600080fd5b506109ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122df565b6040518082815260200191505060405180910390f35b348015610a1057600080fd5b50610a4f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122f7565b604051808215151515815260200191505060405180910390f35b348015610a7557600080fd5b50610a7e612381565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610acc57600080fd5b50610ad56123a7565b604051808215151515815260200191505060405180910390f35b348015610afb57600080fd5b50610b046123ba565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b44578082015181840152602081019050610b29565b50505050905090810190601f168015610b715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b8b57600080fd5b50610b94612458565b6040518082815260200191505060405180910390f35b348015610bb657600080fd5b50610beb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061245e565b604051808215151515815260200191505060405180910390f35b348015610c1157600080fd5b50610c50600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612612565b604051808215151515815260200191505060405180910390f35b348015610c7657600080fd5b50610c95600480360381019080803590602001909291905050506128dc565b005b348015610ca357600080fd5b50610cac612942565b6040518082815260200191505060405180910390f35b348015610cce57600080fd5b50610d53600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612948565b604051808215151515815260200191505060405180910390f35b348015610d7957600080fd5b50610db8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612ac6565b604051808215151515815260200191505060405180910390f35b348015610dde57600080fd5b50610e33600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b50565b6040518082815260200191505060405180910390f35b348015610e5557600080fd5b50610e5e612b75565b6040518082815260200191505060405180910390f35b348015610e8057600080fd5b50610ecc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff169060200190929190505050612b7b565b604051808215151515815260200191505060405180910390f35b348015610ef257600080fd5b50610efb612c18565b6040518082815260200191505060405180910390f35b348015610f1d57600080fd5b50610f3f600480360381019080803560ff169060200190929190505050612c1e565b604051808260ff1660ff16815260200191505060405180910390f35b60008160016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610fcd57600080fd5b61101f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c3e90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110d68260016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c5c90919063ffffffff16565b60016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000826000811115156111a757600080fd5b83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111f557600080fd5b61124784600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c5c90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060408051908101604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815250600660008560ff1660ff1681526020019081526020016000206000600760008760ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff1660ff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050600760008460ff1660ff168152602001908152602001600020600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550508473ffffffffffffffffffffffffffffffffffffffff167ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0856040518082815260200191505060405180910390a260019150509392505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114985780601f1061146d57610100808354040283529160200191611498565b820191906000526020600020905b81548152906001019060200180831161147b57829003601f168201915b505050505081565b6000816000811115156114b257600080fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60005481565b600a5481565b60086020528060005260406000206000915090505481565b60008360008173ffffffffffffffffffffffffffffffffffffffff16141561163f57600080fd5b8360008173ffffffffffffffffffffffffffffffffffffffff16141561166457600080fd5b8360008111151561167457600080fd5b600960159054906101000a900460ff1615151561169057600080fd5b84600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156116de57600080fd5b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561176c57600080fd5b84600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156117f757600080fd5b61184985600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c5c90919063ffffffff16565b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118de85600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c3e90919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119b085600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c5c90919063ffffffff16565b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600193505050509392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aff57600080fd5b80600960156101000a81548160ff02191690831515021790555050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b7857600080fd5b80600d8190555050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611be057600080fd5b600460009054906101000a900460ff1660ff16600a0a820290508060016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611c6a57600080fd5b81600c819055505050565b600460009054906101000a900460ff1681565b600080600080600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ced57600080fd5b86518851141515611cfd57600080fd5b875194505b8460ff168460ff161015611d6357611d54600460009054906101000a900460ff1660ff16600a0a888660ff16815181101515611d3a57fe5b906020019060200201510287612c3e90919063ffffffff16565b95508380600101945050611d02565b85600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611db157600080fd5b5b8460ff168360ff161015611fad57878360ff16815181101515611dd157fe5b906020019060200201519150600460009054906101000a900460ff1660ff16600a0a878460ff16815181101515611e0457fe5b90602001906020020151029050611e6381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c3e90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ef881600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c5c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38280600101935050611db2565b505050505092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561201457600080fd5b80600960146101000a81548160ff02191690831515021790555050565b6000806000806000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561209557600080fd5b600760008760ff1660ff16815260200190815260200160002060009054906101000a900460ff16935060008460ff161115156120d057600080fd5b60009450600092505b8260ff168460ff1611156122c357600660008760ff1660ff16815260200190815260200160002060006001860360ff1660ff16815260200190815260200160002091508160010154905080600160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600660008760ff1660ff16815260200190815260200160002060006001860360ff1660ff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600760008760ff1660ff168152602001908152602001600020600081819054906101000a900460ff16809291906001900391906101000a81548160ff021916908360ff160217905550508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f826040518082815260200191505060405180910390a28380600190039450506120d9565b50505050919050565b600960149054906101000a900460ff1681565b60016020528060005260406000206000915090505481565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561235557600080fd5b600460009054906101000a900460ff1660ff16600a0a820291506123798383610f5b565b905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960159054906101000a900460ff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124505780601f1061242557610100808354040283529160200191612450565b820191906000526020600020905b81548152906001019060200180831161243357829003601f168201915b505050505081565b600b5481565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124bc57600080fd5b60016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008260008173ffffffffffffffffffffffffffffffffffffffff16141561263957600080fd5b8260008111151561264957600080fd5b600960159054906101000a900460ff1615151561266557600080fd5b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156126b357600080fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561274157600080fd5b61279384600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c5c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061282884600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c3e90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561293857600080fd5b80600b8190555050565b600c5481565b600061295484846114a0565b151561295f57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612a54578082015181840152602081019050612a39565b50505050905090810190601f168015612a815780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015612aa357600080fd5b505af1158015612ab7573d6000803e3d6000fd5b50505050600190509392505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b2457600080fd5b600460009054906101000a900460ff1660ff16600a0a82029150612b488383612c75565b905092915050565b6002602052816000526040600020602052806000526040600020600091509150505481565b600f5481565b600082600081111515612b8d57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612be957600080fd5b600460009054906101000a900460ff1660ff16600a0a84029350612c0e858585611195565b9150509392505050565b600d5481565b60076020528060005260406000206000915054906101000a900460ff1681565b6000808284019050838110151515612c5257fe5b8091505092915050565b6000828211151515612c6a57fe5b818303905092915050565b600081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612cc557600080fd5b612d398260016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c3e90919063ffffffff16565b60016000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612df082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c5c90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050929150505600a165627a7a72305820e72c1ef421adab74363eb189d17a126df4924daa1c1ed1ebc50602db1f6cad2d0029000000000000000000000000000000000000000000000000000000007735940000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000c303ecad5b865e49edd2a0735cab25aaa2906baa000000000000000000000000000000000000000000000000000000000000000c536f6369616c20436861696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035343410000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000007735940000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000c303ecad5b865e49edd2a0735cab25aaa2906baa000000000000000000000000000000000000000000000000000000000000000c536f6369616c20436861696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035343410000000000000000000000000000000000000000000000000000000000"
}