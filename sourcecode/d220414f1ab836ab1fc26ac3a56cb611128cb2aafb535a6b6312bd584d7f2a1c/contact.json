{
  "address": "0x807b9487aaf00629b674bd6d02e4917453bc5939",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Ethbits: Old Token 1",
  "contractName": "CrowdsaleToken",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-05-03\n*/\n\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transferFrom(address from, address to, uint value) returns (bool ok);\n  function approve(address spender, uint value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n\n\n/**\n * Standard ERC20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, SafeMath {\n\n  mapping(address => uint) balances;\n  mapping (address => mapping (address => uint)) allowed;\n\n  function transfer(address _to, uint _value) returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balances[_from], _value);\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint _value) returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n\n\n\n/**\n * Upgrade agent interface inspired by Lunyr.\n *\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  /** Interface marker */\n  function isUpgradeAgent() public constant returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\n\n/**\n * Safe unsigned safe math.\n *\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n *\n * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n *\n * Maintained here until merged to mainline zeppelin-solidity.\n *\n */\nlibrary SafeMathLib {\n\n  function times(uint a, uint b) returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function minus(uint a, uint b) returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function plus(uint a, uint b) returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) private {\n    if (!assertion) throw;\n  }\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\ncontract UpgradeableToken is StandardToken {\n\n  using SafeMathLib for uint;\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint256 public totalUpgraded;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  function UpgradeAgentEnabledToken(address _upgradeMaster) {\n    upgradeMaster = _upgradeMaster;\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint256 value) public {\n\n      UpgradeState state = getUpgradeState();\n      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n        // Called in a bad state\n        throw;\n      }\n\n      // Validate input value.\n      if (value == 0) throw;\n\n      balances[msg.sender] = balances[msg.sender].minus(value);\n\n      // Take tokens out from circulation\n      totalSupply = totalSupply.minus(value);\n      totalUpgraded = totalUpgraded.plus(value);\n\n      // Upgrade agent reissues the tokens\n      upgradeAgent.upgradeFrom(msg.sender, value);\n      Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles\n   */\n  function setUpgradeAgent(address agent) external {\n\n      if(!canUpgrade()) {\n        // The token is not yet in a state that we could think upgrading\n        throw;\n      }\n\n      if (agent == 0x0) throw;\n      // Only a master can designate the next agent\n      if (msg.sender != upgradeMaster) throw;\n      // Upgrade has already begun for an agent\n      if (getUpgradeState() == UpgradeState.Upgrading) throw;\n\n      upgradeAgent = UpgradeAgent(agent);\n\n      // Bad interface\n      if(!upgradeAgent.isUpgradeAgent()) throw;\n\n      // Make sure that token supplies match in source and target\n      if (upgradeAgent.originalSupply() != totalSupply) throw;\n\n      UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public constant returns(UpgradeState) {\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function setUpgradeMaster(address master) external {\n      if (master == 0x0) throw;\n      if (msg.sender != upgradeMaster) throw;\n      upgradeMaster = master;\n  }\n\n  /**\n   * Child contract can enable to provide the condition when the upgrade can begun.\n   */\n  function canUpgrade() public constant returns(bool) {\n     return true;\n  }\n\n}\n\n\n\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n  address public owner;\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n\n\n/**\n * Define interface for releasing the token transfer after a successful crowdsale.\n */\ncontract ReleasableToken is ERC20, Ownable {\n\n  /* The finalizer contract that allows unlift the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   *\n   */\n  modifier canTransfer(address _sender) {\n\n    if(!released) {\n        if(!transferAgents[_sender]) {\n            throw;\n        }\n    }\n\n    _;\n  }\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n    releaseAgent = addr;\n  }\n\n  /**\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    transferAgents[addr] = state;\n  }\n\n  /**\n   * One way function to release the tokens to the wild.\n   *\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    released = true;\n  }\n\n  /** The function can be called only before or after the tokens have been releasesd */\n  modifier inReleaseState(bool releaseState) {\n    if(releaseState != released) {\n        throw;\n    }\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    if(msg.sender != releaseAgent) {\n        throw;\n    }\n    _;\n  }\n\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n    // Call StandardToken.transfer()\n   return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n    // Call StandardToken.transferForm()\n    return super.transferFrom(_from, _to, _value);\n  }\n\n}\n\n\n\n\n\n\n\n/**\n * A token that can increase its supply by another contract.\n *\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\n *\n */\ncontract MintableToken is StandardToken, Ownable {\n\n  using SafeMathLib for uint;\n\n  bool public mintingFinished = false;\n\n  /** List of agents that are allowed to create new tokens */\n  mapping (address => bool) public mintAgents;\n\n  /**\n   * Create new tokens and allocate them to an address..\n   *\n   * Only callably by a crowdsale contract (mint agent).\n   */\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n    totalSupply = totalSupply.plus(amount);\n    balances[receiver] = balances[receiver].plus(amount);\n    Transfer(0, receiver, amount);\n  }\n\n  /**\n   * Owner can allow a crowdsale contract to mint new tokens.\n   */\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n    mintAgents[addr] = state;\n  }\n\n  modifier onlyMintAgent() {\n    // Only crowdsale contracts are allowed to mint new tokens\n    if(!mintAgents[msg.sender]) {\n        throw;\n    }\n    _;\n  }\n\n  /** Make sure we are not done yet. */\n  modifier canMint() {\n    if(mintingFinished) throw;\n    _;\n  }\n}\n\n\n\n\n/**\n * A crowdsaled token.\n *\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n *\n * - The token transfer() is disabled until the crowdsale is over\n * - The token contract gives an opt-in upgrade path to a new contract\n * - The same token can be part of several crowdsales through approve() mechanism\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n *\n */\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken {\n\n  string public name;\n\n  string public symbol;\n\n  uint public decimals;\n\n  /**\n   * Construct the token.\n   *\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n   */\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint _decimals) {\n\n    // Create from team multisig\n    owner = msg.sender;\n\n    // Initially set the upgrade master same as owner\n    upgradeMaster = owner;\n\n    name = _name;\n    symbol = _symbol;\n\n    totalSupply = _initialSupply;\n\n    decimals = _decimals;\n\n    // Create initially all balance on the team multisig\n    balances[msg.sender] = totalSupply;\n  }\n\n  /**\n   * When token is released to be transferable, enforce no new tokens can be created.\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    mintingFinished = true;\n    super.releaseTokenTransfer();\n  }\n\n  /**\n   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n   */\n  function canUpgrade() public constant returns(bool) {\n    return released;\n  }\n\n}",
  "bytecode": "60606040526004805460a060020a60ff02191690556006805460ff191690553462000000576040516200164d3803806200164d83398101604090815281516020830151918301516060840151918401939290920191905b5b60038054600160a060020a03191633600160a060020a03161790555b60038054600160a060020a03338116600160a060020a031992831617928390556008805490921692169190911790558351600b8054600082905290916020601f6002600019600186161561010002019094169390930483018190047f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99081019390918901908390106200011257805160ff191683800117855562000142565b8280016001018555821562000142579182015b828111156200014257825182559160200191906001019062000125565b5b50620001669291505b808211156200016257600081556001016200014c565b5090565b505082600c9080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b657805160ff1916838001178555620001e6565b82800160010185558215620001e6579182015b82811115620001e6578251825591602001919060010190620001c9565b5b506200020a9291505b808211156200016257600081556001016200014c565b5090565b50506000828155600d829055600160a060020a03331681526001602052604090208290555b505050505b61140980620002446000396000f300606060405236156101645763ffffffff60e060020a60003504166302f652a3811461016957806305d2035b1461018957806306fdde03146101aa578063095ea7b31461023757806318160ddd1461026757806323b872dd1461028657806329ff4f53146102bc578063313ce567146102d757806340c10f19146102f657806342c1867b14610314578063432146751461034157806345977d03146103615780635d302ba1146103735780635de4ccb01461038e5780635f412d4f146103b7578063600440cb146103c657806370a08231146103ef5780638444b3911461041a578063867c2857146104485780638da5cb5b1461047557806395d89b411461049e578063961325211461052b5780639738968c1461054c578063a9059cbb1461056d578063c752ff621461059d578063d1f276d3146105bc578063d7e7088a146105e5578063dd62ed3e14610600578063f2fde38b14610631578063ffeb7d751461064c575b610000565b3461000057610187600160a060020a03600435166024351515610667565b005b34610000576101966106c8565b604080519115158252519081900360200190f35b34610000576101b76106d1565b6040805160208082528351818301528351919283929083019185019080838382156101fd575b8051825260208311156101fd57601f1990920191602091820191016101dd565b505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610196600160a060020a036004351660243561075f565b604080519115158252519081900360200190f35b34610000576102746107ca565b60408051918252519081900360200190f35b3461000057610196600160a060020a03600435811690602435166044356107d0565b604080519115158252519081900360200190f35b3461000057610187600160a060020a0360043516610827565b005b346100005761027461087e565b60408051918252519081900360200190f35b3461000057610187600160a060020a0360043516602435610884565b005b3461000057610196600160a060020a0360043516610a0b565b604080519115158252519081900360200190f35b3461000057610187600160a060020a03600435166024351515610a20565b005b3461000057610187600435610a76565b005b3461000057610187600160a060020a0360043516610cf9565b005b346100005761039b610d18565b60408051600160a060020a039092168252519081900360200190f35b3461000057610187610d27565b005b346100005761039b610d5b565b60408051600160a060020a039092168252519081900360200190f35b3461000057610274600160a060020a0360043516610d6a565b60408051918252519081900360200190f35b3461000057610427610d89565b6040518082600481116100005760ff16815260200191505060405180910390f35b3461000057610196600160a060020a0360043516610dd6565b604080519115158252519081900360200190f35b346100005761039b610deb565b60408051600160a060020a039092168252519081900360200190f35b34610000576101b7610dfa565b6040805160208082528351818301528351919283929083019185019080838382156101fd575b8051825260208311156101fd57601f1990920191602091820191016101dd565b505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610196610e88565b604080519115158252519081900360200190f35b3461000057610196610e98565b604080519115158252519081900360200190f35b3461000057610196600160a060020a0360043516602435610ea9565b604080519115158252519081900360200190f35b3461000057610274610efe565b60408051918252519081900360200190f35b346100005761039b610f04565b60408051600160a060020a039092168252519081900360200190f35b3461000057610187600160a060020a0360043516610f13565b005b3461000057610274600160a060020a03600435811690602435166110cb565b60408051918252519081900360200190f35b3461000057610187600160a060020a03600435166110f8565b005b3461000057610187600160a060020a0360043516611143565b005b60035433600160a060020a0390811691161461068257610000565b60045460009060a060020a900460ff161561069c57610000565b600160a060020a0383166000908152600560205260409020805460ff19168315151790555b5b505b5050565b60065460ff1681565b600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107575780601f1061072c57610100808354040283529160200191610757565b820191906000526020600020905b81548152906001019060200180831161073a57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60005481565b600454600090849060a060020a900460ff16151561080f57600160a060020a03811660009081526005602052604090205460ff16151561080f57610000565b5b61081b858585611192565b91505b5b509392505050565b60035433600160a060020a0390811691161461084257610000565b60045460009060a060020a900460ff161561085c57610000565b60048054600160a060020a031916600160a060020a0384161790555b5b505b50565b600d5481565b600160a060020a03331660009081526007602052604090205460ff1615156108ab57610000565b60065460ff16156108bb57610000565b60005473f49005661e34f8d09fe78f1b196cf084a3bd30336366098d4f9091836000604051602001526040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b156100005760325a03f4156100005750506040805180516000908155600160a060020a0386168152600160209081528382205492810191909152825160e060020a6366098d4f028152600481019290925260248201859052915173f49005661e34f8d09fe78f1b196cf084a3bd303393506366098d4f92604480840193919291829003018186803b156100005760325a03f415610000575050604080518051600160a060020a0386166000818152600160209081528582209390935586845293519094507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35b5b5b5050565b60076020526000908152604090205460ff1681565b60035433600160a060020a03908116911614610a3b57610000565b60065460ff1615610a4b57610000565b600160a060020a0382166000908152600760205260409020805460ff19168215151790555b5b5b5050565b6000610a80610d89565b905060038160048111610000571480610aa157506004816004811161000057145b1515610aac57610000565b811515610ab857610000565b600160a060020a0333166000908152600160209081526040808320548151830193909352805160e060020a63f4f3bdc10281526004810193909352602483018590525173f49005661e34f8d09fe78f1b196cf084a3bd30339263f4f3bdc1926044808301939192829003018186803b156100005760325a03f415610000575050604080518051600160a060020a03331660009081526001602090815284822092909255805492820152825160e060020a63f4f3bdc1028152600481019290925260248201869052915173f49005661e34f8d09fe78f1b196cf084a3bd3033935063f4f3bdc192604480840193919291829003018186803b156100005760325a03f4156100005750506040805180516000908155600a54602092830191909152825160e060020a6366098d4f028152600481019190915260248101869052915173f49005661e34f8d09fe78f1b196cf084a3bd303393506366098d4f926044808201939291829003018186803b156100005760325a03f415610000575050604080518051600a556009547f753e88e5000000000000000000000000000000000000000000000000000000008252600160a060020a0333811660048401526024830187905292519216925063753e88e591604480830192600092919082900301818387803b156100005760325a03f115610000575050600954604080518581529051600160a060020a03928316935033909216917f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac9181900360200190a35b5050565b60088054600160a060020a031916600160a060020a0383161790555b50565b600954600160a060020a031681565b60045433600160a060020a03908116911614610d4257610000565b6006805460ff19166001179055610d57611295565b5b5b565b600854600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b6000610d93610e98565b1515610da157506001610dd0565b600954600160a060020a03161515610dbb57506002610dd0565b600a541515610dcc57506003610dd0565b5060045b5b5b5b90565b60056020526000908152604090205460ff1681565b600354600160a060020a031681565b600c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107575780601f1061072c57610100808354040283529160200191610757565b820191906000526020600020905b81548152906001019060200180831161073a57829003601f168201915b505050505081565b60045460a060020a900460ff1681565b60045460a060020a900460ff165b90565b600454600090339060a060020a900460ff161515610ee857600160a060020a03811660009081526005602052604090205460ff161515610ee857610000565b5b610ef384846112d8565b91505b5b5092915050565b600a5481565b600454600160a060020a031681565b610f1b610e98565b1515610f2657610000565b600160a060020a0381161515610f3b57610000565b60085433600160a060020a03908116911614610f5657610000565b6004610f60610d89565b60048111610000571415610f7357610000565b60098054600160a060020a031916600160a060020a038381169190911791829055604080516000602091820181905282517f61d3d7a6000000000000000000000000000000000000000000000000000000008152925194909316936361d3d7a6936004808501948390030190829087803b156100005760325a03f115610000575050604051511515905061100657610000565b6000805460095460408051602090810185905281517f4b2ba0dd00000000000000000000000000000000000000000000000000000000815291519394600160a060020a0390931693634b2ba0dd936004808501948390030190829087803b156100005760325a03f1156100005750506040515191909114905061108857610000565b60095460408051600160a060020a039092168252517f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc9181900360200190a15b50565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461111357610000565b600160a060020a0381161561087b5760038054600160a060020a031916600160a060020a0383161790555b5b5b50565b600160a060020a038116151561115857610000565b60085433600160a060020a03908116911614610cf957610000565b60088054600160a060020a031916600160a060020a0383161790555b50565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906111d3908461138c565b600160a060020a03808616600090815260016020526040808220939093559087168152205461120290846113b4565b600160a060020a03861660009081526001602052604090205561122581846113b4565b600160a060020a038087166000818152600260209081526040808320338616845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600191505b509392505050565b60045433600160a060020a039081169116146112b057610000565b6004805474ff0000000000000000000000000000000000000000191660a060020a1790555b5b565b600160a060020a0333166000908152600160205260408120546112fb90836113b4565b600160a060020a03338116600090815260016020526040808220939093559085168152205461132a908361138c565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060015b92915050565b60008282016113a98482108015906113a45750838210155b6113cd565b8091505b5092915050565b60006113c2838311156113cd565b508082035b92915050565b80151561087b57610000565b5b505600a165627a7a72305820b146a721cc045585f26f76e93dac84879cd5344fbb8e3a0e1ee3b45dbd46724f0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000007457468626974730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000007457468626974730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554420000000000000000000000000000000000000000000000000000000000",
  "libraries": [
    {
      "name": "SafeMathLib",
      "address": "0xf49005661e34f8d09fe78f1b196cf084a3bd3033"
    }
  ]
}