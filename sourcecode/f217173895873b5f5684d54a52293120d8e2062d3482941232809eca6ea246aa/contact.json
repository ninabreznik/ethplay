{
  "address": "0x6671c24dd5b8e4ced34033991418e4bc0cca05af",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EstateToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-20\n*/\n\npragma solidity ^0.4.20;\n\ncontract Token {\n  \n  function totalSupply () public view returns (uint256 supply);\n  \n  function balanceOf (address _owner) public view returns (uint256 balance);\n\n  function transfer (address _to, uint256 _value)\n  public returns (bool success);\n\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success);\n\n  function approve (address _spender, uint256 _value)\n  public returns (bool success);\n\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining);\n\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  event Approval (\n    address indexed _owner, address indexed _spender, uint256 _value);\n}\n\npragma solidity ^0.4.20;\n\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  function safeAdd (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n\n  function safeSub (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n\n  function safeMul (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n}\n\ncontract AbstractToken is Token, SafeMath {\n  function AbstractToken () public {\n    // Do nothing\n  }\n\n  function balanceOf (address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  function transfer (address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 fromBalance = accounts [msg.sender];\n    if (fromBalance < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 spenderAllowance = allowances [_from][msg.sender];\n    if (spenderAllowance < _value) return false;\n    uint256 fromBalance = accounts [_from];\n    if (fromBalance < _value) return false;\n\n    allowances [_from][msg.sender] =\n      safeSub (spenderAllowance, _value);\n\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (_from, _to, _value);\n    return true;\n  }\n\n  function approve (address _spender, uint256 _value)\n  public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n\n    return true;\n  }\n\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  mapping (address => uint256) internal accounts;\n\n  mapping (address => mapping (address => uint256)) internal allowances;\n}\n\ncontract EstateToken is AbstractToken {\n  address private owner;\n  uint256 tokenCount;\n  bool frozen = false;\n\n  function EstateToken (uint256 _tokenCount) public {\n    owner = msg.sender;\n    tokenCount = _tokenCount;\n    accounts [msg.sender] = _tokenCount;\n  }\n\n  function totalSupply () public view returns (uint256 supply) {\n    return tokenCount;\n  }\n\n  function name () public pure returns (string result) {\n    return \"AgentMile Estate Tokens\";\n  }\n\n  function symbol () public pure returns (string result) {\n    return \"ESTATE\";\n  }\n\n  function decimals () public pure returns (uint8 result) {\n    return 8;\n  }\n\n  function transfer (address _to, uint256 _value)\n    public returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transfer (_to, _value);\n  }\n\n  function transferFrom (address _from, address _to, uint256 _value)\n    public returns (bool success) {\n    if (frozen) return false;\n    else return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n    public returns (bool success) {\n    if (allowance (msg.sender, _spender) == _currentValue)\n      return approve (_spender, _newValue);\n    else return false;\n  }\n\n  function burnTokens (uint256 _value) public returns (bool success) {\n    if (_value > accounts [msg.sender]) return false;\n    else if (_value > 0) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      tokenCount = safeSub (tokenCount, _value);\n\n      Transfer (msg.sender, address (0), _value);\n      return true;\n    } else return true;\n  }\n\n  function setOwner (address _newOwner) public {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  function freezeTransfers () public {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n      Freeze ();\n    }\n  }\n\n  function unfreezeTransfers () public {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      Unfreeze ();\n    }\n  }\n\n  event Freeze ();\n\n  event Unfreeze ();\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600460006101000a81548160ff02191690831515021790555034801561002b57600080fd5b506040516020806112428339810180604052810190808051906020019092919050505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600381905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050611159806100e96000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301502460146100d557806306fdde03146100ec578063095ea7b31461017c57806313af4035146101e157806318160ddd1461022457806323b872dd1461024f578063313ce567146102d457806331c420d414610305578063426a84931461031c5780636d1b229d1461038b57806370a08231146103d057806395d89b4114610427578063a9059cbb146104b7578063dd62ed3e1461051c575b600080fd5b3480156100e157600080fd5b506100ea610593565b005b3480156100f857600080fd5b5061010161064f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610141578082015181840152602081019050610126565b50505050905090810190601f16801561016e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018857600080fd5b506101c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061068c565b604051808215151515815260200191505060405180910390f35b3480156101ed57600080fd5b50610222600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061077e565b005b34801561023057600080fd5b5061023961081e565b6040518082815260200191505060405180910390f35b34801561025b57600080fd5b506102ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610828565b604051808215151515815260200191505060405180910390f35b3480156102e057600080fd5b506102e961085d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561031157600080fd5b5061031a610866565b005b34801561032857600080fd5b50610371600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610921565b604051808215151515815260200191505060405180910390f35b34801561039757600080fd5b506103b660048036038101908080359060200190929190505050610951565b604051808215151515815260200191505060405180910390f35b3480156103dc57600080fd5b50610411600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ac0565b6040518082815260200191505060405180910390f35b34801561043357600080fd5b5061043c610b08565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047c578082015181840152602081019050610461565b50505050905090810190601f1680156104a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c357600080fd5b50610502600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b45565b604051808215151515815260200191505060405180910390f35b34801561052857600080fd5b5061057d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b78565b6040518082815260200191505060405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105ef57600080fd5b600460009054906101000a900460ff16151561064d576001600460006101000a81548160ff0219169083151502179055507f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de60405160405180910390a15b565b60606040805190810160405280601781526020017f4167656e744d696c652045737461746520546f6b656e73000000000000000000815250905090565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107da57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600354905090565b6000600460009054906101000a900460ff16156108485760009050610856565b610853848484610bff565b90505b9392505050565b60006008905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108c257600080fd5b600460009054906101000a900460ff161561091f576000600460006101000a81548160ff0219169083151502179055507f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded60405160405180910390a15b565b60008261092e3386610b78565b14156109455761093e848361068c565b905061094a565b600090505b9392505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156109a25760009050610abb565b6000821115610ab6576109f36000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610efb565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a4160035483610efb565b600381905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610abb565b600190505b919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606040805190810160405280600681526020017f4553544154450000000000000000000000000000000000000000000000000000815250905090565b6000600460009054906101000a900460ff1615610b655760009050610b72565b610b6f8383610f14565b90505b92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915083821015610c945760009250610ef2565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610ce65760009250610ef2565b610cf08285610efb565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600084118015610dac57508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b15610e8857610dbb8185610efb565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e456000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856110f2565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b6000818310151515610f0957fe5b818303905092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f6957600091506110eb565b600083118015610fa557508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561108157610fb48184610efb565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061103e6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846110f2565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831115151561112257fe5b8183019050929150505600a165627a7a723058209c559c0f9ef9bd5196b596a1c06c990d62e174baecb58562e0acff3924501244002900000000000000000000000000000000000000000000000000470de4df820000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000470de4df820000"
}