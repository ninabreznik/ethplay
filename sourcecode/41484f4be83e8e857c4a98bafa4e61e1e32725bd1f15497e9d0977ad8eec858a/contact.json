{
  "address": "0x20a8e076d5d537c3a4b2e2750a7fa06f9f845d8a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BTML",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-27\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) balances;\n  uint256 totalSupply_;\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract Burnable is Ownable {\n  event Burn();\n\n  bool public burnt = false;\n\n  /**\n   * @dev Modifier to make a function callable only when unsold tokens are burnt.\n   */\n  modifier whenBurnt() {\n    require(burnt);\n    _;\n  }\n\n  modifier whenNotBurnt() {\n    require(!burnt);\n    _;\n  }\n}\n\ncontract BurnableToken is StandardToken, Burnable {\n\n  function burn() public whenNotBurnt returns (bool) {\n    if (balances[address(this)] > 0) {\n      totalSupply_ = totalSupply_.sub(balances[address(this)]);\n      balances[address(this)] = 0;\n    }\n    burnt = true;\n    emit Burn();\n  }\n}\n\ncontract CrowdsaleToken is PausableToken, BurnableToken {\n  uint256 public cap = 75000000;\n  function CrowdsaleToken () public {\n    totalSupply_ = cap.mul(1 ether);\n    balances[address(this)] = cap.mul(1 ether);\n  }\n\n  function sendSoldTokens (address _to, uint256 _value) public onlyOwner {\n    require(_value > 0);\n    _value = _value.mul(1 ether);\n    require(_value <=  balances[address(this)]);\n    balances[address(this)] = balances[address(this)].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(address(this), _to, _value);\n  }\n} \n\ncontract BTML is CrowdsaleToken {\n  string public constant name = \"BTML\";\n  string public constant symbol = \"BTML\";\n  uint32 public constant decimals = 18;\n\n  function BTML () public {\n    pause();\n  }\n\n  function () public payable {\n    owner.transfer(msg.value);\n  }\n}",
  "bytecode": "60606040526003805460a060020a61ffff021916905563047868c0600455341561002857600080fd5b60038054600160a060020a03191633600160a060020a031617905560045461006590670de0b6b3a76400006401000000006100bd8102610b5d1704565b60015560045461008a90670de0b6b3a7640000640100000000610b5d6100bd82021704565b600160a060020a0330166000908152602081905260409020556100b86401000000006107ae6100ec82021704565b610184565b60008215156100ce575060006100e6565b508181028183828115156100de57fe5b04146100e657fe5b92915050565b60035433600160a060020a0390811691161461010757600080fd5b60035474010000000000000000000000000000000000000000900460ff161561012f57600080fd5b6003805460a060020a60ff021916740100000000000000000000000000000000000000001790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b610e8180620001946000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610147578063095ea7b3146101d157806318160ddd1461020757806323b872dd1461022c578063313ce5671461025457806333ce724a14610280578063355274ea146102a25780633f4ba83a146102b557806344df8e70146102c85780635c975abb146102db57806366188463146102ee57806370a08231146103105780638456cb591461032f5780638da5cb5b1461034257806395d89b4114610147578063a9059cbb14610371578063b192da2d14610393578063d73dd623146103a6578063dd62ed3e146103c8578063f2fde38b146103ed575b600354600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561014557600080fd5b005b341561015257600080fd5b61015a61040c565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019657808201518382015260200161017e565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dc57600080fd5b6101f3600160a060020a0360043516602435610443565b604051901515815260200160405180910390f35b341561021257600080fd5b61021a610470565b60405190815260200160405180910390f35b341561023757600080fd5b6101f3600160a060020a0360043581169060243516604435610476565b341561025f57600080fd5b6102676104a3565b60405163ffffffff909116815260200160405180910390f35b341561028b57600080fd5b610145600160a060020a03600435166024356104a8565b34156102ad57600080fd5b61021a6105e1565b34156102c057600080fd5b6101456105e7565b34156102d357600080fd5b6101f3610666565b34156102e657600080fd5b6101f361075f565b34156102f957600080fd5b6101f3600160a060020a036004351660243561076f565b341561031b57600080fd5b61021a600160a060020a0360043516610793565b341561033a57600080fd5b6101456107ae565b341561034d57600080fd5b610355610832565b604051600160a060020a03909116815260200160405180910390f35b341561037c57600080fd5b6101f3600160a060020a0360043516602435610841565b341561039e57600080fd5b6101f3610865565b34156103b157600080fd5b6101f3600160a060020a0360043516602435610887565b34156103d357600080fd5b61021a600160a060020a03600435811690602435166108ab565b34156103f857600080fd5b610145600160a060020a03600435166108d6565b60408051908101604052600481527f42544d4c00000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff161561045d57600080fd5b6104678383610971565b90505b92915050565b60015490565b60035460009060a060020a900460ff161561049057600080fd5b61049b8484846109dd565b949350505050565b601281565b60035433600160a060020a039081169116146104c357600080fd5b600081116104d057600080fd5b6104e881670de0b6b3a764000063ffffffff610b5d16565b600160a060020a03301660009081526020819052604090205490915081111561051057600080fd5b600160a060020a033016600090815260208190526040902054610539908263ffffffff610b8616565b600160a060020a03308116600090815260208190526040808220939093559084168152205461056e908263ffffffff610b9816565b60008084600160a060020a0316600160a060020a031681526020019081526020016000208190555081600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b60045481565b60035433600160a060020a0390811691161461060257600080fd5b60035460a060020a900460ff16151561061a57600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6003546000907501000000000000000000000000000000000000000000900460ff161561069257600080fd5b600160a060020a03301660009081526020819052604081205411156106f957600160a060020a0330166000908152602081905260409020546001546106dc9163ffffffff610b8616565b600155600160a060020a0330166000908152602081905260408120555b6003805475ff000000000000000000000000000000000000000000191675010000000000000000000000000000000000000000001790557f396ed0ab6cc27459695a5d29409f1357ff85a6b958ca216959d886d23a89949b60405160405180910390a190565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff161561078957600080fd5b6104678383610ba5565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a039081169116146107c957600080fd5b60035460a060020a900460ff16156107e057600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60035460009060a060020a900460ff161561085b57600080fd5b6104678383610c9f565b6003547501000000000000000000000000000000000000000000900460ff1681565b60035460009060a060020a900460ff16156108a157600080fd5b6104678383610db1565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146108f157600080fd5b600160a060020a038116151561090657600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a03831615156109f457600080fd5b600160a060020a038416600090815260208190526040902054821115610a1957600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610a4c57600080fd5b600160a060020a038416600090815260208190526040902054610a75908363ffffffff610b8616565b600160a060020a038086166000908152602081905260408082209390935590851681522054610aaa908363ffffffff610b9816565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610af0908363ffffffff610b8616565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000821515610b6e5750600061046a565b50818102818382811515610b7e57fe5b041461046a57fe5b600082821115610b9257fe5b50900390565b8181018281101561046a57fe5b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610c0257600160a060020a033381166000908152600260209081526040808320938816835292905290812055610c39565b610c12818463ffffffff610b8616565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000600160a060020a0383161515610cb657600080fd5b600160a060020a033316600090815260208190526040902054821115610cdb57600080fd5b600160a060020a033316600090815260208190526040902054610d04908363ffffffff610b8616565b600160a060020a033381166000908152602081905260408082209390935590851681522054610d39908363ffffffff610b9816565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610de9908363ffffffff610b9816565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a3506001929150505600a165627a7a72305820d54f8bb46609ca6c6b8f0b5f23989347a2c67065f4662e0f9d4390f3d8d3cd570029"
}