{
  "address": "0xfd72fb686bee4ff641c52e8c89556600b438e586",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LockedTokenManager",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n// ----------------------------------------------------------------------------\n// VeChain Fungible Token Standard Interface\n// https://github.com/vechain/VIPs/blob/master/vips/VIP-180.md\n// ----------------------------------------------------------------------------\ninterface VIP180 {\n    function decimals() external view returns(uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _tokenOwner) external view returns (uint256);\n    function transfer(address _to, uint _tokens) external returns (bool);\n    function transferFrom(address _from, address _to, uint _tokens) external returns (bool);\n    function approve(address _spender, uint _tokens) external returns (bool);\n    function allowance(address _tokenOwner, address _spender) external view returns (uint256);\n\n    event Transfer(address indexed _from, address indexed _to, uint _tokens);\n    event Approval(address indexed _tokenOwner, address indexed _spender, uint _tokens);\n}\n\n//-----------------------------------------------------------------------------\n/// @title Locked Token contract\n/// @notice defines token locking and unlocking functionality.\n//-----------------------------------------------------------------------------\ncontract LockedTokenManager {\n    //-------------------------------------------------------------------------\n    /// @dev Emits when VIP-180 tokens become locked for any number of months by\n    ///  any mechanism.\n    //-------------------------------------------------------------------------\n    event Lock (address indexed _tokenOwner, address indexed _tokenAddress, uint _tokens);\n\n    //-------------------------------------------------------------------------\n    /// @dev Emits when VIP-180 tokens become unlocked by any mechanism.\n    //-------------------------------------------------------------------------\n    event Unlock (address indexed _tokenOwner, address indexed _tokenAddress, uint _tokens);\n\n    // Unix Timestamp for 4-1-2019 at 00:00:00.\n    //  Used to calculate months since release.\n    uint constant FIRST_MONTH_TIMESTAMP = 1554076800;\n    // Maximum number of months into the future locked tokens can be recovered.\n    uint constant MAXIMUM_LOCK_MONTHS = 240;\n    // Tracks months since release. Starts at 0 and increments every 30.4375 days.\n    uint public currentMonth;\n    // Locked token balances by unlock month\n    mapping (address => mapping(address => mapping(uint => uint))) tokensLockedUntilMonth;\n    \n    //-------------------------------------------------------------------------\n    /// @dev Throws if parameter is zero\n    //-------------------------------------------------------------------------\n    modifier notZero(uint _param) {\n        require (_param != 0, \"Parameter cannot be zero\");\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Lock `_tokens` tokens for `_numberOfMonths` months.\n    /// @dev Throws if amount to lock is zero. Throws if numberOfMonths is zero\n    ///  or greater than maximum months. Throws if sender has insufficient \n    ///  balance to lock. Throws if token address does not allow transfer.\n    /// @param _tokenAddress Address of the token contract to lock from.\n    /// @param _numberOfMonths The number of months the tokens will be locked.\n    /// @param _tokens The number of tokens to lock.\n    //-------------------------------------------------------------------------\n    function lock(address _tokenAddress, uint _tokens, uint _numberOfMonths) \n        public \n        notZero(_tokens)\n        returns(bool)\n    {\n        // number of months must be a valid amount.\n        require (\n            _numberOfMonths > 0 && _numberOfMonths <= MAXIMUM_LOCK_MONTHS,\n            \"Invalid number of months\"\n        );\n\n        // transfer amount from sender\n        VIP180 tokenContract = VIP180(_tokenAddress);\n        tokenContract.transferFrom(msg.sender, address(this), _tokens);\n        \n        // add amount to sender's locked token balance\n        tokensLockedUntilMonth[msg.sender][_tokenAddress][currentMonth + _numberOfMonths] += _tokens;\n        // emit lock event\n        emit Lock(msg.sender, _tokenAddress, _tokens);\n\n        return true;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice LockFrom `_tokens` tokens for `_numberOfMonths` months.\n    /// @dev Throws if amount to lock is zero. Throws if numberOfMonths is zero\n    ///  or greater than maximum months. Throws if token holder has insufficient \n    ///  balance to lock. Throws if transferFrom fails.\n    /// @param _tokenHolder Address of token holder whose tokens will be locked.\n    /// @param _tokenAddress Address of the token contract to lock from.\n    /// @param _numberOfMonths The number of months the tokens will be locked.\n    /// @param _tokens The number of tokens to lock.\n    //-------------------------------------------------------------------------\n    function lockFrom(\n        address _tokenHolder, \n        address _tokenAddress, \n        uint _tokens, \n        uint _numberOfMonths\n    ) public notZero(_tokens) returns(bool) {\n        // number of months must be a valid amount.\n        require (\n            _numberOfMonths > 0 && _numberOfMonths <= MAXIMUM_LOCK_MONTHS,\n            \"Invalid number of months\"\n        );\n\n        // transfer amount from sender\n        VIP180 tokenContract = VIP180(_tokenAddress);\n        tokenContract.transferFrom(_tokenHolder, address(this), _tokens);\n        \n        // add amount to sender's locked token balance\n        tokensLockedUntilMonth[_tokenHolder][_tokenAddress][currentMonth + _numberOfMonths] += _tokens;\n        // emit lock event\n        emit Lock(_tokenHolder, _tokenAddress, _tokens);\n\n        return true;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Send `_tokens` tokens to `_to`, then lock for `_numberOfMonths`\n    ///  months.\n    /// @dev Throws if amount to send is zero. Throws if `msg.sender` has\n    ///  insufficient balance for transfer. Throws if _to is the zero address.\n    ///  Throws if numberOfMonths is zero or greater than maximum months.\n    ///  Emits transfer and lock events.\n    /// @param _to The address to where tokens are being sent and locked.\n    /// @param _tokenAddress Address of the contract to transfer and lock from.\n    /// @param _numberOfMonths The number of months the tokens will be locked.\n    /// @param _tokens The number of tokens to send and lock.\n    //-------------------------------------------------------------------------\n    function transferAndLock(\n        address _to,\n        address _tokenAddress,\n        uint _tokens,\n        uint _numberOfMonths\n    ) external returns (bool) {\n        // number of months must be a valid amount.\n        require (\n            _numberOfMonths > 0 && _numberOfMonths <= MAXIMUM_LOCK_MONTHS,\n            \"Invalid number of months\"\n        );\n\n        // transfer amount from sender\n        VIP180 tokenContract = VIP180(_tokenAddress);\n        tokenContract.transferFrom(msg.sender, address(this), _tokens);\n        \n        // add amount to sender's locked token balance\n        tokensLockedUntilMonth[_to][_tokenAddress][currentMonth + _numberOfMonths] += _tokens;\n        // emit lock event\n        emit Lock(_to, _tokenAddress, _tokens);\n\n        return true;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Send `_tokens` tokens to `_to`, then lock for `_numberOfMonths`\n    ///  months.\n    /// @dev Throws if amount to send is zero. Throws if `msg.sender` has\n    ///  insufficient balance for transfer. Throws if _to is the zero address.\n    ///  Throws if numberOfMonths is zero or greater than maximum months.\n    ///  Throws if transferFrom fails. Emits transfer and lock events.\n    /// @param _from The address from where tokens are being sent.\n    /// @param _to The address to where tokens are being sent and locked.\n    /// @param _tokenAddress Address of the contract to transfer and lock from.\n    /// @param _numberOfMonths The number of months the tokens will be locked.\n    /// @param _tokens The number of tokens to send and lock.\n    //-------------------------------------------------------------------------\n    function transferFromAndLock(\n        address _from,\n        address _to,\n        address _tokenAddress,\n        uint _tokens,\n        uint _numberOfMonths\n    ) external returns (bool) {\n        // number of months must be a valid amount.\n        require (\n            _numberOfMonths > 0 && _numberOfMonths <= MAXIMUM_LOCK_MONTHS,\n            \"Invalid number of months\"\n        );\n\n        // transfer amount from sender\n        VIP180 tokenContract = VIP180(_tokenAddress);\n        tokenContract.transferFrom(_from, address(this), _tokens);\n        \n        // add amount to sender's locked token balance\n        tokensLockedUntilMonth[_to][_tokenAddress][currentMonth + _numberOfMonths] += _tokens;\n        // emit lock event\n        emit Lock(_to, _tokenAddress, _tokens);\n\n        return true;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Unlock all qualifying tokens for `_tokenOwner`. Sender must \n    ///  either be tokenOwner or an approved address.\n    /// @dev If tokenOwner is empty, tokenOwner is set to msg.sender. Throws\n    ///  if sender is not tokenOwner or an approved spender (allowance > 0).\n    /// @param _tokenOwner The token owner whose tokens will unlock.\n    /// @param _tokenAddress The token contract address.\n    //-------------------------------------------------------------------------\n    function unlockAll(address _tokenOwner, address _tokenAddress) external {\n        // create local variable for token owner\n        address addressToUnlock = _tokenOwner;\n        // if tokenOwner parameter is empty, set tokenOwner to sender\n        if (addressToUnlock == address(0)) {\n            addressToUnlock = msg.sender;\n        }\n        VIP180 tokenContract = VIP180(_tokenAddress);\n        // sender must either be tokenOwner or an approved address\n        if (msg.sender != addressToUnlock) {\n            require (\n                tokenContract.allowance(addressToUnlock, msg.sender) > 0,\n                \"Not authorized to unlock for this address\"\n            );\n        }\n\n        // create local variable for unlock total\n        uint tokensToUnlock;\n        // check each month starting from 1 month after release\n        for (uint i = 1; i <= currentMonth; ++i) {\n            // add qualifying tokens to tokens to unlock variable\n            tokensToUnlock += tokensLockedUntilMonth[addressToUnlock][_tokenAddress][i];\n            // set locked token balance of month i to 0 \n            tokensLockedUntilMonth[addressToUnlock][_tokenAddress][i] = 0;\n        }\n        // add qualifying tokens back to token owner's account balance\n        tokenContract.transfer(addressToUnlock, tokensToUnlock);\n        // emit unlock event\n        emit Unlock (addressToUnlock, _tokenAddress, tokensToUnlock);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Unlock all tokens locked until `month` months since April 2019 \n    ///  for `tokenOwner`. Sender must be tokenOwner or an approved address.\n    /// @dev If tokenOwner is empty, tokenOwner is set to msg.sender. Throws\n    ///  if sender is not tokenOwner or an approved spender (allowance > 0).\n    /// @param _tokenOwner The token owner whose tokens will unlock.\n    /// @param _tokenAddress The token contract address.\n    /// @param _month Number of months since April 2019.\n    //-------------------------------------------------------------------------\n    function unlockByMonth(\n        address _tokenOwner, \n        address _tokenAddress, \n        uint _month\n    ) external {\n        // create local variable for token owner\n        address addressToUnlock = _tokenOwner;\n        // if tokenOwner parameter is empty, set tokenOwner to sender\n        if (addressToUnlock == address(0)) {\n            addressToUnlock = msg.sender;\n        }\n        VIP180 tokenContract = VIP180(_tokenAddress);\n        // sender must either be tokenOwner or an approved address\n        if (msg.sender != addressToUnlock) {\n            require (\n                tokenContract.allowance(addressToUnlock, msg.sender) > 0,\n                \"Not authorized to unlock for this address\"\n            );\n        }\n        // month of locked tokens must be less than or equal to current month\n        require (\n            currentMonth >= _month,\n            \"Tokens from this month cannot be unlocked yet\"\n        );\n        // create local variable for unlock amount\n        uint tokensToUnlock = tokensLockedUntilMonth[addressToUnlock][_tokenAddress][_month];\n        // set locked token balance of month to 0\n        tokensLockedUntilMonth[addressToUnlock][_tokenAddress][_month] = 0;\n        // add qualifying tokens back to token owner's account balance\n        tokenContract.transfer(addressToUnlock, tokensToUnlock);\n        // emit unlock event\n        emit Unlock(addressToUnlock, _tokenAddress, tokensToUnlock);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Update the current month.\n    /// @dev Throws if less than 30.4375 days has passed since currentMonth.\n    //-------------------------------------------------------------------------\n    function updateMonthsSinceRelease() external {\n        // check if months since first month is greater than the currentMonth\n        uint secondsSinceRelease = block.timestamp - FIRST_MONTH_TIMESTAMP;\n        require (\n            currentMonth < secondsSinceRelease / (30 * 1 days + 10 * 1 hours + 30 * 1 minutes),\n            \"Cannot update month yet\"\n        );\n        // increment months since release\n        ++currentMonth;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice View the total locked token holdings of `tokenOwner`. Only\n    ///  displays tokens from _tokenAddress.\n    /// @param _tokenOwner The locked token owner.\n    /// @param _tokenAddress The token contract address.\n    /// @return Total locked token holdings of a token owner.\n    //-------------------------------------------------------------------------\n    function viewTotalLockedTokens(\n        address _tokenOwner,\n        address _tokenAddress\n    ) public view returns (uint lockedTokens) {\n        for (uint i = 1; i < currentMonth + MAXIMUM_LOCK_MONTHS; ++i) {\n            lockedTokens += tokensLockedUntilMonth[_tokenOwner][_tokenAddress][i];\n        }\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice View the locked token holdings of `tokenOwner` unlockable in\n    ///  `_month` months since April 2019.\n    /// @param _tokenOwner The locked token owner.\n    /// @param _tokenAddress The token contract's address.\n    /// @param _month Months since April 2019 the tokens are locked until.\n    /// @return Locked token holdings by month.\n    //-------------------------------------------------------------------------\n    function viewLockedTokensByMonth(\n        address _tokenOwner,\n        address _tokenAddress,\n        uint _month\n    ) external view returns (uint) {\n        return tokensLockedUntilMonth[_tokenOwner][_tokenAddress][_month];\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"unlockAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"viewLockedTokensByMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_numberOfMonths\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"unlockByMonth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateMonthsSinceRelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"viewTotalLockedTokens\",\"outputs\":[{\"name\":\"lockedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_numberOfMonths\",\"type\":\"uint256\"}],\"name\":\"transferFromAndLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_numberOfMonths\",\"type\":\"uint256\"}],\"name\":\"lockFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_numberOfMonths\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50611d11806100206000396000f3fe60806040526004361061009e576000357c01000000000000000000000000000000000000000000000000000000009004806330fb67be146100a35780634fff001f146101145780635115db3a146101a3578063540c1f1314610240578063547e07bc146102bb578063862a4d47146102d25780639233a63d146102fd578063cda092d014610382578063dcef06bf1461043f578063e2ab691d146104dc575b600080fd5b3480156100af57600080fd5b50610112600480360360408110156100c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610559565b005b34801561012057600080fd5b5061018d6004803603606081101561013757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a06565b6040518082815260200191505060405180910390f35b3480156101af57600080fd5b50610226600480360360808110156101c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610a9f565b604051808215151515815260200191505060405180910390f35b34801561024c57600080fd5b506102b96004803603606081101561026357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d4e565b005b3480156102c757600080fd5b506102d061127d565b005b3480156102de57600080fd5b506102e7611321565b6040518082815260200191505060405180910390f35b34801561030957600080fd5b5061036c6004803603604081101561032057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611327565b6040518082815260200191505060405180910390f35b34801561038e57600080fd5b50610425600480360360a08110156103a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506113e0565b604051808215151515815260200191505060405180910390f35b34801561044b57600080fd5b506104c26004803603608081101561046257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611690565b604051808215151515815260200191505060405180910390f35b3480156104e857600080fd5b5061053f600480360360608110156104ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506119bb565b604051808215151515815260200191505060405180910390f35b6000829050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610597573390505b60008290508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107775760008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d60208110156106ca57600080fd5b8101908080519060200190929190505050111515610776576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f4e6f7420617574686f72697a656420746f20756e6c6f636b20666f722074686981526020017f732061646472657373000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b600080600190505b600054811115156108ba57600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002054820191506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208190555080600101905061077f565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b505050506040513d602081101561098857600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db09836040518082815260200191505060405180910390a35050505050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205490509392505050565b60008082118015610ab1575060f08211155b1515610b25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c6964206e756d626572206f66206d6f6e746873000000000000000081525060200191505060405180910390fd5b60008490508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050506040513d6020811015610c2b57600080fd5b81019080805190602001909291905050505083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600054018152602001908152602001600020600082825401925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3866040518082815260200191505060405180910390a36001915050949350505050565b6000839050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d8c573390505b60008390508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6c5760008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015610e9557600080fd5b505afa158015610ea9573d6000803e3d6000fd5b505050506040513d6020811015610ebf57600080fd5b8101908080519060200190929190505050111515610f6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f4e6f7420617574686f72697a656420746f20756e6c6f636b20666f722074686981526020017f732061646472657373000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b826000541015151561100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f546f6b656e732066726f6d2074686973206d6f6e74682063616e6e6f7420626581526020017f20756e6c6f636b6564207965740000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205490506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156111d457600080fd5b505af11580156111e8573d6000803e3d6000fd5b505050506040513d60208110156111fe57600080fd5b8101908080519060200190929190505050508473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db09836040518082815260200191505060405180910390a3505050505050565b6000635ca1548042039050622820a88181151561129657fe5b0460005410151561130f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43616e6e6f7420757064617465206d6f6e74682079657400000000000000000081525060200191505060405180910390fd5b60008081546001019190508190555050565b60005481565b600080600190505b60f0600054018110156113d957600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020548201915080600101905061132f565b5092915050565b600080821180156113f2575060f08211155b1515611466576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c6964206e756d626572206f66206d6f6e746873000000000000000081525060200191505060405180910390fd5b60008490508073ffffffffffffffffffffffffffffffffffffffff166323b872dd8830876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561154257600080fd5b505af1158015611556573d6000803e3d6000fd5b505050506040513d602081101561156c57600080fd5b81019080805190602001909291905050505083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600054018152602001908152602001600020600082825401925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3866040518082815260200191505060405180910390a3600191505095945050505050565b6000826000811415151561170c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b60008311801561171d575060f08311155b1515611791576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c6964206e756d626572206f66206d6f6e746873000000000000000081525060200191505060405180910390fd5b60008590508073ffffffffffffffffffffffffffffffffffffffff166323b872dd8830886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561186d57600080fd5b505af1158015611881573d6000803e3d6000fd5b505050506040513d602081101561189757600080fd5b81019080805190602001909291905050505084600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086600054018152602001908152602001600020600082825401925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3876040518082815260200191505060405180910390a3600192505050949350505050565b60008260008114151515611a37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b600083118015611a48575060f08311155b1515611abc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c6964206e756d626572206f66206d6f6e746873000000000000000081525060200191505060405180910390fd5b60008590508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611b9857600080fd5b505af1158015611bac573d6000803e3d6000fd5b505050506040513d6020811015611bc257600080fd5b81019080805190602001909291905050505084600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086600054018152602001908152602001600020600082825401925050819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3876040518082815260200191505060405180910390a3600192505050939250505056fea165627a7a7230582064979839b7adf6e6f9e1a0db4027150a9e22bb9b6d38ad119fe86c6ea4dfe2290029"
}