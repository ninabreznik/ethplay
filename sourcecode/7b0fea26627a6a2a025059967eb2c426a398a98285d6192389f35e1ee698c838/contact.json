{
  "address": "0x58933d34b80ef1a1a0a22121d650410f9a9cd24f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenPriceProvider",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "999",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-04\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * ERC20 contract interface.\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint);\n    function decimals() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n\n    /**\n    * @dev Returns ceil(a / b).\n    */\n    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        if(a % b == 0) {\n            return c;\n        }\n        else {\n            return c + 1;\n        }\n    }\n}\n\n/**\n * @title KyberNetwork\n * @dev Interface for KyberNetwork main contract.\n */\ncontract KyberNetwork {\n\n    function getExpectedRate(\n        ERC20 src,\n        ERC20 dest,\n        uint srcQty\n    )\n        public\n        view\n        returns (uint expectedRate, uint slippageRate);\n\n    function trade(\n        ERC20 src,\n        uint srcAmount,\n        ERC20 dest,\n        address destAddress,\n        uint maxDestAmount,\n        uint minConversionRate,\n        address walletId\n    )\n        public\n        payable\n        returns(uint);\n}\n\n/**\n * @title TokenPriceProvider\n * @dev Simple contract returning the price in ETH for ERC20 tokens listed on KyberNetworks. \n * @author Olivier Van Den Biggelaar - <[emailÂ protected]>\n */\ncontract TokenPriceProvider {\n\n    using SafeMath for uint256;\n\n    // Mock token address for ETH\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // Address of Kyber's trading contract\n    address constant internal KYBER_NETWORK_ADDRESS = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n\n    mapping(address => uint256) public cachedPrices;\n\n    function syncPrice(ERC20 token) public {\n        uint256 expectedRate;\n        (expectedRate,) = kyberNetwork().getExpectedRate(token, ERC20(ETH_TOKEN_ADDRESS), 10000);\n        cachedPrices[token] = expectedRate;\n    }\n\n    //\n    // Convenience functions\n    //\n\n    function syncPriceForTokenList(ERC20[] tokens) public {\n        for(uint16 i = 0; i < tokens.length; i++) {\n            syncPrice(tokens[i]);\n        }\n    }\n\n    /**\n     * @dev Converts the value of _amount tokens in ether.\n     * @param _amount the amount of tokens to convert (in 'token wei' twei)\n     * @param _token the ERC20 token contract\n     * @return the ether value (in wei) of _amount tokens with contract _token\n     */\n    function getEtherValue(uint256 _amount, address _token) public view returns (uint256) {\n        uint256 decimals = ERC20(_token).decimals();\n        uint256 price = cachedPrices[_token];\n        return price.mul(_amount).div(10**decimals);\n    }\n\n    //\n    // Internal\n    //\n\n    function kyberNetwork() internal view returns (KyberNetwork) {\n        return KyberNetwork(KYBER_NETWORK_ADDRESS);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cachedPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getEtherValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"syncPriceForTokenList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"syncPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
  "bytecode": "608060405234801561001057600080fd5b5061042e806100206000396000f3006080604052600436106100615763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663837479c98114610066578063ce55c852146100a6578063d740b9a3146100d7578063e3503ca21461012e575b600080fd5b34801561007257600080fd5b5061009473ffffffffffffffffffffffffffffffffffffffff6004351661015c565b60408051918252519081900360200190f35b3480156100b257600080fd5b5061009460043573ffffffffffffffffffffffffffffffffffffffff6024351661016e565b3480156100e357600080fd5b506040805160206004803580820135838102808601850190965280855261012c9536959394602494938501929182918501908490808284375094975061025b9650505050505050565b005b34801561013a57600080fd5b5061012c73ffffffffffffffffffffffffffffffffffffffff6004351661029b565b60006020819052908152604090205481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156101d757600080fd5b505af11580156101eb573d6000803e3d6000fd5b505050506040513d602081101561020157600080fd5b505173ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020549092509050610252600a83900a610246838863ffffffff61038e16565b9063ffffffff6103c716565b95945050505050565b60005b81518161ffff1610156102975761028f828261ffff1681518110151561028057fe5b9060200190602002015161029b565b60010161025e565b5050565b60006102a56103ea565b604080517f809a9e5500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60248301526127106044830152825193169263809a9e55926064808401939192918290030181600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b505050506040513d604081101561035f57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff90921660009081526020819052604090209190915550565b6000808315156103a157600091506103c0565b508282028284828115156103b157fe5b04146103bc57600080fd5b8091505b5092915050565b6000808083116103d657600080fd5b82848115156103e157fe5b04949350505050565b73818e6fecd516ecc3849daf6845e3ec868087b755905600a165627a7a723058201347aae5eac8b9d074f88a67378bb0369271ceaf911042052480bd7fb5c9d0e70029"
}