{
  "address": "0xf28cbecd4503d06b8b159ea7d060e607351073e6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Yachtco Token",
  "contractName": "Yachtco",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-12\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t* @dev Multiplies two numbers, throws on overflow.\n\t*/\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Integer division of two numbers, truncating the quotient.\n\t*/\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t* @dev Adds two numbers, throws on overflow.\n\t*/\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\taddress public owner;\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\t/**\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t * account.\n\t */\n\tfunction Ownable() public {\n\t\towner = msg.sender;\n\t}\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t * @param newOwner The address to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\tOwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\tfunction totalSupply() public view returns (uint256);\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) balances;\n\n\tuint256 totalSupply_;\n\n\t/**\n\t* @dev total number of tokens in existence\n\t*/\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn totalSupply_;\n\t}\n\n\t/**\n\t* @dev transfer token for a specified address\n\t* @param _to The address to transfer to.\n\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param _owner The address to query the the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n\tmapping (address => mapping (address => uint256)) internal allowed;\n\n\n\t/**\n\t * @dev Transfer tokens from one address to another\n\t * @param _from address The address which you want to send tokens from\n\t * @param _to address The address which you want to transfer to\n\t * @param _value uint256 the amount of tokens to be transferred\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[_from]);\n\t\trequire(_value <= allowed[_from][msg.sender]);\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\t *\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t * @param _spender The address which will spend the funds.\n\t * @param _value The amount of tokens to be spent.\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\t * @param _owner address The address which owns the funds.\n\t * @param _spender address The address which will spend the funds.\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\n\t */\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t/**\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n\t *\n\t * approve should be called when allowed[_spender] == 0. To increment\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\n\t * the first transaction is mined)\n\t * From MonolithDAO Token.sol\n\t * @param _spender The address which will spend the funds.\n\t * @param _addedValue The amount of tokens to increase the allowance by.\n\t */\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n\t *\n\t * approve should be called when allowed[_spender] == 0. To decrement\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\n\t * the first transaction is mined)\n\t * From MonolithDAO Token.sol\n\t * @param _spender The address which will spend the funds.\n\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n\t */\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\t\tuint oldValue = allowed[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t}\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n}\n\n/**\n * @title Yachtco Token\n * @dev ERC20 Token, where all tokens are pre-minted.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n * @author Michael Arbach\n */\ncontract Yachtco is StandardToken, Ownable {\n\n\tusing SafeMath for uint256;\n\n\tstring public name              = \"Yachtco\";\n\tstring public symbol            = \"YCO\";\n\tuint8  public constant decimals = 18;\n\n\tuint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n\n\tbool public transmitStatus = true;\n\tbool public transferStatus = false;\n\n\tevent Transmit(address indexed from, address indexed to, uint256 value);\n\tevent TransmitDisabled();\n\tevent TransferStatus(bool value);\n\n\t/**\n\t * @dev Constructor that gives msg.sender all of existing tokens.\n\t */\n\tfunction Yachtco() public {\n\t\ttotalSupply_ = INITIAL_SUPPLY;\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n\t}\n\n\t/**\n\t * @dev if ether is sent to this address, send it back.\n\t */\n\tfunction () public payable {\n\t\trevert();\n\t}\n\n\t/**\n\t\t* @dev transfer token for a specified address\n\t\t* @param _to The address to transfer to.\n\t\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(transferStatus || msg.sender == owner);\n\t\treturn super.transfer(_to, _value);\n\t}\n\n\t/**\n\t\t* @dev transferFrom token for a specified address\n\t\t* @param _from The address froms transfer to.\n\t\t* @param _to The address to transfer to.\n\t\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(transferStatus || msg.sender == owner);\n\t\treturn super.transferFrom(_from, _to, _value);\n\t}\n\n\t/**\n\t\t* @dev transfer token for a specified address\n\t\t* @param _to The address to transfer to.\n\t\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transmit(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\n\t\trequire(transmitStatus);\n\t\trequire(_to != address(0) && _from != address(0));\n\t\trequire(_value <= balances[_from]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransmit(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Disable Transmit functionality for Owner.\n\t*/\n\tfunction disableTransmit() public onlyOwner {\n\t\trequire(transmitStatus);\n\t\ttransmitStatus = false;\n\t\tTransmitDisabled();\n\t}\n\n\t/**\n\t * @dev change token name\n\t*/\n\tfunction setName(string _name) public onlyOwner {\n        name = _name;\n\t}\n\n\t/**\n\t * @dev change token symbol\n\t*/\n\tfunction setSymbol(string _symbol) public onlyOwner {\n        symbol = _symbol;\n\t}\n\n\n\t/**\n\t * @dev Disable Transfer.\n\t*/\n\tfunction disableTransfer() public onlyOwner {\n\t\ttransferStatus = false;\n\t\tTransferStatus(transferStatus);\n\t}\n\n\t/**\n\t * @dev Enable Transfer. \n\t*/\n\tfunction enableTransfer() public onlyOwner {\n\t\ttransferStatus = true;\n\t\tTransferStatus(transferStatus);\n\t}\n}",
  "bytecode": "606060405260408051908101604052600781527f5961636874636f00000000000000000000000000000000000000000000000000602082015260049080516200004d929160200190620000fe565b5060408051908101604052600381527f59434f00000000000000000000000000000000000000000000000000000000006020820152600590805162000097929160200190620000fe565b506006805461ff001960ff199091166001171690553415620000b857600080fd5b60038054600160a060020a03191633600160a060020a03169081179091556b033b2e3c9fd0803ce8000000600181905560009182526020829052604090912055620001a3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014157805160ff191683800117855562000171565b8280016001018555821562000171579182015b828111156200017157825182559160200191906001019062000154565b506200017f92915062000183565b5090565b620001a091905b808211156200017f57600081556001016200018a565b90565b610fb280620001b36000396000f3006060604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461012c578063095ea7b3146101b6578063173a705f146101ec57806318160ddd146101ff5780631ed96e321461022457806323b872dd146102395780632ff2e9dc14610261578063313ce56714610274578063661884631461029d5780636ad38e61146102bf57806370a08231146102e75780638da5cb5b1461030657806395d89b4114610335578063a9059cbb14610348578063b187984f1461036a578063b84c82461461037d578063c47f0027146103ce578063d73dd6231461041f578063dd62ed3e14610441578063f1b50c1d14610466578063f2fde38b14610479578063f4880b2214610498575b600080fd5b341561013757600080fd5b61013f6104ab565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017b578082015183820152602001610163565b50505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c157600080fd5b6101d8600160a060020a0360043516602435610549565b604051901515815260200160405180910390f35b34156101f757600080fd5b6101d86105b5565b341561020a57600080fd5b6102126105be565b60405190815260200160405180910390f35b341561022f57600080fd5b6102376105c5565b005b341561024457600080fd5b6101d8600160a060020a0360043581169060243516604435610629565b341561026c57600080fd5b61021261066e565b341561027f57600080fd5b61028761067e565b60405160ff909116815260200160405180910390f35b34156102a857600080fd5b6101d8600160a060020a0360043516602435610683565b34156102ca57600080fd5b6101d8600160a060020a036004358116906024351660443561077d565b34156102f257600080fd5b610212600160a060020a03600435166108bb565b341561031157600080fd5b6103196108d6565b604051600160a060020a03909116815260200160405180910390f35b341561034057600080fd5b61013f6108e5565b341561035357600080fd5b6101d8600160a060020a0360043516602435610950565b341561037557600080fd5b610237610993565b341561038857600080fd5b61023760046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506109fa95505050505050565b34156103d957600080fd5b61023760046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a2c95505050505050565b341561042a57600080fd5b6101d8600160a060020a0360043516602435610a5a565b341561044c57600080fd5b610212600160a060020a0360043581169060243516610afe565b341561047157600080fd5b610237610b29565b341561048457600080fd5b610237600160a060020a0360043516610b92565b34156104a357600080fd5b6101d8610c2d565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105415780601f1061051657610100808354040283529160200191610541565b820191906000526020600020905b81548152906001019060200180831161052457829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065460ff1681565b6001545b90565b60035433600160a060020a039081169116146105e057600080fd5b60065460ff1615156105f157600080fd5b6006805460ff191690557f5b9658000dac0916dcea368fe1d7656db7d6d19cc5247292492fce23f6f0912a60405160405180910390a1565b600654600090610100900460ff1680610650575060035433600160a060020a039081169116145b151561065b57600080fd5b610666848484610c3b565b949350505050565b6b033b2e3c9fd0803ce800000081565b601281565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156106e057600160a060020a033381166000908152600260209081526040808320938816835292905290812055610717565b6106f0818463ffffffff610dbb16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60035460009033600160a060020a0390811691161461079b57600080fd5b60065460ff1615156107ac57600080fd5b600160a060020a038316158015906107cc5750600160a060020a03841615155b15156107d757600080fd5b600160a060020a0384166000908152602081905260409020548211156107fc57600080fd5b600160a060020a038416600090815260208190526040902054610825908363ffffffff610dbb16565b600160a060020a03808616600090815260208190526040808220939093559085168152205461085a908363ffffffff610dcd16565b600160a060020a03808516600081815260208190526040908190209390935591908616907fba667005da2f8ebb096c63999a9c9528418cd9bb778399cd02b53f156413cb509085905190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105415780601f1061051657610100808354040283529160200191610541565b600654600090610100900460ff1680610977575060035433600160a060020a039081169116145b151561098257600080fd5b61098c8383610ddc565b9392505050565b60035433600160a060020a039081169116146109ae57600080fd5b6006805461ff001916908190557fc9946980dc929f521b40f678c5eeae1c213b0c26c005bd48d44905450951166e90610100900460ff16604051901515815260200160405180910390a1565b60035433600160a060020a03908116911614610a1557600080fd5b6005818051610a28929160200190610eee565b5050565b60035433600160a060020a03908116911614610a4757600080fd5b6004818051610a28929160200190610eee565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610a92908363ffffffff610dcd16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610b4457600080fd5b6006805461ff001916610100908117918290557fc9946980dc929f521b40f678c5eeae1c213b0c26c005bd48d44905450951166e910460ff16604051901515815260200160405180910390a1565b60035433600160a060020a03908116911614610bad57600080fd5b600160a060020a0381161515610bc257600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600654610100900460ff1681565b6000600160a060020a0383161515610c5257600080fd5b600160a060020a038416600090815260208190526040902054821115610c7757600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610caa57600080fd5b600160a060020a038416600090815260208190526040902054610cd3908363ffffffff610dbb16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610d08908363ffffffff610dcd16565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610d4e908363ffffffff610dbb16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600082821115610dc757fe5b50900390565b60008282018381101561098c57fe5b6000600160a060020a0383161515610df357600080fd5b600160a060020a033316600090815260208190526040902054821115610e1857600080fd5b600160a060020a033316600090815260208190526040902054610e41908363ffffffff610dbb16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610e76908363ffffffff610dcd16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f2f57805160ff1916838001178555610f5c565b82800160010185558215610f5c579182015b82811115610f5c578251825591602001919060010190610f41565b50610f68929150610f6c565b5090565b6105c291905b80821115610f685760008155600101610f725600a165627a7a72305820f978ddceb482715b8389abc42141741066bafdc911275dfb324e13496f1aeb3d0029"
}