{
  "address": "0x763fa6806e1acf68130d2d0f0df754c93cc546b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Lition Token",
  "contractName": "Token",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-18\n*/\n\npragma solidity ^0.5.0;\n\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n        return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n\ncontract MintableAndPausableToken is ERC20Pausable, Ownable {\n    uint8 public constant decimals = 18;\n    uint256 public maxTokenSupply = 183500000 * 10 ** uint256(decimals);\n\n    bool public mintingFinished = false;\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    event MintStarted();\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    modifier checkMaxSupply(uint256 _amount) {\n        require(maxTokenSupply >= totalSupply().add(_amount));\n        _;\n    }\n\n    modifier cannotMint() {\n        require(mintingFinished);\n        _;\n    }\n\n    function mint(address _to, uint256 _amount)\n        external\n        onlyOwner\n        canMint\n        checkMaxSupply (_amount)\n        whenNotPaused\n        returns (bool)\n    {\n        super._mint(_to, _amount);\n        return true;\n    }\n\n    function _mint(address _to, uint256 _amount)\n        internal\n        canMint\n        checkMaxSupply (_amount)\n    {\n        super._mint(_to, _amount);\n    }\n\n    function finishMinting() external onlyOwner canMint returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n    function startMinting() external onlyOwner cannotMint returns (bool) {\n        mintingFinished = false;\n        emit MintStarted();\n        return true;\n    }\n}\n\n\n\n/**\n * Token upgrader interface inspired by Lunyr.\n *\n * Token upgrader transfers previous version tokens to a newer version.\n * Token upgrader itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract TokenUpgrader {\n    uint public originalSupply;\n\n    /** Interface marker */\n    function isTokenUpgrader() external pure returns (bool) {\n        return true;\n    }\n\n    function upgradeFrom(address _from, uint256 _value) public;\n}\n\n\n\ncontract UpgradeableToken is MintableAndPausableToken {\n    // Contract or person who can set the upgrade path.\n    address public upgradeMaster;\n    \n    // Bollean value needs to be true to start upgrades\n    bool private upgradesAllowed;\n\n    // The next contract where the tokens will be migrated.\n    TokenUpgrader public tokenUpgrader;\n\n    // How many tokens we have upgraded by now.\n    uint public totalUpgraded;\n\n    /**\n    * Upgrade states.\n    * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n    * - Waiting: Token allows upgrade, but we don't have a new token version\n    * - ReadyToUpgrade: The token version is set, but not a single token has been upgraded yet\n    * - Upgrading: Token upgrader is set and the balance holders can upgrade their tokens\n    */\n    enum UpgradeState { NotAllowed, Waiting, ReadyToUpgrade, Upgrading }\n\n    // Somebody has upgraded some of his tokens.\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n    // New token version available.\n    event TokenUpgraderIsSet(address _newToken);\n\n    modifier onlyUpgradeMaster {\n        // Only a master can designate the next token\n        require(msg.sender == upgradeMaster);\n        _;\n    }\n\n    modifier notInUpgradingState {\n        // Upgrade has already begun for token\n        require(getUpgradeState() != UpgradeState.Upgrading);\n        _;\n    }\n\n    // Do not allow construction without upgrade master set.\n    constructor(address _upgradeMaster) public {\n        upgradeMaster = _upgradeMaster;\n    }\n\n    // set a token upgrader\n    function setTokenUpgrader(address _newToken)\n        external\n        onlyUpgradeMaster\n        notInUpgradingState\n    {\n        require(canUpgrade());\n        require(_newToken != address(0));\n\n        tokenUpgrader = TokenUpgrader(_newToken);\n\n        // Handle bad interface\n        require(tokenUpgrader.isTokenUpgrader());\n\n        // Make sure that token supplies match in source and target\n        require(tokenUpgrader.originalSupply() == totalSupply());\n\n        emit TokenUpgraderIsSet(address(tokenUpgrader));\n    }\n\n    // Allow the token holder to upgrade some of their tokens to a new contract.\n    function upgrade(uint _value) external {\n        UpgradeState state = getUpgradeState();\n        \n        // Check upgrate state \n        require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n        // Validate input value\n        require(_value != 0);\n\n        //balances[msg.sender] = balances[msg.sender].sub(_value);\n        // Take tokens out from circulation\n        //totalSupply_ = totalSupply_.sub(_value);\n        //the _burn method emits the Transfer event\n        _burn(msg.sender, _value);\n\n        totalUpgraded = totalUpgraded.add(_value);\n\n        // Token Upgrader reissues the tokens\n        tokenUpgrader.upgradeFrom(msg.sender, _value);\n        emit Upgrade(msg.sender, address(tokenUpgrader), _value);\n    }\n\n    /**\n    * Change the upgrade master.\n    * This allows us to set a new owner for the upgrade mechanism.\n    */\n    function setUpgradeMaster(address _newMaster) external onlyUpgradeMaster {\n        require(_newMaster != address(0));\n        upgradeMaster = _newMaster;\n    }\n\n    // To be overriden to add functionality\n    function allowUpgrades() external onlyUpgradeMaster () {\n        upgradesAllowed = true;\n    }\n\n    // To be overriden to add functionality\n    function rejectUpgrades() external onlyUpgradeMaster () {\n        require(!(totalUpgraded > 0));\n        upgradesAllowed = false;\n    }\n\n    // Get the state of the token upgrade.\n    function getUpgradeState() public view returns(UpgradeState) {\n        if (!canUpgrade()) return UpgradeState.NotAllowed;\n        else if (address(tokenUpgrader) == address(0)) return UpgradeState.Waiting;\n        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n        else return UpgradeState.Upgrading;\n    }\n\n    // To be overriden to add functionality\n    function canUpgrade() public view returns(bool) {\n        return upgradesAllowed;\n    }\n}\n\n\n\ncontract Token is UpgradeableToken, ERC20Burnable {\n    string public name;\n    string public symbol;\n\n    // For patient incentive programs\n    uint256 public INITIAL_SUPPLY;\n    uint256 public hodlPremiumCap;\n    uint256 public hodlPremiumMinted;\n\n    // After 180 days you get a constant maximum bonus of 25% of tokens transferred\n    // Before that it is spread out linearly(from 0% to 25%) starting from the\n    // contribution time till 180 days after that\n    uint256 constant maxBonusDuration = 180 days;\n\n    struct Bonus {\n        uint256 hodlTokens;\n        uint256 contributionTime;\n        uint256 buybackTokens;\n    }\n\n    mapping( address => Bonus ) public hodlPremium;\n\n    IERC20 stablecoin;\n    address stablecoinPayer;\n\n    uint256 public signupWindowStart;\n    uint256 public signupWindowEnd;\n\n    uint256 public refundWindowStart;\n    uint256 public refundWindowEnd;\n\n    event UpdatedTokenInformation(string newName, string newSymbol);\n    event HodlPremiumSet(address beneficiary, uint256 tokens, uint256 contributionTime);\n    event HodlPremiumCapSet(uint256 newhodlPremiumCap);\n    event RegisteredForRefund( address holder, uint256 tokens );\n\n    constructor (address _litWallet, address _upgradeMaster, uint256 _INITIAL_SUPPLY, uint256 _hodlPremiumCap)\n        public\n        UpgradeableToken(_upgradeMaster)\n        Ownable()\n    {\n        require(maxTokenSupply >= _INITIAL_SUPPLY.mul(10 ** uint256(decimals)));\n        INITIAL_SUPPLY = _INITIAL_SUPPLY.mul(10 ** uint256(decimals));\n        setHodlPremiumCap(_hodlPremiumCap)  ;\n        _mint(_litWallet, INITIAL_SUPPLY);\n    }\n\n    /**\n    * Owner can update token information here\n    */\n    function setTokenInformation(string calldata _name, string calldata _symbol) external onlyOwner {\n        name = _name;\n        symbol = _symbol;\n\n        emit UpdatedTokenInformation(name, symbol);\n    }\n\n    function setRefundSignupDetails( uint256 _startTime,  uint256 _endTime, ERC20 _stablecoin, address _payer ) public onlyOwner {\n        require( _startTime < _endTime );\n        stablecoin = _stablecoin;\n        stablecoinPayer = _payer;\n        signupWindowStart = _startTime;\n        signupWindowEnd = _endTime;\n        refundWindowStart = signupWindowStart + 182 days;\n        refundWindowEnd = signupWindowEnd + 182 days;\n        require( refundWindowStart > signupWindowEnd);\n    }\n\n    function signUpForRefund( uint256 _value ) public {\n        require( hodlPremium[msg.sender].hodlTokens != 0 || hodlPremium[msg.sender].buybackTokens != 0, \"You must be ICO user to sign up\" ); //the user was registered in ICO\n        require( block.timestamp >= signupWindowStart&& block.timestamp <= signupWindowEnd, \"Cannot sign up at this time\" );\n        uint256 value = _value;\n        value = value.add(hodlPremium[msg.sender].buybackTokens);\n\n        if( value > balanceOf(msg.sender)) //cannot register more than he or she has; since refund has to happen while token is paused, we don't need to check anything else\n            value = balanceOf(msg.sender);\n\n        hodlPremium[ msg.sender].buybackTokens = value;\n        //buyback cancels hodl highway\n        if( hodlPremium[msg.sender].hodlTokens > 0 ){\n            hodlPremium[msg.sender].hodlTokens = 0;\n            emit HodlPremiumSet( msg.sender, 0, hodlPremium[msg.sender].contributionTime );\n        }\n\n        emit RegisteredForRefund(msg.sender, value);\n    }\n\n    function refund( uint256 _value ) public {\n        require( block.timestamp >= refundWindowStart && block.timestamp <= refundWindowEnd, \"cannot refund now\" );\n        require( hodlPremium[msg.sender].buybackTokens >= _value, \"not enough tokens in refund program\" );\n        require( balanceOf(msg.sender) >= _value, \"not enough tokens\" ); //this check is probably redundant to those in _burn, but better check twice\n        hodlPremium[msg.sender].buybackTokens = hodlPremium[msg.sender].buybackTokens.sub(_value);\n        _burn( msg.sender, _value );\n        require( stablecoin.transferFrom( stablecoinPayer, msg.sender, _value.div(20) ), \"transfer failed\" ); //we pay 1/20 = 0.05 DAI for 1 LIT\n    }\n\n    function setHodlPremiumCap(uint256 newhodlPremiumCap) public onlyOwner {\n        require(newhodlPremiumCap > 0);\n        hodlPremiumCap = newhodlPremiumCap;\n        emit HodlPremiumCapSet(hodlPremiumCap);\n    }\n\n    /**\n    * Owner can burn token here\n    */\n    function burn(uint256 _value) public onlyOwner {\n        super.burn(_value);\n    }\n\n    function sethodlPremium(\n        address beneficiary,\n        uint256 value,\n        uint256 contributionTime\n    )\n        public\n        onlyOwner\n        returns (bool)\n    {\n        require(beneficiary != address(0) && value > 0 && contributionTime > 0, \"Not eligible for HODL Premium\");\n\n        if (hodlPremium[beneficiary].hodlTokens != 0) {\n            hodlPremium[beneficiary].hodlTokens = hodlPremium[beneficiary].hodlTokens.add(value);\n            emit HodlPremiumSet(beneficiary, hodlPremium[beneficiary].hodlTokens, hodlPremium[beneficiary].contributionTime);\n        } else {\n            hodlPremium[beneficiary] = Bonus(value, contributionTime, 0);\n            emit HodlPremiumSet(beneficiary, value, contributionTime);\n        }\n\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require(_to != address(0));\n        require(_value <= balanceOf(msg.sender));\n\n        if (hodlPremiumMinted < hodlPremiumCap && hodlPremium[msg.sender].hodlTokens > 0) {\n            uint256 amountForBonusCalculation = calculateAmountForBonus(msg.sender, _value);\n            uint256 bonus = calculateBonus(msg.sender, amountForBonusCalculation);\n\n            //subtract the tokens token into account here to avoid the above calculations in the future, e.g. in case I withdraw everything in 0 days (bonus 0), and then refund, I shall not be eligible for any bonuses\n            hodlPremium[msg.sender].hodlTokens = hodlPremium[msg.sender].hodlTokens.sub(amountForBonusCalculation);\n            if ( bonus > 0) {\n                //balances[msg.sender] = balances[msg.sender].add(bonus);\n                _mint( msg.sender, bonus );\n                //emit Transfer(address(0), msg.sender, bonus);\n            }\n        }\n\n        ERC20Pausable.transfer( _to, _value );\n//        balances[msg.sender] = balances[msg.sender].sub(_value);\n//        balances[_to] = balances[_to].add(_value);\n//        emit Transfer(msg.sender, _to, _value);\n\n        //TODO: optimize to avoid setting values outside of buyback window\n        if( balanceOf(msg.sender) < hodlPremium[msg.sender].buybackTokens )\n            hodlPremium[msg.sender].buybackTokens = balanceOf(msg.sender);\n        return true;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        require(_to != address(0));\n\n        if (hodlPremiumMinted < hodlPremiumCap && hodlPremium[_from].hodlTokens > 0) {\n            uint256 amountForBonusCalculation = calculateAmountForBonus(_from, _value);\n            uint256 bonus = calculateBonus(_from, amountForBonusCalculation);\n\n            //subtract the tokens token into account here to avoid the above calculations in the future, e.g. in case I withdraw everything in 0 days (bonus 0), and then refund, I shall not be eligible for any bonuses\n            hodlPremium[_from].hodlTokens = hodlPremium[_from].hodlTokens.sub(amountForBonusCalculation);\n            if ( bonus > 0) {\n                //balances[_from] = balances[_from].add(bonus);\n                _mint( _from, bonus );\n                //emit Transfer(address(0), _from, bonus);\n            }\n        }\n\n        ERC20Pausable.transferFrom( _from, _to, _value);\n        if( balanceOf(_from) < hodlPremium[_from].buybackTokens )\n            hodlPremium[_from].buybackTokens = balanceOf(_from);\n        return true;\n    }\n\n    function calculateBonus(address beneficiary, uint256 amount) internal returns (uint256) {\n        uint256 bonusAmount;\n\n        uint256 contributionTime = hodlPremium[beneficiary].contributionTime;\n        uint256 bonusPeriod;\n        if (now <= contributionTime) {\n            bonusPeriod = 0;\n        } else if (now.sub(contributionTime) >= maxBonusDuration) {\n            bonusPeriod = maxBonusDuration;\n        } else {\n            bonusPeriod = now.sub(contributionTime);\n        }\n\n        if (bonusPeriod != 0) {\n            bonusAmount = (((bonusPeriod.mul(amount)).div(maxBonusDuration)).mul(25)).div(100);\n            if (hodlPremiumMinted.add(bonusAmount) > hodlPremiumCap) {\n                bonusAmount = hodlPremiumCap.sub(hodlPremiumMinted);\n                hodlPremiumMinted = hodlPremiumCap;\n            } else {\n                hodlPremiumMinted = hodlPremiumMinted.add(bonusAmount);\n            }\n\n            if( totalSupply().add(bonusAmount) > maxTokenSupply )\n                bonusAmount = maxTokenSupply.sub(totalSupply());\n        }\n\n        return bonusAmount;\n    }\n\n    function calculateAmountForBonus(address beneficiary, uint256 _value) internal view returns (uint256) {\n        uint256 amountForBonusCalculation;\n\n        if(_value >= hodlPremium[beneficiary].hodlTokens) {\n            amountForBonusCalculation = hodlPremium[beneficiary].hodlTokens;\n        } else {\n            amountForBonusCalculation = _value;\n        }\n\n        return amountForBonusCalculation;\n    }\n\n}\n\n\ncontract TestToken is ERC20{\n    constructor ( uint256 _balance)public {\n        _mint(msg.sender, _balance);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"rejectUpgrades\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signupWindowStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundWindowStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_stablecoin\",\"type\":\"address\"},{\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"setRefundSignupDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowUpgrades\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundWindowEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlPremiumCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlPremiumMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"signUpForRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hodlPremium\",\"outputs\":[{\"name\":\"hodlTokens\",\"type\":\"uint256\"},{\"name\":\"contributionTime\",\"type\":\"uint256\"},{\"name\":\"buybackTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenUpgrader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signupWindowEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newhodlPremiumCap\",\"type\":\"uint256\"}],\"name\":\"setHodlPremiumCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setTokenUpgrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"contributionTime\",\"type\":\"uint256\"}],\"name\":\"sethodlPremium\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_litWallet\",\"type\":\"address\"},{\"name\":\"_upgradeMaster\",\"type\":\"address\"},{\"name\":\"_INITIAL_SUPPLY\",\"type\":\"uint256\"},{\"name\":\"_hodlPremiumCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributionTime\",\"type\":\"uint256\"}],\"name\":\"HodlPremiumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newhodlPremiumCap\",\"type\":\"uint256\"}],\"name\":\"HodlPremiumCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"RegisteredForRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"TokenUpgraderIsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526a97c9a2eebbe454e78000006005556006805460ff191690553480156200002a57600080fd5b5060405160808062002e5e833981018060405260808110156200004c57600080fd5b508051602082015160408301516060909301519192909182620000783364010000000062000184810204565b60048054600160a860020a0319166101003381029190911791829055604051600160a060020a039190920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360068054600160a060020a039092166101000261010060a860020a03199092169190911790556200011582670de0b6b3a7640000640100000000620026bd620001d682021704565b60055410156200012457600080fd5b6200014682670de0b6b3a7640000640100000000620026bd620001d682021704565b600b556200015d816401000000006200020b810204565b6200017a84600b5462000273640100000000026401000000009004565b505050506200045e565b6200019f600382640100000000620027e8620002e082021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6000821515620001e95750600062000205565b828202828482811515620001f957fe5b04146200020257fe5b90505b92915050565b6200021e6401000000006200033b810204565b15156200022a57600080fd5b600081116200023857600080fd5b600c8190556040805182815290517f8cdcf73e4069cf3ac00e17a64074b95c38eed4a9c50b5b899e022fe56330d2149181900360200190a150565b60065460ff16156200028457600080fd5b80620002b2816200029d64010000000062000351810204565b90640100000000620023926200035782021704565b6005541015620002c157600080fd5b620002db8383640100000000620023a16200036782021704565b505050565b600160a060020a0381161515620002f657600080fd5b6200030b828264010000000062000426810204565b156200031657600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6004546101009004600160a060020a0316331490565b60025490565b6000828201838110156200020257fe5b600160a060020a03821615156200037d57600080fd5b6002546200039a9082640100000000620023926200035782021704565b600255600160a060020a038216600090815260208190526040902054620003d09082640100000000620023926200035782021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000600160a060020a03821615156200043e57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6129f0806200046e6000396000f3fe6080604052600436106102585763ffffffff60e060020a600035041663041e6b8b811461025d57806305d2035b1461027457806306fdde031461029d578063095ea7b3146103275780631526a7731461036057806318160ddd146103875780631ec025c81461039c57806323b872dd146103b1578063278ecde1146103f45780632ff2e9dc1461041e578063313ce56714610433578063395093511461045e57806339af755f146104975780633f4ba83a146104de57806340c10f19146104f357806342966c681461052c57806345977d031461055657806346fbf68e146105805780634dcf2917146105b35780634eee966f146105c857806350f7c204146106975780635c74baf4146106ac5780635c975abb146106c1578063600440cb146106d65780636ef8d66d1461070757806370a082311461071c578063715018a61461074f57806379cc6790146107645780637d64bcb41461079d578063827672d9146107b257806382dc1ec4146107c757806383f1a9bf146107fa5780638444b3911461080f5780638456cb59146108485780638c5428b41461085d5780638d6031a4146108875780638da5cb5b146108d85780638e4adf4e146108ed5780638f32d59b1461090257806395d89b41146109175780639738968c1461092c5780639a65ea2614610941578063a457c2d714610956578063a9059cbb1461098f578063ac4e8f09146109c8578063bc1c8fe9146109dd578063c752ff6214610a07578063cd61cb3a14610a1c578063dd62ed3e14610a4f578063e15b511114610a8a578063f2fde38b14610ac9578063ffeb7d7514610afc575b600080fd5b34801561026957600080fd5b50610272610b2f565b005b34801561028057600080fd5b50610289610b7c565b604080519115158252519081900360200190f35b3480156102a957600080fd5b506102b2610b85565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ec5781810151838201526020016102d4565b50505050905090810190601f1680156103195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033357600080fd5b506102896004803603604081101561034a57600080fd5b50600160a060020a038135169060200135610c13565b34801561036c57600080fd5b50610375610c39565b60408051918252519081900360200190f35b34801561039357600080fd5b50610375610c3f565b3480156103a857600080fd5b50610375610c46565b3480156103bd57600080fd5b50610289600480360360608110156103d457600080fd5b50600160a060020a03813581169160208101359091169060400135610c4c565b34801561040057600080fd5b506102726004803603602081101561041757600080fd5b5035610d7f565b34801561042a57600080fd5b50610375611020565b34801561043f57600080fd5b50610448611026565b6040805160ff9092168252519081900360200190f35b34801561046a57600080fd5b506102896004803603604081101561048157600080fd5b50600160a060020a03813516906020013561102b565b3480156104a357600080fd5b50610272600480360360808110156104ba57600080fd5b50803590602081013590600160a060020a0360408201358116916060013516611048565b3480156104ea57600080fd5b506102726110d1565b3480156104ff57600080fd5b506102896004803603604081101561051657600080fd5b50600160a060020a038135169060200135611135565b34801561053857600080fd5b506102726004803603602081101561054f57600080fd5b503561119b565b34801561056257600080fd5b506102726004803603602081101561057957600080fd5b50356111b7565b34801561058c57600080fd5b50610289600480360360208110156105a357600080fd5b5035600160a060020a03166112ec565b3480156105bf57600080fd5b506102726112ff565b3480156105d457600080fd5b50610272600480360360408110156105eb57600080fd5b81019060208101813564010000000081111561060657600080fd5b82018360208201111561061857600080fd5b8035906020019184600183028401116401000000008311171561063a57600080fd5b91939092909160208101903564010000000081111561065857600080fd5b82018360208201111561066a57600080fd5b8035906020019184600183028401116401000000008311171561068c57600080fd5b509092509050611354565b3480156106a357600080fd5b506103756114b1565b3480156106b857600080fd5b506103756114b7565b3480156106cd57600080fd5b506102896114bd565b3480156106e257600080fd5b506106eb6114c6565b60408051600160a060020a039092168252519081900360200190f35b34801561071357600080fd5b506102726114da565b34801561072857600080fd5b506103756004803603602081101561073f57600080fd5b5035600160a060020a03166114e5565b34801561075b57600080fd5b50610272611500565b34801561077057600080fd5b506102726004803603604081101561078757600080fd5b50600160a060020a038135169060200135611570565b3480156107a957600080fd5b5061028961157e565b3480156107be57600080fd5b506103756115df565b3480156107d357600080fd5b50610272600480360360208110156107ea57600080fd5b5035600160a060020a03166115e5565b34801561080657600080fd5b50610375611602565b34801561081b57600080fd5b50610824611608565b6040518082600381111561083457fe5b60ff16815260200191505060405180910390f35b34801561085457600080fd5b50610272611653565b34801561086957600080fd5b506102726004803603602081101561088057600080fd5b50356116b9565b34801561089357600080fd5b506108ba600480360360208110156108aa57600080fd5b5035600160a060020a031661189c565b60408051938452602084019290925282820152519081900360600190f35b3480156108e457600080fd5b506106eb6118bd565b3480156108f957600080fd5b506106eb6118d1565b34801561090e57600080fd5b506102896118e0565b34801561092357600080fd5b506102b26118f6565b34801561093857600080fd5b50610289611951565b34801561094d57600080fd5b50610289611973565b34801561096257600080fd5b506102896004803603604081101561097957600080fd5b50600160a060020a0381351690602001356119d2565b34801561099b57600080fd5b50610289600480360360408110156109b257600080fd5b50600160a060020a0381351690602001356119ef565b3480156109d457600080fd5b50610375611b09565b3480156109e957600080fd5b5061027260048036036020811015610a0057600080fd5b5035611b0f565b348015610a1357600080fd5b50610375611b6a565b348015610a2857600080fd5b5061027260048036036020811015610a3f57600080fd5b5035600160a060020a0316611b70565b348015610a5b57600080fd5b5061037560048036036040811015610a7257600080fd5b50600160a060020a0381358116916020013516611d5e565b348015610a9657600080fd5b5061028960048036036060811015610aad57600080fd5b50600160a060020a038135169060208101359060400135611d89565b348015610ad557600080fd5b5061027260048036036020811015610aec57600080fd5b5035600160a060020a0316611f56565b348015610b0857600080fd5b5061027260048036036020811015610b1f57600080fd5b5035600160a060020a0316611f72565b6006546101009004600160a060020a03163314610b4b57600080fd5b60085460001015610b5b57600080fd5b6006805475ff00000000000000000000000000000000000000000019169055565b60065460ff1681565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c0b5780601f10610be057610100808354040283529160200191610c0b565b820191906000526020600020905b815481529060010190602001808311610bee57829003601f168201915b505050505081565b60045460009060ff1615610c2657600080fd5b610c308383611fd8565b90505b92915050565b60115481565b6002545b90565b60135481565b60045460009060ff1615610c5f57600080fd5b600160a060020a0383161515610c7457600080fd5b600c54600d54108015610c9d5750600160a060020a0384166000908152600e6020526040812054115b15610d18576000610cae8584612044565b90506000610cbc868361208c565b600160a060020a0387166000908152600e6020526040902054909150610ce8908363ffffffff6121c216565b600160a060020a0387166000908152600e6020526040812091909155811115610d1557610d1586826121d4565b50505b610d2384848461220e565b50600160a060020a0384166000908152600e6020526040902060020154610d49856114e5565b1015610d7557610d58846114e5565b600160a060020a0385166000908152600e60205260409020600201555b5060019392505050565b6013544210158015610d9357506014544211155b1515610de9576040805160e560020a62461bcd02815260206004820152601160248201527f63616e6e6f7420726566756e64206e6f77000000000000000000000000000000604482015290519081900360640190fd5b336000908152600e6020526040902060020154811115610e79576040805160e560020a62461bcd02815260206004820152602360248201527f6e6f7420656e6f75676820746f6b656e7320696e20726566756e642070726f6760448201527f72616d0000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b80610e83336114e5565b1015610ed9576040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420656e6f75676820746f6b656e73000000000000000000000000000000604482015290519081900360640190fd5b336000908152600e6020526040902060020154610efc908263ffffffff6121c216565b336000818152600e6020526040902060020191909155610f1c9082612234565b600f54601054600160a060020a03918216916323b872dd911633610f4785601463ffffffff6122dd16565b6040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529290931660248301526044820152905160648083019260209291908290030181600087803b158015610f9b57600080fd5b505af1158015610faf573d6000803e3d6000fd5b505050506040513d6020811015610fc557600080fd5b5051151561101d576040805160e560020a62461bcd02815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b50565b600b5481565b601281565b60045460009060ff161561103e57600080fd5b610c3083836122f4565b6110506118e0565b151561105b57600080fd5b82841061106757600080fd5b600f8054600160a060020a0380851673ffffffffffffffffffffffffffffffffffffffff199283161790925560108054928416929091169190911790556011849055601283905562eff100808501601381905590840160145583106110cb57600080fd5b50505050565b6110da336112ec565b15156110e557600080fd5b60045460ff1615156110f657600080fd5b6004805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061113f6118e0565b151561114a57600080fd5b60065460ff161561115a57600080fd5b8161117381611167610c3f565b9063ffffffff61239216565b600554101561118157600080fd5b60045460ff161561119157600080fd5b610d7584846123a1565b6111a36118e0565b15156111ae57600080fd5b61101d8161244b565b60006111c1611608565b905060028160038111156111d157fe5b14806111e8575060038160038111156111e657fe5b145b15156111f357600080fd5b8115156111ff57600080fd5b6112093383612234565b60085461121c908363ffffffff61239216565b600855600754604080517f753e88e5000000000000000000000000000000000000000000000000000000008152336004820152602481018590529051600160a060020a039092169163753e88e59160448082019260009290919082900301818387803b15801561128b57600080fd5b505af115801561129f573d6000803e3d6000fd5b5050600754604080518681529051600160a060020a0390921693503392507f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac919081900360200190a35050565b6000610c3360038363ffffffff61245516565b6006546101009004600160a060020a0316331461131b57600080fd5b6006805475ff00000000000000000000000000000000000000000019167501000000000000000000000000000000000000000000179055565b61135c6118e0565b151561136757600080fd5b6113736009858561290c565b50611380600a838361290c565b506040805181815260098054600260001961010060018416150201909116049282018390527fd131ab1e6f279deea74e13a18477e13e2107deb6dc8ae955648948be5841fb46929091600a91819060208201906060830190869080156114275780601f106113fc57610100808354040283529160200191611427565b820191906000526020600020905b81548152906001019060200180831161140a57829003601f168201915b505083810382528454600260001961010060018416150201909116048082526020909101908590801561149b5780601f106114705761010080835404028352916020019161149b565b820191906000526020600020905b81548152906001019060200180831161147e57829003601f168201915b505094505050505060405180910390a150505050565b60055481565b60145481565b60045460ff1690565b6006546101009004600160a060020a031681565b6114e33361248c565b565b600160a060020a031660009081526020819052604090205490565b6115086118e0565b151561151357600080fd5b6004546040516000916101009004600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36004805474ffffffffffffffffffffffffffffffffffffffff0019169055565b61157a82826124d4565b5050565b60006115886118e0565b151561159357600080fd5b60065460ff16156115a357600080fd5b6006805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600c5481565b6115ee336112ec565b15156115f957600080fd5b61101d81612584565b600d5481565b6000611612611951565b151561162057506000610c43565b600754600160a060020a0316151561163a57506001610c43565b600854151561164b57506002610c43565b506003610c43565b61165c336112ec565b151561166757600080fd5b60045460ff161561167757600080fd5b6004805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b336000908152600e60205260409020541515806116e75750336000908152600e602052604090206002015415155b151561173d576040805160e560020a62461bcd02815260206004820152601f60248201527f596f75206d7573742062652049434f207573657220746f207369676e20757000604482015290519081900360640190fd5b601154421015801561175157506012544211155b15156117a7576040805160e560020a62461bcd02815260206004820152601b60248201527f43616e6e6f74207369676e20757020617420746869732074696d650000000000604482015290519081900360640190fd5b336000908152600e602052604090206002015481906117cd90829063ffffffff61239216565b90506117d8336114e5565b8111156117eb576117e8336114e5565b90505b336000908152600e602052604081206002810183905554111561185d57336000818152600e602090815260408083208381556001015481519485529184019290925282820152517fe7011e41b7b0ce6a22b507c44486740f1472d13fd4c04f691c7e5fc8918e3ec69181900360600190a15b604080513381526020810183905281517f2e447fdcbd22da4f5cf05ad442d372219bee1357fd4b65f13fa40f6229e767a0929181900390910190a15050565b600e6020526000908152604090208054600182015460029092015490919083565b6004546101009004600160a060020a031690565b600754600160a060020a031681565b6004546101009004600160a060020a0316331490565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c0b5780601f10610be057610100808354040283529160200191610c0b565b6006547501000000000000000000000000000000000000000000900460ff1690565b600061197d6118e0565b151561198857600080fd5b60065460ff16151561199957600080fd5b6006805460ff191690556040517f452a344f03203071e1daf66e007976c85cb2380deabf1c91f3c4fb1fca41204990600090a150600190565b60045460009060ff16156119e557600080fd5b610c3083836125cc565b60045460009060ff1615611a0257600080fd5b600160a060020a0383161515611a1757600080fd5b611a20336114e5565b821115611a2c57600080fd5b600c54600d54108015611a4c5750336000908152600e6020526040812054115b15611ab5576000611a5d3384612044565b90506000611a6b338361208c565b336000908152600e6020526040902054909150611a8e908363ffffffff6121c216565b336000908152600e6020526040812091909155811115611ab257611ab233826121d4565b50505b611abf8383612617565b50336000818152600e602052604090206002015490611add906114e5565b1015611b0057611aec336114e5565b336000908152600e60205260409020600201555b50600192915050565b60125481565b611b176118e0565b1515611b2257600080fd5b60008111611b2f57600080fd5b600c8190556040805182815290517f8cdcf73e4069cf3ac00e17a64074b95c38eed4a9c50b5b899e022fe56330d2149181900360200190a150565b60085481565b6006546101009004600160a060020a03163314611b8c57600080fd5b6003611b96611608565b6003811115611ba157fe5b1415611bac57600080fd5b611bb4611951565b1515611bbf57600080fd5b600160a060020a0381161515611bd457600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055604080517fea2ce6510000000000000000000000000000000000000000000000000000000081529051929091169163ea2ce65191600480820192602092909190829003018186803b158015611c5657600080fd5b505afa158015611c6a573d6000803e3d6000fd5b505050506040513d6020811015611c8057600080fd5b50511515611c8d57600080fd5b611c95610c3f565b600760009054906101000a9004600160a060020a0316600160a060020a0316634b2ba0dd6040518163ffffffff1660e060020a02815260040160206040518083038186803b158015611ce657600080fd5b505afa158015611cfa573d6000803e3d6000fd5b505050506040513d6020811015611d1057600080fd5b505114611d1c57600080fd5b60075460408051600160a060020a039092168252517f219f1080015df4ca5a2cdcb89266f4a405ff0c2518b8563b9189f91cca9f9a109181900360200190a150565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000611d936118e0565b1515611d9e57600080fd5b600160a060020a03841615801590611db65750600083115b8015611dc25750600082115b1515611e18576040805160e560020a62461bcd02815260206004820152601d60248201527f4e6f7420656c696769626c6520666f7220484f444c205072656d69756d000000604482015290519081900360640190fd5b600160a060020a0384166000908152600e602052604090205415611ec657600160a060020a0384166000908152600e6020526040902054611e5f908463ffffffff61239216565b600160a060020a0385166000818152600e6020908152604091829020848155600101548251938452908301939093528181019290925290517fe7011e41b7b0ce6a22b507c44486740f1472d13fd4c04f691c7e5fc8918e3ec69181900360600190a1610d75565b604080516060818101835285825260208083018681526000848601818152600160a060020a038b16808352600e855291879020955186559151600186015590516002909401939093558351928352820186905281830185905291517fe7011e41b7b0ce6a22b507c44486740f1472d13fd4c04f691c7e5fc8918e3ec6929181900390910190a15060019392505050565b611f5e6118e0565b1515611f6957600080fd5b61101d81612634565b6006546101009004600160a060020a03163314611f8e57600080fd5b600160a060020a0381161515611fa357600080fd5b60068054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000600160a060020a0383161515611fef57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293926000805160206129a5833981519152929181900390910190a350600192915050565b600160a060020a0382166000908152600e6020526040812054819083106120845750600160a060020a0383166000908152600e6020526040902054610c30565b509092915050565b600160a060020a0382166000908152600e60205260408120600101548190814282106120ba575060006120f0565b62ed4e006120ce428463ffffffff6121c216565b106120dd575062ed4e006120f0565b6120ed428363ffffffff6121c216565b90505b80156121b85761212d6064612115601961212162ed4e0083878c63ffffffff6126bd16565b9063ffffffff6122dd16565b9063ffffffff6126bd16565b9250600c5461214784600d5461239290919063ffffffff16565b111561216f57600d54600c546121629163ffffffff6121c216565b600c54600d559250612186565b600d54612182908463ffffffff61239216565b600d555b60055461219584611167610c3f565b11156121b8576121b56121a6610c3f565b6005549063ffffffff6121c216565b92505b5090949350505050565b6000828211156121ce57fe5b50900390565b60065460ff16156121e457600080fd5b806121f181611167610c3f565b60055410156121ff57600080fd5b61220983836123a1565b505050565b60045460009060ff161561222157600080fd5b61222c8484846126e5565b949350505050565b600160a060020a038216151561224957600080fd5b60025461225c908263ffffffff6121c216565b600255600160a060020a038216600090815260208190526040902054612288908263ffffffff6121c216565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b60008082848115156122eb57fe5b04949350505050565b6000600160a060020a038316151561230b57600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461233f908363ffffffff61239216565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191936000805160206129a5833981519152929081900390910190a350600192915050565b600082820183811015610c3057fe5b600160a060020a03821615156123b657600080fd5b6002546123c9908263ffffffff61239216565b600255600160a060020a0382166000908152602081905260409020546123f5908263ffffffff61239216565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b61101d3382612234565b6000600160a060020a038216151561246c57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61249d60038263ffffffff61279c16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b600160a060020a0382166000908152600160209081526040808320338452909152902054612508908263ffffffff6121c216565b600160a060020a03831660009081526001602090815260408083203384529091529020556125368282612234565b600160a060020a0382166000818152600160209081526040808320338085529083529281902054815190815290519293926000805160206129a5833981519152929181900390910190a35050565b61259560038263ffffffff6127e816565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6000600160a060020a03831615156125e357600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461233f908363ffffffff6121c216565b60045460009060ff161561262a57600080fd5b610c308383612836565b600160a060020a038116151561264957600080fd5b600454604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360048054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b60008215156126ce57506000610c33565b8282028284828115156126dd57fe5b0414610c3057fe5b600160a060020a0383166000908152600160209081526040808320338452909152812054612719908363ffffffff6121c216565b600160a060020a038516600090815260016020908152604080832033845290915290205561274884848461283f565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293926000805160206129a5833981519152929181900390910190a35060019392505050565b600160a060020a03811615156127b157600080fd5b6127bb8282612455565b15156127c657600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a03811615156127fd57600080fd5b6128078282612455565b1561281157600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000611b003384845b600160a060020a038216151561285457600080fd5b600160a060020a03831660009081526020819052604090205461287d908263ffffffff6121c216565b600160a060020a0380851660009081526020819052604080822093909355908416815220546128b2908263ffffffff61239216565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061294d5782800160ff1982351617855561297a565b8280016001018555821561297a579182015b8281111561297a57823582559160200191906001019061295f565b5061298692915061298a565b5090565b610c4391905b80821115612986576000815560010161299056fe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058201d8481bb7753a5cb9fbac44c0a3c4b478ba4d76d3e37b1a3673c0078472885560029000000000000000000000000339905b38db5f760c7e7d744595b1bcedee1015b000000000000000000000000983823b1300957a3b16c57a0539752577021243400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000422ca8b0a00a425000000",
  "constructorArguments": "000000000000000000000000339905b38db5f760c7e7d744595b1bcedee1015b000000000000000000000000983823b1300957a3b16c57a0539752577021243400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000422ca8b0a00a425000000"
}