{
  "address": "0x0e5f11af41c06f62cd176bfbc16704fc04c62a61",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-01\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Token is ERC20, Ownable {\n  using SafeMath for uint;\n\n  // Token 信息\n\n  string public constant name = \"Truedeal Token\";\n  string public constant symbol = \"TDT\";\n\n  uint8 public decimals = 18;\n\n  mapping (address => uint256) accounts; // User Accounts\n  mapping (address => mapping (address => uint256)) allowed; // User's allowances table\n\n  // Modifier\n  modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\n      require(_to != 0x0);\n      _;\n  }\n\n  modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\n      require(_amount > 0);\n      _;\n  }\n\n  modifier nonZeroValue() {                              // Ensures a non-zero value is passed\n      require(msg.value > 0);\n      _;\n  }\n\n  // ERC20 API\n\n  // -------------------------------------------------\n  // Transfers to another address\n  // -------------------------------------------------\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n      require(accounts[msg.sender] >= _amount);         // check amount of balance can be tranfetdt\n      addToBalance(_to, _amount);\n      decrementBalance(msg.sender, _amount);\n      Transfer(msg.sender, _to, _amount);\n      return true;\n  }\n\n  // -------------------------------------------------\n  // Transfers from one address to another (need allowance to be called first)\n  // -------------------------------------------------\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n      require(allowance(_from, msg.sender) >= _amount);\n      decrementBalance(_from, _amount);\n      addToBalance(_to, _amount);\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n      Transfer(_from, _to, _amount);\n      return true;\n  }\n\n  // -------------------------------------------------\n  // Approves another address a certain amount of TDT\n  // -------------------------------------------------\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n      require((_value == 0) || (allowance(msg.sender, _spender) == 0));\n      allowed[msg.sender][_spender] = _value;\n      Approval(msg.sender, _spender, _value);\n      return true;\n  }\n\n  // -------------------------------------------------\n  // Gets an address's TDT allowance\n  // -------------------------------------------------\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n  }\n\n  // -------------------------------------------------\n  // Gets the TDT balance of any address\n  // -------------------------------------------------\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n      return accounts[_owner];\n  }\n\n  function Token(address _address) public {\n    totalSupply = 8000000000 * 1e18;\n    addToBalance(_address, totalSupply);\n    Transfer(0x0, _address, totalSupply);\n  }\n\n  // -------------------------------------------------\n  // Add balance\n  // -------------------------------------------------\n  function addToBalance(address _address, uint _amount) internal {\n    accounts[_address] = accounts[_address].add(_amount);\n  }\n\n  // -------------------------------------------------\n  // Sub balance\n  // -------------------------------------------------\n  function decrementBalance(address _address, uint _amount) internal {\n    accounts[_address] = accounts[_address].sub(_amount);\n  }\n}",
  "bytecode": "60606040526012600160146101000a81548160ff021916908360ff160217905550341561002b57600080fd5b604051602080610e838339810160405280805190602001909190505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b19d971e4fe8401e7400000006000819055506100ba8160005461011264010000000002610ba2176401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a3506101d6565b61017181600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546101b864010000000002610c54179091906401000000009004565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008082840190508381101515156101cc57fe5b8091505092915050565b610c9e806101e56000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b4578063095ea7b31461014257806318160ddd1461019c57806323b872dd146101c5578063313ce5671461023e57806370a082311461026d5780638da5cb5b146102ba57806395d89b411461030f578063a9059cbb1461039d578063dd62ed3e146103f7578063f2fde38b14610463575b600080fd5b34156100bf57600080fd5b6100c761049c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101075780820151818401526020810190506100ec565b50505050905090810190601f1680156101345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014d57600080fd5b610182600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506104d5565b604051808215151515815260200191505060405180910390f35b34156101a757600080fd5b6101af6105e9565b6040518082815260200191505060405180910390f35b34156101d057600080fd5b610224600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105ef565b604051808215151515815260200191505060405180910390f35b341561024957600080fd5b61025161079c565b604051808260ff1660ff16815260200191505060405180910390f35b341561027857600080fd5b6102a4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107af565b6040518082815260200191505060405180910390f35b34156102c557600080fd5b6102cd6107f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031a57600080fd5b61032261081e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610362578082015181840152602081019050610347565b50505050905090810190601f16801561038f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103a857600080fd5b6103dd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610857565b604051808215151515815260200191505060405180910390f35b341561040257600080fd5b61044d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061092a565b6040518082815260200191505060405180910390f35b341561046e57600080fd5b61049a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109b1565b005b6040805190810160405280600e81526020017f547275656465616c20546f6b656e00000000000000000000000000000000000081525081565b6000808214806104ee575060006104ec338561092a565b145b15156104f957600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000816105fc853361092a565b1015151561060957600080fd5b6106138483610b09565b61061d8383610ba2565b6106ac82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c3b90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600160149054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f544454000000000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156108a757600080fd5b6108b18383610ba2565b6108bb3383610b09565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a4957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c3b90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610bf481600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c5490919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000828211151515610c4957fe5b818303905092915050565b6000808284019050838110151515610c6857fe5b80915050929150505600a165627a7a72305820f0e76d3b04f7dd8e2356f43f0c633e303e3f21e2b9f1777bc96ca296bb4978340029000000000000000000000000b0c69ab9d480613a1bd2212eff6f643b83d3c102",
  "constructorArguments": "000000000000000000000000b0c69ab9d480613a1bd2212eff6f643b83d3c102"
}