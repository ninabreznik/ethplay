{
  "address": "0x9d1cdcfe212351ef2f78d53a786444cfcb537374",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Quest",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-09\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Quest is ERC20 {\n    \n    using SafeMath for uint256;\n    address public owner;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public claimer;\n\n    string public constant name = \"Quest\";\n    string public constant symbol = \"QST\";\n    uint public constant decimals = 8;\n    \n    uint256 public maxSupply = 10000000000e8;\n    uint256 public QSTPerEth = 30000000e8;\n    uint256 public claimable = 20000e8;\n    uint256 public constant minContrib = 1 ether / 100;\n    uint256 public maxClaim = 0;\n    \n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event TransferEther(address indexed _from, address indexed _to, uint256 _value);\n    event Burn(address indexed burner, uint256 value);\n    \n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    //mitigates the ERC20 short address attack\n    //suggested by izqui9 @ http://bit.ly/2NMMCNv\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    modifier onlyAllowedClaimer() {\n        require(claimer[msg.sender] == false);\n        _;\n    }\n    \n    constructor () public {\n        totalSupply = maxSupply;\n        owner = msg.sender;\n        balances[owner] = maxSupply;\n    }\n    \n    function transferOwnership(address _newOwner) onlyOwner public {\n        if (_newOwner != address(0)) {\n            owner = _newOwner;\n        }\n    }\n    \n    function updateTokensPerEth(uint _QSTPerEth) public onlyOwner {        \n        QSTPerEth = _QSTPerEth;\n    }\n           \n    function () public payable {\n        getQST();\n     }\n    \n    function dividend(uint256 _amount) internal view returns (uint256){\n        if(_amount >= QSTPerEth) return ((7*_amount).div(100)).add(_amount);\n        return _amount;\n    }\n    \n    function getQST() payable public {\n        if(msg.value >= minContrib){\n            address investor = msg.sender;\n            uint256 tokenAmt =  (QSTPerEth.mul(msg.value)).div(1 ether);\n            tokenAmt = dividend(tokenAmt);\n            require(balances[owner] >= tokenAmt);\n            balances[owner] = balances[owner].sub(tokenAmt);\n            balances[investor] = balances[investor].add(tokenAmt);\n            emit Transfer(this, investor, tokenAmt);    \n        }else{\n            freeClaim();\n        }\n        \n    }\n    function freeClaim() payable onlyAllowedClaimer public{\n        address investor = msg.sender;\n        require(balances[owner] >= claimable && maxClaim <= 4999);\n        claimer[investor] = true;\n        maxClaim = maxClaim.add(1);\n        balances[owner] = balances[owner].sub(claimable);\n        balances[investor] = balances[investor].add(claimable);\n        emit Transfer(this, investor, claimable);\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function doDistro(address[] _addresses, uint256 _amount) public onlyOwner {        \n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amount);}\n    }\n    \n    function doDistroAmount(address[] addresses, uint256[] amounts) onlyOwner public {\n        require(addresses.length == amounts.length);\n        for (uint i = 0; i < addresses.length; i++) {transfer(addresses[i], amounts[i]);}\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        // mitigates the ERC20 spend/approval race condition\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function transferEther(address _receiver, uint256 _amount) public onlyOwner {\n        require(_amount <= address(this).balance);\n        emit TransferEther(this, _receiver, _amount);\n        _receiver.transfer(_amount);\n    }\n    \n    function doEthDistro(address[] addresses, uint256 amount) public onlyOwner {        \n        for (uint i = 0; i < addresses.length; i++) { transferEther(addresses[i], amount);}\n    }\n    \n    function withdrawFund() onlyOwner public {\n        address thisCont = this;\n        uint256 ethBal = thisCont.balance;\n        owner.transfer(ethBal);\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n    \n    function getForeignTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n    \n     function disallowClaimer(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            claimer[addresses[i]] = true;\n        }\n    }\n\n    function allowClaimer(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            claimer[addresses[i]] = false;\n        }\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disallowClaimer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getForeignTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doDistro\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"allowClaimer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QSTPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getQST\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_QSTPerEth\",\"type\":\"uint256\"}],\"name\":\"updateTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"doDistroAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doEthDistro\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeClaim\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContrib\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "6080604052670de0b6b3a7640000600555660aa87bee5380006006556501d1a94a2000600755600060085534801561003657600080fd5b50600554600081815560018054600160a060020a031916331790819055600160a060020a0316815260026020526040902055611446806100776000396000f30060806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305b1137b811461018957806306fdde03146101ad578063095ea7b31461023757806313f6686d1461026f57806318160ddd1461029057806323b872dd146102b757806327458cbc146102e15780632ddeac1614610336578063313ce5671461035d57806337c3ee6e1461037257806342966c68146103c957806359966ae1146103e15780635f49d5621461043657806370a082311461044b57806374556ee91461017f5780638da5cb5b1461046c57806395d89b411461049d5780639ea407be146104b2578063a437f91f146104ca578063a5b209df14610558578063a9059cbb146105af578063af38d757146105d3578063d4938db3146105e8578063d5abeb01146105fd578063dd62ed3e14610612578063e07fa3c114610639578063e58fc54c1461064e578063e88d3b3e1461066f578063ebc33c5114610677578063f2fde38b1461068c575b6101876106ad565b005b34801561019557600080fd5b50610187600160a060020a03600435166024356107da565b3480156101b957600080fd5b506101c261087a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fc5781810151838201526020016101e4565b50505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024357600080fd5b5061025b600160a060020a03600435166024356108b1565b604080519115158252519081900360200190f35b34801561027b57600080fd5b5061025b600160a060020a0360043516610959565b34801561029c57600080fd5b506102a561096e565b60408051918252519081900360200190f35b3480156102c357600080fd5b5061025b600160a060020a0360043581169060243516604435610974565b3480156102ed57600080fd5b506040805160206004803580820135838102808601850190965280855261018795369593946024949385019291829185019084908082843750949750610ae79650505050505050565b34801561034257600080fd5b506102a5600160a060020a0360043581169060243516610b5c565b34801561036957600080fd5b506102a5610c0d565b34801561037e57600080fd5b5060408051602060048035808201358381028086018501909652808552610187953695939460249493850192918291850190849080828437509497505093359450610c129350505050565b3480156103d557600080fd5b50610187600435610c63565b3480156103ed57600080fd5b506040805160206004803580820135838102808601850190965280855261018795369593946024949385019291829185019084908082843750949750610d2d9650505050505050565b34801561044257600080fd5b506102a5610da2565b34801561045757600080fd5b506102a5600160a060020a0360043516610da8565b34801561047857600080fd5b50610481610dc7565b60408051600160a060020a039092168252519081900360200190f35b3480156104a957600080fd5b506101c2610dd6565b3480156104be57600080fd5b50610187600435610e0d565b3480156104d657600080fd5b506040805160206004803580820135838102808601850190965280855261018795369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610e299650505050505050565b34801561056457600080fd5b5060408051602060048035808201358381028086018501909652808552610187953695939460249493850192918291850190849080828437509497505093359450610e9f9350505050565b3480156105bb57600080fd5b5061025b600160a060020a0360043516602435610eef565b3480156105df57600080fd5b506102a5610fce565b3480156105f457600080fd5b506102a5610fd4565b34801561060957600080fd5b506102a5610fda565b34801561061e57600080fd5b506102a5600160a060020a0360043581169060243516610fe0565b34801561064557600080fd5b5061018761100b565b34801561065a57600080fd5b5061025b600160a060020a0360043516611068565b6101876111bc565b34801561068357600080fd5b506102a5611305565b34801561069857600080fd5b50610187600160a060020a0360043516611310565b600080662386f26fc1000034106107ce573391506106ee670de0b6b3a76400006106e23460065461136290919063ffffffff16565b9063ffffffff61138b16565b90506106f9816113a0565b600154600160a060020a031660009081526002602052604090205490915081111561072357600080fd5b600154600160a060020a031660009081526002602052604090205461074e908263ffffffff6113db16565b600154600160a060020a039081166000908152600260205260408082209390935590841681522054610786908263ffffffff6113ed16565b600160a060020a0383166000818152600260209081526040918290209390935580518481529051919230926000805160206113fb8339815191529281900390910190a36107d6565b6107d66111bc565b5050565b600154600160a060020a031633146107f157600080fd5b30318111156107ff57600080fd5b604080518281529051600160a060020a0384169130917fbfb7efd7d5ea800a27a15d77272a7f3467a453990b2e81d1b7537725bb2ea1669181900360200190a3604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610875573d6000803e3d6000fd5b505050565b60408051808201909152600581527f5175657374000000000000000000000000000000000000000000000000000000602082015281565b600081158015906108e45750336000908152600360209081526040808320600160a060020a038716845290915290205415155b156108f157506000610953565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60046020526000908152604090205460ff1681565b60005481565b60006060606436101561098357fe5b600160a060020a038416151561099857600080fd5b600160a060020a0385166000908152600260205260409020548311156109bd57600080fd5b600160a060020a03851660009081526003602090815260408083203384529091529020548311156109ed57600080fd5b600160a060020a038516600090815260026020526040902054610a16908463ffffffff6113db16565b600160a060020a0386166000908152600260209081526040808320939093556003815282822033835290522054610a53908463ffffffff6113db16565b600160a060020a038087166000908152600360209081526040808320338452825280832094909455918716815260029091522054610a97908463ffffffff6113ed16565b600160a060020a0380861660008181526002602090815260409182902094909455805187815290519193928916926000805160206113fb83398151915292918290030190a3506001949350505050565b600154600090600160a060020a03163314610b0157600080fd5b5060005b81518110156107d6576001600460008484815181101515610b2257fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101610b05565b600080600084915081600160a060020a03166370a08231856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610bd857600080fd5b505af1158015610bec573d6000803e3d6000fd5b505050506040513d6020811015610c0257600080fd5b505195945050505050565b600881565b600154600090600160a060020a03163314610c2c57600080fd5b5060005b825181101561087557610c5a8382815181101515610c4a57fe5b9060200190602002015183610eef565b50600101610c30565b600154600090600160a060020a03163314610c7d57600080fd5b33600090815260026020526040902054821115610c9957600080fd5b5033600081815260026020526040902054610cba908363ffffffff6113db16565b600160a060020a03821660009081526002602052604081209190915554610ce7908363ffffffff6113db16565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600154600090600160a060020a03163314610d4757600080fd5b5060005b81518110156107d6576000600460008484815181101515610d6857fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101610d4b565b60065481565b600160a060020a0381166000908152600260205260409020545b919050565b600154600160a060020a031681565b60408051808201909152600381527f5153540000000000000000000000000000000000000000000000000000000000602082015281565b600154600160a060020a03163314610e2457600080fd5b600655565b600154600090600160a060020a03163314610e4357600080fd5b8151835114610e5157600080fd5b5060005b825181101561087557610e968382815181101515610e6f57fe5b906020019060200201518383815181101515610e8757fe5b90602001906020020151610eef565b50600101610e55565b600154600090600160a060020a03163314610eb957600080fd5b5060005b825181101561087557610ee78382815181101515610ed757fe5b90602001906020020151836107da565b600101610ebd565b600060406044361015610efe57fe5b600160a060020a0384161515610f1357600080fd5b33600090815260026020526040902054831115610f2f57600080fd5b33600090815260026020526040902054610f4f908463ffffffff6113db16565b3360009081526002602052604080822092909255600160a060020a03861681522054610f81908463ffffffff6113ed16565b600160a060020a0385166000818152600260209081526040918290209390935580518681529051919233926000805160206113fb8339815191529281900390910190a35060019392505050565b60075481565b60085481565b60055481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6001546000908190600160a060020a0316331461102757600080fd5b50506001546040513091823191600160a060020a03909116906108fc8315029083906000818181858888f19350505050158015610875573d6000803e3d6000fd5b60015460009081908190600160a060020a0316331461108657600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156110ea57600080fd5b505af11580156110fe573d6000803e3d6000fd5b505050506040513d602081101561111457600080fd5b5051600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d60208110156111b257600080fd5b5051949350505050565b3360009081526004602052604081205460ff16156111d957600080fd5b50600754600154600160a060020a031660009081526002602052604090205433911180159061120c575061138760085411155b151561121757600080fd5b600160a060020a0381166000908152600460205260409020805460ff1916600190811790915560085461124f9163ffffffff6113ed16565b600855600754600154600160a060020a031660009081526002602052604090205461127f9163ffffffff6113db16565b600154600160a060020a0390811660009081526002602052604080822093909355600754918416815291909120546112bc9163ffffffff6113ed16565b600160a060020a0382166000818152600260209081526040918290209390935560075481519081529051919230926000805160206113fb8339815191529281900390910190a350565b662386f26fc1000081565b600154600160a060020a0316331461132757600080fd5b600160a060020a0381161561135f576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600082151561137357506000610953565b5081810281838281151561138357fe5b041461095357fe5b6000818381151561139857fe5b049392505050565b60065460009082106113d7576113d0826113c460078202606463ffffffff61138b16565b9063ffffffff6113ed16565b9050610dc2565b5090565b6000828211156113e757fe5b50900390565b8181018281101561095357fe00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820149367202770c88ec123ea93d3260342b6197217fd94670fc88ea1ad0c85e0630029"
}