{
  "address": "0xf511a99c509cc22111a740869af8b810e92337a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BatchTransfer",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-07\n*/\n\npragma solidity ^0.4.23;\n\ncontract ERC20 {\n\n    // optional functions\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n\n    // required functios\n    function balanceOf(address user) public view returns (uint256);\n    function allowance(address user, address spender) public view returns (uint256);\n    function totalSupply() public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool); \n    function approve(address spender, uint256 value) public returns (bool); \n\n    // required events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed user, address indexed spender, uint256 value);\n}\n\ncontract BatchTransfer {\n    address private _owner;\n    address private _erc20_address;\n    mapping(address => bool) private _authed_addresses;\n\n    constructor(address erc20_address) public {\n        _owner = msg.sender;\n        _erc20_address = erc20_address;\n        _authed_addresses[msg.sender] = true;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"require owner permission\");\n        _;\n    }\n\n    modifier onlyAuthed() {\n        require(_authed_addresses[msg.sender], \"require auth permission\");\n        _;\n    }\n\n    /**\n        function to update auth, contract owner can grant other account auth permission by this\n        it require:\n            1. transaction sender grant owner permission\n        please check requirement before you invoke  \n     */\n    function updateAuth(address auth_address, bool is_auth) public onlyOwner {\n        _authed_addresses[auth_address] = is_auth;\n    }\n\n    /**\n        convinient function for read token's owner\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n        convinient function for read token's erc20Address\n     */\n    function erc20Address() public view returns (address) {\n        return _erc20_address;\n    }\n\n    /**\n        convinient function for read is address authed\n     */\n    function isAuthed(address authed_address) public view returns (bool){\n        return _authed_addresses[authed_address];\n    }\n\n    /**\n        function for batch transfer\n        it require:\n            1. token_holder have suffcient balance\n            2. token_holder approve enough token to this contract\n            3. transaction sender grant auth permission\n        please check requirement before you invoke  \n     */\n    function transferFrom(address token_holder, address[] token_receivers, uint256[] values) public onlyAuthed returns (bool) {\n        require(token_receivers.length == values.length, \"token_receiver's size must eq value's size\");\n        require(token_receivers.length > 0, \"token_receiver's length must gt 0\");\n        \n        uint length = token_receivers.length;\n\n        // share variables, declare here for reuse later\n        uint i = 0;\n        uint value = 0;\n        uint total_value = 0;\n\n        for(i = 0; i < length; ++i) {\n            value = values[i];\n            require(value > 0, \"value must gt 0\");\n            total_value += value;\n        }\n        \n        ERC20 token_contract = ERC20(_erc20_address);\n        uint256 holder_balance = token_contract.balanceOf(token_holder);\n        require(holder_balance >= total_value, \"balance of holder must gte total_value\");\n        uint256 my_allowance = token_contract.allowance(token_holder, this);\n        require(my_allowance >= total_value, \"allowance to contract must gte total_value\");\n\n        // perform real transfer; require all transaction success; if one fail, all fail\n        for(i = 0; i < length; ++i) {\n            address token_receiver = token_receivers[i];\n            value = values[i];\n            bool is_success = token_contract.transferFrom(token_holder, token_receiver, value);\n            require(is_success, \"transaction should be success\");\n        }\n\n        return true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610db683398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050610c9a8061011c6000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063276184ae1461007257806346091499146100c957806386f56a88146101aa5780638da5cb5b14610205578063e9c771b21461025c575b600080fd5b34801561007e57600080fd5b506100876102ab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100d557600080fd5b50610190600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506102d5565b604051808215151515815260200191505060405180910390f35b3480156101b657600080fd5b506101eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ad0565b604051808215151515815260200191505060405180910390f35b34801561021157600080fd5b5061021a610b26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026857600080fd5b506102a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610b4f565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600080600080600080600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156103a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f726571756972652061757468207065726d697373696f6e00000000000000000081525060200191505060405180910390fd5b8a518c51141515610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f746f6b656e5f726563656976657227732073697a65206d75737420657120766181526020017f6c756527732073697a650000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008c511115156104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f746f6b656e5f72656365697665722773206c656e677468206d7573742067742081526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8b519850600097506000965060009550600097505b888810156105a2578a8881518110151561050e57fe5b906020019060200201519650600087111515610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f76616c7565206d7573742067742030000000000000000000000000000000000081525060200191505060405180910390fd5b86860195508760010197506104f8565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508473ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561066257600080fd5b505af1158015610676573d6000803e3d6000fd5b505050506040513d602081101561068c57600080fd5b8101908080519060200190929190505050935085841015151561073d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f62616c616e6365206f6620686f6c646572206d7573742067746520746f74616c81526020017f5f76616c7565000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8e306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561080c57600080fd5b505af1158015610820573d6000803e3d6000fd5b505050506040513d602081101561083657600080fd5b810190808051906020019092919050505092508583101515156108e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f616c6c6f77616e636520746f20636f6e7472616374206d75737420677465207481526020017f6f74616c5f76616c75650000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600097505b88881015610abc578b8881518110151561090257fe5b9060200190602002015191508a8881518110151561091c57fe5b9060200190602002015196508473ffffffffffffffffffffffffffffffffffffffff166323b872dd8e848a6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156109ff57600080fd5b505af1158015610a13573d6000803e3d6000fd5b505050506040513d6020811015610a2957600080fd5b81019080805190602001909291905050509050801515610ab1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f7472616e73616374696f6e2073686f756c64206265207375636365737300000081525060200191505060405180910390fd5b8760010197506108ec565b600199505050505050505050509392505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f72657175697265206f776e6572207065726d697373696f6e000000000000000081525060200191505060405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a72305820c828eeb539e749f464e1ce5c79635eb7af5f5350d015a1a8faabfd919c6b10c90029000000000000000000000000e9184c970bcfbb05d8a38762d073320e622a3e28",
  "constructorArguments": "000000000000000000000000e9184c970bcfbb05d8a38762d073320e622a3e28"
}