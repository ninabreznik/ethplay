{
  "address": "0xcd3857b618871b89d8f76fd29077fc51e565e1e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherWin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-07\n*/\n\npragma solidity 0.4.25;\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract EtherWinAccessControl {\n    event GamePaused();\n    event GameResumed();\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    address public owner;\n    address public manager;\n\n    address public dividendManagerAddress;\n    address public wallet;\n\n    bool public paused = false;\n    bool public locked = false;\n\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyManager() {\n        require(msg.sender == owner || msg.sender == manager);\n        _;\n    }\n\n    modifier whenUnlocked() {\n        require(!locked);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n\n    constructor() public {\n        owner = msg.sender;\n        manager = msg.sender;\n        wallet = msg.sender;\n    }\n\n\n    function setManager(address _managerAddress) onlyManager external {\n        require(_managerAddress != address(0));\n        manager = _managerAddress;\n    }\n\n\n    function setWallet(address _newWallet) onlyManager external {\n        require(_newWallet != address(0));\n        wallet = _newWallet;\n    }\n\n\n    function setDividendManager(address _dividendManagerAddress) whenUnlocked onlyManager external  {\n        require(_dividendManagerAddress != address(0));\n        dividendManagerAddress = _dividendManagerAddress;\n    }\n\n\n    function pause() onlyManager whenNotPaused public {\n        paused = true;\n        emit GamePaused();\n    }\n\n\n    function unpause() onlyManager whenPaused public {\n        paused = false;\n        emit GameResumed();\n    }\n\n\n    function lock() onlyOwner whenUnlocked external {\n        locked = true;\n    }\n\n}\n\n\ncontract ERC20 {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function ownerTransfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract DividendManagerInterface {\n    function depositDividend() external payable;\n}\n\n\ncontract EtherWin is EtherWinAccessControl {\n    using SafeMath for uint256;\n\n    event NewTicket(address indexed owner, uint indexed blockNum, address indexed referrer, uint value);\n    event NewPrice(uint minWei,uint maxWei);\n    event NewWeiPerBlock(uint newWeiPerBlock);\n    event SendPrize(address indexed owner, uint indexed blockNum, uint value);\n    event FundsTransferred(address dividendManager, uint value);\n    event WinBlockAdded(uint indexed blockNum);\n\n    uint public minWei = 5000000000000000;\n    uint public maxWei = 50000000000000000;\n    uint public maxWeiPerBlock = 500000000000000000;\n    uint public ownersWeis;  // reserved weis for owners\n    uint public depositWeis;  // reserved weis for return deposit\n    uint public prizePercent = 91875;\n    uint public ownersPercent = 8125;\n    uint public refPercent = 1000;\n\n\n    struct Ticket {\n        uint value;\n        bool executed;\n    }\n\n    struct WinBlock {\n        bool exists;\n        uint8 lastByte;\n        uint8 rate;\n        bool jp;\n        uint value;\n    }\n\n    mapping (address => mapping (uint => Ticket)) public tickets; // user addr -> block number -> ticket\n\n    mapping (uint => uint) public blocks; //blicknum -> weis in block\n    mapping (uint8 => uint8) rates;\n\n    mapping (uint => WinBlock) public winBlocks;\n\n    uint public allTicketsPrice;\n    mapping (uint => uint) public allTicketsForBlock; //block num -> allTicketsPrice needs for JP\n    uint[] public JPBlocks;\n    mapping (address => uint) public refs;\n    mapping (address => address) public userRefs;\n\n\n    uint divider = 5;\n    uint public lastPayout;\n\n\n    constructor() public {\n        rates[10] = 15; //a\n        rates[11] = 15; //b\n        rates[12] = 15; //c\n\n        rates[13] = 20; //d\n        rates[14] = 20; //e\n\n        rates[15] = 30; //f\n\n        rates[153] = 99; //99\n    }\n\n\n    function () public payable {\n        play(address(0));\n    }\n\n\n    function play(address _ref) whenNotPaused public payable {\n        Ticket storage t = tickets[msg.sender][block.number];\n\n        require(t.value.add(msg.value) >= minWei && t.value.add(msg.value) <= maxWei);\n        require(blocks[block.number].add(msg.value) <= maxWeiPerBlock);\n\n        t.value = t.value.add(msg.value);\n\n        blocks[block.number] = blocks[block.number].add(msg.value);\n\n        if (_ref != address(0) && _ref != msg.sender) {\n            userRefs[msg.sender] = _ref;\n        }\n\n        //need for JP\n        allTicketsPrice = allTicketsPrice.add(msg.value);\n        allTicketsForBlock[block.number] = allTicketsPrice;\n\n        if (userRefs[msg.sender] != address(0)) {\n            refs[_ref] = refs[_ref].add(valueFromPercent(msg.value, refPercent));\n            ownersWeis = ownersWeis.add(valueFromPercent(msg.value, ownersPercent.sub(refPercent)));\n        } else {\n            ownersWeis = ownersWeis.add(valueFromPercent(msg.value,ownersPercent));\n        }\n\n        emit NewTicket(msg.sender, block.number, _ref, t.value);\n    }\n\n\n    function addWinBlock(uint _blockNum) public  {\n        require( (_blockNum.add(12) < block.number) && (_blockNum > block.number - 256) );\n        require(!winBlocks[_blockNum].exists);\n        require(blocks[_blockNum-1] > 0);\n\n        bytes32 bhash = blockhash(_blockNum);\n        uint8 lastByte = uint8(bhash[31]);\n\n        require( ((rates[lastByte % 16]) > 0) || (rates[lastByte] > 0) );\n\n        _addWinBlock(_blockNum, lastByte);\n    }\n\n\n    function _addWinBlock(uint _blockNum, uint8 _lastByte) internal {\n        WinBlock storage wBlock = winBlocks[_blockNum];\n        wBlock.exists = true;\n        wBlock.lastByte = _lastByte;\n        wBlock.rate = rates[_lastByte % 16];\n\n        //JP\n        if (_lastByte == 153) {\n            wBlock.jp = true;\n\n            if (JPBlocks.length > 0) {\n                wBlock.value = allTicketsForBlock[_blockNum-1].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\n            } else {\n                wBlock.value = allTicketsForBlock[_blockNum-1];\n            }\n\n            JPBlocks.push(_blockNum);\n        }\n\n        emit WinBlockAdded(_blockNum);\n    }\n\n\n    function getPrize(uint _blockNum) public {\n        Ticket storage t = tickets[msg.sender][_blockNum-1];\n        require(t.value > 0);\n        require(!t.executed);\n\n        if (!winBlocks[_blockNum].exists) {\n            addWinBlock(_blockNum);\n        }\n\n        require(winBlocks[_blockNum].exists);\n\n        uint winValue = 0;\n\n        if (winBlocks[_blockNum].jp) {\n            winValue = getJPValue(_blockNum,t.value);\n        } else {\n            winValue = t.value.mul(winBlocks[_blockNum].rate).div(10);\n        }\n\n\n        require(address(this).balance >= winValue);\n\n        t.executed = true;\n        msg.sender.transfer(winValue);\n        emit SendPrize(msg.sender, _blockNum, winValue);\n    }\n\n\n    function minJackpotValue(uint _blockNum) public view returns (uint){\n        uint value = 0;\n        if (JPBlocks.length > 0) {\n            value = allTicketsForBlock[_blockNum].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\n        } else {\n            value = allTicketsForBlock[_blockNum];\n        }\n\n        return _calcJP(minWei, minWei, value);\n    }\n\n\n    function jackpotValue(uint _blockNum, uint _ticketPrice) public view returns (uint){\n        uint value = 0;\n        if (JPBlocks.length > 0) {\n            value = allTicketsForBlock[_blockNum].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\n        } else {\n            value = allTicketsForBlock[_blockNum];\n        }\n\n        return _calcJP(_ticketPrice, _ticketPrice, value);\n    }\n\n\n    function getJPValue(uint _blockNum, uint _ticketPrice) internal view returns (uint) {\n        return _calcJP(_ticketPrice, blocks[_blockNum-1], winBlocks[_blockNum].value);\n    }\n\n\n    function _calcJP(uint _ticketPrice, uint _varB, uint _varX) internal view returns (uint) {\n        uint varA = _ticketPrice;\n        uint varB = _varB; //blocks[blockNum-1]\n        uint varX = _varX; //winBlocks[blockNum].value\n\n        uint varL = varA.mul(1000).div(divider).div(1000000000000000000);\n        uint minjp = minWei.mul(25);\n        varL = varL.mul(minjp);\n\n        uint varR = varA.mul(10000).div(varB);\n        uint varX1 = varX.mul(1023);\n        varR = varR.mul(varX1).div(100000000);\n\n        return varL.add(varR);\n    }\n\n\n    function changeTicketWeiLimit(uint _minWei, uint _maxWei, uint _divider) onlyManager public {\n        minWei = _minWei;\n        maxWei = _maxWei;\n        divider = _divider;\n        emit NewPrice(minWei,maxWei);\n    }\n\n\n    function changeWeiPerBlock(uint _value) onlyManager public {\n        maxWeiPerBlock = _value;\n        emit NewWeiPerBlock(maxWeiPerBlock);\n    }\n\n\n    function returnDeposit() onlyManager public {\n        require(address(this).balance >= depositWeis);\n        uint deposit = depositWeis;\n        depositWeis = 0;\n        wallet.transfer(deposit);\n    }\n\n\n    function transferEthersToDividendManager() public {\n        require(now >= lastPayout.add(7 days) );\n        require(address(this).balance >= ownersWeis);\n        require(ownersWeis > 0);\n        lastPayout = now;\n        uint dividends = ownersWeis;\n        ownersWeis = 0;\n\n        wallet.transfer(valueFromPercent(dividends,15000));\n\n        DividendManagerInterface dividendManager = DividendManagerInterface(dividendManagerAddress);\n        dividendManager.depositDividend.value(valueFromPercent(dividends,85000))();\n\n        emit FundsTransferred(dividendManagerAddress, dividends);\n    }\n\n\n    function addEth() public payable {\n        depositWeis = depositWeis.add(msg.value);\n    }\n\n\n    function fromHexChar(uint8 _c) internal pure returns (uint8) {\n        return _c - (_c < 58 ? 48 : (_c < 97 ? 55 : 87));\n    }\n\n\n    function getByte(bytes res) internal pure returns (uint8) {\n        return fromHexChar(uint8(res[62])) << 4 | fromHexChar(uint8(res[63]));\n    }\n\n\n    function withdrawRefsPercent() external {\n        require(refs[msg.sender] > 0);\n        require(address(this).balance >= refs[msg.sender]);\n        uint val = refs[msg.sender];\n        refs[msg.sender] = 0;\n        msg.sender.transfer(val);\n    }\n\n\n    function valueFromPercent(uint _value, uint _percent) internal pure returns(uint quotient) {\n        uint _quotient = _value.mul(_percent).div(100000);\n        return ( _quotient);\n    }\n\n    /// @notice This method can be used by the owner to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) onlyManager external {\n        ERC20 token = ERC20(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositWeis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWei\",\"type\":\"uint256\"},{\"name\":\"_maxWei\",\"type\":\"uint256\"},{\"name\":\"_divider\",\"type\":\"uint256\"}],\"name\":\"changeTicketWeiLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefsPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTicketsPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendManagerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRefs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winBlocks\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"lastByte\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint8\"},{\"name\":\"jp\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersWeis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTicketsForBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendManagerAddress\",\"type\":\"address\"}],\"name\":\"setDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"getPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"JPBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeWeiPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"minJackpotValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"addWinBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_managerAddress\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthersToDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"},{\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"jackpotValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNum\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxWei\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWeiPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewWeiPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SendPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividendManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"WinBlockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GamePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a61ffff02191690556611c37937e0800060045566b1a2bc2ec5000060059081556706f05b59d3b20000600655620166e3600955611fbd600a556103e8600b5560155534801561005b57600080fd5b5060008054600160a060020a03199081163390811783556001805483168217905560038054909216179055600e6020527f0978afefdfd541f3bdffe34b0f19bc4ce1d7b3554d278a75e04686adf3223b39805460ff19908116600f9081179092557f7528327bfca11f705552fba9c3966003c5a3e73459dc289e7c8420997d319bee80548216831790557f47a2bf86628ea95bf13ae7e8527a13a64f52541d600ba060a013f0b8e72a5e2d805482169092179091557f9d0231707eb2041153c28e130d22114ee38b252cf17233585036af02278e41818054821660149081179091557fa6897c210c76a29b3d6bf757063b10a3faa77fe0657de0ee282493e99a18ed508054831690911790557f60dd7f0393e3d3987afafbb50883ff45658a7a0c2d4460aa7a872d45c2ea235280548216601e17905560999091527f2320b5a50f28554c34beeca1f2cd5d5cc0dda7dc04f681961e96aee6741db183805490911660631790556118cb806101d06000396000f3006080604052600436106101f85763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663068b73108114610204578063108fb4151461022b578063116715141461024057806328420f29146102555780633e622f00146102735780633f4ba83a146102885780633f511f231461029d578063481c6a75146102b257806349b7a9c2146102e357806349f164f0146102f85780634a26531b14610319578063521eb27314610366578063559bdcaf1461037b57806359d5335b146103905780635c975abb146103a557806360fcfe70146103ce5780637485d6d5146103e35780637524f4e3146103fb57806375c6c6da146104105780637e88f603146104315780638456cb59146104465780638bf605371461045b5780638da5cb5b1461047c578063a1099bf214610491578063a23e52db146104a9578063acf9b8cf146104c1578063addd7020146104d9578063b4d8a14d146104ee578063b9db102a14610506578063c257581d1461051b578063c2ac3aff14610533578063cf3090121461053b578063d0ebdbe714610550578063d436a67714610571578063dae7a13c14610586578063deaa59df146105c3578063df8de3e7146105e4578063e23e5a4114610605578063e492814f14610620578063f25b3f9914610634578063f83d08ba1461064c575b6102026000610661565b005b34801561021057600080fd5b506102196108ce565b60408051918252519081900360200190f35b34801561023757600080fd5b506102196108d4565b34801561024c57600080fd5b506102196108da565b34801561026157600080fd5b506102026004356024356044356108e0565b34801561027f57600080fd5b5061020261095d565b34801561029457600080fd5b506102026109db565b3480156102a957600080fd5b50610219610a6a565b3480156102be57600080fd5b506102c7610a70565b60408051600160a060020a039092168252519081900360200190f35b3480156102ef57600080fd5b506102c7610a7f565b34801561030457600080fd5b506102c7600160a060020a0360043516610a8e565b34801561032557600080fd5b50610331600435610aa9565b60408051951515865260ff94851660208701529290931684830152151560608401526080830191909152519081900360a00190f35b34801561037257600080fd5b506102c7610ae5565b34801561038757600080fd5b50610219610af4565b34801561039c57600080fd5b50610219610afa565b3480156103b157600080fd5b506103ba610b00565b604080519115158252519081900360200190f35b3480156103da57600080fd5b50610219610b10565b3480156103ef57600080fd5b50610219600435610b16565b34801561040757600080fd5b50610219610b28565b34801561041c57600080fd5b50610219600160a060020a0360043516610b2e565b34801561043d57600080fd5b50610202610b40565b34801561045257600080fd5b50610202610bc5565b34801561046757600080fd5b50610202600160a060020a0360043516610c59565b34801561048857600080fd5b506102c7610cf4565b34801561049d57600080fd5b50610202600435610d03565b3480156104b557600080fd5b50610219600435610e76565b3480156104cd57600080fd5b50610202600435610e95565b3480156104e557600080fd5b50610219610efe565b3480156104fa57600080fd5b50610219600435610f04565b34801561051257600080fd5b50610219610f9d565b34801561052757600080fd5b50610202600435610fa3565b61020261108d565b34801561054757600080fd5b506103ba6110a5565b34801561055c57600080fd5b50610202600160a060020a03600435166110c7565b34801561057d57600080fd5b50610202611139565b34801561059257600080fd5b506105aa600160a060020a036004351660243561129e565b6040805192835290151560208301528051918290030190f35b3480156105cf57600080fd5b50610202600160a060020a03600435166112c5565b3480156105f057600080fd5b50610202600160a060020a0360043516611337565b34801561061157600080fd5b5061021960043560243561149d565b610202600160a060020a0360043516610661565b34801561064057600080fd5b50610219600435611535565b34801561065857600080fd5b50610202611547565b60035460009060a060020a900460ff161561067b57600080fd5b50336000908152600c60209081526040808320438452909152902060045481546106ab903463ffffffff6115c016565b101580156106cc575060055481546106c9903463ffffffff6115c016565b11155b15156106d757600080fd5b600654436000908152600d60205260409020546106fa903463ffffffff6115c016565b111561070557600080fd5b8054610717903463ffffffff6115c016565b8155436000908152600d6020526040902054610739903463ffffffff6115c016565b436000908152600d6020526040902055600160a060020a0382161580159061076a5750600160a060020a0382163314155b156107a557336000908152601460205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b6010546107b8903463ffffffff6115c016565b601081905543600090815260116020908152604080832093909355338252601490522054600160a060020a0316156108735761081e6107f934600b546115cf565b600160a060020a0384166000908152601360205260409020549063ffffffff6115c016565b600160a060020a038316600090815260136020526040902055600b54600a5461086b9161085c913491610857919063ffffffff6115f116565b6115cf565b6007549063ffffffff6115c016565b600755610886565b61088261085c34600a546115cf565b6007555b80546040805191825251600160a060020a03841691439133917f5452a85b225ef4259cf69950e73ab227ccafb86408af83a1dafbee4abd7f5a60919081900360200190a45050565b60055481565b60095481565b60085481565b600054600160a060020a03163314806109035750600154600160a060020a031633145b151561090e57600080fd5b600483905560058290556015819055604080518481526020810184905281517fb9362b96e28efbb7a7e63bb4a97faf9924ec0394635feff8588a6ae2a5f784fe929181900390910190a1505050565b33600090815260136020526040812054811061097857600080fd5b336000908152601360205260409020543031101561099557600080fd5b5033600081815260136020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156109d7573d6000803e3d6000fd5b5050565b600054600160a060020a03163314806109fe5750600154600160a060020a031633145b1515610a0957600080fd5b60035460a060020a900460ff161515610a2157600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517fc2b59ac10e0ce529935226cd4598d1b33c6884837c7c6466958ec98d7f25051590600090a1565b60105481565b600154600160a060020a031681565b600254600160a060020a031681565b601460205260009081526040902054600160a060020a031681565b600f602052600090815260409020805460019091015460ff80831692610100810482169262010000820483169263010000009092049091169085565b600354600160a060020a031681565b600a5481565b600b5481565b60035460a060020a900460ff1681565b60075481565b60116020526000908152604090205481565b60065481565b60136020526000908152604090205481565b60008054600160a060020a0316331480610b645750600154600160a060020a031633145b1515610b6f57600080fd5b60085430311015610b7f57600080fd5b50600880546000918290556003546040519192600160a060020a039091169183156108fc0291849190818181858888f193505050501580156109d7573d6000803e3d6000fd5b600054600160a060020a0316331480610be85750600154600160a060020a031633145b1515610bf357600080fd5b60035460a060020a900460ff1615610c0a57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f379a7ed98de1761176e6287e5f55608de8a7ab47a92b795aed8fe2fd32d8260e90600090a1565b6003547501000000000000000000000000000000000000000000900460ff1615610c8257600080fd5b600054600160a060020a0316331480610ca55750600154600160a060020a031633145b1515610cb057600080fd5b600160a060020a0381161515610cc557600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b336000908152600c6020908152604080832060001985018452909152812080549091908110610d3157600080fd5b600182015460ff1615610d4357600080fd5b6000838152600f602052604090205460ff161515610d6457610d6483610fa3565b6000838152600f602052604090205460ff161515610d8157600080fd5b506000828152600f60205260408120546301000000900460ff1615610db557610dae838360000154611603565b9050610dee565b6000838152600f60205260409020548254610deb91600a91610ddf9162010000900460ff16611633565b9063ffffffff61165e16565b90505b3031811115610dfc57600080fd5b6001828101805460ff19169091179055604051339082156108fc029083906000818181858888f19350505050158015610e39573d6000803e3d6000fd5b50604080518281529051849133917f6770b7080a2fdf538ff535ceb0b3ccb507cb803153c3d85f1e35f78178e8c8eb9181900360200190a3505050565b6012805482908110610e8457fe5b600091825260209091200154905081565b600054600160a060020a0316331480610eb85750600154600160a060020a031633145b1515610ec357600080fd5b60068190556040805182815290517f9a568cbf96fdfd2bcd750b9de431eafe51ebad2b7476c01c3c9d8c27a6607c459181900360200190a150565b60045481565b6012546000908190811015610f765760128054610f6f916011916000916001916000198101908110610f3257fe5b90600052602060002001540381526020019081526020016000205460116000868152602001908152602001600020546115f190919063ffffffff16565b9050610f87565b506000828152601160205260409020545b610f9660045460045483611675565b9392505050565b60165481565b60008043610fb884600c63ffffffff6115c016565b108015610fc85750610100430383115b1515610fd357600080fd5b6000838152600f602052604090205460ff1615610fef57600080fd5b60001983016000908152600d60205260408120541161100d57600080fd5b50507f01000000000000000000000000000000000000000000000000000000000000008140601f81901a820291909104600f81166000908152600e602052604081205460ff161180611073575060ff8082166000908152600e6020526040812054909116115b151561107e57600080fd5b611088838261173b565b505050565b6008546110a0903463ffffffff6115c016565b600855565b6003547501000000000000000000000000000000000000000000900460ff1681565b600054600160a060020a03163314806110ea5750600154600160a060020a031633145b15156110f557600080fd5b600160a060020a038116151561110a57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008061115462093a806016546115c090919063ffffffff16565b42101561116057600080fd5b6007543031101561117057600080fd5b60075460001061117f57600080fd5b42601655600780546000909155600354909250600160a060020a03166108fc6111aa84613a986115cf565b6040518115909202916000818181858888f193505050501580156111d2573d6000803e3d6000fd5b5050600254600160a060020a03168063a289d1876111f38462014c086115cf565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561123a57600080fd5b505af115801561124e573d6000803e3d6000fd5b505060025460408051600160a060020a0390921682526020820187905280517f8c9a4f13b67cb64d7c6aa1ae0c9bf07694af521a28b93e7060020810ab4bc59f9550918290030192509050a15050565b600c6020908152600092835260408084209091529082529020805460019091015460ff1682565b600054600160a060020a03163314806112e85750600154600160a060020a031633145b15156112f357600080fd5b600160a060020a038116151561130857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080548190600160a060020a031633148061135d5750600154600160a060020a031633145b151561136857600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156113cc57600080fd5b505af11580156113e0573d6000803e3d6000fd5b505050506040513d60208110156113f657600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b505050506040513d602081101561149657600080fd5b5050505050565b601254600090819081101561150f57601280546115089160119160009160019160001981019081106114cb57fe5b90600052602060002001540381526020019081526020016000205460116000878152602001908152602001600020546115f190919063ffffffff16565b9050611520565b506000838152601160205260409020545b61152b838483611675565b91505b5092915050565b600d6020526000908152604090205481565b600054600160a060020a0316331461155e57600080fd5b6003547501000000000000000000000000000000000000000000900460ff161561158757600080fd5b6003805475ff00000000000000000000000000000000000000000019167501000000000000000000000000000000000000000000179055565b600082820183811015610f9657fe5b6000806115e9620186a0610ddf868663ffffffff61163316565b949350505050565b6000828211156115fd57fe5b50900390565b60001982016000908152600d6020908152604080832054858452600f909252822060010154610f96918491611675565b600080831515611646576000915061152e565b5082820282848281151561165657fe5b0414610f9657fe5b600080828481151561166c57fe5b04949350505050565b60155460009084908490849084908190819081906116ab90670de0b6b3a764000090610ddf90818b6103e863ffffffff61163316565b6004549094506116c290601963ffffffff61163316565b92506116d4848463ffffffff61163316565b93506116ec86610ddf8961271063ffffffff61163316565b9150611700856103ff63ffffffff61163316565b905061171a6305f5e100610ddf848463ffffffff61163316565b915061172c848363ffffffff6115c016565b9b9a5050505050505050505050565b6000828152600f602081815260408084208054600160ff199091161761ff00191661010060ff888116918202929092178084559588168752600e909452919094205462ff000019909316921662010000029190911782556099141561186f57805463ff000000191663010000001781556012546000101561181f57601280546118159160119160009160019160001981019081106117d557fe5b90600052602060002001540381526020019081526020016000205460116000600187038152602001908152602001600020546115f190919063ffffffff16565b6001820155611839565b600019830160009081526011602052604090205460018201555b601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444018390555b60405183907fcc1325d9dce0926e1a052173c628a244b156c438edbcdff68251760607d5a90590600090a25050505600a165627a7a723058209a5e94d41a77183a60db61b408c5546954c5c76874d87d5b8c67726c43c367350029"
}