{
  "address": "0x65256f9ff6bf347891039e991cbd8e3cedc708cf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UpgradebleStormSender",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity 0.4.24;\n\n\ncontract EternalStorage {\n\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n\n}\n\n\ncontract UpgradeabilityOwnerStorage {\n    address private _upgradeabilityOwner;\n\n    function upgradeabilityOwner() public view returns (address) {\n        return _upgradeabilityOwner;\n    }\n\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\n        _upgradeabilityOwner = newUpgradeabilityOwner;\n    }\n\n}\n\ncontract UpgradeabilityStorage {\n\n    string internal _version;\n\n    address internal _implementation;\n\n    function version() public view returns (string) {\n        return _version;\n    }\n\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\n\n\ncontract OwnedUpgradeabilityStorage is UpgradeabilityOwnerStorage, UpgradeabilityStorage, EternalStorage {}\n\n\n\nlibrary SafeMath {\n\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\ncontract Ownable is EternalStorage {\n  \n    event OwnershipTransferred(address previousOwner, address newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner());\n        _;\n    }\n\n    function owner() public view returns (address) {\n        return addressStorage[keccak256(\"owner\")];\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        setOwner(newOwner);\n    }\n\n    function setOwner(address newOwner) internal {\n        emit OwnershipTransferred(owner(), newOwner);\n        addressStorage[keccak256(\"owner\")] = newOwner;\n    }\n}\n\n\n\n\n\ncontract Claimable is EternalStorage, Ownable {\n    function pendingOwner() public view returns (address) {\n        return addressStorage[keccak256(\"pendingOwner\")];\n    }\n\n    \n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner());\n        _;\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        addressStorage[keccak256(\"pendingOwner\")] = newOwner;\n    }\n\n    \n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner(), pendingOwner());\n        addressStorage[keccak256(\"owner\")] = addressStorage[keccak256(\"pendingOwner\")];\n        addressStorage[keccak256(\"pendingOwner\")] = address(0);\n    }\n}\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract UpgradebleStormSender is OwnedUpgradeabilityStorage, Claimable {\n    using SafeMath for uint256;\n\n    event Multisended(uint256 total, address tokenAddress);\n    event ClaimedTokens(address token, address owner, uint256 balance);\n\n    modifier hasFee() {\n        if (currentFee(msg.sender) > 0) {\n            require(msg.value >= currentFee(msg.sender));\n        }\n        _;\n    }\n\n    function() public payable {}\n\n    function initialize(address _owner) public {\n        require(!initialized());\n        setOwner(_owner);\n        setArrayLimit(200);\n        setDiscountStep(0.00002 ether);\n        setFee(0.02 ether);\n        boolStorage[keccak256(\"rs_multisender_initialized\")] = true;\n    }\n\n    function initialized() public view returns (bool) {\n        return boolStorage[keccak256(\"rs_multisender_initialized\")];\n    }\n \n    function txCount(address customer) public view returns(uint256) {\n        return uintStorage[keccak256(abi.encodePacked(\"txCount\", customer))];\n    }\n\n    function arrayLimit() public view returns(uint256) {\n        return uintStorage[keccak256(abi.encodePacked(\"arrayLimit\"))];\n    }\n\n    function setArrayLimit(uint256 _newLimit) public onlyOwner {\n        require(_newLimit != 0);\n        uintStorage[keccak256(\"arrayLimit\")] = _newLimit;\n    }\n\n    function discountStep() public view returns(uint256) {\n        return uintStorage[keccak256(\"discountStep\")];\n    }\n\n    function setDiscountStep(uint256 _newStep) public onlyOwner {\n        require(_newStep != 0);\n        uintStorage[keccak256(\"discountStep\")] = _newStep;\n    }\n\n    function fee() public view returns(uint256) {\n        return uintStorage[keccak256(\"fee\")];\n    }\n\n    function currentFee(address _customer) public view returns(uint256) {\n        if (fee() > discountRate(msg.sender)) {\n            return fee().sub(discountRate(_customer));\n        } else {\n            return 0;\n        }\n    }\n\n    function setFee(uint256 _newStep) public onlyOwner {\n        require(_newStep != 0);\n        uintStorage[keccak256(\"fee\")] = _newStep;\n    }\n\n    function discountRate(address _customer) public view returns(uint256) {\n        uint256 count = txCount(_customer);\n        return count.mul(discountStep());\n    }\n\n    function multisendToken(address token, address[] _contributors, uint256[] _balances) public hasFee payable {\n        if (token == 0x000000000000000000000000000000000000bEEF){\n            multisendEther(_contributors, _balances);\n        } else {\n            uint256 total = 0;\n            require(_contributors.length <= arrayLimit());\n            ERC20 erc20token = ERC20(token);\n            uint8 i = 0;\n            for (i; i < _contributors.length; i++) {\n                erc20token.transferFrom(msg.sender, _contributors[i], _balances[i]);\n                total += _balances[i];\n            }\n            setTxCount(msg.sender, txCount(msg.sender).add(1));\n            emit Multisended(total, token);\n        }\n    }\n\n    function multisendEther(address[] _contributors, uint256[] _balances) public payable {\n        uint256 total = msg.value;\n        uint256 userfee = currentFee(msg.sender);\n        require(total >= userfee);\n        require(_contributors.length <= arrayLimit());\n        total = total.sub(userfee);\n        uint256 i = 0;\n        for (i; i < _contributors.length; i++) {\n            require(total >= _balances[i]);\n            total = total.sub(_balances[i]);\n            _contributors[i].transfer(_balances[i]);\n        }\n        setTxCount(msg.sender, txCount(msg.sender).add(1));\n        emit Multisended(msg.value, 0x000000000000000000000000000000000000bEEF);\n    }\n\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == 0x0) {\n            owner().transfer(address(this).balance);\n            return;\n        }\n        ERC20 erc20token = ERC20(_token);\n        uint256 balance = erc20token.balanceOf(this);\n        erc20token.transfer(owner(), balance);\n        emit ClaimedTokens(_token, owner(), balance);\n    }\n    \n    function setTxCount(address customer, uint256 _txCount) private {\n        uintStorage[keccak256(abi.encodePacked(\"txCount\", customer))] = _txCount;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStep\",\"type\":\"uint256\"}],\"name\":\"setDiscountStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"currentFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStep\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeabilityOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arrayLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"txCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setArrayLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"discountRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50611d7b806100206000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b66f3f51461011f578063158ef93e146101db5780632f7813931461020a5780634e71e0c81461023757806354fd4d501461024e578063591552da146102de5780635c60da1b1461033557806369fe0e2d1461038c5780636fde8202146103b95780638da5cb5b14610410578063ab883d2814610467578063b4ae641c14610503578063c1258f691461052e578063c4d66de814610585578063ddca3f43146105c8578063df8de3e7146105f3578063e30c397814610636578063e4e1f29b1461068d578063ee8a0a30146106b8578063eff8e748146106e5578063f2fde38b1461073c575b005b6101d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061077f565b005b3480156101e757600080fd5b506101f0610a2c565b604051808215151515815260200191505060405180910390f35b34801561021657600080fd5b5061023560048036038101908080359060200190929190505050610a91565b005b34801561024357600080fd5b5061024c610b3a565b005b34801561025a57600080fd5b50610263610db1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a3578082015181840152602081019050610288565b50505050905090810190601f1680156102d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ea57600080fd5b5061031f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e53565b6040518082815260200191505060405180910390f35b34801561034157600080fd5b5061034a610e9f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039857600080fd5b506103b760048036038101908080359060200190929190505050610ec9565b005b3480156103c557600080fd5b506103ce610f72565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041c57600080fd5b50610425610f9b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105016004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611013565b005b34801561050f57600080fd5b506105186111dc565b6040518082815260200191505060405180910390f35b34801561053a57600080fd5b5061056f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112a0565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113a9565b005b3480156105d457600080fd5b506105dd61145b565b6040518082815260200191505060405180910390f35b3480156105ff57600080fd5b50610634600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114b3565b005b34801561064257600080fd5b5061064b6117ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069957600080fd5b506106a2611865565b6040518082815260200191505060405180910390f35b3480156106c457600080fd5b506106e3600480360381019080803590602001909291905050506118bd565b005b3480156106f157600080fd5b50610726600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611966565b6040518082815260200191505060405180910390f35b34801561074857600080fd5b5061077d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611996565b005b60008060008061078e33610e53565b11156107ac5761079d33610e53565b34101515156107ab57600080fd5b5b61beef73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156107f1576107ec8585611013565b610a24565b600092506107fd6111dc565b85511115151561080c57600080fd5b859150600090505b84518160ff161015610993578173ffffffffffffffffffffffffffffffffffffffff166323b872dd33878460ff1681518110151561084e57fe5b90602001906020020151878560ff1681518110151561086957fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561092b57600080fd5b505af115801561093f573d6000803e3d6000fd5b505050506040513d602081101561095557600080fd5b810190808051906020019092919050505050838160ff1681518110151561097857fe5b90602001906020020151830192508080600101915050610814565b6109b8336109b360016109a5336112a0565b611aa590919063ffffffff16565b611ac3565b7f04afd2ce457d973046bd54f5d7d36368546da08b88be1bca8ae50e32b451da178387604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15b505050505050565b60006007600060405180807f72735f6d756c746973656e6465725f696e697469616c697a6564000000000000815250601a01905060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff16905090565b610a99610f9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ad257600080fd5b60008114151515610ae257600080fd5b806003600060405180807f646973636f756e74537465700000000000000000000000000000000000000000815250600c0190506040518091039020600019166000191681526020019081526020016000208190555050565b610b426117ed565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7b57600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0610ba4610f9b565b610bac6117ed565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a16005600060405180807f70656e64696e674f776e65720000000000000000000000000000000000000000815250600c01905060405180910390206000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005600060405180807f6f776e6572000000000000000000000000000000000000000000000000000000815250600501905060405180910390206000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006005600060405180807f70656e64696e674f776e65720000000000000000000000000000000000000000815250600c01905060405180910390206000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606060018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e495780601f10610e1e57610100808354040283529160200191610e49565b820191906000526020600020905b815481529060010190602001808311610e2c57829003601f168201915b5050505050905090565b6000610e5e33611966565b610e6661145b565b1115610e9557610e8e610e7883611966565b610e8061145b565b611bcb90919063ffffffff16565b9050610e9a565b600090505b919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ed1610f9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f0a57600080fd5b60008114151515610f1a57600080fd5b806003600060405180807f666565000000000000000000000000000000000000000000000000000000000081525060030190506040518091039020600019166000191681526020019081526020016000208190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006005600060405180807f6f776e6572000000000000000000000000000000000000000000000000000000815250600501905060405180910390206000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600034925061102433610e53565b915081831015151561103557600080fd5b61103d6111dc565b85511115151561104c57600080fd5b61105f8284611bcb90919063ffffffff16565b9250600090505b845181101561114357838181518110151561107d57fe5b90602001906020020151831015151561109557600080fd5b6110bf84828151811015156110a657fe5b9060200190602002015184611bcb90919063ffffffff16565b925084818151811015156110cf57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc858381518110151561110057fe5b906020019060200201519081150290604051600060405180830381858888f19350505050158015611135573d6000803e3d6000fd5b508080600101915050611066565b611168336111636001611155336112a0565b611aa590919063ffffffff16565b611ac3565b7f04afd2ce457d973046bd54f5d7d36368546da08b88be1bca8ae50e32b451da173461beef604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050505050565b60006003600060405160200180807f61727261794c696d697400000000000000000000000000000000000000000000815250600a0190506040516020818303038152906040526040518082805190602001908083835b6020831015156112575780518252602082019150602081019050602083039250611232565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002054905090565b6000600360008360405160200180807f7478436f756e74000000000000000000000000000000000000000000000000008152506007018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b60208310151561135e5780518252602082019150602081019050602083039250611339565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600019168152602001908152602001600020549050919050565b6113b1610a2c565b1515156113bd57600080fd5b6113c681611be4565b6113d060c86118bd565b6113df6512309ce54000610a91565b6113ef66470de4df820000610ec9565b60016007600060405180807f72735f6d756c746973656e6465725f696e697469616c697a6564000000000000815250601a01905060405180910390206000191660001916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006003600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390206000191660001916815260200190815260200160002054905090565b6000806114be610f9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f757600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614156115805761151e610f9b565b73ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561157a573d6000803e3d6000fd5b506117e8565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561161e57600080fd5b505af1158015611632573d6000803e3d6000fd5b505050506040513d602081101561164857600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61167f610f9b565b836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561170557600080fd5b505af1158015611719573d6000803e3d6000fd5b505050506040513d602081101561172f57600080fd5b8101908080519060200190929190505050507ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c8361176b610f9b565b83604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b505050565b60006005600060405180807f70656e64696e674f776e65720000000000000000000000000000000000000000815250600c01905060405180910390206000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006003600060405180807f646973636f756e74537465700000000000000000000000000000000000000000815250600c01905060405180910390206000191660001916815260200190815260200160002054905090565b6118c5610f9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118fe57600080fd5b6000811415151561190e57600080fd5b806003600060405180807f61727261794c696d697400000000000000000000000000000000000000000000815250600a0190506040518091039020600019166000191681526020019081526020016000208190555050565b600080611972836112a0565b905061198e61197f611865565b82611d1490919063ffffffff16565b915050919050565b61199e610f9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119d757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a1357600080fd5b806005600060405180807f70656e64696e674f776e65720000000000000000000000000000000000000000815250600c01905060405180910390206000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808284019050838110151515611ab957fe5b8091505092915050565b80600360008460405160200180807f7478436f756e74000000000000000000000000000000000000000000000000008152506007018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083101515611b805780518252602082019150602081019050602083039250611b5b565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600019168152602001908152602001600020819055505050565b6000828211151515611bd957fe5b818303905092915050565b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0611c0d610f9b565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1806005600060405180807f6f776e6572000000000000000000000000000000000000000000000000000000815250600501905060405180910390206000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000841415611d295760009150611d48565b8284029050828482811515611d3a57fe5b04141515611d4457fe5b8091505b50929150505600a165627a7a72305820ed1b0d55c37f10711599a8ce8e8cfba5472e5eed71f08270fa7ef6dd98e3b2ea0029"
}