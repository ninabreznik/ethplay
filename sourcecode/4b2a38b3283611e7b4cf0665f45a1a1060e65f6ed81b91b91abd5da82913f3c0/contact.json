{
  "address": "0x991c2e104dfa1e2f88fd91010ee65cfb2a60e255",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DBank",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-07\n*/\n\npragma solidity ^0.4.24;\n\n//  _______  .______        ___      .__   __.  __  ___\n// |       \\ |   _  \\      /   \\     |  \\ |  | |  |/  /\n// |  .--.  ||  |_)  |    /  ^  \\    |   \\|  | |  '  /\n// |  |  |  ||   _  <    /  /_\\  \\   |  . `  | |    <\n// |  '--'  ||  |_)  |  /  _____  \\  |  |\\   | |  .  \\\n// |_______/ |______/  /__/     \\__\\ |__| \\__| |__|\\__\\\n// \n// VISIT => http://dbank.money\n// \n// The first global decentralized bank.\n// \n// 1. GAIN 4% PER 24 HOURS (every 5900 blocks)\n// 2. [FREE BONUS] New users get a 0.1 ETH bonus immediately!\n// 3. [REFERRAL BONUS] If you invite your friend to invest, you both get a 10% bonus.\n// 4. NO COMMISSION. NO FEES.\n// \n// Contracts reviewed and approved by pros!\n\ncontract DBank {\n    uint256 dbk_;   // total investment in DBank\n    mapping (address => uint256) invested; // address => investment\n    mapping (address => uint256) atBlock; // address => user's investment at block\n    uint256 public r_ = 4; //profit ratioï¼Œevery 5900 blocks(1 day) you earn 4%\n    uint256 public blocks_ = 5900; //blocks in every cycle\n\n    // Player and referral bonus\n    uint256 public pID_;    // total number of players\n    mapping (address => uint256) public pIDxAddr_;  // (addr => pID) returns player id by address\n    mapping (uint256 => address) public plyr_;   // (pID => data) player data\n\n    // New User Bonus\n    bool public bonusOn_ = true;    // give bonus or not\n    uint256 public bonusAmount_ = 1 * 10**16;   // 0.01 ETH\n\n    // this function called every time anyone sends a transaction to this contract\n    function ()\n        external \n        payable\n    {\n        buyCore(msg.sender, msg.value);\n    }\n\n    // buy with refferal ID\n    function buy(uint256 refID)\n        public\n        payable\n    {\n        buyCore(msg.sender, msg.value);\n\n        // bonus for refferal 10%\n        if (plyr_[refID] != address(0)) {\n            invested[plyr_[refID]] += msg.value / 10;\n        }\n\n        // bonus for user self 10%\n        invested[msg.sender] += msg.value / 10;\n    }\n\n    // Reinvest\n    function reinvest()\n        public\n    {\n        if (invested[msg.sender] != 0) {\n            uint256 amount = invested[msg.sender] * r_ / 100 * (block.number - atBlock[msg.sender]) / blocks_;\n            \n            atBlock[msg.sender] = block.number;\n            invested[msg.sender] += amount;\n        }\n    }\n\n    // === Getters ===\n\n    // get investment and profit\n    // returns: base, profit, playerID, players\n    function getMyInvestment()\n        public\n        view\n        returns (uint256, uint256, uint256, uint256)\n    {\n        uint256 amount = 0;\n        if (invested[msg.sender] != 0) {\n            amount = invested[msg.sender] * r_ / 100 * (block.number - atBlock[msg.sender]) / blocks_;\n        }\n        return (invested[msg.sender], amount, pIDxAddr_[msg.sender], pID_);\n    }\n\n    // === Private Methods ===\n\n    // Core Logic of Buying\n    function buyCore(address _addr, uint256 _value)\n        private\n    {\n        // New user check\n        bool isNewPlayer = determinePID(_addr);\n\n        // If you have investment\n        if (invested[_addr] != 0) {\n            uint256 amount = invested[_addr] * r_ / 100 * (block.number - atBlock[_addr]) / blocks_;\n            \n            // send calculated amount of ether directly to sender (aka YOU)\n            if (amount <= dbk_){\n                _addr.transfer(amount);\n                dbk_ -= amount;\n            }\n        }\n\n        // record block number and invested amount (msg.value) of this transaction\n        atBlock[_addr] = block.number;\n        invested[_addr] += _value;\n        dbk_ += _value;\n        \n        // if bonus is On and you're a new player, then you'll get bonus\n        if (bonusOn_ && isNewPlayer) {\n            invested[_addr] += bonusAmount_;\n        }\n    }\n\n    // get players ID by address\n    // If doesn't exist, then create one.\n    // returns: is new player or not\n    function determinePID(address _addr)\n        private\n        returns (bool)\n    {\n        if (pIDxAddr_[_addr] == 0)\n        {\n            pID_++;\n            pIDxAddr_[_addr] = pID_;\n            plyr_[pID_] = _addr;\n            \n            return (true);  // New Player\n        } else {\n            return (false);\n        }\n    }\n\n    // === Only owner ===\n\n    address owner;\n    constructor() public {\n        owner = msg.sender;\n        pID_ = 500;\n    }\n\n    // Only owner modifier\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // Set new user bonus on/off\n    function setBonusOn(bool _on)\n        public\n        onlyOwner()\n    {\n        bonusOn_ = _on;\n    }\n\n    // Set new user bonus amount\n    function setBonusAmount(uint256 _amount)\n        public\n        onlyOwner()\n    {\n        bonusAmount_ = _amount;\n    }\n\n    // Set profit ratio\n    function setProfitRatio(uint256 _r)\n        public\n        onlyOwner()\n    {\n        r_ = _r;\n    }\n\n    // Set profit ratio\n    function setBlocks(uint256 _blocks)\n        public\n        onlyOwner()\n    {\n        blocks_ = _blocks;\n    }\n\n    // ======= Deprecated Version of DBank =======\n\n    // *** Deprecated. ***\n    // deposit in dbank\n    mapping (address => uint256) public deposit_; \n\n    // *** Deprecated. ***\n    // deposit in dbk deposit(no reward)\n    function dbkDeposit()\n        public\n        payable\n    {\n        deposit_[msg.sender] += msg.value;\n    }\n\n    // *** Deprecated. ***\n    // withdraw from dbk deposit\n    function dbkWithdraw()\n        public\n    {\n        uint256 _eth = deposit_[msg.sender];\n        if (_eth > 0) {\n            msg.sender.transfer(_eth);\n            deposit_[msg.sender] = 0;\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"setBonusOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"name\":\"setProfitRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dbkWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dbkDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBonusAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"r_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocks_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAmount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusOn_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "60806040526004600381905561170c90556008805460ff19166001179055662386f26fc1000060095534801561003457600080fd5b50600a8054600160a060020a031916331790556101f46005556107678061005c6000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166310f01eba81146100fc578063163dba921461012f57806324fc70ff146101475780633a49b95a14610161578063438b7b991461019c5780634b227176146101b4578063512e61b3146101c95780637e82d0e6146101ea578063c1ba93e1146101ff578063d1c6b0ca14610207578063d8eed35a1461021f578063d8fd7bce14610234578063d96a094a14610249578063de7874f314610254578063e20c493914610288578063fdb5a03e1461029d578063ff46be94146102b2575b6100fa33346102db565b005b34801561010857600080fd5b5061011d600160a060020a0360043516610403565b60408051918252519081900360200190f35b34801561013b57600080fd5b506100fa600435610415565b34801561015357600080fd5b506100fa6004351515610431565b34801561016d57600080fd5b5061017661045b565b604080519485526020850193909352838301919091526060830152519081900360800190f35b3480156101a857600080fd5b506100fa6004356104dd565b3480156101c057600080fd5b5061011d6104f9565b3480156101d557600080fd5b5061011d600160a060020a03600435166104ff565b3480156101f657600080fd5b506100fa610511565b6100fa61056b565b34801561021357600080fd5b506100fa600435610582565b34801561022b57600080fd5b5061011d61059e565b34801561024057600080fd5b5061011d6105a4565b6100fa6004356105aa565b34801561026057600080fd5b5061026c60043561061a565b60408051600160a060020a039092168252519081900360200190f35b34801561029457600080fd5b5061011d610635565b3480156102a957600080fd5b506100fa61063b565b3480156102be57600080fd5b506102c76106af565b604080519115158252519081900360200190f35b6000806102e7846106b8565b600160a060020a0385166000908152600160205260409020549092501561039557600454600160a060020a0385166000908152600260209081526040808320546003546001909352922054606491020443919091030281151561034657fe5b0490506000548111151561039557604051600160a060020a0385169082156108fc029083906000818181858888f1935050505015801561038a573d6000803e3d6000fd5b506000805482900390555b600160a060020a03841660009081526002602090815260408083204390556001909152812080548501905580548401905560085460ff1680156103d55750815b156103fd57600954600160a060020a0385166000908152600160205260409020805490910190555b50505050565b60066020526000908152604090205481565b600a54600160a060020a0316331461042c57600080fd5b600455565b600a54600160a060020a0316331461044857600080fd5b6008805460ff1916911515919091179055565b336000908152600160205260408120548190819081908190156104b15760045433600090815260026020908152604080832054600354600190935292205460649102044391909103028115156104ad57fe5b0490505b336000908152600160209081526040808320546006909252909120546005549197929650945092509050565b600a54600160a060020a031633146104f457600080fd5b600355565b60055481565b600b6020526000908152604090205481565b336000908152600b60205260408120549081111561056857604051339082156108fc029083906000818181858888f19350505050158015610556573d6000803e3d6000fd5b50336000908152600b60205260408120555b50565b336000908152600b60205260409020805434019055565b600a54600160a060020a0316331461059957600080fd5b600955565b60035481565b60045481565b6105b433346102db565b600081815260076020526040902054600160a060020a0316156105ff57600081815260076020908152604080832054600160a060020a03168352600190915290208054600a34040190555b503360009081526001602052604090208054600a3404019055565b600760205260009081526040902054600160a060020a031681565b60095481565b336000908152600160205260408120541561056857600454336000908152600260209081526040808320546003546001909352922054606491020443919091030281151561068557fe5b33600090815260026020908152604080832043905560019091529020805492909104909101905550565b60085460ff1681565b600160a060020a0381166000908152600660205260408120541515610732575060058054600190810191829055600160a060020a03831660008181526006602090815260408083208690559482526007905292909220805473ffffffffffffffffffffffffffffffffffffffff1916909217909155610736565b5060005b9190505600a165627a7a72305820da68d11387e2d568cb6b6df608abd1f025e0d384e5079febac49450d4ad6adda0029"
}