{
  "address": "0x9f041bd63644f3727537a190c132a20966c3770c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BatchTokenSender",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-02\n*/\n\npragma solidity ^0.4.17;\n\n/**\n * Allows one to send EIP-20 tokens to multiple addresses cheaply.\n * Copyright Â© 2017 by ABDK Consulting https://abdk.consulting/\n * Author: Mikhail Vladimirov <mikhail.vladimirov[at]gmail.com>\n */\ncontract BatchTokenSender {\n    /**\n     * If you like this contract, you may send some ether to this address and\n     * it will be used to develop more useful contracts available to everyone.\n     */\n    address public donationAddress;\n\n    /**\n     * Create new Batch Token Sender with given donation address.\n     *\n     * @param _donationAddress donation address\n     */\n    function BatchTokenSender (address _donationAddress) public {\n        donationAddress = _donationAddress;\n    }\n\n    /**\n     * Encode transfer amount and recepient address as a single uin256 value.\n     *\n     * @param _lotsNumber transfer amount as number of lots\n     * @param _to transfer recipient address\n     * @return encoded transfer\n     */\n    function encodeTransfer (uint96 _lotsNumber, address _to)\n    public pure returns (uint256 _encodedTransfer) {\n        return (_lotsNumber << 160) | uint160 (_to);\n    }\n\n    /**\n     * Perform multiple token transfers from message sender's address.\n     *\n     * @param _token EIP-20 token smart contract that manages tokens to be sent\n     * @param _lotSize number of tokens in lot\n     * @param _transfers an array or encoded transfers to perform\n     */\n    function batchSend (\n        Token _token, uint160 _lotSize, uint256 [] _transfers) public {\n        uint256 count = _transfers.length;\n        for (uint256 i = 0; i < count; i++) {\n            uint256 transfer = _transfers [i];\n            uint256 value = (transfer >> 160) * _lotSize;\n            address to = address (\n                transfer & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n            if (!_token.transferFrom (msg.sender, to, value)) revert ();\n        }\n    }\n}\n\n/**\n * EIP-20 standard token interface, as defined\n * <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\">here</a>.\n */\ncontract Token {\n    /**\n     * Get total number of tokens in circulation.\n     *\n     * @return total number of tokens in circulation\n     */\n    function totalSupply ()\n    public constant returns (uint256 supply);\n\n    /**\n     * Get number of tokens currently belonging to given owner.\n     *\n     * @param _owner address to get number of tokens currently belonging to the\n     *        owner of\n     * @return number of tokens currently belonging to the owner of given\n     *         address\n     */\n    function balanceOf (address _owner)\n    public constant returns (uint256 balance);\n\n    /**\n     * Transfer given number of tokens from message sender to given recipient.\n     *\n     * @param _to address to transfer tokens to the owner of\n     * @param _value number of tokens to transfer to the owner of given address\n     * @return true if tokens were transferred successfully, false otherwise\n     */\n    function transfer (address _to, uint256 _value)\n    public returns (bool success);\n\n    /**\n     * Transfer given number of tokens from given owner to given recipient.\n     *\n     * @param _from address to transfer tokens from the owner of\n     * @param _to address to transfer tokens to the owner of\n     * @param _value number of tokens to transfer from given owner to given\n     *        recipient\n     * @return true if tokens were transferred successfully, false otherwise\n     */\n    function transferFrom (address _from, address _to, uint256 _value)\n    public returns (bool success);\n\n    /**\n     * Allow given spender to transfer given number of tokens from message\n     * sender.\n     *\n     * @param _spender address to allow the owner of to transfer tokens from\n     *        message sender\n     * @param _value number of tokens to allow to transfer\n     * @return true if token transfer was successfully approved, false otherwise\n     */\n    function approve (address _spender, uint256 _value)\n    public returns (bool success);\n\n    /**\n     * Tell how many tokens given spender is currently allowed to transfer from\n     * given owner.\n     *\n     * @param _owner address to get number of tokens allowed to be transferred\n     *        from the owner of\n     * @param _spender address to get number of tokens allowed to be transferred\n     *        by the owner of\n     * @return number of tokens given spender is currently allowed to transfer\n     *         from given owner\n     */\n    function allowance (address _owner, address _spender)\n    public constant returns (uint256 remaining);\n\n    /**\n     * Logged when tokens were transferred from one owner to another.\n     *\n     * @param _from address of the owner, tokens were transferred from\n     * @param _to address of the owner, tokens were transferred to\n     * @param _value number of tokens transferred\n     */\n    event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n    /**\n     * Logged when owner approved his tokens to be transferred by some spender.\n     * @param _owner owner who approved his tokens to be transferred\n     * @param _spender spender who were allowed to transfer the tokens belonging\n     *        to the owner\n     * @param _value number of tokens belonging to the owner, approved to be\n     *        transferred by the spender\n     */\n    event Approval (\n        address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_lotSize\",\"type\":\"uint160\"},{\"name\":\"_transfers\",\"type\":\"uint256[]\"}],\"name\":\"batchSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotsNumber\",\"type\":\"uint96\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"encodeTransfer\",\"outputs\":[{\"name\":\"_encodedTransfer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_donationAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "6060604052341561000f57600080fd5b60405160208061044183398101604052808051906020019091905050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506103c68061007b6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632c39da941461005357806378a72e0d146100eb578063ec034bed1461014f57600080fd5b341561005e57600080fd5b6100e9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506101a4565b005b34156100f657600080fd5b61013960048080356bffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061032f565b6040518082815260200191505060405180910390f35b341561015a57600080fd5b610162610375565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600080600085519450600093505b848410156103255785848151811015156101cb57fe5b9060200190602002015192508673ffffffffffffffffffffffffffffffffffffffff1660a0849060020a900402915073ffffffffffffffffffffffffffffffffffffffff831690508773ffffffffffffffffffffffffffffffffffffffff166323b872dd3383856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15156102f257600080fd5b6102c65a03f1151561030357600080fd5b50505060405180519050151561031857600080fd5b83806001019450506101b5565b5050505050505050565b60008160a0846bffffffffffffffffffffffff169060020a026bffffffffffffffffffffffff161773ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058201bcccfd6e8cad86f4f1d2853f20e4edcdb4fc8e5dd648c7aa9f51274182bdba70029000000000000000000000000f12dd9bf0631d33ec71c40787a928a22c797af12",
  "constructorArguments": "000000000000000000000000f12dd9bf0631d33ec71c40787a928a22c797af12"
}