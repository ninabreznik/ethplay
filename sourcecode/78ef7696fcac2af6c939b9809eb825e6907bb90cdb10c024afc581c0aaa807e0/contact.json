{
  "address": "0x65c9f3bc25370cd91fd7a1badc7352cae2d8031b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "COZ",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-15\n*/\n\npragma solidity ^0.4.18;\n\ncontract ERC20 {\n\n    function totalSupply() public constant returns (uint256 totalSupply) {}\n    function balanceOf(address _owner) public constant returns (uint256 balance) {}\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\ncontract StandToken is ERC20 {\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        require(_value > 0);\n        require(balances[msg.sender] + _value >= balances[msg.sender]);\n        \n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        emit Transfer(msg.sender, _to, _value);\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    mapping (address => uint256) balances;\n    uint256 public totalSupply;\n}\n\ncontract COZ is StandToken {\n\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n    address public fundsWallet;\n    uint256 public dec_multiple;\n\n    constructor() public {\n        name = \"COZ\";\n        decimals = 18;\n        symbol = \"COZ\";\n        dec_multiple = 10 ** uint256(decimals);\n\n        totalSupply = 3 * 1000 * 1000 * 1000 * dec_multiple;\n        balances[msg.sender] =  totalSupply;        \n        fundsWallet = msg.sender;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040805180820190915260038082527f434f5a00000000000000000000000000000000000000000000000000000000006020909201918252610055916002916100eb565b506003805460ff19166012178155604080518082019091528181527f434f5a000000000000000000000000000000000000000000000000000000000060209091019081526100a691600491906100eb565b5060035460ff16600a0a600681905563b2d05e000260018190553360008181526020819052604090209190915560058054600160a060020a0319169091179055610186565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012c57805160ff1916838001178555610159565b82800160010185558215610159579182015b8281111561015957825182559160200191906001019061013e565b50610165929150610169565b5090565b61018391905b80821115610165576000815560010161016f565b90565b610471806101956000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304143865811461009257806306fdde03146100b957806318160ddd146101435780632194f3a214610158578063313ce5671461019657806370a08231146101c157806395d89b41146101ef578063a9059cbb14610204575b600080fd5b34801561009e57600080fd5b506100a7610249565b60408051918252519081900360200190f35b3480156100c557600080fd5b506100ce61024f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101085781810151838201526020016100f0565b50505050905090810190601f1680156101355780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014f57600080fd5b506100a76102da565b34801561016457600080fd5b5061016d6102e0565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101a257600080fd5b506101ab6102fc565b6040805160ff9092168252519081900360200190f35b3480156101cd57600080fd5b506100a773ffffffffffffffffffffffffffffffffffffffff60043516610305565b3480156101fb57600080fd5b506100ce61032d565b34801561021057600080fd5b5061023573ffffffffffffffffffffffffffffffffffffffff60043516602435610388565b604080519115158252519081900360200190f35b60065481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102d25780601f106102a7576101008083540402835291602001916102d2565b820191906000526020600020905b8154815290600101906020018083116102b557829003601f168201915b505050505081565b60015481565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60035460ff1681565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102d25780601f106102a7576101008083540402835291602001916102d2565b336000908152602081905260408120548211156103a457600080fd5b600082116103b157600080fd5b3360009081526020819052604090205482810110156103cf57600080fd5b336000818152602081815260408083208054879003905573ffffffffffffffffffffffffffffffffffffffff871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3929150505600a165627a7a7230582071a941ed47f73babfe064acf995ffad423173c7e5d7dc2112dd64c0fb58d6a390029"
}