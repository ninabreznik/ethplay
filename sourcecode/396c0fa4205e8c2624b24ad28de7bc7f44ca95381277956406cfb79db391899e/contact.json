{
  "address": "0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TipToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-25\n*/\n\npragma solidity ^0.4.23;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\ncontract ERC20 {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\ncontract ERC865 is ERC20 {\n\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function revokeSignature(bytes _signature)\n    public\n    returns (bool);\n\n}\ncontract StandardToken is ERC20  {\n\n  using SafeMath for uint256;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  mapping(address => uint256) public balances;\n\n  uint256 _totalSupply;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract ERC865Token is ERC865, StandardToken {\n\n    /* Nonces of transfers performed */\n    mapping(bytes => bool) nonces;\n\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n    event SignatureRevoked(bytes signature, address indexed from);\n\n    /**\n     * @notice Submit a presigned transfer\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Submit a presigned approval\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        allowed[from][_spender] = _value;\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, allowed[from][_spender]);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Decrease the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner\n     * @param _spender address The address which will spend the funds.\n     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        uint oldValue = allowed[from][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[from][_spender] = 0;\n        } else {\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n        }\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, _subtractedValue);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another\n     * @param _signature bytes The signature, issued by the spender.\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(!nonces[_signature]);\n\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n\n        address spender = recover(hashedTx, _signature);\n        require(spender != address(0));\n\n        nonces[_signature] = true;\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n\n        balances[spender] = balances[spender].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        nonces[_signature] = true;\n\n        emit Transfer(_from, _to, _value);\n        emit Transfer(spender, msg.sender, _fee);\n        return true;\n    }\n\n    /**\n     * Revote previously approved signature\n     * @param  _signature bytes The signature to revoke\n     * @return bool  Returns true if revocation was successful\n     */\n    function revokeSignature(bytes _signature) public returns (bool) {\n        require(!nonces[_signature]);\n        nonces[_signature] = true;\n\n        emit SignatureRevoked(_signature, msg.sender);\n        return true;\n    }\n\n\n    /**\n     * @notice Hash (keccak256) of the payload used by transferPreSigned\n     * @param _token address The address of the token.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferPreSignedHashing(\n        address _token,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"48664c16\": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0x48664c16), _token, _to, _value, _fee, _nonce);\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by approvePreSigned\n     * @param _token address The address of the token\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function approvePreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"f7ac9c2e\": approvePreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0xf7ac9c2e), _token, _spender, _value, _fee, _nonce);\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by increaseApprovalPreSigned\n     * @param _token address The address of the token\n     * @param _spender address The address which will spend the funds.\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function increaseApprovalPreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"a45f71ff\": increaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0xa45f71ff), _token, _spender, _addedValue, _fee, _nonce);\n    }\n\n     /**\n      * @notice Hash (keccak256) of the payload used by decreaseApprovalPreSigned\n      * @param _token address The address of the token\n      * @param _spender address The address which will spend the funds.\n      * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n      * @param _nonce uint256 Presigned transaction number.\n      */\n    function decreaseApprovalPreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"59388d78\": decreaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0x59388d78), _token, _spender, _subtractedValue, _fee, _nonce);\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by transferFromPreSigned\n     * @param _token address The address of the token\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferFromPreSignedHashing(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"b7656dc5\": transferFromPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n        return keccak256(bytes4(0xb7656dc5), _token, _from, _to, _value, _fee, _nonce);\n    }\n\n    /**\n     * @notice Recover signer address from a message by using his signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n      bytes32 r;\n      bytes32 s;\n      uint8 v;\n\n      //Check the signature length\n      if (sig.length != 65) {\n        return (address(0));\n      }\n\n      // Divide the signature in r, s and v variables\n      assembly {\n        r := mload(add(sig, 32))\n        s := mload(add(sig, 64))\n        v := byte(0, mload(add(sig, 96)))\n      }\n\n      // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n      if (v < 27) {\n        v += 27;\n      }\n\n      // If the version is correct return the signer address\n      if (v != 27 && v != 28) {\n        return (address(0));\n      } else {\n        return ecrecover(hash, v, r, s);\n      }\n    }\n\n}\n\ncontract TipToken is ERC865Token, Ownable {\n    using SafeMath for uint256;\n\n    uint256 public constant TOTAL_SUPPLY = 10 ** 9;\n\n    string public constant name = \"Tip Token\";\n    string public constant symbol = \"TIP\";\n    uint8 public constant decimals = 18;\n\n    mapping (address => string) aliases;\n    mapping (string => address) addresses;\n\n    /**\n     * Constructor\n     */\n    constructor() public {\n        _totalSupply = TOTAL_SUPPLY * (10**uint256(decimals));\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    /**\n     * Returns the available supple (total supply minus tokens held by owner)\n     */\n    function availableSupply() public view returns (uint256) {\n        return _totalSupply.sub(balances[owner]).sub(balances[address(0)]);\n    }\n\n    /**\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n     * from the token owner's account. The `spender` contract function\n     * `receiveApproval(...)` is then executed\n     */\n    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    /**\n     * Don't accept ETH.\n     */\n    function () public payable {\n        revert();\n    }\n\n    /**\n     * Owner can transfer out any accidentally sent ERC20 tokens\n     */\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n        return ERC20(tokenAddress).transfer(owner, tokens);\n    }\n\n    /**\n     * Sets the alias for the msg.sender's address.\n     * @param alias the alias to attach to an address\n     */\n    function setAlias(string alias) public {\n        aliases[msg.sender] = alias;\n        addresses[alias] = msg.sender;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"alias\",\"type\":\"string\"}],\"name\":\"setAlias\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferFromPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferFromPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"revokeSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ApprovalPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"SignatureRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060048054600160a060020a03191633600160a060020a03908116919091178083556b033b2e3c9fd0803ce800000060028190559082166000908152600160209081526040808320849055945485519384529451949093169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3612626806100a26000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461018f578063095ea7b3146102195780631296830d1461025157806315420b71146102c457806318160ddd1461030657806319045a251461031b57806323b872dd1461039557806327e235e3146103bf578063313ce567146103e057806359388d781461040b578063617b390b1461043b57806366188463146104ae5780636a293d04146104d257806370a082311461052d5780637ecc2b561461054e5780638be52783146105635780638da5cb5b146105d6578063902d55a5146105eb57806395d89b4114610600578063a45f71ff14610615578063a9059cbb14610645578063adb8249e14610669578063b7656dc5146106dc578063bca5051514610712578063cae9ca511461078f578063ccbfc6ed146107f8578063d73dd62314610851578063dc39d06d14610875578063dd62ed3e14610899578063f2fde38b146108c0578063f7ac9c2e146108e1575b600080fd5b34801561019b57600080fd5b506101a4610911565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101de5781810151838201526020016101c6565b50505050905090810190601f16801561020b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022557600080fd5b5061023d600160a060020a0360043516602435610948565b604080519115158252519081900360200190f35b34801561025d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023d94369492936024939284019190819084018382808284375094975050508335600160a060020a031694505050602082013591604081013591506060013561099e565b3480156102d057600080fd5b506102f4600160a060020a0360043581169060243516604435606435608435610c51565b60408051918252519081900360200190f35b34801561031257600080fd5b506102f4610cc3565b34801561032757600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610379958335953695604494919390910191908190840183828082843750949750610cca9650505050505050565b60408051600160a060020a039092168252519081900360200190f35b3480156103a157600080fd5b5061023d600160a060020a0360043581169060243516604435610d9f565b3480156103cb57600080fd5b506102f4600160a060020a0360043516610f0a565b3480156103ec57600080fd5b506103f5610f1c565b6040805160ff9092168252519081900360200190f35b34801561041757600080fd5b506102f4600160a060020a0360043581169060243516604435606435608435610f21565b34801561044757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023d94369492936024939284019190819084018382808284375094975050508335600160a060020a0316945050506020820135916040810135915060600135610f93565b3480156104ba57600080fd5b5061023d600160a060020a0360043516602435611216565b3480156104de57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261052b9436949293602493928401919081908401838280828437509497506112f59650505050505050565b005b34801561053957600080fd5b506102f4600160a060020a03600435166113ae565b34801561055a57600080fd5b506102f46113c9565b34801561056f57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023d94369492936024939284019190819084018382808284375094975050508335600160a060020a0316945050506020820135916040810135915060600135611426565b3480156105e257600080fd5b50610379611730565b3480156105f757600080fd5b506102f461173f565b34801561060c57600080fd5b506101a4611747565b34801561062157600080fd5b506102f4600160a060020a036004358116906024351660443560643560843561177e565b34801561065157600080fd5b5061023d600160a060020a03600435166024356117f0565b34801561067557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023d94369492936024939284019190819084018382808284375094975050508335600160a060020a03169450505060208201359160408101359150606001356118d9565b3480156106e857600080fd5b506102f4600160a060020a036004358116906024358116906044351660643560843560a435611bb3565b34801561071e57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023d94369492936024939284019190819084018382808284375094975050600160a060020a03853581169650602086013516946040810135945060608101359350608001359150611c359050565b34801561079b57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261023d948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750611f829650505050505050565b34801561080457600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023d9436949293602493928401919081908401838280828437509497506120f19650505050505050565b34801561085d57600080fd5b5061023d600160a060020a0360043516602435612279565b34801561088157600080fd5b5061023d600160a060020a0360043516602435612305565b3480156108a557600080fd5b506102f4600160a060020a03600435811690602435166123c6565b3480156108cc57600080fd5b5061052b600160a060020a03600435166123ef565b3480156108ed57600080fd5b506102f4600160a060020a0360043581169060243516604435606435608435612488565b60408051808201909152600981527f54697020546f6b656e0000000000000000000000000000000000000000000000602082015281565b600160a060020a0333811660008181526020818152604080832094871680845294825280832086905580518681529051929493926000805160206125db833981519152929181900390910190a350600192915050565b60008080600160a060020a03871615156109b757600080fd5b6003886040518082805190602001908083835b602083106109e95780518252601f1990920191602091820191016109ca565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150610a26905057600080fd5b610a333088888888610c51565b9150610a3f8289610cca565b9050600160a060020a0381161515610a5657600080fd5b60016003896040518082805190602001908083835b60208310610a8a5780518252601f199092019160209182019101610a6b565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420805460ff1916951515959095179094555050600160a060020a03831660009081526001909252902054610afc908690610af090896124fa565b9063ffffffff6124fa16565b600160a060020a038083166000908152600160205260408082209390935590891681522054610b31908763ffffffff61250c16565b600160a060020a03808916600090815260016020526040808220939093553390911681522054610b67908663ffffffff61250c16565b600160a060020a0333811660009081526001602090815260409182902093909355805189815290518a831693928516926000805160206125bb833981519152928290030190a333600160a060020a031681600160a060020a03166000805160206125bb833981519152876040518082815260200191505060405180910390a333600160a060020a031687600160a060020a031682600160a060020a03167fec5a73fd1f178be20c1bca1b406cbf4b5c20d833b66e582fc122fb4baa0fc2a48989604051808381526020018281526020019250505060405180910390a4506001979650505050505050565b604080517f48664c160000000000000000000000000000000000000000000000000000000081526c01000000000000000000000000600160a060020a0397881681026004830152959096169094026018860152602c850192909252604c840152606c8301525190819003608c01902090565b6002545b90565b60008060008084516041141515610ce45760009350610d96565b50505060208201516040830151606084015160001a601b60ff82161015610d0957601b015b8060ff16601b14158015610d2157508060ff16601c14155b15610d2f5760009350610d96565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015610d89573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b6000600160a060020a0383161515610db657600080fd5b600160a060020a038416600090815260016020526040902054821115610ddb57600080fd5b600160a060020a038085166000908152602081815260408083203390941683529290522054821115610e0c57600080fd5b600160a060020a038416600090815260016020526040902054610e35908363ffffffff6124fa16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610e6a908363ffffffff61250c16565b600160a060020a038085166000908152600160209081526040808320949094558783168252818152838220339093168252919091522054610eb1908363ffffffff6124fa16565b600160a060020a03808616600081815260208181526040808320338616845282529182902094909455805186815290519287169391926000805160206125bb833981519152929181900390910190a35060019392505050565b60016020526000908152604090205481565b601281565b604080517f59388d780000000000000000000000000000000000000000000000000000000081526c01000000000000000000000000600160a060020a0397881681026004830152959096169094026018860152602c850192909252604c840152606c8301525190819003608c01902090565b60008080600160a060020a0387161515610fac57600080fd5b6003886040518082805190602001908083835b60208310610fde5780518252601f199092019160209182019101610fbf565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1615915061101b905057600080fd5b6110283088888888612488565b91506110348289610cca565b9050600160a060020a038116151561104b57600080fd5b60016003896040518082805190602001908083835b6020831061107f5780518252601f199092019160209182019101611060565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420805460ff1916951515959095179094555050600160a060020a038381166000818152808552838120928c1681529184528282208a9055815260019092529020546110f690866124fa565b600160a060020a0380831660009081526001602052604080822093909355339091168152205461112c908663ffffffff61250c16565b600160a060020a0333811660009081526001602090815260409182902093909355805189815290518a831693928516926000805160206125db833981519152928290030190a333600160a060020a031681600160a060020a03166000805160206125bb833981519152876040518082815260200191505060405180910390a333600160a060020a031687600160a060020a031682600160a060020a03167f43a220267705e74ee2ceafd46afc841850db6f85a662189a7def697bbdd90ffb8989604051808381526020018281526020019250505060405180910390a4506001979650505050505050565b600160a060020a033381166000908152602081815260408083209386168352929052908120548083111561126f57600160a060020a033381166000908152602081815260408083209388168352929052908120556112a4565b61127f818463ffffffff6124fa16565b600160a060020a03338116600090815260208181526040808320938916835292905220555b600160a060020a033381166000818152602081815260408083209489168084529482529182902054825190815291516000805160206125db8339815191529281900390910190a35060019392505050565b600160a060020a0333166000908152600560209081526040909120825161131e92840190612522565b50336006826040518082805190602001908083835b602083106113525780518252601f199092019160209182019101611333565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039490941693909317909255505050565b600160a060020a031660009081526001602052604090205490565b60016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4954600454600160a060020a0316600090815260408120546002549192611421929091610af0919063ffffffff6124fa16565b905090565b6000808080600160a060020a038816151561144057600080fd5b6003896040518082805190602001908083835b602083106114725780518252601f199092019160209182019101611453565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161591506114af905057600080fd5b6114bc3089898989610f21565b92506114c8838a610cca565b9150600160a060020a03821615156114df57600080fd5b600160038a6040518082805190602001908083835b602083106115135780518252601f1990920191602091820191016114f4565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420805460ff1916951515959095179094555050600160a060020a038481166000908152808452828120918c16815292529020549050808711156115a757600160a060020a03808316600090815260208181526040808320938c168352929052908120556115dc565b6115b7818863ffffffff6124fa16565b600160a060020a03808416600090815260208181526040808320938d16835292905220555b600160a060020a038216600090815260016020526040902054611605908763ffffffff6124fa16565b600160a060020a0380841660009081526001602052604080822093909355339091168152205461163b908763ffffffff61250c16565b600160a060020a033381166000908152600160209081526040918290209390935580518a815290518b831693928616926000805160206125db833981519152928290030190a333600160a060020a031682600160a060020a03166000805160206125bb833981519152886040518082815260200191505060405180910390a3600160a060020a038281166000818152602081815260408083208d8616808552908352928190205481519081529182018b9052805133909516949293927f43a220267705e74ee2ceafd46afc841850db6f85a662189a7def697bbdd90ffb9281900390910190a450600198975050505050505050565b600454600160a060020a031681565b633b9aca0081565b60408051808201909152600381527f5449500000000000000000000000000000000000000000000000000000000000602082015281565b604080517fa45f71ff0000000000000000000000000000000000000000000000000000000081526c01000000000000000000000000600160a060020a0397881681026004830152959096169094026018860152602c850192909252604c840152606c8301525190819003608c01902090565b6000600160a060020a038316151561180757600080fd5b600160a060020a03331660009081526001602052604090205482111561182c57600080fd5b600160a060020a033316600090815260016020526040902054611855908363ffffffff6124fa16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461188a908363ffffffff61250c16565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316926000805160206125bb83398151915292918290030190a350600192915050565b60008080600160a060020a03871615156118f257600080fd5b6003886040518082805190602001908083835b602083106119245780518252601f199092019160209182019101611905565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150611961905057600080fd5b61196e308888888861177e565b915061197a8289610cca565b9050600160a060020a038116151561199157600080fd5b60016003896040518082805190602001908083835b602083106119c55780518252601f1990920191602091820191016119a6565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420805460ff1916951515959095179094555050600160a060020a038381166000908152808452828120918b1681529252902054611a2e908761250c565b600160a060020a03808316600081815260208181526040808320948d168352938152838220949094559081526001909252902054611a72908663ffffffff6124fa16565b600160a060020a03808316600090815260016020526040808220939093553390911681522054611aa8908663ffffffff61250c16565b600160a060020a03338116600090815260016020908152604080832094909455848316808352828252848320938c16808452938252918490205484519081529351929391926000805160206125db8339815191529281900390910190a333600160a060020a031681600160a060020a03166000805160206125bb833981519152876040518082815260200191505060405180910390a3600160a060020a038181166000818152602081815260408083208c8616808552908352928190205481519081529182018a9052805133909516949293927f43a220267705e74ee2ceafd46afc841850db6f85a662189a7def697bbdd90ffb9281900390910190a4506001979650505050505050565b604080517fb7656dc50000000000000000000000000000000000000000000000000000000081526c01000000000000000000000000600160a060020a03808a168202600484015280891682026018840152871602602c820152808201859052606081018490526080810183905290519081900360a00190209695505050505050565b60008080600160a060020a0387161515611c4e57600080fd5b6003896040518082805190602001908083835b60208310611c805780518252601f199092019160209182019101611c61565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150611cbd905057600080fd5b611ccb308989898989611bb3565b9150611cd7828a610cca565b9050600160a060020a0381161515611cee57600080fd5b600160038a6040518082805190602001908083835b60208310611d225780518252601f199092019160209182019101611d03565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420805460ff1916951515959095179094555050600160a060020a038a1660009081526001909252902054611d8290876124fa565b600160a060020a03808a166000908152600160205260408082209390935590891681522054611db7908763ffffffff61250c16565b600160a060020a038089166000908152600160209081526040808320949094558b831682528181528382209285168252919091522054611dfd908763ffffffff6124fa16565b600160a060020a03808a166000908152602081815260408083209386168352928152828220939093556001909252902054611e3e908663ffffffff6124fa16565b600160a060020a03808316600090815260016020526040808220939093553390911681522054611e74908663ffffffff61250c16565b6001600033600160a060020a0316600160a060020a0316815260200190815260200160002081905550600160038a6040518082805190602001908083835b60208310611ed15780518252601f199092019160209182019101611eb2565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff1916961515969096179095558a84529351600160a060020a038c811695908e16946000805160206125bb8339815191529450829003019150a333600160a060020a031681600160a060020a03166000805160206125bb833981519152876040518082815260200191505060405180910390a350600198975050505050505050565b600160a060020a0333811660008181526020818152604080832094881680845294825280832087905580518781529051929493926000805160206125db833981519152929181900390910190a383600160a060020a0316638f4ffcb1338530866040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612080578181015183820152602001612068565b50505050905090810190601f1680156120ad5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156120cf57600080fd5b505af11580156120e3573d6000803e3d6000fd5b506001979650505050505050565b60006003826040518082805190602001908083835b602083106121255780518252601f199092019160209182019101612106565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150612162905057600080fd5b60016003836040518082805190602001908083835b602083106121965780518252601f199092019160209182019101612177565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff191696151596909617909555808452865184820152865133600160a060020a0316957f404563e6b6fe7eb707082e4d031a4f4d1fbff52ca9947e205108c4f3eab2908a9589955093508392908301919085019080838360005b8381101561223757818101518382015260200161221f565b50505050905090810190601f1680156122645780820380516001836020036101000a031916815260200191505b509250505060405180910390a2506001919050565b600160a060020a033381166000908152602081815260408083209386168352929052908120546122af908363ffffffff61250c16565b600160a060020a033381166000818152602081815260408083209489168084529482529182902085905581519485529051929391926000805160206125db8339815191529281900390910190a350600192915050565b60045460009033600160a060020a0390811691161461232357600080fd5b60048054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283169381019390935260248301859052519085169163a9059cbb9160448083019260209291908290030181600087803b15801561239357600080fd5b505af11580156123a7573d6000803e3d6000fd5b505050506040513d60208110156123bd57600080fd5b50519392505050565b600160a060020a0391821660009081526020818152604080832093909416825291909152205490565b60045433600160a060020a0390811691161461240a57600080fd5b600160a060020a038116151561241f57600080fd5b600454604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080517ff7ac9c2e0000000000000000000000000000000000000000000000000000000081526c01000000000000000000000000600160a060020a0397881681026004830152959096169094026018860152602c850192909252604c840152606c8301525190819003608c01902090565b60008282111561250657fe5b50900390565b60008282018381101561251b57fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061256357805160ff1916838001178555612590565b82800160010185558215612590579182015b82811115612590578251825591602001919060010190612575565b5061259c9291506125a0565b5090565b610cc791905b8082111561259c57600081556001016125a65600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058207d80ad69c01c3132380d4c947ca0bdc9573b640adb222e4fad2467527b51d4830029"
}