{
  "address": "0xac9e0035dc040671e5646dc9b8896d7d78c48f85",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-31\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ninterface TokenUpgraderInterface{\n    function upgradeFor(address _for, uint256 _value) public returns (bool success);\n    function upgradeFrom(address _by, address _for, uint256 _value) public returns (bool success);\n}\n  \ncontract Token {\n    using SafeMath for uint256;\n\n    address public owner = msg.sender;\n\n    string public name = \"Hint\";\n    string public symbol = \"HINT\";\n\n    bool public upgradable = false;\n    bool public upgraderSet = false;\n    TokenUpgraderInterface public upgrader;\n\n    bool public locked = false;\n    uint8 public decimals = 18;\n    uint256 public decimalMultiplier = 10**(uint256(decimals));\n\n    modifier unlocked() {\n        require(!locked);\n        _;\n    }\n\n    // Ownership\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner returns (bool success) {\n        require(newOwner != address(0));      \n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        return true;\n    }\n\n\n    // ERC20 related functions\n\n    uint256 public totalSupply = 0;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n\n    function transfer(address _to, uint256 _value) unlocked public returns (bool) {\n        require(_to != address(0));\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n\n    function balanceOf(address _owner) view public returns (uint256 bal) {\n        return balances[_owner];\n    }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n\n    function transferFrom(address _from, address _to, uint256 _value) unlocked public returns (bool) {\n        require(_to != address(0));\n        uint256 _allowance = allowed[_from][msg.sender];\n        require(_allowance >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n\n    function approve(address _spender, uint256 _value) unlocked public returns (bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval (address _spender, uint _addedValue) unlocked public\n        returns (bool success) {\n            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n            Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n            return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) unlocked public\n        returns (bool success) {\n            uint oldValue = allowed[msg.sender][_spender];\n            if (_subtractedValue > oldValue) {\n                allowed[msg.sender][_spender] = 0;\n            } else {\n                allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n            }\n            Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n            return true;\n    }\n\n  /**\n    * Constructor mints tokens to corresponding addresses\n   */\n\n    function Token () public {\n        \n        address publicSaleReserveAddress = 0x11f104b59d90A00F4bDFF0Bed317c8573AA0a968;\n        mint(publicSaleReserveAddress, 100000000);\n\n          address hintPlatformReserveAddress = 0xE46C2C7e4A53bdC3D91466b6FB45Ac9Bc996a3Dc;\n        mint(hintPlatformReserveAddress, 21000000000);\n\n        address advisorsReserveAddress = 0xdc9aea710D5F8169AFEDA4bf6F1d6D64548951AF;\n        mint(advisorsReserveAddress, 50000000);\n        \n        address frozenHintEcosystemReserveAddress = 0xfeC2C0d053E9D6b1A7098F17b45b48102C8890e5;\n        mint(frozenHintEcosystemReserveAddress, 77600000000);\n\n        address teamReserveAddress = 0xeE162d1CCBb1c14169f26E5b35e3ca44C8bDa4a0;\n        mint(teamReserveAddress, 50000000);\n        \n        address preICOReserveAddress = 0xD2c395e12174630993572bf4Cbb5b9a93384cdb2;\n        mint(preICOReserveAddress, 100000000);\n        \n        address foundationReserveAddress = 0x7A5d4e184f10b63C27ad772D17bd3b7393933142;\n        mint(foundationReserveAddress, 100000000);\n        \n        address hintPrivateOfferingReserve = 0x3f851952ACbEd98B39B913a5c8a2E55b2E28c8F4;\n        mint(hintPrivateOfferingReserve, 1000000000);\n\n        assert(totalSupply == 100000000000*decimalMultiplier);\n    }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _for The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n\n    function mint(address _for, uint256 _amount) internal returns (bool success) {\n        _amount = _amount*decimalMultiplier;\n        balances[_for] = balances[_for].add(_amount);\n        totalSupply = totalSupply.add(_amount);\n        Transfer(0, _for, _amount);\n        return true;\n    }\n\n  /**\n   * @dev Function to lock token transfers\n   * @param _newLockState New lock state\n   * @return A boolean that indicates if the operation was successful.\n   */\n\n    function setLock(bool _newLockState) onlyOwner public returns (bool success) {\n        require(_newLockState != locked);\n        locked = _newLockState;\n        return true;\n    }\n\n  /**\n   * @dev Function to allow token upgrades\n   * @param _newState New upgrading allowance state\n   * @return A boolean that indicates if the operation was successful.\n   */\n\n    function allowUpgrading(bool _newState) onlyOwner public returns (bool success) {\n        upgradable = _newState;\n        return true;\n    }\n\n    function setUpgrader(address _upgraderAddress) onlyOwner public returns (bool success) {\n        require(!upgraderSet);\n        require(_upgraderAddress != address(0));\n        upgraderSet = true;\n        upgrader = TokenUpgraderInterface(_upgraderAddress);\n        return true;\n    }\n\n    function upgrade() public returns (bool success) {\n        require(upgradable);\n        require(upgraderSet);\n        require(upgrader != TokenUpgraderInterface(0));\n        uint256 value = balances[msg.sender];\n        assert(value > 0);\n        delete balances[msg.sender];\n        totalSupply = totalSupply.sub(value);\n        assert(upgrader.upgradeFor(msg.sender, value));\n        return true;\n    }\n\n    function upgradeFor(address _for, uint256 _value) public returns (bool success) {\n        require(upgradable);\n        require(upgraderSet);\n        require(upgrader != TokenUpgraderInterface(0));\n        uint256 _allowance = allowed[_for][msg.sender];\n        require(_allowance >= _value);\n        balances[_for] = balances[_for].sub(_value);\n        allowed[_for][msg.sender] = _allowance.sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        assert(upgrader.upgradeFrom(msg.sender, _for, _value));\n        return true;\n    }\n\n    function () payable external {\n        if (upgradable) {\n            assert(upgrade());\n            return;\n        }\n        revert();\n    }\n\n}",
  "bytecode": ""
}