{
  "address": "0xb54da0854f41396886eb728e0f8082382281f84a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SingleTokenCoin",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-19\n*/\n\npragma solidity ^0.4.15;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function mod(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a % b;\n    //uint256 z = a / b;\n    assert(a == (a / b) * b + c); // There is no case in which this doesn't hold\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping(address => uint256) public balances;\n    mapping(address => bool) public holders;\n    address[] public token_holders_array;\n    \n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        if (!holders[_to]) {\n            holders[_to] = true;\n            token_holders_array.push(_to);\n        }\n\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n\n        /*if (balances[msg.sender] == 0) {\n            uint id = get_index(msg.sender);\n            delete token_holders_array[id];\n            token_holders_array[id] = token_holders_array[token_holders_array.length - 1];\n            delete token_holders_array[token_holders_array.length-1];\n            token_holders_array.length--;\n        }*/\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function get_index (address _whom) constant internal returns (uint256) {\n        for (uint256 i = 0; i<token_holders_array.length; i++) {\n            if (token_holders_array[i] == _whom) {\n                return i;\n            }\n            //require (token_holders_array[i] == _whom);\n        }\n    }\n    \n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function count_token_holders () public constant returns (uint256) {\n        return token_holders_array.length;\n    }\n    \n    function tokenHolder(uint256 _index) public constant returns (address) {\n        return token_holders_array[_index];\n    }\n      \n}\n\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    if (!holders[_to]) {\n        holders[_to] = true;\n        token_holders_array.push(_to);\n    }\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  \n  function approve(address _spender, uint256 _value) public returns (bool) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval (address _spender, uint256 _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  function decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool success) {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n \n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  bool public mintingFinished = false;\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    if (!holders[_to]) {\n        holders[_to] = true;\n        token_holders_array.push(_to);\n    } \n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract SingleTokenCoin is MintableToken {\n  string public constant name = \"Symmetry Fund Token\";\n  string public constant symbol = \"SYMM\";\n  uint256 public constant decimals = 6;\n }",
  "bytecode": "60606040526005805460a060020a60ff02191690555b60058054600160a060020a03191633600160a060020a03161790555b5b61108c806100416000396000f3006060604052361561011a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461011f57806306fdde0314610146578063095ea7b3146101d157806318160ddd1461020757806318a5bbdc1461022c57806323b7fc861461025f57806323b872dd1461028457806327e235e3146102c0578063313ce567146102f157806340c10f1914610316578063661884631461034c57806370a08231146103825780637d64bcb4146103b3578063862a4bf2146103da5780638da5cb5b1461040c57806395d89b411461043b578063a9059cbb146104c6578063d73dd623146104fc578063dd62ed3e14610532578063e912175814610569578063f2fde38b1461059b575b600080fd5b341561012a57600080fd5b6101326105bc565b604051901515815260200160405180910390f35b341561015157600080fd5b6101596105dd565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101965780820151818401525b60200161017d565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dc57600080fd5b610132600160a060020a0360043516602435610614565b604051901515815260200160405180910390f35b341561021257600080fd5b61021a6106bb565b60405190815260200160405180910390f35b341561023757600080fd5b610132600160a060020a03600435166106c1565b604051901515815260200160405180910390f35b341561026a57600080fd5b61021a6106d6565b60405190815260200160405180910390f35b341561028f57600080fd5b610132600160a060020a03600435811690602435166044356106dd565b604051901515815260200160405180910390f35b34156102cb57600080fd5b61021a600160a060020a03600435166108e3565b60405190815260200160405180910390f35b34156102fc57600080fd5b61021a6108f5565b60405190815260200160405180910390f35b341561032157600080fd5b610132600160a060020a03600435166024356108fa565b604051901515815260200160405180910390f35b341561035757600080fd5b610132600160a060020a0360043516602435610aa3565b604051901515815260200160405180910390f35b341561038d57600080fd5b61021a600160a060020a0360043516610b9f565b60405190815260200160405180910390f35b34156103be57600080fd5b610132610bbe565b604051901515815260200160405180910390f35b34156103e557600080fd5b6103f0600435610c45565b604051600160a060020a03909116815260200160405180910390f35b341561041757600080fd5b6103f0610c7e565b604051600160a060020a03909116815260200160405180910390f35b341561044657600080fd5b610159610c8d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101965780820151818401525b60200161017d565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104d157600080fd5b610132600160a060020a0360043516602435610cc4565b604051901515815260200160405180910390f35b341561050757600080fd5b610132600160a060020a0360043516602435610e47565b604051901515815260200160405180910390f35b341561053d57600080fd5b61021a600160a060020a0360043581169060243516610eec565b60405190815260200160405180910390f35b341561057457600080fd5b6103f0600435610f19565b604051600160a060020a03909116815260200160405180910390f35b34156105a657600080fd5b6105ba600160a060020a0360043516610f4b565b005b60055474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052601381527f53796d6d657472792046756e6420546f6b656e00000000000000000000000000602082015281565b60008115806106465750600160a060020a03338116600090815260046020908152604080832093871683529290522054155b151561065157600080fd5b600160a060020a03338116600081815260046020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60026020526000908152604090205460ff1681565b6003545b90565b6000600160a060020a03831615156106f457600080fd5b600160a060020a03841660009081526001602052604090205482111561071957600080fd5b600160a060020a038085166000908152600460209081526040808320339094168352929052205482111561074c57600080fd5b600160a060020a038416600090815260016020526040902054610775908363ffffffff610fe416565b600160a060020a0380861660009081526001602052604080822093909355908516815220546107aa908363ffffffff610ffb16565b600160a060020a03841660009081526001602090815260408083209390935560029052205460ff16151561083e57600160a060020a0383166000908152600260205260409020805460ff1916600190811790915560038054909181016108108382611015565b916000526020600020900160005b8154600160a060020a038088166101009390930a92830292021916179055505b600160a060020a0380851660009081526004602090815260408083203390941683529290522054610875908363ffffffff610fe416565b600160a060020a03808616600081815260046020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60016020526000908152604090205481565b600681565b60055460009033600160a060020a0390811691161461091857600080fd5b60055474010000000000000000000000000000000000000000900460ff161561094057600080fd5b600054610953908363ffffffff610ffb16565b6000908155600160a060020a03841681526002602052604090205460ff1615156109dd57600160a060020a0383166000908152600260205260409020805460ff1916600190811790915560038054909181016109af8382611015565b916000526020600020900160005b8154600160a060020a038088166101009390930a92830292021916179055505b600160a060020a038316600090815260016020526040902054610a06908363ffffffff610ffb16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b5b92915050565b600160a060020a03338116600090815260046020908152604080832093861683529290529081205480831115610b0057600160a060020a033381166000908152600460209081526040808320938816835292905290812055610b37565b610b10818463ffffffff610fe416565b600160a060020a033381166000908152600460209081526040808320938916835292905220555b600160a060020a0333811660008181526004602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a0381166000908152600160205260409020545b919050565b60055460009033600160a060020a03908116911614610bdc57600080fd5b6005805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b6000600382815481101515610c5657fe5b906000526020600020900160005b9054906101000a9004600160a060020a031690505b919050565b600554600160a060020a031681565b60408051908101604052600481527f53594d4d00000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515610cdb57600080fd5b600160a060020a033316600090815260016020526040902054821115610d0057600080fd5b600160a060020a03831660009081526002602052604090205460ff161515610d8857600160a060020a0383166000908152600260205260409020805460ff191660019081179091556003805490918101610d5a8382611015565b916000526020600020900160005b8154600160a060020a038088166101009390930a92830292021916179055505b600160a060020a038316600090815260016020526040902054610db1908363ffffffff610ffb16565b600160a060020a03808516600090815260016020526040808220939093553390911681522054610de7908363ffffffff610fe416565b600160a060020a033381166000818152600160205260409081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a033381166000908152600460209081526040808320938616835292905290812054610e7f908363ffffffff610ffb16565b600160a060020a0333811660008181526004602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600460209081526040808320938516835292905220545b92915050565b6003805482908110610f2757fe5b906000526020600020900160005b915054906101000a9004600160a060020a031681565b60055433600160a060020a03908116911614610f6657600080fd5b600160a060020a0381161515610f7b57600080fd5b600554600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600082821115610ff057fe5b508082035b92915050565b60008282018381101561100a57fe5b8091505b5092915050565b8154818355818115116110395760008381526020902061103991810190830161103f565b5b505050565b6106da91905b808211156110595760008155600101611045565b5090565b905600a165627a7a723058205a8b2bbac1acc8d110a363c3f4e9c31253ea1ed559e73fb0072bcccc249adbbd0029"
}