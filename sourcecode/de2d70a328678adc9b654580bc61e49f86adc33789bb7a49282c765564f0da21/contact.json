{
  "address": "0xd22077bebb2574e47c3d76656beea3fa80351ea5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AIHToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-12\n*/\n\npragma solidity ^0.4.16;\n\n/** Owner permissions */\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n/// ERC20 standardï¼ŒDefine the minimum unit of money to 18 decimal places,\n/// transfer out, destroy coins, others use your account spending pocket money.\ncontract TokenERC20 {\n    uint256 public totalSupply;\n    // This creates an array with all balances.\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients.\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt.\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Internal transfer, only can be called by this contract.\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead.\n        require(_to != 0x0);\n        // Check if the sender has enough.\n        require(balanceOf[_from] >= _value);\n        // Check for overflows.\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future.\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender.\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient.\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail.\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account.\n     *\n     * @param _to The address of the recipient.\n     * @param _value the amount to send.\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address.\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`.\n     *\n     * @param _from The address of the sender.\n     * @param _to The address of the recipient.\n     * @param _value the amount to send.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        // Check allowance\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address.\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf.\n     *\n     * @param _spender The address authorized to spend.\n     * @param _value the max amount they can spend.\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\n\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify.\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it.\n     *\n     * @param _spender The address authorized to spend.\n     * @param _value the max amount they can spend.\n     * @param _extraData some extra information to send to the approved contract.\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly.\n     *\n     * @param _value the amount of money to burn.\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        // Check if the sender has enough\n        require(balanceOf[msg.sender] >= _value);\n        // Subtract from the sender\n        balanceOf[msg.sender] -= _value;\n        // Updates totalSupply\n        totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account.\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender.\n     * @param _value the amount of money to burn.\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        // Check if the targeted balance is enough.\n        require(balanceOf[_from] >= _value);\n        // Check allowance\n        require(_value <= allowance[_from][msg.sender]);\n        // Subtract from the targeted balance.\n        balanceOf[_from] -= _value;\n        // Subtract from the sender's allowance.\n        allowance[_from][msg.sender] -= _value;\n        // Update totalSupply\n        totalSupply -= _value;\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*         AIH TOKEN STARTS HERE          */\n/******************************************/\n\n/// @title AIH Protocol Token.\ncontract AIHToken is owned, TokenERC20 {\n\n    /// The full name of the AIH token.\n    string public constant name = \"Artificial Intelligence Health\";\n    /// Symbol of the AIH token.\n    string public constant symbol = \"AIH\";\n    /// 18 decimals is the strongly suggested default, avoid changing it.\n    uint8 public constant decimals = 18;\n\n\n    uint256 public totalSupply = 5000000000 * 10 ** uint256(decimals);\n\n    /**\n     *  Locked tokens system\n     */\n    /// Stores the address of the locked tokens.\n    address public lockJackpots;\n\n    /// Remaining rewards in the locked tokens.\n    uint256 public remainingReward;\n\n    /// The start time to lock tokens. 2018/09/15 0:0:0\n    uint256 public lockStartTime = 1536940800;\n    /// The last time to lock tokens. 2018/10/30 0:0:0\n    uint256 public lockDeadline = 1540828800;\n    /// Release tokens lock time,Timestamp format 1557849600 ==  2019/5/15 0:0:0\n    uint256 public unLockTime = 1557849600;\n\n    /// Reward factor for locked tokens \n    uint public constant NUM_OF_PHASE = 3;\n    uint[3] public lockRewardsPercentages = [\n        300,   //30%\n        200,    //20%\n        100    //10%\n    ];\n\n    /// Locked account details\n    mapping (address => uint256) public lockBalanceOf;\n\n    /**\n     *  Freeze the account system\n     */\n    /* This generates a public event on the blockchain that will notify clients. */\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract. */\n    function AIHToken() public {\n        /// Give the creator all initial tokens.\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    /**\n     * transfer token for a specified address.\n     *\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public {\n        /// Locked account can not complete the transfer.\n        require(!(lockJackpots != 0x0 && msg.sender == lockJackpots));\n\n        /// Transponding the AIH token to a locked tokens account will be deemed a lock-up activity.\n        if (lockJackpots != 0x0 && _to == lockJackpots) {\n            _lockToken(_value);\n        }\n        else {\n            /// To unlock the time, automatically unlock tokens.\n            if (unLockTime <= now && lockBalanceOf[msg.sender] > 0) {\n                lockBalanceOf[msg.sender] = 0;\n            }\n\n            _transfer(msg.sender, _to, _value);\n        }\n    }\n\n    /**\n     * transfer token for a specified address.Internal transfer, only can be called by this contract.\n     *\n     * @param _from The address to transfer from.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead.\n        require(_to != 0x0);\n        //Check for overflows.\n        require(lockBalanceOf[_from] + _value > lockBalanceOf[_from]);\n        // Check if the sender has enough.\n        require(balanceOf[_from] >= lockBalanceOf[_from] + _value);\n        // Check for overflows.\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Check if sender is frozen.\n        require(!frozenAccount[_from]);\n        // Check if recipient is frozen.\n        require(!frozenAccount[_to]);\n        // Subtract from the sender.\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient.\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n     * Increase the token reward.\n     *\n     * @param _value Increase the amount of tokens awarded.\n     */\n    function increaseLockReward(uint256 _value) public{\n        require(_value > 0);\n        _transfer(msg.sender, lockJackpots, _value * 10 ** uint256(decimals));\n        _calcRemainReward();\n    }\n\n    /**\n     * Locked tokens, in the locked token reward calculation and distribution.\n     *\n     * @param _lockValue Lock token reward.\n     */\n    function _lockToken(uint256 _lockValue) internal {\n        /// Lock the tokens necessary safety checks.\n        require(lockJackpots != 0x0);\n        require(now >= lockStartTime);\n        require(now <= lockDeadline);\n        require(lockBalanceOf[msg.sender] + _lockValue > lockBalanceOf[msg.sender]);\n        /// Check account tokens must be sufficient.\n        require(balanceOf[msg.sender] >= lockBalanceOf[msg.sender] + _lockValue);\n\n        uint256 _reward =  _lockValue * _calcLockRewardPercentage() / 1000;\n        /// Distribute bonus tokens.\n        _transfer(lockJackpots, msg.sender, _reward);\n\n        /// Save locked accounts and rewards.\n        lockBalanceOf[msg.sender] += _lockValue + _reward;\n        _calcRemainReward();\n    }\n\n    uint256 lockRewardFactor;\n    /* Calculate locked token reward percentageï¼ŒActual value: rewardFactor/1000 */\n    function _calcLockRewardPercentage() internal returns (uint factor){\n\n        uint phase = NUM_OF_PHASE * (now - lockStartTime)/( lockDeadline - lockStartTime);\n        if (phase  >= NUM_OF_PHASE) {\n            phase = NUM_OF_PHASE - 1;\n        }\n    \n        lockRewardFactor = lockRewardsPercentages[phase];\n        return lockRewardFactor;\n    }\n\n    /** The activity is over and the token in the prize pool is sent to the manager for fund development. */\n    function rewardActivityEnd() onlyOwner public {\n        /// The activity is over.\n        require(unLockTime < now);\n        /// Send the token from the prize pool to the manager.\n        _transfer(lockJackpots, owner, balanceOf[lockJackpots]);\n        _calcRemainReward();\n    }\n\n    function() payable public {}\n\n    /**\n     * Set lock token address,only once.\n     *\n     * @param newLockJackpots The lock token address.\n     */\n    function setLockJackpots(address newLockJackpots) onlyOwner public {\n        require(lockJackpots == 0x0 && newLockJackpots != 0x0 && newLockJackpots != owner);\n        lockJackpots = newLockJackpots;\n        _calcRemainReward();\n    }\n\n    /** Remaining rewards in the locked tokens. */\n    function _calcRemainReward() internal {\n        remainingReward = balanceOf[lockJackpots];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        // Check allowance\n        require(_from != lockJackpots);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        require(msg.sender != lockJackpots);\n        return super.approve(_spender, _value);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        require(msg.sender != lockJackpots);\n        return super.approveAndCall(_spender, _value, _extraData);\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(msg.sender != lockJackpots);\n        return super.burn(_value);\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(_from != lockJackpots);\n        return super.burnFrom(_from, _value);\n    }\n}",
  "bytecode": "606060408181526b1027e72f1f12813088000000600455635b9bdb00600755635bd72e80600855635cdae60060095551908101604090815261012c825260c8602083015260649082015261005790600a906003610096565b50341561006357600080fd5b60008054600160a060020a03191633600160a060020a0316908117825560045490825260026020526040909120556100f7565b82600381019282156100ca579160200282015b828111156100ca578251829061ffff169055916020019190600101906100a9565b506100d69291506100da565b5090565b6100f491905b808211156100d657600081556001016100e0565b90565b610f75806101066000396000f3006060604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610155578063095ea7b3146101df57806310e776ed1461021557806318160ddd1461024657806323b872dd14610259578063313ce5671461028157806342966c68146102aa578063465af554146102c05780634a52ac6a146102df57806362c7fa76146102f55780636843aef91461030857806370a082311461031e57806379cc67901461033d5780638da5cb5b1461035f57806395d89b411461038e578063a841da4b146103a1578063a9059cbb146103b4578063b414d4b6146103d6578063cae9ca51146103f5578063dbefe7891461045a578063dd62ed3e1461046d578063e1c4c9fe14610492578063f2fde38b146104a5578063fa4d0c3c146104c4578063facc7905146104d7578063fc1b9286146104ea575b005b341561016057600080fd5b6101686104fd565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a457808201518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ea57600080fd5b610201600160a060020a0360043516602435610534565b604051901515815260200160405180910390f35b341561022057600080fd5b610234600160a060020a0360043516610564565b60405190815260200160405180910390f35b341561025157600080fd5b610234610576565b341561026457600080fd5b610201600160a060020a036004358116906024351660443561057c565b341561028c57600080fd5b6102946105ad565b60405160ff909116815260200160405180910390f35b34156102b557600080fd5b6102016004356105b2565b34156102cb57600080fd5b610153600160a060020a03600435166105e0565b34156102ea57600080fd5b610234600435610674565b341561030057600080fd5b610234610688565b341561031357600080fd5b61015360043561068e565b341561032957600080fd5b610234600160a060020a03600435166106c5565b341561034857600080fd5b610201600160a060020a03600435166024356106d7565b341561036a57600080fd5b6103726106ff565b604051600160a060020a03909116815260200160405180910390f35b341561039957600080fd5b61016861070e565b34156103ac57600080fd5b610372610745565b34156103bf57600080fd5b610153600160a060020a0360043516602435610754565b34156103e157600080fd5b610201600160a060020a0360043516610816565b341561040057600080fd5b61020160048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061082b95505050505050565b341561046557600080fd5b610234610855565b341561047857600080fd5b610234600160a060020a036004358116906024351661085a565b341561049d57600080fd5b610234610877565b34156104b057600080fd5b610153600160a060020a036004351661087d565b34156104cf57600080fd5b6102346108c7565b34156104e257600080fd5b6102346108cd565b34156104f557600080fd5b6101536108d3565b60408051908101604052601e81527f4172746966696369616c20496e74656c6c6967656e6365204865616c74680000602082015281565b60055460009033600160a060020a039081169116141561055357600080fd5b61055d8383610934565b9392505050565b600d6020526000908152604090205481565b60045481565b600554600090600160a060020a038581169116141561059a57600080fd5b6105a58484846109a2565b949350505050565b601281565b60055460009033600160a060020a03908116911614156105d157600080fd5b6105da82610a19565b92915050565b60005433600160a060020a039081169116146105fb57600080fd5b600554600160a060020a031615801561061c5750600160a060020a03811615155b80156106365750600054600160a060020a03828116911614155b151561064157600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038316179055610671610aa4565b50565b600a816003811061068157fe5b0154905081565b60075481565b6000811161069b57600080fd5b6005546106bd903390600160a060020a0316670de0b6b3a76400008402610ac4565b610671610aa4565b60026020526000908152604090205481565b600554600090600160a060020a03848116911614156106f557600080fd5b61055d8383610c0f565b600054600160a060020a031681565b60408051908101604052600381527f4149480000000000000000000000000000000000000000000000000000000000602082015281565b600554600160a060020a031681565b600554600160a060020a03161580159061077c575060055433600160a060020a039081169116145b1561078657600080fd5b600554600160a060020a0316158015906107ad5750600554600160a060020a038381169116145b156107c0576107bb81610ceb565b610812565b42600954111580156107e85750600160a060020a0333166000908152600d6020526040812054115b1561080757600160a060020a0333166000908152600d60205260408120555b610812338383610ac4565b5050565b600e6020526000908152604090205460ff1681565b60055460009033600160a060020a039081169116141561084a57600080fd5b6105a5848484610dd7565b600381565b600360209081526000928352604080842090915290825290205481565b60065481565b60005433600160a060020a0390811691161461089857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085481565b60095481565b60005433600160a060020a039081169116146108ee57600080fd5b6009544290106108fd57600080fd5b60055460008054600160a060020a03928316808352600260205260409092205461092a9390911690610ac4565b610932610aa4565b565b60008115806109665750600160a060020a03338116600090815260036020908152604080832093871683529290522054155b151561097157600080fd5b50600160a060020a033381166000908152600360209081526040808320938616835292905220819055600192915050565b600160a060020a038084166000908152600360209081526040808320339094168352929052908120548211156109d757600080fd5b600160a060020a0380851660009081526003602090815260408083203390941683529290522080548390039055610a0f848484610ac4565b5060019392505050565b600160a060020a03331660009081526002602052604081205482901015610a3f57600080fd5b600160a060020a03331660008181526002602052604090819020805485900390556001805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b600554600160a060020a0316600090815260026020526040902054600655565b600160a060020a0382161515610ad957600080fd5b600160a060020a0383166000908152600d602052604090205481810111610aff57600080fd5b600160a060020a0383166000908152600d6020908152604080832054600290925290912054908201901015610b3357600080fd5b600160a060020a03821660009081526002602052604090205481810111610b5957600080fd5b600160a060020a0383166000908152600e602052604090205460ff1615610b7f57600080fd5b600160a060020a0382166000908152600e602052604090205460ff1615610ba557600080fd5b600160a060020a038084166000818152600260205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3505050565b600160a060020a03821660009081526002602052604081205482901015610c3557600080fd5b600160a060020a0380841660009081526003602090815260408083203390941683529290522054821115610c6857600080fd5b600160a060020a038084166000818152600260209081526040808320805488900390556003825280832033909516835293905282902080548590039055600180548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b600554600090600160a060020a03161515610d0557600080fd5b600754421015610d1457600080fd5b600854421115610d2357600080fd5b600160a060020a0333166000908152600d602052604090205482810111610d4957600080fd5b600160a060020a0333166000908152600d6020908152604080832054600290925290912054908301901015610d7d57600080fd5b6103e8610d88610f05565b8302811515610d9357fe5b6005549190049150610daf90600160a060020a03163383610ac4565b600160a060020a0333166000908152600d602052604090208054838301019055610812610aa4565b600083610de48185610534565b15610efd5780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e9a578082015183820152602001610e82565b50505050905090810190601f168015610ec75780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610ee857600080fd5b5af11515610ef557600080fd5b505050600191505b509392505050565b600080600754600854036007544203600302811515610f2057fe5b04905060038110610f2f575060025b600a8160038110610f3c57fe5b0154600f819055915050905600a165627a7a72305820cf09bd37f21b3b9a4bfca12d350c60aec3bd417244121a94336523164a96012f0029"
}