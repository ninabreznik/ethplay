{
  "address": "0x517f5e4e7fda6792b338227d4f6eb34c83c5499d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20Swap",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-25\n*/\n\npragma solidity ^0.5.0;\n\ninterface SwapInterface {\n    // Public variables\n    function brokerFees(address _broker) external view returns (uint256);\n    function redeemedAt(bytes32 _swapID) external view returns(uint256);\n\n    /// @notice Initiates the atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiate(\n        bytes32 _swapID,\n        address payable _spender,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) external payable;\n\n    /// @notice Initiates the atomic swap with broker fees.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _broker The address of the broker.\n    /// @param _brokerFee The fee to be paid to the broker on success.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiateWithFees(\n        bytes32 _swapID,\n        address payable _spender,\n        address payable _broker,\n        uint256 _brokerFee,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) external payable;\n\n    /// @notice Redeems an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _receiver The receiver's address.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) external;\n\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) external;\n\n    /// @notice Refunds an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refund(bytes32 _swapID) external;\n\n    /// @notice Allows broker fee withdrawals.\n    ///\n    /// @param _amount The withdrawal amount.\n    function withdrawBrokerFees(uint256 _amount) external;\n\n    /// @notice Audits an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function audit(\n        bytes32 _swapID\n    ) external view returns (\n        uint256 timelock,\n        uint256 value,\n        address to, uint256 brokerFee,\n        address broker,\n        address from,\n        bytes32 secretLock\n    );\n\n    /// @notice Audits the secret of an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function auditSecret(bytes32 _swapID) external view  returns (bytes32 secretKey);\n\n    /// @notice Checks whether a swap is refundable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refundable(bytes32 _swapID) external view returns (bool);\n\n    /// @notice Checks whether a swap is initiatable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function initiatable(bytes32 _swapID) external view returns (bool);\n\n    /// @notice Checks whether a swap is redeemable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function redeemable(bytes32 _swapID) external view returns (bool);\n\n    /// @notice Generates a deterministic swap id using initiate swap details.\n    ///\n    /// @param _secretLock The hash of the secret.\n    /// @param _timelock The expiry timestamp.\n    function swapID(bytes32 _secretLock, uint256 _timelock) external pure returns (bytes32);\n}\n\ncontract BaseSwap is SwapInterface {\n    string public VERSION; // Passed in as a constructor parameter.\n\n    struct Swap {\n        uint256 timelock;\n        uint256 value;\n        uint256 brokerFee;\n        bytes32 secretLock;\n        bytes32 secretKey;\n        address payable funder;\n        address payable spender;\n        address payable broker;\n    }\n\n    enum States {\n        INVALID,\n        OPEN,\n        CLOSED,\n        EXPIRED\n    }\n\n    // Events\n    event LogOpen(bytes32 _swapID, address _spender, bytes32 _secretLock);\n    event LogExpire(bytes32 _swapID);\n    event LogClose(bytes32 _swapID, bytes32 _secretKey);\n\n    // Storage\n    mapping (bytes32 => Swap) internal swaps;\n    mapping (bytes32 => States) private _swapStates;\n    mapping (address => uint256) private _brokerFees;\n    mapping (bytes32 => uint256) private _redeemedAt;\n\n    /// @notice Throws if the swap is not invalid (i.e. has already been opened)\n    modifier onlyInvalidSwaps(bytes32 _swapID) {\n        require(_swapStates[_swapID] == States.INVALID, \"swap opened previously\");\n        _;\n    }\n\n    /// @notice Throws if the swap is not open.\n    modifier onlyOpenSwaps(bytes32 _swapID) {\n        require(_swapStates[_swapID] == States.OPEN, \"swap not open\");\n        _;\n    }\n\n    /// @notice Throws if the swap is not closed.\n    modifier onlyClosedSwaps(bytes32 _swapID) {\n        require(_swapStates[_swapID] == States.CLOSED, \"swap not redeemed\");\n        _;\n    }\n\n    /// @notice Throws if the swap is not expirable.\n    modifier onlyExpirableSwaps(bytes32 _swapID) {\n        /* solium-disable-next-line security/no-block-members */\n        require(now >= swaps[_swapID].timelock, \"swap not expirable\");\n        _;\n    }\n\n    /// @notice Throws if the secret key is not valid.\n    modifier onlyWithSecretKey(bytes32 _swapID, bytes32 _secretKey) {\n        require(swaps[_swapID].secretLock == sha256(abi.encodePacked(_secretKey)), \"invalid secret\");\n        _;\n    }\n\n    /// @notice Throws if the caller is not the authorized spender.\n    modifier onlySpender(bytes32 _swapID, address _spender) {\n        require(swaps[_swapID].spender == _spender, \"unauthorized spender\");\n        _;\n    }\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    constructor(string memory _VERSION) public {\n        VERSION = _VERSION;\n    }\n\n    /// @notice Initiates the atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiate(\n        bytes32 _swapID,\n        address payable _spender,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) public onlyInvalidSwaps(_swapID) payable {\n        // Store the details of the swap.\n        Swap memory swap = Swap({\n            timelock: _timelock,\n            brokerFee: 0,\n            value: _value,\n            funder: msg.sender,\n            spender: _spender,\n            broker: address(0x0),\n            secretLock: _secretLock,\n            secretKey: 0x0\n        });\n        swaps[_swapID] = swap;\n        _swapStates[_swapID] = States.OPEN;\n\n        // Logs open event\n        emit LogOpen(_swapID, _spender, _secretLock);\n    }\n\n    /// @notice Initiates the atomic swap with fees.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _broker The address of the broker.\n    /// @param _brokerFee The fee to be paid to the broker on success.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiateWithFees(\n        bytes32 _swapID,\n        address payable _spender,\n        address payable _broker,\n        uint256 _brokerFee,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) public onlyInvalidSwaps(_swapID) payable {\n        require(_value >= _brokerFee, \"fee must be less than value\");\n\n        // Store the details of the swap.\n        Swap memory swap = Swap({\n            timelock: _timelock,\n            brokerFee: _brokerFee,\n            value: _value - _brokerFee,\n            funder: msg.sender,\n            spender: _spender,\n            broker: _broker,\n            secretLock: _secretLock,\n            secretKey: 0x0\n        });\n        swaps[_swapID] = swap;\n        _swapStates[_swapID] = States.OPEN;\n\n        // Logs open event\n        emit LogOpen(_swapID, _spender, _secretLock);\n    }\n\n    /// @notice Redeems an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _receiver The receiver's address.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) onlySpender(_swapID, msg.sender) {\n        require(_receiver != address(0x0), \"invalid receiver\");\n\n        // Close the swap.\n        swaps[_swapID].secretKey = _secretKey;\n        _swapStates[_swapID] = States.CLOSED;\n        /* solium-disable-next-line security/no-block-members */\n        _redeemedAt[_swapID] = now;\n\n        // Update the broker fees to the broker.\n        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;\n\n        // Logs close event\n        emit LogClose(_swapID, _secretKey);\n    }\n\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) {\n        // Close the swap.\n        swaps[_swapID].secretKey = _secretKey;\n        _swapStates[_swapID] = States.CLOSED;\n        /* solium-disable-next-line security/no-block-members */\n        _redeemedAt[_swapID] = now;\n\n        // Update the broker fees to the broker.\n        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;\n\n        // Logs close event\n        emit LogClose(_swapID, _secretKey);\n    }\n\n    /// @notice Refunds an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refund(bytes32 _swapID) public onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {\n        // Expire the swap.\n        _swapStates[_swapID] = States.EXPIRED;\n\n        // Logs expire event\n        emit LogExpire(_swapID);\n    }\n\n    /// @notice Allows broker fee withdrawals.\n    ///\n    /// @param _amount The withdrawal amount.\n    function withdrawBrokerFees(uint256 _amount) public {\n        require(_amount <= _brokerFees[msg.sender], \"insufficient withdrawable fees\");\n        _brokerFees[msg.sender] -= _amount;\n    }\n\n    /// @notice Audits an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function audit(bytes32 _swapID) external view returns (uint256 timelock, uint256 value, address to, uint256 brokerFee, address broker, address from, bytes32 secretLock) {\n        Swap memory swap = swaps[_swapID];\n        return (\n            swap.timelock,\n            swap.value,\n            swap.spender,\n            swap.brokerFee,\n            swap.broker,\n            swap.funder,\n            swap.secretLock\n        );\n    }\n\n    /// @notice Audits the secret of an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function auditSecret(bytes32 _swapID) external view onlyClosedSwaps(_swapID) returns (bytes32 secretKey) {\n        return swaps[_swapID].secretKey;\n    }\n\n    /// @notice Checks whether a swap is refundable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refundable(bytes32 _swapID) external view returns (bool) {\n        /* solium-disable-next-line security/no-block-members */\n        return (now >= swaps[_swapID].timelock && _swapStates[_swapID] == States.OPEN);\n    }\n\n    /// @notice Checks whether a swap is initiatable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function initiatable(bytes32 _swapID) external view returns (bool) {\n        return (_swapStates[_swapID] == States.INVALID);\n    }\n\n    /// @notice Checks whether a swap is redeemable or not.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function redeemable(bytes32 _swapID) external view returns (bool) {\n        return (_swapStates[_swapID] == States.OPEN);\n    }\n\n    function redeemedAt(bytes32 _swapID) external view returns (uint256) {\n        return _redeemedAt[_swapID];\n    }\n\n    function brokerFees(address _broker) external view returns (uint256) {\n        return _brokerFees[_broker];\n    }\n\n    /// @notice Generates a deterministic swap id using initiate swap details.\n    ///\n    /// @param _secretLock The hash of the secret.\n    /// @param _timelock The expiry timestamp.\n    function swapID(bytes32 _secretLock, uint256 _timelock) external pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_secretLock, _timelock));\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n    /**\n    * @dev Returns the largest of two numbers.\n    */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n    * @dev Returns the smallest of two numbers.\n    */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n    * @dev Calculates the average of two numbers. Since these are integers,\n    * averages of an even and odd number cannot be represented, and will be\n    * rounded down.\n    */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n/// @notice Implements safeTransfer, safeTransferFrom and\n/// safeApprove for CompatibleERC20.\n///\n/// See https://github.com/ethereum/solidity/issues/4116\n///\n/// This library allows interacting with ERC20 tokens that implement any of\n/// these interfaces:\n///\n/// (1) transfer returns true on success, false on failure\n/// (2) transfer returns true on success, reverts on failure\n/// (3) transfer returns nothing on success, reverts on failure\n///\n/// Additionally, safeTransferFromWithFees will return the final token\n/// value received after accounting for token fees.\nlibrary CompatibleERC20Functions {\n    using SafeMath for uint256;\n\n    /// @notice Calls transfer on the token and reverts if the call fails.\n    function safeTransfer(CompatibleERC20 self, address to, uint256 amount) internal {\n        self.transfer(to, amount);\n        require(previousReturnValue(), \"transfer failed\");\n    }\n\n    /// @notice Calls transferFrom on the token and reverts if the call fails.\n    function safeTransferFrom(CompatibleERC20 self, address from, address to, uint256 amount) internal {\n        self.transferFrom(from, to, amount);\n        require(previousReturnValue(), \"transferFrom failed\");\n    }\n\n    /// @notice Calls approve on the token and reverts if the call fails.\n    function safeApprove(CompatibleERC20 self, address spender, uint256 amount) internal {\n        self.approve(spender, amount);\n        require(previousReturnValue(), \"approve failed\");\n    }\n\n    /// @notice Calls transferFrom on the token, reverts if the call fails and\n    /// returns the value transferred after fees.\n    function safeTransferFromWithFees(CompatibleERC20 self, address from, address to, uint256 amount) internal returns (uint256) {\n        uint256 balancesBefore = self.balanceOf(to);\n        self.transferFrom(from, to, amount);\n        require(previousReturnValue(), \"transferFrom failed\");\n        uint256 balancesAfter = self.balanceOf(to);\n        return Math.min(amount, balancesAfter.sub(balancesBefore));\n    }\n\n    /// @notice Checks the return value of the previous function. Returns true\n    /// if the previous function returned 32 non-zero bytes or returned zero\n    /// bytes.\n    function previousReturnValue() private pure returns (bool)\n    {\n        uint256 returnData = 0;\n\n        assembly { /* solium-disable-line security/no-inline-assembly */\n            // Switch on the number of bytes returned by the previous call\n            switch returndatasize\n\n            // 0 bytes: ERC20 of type (3), did not throw\n            case 0 {\n                returnData := 1\n            }\n\n            // 32 bytes: ERC20 of types (1) or (2)\n            case 32 {\n                // Copy the return data into scratch space\n                returndatacopy(0, 0, 32)\n\n                // Load  the return data into returnData\n                returnData := mload(0)\n            }\n\n            // Other return size: return false\n            default { }\n        }\n\n        return returnData != 0;\n    }\n}\n\n/// @notice ERC20 interface which doesn't specify the return type for transfer,\n/// transferFrom and approve.\ninterface CompatibleERC20 {\n    // Modified to not return boolean\n    function transfer(address to, uint256 value) external;\n    function transferFrom(address from, address to, uint256 value) external;\n    function approve(address spender, uint256 value) external;\n\n    // Not modifier\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/// @notice ERC20Swap implements the ERC20Swap interface.\ncontract ERC20Swap is SwapInterface, BaseSwap {\n    using CompatibleERC20Functions for CompatibleERC20;\n\n    address public TOKEN_ADDRESS; // Address of the ERC20 contract. Passed in as a constructor parameter\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    constructor(string memory _VERSION, address _TOKEN_ADDRESS) BaseSwap(_VERSION) public {\n        TOKEN_ADDRESS = _TOKEN_ADDRESS;\n    }\n\n    /// @notice Initiates the atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiate(\n        bytes32 _swapID,\n        address payable _spender,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) public payable {\n        // To abide by the interface, the function is payable but throws if\n        // msg.value is non-zero\n        require(msg.value == 0, \"eth value must be zero\");\n        require(_spender != address(0x0), \"spender must not be zero\");\n\n        // Transfer the token to the contract\n        // TODO: Initiator will first need to call\n        // ERC20(TOKEN_ADDRESS).approve(address(this), _value)\n        // before this contract can make transfers on the initiator's behalf.\n        CompatibleERC20(TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), _value);\n\n        BaseSwap.initiate(\n            _swapID,\n            _spender,\n            _secretLock,\n            _timelock,\n            _value\n        );\n    }\n\n    /// @notice Initiates the atomic swap with broker fees.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _spender The address of the withdrawing trader.\n    /// @param _broker The address of the broker.\n    /// @param _brokerFee The fee to be paid to the broker on success.\n    /// @param _secretLock The hash of the secret (Hash Lock).\n    /// @param _timelock The unix timestamp when the swap expires.\n    /// @param _value The value of the atomic swap.\n    function initiateWithFees(\n        bytes32 _swapID,\n        address payable _spender,\n        address payable _broker,\n        uint256 _brokerFee,\n        bytes32 _secretLock,\n        uint256 _timelock,\n        uint256 _value\n    ) public payable {\n        // To abide by the interface, the function is payable but throws if\n        // msg.value is non-zero\n        require(msg.value == 0, \"eth value must be zero\");\n        require(_spender != address(0x0), \"spender must not be zero\");\n\n        // Transfer the token to the contract\n        // TODO: Initiator will first need to call\n        // ERC20(TOKEN_ADDRESS).approve(address(this), _value)\n        // before this contract can make transfers on the initiator's behalf.\n        CompatibleERC20(TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), _value);\n\n        BaseSwap.initiateWithFees(\n            _swapID,\n            _spender,\n            _broker,\n            _brokerFee,\n            _secretLock,\n            _timelock,\n            _value\n        );\n    }\n\n    /// @notice Redeems an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) public {\n        BaseSwap.redeem(\n            _swapID,\n            _receiver,\n            _secretKey\n        );\n\n        // Transfer the ERC20 funds from this contract to the withdrawing trader.\n        CompatibleERC20(TOKEN_ADDRESS).safeTransfer(_receiver, swaps[_swapID].value);\n    }\n\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    /// @param _secretKey The secret of the atomic swap.\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public {\n        BaseSwap.redeemToSpender(\n            _swapID,\n            _secretKey\n        );\n\n        // Transfer the ERC20 funds from this contract to the withdrawing trader.\n        CompatibleERC20(TOKEN_ADDRESS).safeTransfer(swaps[_swapID].spender, swaps[_swapID].value);\n    }\n\n    /// @notice Refunds an atomic swap.\n    ///\n    /// @param _swapID The unique atomic swap id.\n    function refund(bytes32 _swapID) public {\n        BaseSwap.refund(_swapID);\n\n        // Transfer the ERC20 value from this contract back to the funding trader.\n        CompatibleERC20(TOKEN_ADDRESS).safeTransfer(swaps[_swapID].funder, swaps[_swapID].value + swaps[_swapID].brokerFee);\n    }\n\n    /// @notice Allows broker fee withdrawals.\n    ///\n    /// @param _amount The withdrawal amount.\n    function withdrawBrokerFees(uint256 _amount) public {\n        BaseSwap.withdrawBrokerFees(_amount);\n\n        CompatibleERC20(TOKEN_ADDRESS).safeTransfer(msg.sender, _amount);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000005312e302e31000000000000000000000000000000000000000000000000000000"
}