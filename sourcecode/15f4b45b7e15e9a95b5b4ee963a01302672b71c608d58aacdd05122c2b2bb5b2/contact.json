{
  "address": "0xa7fc5d2453e3f68af0cc1b78bcfee94a1b293650",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SPIKE",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-28\n*/\n\npragma solidity ^0.4.20;\n// ----------------------------------------------------------------------------------------------\n// SPIKE Token by SPIKING Limited.\n// An ERC223 standard\n//\n// author: SPIKE Team\n// Contact: [emailÂ protected]\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n\n}\n\ncontract ERC20 {\n    // Get the total token supply\n    function totalSupply() public constant returns (uint256 _totalSupply);\n \n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n \n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    \n    // transfer _value amount of token approved by address _from\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    \n    // approve an address with _value amount of tokens\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    // get remaining token approved by _owner to _spender\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n  \n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n \n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC223 is ERC20{\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes indexed _data);\n}\n\n/// contract receiver interface\ncontract ContractReceiver {  \n    function tokenFallback(address _from, uint _value, bytes _data) external;\n}\n\ncontract BasicSPIKE is ERC223 {\n    using SafeMath for uint256;\n    \n    uint256 public constant decimals = 10;\n    string public constant symbol = \"SPIKE\";\n    string public constant name = \"Spiking\";\n    uint256 public _totalSupply = 5 * 10 ** 19; // total supply is 5*10^19 unit, equivalent to 5 Billion SPIKE\n\n    // Owner of this contract\n    address public owner;\n    address public airdrop;\n\n    // tradable\n    bool public tradable = false;\n\n    // Balances SPIKE for each account\n    mapping(address => uint256) balances;\n    \n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n            \n    /**\n     * Functions with this modifier can only be executed by the owner\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier isTradable(){\n        require(tradable == true || msg.sender == airdrop || msg.sender == owner);\n        _;\n    }\n\n    /// @dev Constructor\n    function BasicSPIKE() \n    public {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n        Transfer(0x0, owner, _totalSupply);\n        airdrop = 0x00227086ab72678903091d315b04a8dacade39647a;\n    }\n    \n    /// @dev Gets totalSupply\n    /// @return Total supply\n    function totalSupply()\n    public \n    constant \n    returns (uint256) {\n        return _totalSupply;\n    }\n        \n    /// @dev Gets account's balance\n    /// @param _addr Address of the account\n    /// @return Account balance\n    function balanceOf(address _addr) \n    public\n    constant \n    returns (uint256) {\n        return balances[_addr];\n    }\n    \n    \n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) \n    private \n    view \n    returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length>0);\n    }\n \n    /// @dev Transfers the balance from msg.sender to an account\n    /// @param _to Recipient address\n    /// @param _value Transfered amount in unit\n    /// @return Transfer status\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) \n    public \n    isTradable\n    returns (bool success) {\n        require(_to != 0x0);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /// @dev Function that is called when a user or another contract wants to transfer funds .\n    /// @param _to Recipient address\n    /// @param _value Transfer amount in unit\n    /// @param _data the data pass to contract reveiver\n    function transfer(\n        address _to, \n        uint _value, \n        bytes _data) \n    public\n    isTradable \n    returns (bool success) {\n        require(_to != 0x0);\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        Transfer(msg.sender, _to, _value);\n        if(isContract(_to)) {\n            ContractReceiver receiver = ContractReceiver(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n            Transfer(msg.sender, _to, _value, _data);\n        }\n        \n        return true;\n    }\n    \n    /// @dev Function that is called when a user or another contract wants to transfer funds .\n    /// @param _to Recipient address\n    /// @param _value Transfer amount in unit\n    /// @param _data the data pass to contract reveiver\n    /// @param _custom_fallback custom name of fallback function\n    function transfer(\n        address _to, \n        uint _value, \n        bytes _data, \n        string _custom_fallback) \n    public \n    isTradable\n    returns (bool success) {\n        require(_to != 0x0);\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        Transfer(msg.sender, _to, _value);\n\n        if(isContract(_to)) {\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n            Transfer(msg.sender, _to, _value, _data);\n        }\n        return true;\n    }\n         \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n    public\n    isTradable\n    returns (bool success) {\n        require(_to != 0x0);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount) \n    public\n    returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n    \n    // get allowance\n    function allowance(address _owner, address _spender) \n    public\n    constant \n    returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // withdraw any ERC20 token in this contract to owner\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\n        return ERC223(tokenAddress).transfer(owner, tokens);\n    }\n    \n    // allow people can transfer their token\n    // NOTE: can not turn off\n    function turnOnTradable() \n    public\n    onlyOwner{\n        tradable = true;\n    }\n\n    // @dev allow owner to update airdrop admin\n    function updateAirdrop(address newAirdropAdmin) \n    public \n    onlyOwner{\n        airdrop = newAirdropAdmin;\n    }\n}\n\ncontract SPIKE is BasicSPIKE {\n\n    bool public _selling = true;//initial selling\n    \n    uint256 public _originalBuyPrice = 80000 * 10**10; // original buy 1ETH = 80000 SPIKE = 80000 * 10**10 unit\n\n    // List of approved investors\n    mapping(address => bool) private approvedInvestorList;\n    \n    // deposit\n    mapping(address => uint256) private deposit;\n    \n    // icoPercent\n    uint256 public _icoPercent = 30;\n    \n    // _icoSupply is the avalable unit. Initially, it is _totalSupply\n    uint256 public _icoSupply = (_totalSupply * _icoPercent) / 100;\n    \n    // minimum buy 0.3 ETH\n    uint256 public _minimumBuy = 3 * 10 ** 17;\n    \n    // maximum buy 25 ETH\n    uint256 public _maximumBuy = 25 * 10 ** 18;\n\n    // totalTokenSold\n    uint256 public totalTokenSold = 0;\n\n    /**\n     * Functions with this modifier check on sale status\n     * Only allow sale if _selling is on\n     */\n    modifier onSale() {\n        require(_selling);\n        _;\n    }\n    \n    /**\n     * Functions with this modifier check the validity of address is investor\n     */\n    modifier validInvestor() {\n        require(approvedInvestorList[msg.sender]);\n        _;\n    }\n    \n    /**\n     * Functions with this modifier check the validity of msg value\n     * value must greater than equal minimumBuyPrice\n     * total deposit must less than equal maximumBuyPrice\n     */\n    modifier validValue(){\n        // require value >= _minimumBuy AND total deposit of msg.sender <= maximumBuyPrice\n        require ( (msg.value >= _minimumBuy) &&\n                ( (deposit[msg.sender].add(msg.value)) <= _maximumBuy) );\n        _;\n    }\n\n    /// @dev Fallback function allows to buy by ether.\n    function()\n    public\n    payable {\n        buySPIKE();\n    }\n    \n    /// @dev buy function allows to buy ether. for using optional data\n    function buySPIKE()\n    public\n    payable\n    onSale\n    validValue\n    validInvestor {\n        uint256 requestedUnits = (msg.value * _originalBuyPrice) / 10**18;\n        require(balances[owner] >= requestedUnits);\n        // prepare transfer data\n        balances[owner] = balances[owner].sub(requestedUnits);\n        balances[msg.sender] = balances[msg.sender].add(requestedUnits);\n        \n        // increase total deposit amount\n        deposit[msg.sender] = deposit[msg.sender].add(msg.value);\n        \n        // check total and auto turnOffSale\n        totalTokenSold = totalTokenSold.add(requestedUnits);\n        if (totalTokenSold >= _icoSupply){\n            _selling = false;\n        }\n        \n        // submit transfer\n        Transfer(owner, msg.sender, requestedUnits);\n        owner.transfer(msg.value);\n    }\n\n    /// @dev Constructor\n    function SPIKE() BasicSPIKE()\n    public {\n        setBuyPrice(_originalBuyPrice);\n    }\n    \n    /// @dev Enables sale \n    function turnOnSale() onlyOwner \n    public {\n        _selling = true;\n    }\n\n    /// @dev Disables sale\n    function turnOffSale() onlyOwner \n    public {\n        _selling = false;\n    }\n    \n    /// @dev set new icoPercent\n    /// @param newIcoPercent new value of icoPercent\n    function setIcoPercent(uint256 newIcoPercent)\n    public \n    onlyOwner {\n        _icoPercent = newIcoPercent;\n        _icoSupply = (_totalSupply * _icoPercent) / 100;\n    }\n    \n    /// @dev set new _maximumBuy\n    /// @param newMaximumBuy new value of _maximumBuy\n    function setMaximumBuy(uint256 newMaximumBuy)\n    public \n    onlyOwner {\n        _maximumBuy = newMaximumBuy;\n    }\n\n    /// @dev Updates buy price (owner ONLY)\n    /// @param newBuyPrice New buy price (in UNIT) 1ETH <=> 80,000 SPKIE = 100,000.0000000000 unit\n    function setBuyPrice(uint256 newBuyPrice) \n    onlyOwner \n    public {\n        require(newBuyPrice>0);\n        _originalBuyPrice = newBuyPrice; // unit\n        // control _maximumBuy_USD = 10,000 USD, SPIKE price is 0.01USD\n        // maximumBuy_SPIKE = 1000,000 SPIKE = 1000,000,0000000000 unit = 10^16\n        _maximumBuy = (10**18 * 10**16) /_originalBuyPrice;\n    }\n    \n    /// @dev check address is approved investor\n    /// @param _addr address\n    function isApprovedInvestor(address _addr)\n    public\n    constant\n    returns (bool) {\n        return approvedInvestorList[_addr];\n    }\n    \n    /// @dev get ETH deposit\n    /// @param _addr address get deposit\n    /// @return amount deposit of an buyer\n    function getDeposit(address _addr)\n    public\n    constant\n    returns(uint256){\n        return deposit[_addr];\n}\n    \n    /// @dev Adds list of new investors to the investors list and approve all\n    /// @param newInvestorList Array of new investors addresses to be added\n    function addInvestorList(address[] newInvestorList)\n    onlyOwner\n    public {\n        for (uint256 i = 0; i < newInvestorList.length; i++){\n            approvedInvestorList[newInvestorList[i]] = true;\n        }\n    }\n\n    /// @dev Removes list of investors from list\n    /// @param investorList Array of addresses of investors to be removed\n    function removeInvestorList(address[] investorList)\n    onlyOwner\n    public {\n        for (uint256 i = 0; i < investorList.length; i++){\n            approvedInvestorList[investorList[i]] = false;\n        }\n    }\n    \n    /// @dev Withdraws Ether in contract (Owner only)\n    /// @return Status of withdrawal\n    function withdraw() onlyOwner \n    public \n    returns (bool) {\n        return owner.send(this.balance);\n    }\n}\n\ncontract MultiSigWallet {\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n    event CoinCreation(address coin);\n\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n    bool flag = true;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            revert();\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        if (transactions[transactionId].destination == 0)\n            revert();\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        if (!confirmations[transactionId][owner])\n            revert();\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        if (confirmations[transactionId][owner])\n            revert();\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        if (transactions[transactionId].executed)\n            revert();\n        _;\n    }\n\n    modifier notNull(address _address) {\n        if (_address == 0)\n            revert();\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        if (   ownerCount > MAX_OWNER_COUNT\n            || _required > ownerCount\n            || _required == 0\n            || ownerCount == 0)\n            revert();\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            if (isOwner[_owners[i]] || _owners[i] == 0)\n                revert();\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction tx = transactions[transactionId];\n            tx.executed = true;\n            if (tx.destination.call.value(tx.value)(tx.data))\n                Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                tx.executed = false;\n            }\n        }\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n    \n    /// @dev Create new coin.\n    function createCoin()\n        external\n        onlyWallet\n    {\n        require(flag == true);\n        CoinCreation(new SPIKE());\n        flag = false;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newMaximumBuy\",\"type\":\"uint256\"}],\"name\":\"setMaximumBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOffSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoPercent\",\"type\":\"uint256\"}],\"name\":\"setIcoPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minimumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_originalBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maximumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isApprovedInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorList\",\"type\":\"address[]\"}],\"name\":\"removeInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buySPIKE\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestorList\",\"type\":\"address[]\"}],\"name\":\"addInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAirdropAdmin\",\"type\":\"address\"}],\"name\":\"updateAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_selling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526802b5e3af16b188000060009081556002805460a060020a60ff02191690556005805460ff191660011790556602d79883d20000600655601e60095567d02ab486cedc0000600a55670429d069189e0000600b5568015af1d78b58c40000600c55600d55341561007357600080fd5b60018054600160a060020a03191633600160a060020a0390811691909117808355600080549183168152600360205260408082208390559354909216927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a360028054600160a060020a03191673227086ab72678903091d315b04a8dacade39647a17905560065461012190640100000000610c4061012682021704565b610174565b60015433600160a060020a0390811691161461014157600080fd5b6000811161014e57600080fd5b6006819055806e01ed09bead87c0378d8e640000000081151561016d57fe5b04600c5550565b6115c4806101836000396000f3006060604052600436106101a85763ffffffff60e060020a6000350416630188fdef81146101b257806306fdde03146101c8578063095ea7b31461025257806318160ddd1461028857806323526a34146102ad57806323b872dd146102c05780632fb1746d146102e8578063313ce567146102fb5780633884d6351461030e5780633c2d64471461033d5780633c50afe1146103535780633ccfd60b146103665780633eaaf86b14610379578063501e3a2c1461038c57806354840c6e1461039f57806363ae8d6c146103b25780636b342eb8146103c857806370a08231146103db57806378f2144b146103fa5780637fd2304f1461040d5780638da5cb5b1461042057806395d89b41146104335780639b1fe0d4146104465780639fc3954914610465578063a9059cbb146104b4578063b5f7f636146104d6578063be45fd62146104e9578063befe6299146101a8578063bfb9f0881461054e578063c489a6491461059d578063dc39d06d146105bc578063dd62ed3e146105de578063e1254fba14610603578063e98cf98714610622578063f6368f8a14610635578063f9323a32146106dc575b6101b06106ef565b005b34156101bd57600080fd5b6101b06004356108f3565b34156101d357600080fd5b6101db610913565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102175780820151838201526020016101ff565b50505050905090810190601f1680156102445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025d57600080fd5b610274600160a060020a036004351660243561094a565b604051901515815260200160405180910390f35b341561029357600080fd5b61029b6109b7565b60405190815260200160405180910390f35b34156102b857600080fd5b6101b06109bd565b34156102cb57600080fd5b610274600160a060020a03600435811690602435166044356109e4565b34156102f357600080fd5b6101b0610b4c565b341561030657600080fd5b61029b610b8d565b341561031957600080fd5b610321610b92565b604051600160a060020a03909116815260200160405180910390f35b341561034857600080fd5b6101b0600435610ba1565b341561035e57600080fd5b61029b610bce565b341561037157600080fd5b610274610bd4565b341561038457600080fd5b61029b610c24565b341561039757600080fd5b61029b610c2a565b34156103aa57600080fd5b610274610c30565b34156103bd57600080fd5b6101b0600435610c40565b34156103d357600080fd5b61029b610c8e565b34156103e657600080fd5b61029b600160a060020a0360043516610c94565b341561040557600080fd5b61029b610caf565b341561041857600080fd5b61029b610cb5565b341561042b57600080fd5b610321610cbb565b341561043e57600080fd5b6101db610cca565b341561045157600080fd5b610274600160a060020a0360043516610d01565b341561047057600080fd5b6101b06004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610d1f95505050505050565b34156104bf57600080fd5b610274600160a060020a0360043516602435610d9a565b34156104e157600080fd5b61029b610eae565b34156104f457600080fd5b61027460048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610eb495505050505050565b341561055957600080fd5b6101b0600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061115095505050505050565b34156105a857600080fd5b6101b0600160a060020a03600435166111c7565b34156105c757600080fd5b610274600160a060020a0360043516602435611211565b34156105e957600080fd5b61029b600160a060020a0360043581169060243516611297565b341561060e57600080fd5b61029b600160a060020a03600435166112c2565b341561062d57600080fd5b6101b06112dd565b341561064057600080fd5b61027460048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061130795505050505050565b34156106e757600080fd5b610274611542565b60055460009060ff16151561070357600080fd5b600b54341015801561073f5750600c54600160a060020a03331660009081526008602052604090205461073c903463ffffffff61154b16565b11155b151561074a57600080fd5b600160a060020a03331660009081526007602052604090205460ff16151561077157600080fd5b600654670de0b6b3a7640000903402600154600160a060020a03166000908152600360205260409020549190049150819010156107ad57600080fd5b600154600160a060020a03166000908152600360205260409020546107d8908263ffffffff61155b16565b600154600160a060020a03908116600090815260036020526040808220939093553390911681522054610811908263ffffffff61154b16565b600160a060020a033316600090815260036020908152604080832093909355600890522054610846903463ffffffff61154b16565b600160a060020a033316600090815260086020526040902055600d54610872908263ffffffff61154b16565b600d819055600a54901061088b576005805460ff191690555b600154600160a060020a0333811691166000805160206115798339815191528360405190815260200160405180910390a3600154600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156108f057600080fd5b50565b60015433600160a060020a0390811691161461090e57600080fd5b600c55565b60408051908101604052600781527f5370696b696e6700000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005490565b60015433600160a060020a039081169116146109d857600080fd5b6005805460ff19169055565b60025460009060a060020a900460ff16151560011480610a12575060025433600160a060020a039081169116145b80610a2b575060015433600160a060020a039081169116145b1515610a3657600080fd5b600160a060020a0383161515610a4b57600080fd5b600160a060020a038416600090815260036020526040902054610a74908363ffffffff61155b16565b600160a060020a0380861660009081526003602090815260408083209490945560048152838220339093168252919091522054610ab7908363ffffffff61155b16565b600160a060020a0380861660009081526004602090815260408083203385168452825280832094909455918616815260039091522054610afd908363ffffffff61154b16565b600160a060020a03808516600081815260036020526040908190209390935591908616906000805160206115798339815191529085905190815260200160405180910390a35060019392505050565b60015433600160a060020a03908116911614610b6757600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b600a81565b600254600160a060020a031681565b60015433600160a060020a03908116911614610bbc57600080fd5b60098190556000546064910204600a55565b600a5481565b60015460009033600160a060020a03908116911614610bf257600080fd5b600154600160a060020a039081169030163180156108fc0290604051600060405180830381858888f194505050505090565b60005481565b60095481565b60025460a060020a900460ff1681565b60015433600160a060020a03908116911614610c5b57600080fd5b60008111610c6857600080fd5b6006819055806e01ed09bead87c0378d8e6400000000811515610c8757fe5b04600c5550565b600b5481565b600160a060020a031660009081526003602052604090205490565b60065481565b600c5481565b600154600160a060020a031681565b60408051908101604052600581527f5350494b45000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a031660009081526007602052604090205460ff1690565b60015460009033600160a060020a03908116911614610d3d57600080fd5b5060005b8151811015610d9657600060076000848481518110610d5c57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610d41565b5050565b60025460009060a060020a900460ff16151560011480610dc8575060025433600160a060020a039081169116145b80610de1575060015433600160a060020a039081169116145b1515610dec57600080fd5b600160a060020a0383161515610e0157600080fd5b600160a060020a033316600090815260036020526040902054610e2a908363ffffffff61155b16565b600160a060020a033381166000908152600360205260408082209390935590851681522054610e5f908363ffffffff61154b16565b600160a060020a0380851660008181526003602052604090819020939093559133909116906000805160206115798339815191529085905190815260200160405180910390a350600192915050565b600d5481565b600080600260149054906101000a900460ff161515600115151480610ee7575060025433600160a060020a039081169116145b80610f00575060015433600160a060020a039081169116145b1515610f0b57600080fd5b600160a060020a0385161515610f2057600080fd5b610f3984610f2d33610c94565b9063ffffffff61155b16565b600160a060020a033316600090815260036020526040902055610f6b84610f5f87610c94565b9063ffffffff61154b16565b600160a060020a0380871660008181526003602052604090819020939093559133909116906000805160206115798339815191529087905190815260200160405180910390a3610fba85611570565b15611145575083600160a060020a03811663c0ee0b8a3386866040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611040578082015183820152602001611028565b50505050905090810190601f16801561106d5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561108d57600080fd5b6102c65a03f1151561109e57600080fd5b505050826040518082805190602001908083835b602083106110d15780518252601f1990920191602091820191016110b2565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a45b506001949350505050565b60015460009033600160a060020a0390811691161461116e57600080fd5b5060005b8151811015610d965760016007600084848151811061118d57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101611172565b60015433600160a060020a039081169116146111e257600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600090600160a060020a038085169163a9059cbb911684846040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561127657600080fd5b6102c65a03f1151561128757600080fd5b5050506040518051949350505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600160a060020a031660009081526008602052604090205490565b60015433600160a060020a039081169116146112f857600080fd5b6005805460ff19166001179055565b60025460009060a060020a900460ff16151560011480611335575060025433600160a060020a039081169116145b8061134e575060015433600160a060020a039081169116145b151561135957600080fd5b600160a060020a038516151561136e57600080fd5b61137b84610f2d33610c94565b600160a060020a0333166000908152600360205260409020556113a184610f5f87610c94565b600160a060020a0380871660008181526003602052604090819020939093559133909116906000805160206115798339815191529087905190815260200160405180910390a36113f085611570565b156111455784600160a060020a03166000836040518082805190602001908083835b602083106114315780518252601f199092019160209182019101611412565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060e060020a9004903387876040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b838110156114c25780820151838201526020016114aa565b50505050905090810190601f1680156114ef5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f19350505050151561151357fe5b82604051808280519060200190808383602083106110d15780518252601f1990920191602091820191016110b2565b60055460ff1681565b818101828110156109b157600080fd5b60008282111561156a57600080fd5b50900390565b6000903b11905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820b0d2436662b0975df285cf9f28e765fe269f1cc9b0e75ef3e461b8da6009f0a50029"
}