{
  "address": "0x3514dce6f27405218f230c64c22d932c90e3ccba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AAACoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\n/**\n * 2019년 6월 5일 검증받을 최종 코드\n */\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    \n/**\n * @dev Multiplies two unsigned integers, reverts on overflow.\n */\n \nfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n// benefit is lost if 'b' is also tested.\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\nif (_a == 0) {\nreturn 0;\n}\n\nuint256 c = _a * _b;\nrequire(c / _a == _b);\nreturn c;\n}\n\n/**\n * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n */\n \nfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n// Solidity only automatically asserts when dividing by 0\nrequire(_b > 0);\nuint256 c = _a / _b;\n // assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n\n}\n\n/**\n * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n */\n     \nfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\nrequire(_b <= _a);\nreturn _a - _b;\n}\n\n/**\n * @dev Adds two unsigned integers, reverts on overflow.\n */\n \nfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\nuint256 c = _a + _b;\nrequire(c >= _a);\nreturn c;\n\n}\n\n/**\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n   */\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n}\n}\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n*/\n\ncontract Ownable {\naddress public owner;\naddress public newOwner;\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\nconstructor() public {\nowner = msg.sender;\nnewOwner = address(0);\n}\n\n// allows execution by the owner only\n\nmodifier onlyOwner() {\nrequire(msg.sender == owner);\n_;\n}\n\nmodifier onlyNewOwner() {\nrequire(msg.sender != address(0));\nrequire(msg.sender == newOwner);\n_;\n}\n\n/**\n    @dev allows transferring the contract ownership\n    the new owner still needs to accept the transfer\n    can only be called by the contract owner\n    @param _newOwner    new contract owner\n*/\n\nfunction transferOwnership(address _newOwner) public onlyOwner {\nrequire(_newOwner != address(0));\nnewOwner = _newOwner;\n}\n\n/**\n    @dev used by a new owner to accept an ownership transfer\n*/\n\nfunction acceptOwnership() public onlyNewOwner returns(bool) {\nemit OwnershipTransferred(owner, newOwner);\nowner = newOwner;\n}\n}\n\n/*\n    ERC20 Token interface\n*/\n\ncontract ERC20 {\n\nfunction totalSupply() public view returns (uint256);\nfunction balanceOf(address who) public view returns (uint256);\nfunction allowance(address owner, address spender) public view returns (uint256);\nfunction transfer(address to, uint256 value) public returns (bool);\nfunction transferFrom(address from, address to, uint256 value) public returns (bool);\nfunction approve(address spender, uint256 value) public returns (bool);\nevent Approval(address indexed owner, address indexed spender, uint256 value);\nevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ninterface TokenRecipient {\nfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n}\n\ncontract AAACoin is ERC20, Ownable {\nusing SafeMath for uint256;\n\nstring public name;\nstring public symbol;\nuint8 public decimals;\nuint256 internal initialSupply;\nuint256 internal totalSupply_;\nmapping(address => uint256) internal balances;\nmapping(address => bool) public frozen;\nmapping(address => mapping(address => uint256)) internal allowed;\n\nevent Burn(address indexed owner, uint256 value);\nevent Mint(uint256 value);\nevent Freeze(address indexed holder);\nevent Unfreeze(address indexed holder);\n\nmodifier notFrozen(address _holder) {\nrequire(!frozen[_holder]);\n_;\n}\n\nconstructor() public {\nname = \"AAACoin\";\nsymbol = \"AAC\";\ndecimals = 0;\ninitialSupply = 10000000;\ntotalSupply_ = 10000000;\nbalances[owner] = totalSupply_;\nemit Transfer(address(0), owner, totalSupply_);\n}\n\nfunction () public payable {\nrevert();\n}\n\n/**\n  * @dev Total number of tokens in existence\n  */\n   \nfunction totalSupply() public view returns (uint256) {\nreturn totalSupply_;\n}\n\n/**\n * @dev Transfer token for a specified addresses\n * @param _from The address to transfer from.\n * @param _to The address to transfer to.\n * @param _value The amount to be transferred.\n */ \n\nfunction _transfer(address _from, address _to, uint _value) internal {\n\nrequire(_to != address(0));\nrequire(_value <= balances[_from]);\nrequire(_value <= allowed[_from][msg.sender]);\nbalances[_from] = balances[_from].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\nemit Transfer(_from, _to, _value);\n}\n\n/**\n * @dev Transfer token for a specified address\n * @param _to The address to transfer to.\n * @param _value The amount to be transferred.\n */\n     \n \nfunction transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns (bool) {\n\nrequire(_to != address(0));\nrequire(_value <= balances[msg.sender]);\nbalances[msg.sender] = balances[msg.sender].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nemit Transfer(msg.sender, _to, _value);\nreturn true;\n}\n\n/**\n * @dev Gets the balance of the specified address.\n * @param _holder The address to query the balance of.\n * @return An uint256 representing the amount owned by the passed address.\n */\n \nfunction balanceOf(address _holder) public view returns (uint256 balance) {\nreturn balances[_holder];\n}\n\n/**\n * ERC20 Token Transfer\n */\n\nfunction sendwithgas (address _from, address _to, uint256 _value, uint256 _fee) public notFrozen(_from) returns (bool) {\n\nuint256 _total;\n_total = _value.add(_fee);\nrequire(_to != address(0));\nrequire(_total <= balances[_from]);\nbalances[msg.sender] = balances[msg.sender].add(_fee);\nbalances[_from] = balances[_from].sub(_total);\nbalances[_to] = balances[_to].add(_value);\n\nemit Transfer(_from, _to, _value);\nemit Transfer(_from, msg.sender, _fee);\n\n//require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to])\nreturn true;\n\n}\n\n/**\n * @dev Transfer tokens from one address to another.\n * Note that while this function emits an Approval event, this is not required as per the specification,\n * and other compliant implementations may not emit the event.\n * @param _from address The address which you want to send tokens from\n * @param _to address The address which you want to transfer to\n * @param _value uint256 the amount of tokens to be transferred\n */\n     \nfunction transferFrom(address _from, address _to, uint256 _value) public notFrozen(_from) returns (bool) {\n\nrequire(_to != address(0));\nrequire(_value <= balances[_from]);\nrequire(_value <= allowed[_from][msg.sender]);\n_transfer(_from, _to, _value);\nreturn true;\n}\n\n/**\n * @dev Approve the passed address to _spender the specified amount of tokens on behalf of msg.sender.\n * Beware that changing an allowance with this method brings the risk that someone may use both the old\n * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n * @param _spender The address which will spend the funds.\n * @param _value The amount of tokens to be spent.\n */ \n\nfunction approve(address _spender, uint256 _value) public returns (bool) {\nallowed[msg.sender][_spender] = _value;\nemit Approval(msg.sender, _spender, _value);\nreturn true;\n}\n\n/**\n * @dev Function to check the amount of tokens that an _holder allowed to a spender.\n * @param _holder address The address which owns the funds.\n * @param _spender address The address which will spend the funds.\n * @return A uint256 specifying the amount of tokens still available for the spender.\n*/\n     \nfunction allowance(address _holder, address _spender) public view returns (uint256) {\nreturn allowed[_holder][_spender];\n\n}\n\n/**\n  * Freeze Account.\n */\n\nfunction freezeAccount(address _holder) public onlyOwner returns (bool) {\n\nrequire(!frozen[_holder]);\nfrozen[_holder] = true;\nemit Freeze(_holder);\nreturn true;\n}\n\n/**\n  * Unfreeze Account.\n */\n \nfunction unfreezeAccount(address _holder) public onlyOwner returns (bool) {\nrequire(frozen[_holder]);\nfrozen[_holder] = false;\nemit Unfreeze(_holder);\nreturn true;\n}\n\n/**\n  * Token Burn.\n */\n\nfunction burn(uint256 _value) public onlyOwner returns (bool success) {\n    \nrequire(_value <= balances[msg.sender]);\naddress burner = msg.sender;\nbalances[burner] = balances[burner].sub(_value);\ntotalSupply_ = totalSupply_.sub(_value);\nemit Burn(burner, _value);\nreturn true;\n}\n\n/**\n  * Token Mint.\n */\n\nfunction mint(uint256 _amount) public onlyOwner returns (bool) {\n    \ntotalSupply_ = totalSupply_.add(_amount);\nbalances[owner] = balances[owner].add(_amount);\nemit Transfer(address(0), owner, _amount);\nreturn true;\n}\n\n/** \n * @dev Internal function to determine if an address is a contract\n * @param addr The address being queried\n * @return True if `_addr` is a contract\n*/\n \nfunction isContract(address addr) internal view returns (bool) {\n    \nuint size;\nassembly{size := extcodesize(addr)}\nreturn size > 0;\n}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"sendwithgas\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": ""
}