{
  "address": "0xe6f3a92eba8f0c7b509ce7a86eed9a85d5be6784",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bounties",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-15\n*/\n\npragma solidity  0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function owner() public view returns(address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    function isOwner() public view returns(bool) {\n        return msg.sender == _owner;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract ERC20 {\n    uint public totalSupply;\n\n    function balanceOf(address who) public view returns(uint);\n\n    function allowance(address owner, address spender) public view returns(uint);\n\n    function transfer(address to, uint value) public returns(bool ok);\n\n    function transferFrom(address from, address to, uint value) public returns(bool ok);\n\n    function approve(address spender, uint value) public returns(bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n\ncontract Bounties is Ownable {\n\n    using SafeMath for uint;\n\n    uint public totalTokensToClaim;\n    uint public totalBountyUsers;\n    uint public claimCount;\n    uint public totalClaimed;\n\n\n    mapping(address => bool) public claimed; // Tokens claimed by bounty members\n    Token public token;\n\n    mapping(address => bool) public bountyUsers;\n    mapping(address => uint) public bountyUsersAmounts;\n\n    constructor(Token _token) public {\n        require(_token != address(0));\n        token = Token(_token);\n    }\n\n    event TokensClaimed(address backer, uint count);\n    event LogBountyUser(address user, uint num);\n    event LogBountyUserMultiple(uint num);\n\n\n    // @notice Specify address of token contract\n    // @param _tokenAddress {address} address of the token contract\n    // @return res {bool}\n    function updateTokenAddress(Token _tokenAddress) external onlyOwner() returns(bool res) {\n        token = _tokenAddress;\n        return true;\n    }\n\n    // @notice contract owner can add one user at a time to claim bounties\n    function addBountyUser(address _user, uint _amount) public onlyOwner() returns (bool) {\n\n        require(_amount > 0);\n\n        if (bountyUsers[_user] != true) {\n            bountyUsers[_user] = true;\n            bountyUsersAmounts[_user] = _amount;\n            totalBountyUsers++;\n            totalTokensToClaim += _amount;\n            emit LogBountyUser(_user, totalBountyUsers);\n        }\n        return true;\n    }\n\n    // @notice contract owner can add multipl bounty users\n    function addBountyUserMultiple(address[] _users, uint[] _amount) external onlyOwner()  returns (bool) {\n\n        for (uint i = 0; i < _users.length; ++i) {\n\n            addBountyUser(_users[i], _amount[i]);\n        }\n        emit LogBountyUserMultiple(totalBountyUsers);\n        return true;\n    }\n\n    // {fallback function}\n    // @notice It will call internal function which handels allocation of tokens to bounty users.\n    // bounty members can send 0 ether transaction to this contract to claim their tokens.\n    function () external payable {\n        claimTokens();\n    }\n\n    // @notice\n    // This function will allow to transfer unclaimed tokens to another address.\n    function transferRemainingTokens(address _newAddress) external onlyOwner() returns (bool) {\n        require(_newAddress != address(0));\n        if (!token.transfer(_newAddress, token.balanceOf(this)))\n            revert(); // transfer tokens to admin account or multisig wallet\n        return true;\n    }\n\n\n    // @notice called to send tokens to bounty members by contract owner\n    // @param _backer {address} address of beneficiary\n    function claimTokensForUser(address _backer) external onlyOwner()  returns(bool) {\n        require(token != address(0));\n        require(bountyUsers[_backer]);\n        require(!claimed[_backer]);\n        claimCount++;\n        claimed[_backer] = true;\n        totalClaimed = totalClaimed.add(bountyUsersAmounts[_backer]);\n\n        if (!token.transfer(_backer, bountyUsersAmounts[_backer]))\n            revert(); // send claimed tokens to contributor account\n\n        emit TokensClaimed(_backer, bountyUsersAmounts[_backer]);\n        return true;\n    }\n\n    // @notice bounty users can claim tokens\n    // Tokens also can be claimed by sending 0 eth transaction to this contract.\n    function claimTokens() public {\n\n        require(token != address(0));\n        require(bountyUsers[msg.sender]);\n        require(!claimed[msg.sender]);\n        claimCount++;\n        claimed[msg.sender] = true;\n        totalClaimed = totalClaimed.add(bountyUsersAmounts[msg.sender]);\n\n        if (!token.transfer(msg.sender, bountyUsersAmounts[msg.sender]))\n            revert(); // send claimed tokens to contributor account\n\n        emit TokensClaimed(msg.sender, bountyUsersAmounts[msg.sender]);\n    }\n\n}\n\n// The token\ncontract Token is ERC20, Ownable {\n        function transfer(address _to, uint _value) public  returns(bool);\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610b8b833981016040525160008054600160a060020a03191633179055600160a060020a038116151561004957600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055610b13806100786000396000f3006080604052600436106100f05763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663040f9a5e81146100fa5780630fa85ab01461012f57806346e01a8e14610150578063482923951461018357806348c54b9d146101a757806362287b95146101bc5780636691461a146101dd5780638da4d3c9146101fe5780638da5cb5b146102135780638f32d59b1461024457806394dcf8b614610259578063b6c3de0614610285578063bd6fc18f1461029a578063c884ef83146102af578063d54ad2a1146102d0578063f2fde38b146102e5578063fc0c546a14610306575b6100f861031b565b005b34801561010657600080fd5b5061011b600160a060020a03600435166104b3565b604080519115158252519081900360200190f35b34801561013b57600080fd5b5061011b600160a060020a036004351661061d565b34801561015c57600080fd5b50610171600160a060020a03600435166107f5565b60408051918252519081900360200190f35b34801561018f57600080fd5b5061011b600160a060020a0360043516602435610807565b3480156101b357600080fd5b506100f861031b565b3480156101c857600080fd5b5061011b600160a060020a03600435166108d5565b3480156101e957600080fd5b5061011b600160a060020a03600435166108ea565b34801561020a57600080fd5b50610171610931565b34801561021f57600080fd5b50610228610937565b60408051600160a060020a039092168252519081900360200190f35b34801561025057600080fd5b5061011b610946565b34801561026557600080fd5b5061011b6024600480358281019290820135918135918201910135610957565b34801561029157600080fd5b506101716109fc565b3480156102a657600080fd5b50610171610a02565b3480156102bb57600080fd5b5061011b600160a060020a0360043516610a08565b3480156102dc57600080fd5b50610171610a1d565b3480156102f157600080fd5b506100f8600160a060020a0360043516610a23565b34801561031257600080fd5b50610228610a42565b600654600160a060020a0316151561033257600080fd5b3360009081526007602052604090205460ff16151561035057600080fd5b3360009081526005602052604090205460ff161561036d57600080fd5b600380546001908101909155336000908152600560209081526040808320805460ff19169094179093556008905220546004546103af9163ffffffff610a5116565b60049081556006543360008181526008602090815260408083205481517fa9059cbb0000000000000000000000000000000000000000000000000000000081529687019490945260248601939093529151600160a060020a039093169363a9059cbb936044808301949391928390030190829087803b15801561043157600080fd5b505af1158015610445573d6000803e3d6000fd5b505050506040513d602081101561045b57600080fd5b5051151561046857600080fd5b336000818152600860209081526040918290205482519384529083015280517f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309281900390910190a1565b60006104bd610946565b15156104c857600080fd5b600160a060020a03821615156104dd57600080fd5b600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039092169163a9059cbb91859184916370a082319160248083019260209291908290030181600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d602081101561057657600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156105de57600080fd5b505af11580156105f2573d6000803e3d6000fd5b505050506040513d602081101561060857600080fd5b5051151561061557600080fd5b506001919050565b6000610627610946565b151561063257600080fd5b600654600160a060020a0316151561064957600080fd5b600160a060020a03821660009081526007602052604090205460ff16151561067057600080fd5b600160a060020a03821660009081526005602052604090205460ff161561069657600080fd5b600380546001908101909155600160a060020a0383166000908152600560209081526040808320805460ff19169094179093556008905220546004546106e19163ffffffff610a5116565b6004908155600654600160a060020a0384811660008181526008602090815260408083205481517fa9059cbb0000000000000000000000000000000000000000000000000000000081529788019490945260248701939093529151929093169363a9059cbb93604480830194928390030190829087803b15801561076457600080fd5b505af1158015610778573d6000803e3d6000fd5b505050506040513d602081101561078e57600080fd5b5051151561079b57600080fd5b600160a060020a0382166000818152600860209081526040918290205482519384529083015280517f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309281900390910190a1506001919050565b60086020526000908152604090205481565b6000610811610946565b151561081c57600080fd5b6000821161082957600080fd5b600160a060020a03831660009081526007602052604090205460ff1615156001146108cc57600160a060020a0383166000818152600760209081526040808320805460ff191660019081179091556008835292819020869055600280548401908190558354870190935580519384529083019190915280517fb237f2926acd1cfc645e8733cb720a533a82ee2140ab6093cee4cacea65ad4ea9281900390910190a15b50600192915050565b60076020526000908152604090205460ff1681565b60006108f4610946565b15156108ff57600080fd5b5060068054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60035481565b600054600160a060020a031690565b600054600160a060020a0316331490565b600080610962610946565b151561096d57600080fd5b5060005b848110156109bb576109b286868381811061098857fe5b90506020020135600160a060020a031685858481811015156109a657fe5b90506020020135610807565b50600101610971565b60025460408051918252517f13eac132a4b6f55d808a0ee2bca05db0b60a89ae4bc5fdab8a13b44b65dfcc599181900360200190a150600195945050505050565b60015481565b60025481565b60056020526000908152604090205460ff1681565b60045481565b610a2b610946565b1515610a3657600080fd5b610a3f81610a6a565b50565b600654600160a060020a031681565b600082820183811015610a6357600080fd5b9392505050565b600160a060020a0381161515610a7f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820dbfb0b8bf5a35a49c74a2e12652289b5dbaea9feaa09499602cd7a22db05333c0029000000000000000000000000f444cd92e09cc8b2a23cd2eecb3c1e4cc8da6958",
  "constructorArguments": "000000000000000000000000f444cd92e09cc8b2a23cd2eecb3c1e4cc8da6958"
}