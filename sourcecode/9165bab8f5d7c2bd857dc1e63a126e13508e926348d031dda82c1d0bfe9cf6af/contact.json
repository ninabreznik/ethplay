{
  "address": "0xcd09bd97de12c8d4b2dfe02278afc47ac87f9481",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SimpleBreedingFactory",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-15\n*/\n\npragma solidity ^0.5.3;\n\npragma solidity ^0.5.3;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\ncontract ERC721 {\n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\ncontract KittyCoreInterface is ERC721  {\n    uint256 public autoBirthFee;\n    address public saleAuction;\n    address public siringAuction;\n    function breedWithAuto(uint256 _matronId, uint256 _sireId) public payable;\n    function createSaleAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external;\n    function createSiringAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external;\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\ncontract AuctionInterface {\n    function cancelAuction(uint256 _tokenId) external;\n}\n\ncontract Ownable {\n  address payable public owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  constructor(address payable _owner) public {\n    if(_owner == address(0)) {\n      owner = msg.sender;\n    } else {\n      owner = _owner;\n    }\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address payable _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  function _transferOwnership(address payable _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n\n  function destroy() public onlyOwner {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address payable _recipient) public onlyOwner {\n    selfdestruct(_recipient);\n  }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    constructor(address payable _owner) Ownable(_owner) public {}\n\n    modifier whenNotPaused() {\n        require(!paused, \"Contract paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused, \"Contract should be paused\");\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract CKProxy is Pausable {\n  KittyCoreInterface public kittyCore;\n  AuctionInterface public saleAuction;\n  AuctionInterface public siringAuction;\n\nconstructor(address payable _owner, address _kittyCoreAddress) Pausable(_owner) public {\n    require(_kittyCoreAddress != address(0));\n    kittyCore = KittyCoreInterface(_kittyCoreAddress);\n    require(kittyCore.supportsInterface(0x9a20483d));\n\n    saleAuction = AuctionInterface(kittyCore.saleAuction());\n    siringAuction = AuctionInterface(kittyCore.siringAuction());\n  }\n\n  /**\n   * Owner can transfer kitty\n   */\n  function transferKitty(address _to, uint256 _kittyId) external onlyOwner {\n    kittyCore.transfer(_to, _kittyId);\n  }\n\n  /**\n   * Owner can transfer kitty\n   */\n  function transferKittyBulk(address _to, uint256[] calldata _kittyIds) external onlyOwner {\n    for(uint256 i = 0; i < _kittyIds.length; i++) {\n      kittyCore.transfer(_to, _kittyIds[i]);\n    }\n  }\n\n  /**\n   * Owner can transferFrom kitty\n   */\n  function transferKittyFrom(address _from, address _to, uint256 _kittyId) external onlyOwner {\n    kittyCore.transferFrom(_from, _to, _kittyId);\n  }\n\n  /**\n   * Owner can approve kitty\n   */\n  function approveKitty(address _to, uint256 _kittyId) external  onlyOwner {\n    kittyCore.approve(_to, _kittyId);\n  }\n\n  /**\n   * Owner can start sales auction for kitty owned by contract\n   */\n  function createSaleAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external onlyOwner {\n    kittyCore.createSaleAuction(_kittyId, _startingPrice, _endingPrice, _duration);\n  }\n\n  /**\n   * Owner can cancel sales auction for kitty owned by contract\n   */\n  function cancelSaleAuction(uint256 _kittyId) external onlyOwner {\n    saleAuction.cancelAuction(_kittyId);\n  }\n\n  /**\n   * Owner can start siring auction for kitty owned by contract\n   */\n  function createSiringAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external onlyOwner {\n    kittyCore.createSiringAuction(_kittyId, _startingPrice, _endingPrice, _duration);\n  }\n\n  /**\n   * Owner can cancel siring auction for kitty owned by contract\n   */\n  function cancelSiringAuction(uint256 _kittyId) external onlyOwner {\n    siringAuction.cancelAuction(_kittyId);\n  }\n}\n\n /**\n * @title SimpleBreeding\n * @dev Simple breeding contract allows dedicated breeder to breed kitties on behalf of owner, while owner retains control over funds and kitties.\n * Breeder gets reward per each successful breed. Breeder can breed when contract is not paused.\n * Owner should transfer kitties and funds to contact to breeding starts and withdraw afterwards.\n * Breeder can only breed kitties owned by contract and cannot transfer funds or kitties itself.\n */\n\ncontract SimpleBreeding is CKProxy {\n  address payable public breeder;\n  uint256 public breederReward;\n  uint256 public originalBreederReward;\n  uint256 public maxBreedingFee;\n\n  event Breed(address breeder, uint256 matronId, uint256 sireId, uint256 reward);\n  event MaxBreedingFeeChange(uint256 oldBreedingFee, uint256 newBreedingFee);\n  event BreederRewardChange(uint256 oldBreederReward, uint256 newBreederReward);\n\n  constructor(address payable _owner, address payable _breeder, address _kittyCoreAddress, uint256 _breederReward) CKProxy(_owner, _kittyCoreAddress) public {\n    require(_breeder != address(0));\n    breeder = _breeder;\n    maxBreedingFee = kittyCore.autoBirthFee();\n    breederReward = _breederReward;\n    originalBreederReward = _breederReward;\n  }\n\n  /**\n   * Contract funds are used to cover breeding fees and pay callee\n   */\n  function () external payable {}\n\n  /**\n   * Owner can withdraw funds from contract\n   */\n  function withdraw(uint256 amount) external onlyOwner {\n    owner.transfer(amount);\n  }\n\n  /**\n   * Owner can adjust breedering fee if needed\n   */\n  function setMaxBreedingFee(\n    uint256 _maxBreedingFee\n  ) external onlyOwner {\n    emit MaxBreedingFeeChange(maxBreedingFee, _maxBreedingFee);\n    maxBreedingFee = _maxBreedingFee;\n  }\n\n   /**\n   * Owner or breeder can change breeder's reward if needed.\n   * Breeder can lower reward to make more attractive offer, it cannot set more than was originally agreed.\n   * Owner can increase reward to motivate breeder to breed during high gas price, it cannot set less than was set by breeder.\n   */\n  function setBreederReward(\n    uint256 _breederReward\n  ) external {\n    require(msg.sender == breeder || msg.sender == owner);\n    \n    if(msg.sender == owner) {\n      require(_breederReward >= originalBreederReward || _breederReward > breederReward, 'Reward value is less than required');\n    } else if(msg.sender == breeder) {\n      require(_breederReward <= originalBreederReward, 'Reward value is more than original');\n    }\n\n    emit BreederRewardChange(breederReward, _breederReward);\n    breederReward = _breederReward;\n  }\n\n  /**\n   * Breeder can call this function to breed kitties on behalf of owner\n   * Owner can breed as well\n   */\n  function breed(uint256 _matronId, uint256 _sireId) external whenNotPaused {\n    require(msg.sender == breeder || msg.sender == owner);\n    uint256 fee = kittyCore.autoBirthFee();\n    require(fee <= maxBreedingFee);\n    kittyCore.breedWithAuto.value(fee)(_matronId, _sireId);\n\n    uint256 reward = 0;\n    // breeder can reenter but that's OK, since breeder is payed per successful breed\n    if(msg.sender == breeder) {\n      reward = breederReward;\n      breeder.transfer(reward);\n    }\n\n    emit Breed(msg.sender, _matronId, _sireId, reward);\n  }\n\n  function destroy() public onlyOwner {\n    require(kittyCore.balanceOf(address(this)) == 0, 'Contract has tokens');\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address payable _recipient) public onlyOwner {\n    require(kittyCore.balanceOf(address(this)) == 0, 'Contract has tokens');\n    selfdestruct(_recipient);\n  }\n}\n\ncontract SimpleBreedingFactory is Pausable {\n    using SafeMath for uint256;\n\n    KittyCoreInterface public kittyCore;\n    uint256 public breederReward = 0.001 ether;\n    uint256 public commission = 0 wei;\n    uint256 public provisionFee;\n    mapping (bytes32 => address) public breederToContract;\n\n    event ContractCreated(address contractAddress, address breeder, address owner);\n    event ContractRemoved(address contractAddress);\n\n    constructor(address _kittyCoreAddress) Pausable(address(0)) public {\n        provisionFee = commission + breederReward;\n        kittyCore = KittyCoreInterface(_kittyCoreAddress);\n        require(kittyCore.supportsInterface(0x9a20483d), \"Invalid contract\");\n    }\n\n    /**\n     * Owner can adjust breeder reward\n     * Factory contract does not use breeder reward directly, but sets it to Breeding contracts during contract creation\n     * Existing contracts won't be affected by the change\n     */\n    function setBreederReward(uint256 _breederReward) external onlyOwner {\n        require(_breederReward > 0, \"Breeder reward must be greater than 0\");\n        breederReward = _breederReward;\n        provisionFee = uint256(commission).add(breederReward);\n    }\n\n    /**\n     * Owner can set flat fee for contract creation\n     */\n    function setCommission(uint256 _commission) external onlyOwner {\n        commission = _commission;\n        provisionFee = uint256(commission).add(breederReward);\n    }\n\n    /**\n     * Just in case owner can change address of Kitty Core contract\n     * Factory contract does not user Kitty Core directly, but sets it to Breeding contracts during contract creation\n     * Existing contracts won't be affected by the change\n     */\n    function setKittyCore(address _kittyCore) external onlyOwner {\n        kittyCore = KittyCoreInterface(_kittyCore);\n        require(kittyCore.supportsInterface(0x9a20483d), \"Invalid contract\");\n    }\n\n    function () external payable {\n        revert(\"Do not send funds to contract\");\n    }\n\n    /**\n     * Owner can withdraw funds from contracts, if any\n     * Contract can only gets funds from contraction creation commission\n     */\n    function withdraw(uint256 amount) external onlyOwner {\n        owner.transfer(amount);\n    }\n    \n    /**\n     * Create new breeding contract for breeder. This function should be called by user during breeder enrollment process.\n     * Message value should be greater than breeder reward + commission. Value excess wil be transfered to created contract.\n     * Breeder reward amount is transfered to breeder's address so it can start sending transactions\n     * Comission amount stays in the contract\n     * When contract is created, provisioning script can get address its address from breederToContract mapping\n     */\n    function createContract(address payable _breederAddress) external payable whenNotPaused {\n        require(msg.value >= provisionFee, \"Invalid value\");\n\n        // owner's address and breeder's address should uniquely identify contract\n        // also we need to avoid situation when existing contract address is overwritten by enrolling breeder by same owner twice,\n        // or enrolling same breeder by different owner\n        bytes32 key = keccak256(abi.encodePacked(_breederAddress, msg.sender));\n        require(breederToContract[key] == address(0), \"Breeder already enrolled\");\n        \n        //transfer value excess to new contract, owner can widthdraw later or use it for breeding\n        uint256 excess = uint256(msg.value).sub(provisionFee);\n        SimpleBreeding newContract = new SimpleBreeding(msg.sender, _breederAddress, address(kittyCore), breederReward);\n        breederToContract[key] = address(newContract);\n        if(excess > 0) {\n            address(newContract).transfer(excess);\n        }\n\n        //transfer 1st breeder reward to breeder\n        _breederAddress.transfer(breederReward);\n\n        emit ContractCreated(address(newContract), _breederAddress, msg.sender);\n    }\n\n    /**\n     * In most cases it does not make sense to delete contract's address. If needed it can be done by owner of factory contract.\n     * This will not destroy breeding contract, just remove it address from the mapping, so user can deploy new contract for same breeder\n     */\n    function removeContract(address _breederAddress, address _ownerAddress) external onlyOwner {\n        bytes32 key = keccak256(abi.encodePacked(_breederAddress, _ownerAddress));\n        address contractAddress = breederToContract[key];\n        require(contractAddress != address(0), \"Breeder not enrolled\");\n        delete breederToContract[key];\n\n        emit ContractRemoved(contractAddress);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittyCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_breederReward\",\"type\":\"uint256\"}],\"name\":\"setBreederReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"breederToContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyCore\",\"type\":\"address\"}],\"name\":\"setKittyCore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breederReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_breederAddress\",\"type\":\"address\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"provisionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_breederAddress\",\"type\":\"address\"}],\"name\":\"createContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"breeder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405260008060146101000a81548160ff02191690831515021790555066038d7ea4c68000600255600060035534801561003a57600080fd5b50604051602080620045458339810180604052602081101561005b57600080fd5b8101908080519060200190929190505050600080600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100e957336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061012a565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50506002546003540160048190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7639a20483d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180827c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b15801561024b57600080fd5b505afa15801561025f573d6000803e3d6000fd5b505050506040513d602081101561027557600080fd5b810190808051906020019092919050505015156102fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420636f6e74726163740000000000000000000000000000000081525060200191505060405180910390fd5b5061423a806200030b6000396000f3fe6080604052600436106200013f576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b11620000c0578063e118275c116200008a578063e118275c1462000515578063e14891911462000543578063e2d73ccd1462000571578063f2fde38b14620005b8578063f5074f41146200060d576200013f565b80638da5cb5b14620003c35780639d7ac435146200041d578063d0826cbb1462000472578063de0f725d14620004a0576200013f565b8063489b388c116200010e578063489b388c146200029f5780634feeaae214620002de5780635c975abb146200035d57806383197ef0146200038f5780638456cb5914620003a9576200013f565b80632e1a7d4d14620001ad578063355e6b4314620001ec5780633d115334146200022b5780633f4ba83a1462000285575b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f446f206e6f742073656e642066756e647320746f20636f6e747261637400000081525060200191505060405180910390fd5b348015620001ba57600080fd5b50620001ea60048036036020811015620001d357600080fd5b810190808035906020019092919050505062000662565b005b348015620001f957600080fd5b5062000229600480360360208110156200021257600080fd5b81019080803590602001909291905050506200072a565b005b3480156200023857600080fd5b5062000243620007af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200029257600080fd5b506200029d620007d5565b005b348015620002ac57600080fd5b50620002dc60048036036020811015620002c557600080fd5b8101908080359060200190929190505050620008fe565b005b348015620002eb57600080fd5b506200031b600480360360208110156200030457600080fd5b8101908080359060200190929190505050620009e0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200036a57600080fd5b506200037562000a13565b604051808215151515815260200191505060405180910390f35b3480156200039c57600080fd5b50620003a762000a26565b005b348015620003b657600080fd5b50620003c162000abc565b005b348015620003d057600080fd5b50620003db62000be7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200042a57600080fd5b5062000470600480360360208110156200044357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000c0c565b005b3480156200047f57600080fd5b506200048a62000e30565b6040518082815260200191505060405180910390f35b348015620004ad57600080fd5b506200051360048036036040811015620004c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000e36565b005b3480156200052257600080fd5b506200052d620010b8565b6040518082815260200191505060405180910390f35b3480156200055057600080fd5b506200055b620010be565b6040518082815260200191505060405180910390f35b620005b6600480360360208110156200058957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620010c4565b005b348015620005c557600080fd5b506200060b60048036036020811015620005de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200161c565b005b3480156200061a57600080fd5b5062000660600480360360208110156200063357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001686565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620006be57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000726573d6000803e3d6000fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200078657600080fd5b80600381905550620007a6600254600354620016fb90919063ffffffff16565b60048190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200083157600080fd5b600060149054906101000a900460ff161515620008b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436f6e74726163742073686f756c64206265207061757365640000000000000081525060200191505060405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200095a57600080fd5b600081111515620009b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180620041ea6025913960400191505060405180910390fd5b80600281905550620009d7600254600354620016fb90919063ffffffff16565b60048190555050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000a8257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000b1857600080fd5b600060149054906101000a900460ff1615151562000b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436f6e747261637420706175736564000000000000000000000000000000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000c6857600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7639a20483d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180827c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b15801562000d7b57600080fd5b505afa15801562000d90573d6000803e3d6000fd5b505050506040513d602081101562000da757600080fd5b8101908080519060200190929190505050151562000e2d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420636f6e74726163740000000000000000000000000000000081525060200191505060405180910390fd5b50565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000e9257600080fd5b60008282604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905060006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151562001019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f42726565646572206e6f7420656e726f6c6c656400000000000000000000000081525060200191505060405180910390fd5b6005600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f8d30d41865a0b811b9545d879520d2dde9f4cc49e4241f486ad9752bc904b56581604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150505050565b60045481565b60035481565b600060149054906101000a900460ff161515156200114a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436f6e747261637420706175736564000000000000000000000000000000000081525060200191505060405180910390fd5b6004543410151515620011c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c69642076616c75650000000000000000000000000000000000000081525060200191505060405180910390fd5b60008133604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140192505050604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151562001346576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4272656564657220616c726561647920656e726f6c6c6564000000000000000081525060200191505060405180910390fd5b60006200135f600454346200171d90919063ffffffff16565b905060003384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025460405162001399906200183b565b808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050604051809103906000f08015801562001459573d6000803e3d6000fd5b509050806005600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600082111562001501578073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015620014ff573d6000803e3d6000fd5b505b8373ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f193505050501580156200154a573d6000803e3d6000fd5b507f1202c61d7d89c76ba1493b085733ede04e071a2a76bb0fbae1345f128fe8b29d818533604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a150505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200167857600080fd5b620016838162001740565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620016e257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60008082840190508381101515156200171357600080fd5b8091505092915050565b60008282111515156200172f57600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200177d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6129a0806200184a8339019056fe608060405260008060146101000a81548160ff0219169083151502179055503480156200002b57600080fd5b50604051608080620029a0833981018060405260808110156200004d57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505083828180600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000fc57336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200013d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200017c57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7639a20483d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180827c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b1580156200028f57600080fd5b505afa158015620002a4573d6000803e3d6000fd5b505050506040513d6020811015620002bb57600080fd5b81019080805190602001909291905050501515620002d857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6cbe3516040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200035d57600080fd5b505afa15801562000372573d6000803e3d6000fd5b505050506040513d60208110156200038957600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321717ebf6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200045f57600080fd5b505afa15801562000474573d6000803e3d6000fd5b505050506040513d60208110156200048b57600080fd5b8101908080519060200190929190505050600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156200051b57600080fd5b82600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0c35c056040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015620005e157600080fd5b505afa158015620005f6573d6000803e3d6000fd5b505050506040513d60208110156200060d57600080fd5b810190808051906020019092919050505060078190555080600581905550806006819055505050505061235a80620006466000396000f3fe60806040526004361061019d576000357c0100000000000000000000000000000000000000000000000000000000900480638456cb59116100ee578063d0826cbb116100a7578063f2fde38b11610081578063f2fde38b146107b6578063f5074f4114610807578063fc1e747614610858578063ffc42470146108835761019d565b8063d0826cbb146106ef578063d9ecad7b1461071a578063e6cbe3511461075f5761019d565b80638456cb59146104ce5780638da5cb5b146104e55780638fb4fc4f1461053c578063ae9dfc4d146105e2578063b2e2418a14610639578063c31f586d146106b45761019d565b80633d280e8e1161015b578063489b388c11610135578063489b388c146103f45780634ad8c9381461042f5780635c975abb1461048857806383197ef0146104b75761019d565b80633d280e8e146103495780633d7d3f5a146103845780633f4ba83a146103dd5761019d565b8062aa418f1461019f5780630504d9c5146101fa578063103335671461022557806321717ebf146102605780632e1a7d4d146102b75780633d115334146102f2575b005b3480156101ab57600080fd5b506101f8600480360360408110156101c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108de565b005b34801561020657600080fd5b5061020f610a1a565b6040518082815260200191505060405180910390f35b34801561023157600080fd5b5061025e6004803603602081101561024857600080fd5b8101908080359060200190929190505050610a20565b005b34801561026c57600080fd5b50610275610b27565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c357600080fd5b506102f0600480360360208110156102da57600080fd5b8101908080359060200190929190505050610b4d565b005b3480156102fe57600080fd5b50610307610c13565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035557600080fd5b506103826004803603602081101561036c57600080fd5b8101908080359060200190929190505050610c39565b005b34801561039057600080fd5b506103db600480360360808110156103a757600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610cdf565b005b3480156103e957600080fd5b506103f2610e01565b005b34801561040057600080fd5b5061042d6004803603602081101561041757600080fd5b8101908080359060200190929190505050610f28565b005b34801561043b57600080fd5b506104866004803603608081101561045257600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919050505061119e565b005b34801561049457600080fd5b5061049d6112c0565b604051808215151515815260200191505060405180910390f35b3480156104c357600080fd5b506104cc6112d3565b005b3480156104da57600080fd5b506104e36114d5565b005b3480156104f157600080fd5b506104fa6115fe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054857600080fd5b506105e06004803603604081101561055f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561059c57600080fd5b8201836020820111156105ae57600080fd5b803590602001918460208302840111640100000000831117156105d057600080fd5b9091929391929390505050611623565b005b3480156105ee57600080fd5b506105f7611793565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064557600080fd5b506106b26004803603606081101561065c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117b9565b005b3480156106c057600080fd5b506106ed600480360360208110156106d757600080fd5b810190808035906020019092919050505061192a565b005b3480156106fb57600080fd5b50610704611a31565b6040518082815260200191505060405180910390f35b34801561072657600080fd5b5061075d6004803603604081101561073d57600080fd5b810190808035906020019092919080359060200190929190505050611a37565b005b34801561076b57600080fd5b50610774611e40565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107c257600080fd5b50610805600480360360208110156107d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e66565b005b34801561081357600080fd5b506108566004803603602081101561082a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ecd565b005b34801561086457600080fd5b5061086d6120ae565b6040518082815260200191505060405180910390f35b34801561088f57600080fd5b506108dc600480360360408110156108a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120b4565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561093957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156109fe57600080fd5b505af1158015610a12573d6000803e3d6000fd5b505050505050565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7b57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396b5a755826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015610b0c57600080fd5b505af1158015610b20573d6000803e3d6000fd5b5050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ba857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c0f573d6000803e3d6000fd5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c9457600080fd5b7f693d3e7d14d8f845811b787f8d28c1aef4b4bac15721fbea5dc8a8a7c85da61b60075482604051808381526020018281526020019250505060405180910390a18060078190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d3a57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d7d3f5a858585856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001848152602001838152602001828152602001945050505050600060405180830381600087803b158015610de357600080fd5b505af1158015610df7573d6000803e3d6000fd5b5050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e5c57600080fd5b600060149054906101000a900460ff161515610ee0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436f6e74726163742073686f756c64206265207061757365640000000000000081525060200191505060405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610fd057506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610fdb57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561109e5760065481101580611042575060055481115b1515611099576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806122eb6022913960400191505060405180910390fd5b611153565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611152576006548111151515611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061230d6022913960400191505060405180910390fd5b5b5b7ffdac16f44d837cccd5f18e297e4e2c1366844b81ed087ea6506eb1f1bcd7b6f460055482604051808381526020018281526020019250505060405180910390a18060058190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111f957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad8c938858585856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001848152602001838152602001828152602001945050505050600060405180830381600087803b1580156112a257600080fd5b505af11580156112b6573d6000803e3d6000fd5b5050505050505050565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132e57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d602081101561141557600080fd5b810190808051906020019092919050505014151561149b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436f6e74726163742068617320746f6b656e730000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561153057600080fd5b600060149054906101000a900460ff161515156115b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436f6e747261637420706175736564000000000000000000000000000000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561167e57600080fd5b60008090505b8282905081101561178d57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585858581811015156116dc57fe5b905060200201356040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561176857600080fd5b505af115801561177c573d6000803e3d6000fd5b505050508080600101915050611684565b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561181457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561190d57600080fd5b505af1158015611921573d6000803e3d6000fd5b50505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561198557600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396b5a755826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b5050505050565b60055481565b600060149054906101000a900460ff16151515611abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436f6e747261637420706175736564000000000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b6457506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611b6f57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0c35c056040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611bf557600080fd5b505afa158015611c09573d6000803e3d6000fd5b505050506040513d6020811015611c1f57600080fd5b810190808051906020019092919050505090506007548111151515611c4357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7d8c8838285856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001828152602001925050506000604051808303818588803b158015611cdc57600080fd5b505af1158015611cf0573d6000803e3d6000fd5b50505050506000809050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611dbf576005549050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611dbd573d6000803e3d6000fd5b505b7fddf1e8fec06a50aa72b8a39a06787808c53eca73b2bd1cc995681cf7b801465033858584604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a150505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ec157600080fd5b611eca816121f0565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f2857600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611fe557600080fd5b505afa158015611ff9573d6000803e3d6000fd5b505050506040513d602081101561200f57600080fd5b8101908080519060200190929190505050141515612095576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436f6e74726163742068617320746f6b656e730000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561210f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156121d457600080fd5b505af11580156121e8573d6000803e3d6000fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561222c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe5265776172642076616c7565206973206c657373207468616e2072657175697265645265776172642076616c7565206973206d6f7265207468616e206f726967696e616ca165627a7a72305820415d3718bd51e9a2d179ab2e727c3e3c482db902f7607a5a94da2c6775443e3a00294272656564657220726577617264206d7573742062652067726561746572207468616e2030a165627a7a723058200c8c9d2efc58033a6b684b4c8afd69bb05d9df54841d9bfa407e03025361c8c7002900000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d",
  "constructorArguments": "00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d"
}