{
  "address": "0xa79ebc75ac9cab762c807054a96615b213e42cd6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SellPayee",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\npragma solidity > 0.4.99 <0.6.0;\n\ninterface IERC20Token {\n    function balanceOf(address owner) external returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function burn(uint256 _value) external returns (bool);\n    function decimals() external returns (uint256);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n}\n\ninterface IAssetSplitContracts {\n function addContract(address payable _contractAddress, address payable _creatorAddress, uint256 _contractType) external returns (bool success);\n}\n\ninterface IShareManager {\n    function getSharesByShareOwner(address _shareOwner) external view returns (uint[] memory);\n    function shares(uint _id) external view returns (address shareholder, uint256 sharePercentage);\n    function sharesToManager(uint _id) external view returns (address shareowner);\n}\n\ninterface IPayeeShare {\n    function owner() external view returns (address payable shareowner);\n    function payeePartsToSell() external view returns (uint256);\n    function payeePricePerPart() external view returns (uint256);\n}\n\ncontract Ownable {\n  address payable public _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n  * account.\n  */\n  constructor() internal {\n    _owner = tx.origin;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n  * @return the address of the owner.\n  */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n  * @return true if `msg.sender` is the owner of the contract.\n  */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n  * @dev Allows the current owner to relinquish control of the contract.\n  * @notice Renouncing to ownership will leave the contract without an owner.\n  * It will not be possible to call the functions with the `onlyOwner`\n  * modifier anymore.\n  */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n  * @param newOwner The address to transfer ownership to.\n  */\n  function transferOwnership(address payable newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n  * @dev Transfers control of the contract to a newOwner.\n  * @param newOwner The address to transfer ownership to.\n  */\n  function _transferOwnership(address payable newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract SellPayee is Ownable{\n\n    IERC20Token public tokenContract;\n    IAssetSplitContracts public assetSplitContract;\n    IShareManager public shareManagerContract;\n    \n    \n    string public constant createdBy = \"AssetSplit.org - the guys who cut the pizza\";\n    \n    uint256 priceInEther = 500 finney;\n    uint256 priceInToken = 1;\n    \n    using SafeMath for uint256;\n    \n    constructor(address _tokenContract, address _AssetSplitContracts, address _shareManager) public {\n        tokenContract = IERC20Token(_tokenContract);\n        assetSplitContract = IAssetSplitContracts(_AssetSplitContracts);\n        shareManagerContract = IShareManager(_shareManager);\n    }\n    \n    function getShareAddressFromId(uint _id) internal view returns (address) {\n        address shareAddress;\n        (shareAddress,) = shareManagerContract.shares(_id);\n        return shareAddress;\n    }\n    \n    \n    function isAllowed(address payable _contractAddress) public view returns (bool) {\n        uint[] memory result = shareManagerContract.getSharesByShareOwner(msg.sender);\n        uint counter = 0;\n        for (uint i = 0; i < result.length; i++) {\n          if (getShareAddressFromId(result[i]) == _contractAddress) {\n            counter++;\n            return true;\n          }\n        }\n        return false;\n    }\n \n    \n    function addASC(address payable _contractAddress) public payable returns (bool success) {\n        if (msg.value >= priceInEther) {\n           IPayeeShare shareContract;\n           shareContract = IPayeeShare(_contractAddress);\n           require(shareContract.owner() == msg.sender);\n           require(isAllowed(_contractAddress) == true);\n           require(shareContract.payeePartsToSell() > 0);\n           require(shareContract.payeePricePerPart() > 0);\n           _owner.transfer(address(this).balance);\n           assetSplitContract.addContract(_contractAddress, msg.sender, 1);\n           return true;\n        } else {\n            IPayeeShare shareContract;\n            shareContract = IPayeeShare(_contractAddress);\n            require(tokenContract.balanceOf(msg.sender) >= priceInToken.mul(shareContract.payeePartsToSell()).mul(10 ** tokenContract.decimals()));\n            require(tokenContract.transferFrom(msg.sender, _owner, priceInToken.mul(shareContract.payeePartsToSell()).mul(10 ** tokenContract.decimals())));\n            require(shareContract.owner() == msg.sender);\n            require(isAllowed(_contractAddress) == true);\n            require(shareContract.payeePartsToSell() > 0);\n            require(shareContract.payeePricePerPart() > 0);\n            assetSplitContract.addContract(_contractAddress, msg.sender, 1);\n            return true;\n        }\n        \n    }\n}",
  "bytecode": "60806040526706f05b59d3b20000600455600160055534801561002157600080fd5b506040516060806119e58339810180604052606081101561004157600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a382600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506117ee806101f76000396000f3fe6080604052600436106100b9576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100815780638da5cb5b1461026a5780638f32d59b146102c157806390afe976146102f0578063b2bdfa7b1461034c578063babcc539146103a3578063f2fde38b1461040c576100b9565b80630d8ba190146100be5780633a5673a41461011557806355a373d6146101a5578063715018a6146101fc5780637f3d9cea14610213575b600080fd5b3480156100ca57600080fd5b506100d361045d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012157600080fd5b5061012a610483565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016a57808201518184015260208101905061014f565b50505050905090810190601f1680156101975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b157600080fd5b506101ba6104a0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561020857600080fd5b506102116104c6565b005b34801561021f57600080fd5b50610228610598565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027657600080fd5b5061027f6105be565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102cd57600080fd5b506102d66105e7565b604051808215151515815260200191505060405180910390f35b6103326004803603602081101561030657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061063e565b604051808215151515815260200191505060405180910390f35b34801561035857600080fd5b50610361611353565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103af57600080fd5b506103f2600480360360208110156103c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611378565b604051808215151515815260200191505060405180910390f35b34801561041857600080fd5b5061045b6004803603602081101561042f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061155f565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060405190810160405280602b8152602001611798602b913981565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104ce6105e7565b15156104d957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600060045434101515610a565760008290503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156106c957600080fd5b505afa1580156106dd573d6000803e3d6000fd5b505050506040513d60208110156106f357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561072657600080fd5b6001151561073384611378565b151514151561074157600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663dce388b66040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156107a557600080fd5b505afa1580156107b9573d6000803e3d6000fd5b505050506040513d60208110156107cf57600080fd5b81019080805190602001909291905050501115156107ec57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16630ead3ec86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d602081101561087a57600080fd5b810190808051906020019092919050505011151561089757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610915573d6000803e3d6000fd5b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8b9a2a0843360016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610a1057600080fd5b505af1158015610a24573d6000803e3d6000fd5b505050506040513d6020811015610a3a57600080fd5b810190808051906020019092919050505050600191505061134e565b6000829050610be1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ae457600080fd5b505af1158015610af8573d6000803e3d6000fd5b505050506040513d6020811015610b0e57600080fd5b8101908080519060200190929190505050600a0a610bd38373ffffffffffffffffffffffffffffffffffffffff1663dce388b66040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610b8757600080fd5b505afa158015610b9b573d6000803e3d6000fd5b505050506040513d6020811015610bb157600080fd5b810190808051906020019092919050505060055461157e90919063ffffffff16565b61157e90919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610c9e57600080fd5b505af1158015610cb2573d6000803e3d6000fd5b505050506040513d6020811015610cc857600080fd5b810190808051906020019092919050505010151515610ce657600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ecd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dd057600080fd5b505af1158015610de4573d6000803e3d6000fd5b505050506040513d6020811015610dfa57600080fd5b8101908080519060200190929190505050600a0a610ebf8773ffffffffffffffffffffffffffffffffffffffff1663dce388b66040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610e7357600080fd5b505afa158015610e87573d6000803e3d6000fd5b505050506040513d6020811015610e9d57600080fd5b810190808051906020019092919050505060055461157e90919063ffffffff16565b61157e90919063ffffffff16565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b505050506040513d6020811015610faf57600080fd5b81019080805190602001909291905050501515610fcb57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d602081101561106e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156110a157600080fd5b600115156110ae84611378565b15151415156110bc57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663dce388b66040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561112057600080fd5b505afa158015611134573d6000803e3d6000fd5b505050506040513d602081101561114a57600080fd5b810190808051906020019092919050505011151561116757600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16630ead3ec86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d60208110156111f557600080fd5b810190808051906020019092919050505011151561121257600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8b9a2a0843360016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561130c57600080fd5b505af1158015611320573d6000803e3d6000fd5b505050506040513d602081101561133657600080fd5b81019080805190602001909291905050505060019150505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663359fe132336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561143757600080fd5b505afa15801561144b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561147557600080fd5b81019080805164010000000081111561148d57600080fd5b828101905060208101848111156114a357600080fd5b81518560208202830111640100000000821117156114c057600080fd5b50509291905050509050600080905060008090505b8251811015611552578473ffffffffffffffffffffffffffffffffffffffff16611515848381518110151561150657fe5b906020019060200201516115b9565b73ffffffffffffffffffffffffffffffffffffffff1614156115455781806001019250506001935050505061155a565b80806001019150506114d5565b506000925050505b919050565b6115676105e7565b151561157257600080fd5b61157b8161169d565b50565b60008083141561159157600090506115b3565b600082840290508284828115156115a457fe5b041415156115ae57fe5b809150505b92915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357a858fc846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b15801561164a57600080fd5b505afa15801561165e573d6000803e3d6000fd5b505050506040513d604081101561167457600080fd5b810190808051906020019092919080519060200190929190505050508091505080915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116d957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe417373657453706c69742e6f7267202d2074686520677579732077686f20637574207468652070697a7a61a165627a7a723058202cb630c683f781adb91998fcc54c136d06ba58fe0f37686fcff253ab5d4d187900290000000000000000000000002d1e23144b89fc7364ed3efcd5af04093f7d9a3d00000000000000000000000091ff47f4a9bf75dcc145105ac43674c884c2ea3d00000000000000000000000014796a10f6dde2a5575cba91cebbdfffe45ca45a",
  "constructorArguments": "0000000000000000000000002d1e23144b89fc7364ed3efcd5af04093f7d9a3d00000000000000000000000091ff47f4a9bf75dcc145105ac43674c884c2ea3d00000000000000000000000014796a10f6dde2a5575cba91cebbdfffe45ca45a"
}