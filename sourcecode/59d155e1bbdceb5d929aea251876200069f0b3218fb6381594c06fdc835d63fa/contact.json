{
  "address": "0x26ab4e37a0ca037791c9c935a5691d63466ba487",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ImmlaToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-16\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) pure internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) pure internal returns (uint256) {\n    assert(b != 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) pure internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) pure internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  \n  function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) pure internal returns (uint256) {\n      return div(mul(number, numerator), denominator);\n  }\n}\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n\n  // timestamps until all tokens transfers are blocked\n  uint256 public blockedTimeForBountyTokens = 0;\n  uint256 public blockedTimeForInvestedTokens = 0;\n\n  // minimum timestamp that tokens will be blocked for transfers\n  uint256 constant MIN_blockedTimeForBountyTokens = 1524949200; //29.04.2018, 0:00:00\n  uint256 constant MIN_blockedTimeForInvestedTokens = 1521061200; //15.03.2018, 0:00:00\n\n  //Addresses pre-ico investors\n  mapping(address => bool) preIcoAccounts;\n\n  //Addresses bounty campaign\n  mapping(address => bool) bountyAccounts;\n\n  //Addresses with founders tokens and flag is it blocking transfers from this address\n  mapping(address => uint) founderAccounts; // 1 - block transfers, 2 - do not block transfers\n\n  function Pausable() public {\n    blockedTimeForBountyTokens = MIN_blockedTimeForBountyTokens;\n    blockedTimeForInvestedTokens = MIN_blockedTimeForInvestedTokens;\n  }\n\n  /**\n  * @dev called by owner for changing blockedTimeForBountyTokens\n  */\n  function changeBlockedTimeForBountyTokens(uint256 _blockedTime) onlyOwner external {\n    require(_blockedTime < MIN_blockedTimeForBountyTokens);\n    blockedTimeForBountyTokens = _blockedTime;\n  }\n\n  /**\n* @dev called by owner for changing blockedTimeForInvestedTokens\n*/\n  function changeBlockedTimeForInvestedTokens(uint256 _blockedTime) onlyOwner external {\n    require(_blockedTime < MIN_blockedTimeForInvestedTokens);\n    blockedTimeForInvestedTokens = _blockedTime;\n  }\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!getPaused());\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(getPaused());\n    _;\n  }\n\n  function getPaused() internal returns (bool) {\n    if (now > blockedTimeForBountyTokens && now > blockedTimeForInvestedTokens) {\n      return false;\n    } else {\n      uint256 blockedTime = checkTimeForTransfer(msg.sender);\n      return now < blockedTime;\n    }\n  }\n\n\n  /**\n  * @dev called by owner, add preIcoAccount\n  */\n  function addPreIcoAccounts(address _addr) onlyOwner internal {\n    require(_addr != 0x0);\n    preIcoAccounts[_addr] = true;\n  }\n\n  /**\n  * @dev called by owner, add addBountyAccount\n  */\n  function addBountyAccounts(address _addr) onlyOwner internal {\n    require(_addr != 0x0);\n    preIcoAccounts[_addr] = true;\n  }\n\n  /**\n  * @dev called by owner, add founderAccount\n  */\n  function addFounderAccounts(address _addr, uint _flag) onlyOwner external {\n    require(_addr != 0x0);\n    founderAccounts[_addr] = _flag;\n  }\n\n  /**\n   * @dev called by external contract (ImmlaToken) for checking rights for transfers, depends on who owner of this address\n   */\n  function checkTimeForTransfer(address _account) internal returns (uint256) {\n    if (founderAccounts[_account] == 1) {\n      return blockedTimeForInvestedTokens;\n    } else if(founderAccounts[_account] == 2) {\n      return 1; //do not block transfers\n    } else if (preIcoAccounts[_account]) {\n      return blockedTimeForInvestedTokens;\n    } else if (bountyAccounts[_account]) {\n      return blockedTimeForBountyTokens;\n    } else {\n      return blockedTimeForInvestedTokens;\n    }\n  }\n}\n\n\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is PausableToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to mint tokens for pre-ico\n   */\n  function multiMintPreico(address[] _dests, uint256[] _values) onlyOwner canMint public returns (uint256) {\n    uint256 i = 0;\n    uint256 count = _dests.length;\n    while (i < count) {\n      totalSupply = totalSupply.add(_values[i]);\n      balances[_dests[i]] = balances[_dests[i]].add(_values[i]);\n      addPreIcoAccounts(_dests[i]);\n      Mint(_dests[i], _values[i]);\n      Transfer(address(0), _dests[i], _values[i]);\n      i += 1;\n    }\n    return(i);\n  }\n\n  /**\n   * @dev called by the owner to mint tokens for pre-ico\n   */\n  function multiMintBounty(address[] _dests, uint256[] _values) onlyOwner canMint public returns (uint256) {\n    uint256 i = 0;\n    uint256 count = _dests.length;\n    while (i < count) {\n      totalSupply = totalSupply.add(_values[i]);\n      balances[_dests[i]] = balances[_dests[i]].add(_values[i]);\n      addBountyAccounts(_dests[i]);\n      Mint(_dests[i], _values[i]);\n      Transfer(address(0), _dests[i], _values[i]);\n      i += 1;\n    }\n    return(i);\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\n\n/**\n * @title ERC20 token that transferable by owner\n */\ncontract TransferableByOwner is StandardToken, Ownable {\n\n  // timestamp until owner could transfer all tokens\n  uint256 constant public OWNER_TRANSFER_TOKENS = now + 1 years;\n\n  /**\n   * @dev Transfer tokens from one address to another by owner\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferByOwner(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\n    require(now < OWNER_TRANSFER_TOKENS);\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n}\n\n\n\ncontract ImmlaToken is MintableToken, TransferableByOwner {\n    using SafeMath for uint256;\n\n    /*\n     * Token meta data\n     */\n    string public constant name = \"IMMLA\";\n    string public constant symbol = \"IML\";\n    uint8 public constant decimals = 18;\n}\n\n\n\ncontract ImmlaDistribution is Ownable {\n    using SafeMath for uint256;\n\n    // minimum amount of tokens a buyer gets per 1 ether\n    uint256 constant RATE_MIN = 3640;\n\n    // timestamp until owner could transfer all tokens\n    uint256 constant public OWNER_TRANSFER_TOKENS = now + 1 years;\n\n    // The token being sold\n    ImmlaToken public token;\n\n    //maximum tokens for mint in additional emission\n    uint256 public constant emissionLimit = 418124235 * 1 ether;\n\n    // amount of tokens that already minted in additional emission\n    uint256 public additionalEmission = 0;\n\n    // amount of token that currently available for buying\n    uint256 public availableEmission = 0;\n\n    bool public mintingPreIcoFinish = false;\n    bool public mintingBountyFinish = false;\n    bool public mintingFoundersFinish = false;\n\n    // address where funds are collected (by default t_Slava address)\n    address public wallet;\n\n    // how many token units a buyer gets per 1 ether\n    uint256 public rate;\n\n    address constant public t_ImmlaTokenDepository = 0x64075EEf64d9E105A61227CcCd5fA9F6b54DB278;\n    address constant public t_ImmlaTokenDepository2 = 0x2Faaf371Af6392fdd3016E111fB4b3B551Ee46aB;\n    address constant public t_ImmlaBountyTokenDepository = 0x5AB08C5Dfd53b8f6f6C3e3bbFDb521170C3863B0;\n    address constant public t_Andrey = 0x027810A9C17cb0E739a33769A9E794AAF40D2338;\n    address constant public t_Michail = 0x00af06cF0Ae6BD83fC36b6Ae092bb4F669B6dbF0;\n    address constant public t_Slava = 0x00c11E5B0b5db0234DfF9a357F56077c9a7A83D0;\n    address constant public t_Andrey2 = 0xC7e788FeaE61503136021cC48a0c95bB66d0B9f2;\n    address constant public t_Michail2 = 0xb6f4ED2CE19A08c164790419D5d87D3074D4Bd92;\n    address constant public t_Slava2 = 0x00ded30026135fBC460c2A9bf7beC06c7F31101a;\n\n    /**\n     * @dev Proposals for mint tokens to some address\n     */\n    mapping(address => Proposal) public proposals;\n\n    struct Proposal {\n        address wallet;\n        uint256 amount;\n        uint256 numberOfVotes;\n        mapping(address => bool) voted;\n    }\n\n    /**\n     * @dev Members of congress\n     */\n    mapping(address => bool) public congress;\n\n    /**\n     * @dev Minimal quorum value\n     */\n    uint256 public minimumQuorum = 1;\n\n    /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n\n    /**\n     * @dev On proposal added\n     * @param congressman Congressman address\n     * @param wallet Wallet\n     * @param amount Amount of wei to transfer\n     */\n    event ProposalAdded(address indexed congressman, address indexed wallet, uint256 indexed amount);\n\n    /**\n     * @dev On proposal passed\n     * @param congressman Congressman address\n     * @param wallet Wallet\n     * @param amount Amount of wei to transfer\n     */\n    event ProposalPassed(address indexed congressman, address indexed wallet, uint256 indexed amount);\n\n    /**\n   * @dev Modifier to make a function callable only when the minting for pre-ico is not paused.\n   */\n    modifier whenNotPreIcoFinish() {\n        require(!mintingPreIcoFinish);\n        _;\n    }\n\n    /**\n   * @dev Modifier to make a function callable only when the minting for bounty is not paused.\n   */\n    modifier whenNotBountyFinish() {\n        require(!mintingBountyFinish);\n        _;\n    }\n\n    /**\n   * @dev Modifier to make a function callable only when the minting for bounty is not paused.\n   */\n    modifier whenNotMintingFounders() {\n        require(!mintingFoundersFinish);\n        _;\n    }\n\n    /**\n     * @dev Modifier that allows only congress to vote and create new proposals\n     */\n    modifier onlyCongress {\n        require (congress[msg.sender]);\n        _;\n    }\n\n    /*\n     * ImmlaDistribution constructor\n     */\n    function ImmlaDistribution(address _token) public payable { // gas 6297067\n        token = ImmlaToken(_token);\n\n        //@TODO - change this to t_Slava (0x00c11E5B0b5db0234DfF9a357F56077c9a7A83D0) address or deploy contract from this address\n        owner = 0x00c11E5B0b5db0234DfF9a357F56077c9a7A83D0;\n\n        wallet = owner;\n        rate = RATE_MIN;\n\n        congress[t_Andrey] = true;\n        congress[t_Michail] = true;\n        congress[t_Slava] = true;\n        minimumQuorum = 3;\n    }\n\n    /**\n   * @dev called by the owner to mint tokens to founders\n   */\n    function mintToFounders() onlyOwner whenNotMintingFounders public returns (bool) {\n        mintToFounders(t_ImmlaTokenDepository, 52000 * 1 ether, 2);\n        mintToFounders(t_ImmlaTokenDepository2, 0, 2);\n        mintToFounders(t_ImmlaBountyTokenDepository, 0, 2);\n        mintToFounders(t_Andrey,   525510849836086000000000, 1);\n        mintToFounders(t_Michail,  394133137377065000000000, 1);\n        mintToFounders(t_Slava,    394133137377065000000000, 1);\n        mintToFounders(t_Andrey2,  284139016853060000000000, 2);\n        mintToFounders(t_Michail2, 213104262639795000000000, 2);\n        mintToFounders(t_Slava2,   213104262639795000000000, 2);\n        mintingFoundersFinish = true;\n\n        return true;\n    }\n\n    // fallback function can be used to buy tokens\n    function () external payable {\n        buyTokens();\n    }\n\n    // low level token purchase function\n    function buyTokens() public payable {\n        require(availableEmission > 0);\n        require(msg.value != 0);\n\n        address investor = msg.sender;\n        uint256 weiAmount = msg.value;\n\n        uint256 tokensAmount = weiAmount.mul(rate);\n\n        //calculate change\n        uint256 tokensChange = 0;\n        if (tokensAmount > availableEmission) {\n            tokensChange = tokensAmount - availableEmission;\n            tokensAmount = availableEmission;\n        }\n\n        //make change\n        uint256 weiChange = 0;\n        if (tokensChange > 0) {\n            weiChange = tokensChange.div(rate);\n            investor.transfer(weiChange);\n        }\n\n        uint256 weiRaised = weiAmount - weiChange;\n\n        // update raised amount and additional emission\n        additionalEmission = additionalEmission.add(tokensAmount);\n        availableEmission = availableEmission.sub(tokensAmount);\n\n        //send tokens to investor\n        token.mint(investor, tokensAmount);\n        TokenPurchase(investor, weiRaised, tokensAmount);\n        mintBonusToFounders(tokensAmount);\n\n        //send ether to owner wallet\n        wallet.transfer(weiRaised);\n    }\n\n    /**\n   * @dev called by the owner to make additional emission\n   */\n    function updateAdditionalEmission(uint256 _amount, uint256 _rate) onlyOwner public { // gas 48191\n        require(_amount > 0);\n        require(_amount < (emissionLimit - additionalEmission));\n\n        availableEmission = _amount;\n        if (_rate > RATE_MIN) {\n            rate = RATE_MIN;\n        } else {\n            rate = _rate;\n        }\n    }\n\n    /**\n   * @dev called by the owner to stop minting\n   */\n    function stopPreIcoMint() onlyOwner whenNotPreIcoFinish public {\n        mintingPreIcoFinish = true;\n    }\n\n    /**\n   * @dev called by the owner to stop minting\n   */\n    function stopBountyMint() onlyOwner whenNotBountyFinish public {\n        mintingBountyFinish = true;\n    }\n\n    /**\n   * @dev called by the owner to mint tokens for pre-ico\n   */\n    function multiMintPreIco(address[] _dests, uint256[] _values) onlyOwner whenNotPreIcoFinish public returns (bool) {\n        token.multiMintPreico(_dests, _values);\n        return true;\n    }\n\n    /**\n   * @dev called by the owner to mint tokens for bounty\n   */\n    function multiMintBounty(address[] _dests, uint256[] _values) onlyOwner whenNotBountyFinish public returns (bool) {\n        token.multiMintBounty(_dests, _values);\n        return true;\n    }\n\n    /**\n   * @dev called to mint tokens to founders\n   */\n    function mintToFounders(address _dest, uint256 _value, uint _flag) internal {\n        token.mint(_dest, _value);\n        token.addFounderAccounts(_dest, _flag);\n    }\n\n    /**\n   * @dev called to mint bonus tokens to founders\n   */\n    function mintBonusToFounders(uint256 _value) internal {\n\n        uint256 valueWithCoefficient = (_value * 1000) / 813;\n        uint256 valueWithMultiplier1 = valueWithCoefficient / 10;\n        uint256 valueWithMultiplier2 = (valueWithCoefficient * 7) / 100;\n\n        token.mint(t_Andrey, (valueWithMultiplier1 * 4) / 10);\n        token.mint(t_Michail, (valueWithMultiplier1 * 3) / 10);\n        token.mint(t_Slava, (valueWithMultiplier1 * 3) / 10);\n        token.mint(t_Andrey2, (valueWithMultiplier2 * 4) / 10);\n        token.mint(t_Michail2, (valueWithMultiplier2 * 3) / 10);\n        token.mint(t_Slava2, (valueWithMultiplier2 * 3) / 10);\n        token.mint(t_ImmlaBountyTokenDepository, (valueWithCoefficient * 15) / 1000);\n    }\n\n    /**\n  * @dev called by owner for changing blockedTimeForBountyTokens\n  */\n    function changeBlockedTimeForBountyTokens(uint256 _blockedTime) onlyOwner public {\n        token.changeBlockedTimeForBountyTokens(_blockedTime);\n    }\n\n    /**\n  * @dev called by owner for changing blockedTimeForInvestedTokens\n  */\n    function changeBlockedTimeForInvestedTokens(uint256 _blockedTime) onlyOwner public {\n        token.changeBlockedTimeForInvestedTokens(_blockedTime);\n    }\n\n    /**\n     * @dev Create a new proposal\n     * @param _wallet Beneficiary account address\n     * @param _amount Amount of tokens\n     */\n    function proposal(address _wallet, uint256 _amount) onlyCongress public {\n        require(availableEmission > 0);\n        require(_amount > 0);\n        require(_wallet != 0x0);\n        \n        if (proposals[_wallet].amount > 0) {\n            require(proposals[_wallet].voted[msg.sender] != true); // If has already voted, cancel\n            require(proposals[_wallet].amount == _amount); // If amounts is equal\n\n            proposals[_wallet].voted[msg.sender] = true; // Set this voter as having voted\n            proposals[_wallet].numberOfVotes++; // Increase the number of votes\n\n            //proposal passed\n            if (proposals[_wallet].numberOfVotes >= minimumQuorum) {\n                if (_amount > availableEmission) {\n                    _amount = availableEmission;\n                }\n\n                // update raised amount and additional emission\n                additionalEmission = additionalEmission.add(_amount);\n                availableEmission = availableEmission.sub(_amount);\n\n                token.mint(_wallet, _amount);\n                TokenPurchase(_wallet, 0, _amount);\n                ProposalPassed(msg.sender, _wallet, _amount);\n\n                mintBonusToFounders(_amount);\n                delete proposals[_wallet];\n            }\n\n        } else {\n            Proposal storage p = proposals[_wallet];\n\n            p.wallet           = _wallet;\n            p.amount           = _amount;\n            p.numberOfVotes    = 1;\n            p.voted[msg.sender] = true;\n\n            ProposalAdded(msg.sender, _wallet, _amount);\n        }\n    }\n\n    /**\n  * @dev called by owner for transfer tokens\n  */\n    function transferTokens(address _from, address _to, uint256 _amount) onlyOwner public {\n        require(_amount > 0);\n\n        //can't transfer after OWNER_TRANSFER_TOKENS date (after 1 year)\n        require(now < OWNER_TRANSFER_TOKENS);\n\n        //can't transfer from and to congressman addresses\n        require(!congress[_from]);\n        require(!congress[_to]);\n\n        token.transferByOwner(_from, _to, _amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_TRANSFER_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockedTime\",\"type\":\"uint256\"}],\"name\":\"changeBlockedTimeForInvestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockedTime\",\"type\":\"uint256\"}],\"name\":\"changeBlockedTimeForBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockedTimeForInvestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dests\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiMintPreico\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dests\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiMintBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"uint256\"}],\"name\":\"addFounderAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockedTimeForBountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526009805460ff1916905560038054600160a060020a03191633600160a060020a0316179055635ae4e0d0600455635aa98d50600555611463806100486000396000f3006060604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014d57806306fdde0314610174578063095ea7b3146101fe57806318160ddd146102205780631c1401e714610245578063211b27581461025857806323b872dd14610270578063313ce567146102985780633550e2e2146102c157806340c10f19146102d75780634a1e004c146102f957806356d4183f1461030c5780635a15c3731461039b57806366188463146103c357806370a08231146103e557806372eae629146104045780637d64bcb4146104935780638da5cb5b146104a657806395d89b41146104d5578063a9059cbb146104e8578063d07f29e51461050a578063d73dd6231461052c578063dd62ed3e1461054e578063f2fde38b14610573578063fd874a7b14610592575b600080fd5b341561015857600080fd5b6101606105a5565b604051901515815260200160405180910390f35b341561017f57600080fd5b6101876105ae565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101c35780820151838201526020016101ab565b50505050905090810190601f1680156101f05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020957600080fd5b610160600160a060020a03600435166024356105e5565b341561022b57600080fd5b61023361060a565b60405190815260200160405180910390f35b341561025057600080fd5b610233610610565b341561026357600080fd5b61026e60043561061a565b005b341561027b57600080fd5b610160600160a060020a036004358116906024351660443561064a565b34156102a357600080fd5b6102ab610671565b60405160ff909116815260200160405180910390f35b34156102cc57600080fd5b61026e600435610676565b34156102e257600080fd5b610160600160a060020a03600435166024356106a6565b341561030457600080fd5b61023361079a565b341561031757600080fd5b6102336004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506107a095505050505050565b34156103a657600080fd5b610160600160a060020a036004358116906024351660443561098a565b34156103ce57600080fd5b610160600160a060020a0360043516602435610aa3565b34156103f057600080fd5b610233600160a060020a0360043516610ac1565b341561040f57600080fd5b610233600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610ae095505050505050565b341561049e57600080fd5b610160610c50565b34156104b157600080fd5b6104b9610cbd565b604051600160a060020a03909116815260200160405180910390f35b34156104e057600080fd5b610187610ccc565b34156104f357600080fd5b610160600160a060020a0360043516602435610d03565b341561051557600080fd5b61026e600160a060020a0360043516602435610d21565b341561053757600080fd5b610160600160a060020a0360043516602435610d6d565b341561055957600080fd5b610233600160a060020a0360043581169060243516610d8b565b341561057e57600080fd5b61026e600160a060020a0360043516610db6565b341561059d57600080fd5b610233610e51565b60095460ff1681565b60408051908101604052600581527f494d4d4c41000000000000000000000000000000000000000000000000000000602082015281565b60006105ef610e57565b156105f957600080fd5b6106038383610e8f565b9392505050565b60005481565b426301e133800181565b60035433600160a060020a0390811691161461063557600080fd5b635aa98d50811061064557600080fd5b600555565b6000610654610e57565b1561065e57600080fd5b610669848484610efb565b949350505050565b601281565b60035433600160a060020a0390811691161461069157600080fd5b635ae4e0d081106106a157600080fd5b600455565b60035460009033600160a060020a039081169116146106c457600080fd5b60095460ff16156106d457600080fd5b6000546106e7908363ffffffff61106b16565b6000908155600160a060020a038416815260016020526040902054610712908363ffffffff61106b16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660006000805160206114188339815191528460405190815260200160405180910390a350600192915050565b60055481565b6003546000908190819033600160a060020a039081169116146107c257600080fd5b60095460ff16156107d257600080fd5b60009150845190505b808210156109825761080b8483815181106107f257fe5b906020019060200201516000549063ffffffff61106b16565b60005561086784838151811061081d57fe5b906020019060200201516001600088868151811061083757fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff61106b16565b6001600087858151811061087757fe5b90602001906020020151600160a060020a031681526020810191909152604001600020556108b98583815181106108aa57fe5b9060200190602002015161107a565b8482815181106108c557fe5b90602001906020020151600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688585848151811061090557fe5b9060200190602002015160405190815260200160405180910390a284828151811061092c57fe5b90602001906020020151600160a060020a0316600060008051602061141883398151915286858151811061095c57fe5b9060200190602002015160405190815260200160405180910390a36001820191506107db565b509392505050565b60035460009033600160a060020a039081169116146109a857600080fd5b426301e1338001421015156109bc57600080fd5b600160a060020a03831615156109d157600080fd5b600160a060020a0384166000908152600160205260409020548211156109f657600080fd5b600160a060020a038416600090815260016020526040902054610a1f908363ffffffff6110ce16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610a54908363ffffffff61106b16565b600160a060020a03808516600081815260016020526040908190209390935591908616906000805160206114188339815191529085905190815260200160405180910390a35060019392505050565b6000610aad610e57565b15610ab757600080fd5b61060383836110e0565b600160a060020a0381166000908152600160205260409020545b919050565b6003546000908190819033600160a060020a03908116911614610b0257600080fd5b60095460ff1615610b1257600080fd5b60009150845190505b8082101561098257610b328483815181106107f257fe5b600055610b4484838151811061081d57fe5b60016000878581518110610b5457fe5b90602001906020020151600160a060020a03168152602081019190915260400160002055610b878583815181106108aa57fe5b848281518110610b9357fe5b90602001906020020151600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885858481518110610bd357fe5b9060200190602002015160405190815260200160405180910390a2848281518110610bfa57fe5b90602001906020020151600160a060020a03166000600080516020611418833981519152868581518110610c2a57fe5b9060200190602002015160405190815260200160405180910390a3600182019150610b1b565b60035460009033600160a060020a03908116911614610c6e57600080fd5b60095460ff1615610c7e57600080fd5b6009805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600381527f494d4c0000000000000000000000000000000000000000000000000000000000602082015281565b6000610d0d610e57565b15610d1757600080fd5b61060383836111da565b60035433600160a060020a03908116911614610d3c57600080fd5b600160a060020a0382161515610d5157600080fd5b600160a060020a03909116600090815260086020526040902055565b6000610d77610e57565b15610d8157600080fd5b61060383836112c3565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610dd157600080fd5b600160a060020a0381161515610de657600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045481565b60008060045442118015610e6c575060055442115b15610e7a5760009150610e8b565b610e8333611367565b905080421091505b5090565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a0383161515610f1257600080fd5b600160a060020a038416600090815260016020526040902054821115610f3757600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610f6a57600080fd5b600160a060020a038416600090815260016020526040902054610f93908363ffffffff6110ce16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610fc8908363ffffffff61106b16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054611010908363ffffffff6110ce16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516916000805160206114188339815191529085905190815260200160405180910390a35060019392505050565b60008282018381101561060357fe5b60035433600160a060020a0390811691161461109557600080fd5b600160a060020a03811615156110aa57600080fd5b600160a060020a03166000908152600660205260409020805460ff19166001179055565b6000828211156110da57fe5b50900390565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561113d57600160a060020a033381166000908152600260209081526040808320938816835292905290812055611174565b61114d818463ffffffff6110ce16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000600160a060020a03831615156111f157600080fd5b600160a060020a03331660009081526001602052604090205482111561121657600080fd5b600160a060020a03331660009081526001602052604090205461123f908363ffffffff6110ce16565b600160a060020a033381166000908152600160205260408082209390935590851681522054611274908363ffffffff61106b16565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206114188339815191529085905190815260200160405180910390a350600192915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546112fb908363ffffffff61106b16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a038116600090815260086020526040812054600114156113915750600554610adb565b600160a060020a038216600090815260086020526040902054600214156113ba57506001610adb565b600160a060020a03821660009081526006602052604090205460ff16156113e45750600554610adb565b600160a060020a03821660009081526007602052604090205460ff161561140e5750600454610adb565b50600554610adb5600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058207f1921a72f8b613dfade41d4fd4f9ebd8bcde728ebd71427ff7273a84659d7ff0029"
}