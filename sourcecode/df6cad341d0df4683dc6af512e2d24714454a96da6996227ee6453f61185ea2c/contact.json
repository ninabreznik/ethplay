{
  "address": "0x430bd07726423a54f6d82ab0f578ce62a3b8054d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UOSToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.5.2;\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract UOSToken is ERC20, ERC20Detailed {\n    uint8 public constant DECIMALS = 4;\n    uint256 public constant INITIAL_SUPPLY = 400000000 * (10 ** uint256(DECIMALS));\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor () public ERC20Detailed(\"UOSToken\", \"UOS\", 4) {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040518060400160405280600881526020017f554f53546f6b656e0000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f554f530000000000000000000000000000000000000000000000000000000000815250600482600390805190602001906100959291906101a8565b5081516100a99060049060208501906101a8565b506005805460ff191660ff92909216919091179055506100d89050336503a3529440006100dd602090811b901c565b610243565b6001600160a01b0382166100f057600080fd5b6101098160025461018f60201b6106a41790919060201c565b6002556001600160a01b038216600090815260208181526040909120546101399183906106a461018f821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156101a157600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101e957805160ff1916838001178555610216565b82800160010185558215610216579182015b828111156102165782518255916020019190600101906101fb565b50610222929150610226565b5090565b61024091905b80821115610222576000815560010161022c565b90565b6106e9806102526000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063313ce5671161008c57806395d89b411161006657806395d89b4114610261578063a457c2d714610269578063a9059cbb14610295578063dd62ed3e146102c1576100cf565b8063313ce56714610207578063395093511461020f57806370a082311461023b576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab5780632e0f2625146101e15780632ff2e9dc146101ff575b600080fd5b6100dc6102ef565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b038135169060200135610385565b604080519115158252519081900360200190f35b61019961039b565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103a1565b6101e96103f8565b6040805160ff9092168252519081900360200190f35b6101996103fd565b6101e9610407565b61017d6004803603604081101561022557600080fd5b506001600160a01b038135169060200135610410565b6101996004803603602081101561025157600080fd5b50356001600160a01b031661044c565b6100dc610467565b61017d6004803603604081101561027f57600080fd5b506001600160a01b0381351690602001356104c8565b61017d600480360360408110156102ab57600080fd5b506001600160a01b038135169060200135610504565b610199600480360360408110156102d757600080fd5b506001600160a01b0381358116916020013516610511565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561037b5780601f106103505761010080835404028352916020019161037b565b820191906000526020600020905b81548152906001019060200180831161035e57829003601f168201915b5050505050905090565b600061039233848461053c565b50600192915050565b60025490565b60006103ae8484846105c4565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546103ee9186916103e9908663ffffffff61068f16565b61053c565b5060019392505050565b600481565b6503a35294400081565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103929185906103e9908663ffffffff6106a416565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561037b5780601f106103505761010080835404028352916020019161037b565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103929185906103e9908663ffffffff61068f16565b60006103923384846105c4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03821661054f57600080fd5b6001600160a01b03831661056257600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166105d757600080fd5b6001600160a01b038316600090815260208190526040902054610600908263ffffffff61068f16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610635908263ffffffff6106a416565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561069e57600080fd5b50900390565b6000828201838110156106b657600080fd5b939250505056fea165627a7a723058205af4a58f108e539c5df1e6ad9404a7266e5f262a1ed9131c4292ee191be06d030029"
}