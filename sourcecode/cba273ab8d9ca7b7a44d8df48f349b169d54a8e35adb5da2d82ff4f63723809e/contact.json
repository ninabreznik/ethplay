{
  "address": "0xd88515aa67e027211ff79710a75a90fcbb8fcc9f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SecurityToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\npragma solidity ^0.4.24;\n\n// [emailÂ protected] from NPM\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract TokenWhitelist is Ownable {\n\n    mapping(address => bool) private whitelist;\n\n    event Whitelisted(address indexed wallet);\n    event Dewhitelisted(address indexed wallet);\n\n    function enableWallet(address _wallet) public onlyOwner {\n        require(_wallet != address(0), \"Invalid wallet\");\n        whitelist[_wallet] = true;\n        emit Whitelisted(_wallet);\n    }\n\n    function disableWallet(address _wallet) public onlyOwner {\n        whitelist[_wallet] = false;\n        emit Dewhitelisted (_wallet);\n    }\n    \n    function checkWhitelisted(address _wallet) public view returns (bool){\n        return whitelist[_wallet];\n    }\n    \n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\ncontract SecurityToken is DetailedERC20, CappedToken, PausableToken {\n\n    TokenWhitelist public whitelist;\n    event Burn(address indexed burner, uint256 value);\n\n    constructor(uint256 _cap, string _name, string _symbol, uint8 _decimals, address _whitelist) public\n        DetailedERC20(_name, _symbol, _decimals)\n        CappedToken(_cap) {\n            setupWhitelist(_whitelist);\n    }\n\n    /**\n    * @dev Sets up the centralized whitelist contract\n    * @param _whitelist the address of whitelist contract.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function setupWhitelist(address _whitelist) public onlyOwner returns (bool) {\n        require(_whitelist != address(0), \"Invalid whitelist address\");\n        whitelist = TokenWhitelist(_whitelist);\n        return true;\n    }\n\n    /**\n    * @dev Overrides MintableToken mint() adding the whitelist validation\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        require(whitelist.checkWhitelisted(_to), \"User not authorized\");\n        return super.mint(_to, _amount);\n    }\n\n    /**\n    * @dev Overrides BasicToken transfer() adding the whitelist validation\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require(\n            whitelist.checkWhitelisted(msg.sender) &&\n            whitelist.checkWhitelisted(_to),\n            \"User not authorized\");\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Overrides StandardToken transferFrom() adding the whitelist validation\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require(\n            whitelist.checkWhitelisted(msg.sender) &&\n            whitelist.checkWhitelisted(_from) &&\n            whitelist.checkWhitelisted(_to),\n            \"User not authorized\");\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Overrides StandardToken approve() adding the whitelist validation\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        require(\n            whitelist.checkWhitelisted(msg.sender) &&\n            whitelist.checkWhitelisted(_spender),\n            \"User not authorized\");\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * @dev Overrides StandardToken increaseApproval() adding the whitelist validation\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n        require(\n            whitelist.checkWhitelisted(msg.sender) &&\n            whitelist.checkWhitelisted(_spender),\n            \"User not authorized\");\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    /**\n     * @dev Overrides StandardToken decreaseApproval() adding the whitelist validation\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n        require(\n            whitelist.checkWhitelisted(msg.sender) &&\n            whitelist.checkWhitelisted(_spender),\n            \"User not authorized\");\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n    \n    /**\n     * @dev new function to burn tokens from a centralized owner\n     * @param _who The address which will be burned.\n     * @param _value The amount of tokens to burn.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function burnFor(address _who, uint _value) public onlyOwner returns (bool) {\n        require(_value <= balances[_who], \"Insufficient funds\");\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n        return true;\n    }\n\n}",
  "bytecode": "60806040526006805460a060020a60ff02191690556008805460ff191690553480156200002b57600080fd5b5060405162001c1738038062001c1783398101604090815281516020808401519284015160608501516080860151948601805194969095920193909286918691869186916200008091600091860190620001ae565b50815162000096906001906020850190620001ae565b506002805460ff90921660ff19909216919091179055505060068054600160a060020a0319163317905560008111620000ce57600080fd5b600755620000e581640100000000620000f1810204565b50505050505062000253565b600654600090600160a060020a031633146200010c57600080fd5b600160a060020a03821615156200018457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c69642077686974656c697374206164647265737300000000000000604482015290519081900360640190fd5b5060088054600160a060020a0383166101000261010060a860020a03199091161790556001919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001f157805160ff191683800117855562000221565b8280016001018555821562000221579182015b828111156200022157825182559160200191906001019062000204565b506200022f92915062000233565b5090565b6200025091905b808211156200022f57600081556001016200023a565b90565b6119b480620002636000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014257806306fdde031461016b578063095ea7b3146101f557806318160ddd146102195780631dd319cb1461024057806323b872dd14610264578063313ce5671461028e578063355274ea146102b95780633f4ba83a146102ce57806340c10f19146102e55780635c975abb14610309578063661884631461031e57806370a0823114610342578063715018a6146103635780637d64bcb4146103785780638456cb591461038d5780638da5cb5b146103a257806393e59dc1146103d357806395d89b41146103e8578063a9059cbb146103fd578063d73dd62314610421578063dd62ed3e14610445578063f2fde38b1461046c578063fda0c61d1461048d575b600080fd5b34801561014e57600080fd5b506101576104ae565b604080519115158252519081900360200190f35b34801561017757600080fd5b506101806104be565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020157600080fd5b50610157600160a060020a036004351660243561054c565b34801561022557600080fd5b5061022e6106c0565b60408051918252519081900360200190f35b34801561024c57600080fd5b50610157600160a060020a03600435166024356106c6565b34801561027057600080fd5b50610157600160a060020a036004358116906024351660443561081f565b34801561029a57600080fd5b506102a3610a21565b6040805160ff9092168252519081900360200190f35b3480156102c557600080fd5b5061022e610a2a565b3480156102da57600080fd5b506102e3610a30565b005b3480156102f157600080fd5b50610157600160a060020a0360043516602435610a8d565b34801561031557600080fd5b50610157610b90565b34801561032a57600080fd5b50610157600160a060020a0360043516602435610b99565b34801561034e57600080fd5b5061022e600160a060020a0360043516610d06565b34801561036f57600080fd5b506102e3610d21565b34801561038457600080fd5b50610157610d8f565b34801561039957600080fd5b506102e3610e13565b3480156103ae57600080fd5b506103b7610e72565b60408051600160a060020a039092168252519081900360200190f35b3480156103df57600080fd5b506103b7610e81565b3480156103f457600080fd5b50610180610e95565b34801561040957600080fd5b50610157600160a060020a0360043516602435610eef565b34801561042d57600080fd5b50610157600160a060020a036004351660243561105c565b34801561045157600080fd5b5061022e600160a060020a03600435811690602435166111c9565b34801561047857600080fd5b506102e3600160a060020a03600435166111f4565b34801561049957600080fd5b50610157600160a060020a0360043516611217565b60065460a060020a900460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b505050505081565b60085460009060ff161561055f57600080fd5b6008546040805160e460020a63020d8dad0281523360048201529051610100909204600160a060020a0316916320d8dad0916024808201926020929091908290030181600087803b1580156105b357600080fd5b505af11580156105c7573d6000803e3d6000fd5b505050506040513d60208110156105dd57600080fd5b5051801561066b57506008546040805160e460020a63020d8dad028152600160a060020a0386811660048301529151610100909304909116916320d8dad0916024808201926020929091908290030181600087803b15801561063e57600080fd5b505af1158015610652573d6000803e3d6000fd5b505050506040513d602081101561066857600080fd5b50515b15156106af576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611949833981519152604482015290519081900360640190fd5b6106b983836112c8565b9392505050565b60045490565b600654600090600160a060020a031633146106e057600080fd5b600160a060020a038316600090815260036020526040902054821115610750576040805160e560020a62461bcd02815260206004820152601260248201527f496e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038316600090815260036020526040902054610779908363ffffffff6112e516565b600160a060020a0384166000908152600360205260409020556004546107a5908363ffffffff6112e516565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518381529051600091600160a060020a038616916000805160206119698339815191529181900360200190a350600192915050565b60085460009060ff161561083257600080fd5b6008546040805160e460020a63020d8dad0281523360048201529051610100909204600160a060020a0316916320d8dad0916024808201926020929091908290030181600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b505050506040513d60208110156108b057600080fd5b5051801561093e57506008546040805160e460020a63020d8dad028152600160a060020a0387811660048301529151610100909304909116916320d8dad0916024808201926020929091908290030181600087803b15801561091157600080fd5b505af1158015610925573d6000803e3d6000fd5b505050506040513d602081101561093b57600080fd5b50515b80156109ca57506008546040805160e460020a63020d8dad028152600160a060020a0386811660048301529151610100909304909116916320d8dad0916024808201926020929091908290030181600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506040513d60208110156109c757600080fd5b50515b1515610a0e576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611949833981519152604482015290519081900360640190fd5b610a198484846112f7565b949350505050565b60025460ff1681565b60075481565b600654600160a060020a03163314610a4757600080fd5b60085460ff161515610a5857600080fd5b6008805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600654600090600160a060020a03163314610aa757600080fd5b60065460a060020a900460ff1615610abe57600080fd5b6008546040805160e460020a63020d8dad028152600160a060020a0386811660048301529151610100909304909116916320d8dad0916024808201926020929091908290030181600087803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b505050506040513d6020811015610b4057600080fd5b50511515610b86576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611949833981519152604482015290519081900360640190fd5b6106b98383611315565b60085460ff1681565b60085460009060ff1615610bac57600080fd5b6008546040805160e460020a63020d8dad0281523360048201529051610100909204600160a060020a0316916320d8dad0916024808201926020929091908290030181600087803b158015610c0057600080fd5b505af1158015610c14573d6000803e3d6000fd5b505050506040513d6020811015610c2a57600080fd5b50518015610cb857506008546040805160e460020a63020d8dad028152600160a060020a0386811660048301529151610100909304909116916320d8dad0916024808201926020929091908290030181600087803b158015610c8b57600080fd5b505af1158015610c9f573d6000803e3d6000fd5b505050506040513d6020811015610cb557600080fd5b50515b1515610cfc576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611949833981519152604482015290519081900360640190fd5b6106b98383611344565b600160a060020a031660009081526003602052604090205490565b600654600160a060020a03163314610d3857600080fd5b600654604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600654600090600160a060020a03163314610da957600080fd5b60065460a060020a900460ff1615610dc057600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600654600160a060020a03163314610e2a57600080fd5b60085460ff1615610e3a57600080fd5b6008805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600654600160a060020a031681565b6008546101009004600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b60085460009060ff1615610f0257600080fd5b6008546040805160e460020a63020d8dad0281523360048201529051610100909204600160a060020a0316916320d8dad0916024808201926020929091908290030181600087803b158015610f5657600080fd5b505af1158015610f6a573d6000803e3d6000fd5b505050506040513d6020811015610f8057600080fd5b5051801561100e57506008546040805160e460020a63020d8dad028152600160a060020a0386811660048301529151610100909304909116916320d8dad0916024808201926020929091908290030181600087803b158015610fe157600080fd5b505af1158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b50515b1515611052576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611949833981519152604482015290519081900360640190fd5b6106b98383611361565b60085460009060ff161561106f57600080fd5b6008546040805160e460020a63020d8dad0281523360048201529051610100909204600160a060020a0316916320d8dad0916024808201926020929091908290030181600087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d60208110156110ed57600080fd5b5051801561117b57506008546040805160e460020a63020d8dad028152600160a060020a0386811660048301529151610100909304909116916320d8dad0916024808201926020929091908290030181600087803b15801561114e57600080fd5b505af1158015611162573d6000803e3d6000fd5b505050506040513d602081101561117857600080fd5b50515b15156111bf576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611949833981519152604482015290519081900360640190fd5b6106b9838361137e565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600654600160a060020a0316331461120b57600080fd5b6112148161139b565b50565b600654600090600160a060020a0316331461123157600080fd5b600160a060020a0382161515611291576040805160e560020a62461bcd02815260206004820152601960248201527f496e76616c69642077686974656c697374206164647265737300000000000000604482015290519081900360640190fd5b5060088054600160a060020a0383166101000274ffffffffffffffffffffffffffffffffffffffff00199091161790556001919050565b60085460009060ff16156112db57600080fd5b6106b98383611419565b6000828211156112f157fe5b50900390565b60085460009060ff161561130a57600080fd5b610a1984848461147f565b600060075461132f836004546115e490919063ffffffff16565b111561133a57600080fd5b6106b983836115f7565b60085460009060ff161561135757600080fd5b6106b983836116f1565b60085460009060ff161561137457600080fd5b6106b983836117e0565b60085460009060ff161561139157600080fd5b6106b983836118af565b600160a060020a03811615156113b057600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a0383166000908152600360205260408120548211156114a457600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156114d457600080fd5b600160a060020a03831615156114e957600080fd5b600160a060020a038416600090815260036020526040902054611512908363ffffffff6112e516565b600160a060020a038086166000908152600360205260408082209390935590851681522054611547908363ffffffff6115e416565b600160a060020a03808516600090815260036020908152604080832094909455918716815260058252828120338252909152205461158b908363ffffffff6112e516565b600160a060020a0380861660008181526005602090815260408083203384528252918290209490945580518681529051928716939192600080516020611969833981519152929181900390910190a35060019392505050565b818101828110156115f157fe5b92915050565b600654600090600160a060020a0316331461161157600080fd5b60065460a060020a900460ff161561162857600080fd5b60045461163b908363ffffffff6115e416565b600455600160a060020a038316600090815260036020526040902054611667908363ffffffff6115e416565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206119698339815191529181900360200190a350600192915050565b336000908152600560209081526040808320600160a060020a038616845290915281205480831061174557336000908152600560209081526040808320600160a060020a038816845290915281205561177a565b611755818463ffffffff6112e516565b336000908152600560209081526040808320600160a060020a03891684529091529020555b336000818152600560209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b336000908152600360205260408120548211156117fc57600080fd5b600160a060020a038316151561181157600080fd5b33600090815260036020526040902054611831908363ffffffff6112e516565b3360009081526003602052604080822092909255600160a060020a03851681522054611863908363ffffffff6115e416565b600160a060020a0384166000818152600360209081526040918290209390935580518581529051919233926000805160206119698339815191529281900390910190a350600192915050565b336000908152600560209081526040808320600160a060020a03861684529091528120546118e3908363ffffffff6115e416565b336000818152600560209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050560055736572206e6f7420617574686f72697a656400000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820187820331af61e2563aaa907926b319b15844f2dfdb570a4e68500d3a6de5d840029000000000000000000000000000000000000000000000000000000000000753000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7c58385b66e5d9905fef9dc43d7fb270e5274970000000000000000000000000000000000000000000000000000000000000019426173656d656e7420546f6b656e2031202d204443565546420000000000000000000000000000000000000000000000000000000000000000000000000000034254310000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000753000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7c58385b66e5d9905fef9dc43d7fb270e5274970000000000000000000000000000000000000000000000000000000000000019426173656d656e7420546f6b656e2031202d204443565546420000000000000000000000000000000000000000000000000000000000000000000000000000034254310000000000000000000000000000000000000000000000000000000000"
}