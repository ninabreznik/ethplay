{
  "address": "0x99a3a5333b4eb80192149f9edd42d1d57ac591ee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "COSS Exchange Liquidity Token",
  "contractName": "CELT",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.4.24;\n\n//\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// ----------------------------------------------------------------------------\ncontract CELT is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"CELT\";\n        name = \"COSS Exchange Liquidity Token\";\n        decimals = 18;\n        _totalSupply = 10000000 ether;\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0),owner, _totalSupply);\n        Hub_.setAuto(10);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) updateAccount(to) updateAccount(msg.sender) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens)updateAccount(to) updateAccount(from) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n    \n    // Hub_\n    PlincInterface constant Hub_ = PlincInterface(0xd5D10172e8D8B84AC83031c16fE093cba4c84FC6);\n    uint256 public ethPendingDistribution;\n\n    // plinc functions\n    function fetchHubVault() public{\n        \n        uint256 value = Hub_.playerVault(address(this));\n        require(value >0);\n        Hub_.vaultToWallet();\n        ethPendingDistribution = ethPendingDistribution.add(value);\n    }\n    function fetchHubPiggy() public{\n        \n        uint256 value = Hub_.piggyBank(address(this));\n        require(value >0);\n        Hub_.piggyToWallet();\n        ethPendingDistribution = ethPendingDistribution.add(value);\n    }\n    function disburseHub() public  {\n    uint256 amount = ethPendingDistribution;\n    ethPendingDistribution = 0;\n    totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(_totalSupply));\n    unclaimedDividends = unclaimedDividends.add(amount);\n    }\n    // PSAfunctions\n    // PSAsection\n    uint256 public pointMultiplier = 10e18;\n    struct Account {\n    uint balance;\n    uint lastDividendPoints;\n    }\n    mapping(address=>Account) accounts;\n    mapping(address=>uint256) public PSA;\n    uint public ethtotalSupply;\n    uint public totalDividendPoints;\n    uint public unclaimedDividends;\n\n    function dividendsOwing(address account) public view returns(uint256) {\n        uint256 newDividendPoints = totalDividendPoints.sub(accounts[account].lastDividendPoints);\n        return (balances[account] * newDividendPoints) / pointMultiplier;\n    }\n    \n    modifier updateAccount(address account) {\n        uint256 owing = dividendsOwing(account);\n        if(owing > 0) {\n            unclaimedDividends = unclaimedDividends.sub(owing);\n            PSA[account] =  PSA[account].add(owing);\n        }\n        accounts[account].lastDividendPoints = totalDividendPoints;\n        _;\n    }\n    // payable fallback to receive eth\n    function () external payable{}\n    // fetch PSA allocation to personal mapping\n    function fetchPSA() public updateAccount(msg.sender){}\n    // Give out PSA to CELT holders\n    function disburse() public  payable {\n        uint256 base = msg.value.div(20);\n        uint256 amount = msg.value.sub(base);\n        Hub_.buyBonds.value(base)(address(this)) ;\n        totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(_totalSupply));\n        unclaimedDividends = unclaimedDividends.add(amount);\n    }\n    function PSAtoWallet() public {\n    if(dividendsOwing(msg.sender) > 0)\n    {\n        fetchPSA();\n    }\n    \n    uint256 amount = PSA[msg.sender];\n    require(amount >0);\n    PSA[msg.sender] = 0;\n    msg.sender.transfer(amount) ;\n  \n    }\n    function PSAtoWalletByAddres(address toAllocate) public {\n    \n    uint256 amount = PSA[toAllocate];\n    require(amount >0);\n    PSA[toAllocate] = 0;\n    toAllocate.transfer(amount) ;\n  \n    }\n    function rectifyWrongs(address toAllocate, uint256 amount) public onlyOwner {\n    \n    require(amount >0);\n    toAllocate.transfer(amount) ;\n  \n    }\n\n    }\n    interface PlincInterface {\n    \n    function IdToAdress(uint256 index) external view returns(address);\n    function nextPlayerID() external view returns(uint256);\n    function bondsOutstanding(address player) external view returns(uint256);\n    function playerVault(address player) external view returns(uint256);\n    function piggyBank(address player) external view returns(uint256);\n    function vaultToWallet() external ;\n    function piggyToWallet() external ;\n    function setAuto (uint256 percentage)external ;\n    function buyBonds( address referral)external payable ;\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"PSA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAllocate\",\"type\":\"address\"}],\"name\":\"PSAtoWalletByAddres\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchPSA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAllocate\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rectifyWrongs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PSAtoWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchHubVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disburseHub\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethtotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disburse\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPendingDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchHubPiggy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604052678ac7230489e800006009553480156200001d57600080fd5b5060008054600160a060020a031916730b0efad4ae088a88ffdc50bce5fb63c6936b92201790556040805180820190915260048082527f43454c540000000000000000000000000000000000000000000000000000000060209092019182526200008a91600291620001d3565b5060408051808201909152601d8082527f434f53532045786368616e6765204c697175696469747920546f6b656e0000006020909201918252620000d191600391620001d3565b506004805460ff191660121790556a084595161401484a000000600581905560008054600160a060020a0390811682526006602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3604080517f6120ada7000000000000000000000000000000000000000000000000000000008152600a6004820152905173d5d10172e8d8b84ac83031c16fe093cba4c84fc691636120ada791602480830192600092919082900301818387803b158015620001b457600080fd5b505af1158015620001c9573d6000803e3d6000fd5b5050505062000278565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021657805160ff191683800117855562000246565b8280016001018555821562000246579182015b828111156200024657825182559160200191906001019062000229565b506200025492915062000258565b5090565b6200027591905b808211156200025457600081556001016200025f565b90565b6114df80620002886000396000f3006080604052600436106101665763ffffffff60e060020a60003504166306fdde03811461016857806307b6bafc146101f2578063095ea7b3146102255780630f1ea0f41461025d5780630f4200861461027e57806318160ddd146102935780632113342d146102a857806323b872dd146102bd578063313ce567146102e757806338e45ca5146103125780633cb802b9146103365780635b64ad0f1461034b578063658b98a91461036057806370a082311461037557806379ba5097146103965780637f5aee4e146103ab57806382b3314d146103c05780638391e45c146103d55780638da5cb5b146103f657806395d89b4114610427578063a5edcd9e1461043c578063a9059cbb14610451578063abc6fd0b14610475578063cae9ca511461047d578063cd68b5a6146104e6578063d4ee1d90146104fb578063dc39d06d14610510578063dd62ed3e14610534578063efefa3f51461055b578063f2fde38b14610570575b005b34801561017457600080fd5b5061017d610591565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b757818101518382015260200161019f565b50505050905090810190601f1680156101e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101fe57600080fd5b50610213600160a060020a036004351661061f565b60408051918252519081900360200190f35b34801561023157600080fd5b50610249600160a060020a0360043516602435610631565b604080519115158252519081900360200190f35b34801561026957600080fd5b50610166600160a060020a0360043516610698565b34801561028a57600080fd5b50610166610706565b34801561029f57600080fd5b50610213610799565b3480156102b457600080fd5b506102136107dc565b3480156102c957600080fd5b50610249600160a060020a03600435811690602435166044356107e2565b3480156102f357600080fd5b506102fc610a0d565b6040805160ff9092168252519081900360200190f35b34801561031e57600080fd5b50610166600160a060020a0360043516602435610a16565b34801561034257600080fd5b50610213610a70565b34801561035757600080fd5b50610166610a76565b34801561036c57600080fd5b50610213610aec565b34801561038157600080fd5b50610213600160a060020a0360043516610af2565b3480156103a257600080fd5b50610166610b0d565b3480156103b757600080fd5b50610166610b95565b3480156103cc57600080fd5b50610166610cc3565b3480156103e157600080fd5b50610213600160a060020a0360043516610d22565b34801561040257600080fd5b5061040b610d86565b60408051600160a060020a039092168252519081900360200190f35b34801561043357600080fd5b5061017d610d95565b34801561044857600080fd5b50610213610ded565b34801561045d57600080fd5b50610249600160a060020a0360043516602435610df3565b610166610fc8565b34801561048957600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610249948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506110b29650505050505050565b3480156104f257600080fd5b50610213611213565b34801561050757600080fd5b5061040b611219565b34801561051c57600080fd5b50610249600160a060020a0360043516602435611228565b34801561054057600080fd5b50610213600160a060020a03600435811690602435166112e3565b34801561056757600080fd5b5061016661130e565b34801561057c57600080fd5b50610166600160a060020a036004351661140a565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106175780601f106105ec57610100808354040283529160200191610617565b820191906000526020600020905b8154815290600101906020018083116105fa57829003601f168201915b505050505081565b600b6020526000908152604090205481565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600160a060020a0381166000908152600b60205260408120549081116106bd57600080fd5b600160a060020a0382166000818152600b60205260408082208290555183156108fc0291849190818181858888f19350505050158015610701573d6000803e3d6000fd5b505050565b33600061071282610d22565b9050600081111561077657600e54610730908263ffffffff61145016565b600e55600160a060020a0382166000908152600b602052604090205461075c908263ffffffff61146516565b600160a060020a0383166000908152600b60205260409020555b50600d54600160a060020a039091166000908152600a6020526040902060010155565b600080805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546005546107d79163ffffffff61145016565b905090565b600d5481565b60008260006107f082610d22565b9050600081111561085457600e5461080e908263ffffffff61145016565b600e55600160a060020a0382166000908152600b602052604090205461083a908263ffffffff61146516565b600160a060020a0383166000908152600b60205260409020555b600d54600160a060020a0383166000908152600a6020526040812060010191909155869061088182610d22565b905060008111156108e557600e5461089f908263ffffffff61145016565b600e55600160a060020a0382166000908152600b60205260409020546108cb908263ffffffff61146516565b600160a060020a0383166000908152600b60205260409020555b600d54600160a060020a038084166000908152600a6020908152604080832060010194909455918b16815260069091522054610927908763ffffffff61145016565b600160a060020a0389166000908152600660209081526040808320939093556007815282822033835290522054610964908763ffffffff61145016565b600160a060020a03808a166000908152600760209081526040808320338452825280832094909455918a168152600690915220546109a8908763ffffffff61146516565b600160a060020a038089166000818152600660209081526040918290209490945580518a815290519193928c16927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001979650505050505050565b60045460ff1681565b600054600160a060020a03163314610a2d57600080fd5b60008111610a3a57600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610701573d6000803e3d6000fd5b600e5481565b600080610a8233610d22565b1115610a9057610a90610706565b50336000908152600b6020526040812054908111610aad57600080fd5b336000818152600b60205260408082208290555183156108fc0291849190818181858888f19350505050158015610ae8573d6000803e3d6000fd5b5050565b60095481565b600160a060020a031660009081526006602052604090205490565b600154600160a060020a03163314610b2457600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b604080517fab6e988c000000000000000000000000000000000000000000000000000000008152306004820152905160009173d5d10172e8d8b84ac83031c16fe093cba4c84fc69163ab6e988c9160248082019260209290919082900301818787803b158015610c0457600080fd5b505af1158015610c18573d6000803e3d6000fd5b505050506040513d6020811015610c2e57600080fd5b5051905060008111610c3f57600080fd5b73d5d10172e8d8b84ac83031c16fe093cba4c84fc6600160a060020a031663cefb36056040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610c9157600080fd5b505af1158015610ca5573d6000803e3d6000fd5b5050600854610cbd925090508263ffffffff61146516565b60085550565b600880546000909155600554600954610d0691610cf791610ceb90859063ffffffff61147516565b9063ffffffff61149a16565b600d549063ffffffff61146516565b600d55600e54610d1c908263ffffffff61146516565b600e5550565b600160a060020a0381166000908152600a6020526040812060010154600d548291610d53919063ffffffff61145016565b600954600160a060020a038516600090815260066020526040902054919250908202811515610d7e57fe5b049392505050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106175780601f106105ec57610100808354040283529160200191610617565b600c5481565b6000826000610e0182610d22565b90506000811115610e6557600e54610e1f908263ffffffff61145016565b600e55600160a060020a0382166000908152600b6020526040902054610e4b908263ffffffff61146516565b600160a060020a0383166000908152600b60205260409020555b600d54600160a060020a0383166000908152600a60205260408120600101919091553390610e9282610d22565b90506000811115610ef657600e54610eb0908263ffffffff61145016565b600e55600160a060020a0382166000908152600b6020526040902054610edc908263ffffffff61146516565b600160a060020a0383166000908152600b60205260409020555b600d54600160a060020a0383166000908152600a6020908152604080832060010193909355338252600690522054610f34908763ffffffff61145016565b3360009081526006602052604080822092909255600160a060020a03891681522054610f66908763ffffffff61146516565b600160a060020a0388166000818152600660209081526040918290209390935580518981529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019695505050505050565b600080610fdc34601463ffffffff61149a16565b9150610fee348363ffffffff61145016565b604080517f910eba1d000000000000000000000000000000000000000000000000000000008152306004820152905191925073d5d10172e8d8b84ac83031c16fe093cba4c84fc69163910eba1d918591602480830192600092919082900301818588803b15801561105e57600080fd5b505af1158015611072573d6000803e3d6000fd5b5050505050611095610cf7600554610ceb6009548561147590919063ffffffff16565b600d55600e546110ab908263ffffffff61146516565b600e555050565b336000818152600760209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b838110156111a257818101518382015260200161118a565b50505050905090810190601f1680156111cf5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156111f157600080fd5b505af1158015611205573d6000803e3d6000fd5b506001979650505050505050565b60085481565b600154600160a060020a031681565b60008054600160a060020a0316331461124057600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b1580156112b057600080fd5b505af11580156112c4573d6000803e3d6000fd5b505050506040513d60208110156112da57600080fd5b50519392505050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b604080517ffef038e8000000000000000000000000000000000000000000000000000000008152306004820152905160009173d5d10172e8d8b84ac83031c16fe093cba4c84fc69163fef038e89160248082019260209290919082900301818787803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d60208110156113a757600080fd5b50519050600081116113b857600080fd5b73d5d10172e8d8b84ac83031c16fe093cba4c84fc6600160a060020a031663029dc6d26040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610c9157600080fd5b600054600160a060020a0316331461142157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561145f57600080fd5b50900390565b8181018281101561069257600080fd5b81810282158061148f575081838281151561148c57fe5b04145b151561069257600080fd5b60008082116114a857600080fd5b8183811515610d7e57fe00a165627a7a723058201dda3215831543fa897b4f4ac0d1475f8f5343d26e99d25beda2e9e59ccc3f880029"
}