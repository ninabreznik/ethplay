{
  "address": "0x87cab68b76fc0cef303726404958ef56de4bb49a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GTS",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity 0.5.4;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n\ncontract StandardToken {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed owner,uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 vaule);\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns(bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        totalSupply = totalSupply.sub(value);\n        balances[account] = balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n        emit Burn(account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n    }\n\n}\n\n\ncontract BurnableToken is StandardToken {\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract PausableToken is StandardToken, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(spender, addedValue);\n    }\n\n    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(spender, subtractedValue);\n    }\n}\n\ncontract Token is PausableToken, BurnableToken {\n    string public constant name = \"Global Trading System\"; // name of Token \n    string public constant symbol = \"GTS\"; // symbol of Token \n    uint8 public constant decimals = 18;\n\n    uint256 internal constant INIT_TOTALSUPPLY = 1000000000; // Total amount of tokens\n\n    constructor() public {\n        totalSupply = INIT_TOTALSUPPLY * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n    }\n}\n\n/**\n * @dev Interface of Pair contract\n */\ninterface PairContract {\n    function tokenFallback(address _from, uint256 _value, bytes calldata _data) external;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function decimals() external returns (uint8);\n}\n\ncontract GTS is Token {\n    // The address of Pair contract\n    PairContract public pairInstance;\n    /// @notice revoking rate precise\n    /// @notice for example: RATE_PRECISE is 3, meaning that the revoking fee ratio is 3/10000\n    uint public rate = 10000;  // default rate is 1:1\n    uint public constant RATE_PRECISE = 10000;\n\n    // events\n    event ExchangePair(address indexed from, uint256 value);\n    event SetPairContract(address PairToken);\n    event RateChanged(uint256 previousOwner,uint256 newRate);\n\n    /**\n     * @dev Throws if called by any account other than the Pair contract\n     */\n    modifier onlyPairContract() {\n        require(msg.sender == address(pairInstance));\n        _;\n    }\n\n    /**\n     * @dev Sets the address of pair contract\n     */\n    function setPairContract(address pairAddress) public onlyOwner {\n        require(pairAddress != address(0));\n        pairInstance = PairContract(pairAddress);\n        emit SetPairContract(pairAddress);\n    }\n\n    /**\n     * @dev Function Set the exchange rate of pair token.\n     * for example: RATE_PRECISE is 300, means that the rate is 300/10000: 1 PT = 0.003 GTS\n     * for example: RATE_PRECISE is 30000, means that the rate is 30000/10000: 1 PT = 3 GTS\n     */\n     function setRate(uint256 _newRate) public onlyOwner {\n        require(_newRate > 0);\n        emit RateChanged(rate,_newRate);\n        rate = _newRate;\n     }\n\n    /**\n     * @dev Transfers token to a specified address.\n     *      If the target address of transferring is Pair contract, the operation of changing Pair tokens will be executed.\n     * @param to The target address of transfer, which may be the  contract\n     * @param value The amount of tokens transferred\n     */\n    function transfer(address to, uint value) public returns (bool) {\n        super.transfer(to, value); // Transfers tokens to address 'to'\n        if(to == address(pairInstance)) {\n            pairInstance.tokenFallback(msg.sender, value, bytes(\"\")); // Calls 'tokenFallback' function in Pair contract to exchange tokens\n            emit ExchangePair(msg.sender, value);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Transfers tokens from one address to another.\n     *      If the target address of transferring is  Pair contract, the operation of changing Pair tokens will be executed.\n     * @param from The address which you want to send tokens from\n     * @param to The address which you want to transfer to\n     * @param value The amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint value) public returns (bool) {\n        super.transferFrom(from, to, value); // Transfers token to address 'to'\n        if(to == address(pairInstance)) {\n            pairInstance.tokenFallback(from, value, bytes(\"\")); // Calls 'tokenFallback' function in Pair contract to exchange tokens\n            emit ExchangePair(from, value);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Function that is called by the Pair contract to exchange 'GTS' tokens\n     */\n    function tokenFallback(address from, uint256 value, bytes calldata) external onlyPairContract {\n        require(from != address(0));\n        require(value != uint256(0));\n        require(pairInstance.transfer(owner,value)); // Transfers Pair tokens belonging to this contract to 'owner'\n        uint256 GTSValue = value.mul(10**uint256(decimals)).mul(rate).div(RATE_PRECISE).div(10**uint256(pairInstance.decimals())); // Calculates the number of 'GTS' tokens that can be exchanged\n        require(GTSValue <= balances[owner]);\n        balances[owner] = balances[owner].sub(GTSValue);\n        balances[from] = balances[from].add(GTSValue); \n        emit Transfer(owner, from, GTSValue);\n    }\n    \n    /**\n     * @dev Function that is used to withdraw the 'Pair' tokens in this contract\n     */\n    function withdrawToken(uint256 value) public onlyOwner {\n        require(pairInstance.transfer(owner,value));\n    }    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_PRECISE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pairInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setPairContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ExchangePair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"PairToken\",\"type\":\"address\"}],\"name\":\"SetPairContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vaule\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604090815260038054612710600555600160a860020a031916339081179091556b033b2e3c9fd0803ce8000000600281905560009182526020829052919020556115e8806100506000396000f3fe608060405234801561001057600080fd5b5060043610610190576000357c0100000000000000000000000000000000000000000000000000000000900480635c975abb116100fb57806395d89b41116100b4578063c0ee0b8a1161008e578063c0ee0b8a14610445578063d73dd623146104ca578063dd62ed3e146104f6578063f2fde38b1461052457610190565b806395d89b41146103eb578063a9059cbb146103f3578063bac9807d1461041f57610190565b80635c975abb14610355578063661884631461035d57806370a082311461038957806379cc6790146103af5780638456cb59146103db5780638da5cb5b146103e357610190565b806334fcf4371161014d57806334fcf437146102c857806336c5d008146102e757806337716ebb146102ef5780633f4ba83a1461031357806342966c681461031b57806350baa6221461033857610190565b806306fdde0314610195578063095ea7b31461021257806318160ddd1461025257806323b872dd1461026c5780632c4e722e146102a2578063313ce567146102aa575b600080fd5b61019d61054a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d75781810151838201526020016101bf565b50505050905090810190601f1680156102045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61023e6004803603604081101561022857600080fd5b50600160a060020a038135169060200135610581565b604080519115158252519081900360200190f35b61025a6105ae565b60408051918252519081900360200190f35b61023e6004803603606081101561028257600080fd5b50600160a060020a038135811691602081013590911690604001356105b4565b61025a610726565b6102b261072c565b6040805160ff9092168252519081900360200190f35b6102e5600480360360208110156102de57600080fd5b5035610731565b005b61025a610797565b6102f761079d565b60408051600160a060020a039092168252519081900360200190f35b6102e56107ac565b6102e56004803603602081101561033157600080fd5b5035610824565b6102e56004803603602081101561034e57600080fd5b5035610831565b61023e6108f1565b61023e6004803603604081101561037357600080fd5b50600160a060020a038135169060200135610901565b61025a6004803603602081101561039f57600080fd5b5035600160a060020a0316610925565b6102e5600480360360408110156103c557600080fd5b50600160a060020a038135169060200135610940565b6102e561094e565b6102f76109cb565b61019d6109da565b61023e6004803603604081101561040957600080fd5b50600160a060020a038135169060200135610a11565b6102e56004803603602081101561043557600080fd5b5035600160a060020a0316610b75565b6102e56004803603606081101561045b57600080fd5b600160a060020a038235169160208101359181019060608101604082013564010000000081111561048b57600080fd5b82018360208201111561049d57600080fd5b803590602001918460018302840111640100000000831117156104bf57600080fd5b509092509050610c02565b61023e600480360360408110156104e057600080fd5b50600160a060020a038135169060200135610e8e565b61025a6004803603604081101561050c57600080fd5b50600160a060020a0381358116916020013516610eb2565b6102e56004803603602081101561053a57600080fd5b5035600160a060020a0316610edd565b60408051808201909152601581527f476c6f62616c2054726164696e672053797374656d0000000000000000000000602082015281565b60035460009060a060020a900460ff161561059b57600080fd5b6105a58383610efd565b90505b92915050565b60025481565b60006105c1848484610f63565b50600454600160a060020a038481169116141561071c57600480546040805160208101808352600080835292517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152600160a060020a038a811696820196875260248201899052606060448301908152845160648401528451919096169663c0ee0b8a968c968b96959294919360849092019291908190849084905b8381101561067657818101518382015260200161065e565b50505050905090810190601f1680156106a35780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156106c457600080fd5b505af11580156106d8573d6000803e3d6000fd5b5050604080518581529051600160a060020a03881693507f99cb6dc47c170e4b5f1b96500c0618c78496baace933c2b880a75d3a9d6d1ea492509081900360200190a25b5060019392505050565b60055481565b601281565b600354600160a060020a0316331461074857600080fd5b6000811161075557600080fd5b600554604080519182526020820183905280517f4ac9052a820bf4f8c02d7588587cae835573b5b99ea7ad4ca002f17f319f71869281900390910190a1600555565b61271081565b600454600160a060020a031681565b600354600160a060020a031633146107c357600080fd5b60035460a060020a900460ff1615156107db57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b61082e3382610f90565b50565b600354600160a060020a0316331461084857600080fd5b60048054600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831694810194909452602484018590525191169163a9059cbb9160448083019260209291908290030181600087803b1580156108ba57600080fd5b505af11580156108ce573d6000803e3d6000fd5b505050506040513d60208110156108e457600080fd5b5051151561082e57600080fd5b60035460a060020a900460ff1681565b60035460009060a060020a900460ff161561091b57600080fd5b6105a58383611066565b600160a060020a031660009081526020819052604090205490565b61094a8282611155565b5050565b600354600160a060020a0316331461096557600080fd5b60035460a060020a900460ff161561097c57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600381527f4754530000000000000000000000000000000000000000000000000000000000602082015281565b6000610a1d83836111b7565b50600454600160a060020a0384811691161415610b6c57600480546040805160208101808352600080835292517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523395810186815260248201899052606060448301908152845160648401528451600160a060020a039097169763c0ee0b8a9790968b96959394929360849093019291908190849084905b83811015610acf578181015183820152602001610ab7565b50505050905090810190601f168015610afc5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b50506040805185815290513393507f99cb6dc47c170e4b5f1b96500c0618c78496baace933c2b880a75d3a9d6d1ea492509081900360200190a25b50600192915050565b600354600160a060020a03163314610b8c57600080fd5b600160a060020a0381161515610ba157600080fd5b60048054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f98628ed731afe1f27aa03919f7463d2e4d3462fc8d31776e7d0ece091a2977209181900360200190a150565b600454600160a060020a03163314610c1957600080fd5b600160a060020a0384161515610c2e57600080fd5b821515610c3a57600080fd5b60048054600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831694810194909452602484018790525191169163a9059cbb9160448083019260209291908290030181600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050506040513d6020811015610cd657600080fd5b50511515610ce357600080fd5b60048054604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051600093610db593600160a060020a03169263313ce567928183019260209282900301818887803b158015610d4357600080fd5b505af1158015610d57573d6000803e3d6000fd5b505050506040513d6020811015610d6d57600080fd5b505160055460ff909116600a0a90610da990612710908290610d9d8a670de0b6b3a764000063ffffffff6111db16565b9063ffffffff6111db16565b9063ffffffff61120616565b600354600160a060020a0316600090815260208190526040902054909150811115610ddf57600080fd5b600354600160a060020a0316600090815260208190526040902054610e0a908263ffffffff61122a16565b600354600160a060020a039081166000908152602081905260408082209390935590871681522054610e42908263ffffffff61123f16565b600160a060020a03808716600081815260208181526040918290209490945560035481518681529151929493169260008051602061159d83398151915292918290030190a35050505050565b60035460009060a060020a900460ff1615610ea857600080fd5b6105a58383611251565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600354600160a060020a03163314610ef457600080fd5b61082e816112ea565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035460009060a060020a900460ff1615610f7d57600080fd5b610f88848484611368565b949350505050565b600160a060020a0382161515610fa557600080fd5b600254610fb8908263ffffffff61122a16565b600255600160a060020a038216600090815260208190526040902054610fe4908263ffffffff61122a16565b600160a060020a0383166000818152602081815260408083209490945583518581529351919360008051602061159d833981519152929081900390910190a3604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b336000908152600160209081526040808320600160a060020a03861684529091528120548083106110ba57336000908152600160209081526040808320600160a060020a03881684529091528120556110ef565b6110ca818463ffffffff61122a16565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a0382166000908152600160209081526040808320338452909152902054611189908263ffffffff61122a16565b600160a060020a038316600090815260016020908152604080832033845290915290205561094a8282610f90565b60035460009060a060020a900460ff16156111d157600080fd5b6105a583836114cd565b60008215156111ec575060006105a8565b8282028284828115156111fb57fe5b04146105a557600080fd5b600080821161121457600080fd5b6000828481151561122157fe5b04949350505050565b60008282111561123957600080fd5b50900390565b6000828201838110156105a557600080fd5b336000908152600160209081526040808320600160a060020a0386168452909152812054611285908363ffffffff61123f16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03811615156112ff57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561137f57600080fd5b600160a060020a0384166000908152602081905260409020548211156113a457600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020548211156113d457600080fd5b600160a060020a0384166000908152602081905260409020546113fd908363ffffffff61122a16565b600160a060020a038086166000908152602081905260408082209390935590851681522054611432908363ffffffff61123f16565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054611474908363ffffffff61122a16565b600160a060020a038086166000818152600160209081526040808320338452825291829020949094558051868152905192871693919260008051602061159d833981519152929181900390910190a35060019392505050565b6000600160a060020a03831615156114e457600080fd5b3360009081526020819052604090205482111561150057600080fd5b33600090815260208190526040902054611520908363ffffffff61122a16565b3360009081526020819052604080822092909255600160a060020a03851681522054611552908363ffffffff61123f16565b600160a060020a0384166000818152602081815260409182902093909355805185815290519192339260008051602061159d8339815191529281900390910190a35060019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820e7147acad46e5ef8f59c87395d7608cee23ba228a78aa7773b3e1908535312f70029"
}