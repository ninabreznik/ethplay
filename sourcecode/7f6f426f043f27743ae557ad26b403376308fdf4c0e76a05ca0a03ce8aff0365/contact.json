{
  "address": "0x14c926f2290044b647e1bf2072e67b495eff1905",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Bethereum Token",
  "contractName": "BethereumToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-02\n*/\n\n/*\n--------------------------------------------------------------------------------\nThe Bethereum [BETHER] Token Smart Contract\n\nCredit:\nBethereum Limited\n\nERC20: https://github.com/ethereum/EIPs/issues/20\nERC223: https://github.com/ethereum/EIPs/issues/223\n\nMIT Licence\n--------------------------------------------------------------------------------\n*/\n\n/*\n* Contract that is working with ERC223 tokens\n*/\n\ncontract ContractReceiver {\n    function tokenFallback(address _from, uint _value, bytes _data) {\n        /* Fix for Mist warning */\n        _from;\n        _value;\n        _data;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract ERC223Interface {\n    uint public totalSupply;\n    function balanceOf(address who) constant returns (uint);\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\n\ncontract BethereumERC223 is ERC223Interface {\n    using SafeMath for uint256;\n\n    /* Contract Constants */\n    string public constant _name = \"Bethereum\";\n    string public constant _symbol = \"BETHER\";\n    uint8 public constant _decimals = 18;\n\n    /* Contract Variables */\n    address public owner;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping (address => uint256)) public allowed;\n\n    /* Constructor initializes the owner's balance and the supply  */\n    function BethereumERC223() {\n        owner = msg.sender;\n    }\n\n    /* ERC20 Events */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed to, uint256 value);\n\n    /* ERC223 Events */\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n\n    /* Returns the balance of a particular account */\n    function balanceOf(address _address) constant returns (uint256 balance) {\n        return balances[_address];\n    }\n\n    /* Transfer the balance from the sender's address to the address _to */\n    function transfer(address _to, uint _value) returns (bool success) {\n        if (balances[msg.sender] >= _value\n        && _value > 0\n        && balances[_to] + _value > balances[_to]) {\n            bytes memory empty;\n            if(isContract(_to)) {\n                return transferToContract(_to, _value, empty);\n            } else {\n                return transferToAddress(_to, _value, empty);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /* Withdraws to address _to form the address _from up to the amount _value */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] >= _value\n        && allowed[_from][msg.sender] >= _value\n        && _value > 0\n        && balances[_to] + _value > balances[_to]) {\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /* Allows _spender to withdraw the _allowance amount form sender */\n    function approve(address _spender, uint256 _allowance) returns (bool success) {\n        allowed[msg.sender][_spender] = _allowance;\n        Approval(msg.sender, _spender, _allowance);\n        return true;\n    }\n\n    /* Checks how much _spender can withdraw from _owner */\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* ERC223 Functions */\n    /* Get the contract constant _name */\n    function name() constant returns (string name) {\n        return _name;\n    }\n\n    /* Get the contract constant _symbol */\n    function symbol() constant returns (string symbol) {\n        return _symbol;\n    }\n\n    /* Get the contract constant _decimals */\n    function decimals() constant returns (uint8 decimals) {\n        return _decimals;\n    }\n\n    /* Transfer the balance from the sender's address to the address _to with data _data */\n    function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n        if (balances[msg.sender] >= _value\n        && _value > 0\n        && balances[_to] + _value > balances[_to]) {\n            if(isContract(_to)) {\n                return transferToContract(_to, _value, _data);\n            } else {\n                return transferToAddress(_to, _value, _data);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /* Transfer function when _to represents a regular address */\n    function transferToAddress(address _to, uint _value, bytes _data) internal returns (bool success) {\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /* Transfer function when _to represents a contract address, with the caveat\n    that the contract needs to implement the tokenFallback function in order to receive tokens */\n    function transferToContract(address _to, uint _value, bytes _data) internal returns (bool success) {\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /* Infers if whether _address is a contract based on the presence of bytecode */\n    function isContract(address _address) internal returns (bool is_contract) {\n        uint length;\n        if (_address == 0) return false;\n        assembly {\n        length := extcodesize(_address)\n        }\n        if(length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /* Stops any attempt to send Ether to this contract */\n    function () {\n        throw;\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        Unpause();\n    }\n}\n\n/**\n* @title Pausable token\n*\n* @dev StandardToken modified with pausable transfers.\n**/\ncontract PausableToken is BethereumERC223, Pausable {\n\n    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value, _data);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is BethereumERC223, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\ncontract BethereumToken is MintableToken, PausableToken {\n\n    function BethereumToken(){\n        pause();\n    }\n\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n    using SafeMath for uint256;\n\n    // The token being sold\n    MintableToken public token;\n\n    // start and end timestamps where investments are allowed (both inclusive)\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // address where funds are collected\n    address public wallet;\n\n    // amount of raised money in wei\n    uint256 public weiRaised;\n\n    /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n    function Crowdsale(uint256 _endTime, address _wallet) {\n\n        require(_endTime >= now);\n        require(_wallet != 0x0);\n\n        token = createTokenContract();\n        endTime = _endTime;\n        wallet = _wallet;\n    }\n\n    // creates the token to be sold.\n    // override this method to have crowdsale of a specific mintable token.\n    function createTokenContract() internal returns (BethereumToken) {\n        return new BethereumToken();\n    }\n\n\n    // fallback function can be used to buy tokens\n    function () payable {\n        buyTokens(msg.sender);\n    }\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) public payable {  }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal constant returns (bool) {\n        bool withinPeriod = now >= startTime && now <= endTime;\n        bool nonZeroPurchase = msg.value != 0;\n        return withinPeriod && nonZeroPurchase;\n    }\n\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        return now > endTime;\n    }\n}\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n    using SafeMath for uint256;\n\n    bool public isFinalized = false;\n\n    bool public weiCapReached = false;\n\n    event Finalized();\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() onlyOwner public {\n        require(!isFinalized);\n\n        finalization();\n        Finalized();\n\n        isFinalized = true;\n    }\n\n    /**\n     * @dev Can be overridden to add finalization logic. The overriding function\n     * should call super.finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function finalization() internal {\n    }\n}\n\ncontract BETHERTokenSale is FinalizableCrowdsale {\n    using SafeMath for uint256;\n\n    // Define sale\n    uint public constant RATE = 17500;\n    uint public constant TOKEN_SALE_LIMIT = 25000 * 1000000000000000000;\n\n    uint256 public constant TOKENS_FOR_OPERATIONS = 400000000*(10**18);\n    uint256 public constant TOKENS_FOR_SALE = 600000000*(10**18);\n\n    uint public constant TOKENS_FOR_PRESALE = 315000000*(1 ether / 1 wei);\n\n    uint public BONUS_PERCENTAGE;\n\n    enum Phase {\n    Created,\n    CrowdsaleRunning,\n    Paused\n    }\n\n    Phase public currentPhase = Phase.Created;\n\n    event LogPhaseSwitch(Phase phase);\n\n    // Constructor\n    function BETHERTokenSale(\n    uint256 _end,\n    address _wallet\n    )\n    FinalizableCrowdsale()\n    Crowdsale(_end, _wallet) {\n    }\n\n    function setNewBonusScheme(uint _bonusPercentage) {\n        BONUS_PERCENTAGE = _bonusPercentage;\n    }\n\n    function mintRawTokens(address _buyer, uint256 _newTokens) public onlyOwner {\n        token.mint(_buyer, _newTokens);\n    }\n\n    /// @dev Lets buy you some tokens.\n    function buyTokens(address _buyer) public payable {\n        // Available only if presale or crowdsale is running.\n        require(currentPhase == Phase.CrowdsaleRunning);\n        require(_buyer != address(0));\n        require(msg.value > 0);\n        require(validPurchase());\n\n        uint tokensWouldAddTo = 0;\n        uint weiWouldAddTo = 0;\n\n        uint256 weiAmount = msg.value;\n\n        uint newTokens = msg.value.mul(RATE);\n\n        weiWouldAddTo = weiRaised.add(weiAmount);\n\n        require(weiWouldAddTo <= TOKEN_SALE_LIMIT);\n\n        newTokens = addBonusTokens(token.totalSupply(), newTokens);\n\n        tokensWouldAddTo = newTokens.add(token.totalSupply());\n        require(tokensWouldAddTo <= TOKENS_FOR_SALE);\n\n        token.mint(_buyer, newTokens);\n        TokenPurchase(msg.sender, _buyer, weiAmount, newTokens);\n\n        weiRaised = weiWouldAddTo;\n        forwardFunds();\n        if (weiRaised == TOKENS_FOR_SALE){\n            weiCapReached = true;\n        }\n    }\n\n    // @dev Adds bonus tokens by token supply bought by user\n    // @param _totalSupply total supply of token bought during pre-sale/crowdsale\n    // @param _newTokens tokens currently bought by user\n    function addBonusTokens(uint256 _totalSupply, uint256 _newTokens) internal view returns (uint256) {\n        uint returnTokens;\n        uint tokens = _newTokens;\n        returnTokens = tokens.add(tokens.mul(BONUS_PERCENTAGE).div(100));\n\n        return returnTokens;\n    }\n\n    function setSalePhase(Phase _nextPhase) public onlyOwner {\n        currentPhase = _nextPhase;\n        LogPhaseSwitch(_nextPhase);\n    }\n\n    function transferTokenOwnership(address _newOwner) {\n        token.transferOwnership(_newOwner);\n    }\n\n    // Finalize\n    function finalization() internal {\n        uint256 toMint = TOKENS_FOR_OPERATIONS;\n        token.mint(wallet, toMint);\n        token.finishMinting();\n        token.transferOwnership(wallet);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600460146101000a81548160ff0219169083151502179055506000600460156101000a81548160ff02191690831515021790555034801561004657600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100e06100e5640100000000026401000000009004565b6101a6565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561014157600080fd5b600460159054906101000a900460ff1615151561015d57600080fd5b6001600460156101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b611d90806101b56000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461014557806306fdde0314610174578063095ea7b31461020457806318160ddd1461026957806323b872dd1461029457806327e235e314610319578063313ce5671461037057806332424aa3146103a15780633f4ba83a146103d257806340c10f19146103e95780635c6581651461044e5780635c975abb146104c557806370a08231146104f45780637d64bcb41461054b5780638456cb591461057a5780638da5cb5b1461059157806395d89b41146105e8578063a9059cbb14610678578063b09f1266146106dd578063be45fd621461076d578063d28d885214610818578063dd62ed3e146108a8578063f2fde38b1461091f575b34801561013f57600080fd5b50600080fd5b34801561015157600080fd5b5061015a610962565b604051808215151515815260200191505060405180910390f35b34801561018057600080fd5b50610189610975565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c95780820151818401526020810190506101ae565b50505050905090810190601f1680156101f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021057600080fd5b5061024f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109b2565b604051808215151515815260200191505060405180910390f35b34801561027557600080fd5b5061027e6109e2565b6040518082815260200191505060405180910390f35b3480156102a057600080fd5b506102ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109e8565b604051808215151515815260200191505060405180910390f35b34801561032557600080fd5b5061035a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a1a565b6040518082815260200191505060405180910390f35b34801561037c57600080fd5b50610385610a32565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103ad57600080fd5b506103b6610a3b565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103de57600080fd5b506103e7610a40565b005b3480156103f557600080fd5b50610434600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b00565b604051808215151515815260200191505060405180910390f35b34801561045a57600080fd5b506104af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ce8565b6040518082815260200191505060405180910390f35b3480156104d157600080fd5b506104da610d0d565b604051808215151515815260200191505060405180910390f35b34801561050057600080fd5b50610535600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d20565b6040518082815260200191505060405180910390f35b34801561055757600080fd5b50610560610d69565b604051808215151515815260200191505060405180910390f35b34801561058657600080fd5b5061058f610e31565b005b34801561059d57600080fd5b506105a6610ef2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105f457600080fd5b506105fd610f18565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063d578082015181840152602081019050610622565b50505050905090810190601f16801561066a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561068457600080fd5b506106c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f55565b604051808215151515815260200191505060405180910390f35b3480156106e957600080fd5b506106f2611076565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610732578082015181840152602081019050610717565b50505050905090810190601f16801561075f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561077957600080fd5b506107fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506110af565b604051808215151515815260200191505060405180910390f35b34801561082457600080fd5b5061082d6110e1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561086d578082015181840152602081019050610852565b50505050905090810190601f16801561089a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108b457600080fd5b50610909600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111a565b6040518082815260200191505060405180910390f35b34801561092b57600080fd5b50610960600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111a1565b005b600460149054906101000a900460ff1681565b60606040805190810160405280600981526020017f42657468657265756d0000000000000000000000000000000000000000000000815250905090565b6000600460159054906101000a900460ff161515156109d057600080fd5b6109da83836112f9565b905092915050565b60005481565b6000600460159054906101000a900460ff16151515610a0657600080fd5b610a118484846113eb565b90509392505050565b60026020528060005260406000206000915090505481565b60006012905090565b601281565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9c57600080fd5b600460159054906101000a900460ff161515610ab757600080fd5b6000600460156101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b5e57600080fd5b600460149054906101000a900460ff16151515610b7a57600080fd5b610b8f826000546116f290919063ffffffff16565b600081905550610be782600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116f290919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6003602052816000526040600020602052806000526040600020600091509150505481565b600460159054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dc757600080fd5b600460149054906101000a900460ff16151515610de357600080fd5b6001600460146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8d57600080fd5b600460159054906101000a900460ff16151515610ea957600080fd5b6001600460156101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606040805190810160405280600681526020017f4245544845520000000000000000000000000000000000000000000000000000815250905090565b6000606082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610fa85750600083115b80156110335750600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1561106a5761104184611710565b156110585761105184848361175c565b915061106f565b611063848483611a67565b915061106f565b600091505b5092915050565b6040805190810160405280600681526020017f424554484552000000000000000000000000000000000000000000000000000081525081565b6000600460159054906101000a900460ff161515156110cd57600080fd5b6110d8848484611c45565b90509392505050565b6040805190810160405280600981526020017f42657468657265756d000000000000000000000000000000000000000000000081525081565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111fd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561123957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156114b8575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156114c45750600082115b801561154f5750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156116e65781600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506116eb565b600090505b9392505050565b600080828401905083811015151561170657fe5b8091505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16141561173b5760009150611756565b823b905060008111156117515760019150611756565b600091505b50919050565b60008083600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156118be5780820151818401526020810190506118a3565b50505050905090810190601f1680156118eb5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561190c57600080fd5b505af1158015611920573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a38473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a20578082015181840152602081019050611a05565b50505050905090810190601f168015611a4d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019150509392505050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611bff578082015181840152602081019050611be4565b50505050905090810190601f168015611c2c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600190509392505050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611c965750600083115b8015611d215750600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15611d5857611d2f84611710565b15611d4657611d3f84848461175c565b9050611d5d565b611d51848484611a67565b9050611d5d565b600090505b93925050505600a165627a7a72305820553ceef02edfa96310a6b4d21ebefb1d14ca8c7fc79123b65bfe5c92dcf047e40029"
}