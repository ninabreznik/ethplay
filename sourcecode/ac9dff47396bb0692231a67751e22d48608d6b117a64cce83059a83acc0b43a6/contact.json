{
  "address": "0x552ed8253f341fb770e8badff5a0e0ee2fd57b43",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VestarinToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-02\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function () public payable {\n    revert();\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    \n  event Mint(address indexed to, uint256 amount);\n  \n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  address public saleAgent;\n\n  modifier notLocked() {\n    require(msg.sender == owner || msg.sender == saleAgent || mintingFinished);\n    _;\n  }\n\n  function setSaleAgent(address newSaleAgnet) public {\n    require(msg.sender == saleAgent || msg.sender == owner);\n    saleAgent = newSaleAgnet;\n  }\n\n  function mint(address _to, uint256 _amount) public returns (bool) {\n    require(msg.sender == saleAgent && !mintingFinished);\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n  \n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract VestarinToken is MintableToken {\t\n    \n  string public constant name = \"Vestarin\";\n   \n  string public constant symbol = \"VST\";\n    \n  uint32 public constant decimals = 18;\n\n  mapping (address => uint) public locked;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(locked[msg.sender] < now);\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(locked[_from] < now);\n    return super.transferFrom(_from, _to, _value);\n  }\n  \n  function lock(address addr, uint periodInDays) public {\n    require(locked[addr] < now && (msg.sender == saleAgent || msg.sender == addr));\n    locked[addr] = now + periodInDays * 1 days;\n  }\n\n}\n\ncontract StagedCrowdsale is Pausable {\n\n  using SafeMath for uint;\n\n  struct Stage {\n    uint hardcap;\n    uint price;\n    uint invested;\n    uint closed;\n  }\n\n  uint public start;\n\n  uint public period;\n\n  uint public totalHardcap;\n \n  uint public totalInvested;\n\n  Stage[] public stages;\n\n  function stagesCount() public constant returns(uint) {\n    return stages.length;\n  }\n\n  function setStart(uint newStart) public onlyOwner {\n    start = newStart;\n  }\n\n  function setPeriod(uint newPeriod) public onlyOwner {\n    period = newPeriod;\n  }\n\n  function addStage(uint hardcap, uint price) public onlyOwner {\n    require(hardcap > 0 && price > 0);\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n    stages.push(stage);\n    totalHardcap = totalHardcap.add(stage.hardcap);\n  }\n\n  function removeStage(uint8 number) public onlyOwner {\n    require(number >=0 && number < stages.length);\n    Stage storage stage = stages[number];\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \n    delete stages[number];\n    for (uint i = number; i < stages.length - 1; i++) {\n      stages[i] = stages[i+1];\n    }\n    stages.length--;\n  }\n\n  function changeStage(uint8 number, uint hardcap, uint price) public onlyOwner {\n    require(number >= 0 &&number < stages.length);\n    Stage storage stage = stages[number];\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \n    stage.hardcap = hardcap.mul(1 ether);\n    stage.price = price;\n    totalHardcap = totalHardcap.add(stage.hardcap);    \n  }\n\n  function insertStage(uint8 numberAfter, uint hardcap, uint price) public onlyOwner {\n    require(numberAfter < stages.length);\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n    totalHardcap = totalHardcap.add(stage.hardcap);\n    stages.length++;\n    for (uint i = stages.length - 2; i > numberAfter; i--) {\n      stages[i + 1] = stages[i];\n    }\n    stages[numberAfter + 1] = stage;\n  }\n\n  function clearStages() public onlyOwner {\n    for (uint i = 0; i < stages.length; i++) {\n      delete stages[i];\n    }\n    stages.length -= stages.length;\n    totalHardcap = 0;\n  }\n\n  function lastSaleDate() public constant returns(uint) {\n    return start + period * 1 days;\n  }\n\n  modifier saleIsOn() {\n    require(stages.length > 0 && now >= start && now < lastSaleDate());\n    _;\n  }\n  \n  modifier isUnderHardcap() {\n    require(totalInvested <= totalHardcap);\n    _;\n  }\n\n  function currentStage() public saleIsOn isUnderHardcap constant returns(uint) {\n    for(uint i=0; i < stages.length; i++) {\n      if(stages[i].closed == 0) {\n        return i;\n      }\n    }\n    revert();\n  }\n\n}\n\ncontract CommonSale is StagedCrowdsale {\n\n  address public masterWallet;\n\n  address public slaveWallet;\n  \n  address public directMintAgent;\n\n  uint public slaveWalletPercent = 30;\n\n  uint public percentRate = 100;\n\n  uint public minPrice;\n\n  uint public totalTokensMinted;\n  \n  bool public slaveWalletInitialized;\n  \n  bool public slaveWalletPercentInitialized;\n\n  VestarinToken public token;\n  \n  modifier onlyDirectMintAgentOrOwner() {\n    require(directMintAgent == msg.sender || owner == msg.sender);\n    _;\n  }\n  \n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n    directMintAgent = newDirectMintAgent;\n  }\n  \n  function setMinPrice(uint newMinPrice) public onlyOwner {\n    minPrice = newMinPrice;\n  }\n\n  function setSlaveWalletPercent(uint newSlaveWalletPercent) public onlyOwner {\n    require(!slaveWalletPercentInitialized);\n    slaveWalletPercent = newSlaveWalletPercent;\n    slaveWalletPercentInitialized = true;\n  }\n\n  function setMasterWallet(address newMasterWallet) public onlyOwner {\n    masterWallet = newMasterWallet;\n  }\n\n  function setSlaveWallet(address newSlaveWallet) public onlyOwner {\n    require(!slaveWalletInitialized);\n    slaveWallet = newSlaveWallet;\n    slaveWalletInitialized = true;\n  }\n  \n  function setToken(address newToken) public onlyOwner {\n    token = VestarinToken(newToken);\n  }\n\n  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn {\n    mintTokens(to, investedWei);\n  }\n\n  function createTokens() public whenNotPaused payable {\n    require(msg.value >= minPrice);\n    uint masterValue = msg.value.mul(percentRate.sub(slaveWalletPercent)).div(percentRate);\n    uint slaveValue = msg.value.sub(masterValue);\n    masterWallet.transfer(masterValue);\n    slaveWallet.transfer(slaveValue);\n    mintTokens(msg.sender, msg.value);\n  }\n\n  function mintTokens(address to, uint weiInvested) internal {\n    uint stageIndex = currentStage();\n    Stage storage stage = stages[stageIndex];\n    uint tokens = weiInvested.mul(stage.price);\n    token.mint(this, tokens);\n    token.transfer(to, tokens);\n    totalTokensMinted = totalTokensMinted.add(tokens);\n    totalInvested = totalInvested.add(weiInvested);\n    stage.invested = stage.invested.add(weiInvested);\n    if(stage.invested >= stage.hardcap) {\n      stage.closed = now;\n    }\n  }\n\n  function() external payable {\n    createTokens();\n  }\n  \n  function retrieveTokens(address anotherToken, address to) public onlyOwner {\n    ERC20 alienToken = ERC20(anotherToken);\n    alienToken.transfer(to, alienToken.balanceOf(this));\n  }\n\n}\n\ncontract Presale is CommonSale {\n\n  Mainsale public mainsale;\n\n  function setMainsale(address newMainsale) public onlyOwner {\n    mainsale = Mainsale(newMainsale);\n  }\n\n  function finishMinting() public whenNotPaused onlyOwner {\n    token.setSaleAgent(mainsale);\n  }\n\n  function() external payable {\n    createTokens();\n  }\n\n}\n\n\ncontract Mainsale is CommonSale {\n\n  address public foundersTokensWallet;\n  \n  address public bountyTokensWallet;\n  \n  uint public foundersTokensPercent;\n  \n  uint public bountyTokensPercent;\n  \n  uint public lockPeriod;\n\n  function setLockPeriod(uint newLockPeriod) public onlyOwner {\n    lockPeriod = newLockPeriod;\n  }\n\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner {\n    foundersTokensPercent = newFoundersTokensPercent;\n  }\n\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\n    bountyTokensPercent = newBountyTokensPercent;\n  }\n\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner {\n    foundersTokensWallet = newFoundersTokensWallet;\n  }\n\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\n    bountyTokensWallet = newBountyTokensWallet;\n  }\n\n  function finishMinting() public whenNotPaused onlyOwner {\n    uint summaryTokensPercent = bountyTokensPercent + foundersTokensPercent;\n    uint mintedTokens = token.totalSupply();\n    uint totalSupply = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\n    uint foundersTokens = totalSupply.mul(foundersTokensPercent).div(percentRate);\n    uint bountyTokens = totalSupply.mul(bountyTokensPercent).div(percentRate);\n    token.mint(this, foundersTokens);\n    token.lock(foundersTokensWallet, lockPeriod * 1 days);\n    token.transfer(foundersTokensWallet, foundersTokens);\n    token.mint(this, bountyTokens);\n    token.transfer(bountyTokensWallet, bountyTokens);\n    totalTokensMinted = totalTokensMinted.add(foundersTokens).add(bountyTokens);\n    token.finishMinting();\n  }\n\n}\n\ncontract Configurator is Ownable {\n\n  VestarinToken public token; \n\n  Presale public presale;\n\n  Mainsale public mainsale;\n\n  function deploy() public onlyOwner {\n    owner = 0x95EA6A4ec9F80436854702e5F05d238f27166A03;\n\n    token = new VestarinToken();\n\n    presale = new Presale();\n\n    presale.setToken(token);\n    presale.addStage(5000,3000);\n    presale.setMasterWallet(0x95EA6A4ec9F80436854702e5F05d238f27166A03);\n    presale.setSlaveWallet(0x070EcC35a3212D76ad443d529216a452eAA35E3D);\n    presale.setSlaveWalletPercent(30);\n    presale.setStart(1517317200);\n    presale.setPeriod(30);\n    presale.setMinPrice(100000000000000000);\n    token.setSaleAgent(presale);\t\n\n    mainsale = new Mainsale();\n\n    mainsale.setToken(token);\n    mainsale.addStage(5000,2000);\n    mainsale.addStage(5000,1800);\n    mainsale.addStage(10000,1700);\n    mainsale.addStage(20000,1600);\n    mainsale.addStage(20000,1500);\n    mainsale.addStage(40000,1300);\n    mainsale.setMasterWallet(0x95EA6A4ec9F80436854702e5F05d238f27166A03);\n    mainsale.setSlaveWallet(0x070EcC35a3212D76ad443d529216a452eAA35E3D);\n    mainsale.setSlaveWalletPercent(30);\n    mainsale.setFoundersTokensWallet(0x95EA6A4ec9F80436854702e5F05d238f27166A03);\n    mainsale.setBountyTokensWallet(0x95EA6A4ec9F80436854702e5F05d238f27166A03);\n    mainsale.setStart(1525352400);\n    mainsale.setPeriod(30);\n    mainsale.setLockPeriod(90);\n    mainsale.setMinPrice(100000000000000000);\n    mainsale.setFoundersTokensPercent(13);\n    mainsale.setBountyTokensPercent(5);\n\n    presale.setMainsale(mainsale);\n\n    token.transferOwnership(owner);\n    presale.transferOwnership(owner);\n    mainsale.transferOwnership(owner);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSaleAgnet\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"periodInDays\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260038054600160a860020a03191633600160a060020a0316179055610dfe8061002e6000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461011657806306fdde031461013d578063095ea7b3146101c757806314133a7c146101e957806318160ddd1461020a57806323b872dd1461022f578063282d3fdf14610257578063313ce5671461027957806340c10f19146102a557806366188463146102c757806370a08231146102e95780637d64bcb4146103085780638da5cb5b1461031b57806395d89b411461034a578063a9059cbb1461035d578063b1d6a2f01461037f578063cbf9fe5f14610392578063d73dd623146103b1578063dd62ed3e146103d3578063f2fde38b146103f8575b600080fd5b341561012157600080fd5b610129610417565b604051901515815260200160405180910390f35b341561014857600080fd5b610150610427565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018c578082015183820152602001610174565b50505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d257600080fd5b610129600160a060020a036004351660243561045e565b34156101f457600080fd5b610208600160a060020a03600435166104ca565b005b341561021557600080fd5b61021d61052f565b60405190815260200160405180910390f35b341561023a57600080fd5b610129600160a060020a0360043581169060243516604435610535565b341561026257600080fd5b610208600160a060020a036004351660243561056d565b341561028457600080fd5b61028c6105f0565b60405163ffffffff909116815260200160405180910390f35b34156102b057600080fd5b610129600160a060020a03600435166024356105f5565b34156102d257600080fd5b610129600160a060020a03600435166024356106c4565b34156102f457600080fd5b61021d600160a060020a03600435166107be565b341561031357600080fd5b6101296107d9565b341561032657600080fd5b61032e61087e565b604051600160a060020a03909116815260200160405180910390f35b341561035557600080fd5b61015061088d565b341561036857600080fd5b610129600160a060020a03600435166024356108c4565b341561038a57600080fd5b61032e6108fa565b341561039d57600080fd5b61021d600160a060020a0360043516610909565b34156103bc57600080fd5b610129600160a060020a036004351660243561091b565b34156103de57600080fd5b61021d600160a060020a03600435811690602435166109bf565b341561040357600080fd5b610208600160a060020a03600435166109ea565b60035460a060020a900460ff1681565b60408051908101604052600881527f566573746172696e000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60045433600160a060020a03908116911614806104f5575060035433600160a060020a039081169116145b151561050057600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005481565b600160a060020a03831660009081526005602052604081205442901061055a57600080fd5b610565848484610a85565b949350505050565b600160a060020a03821660009081526005602052604090205442901080156105be575060045433600160a060020a03908116911614806105be575081600160a060020a031633600160a060020a0316145b15156105c957600080fd5b600160a060020a039190911660009081526005602052604090206201518090910242019055565b601281565b60045460009033600160a060020a039081169116148015610620575060035460a060020a900460ff16155b151561062b57600080fd5b60005461063e908363ffffffff610add16565b6000908155600160a060020a038416815260016020526040902054610669908363ffffffff610add16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a250600192915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561072157600160a060020a033381166000908152600260209081526040808320938816835292905290812055610758565b610731818463ffffffff610aec16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60045460009033600160a060020a0390811691161480610807575060035433600160a060020a039081169116145b801561081d575060035460a060020a900460ff16155b151561082857600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600381527f5653540000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600560205260408120544290106108e957600080fd5b6108f38383610afe565b9392505050565b600454600160a060020a031681565b60056020526000908152604090205481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610953908363ffffffff610add16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610a0557600080fd5b600160a060020a0381161515610a1a57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035460009033600160a060020a0390811691161480610ab3575060045433600160a060020a039081169116145b80610ac7575060035460a060020a900460ff165b1515610ad257600080fd5b610565848484610b55565b6000828201838110156108f357fe5b600082821115610af857fe5b50900390565b60035460009033600160a060020a0390811691161480610b2c575060045433600160a060020a039081169116145b80610b40575060035460a060020a900460ff165b1515610b4b57600080fd5b6108f38383610cd7565b6000600160a060020a0383161515610b6c57600080fd5b600160a060020a038416600090815260016020526040902054821115610b9157600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610bc457600080fd5b600160a060020a038416600090815260016020526040902054610bed908363ffffffff610aec16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610c22908363ffffffff610add16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610c6a908363ffffffff610aec16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000600160a060020a0383161515610cee57600080fd5b600160a060020a033316600090815260016020526040902054821115610d1357600080fd5b600160a060020a033316600090815260016020526040902054610d3c908363ffffffff610aec16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610d71908363ffffffff610add16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001929150505600a165627a7a72305820261ca5e9c2af6fcc69a9318fdab4c351ad248be012ce6e7360a56029c37348150029"
}