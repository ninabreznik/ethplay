{
  "address": "0x1537Fa5D5c30Ca03D96326edcBCa26F72E614213",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fix",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\n// hevm: flattened sources of src/fix.sol\npragma solidity >=0.4.23 >=0.5.0;\n\n////// lib/ds-exec/src/exec.sol\n// exec.sol - base contract used by anything that wants to do \"untyped\" calls\n\n// Copyright (C) 2019 Maker\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\ncontract DSExec {\n    function tryExec( address target, bytes memory data, uint value)\n             internal\n             returns (bool ok)\n    {\n        assembly {\n            ok := call(gas, target, value, add(data, 0x20), mload(data), 0, 0)\n        }\n    }\n    function exec( address target, bytes memory data, uint value)\n             internal\n    {\n        if(!tryExec(target, data, value)) {\n            revert(\"ds-exec-call-failed\");\n        }\n    }\n\n    // Convenience aliases\n    function exec( address t, bytes memory c )\n        internal\n    {\n        exec(t, c, 0);\n    }\n    function exec( address t, uint256 v )\n        internal\n    {\n        bytes memory c; exec(t, c, v);\n    }\n    function tryExec( address t, bytes memory c )\n        internal\n        returns (bool)\n    {\n        return tryExec(t, c, 0);\n    }\n    function tryExec( address t, uint256 v )\n        internal\n        returns (bool)\n    {\n        bytes memory c; return tryExec(t, c, v);\n    }\n}\n\n////// src/fix.sol\n// fix.sol - change authorities\n\n// Copyright (C) 2019 Mariano Conti, MakerDAO\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.0; */\n\n/* import \"ds-exec/exec.sol\"; */\n\ncontract Fix is DSExec {\n\n    address constant public MOM    = 0xF2C5369cFFb8Ea6284452b0326e326DbFdCb867C; // SaiMom\n    address constant public TOP    = 0x9b0ccf7C8994E19F39b2B4CF708e0A7DF65fA8a3; // SaiTop\n    address constant public PIP    = 0x729D19f657BD0614b4985Cf1D82531c67569197B; // Pip\n    address constant public PEP    = 0x5C1fc813d9c1B5ebb93889B3d63bA24984CA44B7; // Pep\n    address constant public MKRUSD = 0x99041F808D598B782D5a3e498681C2452A31da08; // MKR/USD\n    \n    address constant public CHIEF  = 0x9eF05f7F6deB616fd37aC3c959a2dDD25A54E4F5; // New Chief\n    \n    bool public done;\n\n    function cast() public {\n        require(!done);\n\n        bytes memory data = abi.encodeWithSignature(\"setAuthority(address)\", CHIEF);\n        \n        exec(MOM, data, 0);\n        exec(TOP, data, 0);\n        \n        exec(PIP, data, 0);\n        exec(PEP, data, 0);\n        \n        exec(MKRUSD, data, 0);\n\n        done = true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610350806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806396d373e51161005b57806396d373e5146100c957806398aa31b6146100d3578063ae8421e1146100db578063d632fd1d146100f757610088565b80630e3ac9ad1461008d578063809fc4f8146100b157806386a4f6ee146100b957806395260a29146100c1575b600080fd5b6100956100ff565b604080516001600160a01b039092168252519081900360200190f35b610095610117565b61009561012f565b610095610147565b6100d161015f565b005b610095610270565b6100e3610288565b604080519115158252519081900360200190f35b610095610291565b739ef05f7f6deb616fd37ac3c959a2ddd25a54e4f581565b7399041f808d598b782d5a3e498681c2452a31da0881565b73f2c5369cffb8ea6284452b0326e326dbfdcb867c81565b735c1fc813d9c1b5ebb93889b3d63ba24984ca44b781565b60005460ff161561016f57600080fd5b60408051739ef05f7f6deb616fd37ac3c959a2ddd25a54e4f56024808301919091528251808303909101815260449091019091526020810180516001600160e01b0316600160e01b637a9e5e4b021790526101e073f2c5369cffb8ea6284452b0326e326dbfdcb867c8260006102a9565b610200739b0ccf7c8994e19f39b2b4cf708e0a7df65fa8a38260006102a9565b61022073729d19f657bd0614b4985cf1d82531c67569197b8260006102a9565b610240735c1fc813d9c1b5ebb93889b3d63ba24984ca44b78260006102a9565b6102607399041f808d598b782d5a3e498681c2452a31da088260006102a9565b506000805460ff19166001179055565b739b0ccf7c8994e19f39b2b4cf708e0a7df65fa8a381565b60005460ff1681565b73729d19f657bd0614b4985cf1d82531c67569197b81565b6102b483838361030d565b6103085760408051600160e51b62461bcd02815260206004820152601360248201527f64732d657865632d63616c6c2d6661696c656400000000000000000000000000604482015290519081900360640190fd5b505050565b600080600084516020860185885af194935050505056fea165627a7a723058208c5cfbd2787f5daad1fc2303a8c78d3a0b2eeb9fe38eae6e23ce4a77611c5b9a0029"
}