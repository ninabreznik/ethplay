{
  "address": "0x45f71fa627d50caf012c037c07fe2663c4eda2ae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "L2",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-02\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: contracts/SmartToken.sol\n\ninterface IERC223Receiver {\n  function tokenFallback(address _from, uint256 _value, bytes _data) external;\n}\n\n\n/// @title Smart token implementation compatible with ERC20, ERC223, Mintable, Burnable and Pausable tokens\n/// @author Aler Denisov <[email protected]>\ncontract SmartToken is BurnableToken, CappedToken, PausableToken {\n  constructor(uint256 _cap) public CappedToken(_cap) {}\n\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  ) public returns (bool) \n  {\n    bytes memory empty;\n    return transferFrom(\n      _from, \n      _to, \n      _value, \n      empty\n    );\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  ) public returns (bool)\n  {\n    require(_value <= allowed[_from][msg.sender], \"Used didn't allow sender to interact with balance\");\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    if (isContract(_to)) {\n      return transferToContract(\n        _from, \n        _to, \n        _value, \n        _data\n      ); \n    } else {\n      return transferToAddress(\n        _from, \n        _to, \n        _value, \n        _data\n      );\n    }\n  }\n\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n    if (isContract(_to)) {\n      return transferToContract(\n        msg.sender,\n        _to,\n        _value,\n        _data\n      );\n    } else {\n      return transferToAddress(\n        msg.sender,\n        _to,\n        _value,\n        _data\n      );\n    }\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    bytes memory empty;\n    return transfer(_to, _value, empty);\n  }\n\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 length;\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      //retrieve the size of the code on target address, this needs assembly\n      length := extcodesize(_addr)\n    } \n    return (length>0);\n  }\n\n  function moveTokens(address _from, address _to, uint256 _value) internal returns (bool success) {\n    require(balanceOf(_from) >= _value, \"Balance isn't enough\");\n    balances[_from] = balanceOf(_from).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n\n    return true;\n  }\n\n  function transferToAddress(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  ) internal returns (bool success) \n  {\n    require(moveTokens(_from, _to, _value), \"Tokens movement was failed\");\n    emit Transfer(_from, _to, _value);\n    emit Transfer(\n      _from,\n      _to,\n      _value,\n      _data\n    );\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  ) internal returns (bool success) \n  {\n    require(moveTokens(_from, _to, _value), \"Tokens movement was failed\");\n    IERC223Receiver(_to).tokenFallback(_from, _value, _data);\n    emit Transfer(_from, _to, _value);\n    emit Transfer(\n      _from,\n      _to,\n      _value,\n      _data\n    );\n    return true;\n  }\n}\n\n// File: contracts/SmartMultichainToken.sol\n\ncontract SmartMultichainToken is SmartToken {\n  event BlockchainExchange(\n    address indexed from, \n    uint256 value, \n    uint256 indexed newNetwork, \n    bytes32 adr\n  );\n\n  constructor(uint256 _cap) public SmartToken(_cap) {}\n  /// @dev Function to burn tokens and rise event for burn tokens in another network\n  /// @param _amount The amount of tokens that will burn\n  /// @param _network The index of target network.\n  /// @param _adr The address in new network\n  function blockchainExchange(\n    uint256 _amount, \n    uint256 _network, \n    bytes32 _adr\n  ) public \n  {\n    burn(_amount);\n    cap.sub(_amount);\n    emit BlockchainExchange(\n      msg.sender, \n      _amount, \n      _network, \n      _adr\n    );\n  }\n\n  /// @dev Function to burn allowed tokens from special address and rise event for burn tokens in another network\n  /// @param _from The address of holder\n  /// @param _amount The amount of tokens that will burn\n  /// @param _network The index of target network.\n  /// @param _adr The address in new network\n  function blockchainExchangeFrom(\n    address _from,\n    uint256 _amount, \n    uint256 _network, \n    bytes32 _adr\n  ) public \n  {\n    require(_amount <= allowed[_from][msg.sender], \"Used didn't allow sender to interact with balance\");\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n    _burn(_from, _amount);\n    emit BlockchainExchange(\n      msg.sender, \n      _amount, \n      _network,\n      _adr\n    );\n  }\n}\n\n// File: contracts/Blacklist.sol\n\ncontract Blacklist is BurnableToken, Ownable {\n  mapping (address => bool) public blacklist;\n\n  event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n  event AddedBlackList(address _user);\n  event RemovedBlackList(address _user);\n\n  function isBlacklisted(address _maker) public view returns (bool) {\n    return blacklist[_maker];\n  }\n\n  function addBlackList(address _evilUser) public onlyOwner {\n    blacklist[_evilUser] = true;\n    emit AddedBlackList(_evilUser);\n  }\n\n  function removeBlackList(address _clearedUser) public onlyOwner {\n    blacklist[_clearedUser] = false;\n    emit RemovedBlackList(_clearedUser);\n  }\n\n  function destroyBlackFunds(address _blackListedUser) public onlyOwner {\n    require(blacklist[_blackListedUser], \"User isn't blacklisted\");\n    uint dirtyFunds = balanceOf(_blackListedUser);\n    _burn(_blackListedUser, dirtyFunds);\n    emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n  }\n}\n\n// File: contracts/TransferTokenPolicy.sol\n\ncontract TransferTokenPolicy is SmartToken {\n  modifier isTransferAllowed(address _from, address _to, uint256 _value) {\n    require(_allowTransfer(_from, _to, _value), \"Transfer isn't allowed\");\n    _;\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  ) public isTransferAllowed(_from, _to, _value) returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  ) public isTransferAllowed(_from, _to, _value) returns (bool)\n  {\n    return super.transferFrom(\n      _from,\n      _to,\n      _value,\n      _data\n    );\n  }\n\n  function transfer(address _to, uint256 _value, bytes _data) public isTransferAllowed(msg.sender, _to, _value) returns (bool success) {\n    return super.transfer(_to, _value, _data);\n  }\n\n  function transfer(address _to, uint256 _value) public isTransferAllowed(msg.sender, _to, _value) returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n\n  function burn(uint256 _amount) public isTransferAllowed(msg.sender, address(0x0), _amount) {\n    super.burn(_amount);\n  }\n\n  function _allowTransfer(address, address, uint256) internal returns(bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: contracts/L2.sol\n\ncontract L2 is TransferTokenPolicy, SmartMultichainToken, Blacklist, DetailedERC20 {\n  uint256 private precision = 4; \n  constructor() public\n    DetailedERC20(\n      \"L2\",\n      \"L2\",\n      uint8(precision)\n    )\n    SmartMultichainToken(\n      40 * 10 ** (7 + precision) // 40 millions with decimals\n    ) {\n  }\n\n  function _allowTransfer(address _from, address _to, uint256) internal returns(bool) {\n    return !isBlacklisted(_from) && !isBlacklisted(_to);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_network\",\"type\":\"uint256\"},{\"name\":\"_adr\",\"type\":\"bytes32\"}],\"name\":\"blockchainExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_network\",\"type\":\"uint256\"},{\"name\":\"_adr\",\"type\":\"bytes32\"}],\"name\":\"blockchainExchangeFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newNetwork\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adr\",\"type\":\"bytes32\"}],\"name\":\"BlockchainExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff02191690556005805460ff191690556004600a553480156200003057600080fd5b5060408051808201825260028082527f4c320000000000000000000000000000000000000000000000000000000000006020808401829052845180860190955291845290830152600a805460038054600160a060020a031916331790559192919060286007830190910a02808060008111620000ab57600080fd5b60045550508251620000c5906007906020860190620000f9565b508151620000db906008906020850190620000f9565b506009805460ff191660ff92909216919091179055506200019e9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013c57805160ff19168380011785556200016c565b828001600101855582156200016c579182015b828111156200016c5782518255916020019190600101906200014f565b506200017a9291506200017e565b5090565b6200019b91905b808211156200017a576000815560010162000185565b90565b611afc80620001ae6000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461018f57806306fdde03146101b8578063095ea7b3146102425780630ecb93c01461026657806318160ddd1461028957806323b872dd146102b0578063313ce567146102da578063355274ea146103055780633567950c1461031a5780633f4ba83a1461033857806340c10f191461034d57806342966c68146103715780635c975abb14610389578063635550a61461039e57806366188463146103c857806370a08231146103ec578063715018a61461040d5780637d64bcb4146104225780638456cb59146104375780638da5cb5b1461044c57806395d89b411461047d578063a9059cbb14610492578063ab67aa58146104b6578063be45fd6214610525578063d73dd6231461058e578063dd62ed3e146105b2578063e4997dc5146105d9578063f2fde38b146105fa578063f3bdc2281461061b578063f9f92be41461063c578063fe575a871461065d575b600080fd5b34801561019b57600080fd5b506101a461067e565b604080519115158252519081900360200190f35b3480156101c457600080fd5b506101cd61069f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102075781810151838201526020016101ef565b50505050905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024e57600080fd5b506101a4600160a060020a036004351660243561072d565b34801561027257600080fd5b50610287600160a060020a0360043516610751565b005b34801561029557600080fd5b5061029e6107c3565b60408051918252519081900360200190f35b3480156102bc57600080fd5b506101a4600160a060020a03600435811690602435166044356107c9565b3480156102e657600080fd5b506102ef610833565b6040805160ff9092168252519081900360200190f35b34801561031157600080fd5b5061029e61083c565b34801561032657600080fd5b50610287600435602435604435610842565b34801561034457600080fd5b506102876108a3565b34801561035957600080fd5b506101a4600160a060020a0360043516602435610900565b34801561037d57600080fd5b5061028760043561092f565b34801561039557600080fd5b506101a4610991565b3480156103aa57600080fd5b50610287600160a060020a036004351660243560443560643561099a565b3480156103d457600080fd5b506101a4600160a060020a0360043516602435610ae2565b3480156103f857600080fd5b5061029e600160a060020a0360043516610aff565b34801561041957600080fd5b50610287610b1a565b34801561042e57600080fd5b506101a4610b88565b34801561044357600080fd5b50610287610c2e565b34801561045857600080fd5b50610461610c8d565b60408051600160a060020a039092168252519081900360200190f35b34801561048957600080fd5b506101cd610c9c565b34801561049e57600080fd5b506101a4600160a060020a0360043516602435610cf7565b3480156104c257600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101a494600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610d5f9650505050505050565b34801561053157600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a4948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610dcb9650505050505050565b34801561059a57600080fd5b506101a4600160a060020a0360043516602435610e2a565b3480156105be57600080fd5b5061029e600160a060020a0360043581169060243516610e47565b3480156105e557600080fd5b50610287600160a060020a0360043516610e72565b34801561060657600080fd5b50610287600160a060020a0360043516610ee1565b34801561062757600080fd5b50610287600160a060020a0360043516610f04565b34801561064857600080fd5b506101a4600160a060020a0360043516610fed565b34801561066957600080fd5b506101a4600160a060020a0360043516611002565b60035474010000000000000000000000000000000000000000900460ff1681565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107255780601f106106fa57610100808354040283529160200191610725565b820191906000526020600020905b81548152906001019060200180831161070857829003601f168201915b505050505081565b60055460009060ff161561074057600080fd5b61074a8383611020565b9392505050565b600354600160a060020a0316331461076857600080fd5b600160a060020a038116600081815260066020908152604091829020805460ff19166001179055815192835290517f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc9281900390910190a150565b60015490565b60008383836107d9838383611086565b151561081d576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611a91833981519152604482015290519081900360640190fd5b6108288787876110ac565b979650505050505050565b60095460ff1681565b60045481565b61084b8361092f565b60045461085e908463ffffffff6110c516565b5060408051848152602081018390528151849233927f230e102e6565b461183889793c10ca61c5112f749edf48039d91ae0ea1a1da64929081900390910190a3505050565b600354600160a060020a031633146108ba57600080fd5b60055460ff1615156108cb57600080fd5b6005805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600060045461091a836001546110d790919063ffffffff16565b111561092557600080fd5b61074a83836110ea565b3360008261093e838383611086565b1515610982576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611a91833981519152604482015290519081900360640190fd5b61098b846111f3565b50505050565b60055460ff1681565b600160a060020a0384166000908152600260209081526040808320338452909152902054831115610a3b576040805160e560020a62461bcd02815260206004820152603160248201527f55736564206469646e277420616c6c6f772073656e64657220746f20696e746560448201527f7261637420776974682062616c616e6365000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054610a6f908463ffffffff6110c516565b600160a060020a0385166000908152600260209081526040808320338452909152902055610a9d84846111f9565b60408051848152602081018390528151849233927f230e102e6565b461183889793c10ca61c5112f749edf48039d91ae0ea1a1da64929081900390910190a350505050565b60055460009060ff1615610af557600080fd5b61074a83836112e8565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610b3157600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a03163314610ba257600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610bca57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a03163314610c4557600080fd5b60055460ff1615610c5557600080fd5b6005805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107255780601f106106fa57610100808354040283529160200191610725565b6000338383610d07838383611086565b1515610d4b576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611a91833981519152604482015290519081900360640190fd5b610d5586866113d7565b9695505050505050565b6000848484610d6f838383611086565b1515610db3576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611a91833981519152604482015290519081900360640190fd5b610dbf888888886113e6565b98975050505050505050565b6000338484610ddb838383611086565b1515610e1f576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611a91833981519152604482015290519081900360640190fd5b61082887878761150c565b60055460009060ff1615610e3d57600080fd5b61074a838361153b565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610e8957600080fd5b600160a060020a038116600081815260066020908152604091829020805460ff19169055815192835290517fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c9281900390910190a150565b600354600160a060020a03163314610ef857600080fd5b610f01816115d4565b50565b600354600090600160a060020a03163314610f1e57600080fd5b600160a060020a03821660009081526006602052604090205460ff161515610f90576040805160e560020a62461bcd02815260206004820152601660248201527f557365722069736e277420626c61636b6c697374656400000000000000000000604482015290519081900360640190fd5b610f9982610aff565b9050610fa582826111f9565b60408051600160a060020a03841681526020810183905281517f61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6929181900390910190a15050565b60066020526000908152604090205460ff1681565b600160a060020a031660009081526006602052604090205460ff1690565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600061109184611002565b1580156110a457506110a283611002565b155b949350505050565b600060606110bc85858584610d5f565b95945050505050565b6000828211156110d157fe5b50900390565b818101828110156110e457fe5b92915050565b600354600090600160a060020a0316331461110457600080fd5b60035474010000000000000000000000000000000000000000900460ff161561112c57600080fd5b60015461113f908363ffffffff6110d716565b600155600160a060020a03831660009081526020819052604090205461116b908363ffffffff6110d716565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020611ab18339815191529181900360200190a350600192915050565b610f0133825b600160a060020a03821660009081526020819052604090205481111561121e57600080fd5b600160a060020a038216600090815260208190526040902054611247908263ffffffff6110c516565b600160a060020a038316600090815260208190526040902055600154611273908263ffffffff6110c516565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020611ab18339815191529181900360200190a35050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061133c57336000908152600260209081526040808320600160a060020a0388168452909152812055611371565b61134c818463ffffffff6110c516565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600060606110a4848483610dcb565b600160a060020a0384166000908152600260209081526040808320338452909152812054831115611487576040805160e560020a62461bcd02815260206004820152603160248201527f55736564206469646e277420616c6c6f772073656e64657220746f20696e746560448201527f7261637420776974682062616c616e6365000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03851660009081526002602090815260408083203384529091529020546114bb908463ffffffff6110c516565b600160a060020a03861660009081526002602090815260408083203384529091529020556114e884611652565b15611500576114f98585858561165a565b90506110a4565b6114f9858585856118ab565b600061151784611652565b1561152f576115283385858561165a565b905061074a565b611528338585856118ab565b336000908152600260209081526040808320600160a060020a038616845290915281205461156f908363ffffffff6110d716565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03811615156115e957600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000903b1190565b60006116678585856119c0565b15156116bd576040805160e560020a62461bcd02815260206004820152601a60248201527f546f6b656e73206d6f76656d656e7420776173206661696c6564000000000000604482015290519081900360640190fd5b83600160a060020a031663c0ee0b8a8685856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561175557818101518382015260200161173d565b50505050905090810190601f1680156117825780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156117a357600080fd5b505af11580156117b7573d6000803e3d6000fd5b5050604080518681529051600160a060020a03808916945089169250600080516020611ab18339815191529181900360200190a383600160a060020a031685600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561186557818101518382015260200161184d565b50505050905090810190601f1680156118925780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001949350505050565b60006118b88585856119c0565b151561190e576040805160e560020a62461bcd02815260206004820152601a60248201527f546f6b656e73206d6f76656d656e7420776173206661696c6564000000000000604482015290519081900360640190fd5b83600160a060020a031685600160a060020a0316600080516020611ab1833981519152856040518082815260200191505060405180910390a383600160a060020a031685600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360008381101561186557818101518382015260200161184d565b6000816119cc85610aff565b1015611a22576040805160e560020a62461bcd02815260206004820152601460248201527f42616c616e63652069736e277420656e6f756768000000000000000000000000604482015290519081900360640190fd5b611a3b82611a2f86610aff565b9063ffffffff6110c516565b600160a060020a038516600090815260208190526040902055611a6d82611a6185610aff565b9063ffffffff6110d716565b600160a060020a038416600090815260208190526040902055506001939250505056005472616e736665722069736e277420616c6c6f77656400000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582002809210b1a88ef5a0b0ea96ffef837623a15344d01cbf17f10bca8f2379b9900029"
}