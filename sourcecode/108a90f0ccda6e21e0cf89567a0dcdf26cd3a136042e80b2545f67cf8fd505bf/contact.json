{
  "address": "0x24e32370b0fc59aedb3536d5b396887fa78683ec",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bussiness",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity ^0.5.8;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract IERC721 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20BasicInterface {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    uint8 public decimals;\n}\n\ncontract Bussiness is Ownable {\n\n    using SafeMath for uint256;\n    address public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\n    ERC20BasicInterface public hbwalletToken = ERC20BasicInterface(0xEc7ba74789694d0d03D458965370Dc7cF2FE75Ba);\n    // address public ceoAddress = address(0x2076A228E6eB670fd1C604DE574d555476520DB7);\n    // ERC20BasicInterface public hbwalletToken = ERC20BasicInterface(0x91013928b1C4dbd0D5cB21BA5b052BfD840A7a7F);\n    uint256 public Percen = 1000;\n    uint256 public HBWALLETExchange = 21;\n    // cong thuc hbFee = ETHFee / Percen * HBWALLETExchange / 2\n    // uint256 public hightLightFee = 30000000000000000;\n\n    struct Price {\n        address payable tokenOwner;\n        uint256 price;\n        uint256 fee;\n        uint256 hbfee;\n        uint isHightlight;\n        uint isHightlightByHb;\n    }\n    // new code =======================\n    struct Game {\n        mapping(uint256 => Price) tokenPrice;\n        uint[] tokenIdSale;\n        uint256 ETHFee;\n        uint256 limitETHFee;\n        uint256 limitHBWALLETFee;\n        uint256 hightLightFee;\n    }\n\n    mapping(address => Game) public Games;\n    address[] arrGames;\n    constructor() public {\n        Games[address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B)].ETHFee = 0;\n        Games[address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B)].limitETHFee = 0;\n        Games[address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B)].limitHBWALLETFee = 0;\n        Games[address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B));\n\n        Games[address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea)].ETHFee = 0;\n        Games[address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea)].limitETHFee = 0;\n        Games[address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea)].limitHBWALLETFee = 0;\n        Games[address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea));\n\n        Games[address(0x273f7F8E6489682Df756151F5525576E322d51A3)].ETHFee = 0;\n        Games[address(0x273f7F8E6489682Df756151F5525576E322d51A3)].limitETHFee = 0;\n        Games[address(0x273f7F8E6489682Df756151F5525576E322d51A3)].limitHBWALLETFee = 0;\n        Games[address(0x273f7F8E6489682Df756151F5525576E322d51A3)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x273f7F8E6489682Df756151F5525576E322d51A3));\n\n        Games[address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d)].ETHFee = 0;\n        Games[address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d)].limitETHFee = 0;\n        Games[address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d)].limitHBWALLETFee = 0;\n        Games[address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d));\n\n        Games[address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392)].ETHFee = 0;\n        Games[address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392)].limitETHFee = 0;\n        Games[address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392)].limitHBWALLETFee = 0;\n        Games[address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392));\n\n        Games[address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f)].ETHFee = 0;\n        Games[address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f)].limitETHFee = 0;\n        Games[address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f)].limitHBWALLETFee = 0;\n        Games[address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f));\n\n        Games[address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340)].ETHFee = 0;\n        Games[address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340)].limitETHFee = 0;\n        Games[address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340)].limitHBWALLETFee = 0;\n        Games[address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340));\n\n        Games[address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b)].ETHFee = 0;\n        Games[address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b)].limitETHFee = 0;\n        Games[address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b)].limitHBWALLETFee = 0;\n        Games[address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b));\n\n        Games[address(0xf26A23019b4699068bb54457f32dAFCF22A9D371)].ETHFee = 0;\n        Games[address(0xf26A23019b4699068bb54457f32dAFCF22A9D371)].limitETHFee = 0;\n        Games[address(0xf26A23019b4699068bb54457f32dAFCF22A9D371)].limitHBWALLETFee = 0;\n        Games[address(0xf26A23019b4699068bb54457f32dAFCF22A9D371)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0xf26A23019b4699068bb54457f32dAFCF22A9D371));\n\n        Games[address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)].ETHFee = 0;\n        Games[address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)].limitETHFee = 0;\n        Games[address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)].limitHBWALLETFee = 0;\n        Games[address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099));\n        \n        // Games[address(0xac9D8D6dB95828259069226456DDe98d8E296c5f)].ETHFee = 0;\n        // Games[address(0xac9D8D6dB95828259069226456DDe98d8E296c5f)].limitETHFee = 0;\n        // Games[address(0xac9D8D6dB95828259069226456DDe98d8E296c5f)].limitHBWALLETFee = 0;\n        // Games[address(0xac9D8D6dB95828259069226456DDe98d8E296c5f)].hightLightFee = 30000000000000000;\n        // arrGames.push(address(0xac9D8D6dB95828259069226456DDe98d8E296c5f));\n    }\n    \n    function getTokenPrice(address _game, uint256 _tokenId) public view returns (address, uint256, uint256, uint256, uint, uint) {\n        return (Games[_game].tokenPrice[_tokenId].tokenOwner, \n        Games[_game].tokenPrice[_tokenId].price, Games[_game].tokenPrice[_tokenId].fee, \n        Games[_game].tokenPrice[_tokenId].hbfee, Games[_game].tokenPrice[_tokenId].isHightlight, \n        Games[_game].tokenPrice[_tokenId].isHightlightByHb);\n    }\n    // new code =======================\n    /**\n     * @dev Throws if called by any account other than the ceo address.\n     */\n    modifier onlyCeoAddress() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n    modifier isOwnerOf(address _game, uint256 _tokenId) {\n        IERC721 erc721Address = IERC721(_game);\n        require(erc721Address.ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n    \n    function ownerOf(address _game, uint256 _tokenId) public view returns (address){\n        IERC721 erc721Address = IERC721(_game);\n        return erc721Address.ownerOf(_tokenId);\n    }\n\n    function balanceOf() public view returns (uint256){\n        return address(this).balance;\n    }\n\n    function getApproved(address _game, uint256 _tokenId) public view returns (address){\n        IERC721 erc721Address = IERC721(_game);\n        return erc721Address.getApproved(_tokenId);\n    }\n\n    function setPrice(address _game, uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint _hbfee, uint _isHightLight, uint _isHightLightByHb) internal {\n        Games[_game].tokenPrice[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight, _isHightLightByHb);\n        Games[_game].tokenIdSale.push(_tokenId);\n        bool flag = false;\n        for(uint i = 0; i< arrGames.length; i++) {\n            if(arrGames[i] == address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)) flag = true;\n        }\n        if(!flag) arrGames.push(address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099));\n    }\n\n    function calPriceFeeEth(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns(uint256, uint256) {\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        uint256 ethNeed;\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || Games[_game].tokenPrice[_tokenId].isHightlight != 1)) {\n            _hightLightFee = Games[_game].hightLightFee;\n        }\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(Games[_game].tokenPrice[_tokenId].price).mul(Games[_game].ETHFee).div(Percen);\n            if(Games[_game].tokenPrice[_tokenId].price == 0) {\n                if (ethfee >= Games[_game].limitETHFee) {\n                    ethNeed = ethfee.add(_hightLightFee);\n                } else {\n                    ethNeed = Games[_game].limitETHFee.add(_hightLightFee);\n                }\n            }\n\n        }\n        return (ethNeed, _hightLightFee);\n    }\n    function setPriceFeeEth(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public payable isOwnerOf(_game, _tokenId) {\n        require(Games[_game].tokenPrice[_tokenId].price != _ethPrice);\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || Games[_game].tokenPrice[_tokenId].isHightlight != 1)) {\n            _hightLightFee = Games[_game].hightLightFee;\n        }\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(Games[_game].tokenPrice[_tokenId].price).mul(Games[_game].ETHFee).div(Percen);\n            if(Games[_game].tokenPrice[_tokenId].price == 0) {\n                if (ethfee >= Games[_game].limitETHFee) {\n                    require(msg.value == ethfee.add(_hightLightFee));\n                } else {\n                    require(msg.value == Games[_game].limitETHFee.add(_hightLightFee));\n                    ethfee = Games[_game].limitETHFee;\n                }\n            }\n            ethfee = ethfee.add(Games[_game].tokenPrice[_tokenId].fee);\n        } else ethfee = _ethPrice.mul(Games[_game].ETHFee).div(Percen);\n\n        setPrice(_game, _tokenId, _ethPrice, ethfee, 0, _isHightLight, 0);\n    }\n    function calPriceFeeHBWALLET(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns (uint256){\n        uint fee;\n        uint256 ethfee;\n        uint _hightLightFee = 0;\n        uint hbNeed;\n        address local_game = _game;\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || Games[_game].tokenPrice[_tokenId].isHightlight != 1)) {\n            // _hightLightFee = hightLightFee * HBWALLETExchange / 2 / (10 ** 16);\n            _hightLightFee = Games[local_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(Games[local_game].tokenPrice[_tokenId].price).mul(Games[_game].ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\n            if(Games[_game].tokenPrice[_tokenId].price == 0) {\n                if (fee >= Games[_game].limitHBWALLETFee) {\n                    hbNeed = fee.add(_hightLightFee);\n                } else {\n                    hbNeed = Games[_game].limitHBWALLETFee.add(_hightLightFee);\n                }\n            }\n        }\n        return hbNeed;\n    }\n    function setPriceFeeHBWALLET(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public isOwnerOf(_game, _tokenId) {\n        require(Games[_game].tokenPrice[_tokenId].price != _ethPrice);\n        uint fee;\n        uint256 ethfee;\n        uint _hightLightFee = 0;\n        address local_game = _game;\n        uint256 local_tokenId = _tokenId;\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || Games[_game].tokenPrice[_tokenId].isHightlight != 1)) {\n            _hightLightFee = Games[local_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(Games[local_game].tokenPrice[local_tokenId].price).mul(Games[local_game].ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\n            if(Games[_game].tokenPrice[_tokenId].price == 0) {\n                if (fee >= Games[_game].limitHBWALLETFee) {\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), fee.add(_hightLightFee)));\n                } else {\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), Games[local_game].limitHBWALLETFee.add(_hightLightFee)));\n                    fee = Games[_game].limitHBWALLETFee;\n                }\n            }\n            fee = fee.add(Games[_game].tokenPrice[_tokenId].hbfee);\n        } else {\n            ethfee = _ethPrice.mul(Games[local_game].ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n\n        setPrice(_game, _tokenId, _ethPrice, 0, fee, 0, _isHightLight);\n    }\n\n    function removePrice(address _game, uint256 _tokenId) public isOwnerOf(_game, _tokenId) returns (uint256){\n        if (Games[_game].tokenPrice[_tokenId].fee > 0) msg.sender.transfer(Games[_game].tokenPrice[_tokenId].fee);\n        else if (Games[_game].tokenPrice[_tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, Games[_game].tokenPrice[_tokenId].hbfee);\n        resetPrice(_game, _tokenId);\n        return Games[_game].tokenPrice[_tokenId].price;\n    }\n\n    function setHBWALLETExchange(uint _HBWALLETExchange) public onlyOwner returns (uint){\n        require(_HBWALLETExchange >= 1);\n\n        HBWALLETExchange = _HBWALLETExchange;\n\n        return (HBWALLETExchange);\n    }\n\n    function setLimitFee(address _game, uint256 _ethFee, uint256 _ethlimitFee, uint _hbWalletlimitFee, uint256 _hightLightFee) public onlyOwner returns (uint256, uint256, uint256, uint256){\n        require(_ethFee >= 0 && _ethlimitFee >= 0 && _hbWalletlimitFee >= 0 && _hightLightFee >= 0);\n        Games[_game].ETHFee = _ethFee;\n        Games[_game].limitETHFee = _ethlimitFee;\n        Games[_game].limitHBWALLETFee = _hbWalletlimitFee;\n        Games[_game].hightLightFee = _hightLightFee;\n        return (Games[_game].ETHFee, Games[_game].limitETHFee, Games[_game].limitHBWALLETFee, Games[_game].hightLightFee);\n    }\n\n    function _withdraw(uint256 amount, uint256 _amountHB) internal {\n        require(address(this).balance >= amount && hbwalletToken.balanceOf(address(this)) >= _amountHB);\n        if(amount > 0) {\n            msg.sender.transfer(amount);\n        }\n        if(_amountHB > 0) {\n            hbwalletToken.transfer(msg.sender, _amountHB);\n        }\n    }\n    function withdraw(uint256 amount, uint8 _amountHB) public onlyCeoAddress {\n        _withdraw(amount, _amountHB);\n    }\n    function cancelBussinessByGameId(address _game, uint256 _tokenId) private {\n        IERC721 erc721Address = IERC721(_game);\n        if (Games[_game].tokenPrice[_tokenId].tokenOwner == erc721Address.ownerOf(_tokenId)) {\n            \n            uint256 eth = Games[_game].tokenPrice[_tokenId].fee;\n            if(Games[_game].tokenPrice[_tokenId].isHightlight == 1) eth = eth.add(Games[_game].hightLightFee);\n            if(eth > 0 && address(this).balance >= eth) {\n                Games[_game].tokenPrice[_tokenId].tokenOwner.transfer(eth);\n            }\n             \n            uint256 hb = Games[_game].tokenPrice[_tokenId].hbfee;\n            if(Games[_game].tokenPrice[_tokenId].isHightlightByHb == 1) hb = hb.add(Games[_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16));\n            if(hb > 0 && hbwalletToken.balanceOf(address(this)) >= hb) {\n                hbwalletToken.transfer(Games[_game].tokenPrice[_tokenId].tokenOwner, hb);\n            }\n            \n        }\n    }\n    function cancelBussinessByGame(address _game) private onlyCeoAddress {\n        for (uint i = 0; i < Games[_game].tokenIdSale.length; i++) {\n            cancelBussinessByGameId(_game, Games[_game].tokenIdSale[i]);\n        }\n            \n    }\n    function cancelBussiness() public onlyCeoAddress {\n        for(uint j = 0; j< arrGames.length; j++) {\n            address _game = arrGames[j];\n            cancelBussinessByGame(_game);\n        }\n        _withdraw(address(this).balance, hbwalletToken.balanceOf(address(this)));\n    }\n    function removePriceByCeo() public onlyCeoAddress {\n        for(uint j = 0; j< arrGames.length; j++) {\n            resetPriceByArr(arrGames[j]);\n        }\n        \n    }\n    // function testrevenue(address _game) public view returns (uint256, bool, bool, uint256){\n    //     uint256 ethfee;\n    //     uint256 hbfee;\n    //     address local_game = _game;\n        \n    //     IERC721 erc721Address = IERC721(_game);\n    //     for (uint i = 0; i < Games[_game].tokenIdSale.length; i++) {\n    //         uint256 _tokenId = Games[_game].tokenIdSale[i];\n    //         if (Games[local_game].tokenPrice[_tokenId].tokenOwner == erc721Address.ownerOf(_tokenId)) {\n    //             if (Games[local_game].tokenPrice[_tokenId].fee >= 0) {\n    //                 ethfee = ethfee.add(Games[local_game].tokenPrice[_tokenId].fee);\n    //                 if(Games[local_game].tokenPrice[_tokenId].isHightlight == 1) ethfee = ethfee.add(Games[local_game].hightLightFee);\n    //             }\n    //             else if (Games[local_game].tokenPrice[_tokenId].hbfee >= 0) {\n    //                 hbfee = hbfee.add(Games[local_game].tokenPrice[_tokenId].hbfee);\n    //                 if(Games[local_game].tokenPrice[_tokenId].isHightlight == 1) hbfee = hbfee.add(Games[local_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16));\n    //             }\n    //         }\n    //         if(i== Games[local_game].tokenIdSale.length-1) {\n    //             uint256 eth = address(this).balance;\n    //             uint256 hb = hbwalletToken.balanceOf(address(this));\n    //             return (ethfee, Games[local_game].tokenPrice[_tokenId].tokenOwner == erc721Address.ownerOf(_tokenId), \n    //             Games[local_game].tokenPrice[_tokenId].fee >= 0, ethfee.add(Games[local_game].hightLightFee));\n    //         }\n    //     }\n        \n    // }\n    function revenue() public view returns (uint256, uint){\n\n        uint256 ethfee;\n        uint256 hbfee;\n        for(uint j = 0; j< arrGames.length; j++) {\n\n            address _game = arrGames[j];\n            IERC721 erc721Address = IERC721(arrGames[j]);\n            for (uint i = 0; i < Games[_game].tokenIdSale.length; i++) {\n                uint256 _tokenId = Games[_game].tokenIdSale[i];\n                if (Games[_game].tokenPrice[_tokenId].tokenOwner == erc721Address.ownerOf(_tokenId)) {\n                    \n                    ethfee = ethfee.add(Games[_game].tokenPrice[_tokenId].fee);\n                    if(Games[_game].tokenPrice[_tokenId].isHightlight == 1) ethfee = ethfee.add(Games[_game].hightLightFee);\n\n                    hbfee = hbfee.add(Games[_game].tokenPrice[_tokenId].hbfee);\n                    if(Games[_game].tokenPrice[_tokenId].isHightlightByHb == 1) hbfee = hbfee.add(Games[_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16));\n\n                }\n            }\n        }\n\n        uint256 eth = address(this).balance.sub(ethfee);\n        uint256 hb = hbwalletToken.balanceOf(address(this)).sub(hbfee);\n        return (eth, hb);\n    }\n\n    function changeCeo(address _address) public onlyCeoAddress {\n        require(_address != address(0));\n        ceoAddress = _address;\n\n    }\n\n    function buy(address _game, uint256 tokenId) public payable {\n        IERC721 erc721Address = IERC721(_game);\n        require(getApproved(_game, tokenId) == address(this));\n        require(Games[_game].tokenPrice[tokenId].price > 0 && Games[_game].tokenPrice[tokenId].price == msg.value);\n        erc721Address.transferFrom(Games[_game].tokenPrice[tokenId].tokenOwner, msg.sender, tokenId);\n        Games[_game].tokenPrice[tokenId].tokenOwner.transfer(msg.value);\n        resetPrice(_game, tokenId);\n    }\n\n    function buyWithoutCheckApproved(address _game, uint256 tokenId) public payable {\n        IERC721 erc721Address = IERC721(_game);\n        require(Games[_game].tokenPrice[tokenId].price > 0 && Games[_game].tokenPrice[tokenId].price == msg.value);\n        erc721Address.transferFrom(Games[_game].tokenPrice[tokenId].tokenOwner, msg.sender, tokenId);\n        Games[_game].tokenPrice[tokenId].tokenOwner.transfer(msg.value);\n        resetPrice(_game, tokenId);\n    }\n    // Move the last element to the deleted spot.\n    // Delete the last element, then correct the length.\n    function _burnArrayTokenIdSale(address _game, uint256 index)  internal {\n        if (index >= Games[_game].tokenIdSale.length) return;\n\n        for (uint i = index; i<Games[_game].tokenIdSale.length-1; i++){\n            Games[_game].tokenIdSale[i] = Games[_game].tokenIdSale[i+1];\n        }\n        delete Games[_game].tokenIdSale[Games[_game].tokenIdSale.length-1];\n        Games[_game].tokenIdSale.length--;\n    }\n    function resetPriceByArr(address _game) private {\n        for (uint256 i = 0; i < Games[_game].tokenIdSale.length; i++) {\n            Games[_game].tokenPrice[Games[_game].tokenIdSale[i]] = Price(address(0), 0, 0, 0, 0, 0);\n            if(i<Games[_game].tokenIdSale.length) {\n                for (uint j = i; j<Games[_game].tokenIdSale.length-1; j++){\n                    Games[_game].tokenIdSale[j] = Games[_game].tokenIdSale[j+1];\n                }\n                delete Games[_game].tokenIdSale[Games[_game].tokenIdSale.length-1];\n                Games[_game].tokenIdSale.length--;\n            }\n        }\n    }\n    function resetPrice(address _game, uint256 _tokenId) private {\n        Games[_game].tokenPrice[_tokenId] = Price(address(0), 0, 0, 0, 0, 0);\n        for (uint8 i = 0; i < Games[_game].tokenIdSale.length; i++) {\n            if (Games[_game].tokenIdSale[i] == _tokenId) {\n                _burnArrayTokenIdSale(_game, i);\n            }\n        }\n    }\n}",
  "bytecode": ""
}