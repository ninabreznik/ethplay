{
  "address": "0x83cee9e086a77e492ee0bb93c2b0437ad6fdeccc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "GoldmintToken",
  "contractName": "MNTP",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-18\n*/\n\npragma solidity ^0.4.16;\n\ncontract SafeMath {\n     function safeMul(uint a, uint b) internal returns (uint) {\n          uint c = a * b;\n          assert(a == 0 || c / a == b);\n          return c;\n     }\n\n     function safeSub(uint a, uint b) internal returns (uint) {\n          assert(b <= a);\n          return a - b;\n     }\n\n     function safeAdd(uint a, uint b) internal returns (uint) {\n          uint c = a + b;\n          assert(c>=a && c>=b);\n          return c;\n     }\n}\n\n// ERC20 standard\n// We don't use ERC23 standard\ncontract StdToken is SafeMath {\n// Fields:\n     mapping(address => uint256) balances;\n     mapping (address => mapping (address => uint256)) allowed;\n     uint public totalSupply = 0;\n\n// Events:\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n// Functions:\n     function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns(bool){\n          require(balances[msg.sender] >= _value);\n          require(balances[_to] + _value > balances[_to]);\n\n          balances[msg.sender] = safeSub(balances[msg.sender],_value);\n          balances[_to] = safeAdd(balances[_to],_value);\n\n          Transfer(msg.sender, _to, _value);\n          return true;\n     }\n\n     function transferFrom(address _from, address _to, uint256 _value) returns(bool){\n          require(balances[_from] >= _value);\n          require(allowed[_from][msg.sender] >= _value);\n          require(balances[_to] + _value > balances[_to]);\n\n          balances[_to] = safeAdd(balances[_to],_value);\n          balances[_from] = safeSub(balances[_from],_value);\n          allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n\n          Transfer(_from, _to, _value);\n          return true;\n     }\n\n     function balanceOf(address _owner) constant returns (uint256) {\n          return balances[_owner];\n     }\n\n     function approve(address _spender, uint256 _value) returns (bool) {\n          // To change the approve amount you first have to reduce the addresses`\n          //  allowance to zero by calling `approve(_spender, 0)` if it is not\n          //  already 0 to mitigate the race condition described here:\n          //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n          require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n          allowed[msg.sender][_spender] = _value;\n          Approval(msg.sender, _spender, _value);\n          return true;\n     }\n\n     function allowance(address _owner, address _spender) constant returns (uint256) {\n          return allowed[_owner][_spender];\n     }\n\n     modifier onlyPayloadSize(uint _size) {\n          require(msg.data.length >= _size + 4);\n          _;\n     }\n}\n\ncontract MNTP is StdToken {\n// Fields:\n     string public constant name = \"Goldmint MNT Prelaunch Token\";\n     string public constant symbol = \"MNTP\";\n     uint public constant decimals = 18;\n\n     address public creator = 0x0;\n     address public icoContractAddress = 0x0;\n     bool public lockTransfers = false;\n\n     // 10 mln\n     uint public constant TOTAL_TOKEN_SUPPLY = 10000000 * 1 ether;\n\n/// Modifiers:\n     modifier onlyCreator() { \n          require(msg.sender == creator); \n          _; \n     }\n\n     modifier byIcoContract() { \n          require(msg.sender == icoContractAddress); \n          _; \n     }\n\n     function setCreator(address _creator) onlyCreator {\n          creator = _creator;\n     }\n\n// Setters/Getters\n     function setIcoContractAddress(address _icoContractAddress) onlyCreator {\n          icoContractAddress = _icoContractAddress;\n     }\n\n// Functions:\n     function MNTP() {\n          creator = msg.sender;\n\n          assert(TOTAL_TOKEN_SUPPLY == 10000000 * 1 ether);\n     }\n\n     /// @dev Override\n     function transfer(address _to, uint256 _value) public returns(bool){\n          require(!lockTransfers);\n          return super.transfer(_to,_value);\n     }\n\n     /// @dev Override\n     function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\n          require(!lockTransfers);\n          return super.transferFrom(_from,_to,_value);\n     }\n\n     function issueTokens(address _who, uint _tokens) byIcoContract {\n          require((totalSupply + _tokens) <= TOTAL_TOKEN_SUPPLY);\n\n          balances[_who] = safeAdd(balances[_who],_tokens);\n          totalSupply = safeAdd(totalSupply,_tokens);\n\n          Transfer(0x0, _who, _tokens);\n     }\n\n     // For refunds only\n     function burnTokens(address _who, uint _tokens) byIcoContract {\n          balances[_who] = safeSub(balances[_who], _tokens);\n          totalSupply = safeSub(totalSupply, _tokens);\n     }\n\n     function lockTransfer(bool _lock) byIcoContract {\n          lockTransfers = _lock;\n     }\n\n     // Do not allow to send money directly to this contract\n     function() {\n          revert();\n     }\n}\n\n// This contract will hold all tokens that were unsold during ICO.\n//\n// Goldmint Team should be able to withdraw them and sell only after 1 year is passed after \n// ICO is finished.\ncontract GoldmintUnsold is SafeMath {\n     address public creator;\n     address public teamAccountAddress;\n     address public icoContractAddress;\n     uint64 public icoIsFinishedDate;\n\n     MNTP public mntToken;\n\n     function GoldmintUnsold(address _teamAccountAddress,address _mntTokenAddress){\n          creator = msg.sender;\n          teamAccountAddress = _teamAccountAddress;\n\n          mntToken = MNTP(_mntTokenAddress);          \n     }\n\n     modifier onlyCreator() { \n          require(msg.sender==creator); \n          _; \n     }\n\n     modifier onlyIcoContract() { \n          require(msg.sender==icoContractAddress); \n          _; \n     }\n\n// Setters/Getters\n     function setIcoContractAddress(address _icoContractAddress) onlyCreator {\n          icoContractAddress = _icoContractAddress;\n     }\n\n     function finishIco() public onlyIcoContract {\n          icoIsFinishedDate = uint64(now);\n     }\n\n     // can be called by anyone...\n     function withdrawTokens() public {\n          // Check if 1 year is passed\n          uint64 oneYearPassed = icoIsFinishedDate + 365 days;  \n          require(uint(now) >= oneYearPassed);\n\n          // Transfer all tokens from this contract to the teamAccountAddress\n          uint total = mntToken.balanceOf(this);\n          mntToken.transfer(teamAccountAddress,total);\n     }\n\n     // Do not allow to send money directly to this contract\n     function() payable {\n          revert();\n     }\n}\n\ncontract FoundersVesting is SafeMath {\n     address public creator;\n     address public teamAccountAddress;\n     uint64 public lastWithdrawTime;\n\n     uint public withdrawsCount = 0;\n     uint public amountToSend = 0;\n\n     MNTP public mntToken;\n\n     function FoundersVesting(address _teamAccountAddress,address _mntTokenAddress){\n          teamAccountAddress = _teamAccountAddress;\n          lastWithdrawTime = uint64(now);\n\n          mntToken = MNTP(_mntTokenAddress);          \n\n          creator = msg.sender;\n     }\n\n     modifier onlyCreator() { \n          require(msg.sender==creator); \n          _; \n     }\n\n     function withdrawTokens() onlyCreator public {\n          // 1 - wait for the next month\n          uint64 oneMonth = lastWithdrawTime + 30 days;  \n          require(uint(now) >= oneMonth);\n\n          // 2 - calculate amount (only first time)\n          if(withdrawsCount==0){\n               amountToSend = mntToken.balanceOf(this) / 10;\n          }\n\n          require(amountToSend!=0);\n\n          // 3 - send 1/10th\n          uint currentBalance = mntToken.balanceOf(this);\n          if(currentBalance<amountToSend){\n             amountToSend = currentBalance;  \n          }\n          mntToken.transfer(teamAccountAddress,amountToSend);\n\n          // 4 - update counter\n          withdrawsCount++;\n          lastWithdrawTime = uint64(now);\n     }\n\n     // Do not allow to send money directly to this contract\n     function() payable {\n          revert();\n     }\n}\n\n// This is the main Goldmint ICO smart contract\ncontract Goldmint is SafeMath {\n// Constants:\n     // These values are HARD CODED!!!\n     // For extra security we split single multisig wallet into 10 separate multisig wallets\n     //\n     // THIS IS A REAL ICO WALLETS!!!\n     // PLEASE DOUBLE CHECK THAT...\n     address[] public multisigs = [\n          0xcEc42E247097C276Ad3D7cFd270aDBd562dA5c61,\n          0x373C46c544662B8C5D55c24Cf4F9a5020163eC2f,\n          0x672CF829272339A6c8c11b14Acc5F9d07bAFAC7c,\n          0xce0e1981A19a57aE808a7575a6738e4527fB9118,\n          0x93Aa76cdb17EeA80e4De983108ef575D8fc8f12b,\n          0x20ae3329Cd1e35FEfF7115B46218c9D056d430Fd,\n          0xe9fC1A57a5dC1CaA3DE22A940E9F09e640615f7E,\n          0xD360433950DE9F6FA0e93C29425845EeD6BFA0d0,\n          0xF0De97EAff5D6c998c80e07746c81a336e1BBd43,\n          0x80b365da1C18f4aa1ecFa0dFA07Ed4417B05Cc69\n     ];\n\n     // We count ETH invested by person, for refunds (see below)\n     mapping(address => uint) ethInvestedBy;\n     uint collectedWei = 0;\n\n     // These can be changed before ICO starts ($7USD/MNTP)\n     uint constant STD_PRICE_USD_PER_1000_TOKENS = 7000;\n\n     // The USD/ETH exchange rate may be changed every hour and can vary from $100 to $700 depending on the market. The exchange rate is retrieved from coinmarketcap.com site and is rounded to $1 dollar. For example if current marketcap price is $306.123 per ETH, the price is set as $306 to the contract.\n     uint public usdPerEthCoinmarketcapRate = 300;\n     uint64 public lastUsdPerEthChangeDate = 0;\n\n     // Price changes from block to block\n     uint constant SINGLE_BLOCK_LEN = 700000;\n     // 1 000 000 tokens\n     uint public constant BONUS_REWARD = 1000000 * 1 ether;\n     // 2 000 000 tokens\n     uint public constant FOUNDERS_REWARD = 2000000 * 1 ether;\n     // 7 000 000 is sold during the ICO\n     uint public constant ICO_TOKEN_SUPPLY_LIMIT = 7000000 * 1 ether;\n     // 150 000 tokens soft cap (otherwise - refund)\n     uint public constant ICO_TOKEN_SOFT_CAP = 150000 * 1 ether;\n\n     // 3 000 000 can be issued from other currencies\n     uint public constant MAX_ISSUED_FROM_OTHER_CURRENCIES = 3000000 * 1 ether;\n     // 30 000 MNTP tokens per one call only\n     uint public constant MAX_SINGLE_ISSUED_FROM_OTHER_CURRENCIES = 30000 * 1 ether;\n     uint public issuedFromOtherCurrencies = 0;\n\n// Fields:\n     address public creator = 0x0;                // can not be changed after deploy\n     address public ethRateChanger = 0x0;         // can not be changed after deploy\n     address public tokenManager = 0x0;           // can be changed by token manager only\n     address public otherCurrenciesChecker = 0x0; // can not be changed after deploy\n\n     uint64 public icoStartedTime = 0;\n\n     MNTP public mntToken; \n\n     GoldmintUnsold public unsoldContract;\n\n     // Total amount of tokens sold during ICO\n     uint public icoTokensSold = 0;\n     // Total amount of tokens sent to GoldmintUnsold contract after ICO is finished\n     uint public icoTokensUnsold = 0;\n     // Total number of tokens that were issued by a scripts\n     uint public issuedExternallyTokens = 0;\n     // This is where FOUNDERS_REWARD will be allocated\n     address public foundersRewardsAccount = 0x0;\n\n     enum State{\n          Init,\n\n          ICORunning,\n          ICOPaused,\n\n          // Collected ETH is transferred to multisigs.\n          // Unsold tokens transferred to GoldmintUnsold contract.\n          ICOFinished,\n\n          // We start to refund if Soft Cap is not reached.\n          // Then each token holder should request a refund personally from his\n          // personal wallet.\n          //\n          // We will return ETHs only to the original address. If your address is changed\n          // or you have lost your keys -> you will not be able to get a refund.\n          // \n          // There is no any possibility to transfer tokens\n          // There is no any possibility to move back\n          Refunding,\n\n          // In this state we lock all MNT tokens forever.\n          // We are going to migrate MNTP -> MNT tokens during this stage. \n          // \n          // There is no any possibility to transfer tokens\n          // There is no any possibility to move back\n          Migrating\n     }\n     State public currentState = State.Init;\n\n// Modifiers:\n     modifier onlyCreator() { \n          require(msg.sender==creator); \n          _; \n     }\n     modifier onlyTokenManager() { \n          require(msg.sender==tokenManager); \n          _; \n     }\n     modifier onlyOtherCurrenciesChecker() { \n          require(msg.sender==otherCurrenciesChecker); \n          _; \n     }\n     modifier onlyEthSetter() { \n          require(msg.sender==ethRateChanger); \n          _; \n     }\n\n     modifier onlyInState(State state){ \n          require(state==currentState); \n          _; \n     }\n\n// Events:\n     event LogStateSwitch(State newState);\n     event LogBuy(address indexed owner, uint value);\n     event LogBurn(address indexed owner, uint value);\n     \n// Functions:\n     /// @dev Constructor\n     function Goldmint(\n          address _tokenManager,\n          address _ethRateChanger,\n          address _otherCurrenciesChecker,\n\n          address _mntTokenAddress,\n          address _unsoldContractAddress,\n          address _foundersVestingAddress)\n     {\n          creator = msg.sender;\n\n          tokenManager = _tokenManager;\n          ethRateChanger = _ethRateChanger;\n          lastUsdPerEthChangeDate = uint64(now);\n\n          otherCurrenciesChecker = _otherCurrenciesChecker; \n\n          mntToken = MNTP(_mntTokenAddress);\n          unsoldContract = GoldmintUnsold(_unsoldContractAddress);\n\n          // slight rename\n          foundersRewardsAccount = _foundersVestingAddress;\n\n          assert(multisigs.length==10);\n     }\n\n     function startICO() public onlyCreator onlyInState(State.Init) {\n          setState(State.ICORunning);\n          icoStartedTime = uint64(now);\n          mntToken.lockTransfer(true);\n          mntToken.issueTokens(foundersRewardsAccount, FOUNDERS_REWARD);\n     }\n\n     function pauseICO() public onlyCreator onlyInState(State.ICORunning) {\n          setState(State.ICOPaused);\n     }\n\n     function resumeICO() public onlyCreator onlyInState(State.ICOPaused) {\n          setState(State.ICORunning);\n     }\n\n     function startRefunding() public onlyCreator onlyInState(State.ICORunning) {\n          // only switch to this state if less than ICO_TOKEN_SOFT_CAP sold\n          require(icoTokensSold < ICO_TOKEN_SOFT_CAP);\n          setState(State.Refunding);\n\n          // in this state tokens still shouldn't be transferred\n          assert(mntToken.lockTransfers());\n     }\n\n     function startMigration() public onlyCreator onlyInState(State.ICOFinished) {\n          // there is no way back...\n          setState(State.Migrating);\n\n          // disable token transfers\n          mntToken.lockTransfer(true);\n     }\n\n     /// @dev This function can be called by creator at any time,\n     /// or by anyone if ICO has really finished.\n     function finishICO() public onlyInState(State.ICORunning) {\n          require(msg.sender == creator || isIcoFinished());\n          setState(State.ICOFinished);\n\n          // 1 - lock all transfers\n          mntToken.lockTransfer(false);\n\n          // 2 - move all unsold tokens to unsoldTokens contract\n          icoTokensUnsold = safeSub(ICO_TOKEN_SUPPLY_LIMIT,icoTokensSold);\n          if(icoTokensUnsold>0){\n               mntToken.issueTokens(unsoldContract,icoTokensUnsold);\n               unsoldContract.finishIco();\n          }\n\n          // 3 - send all ETH to multisigs\n          // we have N separate multisigs for extra security\n          uint sendThisAmount = (this.balance / 10);\n\n          // 3.1 - send to 9 multisigs\n          for(uint i=0; i<9; ++i){\n               address ms = multisigs[i];\n\n               if(this.balance>=sendThisAmount){\n                    ms.transfer(sendThisAmount);\n               }\n          }\n\n          // 3.2 - send everything left to 10th multisig\n          if(0!=this.balance){\n               address lastMs = multisigs[9];\n               lastMs.transfer(this.balance);\n          }\n     }\n\n     function setState(State _s) internal {\n          currentState = _s;\n          LogStateSwitch(_s);\n     }\n\n// Access methods:\n     function setTokenManager(address _new) public onlyTokenManager {\n          tokenManager = _new;\n     }\n\n     // TODO: stealing creator's key means stealing otherCurrenciesChecker key too!\n     /*\n     function setOtherCurrenciesChecker(address _new) public onlyCreator {\n          otherCurrenciesChecker = _new;\n     }\n     */\n\n     // These are used by frontend so we can not remove them\n     function getTokensIcoSold() constant public returns (uint){          \n          return icoTokensSold;       \n     }      \n     \n     function getTotalIcoTokens() constant public returns (uint){          \n          return ICO_TOKEN_SUPPLY_LIMIT;         \n     }       \n     \n     function getMntTokenBalance(address _of) constant public returns (uint){         \n          return mntToken.balanceOf(_of);         \n     }        \n\n     function getBlockLength()constant public returns (uint){          \n          return SINGLE_BLOCK_LEN;      \n     }\n\n     function getCurrentPrice()constant public returns (uint){\n          return getMntTokensPerEth(icoTokensSold);\n     }\n\n     function getTotalCollectedWei()constant public returns (uint){\n          return collectedWei;\n     }\n\n/////////////////////////////\n     function isIcoFinished() constant public returns(bool) {\n          return (icoStartedTime > 0)\n            && (now > (icoStartedTime + 30 days) || (icoTokensSold >= ICO_TOKEN_SUPPLY_LIMIT));\n     }\n\n     function getMntTokensPerEth(uint _tokensSold) public constant returns (uint){\n          // 10 buckets\n          uint priceIndex = (_tokensSold / 1 ether) / SINGLE_BLOCK_LEN;\n          assert(priceIndex>=0 && (priceIndex<=9));\n          \n          uint8[10] memory discountPercents = [20,15,10,8,6,4,2,0,0,0];\n\n          // We have to multiply by '1 ether' to avoid float truncations\n          // Example: ($7000 * 100) / 120 = $5833.33333\n          uint pricePer1000tokensUsd = \n               ((STD_PRICE_USD_PER_1000_TOKENS * 100) * 1 ether) / (100 + discountPercents[priceIndex]);\n\n          // Correct: 300000 / 5833.33333333 = 51.42857142\n          // We have to multiply by '1 ether' to avoid float truncations\n          uint mntPerEth = (usdPerEthCoinmarketcapRate * 1000 * 1 ether * 1 ether) / pricePer1000tokensUsd;\n          return mntPerEth;\n     }\n\n     function buyTokens(address _buyer) public payable onlyInState(State.ICORunning) {\n          require(msg.value!=0);\n\n          // The price is selected based on current sold tokens.\n          // Price can 'overlap'. For example:\n          //   1. if currently we sold 699950 tokens (the price is 10% discount)\n          //   2. buyer buys 1000 tokens\n          //   3. the price of all 1000 tokens would be with 10% discount!!!\n          uint newTokens = (msg.value * getMntTokensPerEth(icoTokensSold)) / 1 ether;\n\n          issueTokensInternal(_buyer,newTokens);\n\n          // Update this only when buying from ETH\n          ethInvestedBy[msg.sender] = safeAdd(ethInvestedBy[msg.sender], msg.value);\n\n          // This is total collected ETH\n          collectedWei = safeAdd(collectedWei, msg.value);\n     }\n\n     /// @dev This is called by other currency processors to issue new tokens \n     function issueTokensFromOtherCurrency(address _to, uint _weiCount) onlyInState(State.ICORunning) public onlyOtherCurrenciesChecker {\n          require(_weiCount!=0);\n\n          uint newTokens = (_weiCount * getMntTokensPerEth(icoTokensSold)) / 1 ether;\n          \n          require(newTokens<=MAX_SINGLE_ISSUED_FROM_OTHER_CURRENCIES);\n          require((issuedFromOtherCurrencies + newTokens)<=MAX_ISSUED_FROM_OTHER_CURRENCIES);\n\n          issueTokensInternal(_to,newTokens);\n\n          issuedFromOtherCurrencies = issuedFromOtherCurrencies + newTokens;\n     }\n\n     /// @dev This can be called to manually issue new tokens \n     /// from the bonus reward\n     function issueTokensExternal(address _to, uint _tokens) public onlyTokenManager {\n          // in 2 states\n          require((State.ICOFinished==currentState) || (State.ICORunning==currentState));\n          // can not issue more than BONUS_REWARD\n          require((issuedExternallyTokens + _tokens)<=BONUS_REWARD);\n\n          mntToken.issueTokens(_to,_tokens);\n\n          issuedExternallyTokens = issuedExternallyTokens + _tokens;\n     }\n\n     function issueTokensInternal(address _to, uint _tokens) internal {\n          require((icoTokensSold + _tokens)<=ICO_TOKEN_SUPPLY_LIMIT);\n\n          mntToken.issueTokens(_to,_tokens); \n          icoTokensSold+=_tokens;\n\n          LogBuy(_to,_tokens);\n     }\n\n     // anyone can call this and get his money back\n     function getMyRefund() public onlyInState(State.Refunding) {\n          address sender = msg.sender;\n          uint ethValue = ethInvestedBy[sender];\n\n          require(ethValue > 0);\n\n          // 1 - burn tokens\n          ethInvestedBy[sender] = 0;\n          mntToken.burnTokens(sender, mntToken.balanceOf(sender));\n\n          // 2 - send money back\n          sender.transfer(ethValue);\n     }\n\n     function setUsdPerEthRate(uint _usdPerEthRate) public onlyEthSetter {\n          // 1 - check\n          require((_usdPerEthRate>=100) && (_usdPerEthRate<=700));\n          uint64 hoursPassed = lastUsdPerEthChangeDate + 1 hours;  \n          require(uint(now) >= hoursPassed);\n\n          // 2 - update\n          usdPerEthCoinmarketcapRate = _usdPerEthRate;\n          lastUsdPerEthChangeDate = uint64(now);\n     }\n\n     // Default fallback function\n     function() payable {\n          // buyTokens -> issueTokensInternal\n          buyTokens(msg.sender);\n     }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContractAddress\",\"type\":\"address\"}],\"name\":\"setIcoContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"lockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKEN_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260006002556000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460146101000a81548160ff02191690831515021790555034156100b357600080fd5b5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a084595161401484a0000008014151561010b57fe5b5b5b61152a8061011c6000396000f300606060405236156100fa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f1461010d57806306fdde0314610162578063095ea7b3146101f15780630d1118ce1461024b578063170381fe1461028d57806318160ddd146102c657806320b44b29146102ef57806323b872dd14610314578063313ce5671461038d5780633f516018146103b6578063475a9fa9146103ef57806370a082311461043157806382b74b891461047e57806395d89b41146104ab5780639fe17cc21461053a578063a9059cbb1461058f578063ccf053ba146105e9578063dd62ed3e14610612575b341561010557600080fd5b5b600080fd5b005b341561011857600080fd5b61012061067e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561016d57600080fd5b6101756106a4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b65780820151818401525b60208101905061019a565b50505050905090810190601f1680156101e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fc57600080fd5b610231600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106dd565b604051808215151515815260200191505060405180910390f35b341561025657600080fd5b61028b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610865565b005b341561029857600080fd5b6102c4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610963565b005b34156102d157600080fd5b6102d9610a05565b6040518082815260200191505060405180910390f35b34156102fa57600080fd5b61031260048080351515906020019091905050610a0b565b005b341561031f57600080fd5b610373600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a86565b604051808215151515815260200191505060405180910390f35b341561039857600080fd5b6103a0610ab9565b6040518082815260200191505060405180910390f35b34156103c157600080fd5b6103ed600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610abe565b005b34156103fa57600080fd5b61042f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b60565b005b341561043c57600080fd5b610468600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ccc565b6040518082815260200191505060405180910390f35b341561048957600080fd5b610491610d15565b604051808215151515815260200191505060405180910390f35b34156104b657600080fd5b6104be610d28565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ff5780820151818401525b6020810190506104e3565b50505050905090810190601f16801561052c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561054557600080fd5b61054d610d61565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561059a57600080fd5b6105cf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d87565b604051808215151515815260200191505060405180910390f35b34156105f457600080fd5b6105fc610db8565b6040518082815260200191505060405180910390f35b341561061d57600080fd5b610668600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc7565b6040518082815260200191505060405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280601c81526020017f476f6c646d696e74204d4e54205072656c61756e636820546f6b656e0000000081525081565b60008082148061076957506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561077457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108c157600080fd5b6109096000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610e4f565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061095760025482610e4f565b6002819055505b5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109bf57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a6757600080fd5b80600460146101000a81548160ff0219169083151502179055505b5b50565b6000600460149054906101000a900460ff16151515610aa457600080fd5b610aaf848484610e69565b90505b9392505050565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1a57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bbc57600080fd5b6a084595161401484a000000816002540111151515610bda57600080fd5b610c226000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261125a565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c706002548261125a565b6002819055508173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600460149054906101000a900460ff1681565b6040805190810160405280600481526020017f4d4e54500000000000000000000000000000000000000000000000000000000081525081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460149054906101000a900460ff16151515610da557600080fd5b610daf8383611285565b90505b92915050565b6a084595161401484a00000081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000828211151515610e5d57fe5b81830390505b92915050565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610eb857600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610f4357600080fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610fcf57600080fd5b6110176000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361125a565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110a16000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610e4f565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611169600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610e4f565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60008082840190508381101580156112725750828110155b151561127a57fe5b8091505b5092915050565b600060406004810160003690501015151561129f57600080fd5b826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156112ec57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561137857600080fd5b6113c06000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610e4f565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061144a6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461125a565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5b50929150505600a165627a7a72305820ab77cab76f82a7ab651685bbc17608347288b41a3fd8314fec4b497909da11d00029"
}