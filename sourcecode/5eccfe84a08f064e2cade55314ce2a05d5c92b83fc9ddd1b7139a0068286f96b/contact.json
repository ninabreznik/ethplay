{
  "address": "0xc9475b6326bc9a5c4cf323927ae9818491cc528d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZCNYToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\n/**\n * ZCNY Token Smart Contract: EIP-20 compatible token smart contract that\n * manages ZCNY tokens.\n */\n\n/*\n * Safe Math Smart Contract.\n */\npragma solidity ^0.4.20;\n\n/**\n * Provides methods to safely add, subtract and multiply uint256 numbers.\n */\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Add two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to add\n   * @param y second value to add\n   * @return x + y\n   */\n  function safeAdd (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n\n  /**\n   * Subtract one uint256 value from another, throw in case of underflow.\n   *\n   * @param x value to subtract from\n   * @param y value to subtract\n   * @return x - y\n   */\n  function safeSub (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n\n  /**\n   * Multiply two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to multiply\n   * @param y second value to multiply\n   * @return x * y\n   */\n  function safeMul (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n}\n\ncontract Token {\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public view returns (uint256 supply);\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance);\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public payable returns (bool success);\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public payable returns (bool success);\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public payable returns (bool success);\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining);\n\n  /**\n   * Logged when tokens were transferred from one owner to another.\n   *\n   * @param _from address of the owner, tokens were transferred from\n   * @param _to address of the owner, tokens were transferred to\n   * @param _value number of tokens transferred\n   */\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * Logged when owner approved his tokens to be transferred by some spender.\n   *\n   * @param _owner owner who approved his tokens to be transferred\n   * @param _spender spender who were allowed to transfer the tokens belonging\n   *        to the owner\n   * @param _value number of tokens belonging to the owner, approved to be\n   *        transferred by the spender\n   */\n  event Approval (\n    address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  function AbstractToken () public {\n    // Do nothing\n  }\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public payable returns (bool success) {\n    uint256 fromBalance = accounts [msg.sender];\n    if (fromBalance < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public payable returns (bool success) {\n    uint256 spenderAllowance = allowances [_from][msg.sender];\n    if (spenderAllowance < _value) return false;\n    uint256 fromBalance = accounts [_from];\n    if (fromBalance < _value) return false;\n\n    allowances [_from][msg.sender] =\n      safeSub (spenderAllowance, _value);\n\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public payable returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) internal accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) internal allowances;\n}\n\ncontract ZCNYToken is AbstractToken {\n  /**\n   * Fee denominator (0.001%).\n   */\n  uint256 constant internal FEE_DENOMINATOR = 100000;\n\n  /**\n   * Maximum fee numerator (100%).\n   */\n  uint256 constant internal MAX_FEE_NUMERATOR = FEE_DENOMINATOR;\n\n  /**\n   * Minimum fee numerator (0%).\n   */\n  uint256 constant internal MIN_FEE_NUMERATIOR = 0;\n\n  /**\n   * Maximum allowed number of tokens in circulation.\n   */\n  uint256 constant internal MAX_TOKENS_COUNT =\n    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff /\n    MAX_FEE_NUMERATOR;\n\n  /**\n   * Default transfer fee.\n   */\n  uint256 constant internal DEFAULT_FEE = 5e2;\n\n  /**\n   * Address flag that marks black listed addresses.\n   */\n  uint256 constant internal BLACK_LIST_FLAG = 0x01;\n\n  /**\n   * Address flag that marks zero fee addresses.\n   */\n  uint256 constant internal ZERO_FEE_FLAG = 0x02;\n\n  modifier delegatable {\n    if (delegate == address (0)) {\n      require (msg.value == 0); // Non payable if not delegated\n      _;\n    } else {\n      assembly {\n        // Save owner\n        let oldOwner := sload (owner_slot)\n\n        // Save delegate\n        let oldDelegate := sload (delegate_slot)\n\n        // Solidity stores address of the beginning of free memory at 0x40\n        let buffer := mload (0x40)\n\n        // Copy message call data into buffer\n        calldatacopy (buffer, 0, calldatasize)\n\n        // Lets call our delegate\n        let result := delegatecall (gas, oldDelegate, buffer, calldatasize, buffer, 0)\n\n        // Check, whether owner was changed\n        switch eq (oldOwner, sload (owner_slot))\n        case 1 {} // Owner was not changed, fine\n        default {revert (0, 0) } // Owner was changed, revert!\n\n        // Check, whether delegate was changed\n        switch eq (oldDelegate, sload (delegate_slot))\n        case 1 {} // Delegate was not changed, fine\n        default {revert (0, 0) } // Delegate was changed, revert!\n\n        // Copy returned value into buffer\n        returndatacopy (buffer, 0, returndatasize)\n\n        // Check call status\n        switch result\n        case 0 { revert (buffer, returndatasize) } // Call failed, revert!\n        default { return (buffer, returndatasize) } // Call succeeded, return\n      }\n    }\n  }\n\n  /**\n   * Create ZCNY Token smart contract with message sender as an owner.\n   *\n   * @param _feeCollector address fees are sent to\n   */\n  function ZCNYToken (address _feeCollector) public {\n    fixedFee = DEFAULT_FEE;\n    minVariableFee = 0;\n    maxVariableFee = 0;\n    variableFeeNumerator = 0;\n\n    owner = msg.sender;\n    feeCollector = _feeCollector;\n  }\n\n  /**\n   * Delegate unrecognized functions.\n   */\n  function () public delegatable payable {\n    revert (); // Revert if not delegated\n  }\n\n  /**\n   * Get name of the token.\n   *\n   * @return name of the token\n   */\n  function name () public delegatable view returns (string) {\n    return \"ZCNY Token\";\n  }\n\n  /**\n   * Get symbol of the token.\n   *\n   * @return symbol of the token\n   */\n  function symbol () public delegatable view returns (string) {\n    return \"ZCNY\";\n  }\n\n  /**\n   * Get number of decimals for the token.\n   *\n   * @return number of decimals for the token\n   */\n  function decimals () public delegatable view returns (uint8) {\n    return 2;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public delegatable view returns (uint256) {\n    return tokensCount;\n  }\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner)\n    public delegatable view returns (uint256 balance) {\n    return AbstractToken.balanceOf (_owner);\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public delegatable payable returns (bool) {\n    if (frozen) return false;\n    else if (\n      (addressFlags [msg.sender] | addressFlags [_to]) & BLACK_LIST_FLAG ==\n      BLACK_LIST_FLAG)\n      return false;\n    else {\n      uint256 fee =\n        (addressFlags [msg.sender] | addressFlags [_to]) & ZERO_FEE_FLAG == ZERO_FEE_FLAG ?\n          0 :\n          calculateFee (_value);\n\n      if (_value <= accounts [msg.sender] &&\n          fee <= safeSub (accounts [msg.sender], _value)) {\n        require (AbstractToken.transfer (_to, _value));\n        require (AbstractToken.transfer (feeCollector, fee));\n        return true;\n      } else return false;\n    }\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public delegatable payable returns (bool) {\n    if (frozen) return false;\n    else if (\n      (addressFlags [_from] | addressFlags [_to]) & BLACK_LIST_FLAG ==\n      BLACK_LIST_FLAG)\n      return false;\n    else {\n      uint256 fee =\n        (addressFlags [_from] | addressFlags [_to]) & ZERO_FEE_FLAG == ZERO_FEE_FLAG ?\n          0 :\n          calculateFee (_value);\n\n      if (_value <= allowances [_from][msg.sender] &&\n          fee <= safeSub (allowances [_from][msg.sender], _value) &&\n          _value <= accounts [_from] &&\n          fee <= safeSub (accounts [_from], _value)) {\n        require (AbstractToken.transferFrom (_from, _to, _value));\n        require (AbstractToken.transferFrom (_from, feeCollector, fee));\n        return true;\n      } else return false;\n    }\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public delegatable payable returns (bool success) {\n    return AbstractToken.approve (_spender, _value);\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public delegatable view returns (uint256 remaining) {\n    return AbstractToken.allowance (_owner, _spender);\n  }\n\n  /**\n   * Transfer given number of token from the signed defined by digital signature\n   * to given recipient.\n   *\n   * @param _to address to transfer token to the owner of\n   * @param _value number of tokens to transfer\n   * @param _fee number of tokens to give to message sender\n   * @param _nonce nonce of the transfer\n   * @param _v parameter V of digital signature\n   * @param _r parameter R of digital signature\n   * @param _s parameter S of digital signature\n   */\n  function delegatedTransfer (\n    address _to, uint256 _value, uint256 _fee,\n    uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s)\n  public delegatable payable returns (bool) {\n    if (frozen) return false;\n    else {\n      address _from = ecrecover (\n        keccak256 (\n          thisAddress (), messageSenderAddress (), _to, _value, _fee, _nonce),\n        _v, _r, _s);\n\n      if (_nonce != nonces [_from]) return false;\n\n      if (\n        (addressFlags [_from] | addressFlags [_to]) & BLACK_LIST_FLAG ==\n        BLACK_LIST_FLAG)\n        return false;\n\n      uint256 fee =\n        (addressFlags [_from] | addressFlags [_to]) & ZERO_FEE_FLAG == ZERO_FEE_FLAG ?\n          0 :\n          calculateFee (_value);\n\n      uint256 balance = accounts [_from];\n      if (_value > balance) return false;\n      balance = safeSub (balance, _value);\n      if (fee > balance) return false;\n      balance = safeSub (balance, fee);\n      if (_fee > balance) return false;\n      balance = safeSub (balance, _fee);\n\n      nonces [_from] = _nonce + 1;\n\n      accounts [_from] = balance;\n      accounts [_to] = safeAdd (accounts [_to], _value);\n      accounts [feeCollector] = safeAdd (accounts [feeCollector], fee);\n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _fee);\n\n      Transfer (_from, _to, _value);\n      Transfer (_from, feeCollector, fee);\n      Transfer (_from, msg.sender, _fee);\n\n      return true;\n    }\n  }\n\n  /**\n   * Create tokens.\n   *\n   * @param _value number of tokens to be created.\n   */\n  function createTokens (uint256 _value)\n  public delegatable payable returns (bool) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value <= safeSub (MAX_TOKENS_COUNT, tokensCount)) {\n        accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n        tokensCount = safeAdd (tokensCount, _value);\n\n        Transfer (address (0), msg.sender, _value);\n\n        return true;\n      } else return false;\n    } else return true;\n  }\n\n  /**\n   * Burn tokens.\n   *\n   * @param _value number of tokens to burn\n   */\n  function burnTokens (uint256 _value)\n  public delegatable payable returns (bool) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value <= accounts [msg.sender]) {\n        accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n        tokensCount = safeSub (tokensCount, _value);\n\n        Transfer (msg.sender, address (0), _value);\n\n        return true;\n      } else return false;\n    } else return true;\n  }\n\n  /**\n   * Freeze token transfers.\n   */\n  function freezeTransfers () public delegatable payable {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n\n      Freeze ();\n    }\n  }\n\n  /**\n   * Unfreeze token transfers.\n   */\n  function unfreezeTransfers () public delegatable payable {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n\n      Unfreeze ();\n    }\n  }\n\n  /**\n   * Set smart contract owner.\n   *\n   * @param _newOwner address of the new owner\n   */\n  function setOwner (address _newOwner) public {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  /**\n   * Set fee collector.\n   *\n   * @param _newFeeCollector address of the new fee collector\n   */\n  function setFeeCollector (address _newFeeCollector)\n  public delegatable payable {\n    require (msg.sender == owner);\n\n    feeCollector = _newFeeCollector;\n  }\n\n  /**\n   * Get current nonce for token holder with given address, i.e. nonce this\n   * token holder should use for next delegated transfer.\n   *\n   * @param _owner address of the token holder to get nonce for\n   * @return current nonce for token holder with give address\n   */\n  function nonce (address _owner) public view delegatable returns (uint256) {\n    return nonces [_owner];\n  }\n\n  /**\n   * Set fee parameters.\n   *\n   * @param _fixedFee fixed fee in token units\n   * @param _minVariableFee minimum variable fee in token units\n   * @param _maxVariableFee maximum variable fee in token units\n   * @param _variableFeeNumerator variable fee numerator\n   */\n  function setFeeParameters (\n    uint256 _fixedFee,\n    uint256 _minVariableFee,\n    uint256 _maxVariableFee,\n    uint256 _variableFeeNumerator) public delegatable payable {\n    require (msg.sender == owner);\n\n    require (_minVariableFee <= _maxVariableFee);\n    require (_variableFeeNumerator <= MAX_FEE_NUMERATOR);\n\n    fixedFee = _fixedFee;\n    minVariableFee = _minVariableFee;\n    maxVariableFee = _maxVariableFee;\n    variableFeeNumerator = _variableFeeNumerator;\n\n    FeeChange (\n      _fixedFee, _minVariableFee, _maxVariableFee, _variableFeeNumerator);\n  }\n\n  /**\n   * Get fee parameters.\n   *\n   * @return fee parameters\n   */\n  function getFeeParameters () public delegatable view returns (\n    uint256 _fixedFee,\n    uint256 _minVariableFee,\n    uint256 _maxVariableFee,\n    uint256 _variableFeeNumnerator) {\n    _fixedFee = fixedFee;\n    _minVariableFee = minVariableFee;\n    _maxVariableFee = maxVariableFee;\n    _variableFeeNumnerator = variableFeeNumerator;\n  }\n\n  /**\n   * Calculate fee for transfer of given number of tokens.\n   *\n   * @param _amount transfer amount to calculate fee for\n   * @return fee for transfer of given amount\n   */\n  function calculateFee (uint256 _amount)\n    public delegatable view returns (uint256 _fee) {\n    require (_amount <= MAX_TOKENS_COUNT);\n\n    _fee = safeMul (_amount, variableFeeNumerator) / FEE_DENOMINATOR;\n    if (_fee < minVariableFee) _fee = minVariableFee;\n    if (_fee > maxVariableFee) _fee = maxVariableFee;\n    _fee = safeAdd (_fee, fixedFee);\n  }\n\n  /**\n   * Set flags for given address.\n   *\n   * @param _address address to set flags for\n   * @param _flags flags to set\n   */\n  function setFlags (address _address, uint256 _flags)\n  public delegatable payable {\n    require (msg.sender == owner);\n\n    addressFlags [_address] = _flags;\n  }\n\n  /**\n   * Get flags for given address.\n   *\n   * @param _address address to get flags for\n   * @return flags for given address\n   */\n  function flags (address _address) public delegatable view returns (uint256) {\n    return addressFlags [_address];\n  }\n\n  /**\n   * Set address of smart contract to delegate execution of delegatable methods\n   * to.\n   *\n   * @param _delegate address of smart contract to delegate execution of\n   * delegatable methods to, or zero to not delegate delegatable methods\n   * execution.\n   */\n  function setDelegate (address _delegate) public {\n    require (msg.sender == owner);\n\n    if (delegate != _delegate) {\n      delegate = _delegate;\n      Delegation (delegate);\n    }\n  }\n\n  /**\n   * Get address of this smart contract.\n   *\n   * @return address of this smart contract\n   */\n  function thisAddress () internal view returns (address) {\n    return this;\n  }\n\n  /**\n   * Get address of message sender.\n   *\n   * @return address of this smart contract\n   */\n  function messageSenderAddress () internal view returns (address) {\n    return msg.sender;\n  }\n\n  /**\n   * Owner of the smart contract.\n   */\n  address internal owner;\n\n  /**\n   * Address where fees are sent to.\n   */\n  address internal feeCollector;\n\n  /**\n   * Number of tokens in circulation.\n   */\n  uint256 internal tokensCount;\n\n  /**\n   * Whether token transfers are currently frozen.\n   */\n  bool internal frozen;\n\n  /**\n   * Mapping from sender's address to the next delegated transfer nonce.\n   */\n  mapping (address => uint256) internal nonces;\n\n  /**\n   * Fixed fee amount in token units.\n   */\n  uint256 internal fixedFee;\n\n  /**\n   * Minimum variable fee in token units.\n   */\n  uint256 internal minVariableFee;\n\n  /**\n   * Maximum variable fee in token units.\n   */\n  uint256 internal maxVariableFee;\n\n  /**\n   * Variable fee numerator.\n   */\n  uint256 internal variableFeeNumerator;\n\n  /**\n   * Maps address to its flags.\n   */\n  mapping (address => uint256) internal addressFlags;\n\n  /**\n   * Address of smart contract to delegate execution of delegatable methods to,\n   * or zero to not delegate delegatable methods execution.\n   */\n  address internal delegate;\n\n  /**\n   * Logged when token transfers were frozen.\n   */\n  event Freeze ();\n\n  /**\n   * Logged when token transfers were unfrozen.\n   */\n  event Unfreeze ();\n\n  /**\n   * Logged when fee parameters were changed.\n   *\n   * @param fixedFee fixed fee in token units\n   * @param minVariableFee minimum variable fee in token units\n   * @param maxVariableFee maximum variable fee in token units\n   * @param variableFeeNumerator variable fee numerator\n   */\n  event FeeChange (\n    uint256 fixedFee,\n    uint256 minVariableFee,\n    uint256 maxVariableFee,\n    uint256 variableFeeNumerator);\n\n  /**\n   * Logged when address of smart contract execution of delegatable methods is\n   * delegated to was changed.\n   *\n   * @param delegate new address of smart contract execution of delegatable\n   * methods is delegated to or zero if execution of delegatable methods is\n   * oot delegated.\n   */\n  event Delegation (address delegate);\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061167683398101604052516101f4600755600060088190556009819055600a5560028054600160a060020a0319908116331790915560038054600160a060020a0390931692909116919091179055611602806100746000396000f3006080604052600436106101325763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630150246081146101a657806306fdde03146101ae578063095ea7b31461023857806313af40351461026357806318160ddd1461028457806323b872dd146102ab578063313ce567146102c857806331c420d4146102f35780634722b4a5146102fb5780636d1b229d1461033657806370a082311461034157806370ae92d2146103625780637e1f2bb81461038357806395d89b411461038e57806399a5d747146103a35780639fef0c01146103bb578063a42dce80146103dc578063a9059cbb146103f0578063addd9cef14610407578063c97e84801461041e578063ca5eb5e114610447578063d5bf2dbe14610468578063dd62ed3e1461047c575b600c54600160a060020a0316151561015457341561014f57600080fd5b600080fd5b600254600c5460405136600082376000813683855af460025484146001811461017c57600080fd5b50600c5483146001811461018f57600080fd5b503d6000833e8080156101a0573d83f35b3d83fd5b005b6101a46104a3565b3480156101ba57600080fd5b506101c361051c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fd5781810151838201526020016101e5565b50505050905090810190601f16801561022a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61024f600160a060020a0360043516602435610575565b604080519115158252519081900360200190f35b34801561026f57600080fd5b506101a4600160a060020a03600435166105a8565b34801561029057600080fd5b506102996105ee565b60408051918252519081900360200190f35b61024f600160a060020a0360043581169060243516604435610617565b3480156102d457600080fd5b506102dd6107cd565b6040805160ff9092168252519081900360200190f35b6101a46107f5565b34801561030757600080fd5b5061031061086c565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61024f6004356108a9565b34801561034d57600080fd5b50610299600160a060020a0360043516610978565b34801561036e57600080fd5b50610299600160a060020a03600435166109a8565b61024f6004356109e7565b34801561039a57600080fd5b506101c3610aa8565b3480156103af57600080fd5b50610299600435610b02565b3480156103c757600080fd5b50610299600160a060020a0360043516610b93565b6101a4600160a060020a0360043516610bd2565b61024f600160a060020a0360043516602435610c32565b6101a4600160a060020a0360043516602435610d64565b61024f600160a060020a036004351660243560443560643560ff6084351660a43560c435610db5565b34801561045357600080fd5b506101a4600160a060020a0360043516611126565b6101a46004356024356044356064356111b9565b34801561048857600080fd5b50610299600160a060020a036004358116906024351661126b565b600c54600160a060020a031615156101545734156104c057600080fd5b600254600160a060020a031633146104d757600080fd5b60055460ff16151561051a576005805460ff191660011790556040517f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de90600090a15b565b600c54606090600160a060020a0316151561015457341561053c57600080fd5b5060408051808201909152600a81527f5a434e5920546f6b656e0000000000000000000000000000000000000000000060208201525b90565b600c54600090600160a060020a0316151561015457341561059557600080fd5b61059f8383611295565b90505b92915050565b600254600160a060020a031633146105bf57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600c54600090600160a060020a0316151561015457341561060e57600080fd5b50600454610572565b600c546000908190600160a060020a0316151561015457341561063957600080fd5b60055460ff161561064d57600091506107c5565b600160a060020a038085166000908152600b6020526040808220549288168252902054176001908116141561068557600091506107c5565b600160a060020a038085166000908152600b6020526040808220549288168252902054176002908116146106c1576106bc83610b02565b6106c4565b60005b600160a060020a038616600090815260016020908152604080832033845290915290205490915083118015906107275750600160a060020a038516600090815260016020908152604080832033845290915290205461072390846112fb565b8111155b801561074b5750600160a060020a0385166000908152602081905260409020548311155b80156107795750600160a060020a03851660009081526020819052604090205461077590846112fb565b8111155b156107c05761078985858561130d565b151561079457600080fd5b6003546107ac908690600160a060020a03168361130d565b15156107b757600080fd5b600191506107c5565b600091505b509392505050565b600c54600090600160a060020a031615156101545734156107ed57600080fd5b506002610572565b600c54600160a060020a0316151561015457341561081257600080fd5b600254600160a060020a0316331461082957600080fd5b60055460ff161561051a576005805460ff191690556040517f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded90600090a161051a565b600c54600090819081908190600160a060020a0316151561015457341561089257600080fd5b5050600754600854600954600a5492959194509250565b600c54600090600160a060020a031615156101545734156108c957600080fd5b600254600160a060020a031633146108e057600080fd5b600082111561096f57336000908152602081905260409020548211610967573360009081526020819052604090205461091990836112fb565b3360009081526020819052604090205560045461093690836112fb565b60045560408051838152905160009133916000805160206115b78339815191529181900360200190a3506001610973565b506000610973565b5060015b919050565b600c54600090600160a060020a0316151561015457341561099857600080fd5b6109a18261145e565b9050610973565b600c54600090600160a060020a031615156101545734156109c857600080fd5b50600160a060020a038116600090815260066020526040902054610973565b600c54600090600160a060020a03161515610154573415610a0757600080fd5b600254600160a060020a03163314610a1e57600080fd5b600082111561096f57610a3a620186a0600019046004546112fb565b82116109675733600090815260208190526040902054610a5a9083611479565b33600090815260208190526040902055600454610a779083611479565b60045560408051838152905133916000916000805160206115b78339815191529181900360200190a3506001610973565b600c54606090600160a060020a03161515610154573415610ac857600080fd5b5060408051808201909152600481527f5a434e59000000000000000000000000000000000000000000000000000000006020820152610572565b600c54600090600160a060020a03161515610154573415610b2257600080fd5b7da7c5ac471b4784230fcf80dc33721d53cddd6e04c059210385c67dfe32a0821115610b4d57600080fd5b620186a0610b5d83600a5461148f565b811515610b6657fe5b049050600854811015610b7857506008545b600954811115610b8757506009545b6109a181600754611479565b600c54600090600160a060020a03161515610154573415610bb357600080fd5b50600160a060020a0381166000908152600b6020526040902054610973565b600c54600160a060020a03161515610154573415610bef57600080fd5b600254600160a060020a03163314610c0657600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600c546000908190600160a060020a03161515610154573415610c5457600080fd5b60055460ff1615610c685760009150610d5d565b600160a060020a0384166000908152600b6020526040808220543383529120541760019081161415610c9d5760009150610d5d565b600160a060020a0384166000908152600b60205260408082205433835291205417600290811614610cd657610cd183610b02565b610cd9565b60005b336000908152602081905260409020549091508311801590610d14575033600090815260208190526040902054610d1090846112fb565b8111155b15610d5857610d2384846114bc565b1515610d2e57600080fd5b600354610d4490600160a060020a0316826114bc565b1515610d4f57600080fd5b60019150610d5d565b600091505b5092915050565b600c54600160a060020a03161515610154573415610d8157600080fd5b600254600160a060020a03163314610d9857600080fd5b600160a060020a03919091166000908152600b6020526040902055565b600c54600090819081908190600160a060020a03161515610154573415610ddb57600080fd5b60055460ff1615610def5760009350611118565b6001610df9611583565b610e01611587565b604080516c01000000000000000000000000600160a060020a039485168102825292841683026014820152928f169091026028830152603c82018d9052605c82018c9052607c82018b9052805191829003609c018220600080845260208481018085529290925260ff8c1684840152606084018b9052608084018a9052915160a0808501949293601f198301938390039091019190865af1158015610eaa573d6000803e3d6000fd5b505060408051601f190151600160a060020a03811660009081526006602052919091205490945089149050610ee25760009350611118565b600160a060020a03808c166000908152600b60205260408082205492861682529020541760019081161415610f1a5760009350611118565b600160a060020a03808c166000908152600b602052604080822054928616825290205417600290811614610f5657610f518a610b02565b610f59565b60005b600160a060020a0384166000908152602081905260409020549092509050808a1115610f885760009350611118565b610f92818b6112fb565b905080821115610fa55760009350611118565b610faf81836112fb565b905080891115610fc25760009350611118565b610fcc818a6112fb565b600160a060020a03808516600090815260066020908152604080832060018e01905590829052808220849055918e168152205490915061100c908b611479565b600160a060020a03808d16600090815260208190526040808220939093556003549091168152205461103e9083611479565b600354600160a060020a031660009081526020819052604080822092909255338152205461106c908a611479565b33600090815260208181526040918290209290925580518c81529051600160a060020a038e811693908716926000805160206115b7833981519152929081900390910190a3600354604080518481529051600160a060020a03928316928616916000805160206115b7833981519152919081900360200190a3604080518a815290513391600160a060020a038616916000805160206115b78339815191529181900360200190a3600193505b505050979650505050505050565b600254600160a060020a0316331461113d57600080fd5b600c54600160a060020a03828116911614610c2f57600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f600005b3559a025151f4a40f36d9939d94cf5194016895d4ef6362b211e4c3b5916020908290030190a150565b600c54600160a060020a031615156101545734156111d657600080fd5b600254600160a060020a031633146111ed57600080fd5b818311156111fa57600080fd5b620186a081111561120a57600080fd5b600784905560088390556009829055600a81905560408051858152602081018590528082018490526060810183905290517f650bf5314bb5924368ffebaf7dffcfaa4a0f99c2ab08264c26bf0547f8c459e99181900360800190a150505050565b600c54600090600160a060020a0316151561015457341561128b57600080fd5b61059f838361158b565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60008183101561130757fe5b50900390565b600160a060020a038316600090815260016020908152604080832033845290915281205481838210156113435760009250611455565b50600160a060020a0385166000908152602081905260409020548381101561136e5760009250611455565b61137882856112fb565b600160a060020a0387166000908152600160209081526040808320338452909152812091909155841180156113bf575084600160a060020a031686600160a060020a031614155b15611417576113ce81856112fb565b600160a060020a0380881660009081526020819052604080822093909355908716815220546113fd9085611479565b600160a060020a0386166000908152602081905260409020555b84600160a060020a031686600160a060020a03166000805160206115b7833981519152866040518082815260200191505060405180910390a3600192505b50509392505050565b600160a060020a031660009081526020819052604090205490565b600060001982900383111561148a57fe5b500190565b60008115156114a0575060006105a2565b816000198115156114ad57fe5b048311156114b757fe5b500290565b33600090815260208190526040812054828110156114dd5760009150610d5d565b6000831180156114f6575033600160a060020a03851614155b1561154b5761150581846112fb565b3360009081526020819052604080822092909255600160a060020a038616815220546115319084611479565b600160a060020a0385166000908152602081905260409020555b604080518481529051600160a060020a0386169133916000805160206115b78339815191529181900360200190a35060019392505050565b3090565b3390565b600160a060020a039182166000908152600160209081526040808320939094168252919091522054905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058201cd4915b0a806024f1ce691dc7312674b030bdc46e64b17f632e01d68dd060940029"
}