{
  "address": "0xce6c5ef2ed8f6171331830c018900171dcbd65ac",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CrryptoArena",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-29\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* CryptoMiningWar - Build your own empire on Blockchain\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\ncontract CryptoMiningWarInterface {\n    uint256 public deadline; \n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\n    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\n}\ninterface CryptoEngineerInterface {\n    function addVirus(address /*_addr*/, uint256 /*_value*/) external pure;\n    function subVirus(address /*_addr*/, uint256 /*_value*/) external pure;\n\n    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/);\n    function calculateCurrentVirus(address /*_addr*/) external view returns(uint256 /*_currentVirus*/);\n    function calCurrentCrystals(address /*_addr*/) external pure returns(uint256 /*_currentCrystals*/);\n}\ninterface CryptoProgramFactoryInterface {\n    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ );\n\n    function subPrograms(address /*_addr*/, uint256[] /*_programs*/) external;\n    function getData(address _addr) external pure returns(uint256 /*_factoryLevel*/, uint256 /*_factoryTime*/, uint256[] /*memory _programs*/);\n     function getProgramsValue() external pure returns(uint256[]);\n}\ninterface MiniGameInterface {\n    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ );\n    function fallback() external payable;\n}\ncontract CrryptoArena {\n\tusing SafeMath for uint256;\n\n\taddress public administrator;\n\n    uint256 public VIRUS_NORMAL = 0;\n    uint256 public HALF_TIME_ATK= 60 * 15;  \n    uint256 public CRTSTAL_MINING_PERIOD = 86400;\n    uint256 public VIRUS_MINING_PERIOD   = 86400;\n   \n    CryptoMiningWarInterface      public MiningWar;\n    CryptoEngineerInterface       public Engineer;\n    CryptoProgramFactoryInterface public Factory;\n\n    uint256 miningWarDeadline;\n    // factory info\n    // player info\n    mapping(address => Player) public players;\n\n    mapping(uint256 => Virus)  public viruses;\n     // minigame info\n    mapping(address => bool)   public miniGames; \n   \n    struct Player {\n        uint256 virusDef;\n        uint256 nextTimeAtk;\n        uint256 endTimeUnequalledDef;\n    }\n    struct Virus {\n        uint256 atk;\n        uint256 def;\n    }\n    modifier isAdministrator()\n    {\n        require(msg.sender == administrator);\n        _;\n    }\n    modifier onlyContractsMiniGame() \n    {\n        require(miniGames[msg.sender] == true);\n        _;\n    }\n    event Attack(address atkAddress, address defAddress, bool victory, uint256 reward, uint256 virusAtkDead, uint256 virusDefDead, uint256 atk, uint256 def, uint256 round); // 1 : crystals, 2: hashrate, 3: virus\n    event Programs(uint256 programLv1, uint256 programLv2, uint256 programLv3, uint256 programLv4);\n\n    constructor() public {\n        administrator = msg.sender;\n        // set interface contract\n        setMiningWarInterface(0xf84c61bb982041c030b8580d1634f00fffb89059);\n        setEngineerInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\n        setFactoryInterface(0x6fa883afde9bc8d9bec0fc7bff25db3c71864402);\n\n         // setting virusupd\n        viruses[VIRUS_NORMAL] = Virus(1,1);\n    }\n    function () public payable\n    {\n        \n    }\n    /** \n    * @dev MainContract used this function to verify game's contract\n    */\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n    {\n    \t_isContractMiniGame = true;\n    }\n    function upgrade(address addr) public isAdministrator\n    {\n        selfdestruct(addr);\n    }\n    /** \n    * @dev Main Contract call this function to setup mini game.\n    */\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 _miningWarDeadline ) public\n    {\n        miningWarDeadline = _miningWarDeadline;   \n    }\n    //--------------------------------------------------------------------------\n    // SETTING CONTRACT MINI GAME \n    //--------------------------------------------------------------------------\n    function setContractsMiniGame( address _addr ) public isAdministrator \n    {\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\n        if( MiniGame.isContractMiniGame() == false ) revert(); \n\n        miniGames[_addr] = true;\n    }\n    /**\n    * @dev remove mini game contract from main contract\n    * @param _addr mini game contract address\n    */\n    function removeContractMiniGame(address _addr) public isAdministrator\n    {\n        miniGames[_addr] = false;\n    }\n    // ---------------------------------------------------------------------------------------\n    // SET INTERFACE CONTRACT\n    // ---------------------------------------------------------------------------------------\n    \n    function setMiningWarInterface(address _addr) public isAdministrator\n    {\n        MiningWar = CryptoMiningWarInterface(_addr);\n    }\n    function setEngineerInterface(address _addr) public isAdministrator\n    {\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\n        \n        require(engineerInterface.isContractMiniGame() == true);\n\n        Engineer = engineerInterface;\n    }\n    \n    function setFactoryInterface(address _addr) public isAdministrator\n    {\n        CryptoProgramFactoryInterface factoryInterface = CryptoProgramFactoryInterface(_addr);\n        \n        require(factoryInterface.isContractMiniGame() == true);\n\n        Factory = factoryInterface;\n    }\n\n    // --------------------------------------------------------------------------------------------------------------\n    // FUCTION FOR NEXT VERSION\n    // --------------------------------------------------------------------------------------------------------------\n    /**\n    * @dev additional time unequalled defence \n    * @param _addr player address \n    */\n    function setAtkNowForPlayer(address _addr) public onlyContractsMiniGame\n    {\n        Player storage p = players[_addr];\n        p.nextTimeAtk = now;\n    }\n    function addVirusDef(address _addr, uint256 _virus) public\n    {\n        require(miniGames[msg.sender] == true || msg.sender == _addr);\n\n        Engineer.subVirus(_addr, _virus);\n\n        Player storage p = players[_addr];\n\n        p.virusDef += SafeMath.mul(_virus, VIRUS_MINING_PERIOD);\n    }\n    function subVirusDef(address _addr, uint256 _virus) public onlyContractsMiniGame\n    {        \n        _virus = SafeMath.mul(_virus, VIRUS_MINING_PERIOD);\n        require(players[_addr].virusDef >= _virus);\n\n        Player storage p = players[_addr];\n\n        p.virusDef -= _virus;\n    }\n    function addTimeUnequalledDefence(address _addr, uint256 _value) public onlyContractsMiniGame\n    {\n        Player storage p = players[_addr];\n        uint256 currentTimeUnequalled = p.endTimeUnequalledDef;\n        if (currentTimeUnequalled < now) currentTimeUnequalled = now;\n        \n        p.endTimeUnequalledDef = SafeMath.add(currentTimeUnequalled, _value);\n    }\n    // --------------------------------------------------------------------------------------------------------------\n    // MAIN CONTENT\n    // --------------------------------------------------------------------------------------------------------------\n    function setVirusInfo(uint256 _atk, uint256 _def) public isAdministrator\n    {\n        Virus storage v = viruses[VIRUS_NORMAL];\n        v.atk = _atk;\n        v.def = _def;\n    }\n\n\n    /**\n    * @dev start the mini game\n    */\n    function startGame() public \n    {\n        require(msg.sender == administrator);\n        require(miningWarDeadline == 0);\n        \n        miningWarDeadline = MiningWar.deadline();\n    }\n    /**\n    * @dev ATTACK\n    * _programs[0]: + 10% _virus;\n    * _programs[1]: revival 15 % _virus if this atk lose(not use item before)\n    * _programs[2]: + 20% dame\n    * _programs[3]: -5% virus defence of player you want attack\n    */\n    function attack(address _defAddress, uint256 _virus, uint256[] _programs) public\n    {\n        require(validateAttack(msg.sender, _defAddress) == true);\n        require(_programs.length == 4);\n        require(validatePrograms(_programs) == true);\n\n        Factory.subPrograms(msg.sender, _programs);\n\n        Engineer.subVirus(msg.sender, _virus);\n\n        uint256[] memory programsValue = Factory.getProgramsValue(); \n\n        bool victory;\n        uint256 atk;\n        uint256 def;\n        uint256 virusAtkDead;\n        uint256 virusDefDead;   \n        \n        (victory, atk, def, virusAtkDead, virusDefDead) = firstAttack(_defAddress, SafeMath.mul(_virus, VIRUS_MINING_PERIOD), _programs, programsValue);\n\n        endAttack(_defAddress, victory, SafeMath.div(virusAtkDead, VIRUS_MINING_PERIOD), SafeMath.div(virusDefDead, VIRUS_MINING_PERIOD), atk, def, 1, _programs);\n\n        if (_programs[1] == 1 && victory == false)  \n            againAttack(_defAddress, SafeMath.div(SafeMath.mul(SafeMath.mul(_virus, VIRUS_MINING_PERIOD), programsValue[1]), 100)); // revival 15 % _virus if this atk lose(not use item before)\n\n        players[msg.sender].nextTimeAtk = now + HALF_TIME_ATK;\n    }\n    function firstAttack(address _defAddress, uint256 _virus, uint256[] _programs, uint256[] programsValue) \n    private \n    returns(\n        bool victory,\n        uint256 atk,\n        uint256 def,\n        uint256 virusAtkDead,\n        uint256 virusDefDead        \n        )\n    {\n        Player storage pDef = players[_defAddress];\n\n        atk             = _virus; \n        uint256 rateAtk = 50 + randomNumber(msg.sender, 1, 101);\n        uint256 rateDef = 50 + randomNumber(_defAddress, rateAtk, 101);\n\n        if (_programs[0] == 1) // + 10% _virus;\n            atk += SafeMath.div(SafeMath.mul(atk, programsValue[0]), 100); \n        if (_programs[3] == 1) // -5% virus defence of player you want attack\n            pDef.virusDef = SafeMath.sub(pDef.virusDef, SafeMath.div(SafeMath.mul(pDef.virusDef, programsValue[3]), 100)); \n            \n        atk = SafeMath.div(SafeMath.mul(SafeMath.mul(atk, viruses[VIRUS_NORMAL].atk), rateAtk), 100);\n        def = SafeMath.div(SafeMath.mul(SafeMath.mul(pDef.virusDef, viruses[VIRUS_NORMAL].def), rateDef), 100);\n\n        if (_programs[2] == 1)  //+ 20% dame\n            atk += SafeMath.div(SafeMath.mul(atk, programsValue[2]), 100);\n\n        if (atk >= def) {\n            virusAtkDead = SafeMath.min(_virus, SafeMath.div(SafeMath.mul(def, 100), SafeMath.mul(viruses[VIRUS_NORMAL].atk, rateAtk)));\n            virusDefDead = pDef.virusDef;\n            victory      = true;\n        } else {\n            virusAtkDead = _virus;\n            virusDefDead = SafeMath.min(pDef.virusDef, SafeMath.div(SafeMath.mul(atk, 100), SafeMath.mul(viruses[VIRUS_NORMAL].def, rateDef)));\n        }\n\n        pDef.virusDef = SafeMath.sub(pDef.virusDef, virusDefDead);\n\n        if (_virus > virusAtkDead) \n            Engineer.addVirus(msg.sender, SafeMath.div(SafeMath.sub(_virus, virusAtkDead), VIRUS_MINING_PERIOD));\n\n    }\n    function againAttack(address _defAddress, uint256 _virus) private returns(bool victory)\n    {\n        Player storage pDef = players[_defAddress];\n        // virus normal info\n        Virus memory v = viruses[VIRUS_NORMAL];\n\n        uint256 rateAtk = 50 + randomNumber(msg.sender, 1, 101);\n        uint256 rateDef = 50 + randomNumber(_defAddress, rateAtk, 101);\n\n        uint256 atk = SafeMath.div(SafeMath.mul(SafeMath.mul(_virus, v.atk), rateAtk), 100);\n        uint256 def = SafeMath.div(SafeMath.mul(SafeMath.mul(pDef.virusDef, v.def), rateDef), 100);\n        uint256 virusDefDead = 0;\n        uint256[] memory programs;\n        if (atk >= def) {\n            virusDefDead = pDef.virusDef;\n            victory = true;\n        } else {\n            virusDefDead = SafeMath.min(pDef.virusDef, SafeMath.div(SafeMath.mul(atk, 100), SafeMath.mul(v.def, rateDef)));\n        }\n\n        pDef.virusDef = SafeMath.sub(pDef.virusDef, virusDefDead);\n\n        endAttack(_defAddress, victory, 0,  SafeMath.div(virusDefDead, VIRUS_MINING_PERIOD), atk, def, 2, programs);\n    }\n    function endAttack(address _defAddress, bool victory, uint256 virusAtkDead, uint256 virusDefDead, uint256 atk, uint256 def, uint256 round, uint256[] programs) private \n    {\n        uint256 reward = 0;\n        if (victory == true) {\n            uint256 pDefCrystals = Engineer.calCurrentCrystals(_defAddress);\n            // subtract random 10% to 50% current crystals of player defence\n            uint256 rate = 10 + randomNumber(_defAddress, pDefCrystals, 41);\n            reward = SafeMath.div(SafeMath.mul(pDefCrystals, rate),100);\n\n            if (reward > 0) {\n                MiningWar.subCrystal(_defAddress, reward);    \n                MiningWar.addCrystal(msg.sender, reward);\n            }\n        }\n        emit Attack(msg.sender, _defAddress, victory, reward, virusAtkDead, virusDefDead, atk, def, round);\n        if (round == 1) emit Programs( programs[0], programs[1], programs[2], programs[3]);\n    }\n    function validateAttack(address _atkAddress, address _defAddress) private view returns(bool _status) \n    {\n        if (\n            _atkAddress != _defAddress &&\n            players[_atkAddress].nextTimeAtk <= now &&\n            canAttack(_defAddress) == true\n            ) {\n            _status = true;\n        }\n    } \n    function validatePrograms(uint256[] _programs) private view returns(bool _status)\n    {\n        _status = true;\n        for(uint256 idx = 0; idx < _programs.length; idx++) {\n            if (_programs[idx] != 0 && _programs[idx] != 1) _status = false;\n        }\n    }\n    function canAttack(address _addr) private view returns(bool _canAtk)\n    {\n        if ( \n            players[_addr].endTimeUnequalledDef < now &&\n            Engineer.calCurrentCrystals(_addr) >= 5000\n            ) {\n            _canAtk = true;\n        }\n    }\n    // --------------------------------------------------------------------------------------------------------------\n    // CALL FUNCTION\n    // --------------------------------------------------------------------------------------------------------------\n    function getData(address _addr) \n    public\n    view\n    returns(\n        uint256 _virusDef,\n        uint256 _nextTimeAtk,\n        uint256 _endTimeUnequalledDef,\n        bool    _canAtk,\n        // engineer\n        uint256 _currentVirus, \n        // mingin war\n        uint256 _currentCrystals\n    ) {\n        Player memory p      = players[_addr];\n        _virusDef            = SafeMath.div(p.virusDef, VIRUS_MINING_PERIOD);\n        _nextTimeAtk         = p.nextTimeAtk;\n        _endTimeUnequalledDef= p.endTimeUnequalledDef;\n        _currentVirus        = SafeMath.div(Engineer.calculateCurrentVirus(_addr), VIRUS_MINING_PERIOD);\n        _currentCrystals     = Engineer.calCurrentCrystals(_addr);\n        _canAtk              = canAttack(_addr);\n    }\n    // --------------------------------------------------------------------------------------------------------------\n    // INTERNAL FUNCTION\n    // --------------------------------------------------------------------------------------------------------------\n    function randomNumber(address _addr, uint256 randNonce, uint256 _maxNumber) private view returns(uint256)\n    {\n        return uint256(keccak256(abi.encodePacked(now, _addr, randNonce))) % _maxNumber;\n    }\n}",
  "bytecode": "6080604052600060015561038460025562015180600355620151806004553480156200002a57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200009973f84c61bb982041c030b8580d1634f00fffb890596200013e640100000000026401000000009004565b620000c77369fd0e5d0a93bf8bac02c154d343a8e3709adabf620001de640100000000026401000000009004565b620000f5736fa883afde9bc8d9bec0fc7bff25db3c7186440262000339640100000000026401000000009004565b6040805190810160405280600181526020016001815250600a60006001548152602001908152602001600020600082015181600001556020820151816001015590505062000494565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200019a57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200023c57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620002a857600080fd5b505af1158015620002bd573d6000803e3d6000fd5b505050506040513d6020811015620002d457600080fd5b81019080805190602001909291905050501515141515620002f457600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200039757600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200040357600080fd5b505af115801562000418573d6000803e3d6000fd5b505050506040513d60208110156200042f57600080fd5b810190808051906020019092919050505015151415156200044f57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b612b9280620004a46000396000f30060806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f0101461016157806319afa824146101a45780631bb57b96146101e75780633281d5761461022f578063374e164c1461025e57806338266b22146102ab5780634bbb58b2146103295780637f3e4d1b1461036057806384ffcb5d146103a35780638a56b230146103e657806398598905146104295780639ff12bba14610476578063b239dac6146104b9578063b4bd7d4114610514578063be7ccd7e1461056b578063c3f656f1146105a2578063c83dd231146105f9578063cee0b4fe14610650578063d65ab5f21461067b578063e12936d014610692578063e2eb41ff146106bd578063f0af084414610722578063f53d0a8e1461076f578063f85033ac146107c6578063f94b965f146107f1578063feb319391461081c578063ffa651b6146108ac575b005b34801561016d57600080fd5b506101a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108ef565b005b3480156101b057600080fd5b506101e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610963565b005b3480156101f357600080fd5b5061021260048036038101908080359060200190929190505050610ab9565b604051808381526020018281526020019250505060405180910390f35b34801561023b57600080fd5b50610244610add565b604051808215151515815260200191505060405180910390f35b34801561026a57600080fd5b506102a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ae6565b005b3480156102b757600080fd5b506102ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cbd565b6040518087815260200186815260200185815260200184151515158152602001838152602001828152602001965050505050505060405180910390f35b34801561033557600080fd5b5061035e6004803603810190808035906020019092919080359060200190929190505050610f6d565b005b34801561036c57600080fd5b506103a1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ff8565b005b3480156103af57600080fd5b506103e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a7565b005b3480156103f257600080fd5b50610427600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611213565b005b34801561043557600080fd5b50610474600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112b2565b005b34801561048257600080fd5b506104b7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113ca565b005b3480156104c557600080fd5b506104fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611480565b604051808215151515815260200191505060405180910390f35b34801561052057600080fd5b506105296114a0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057757600080fd5b506105a060048036038101908080359060200190929190803590602001909291905050506114c6565b005b3480156105ae57600080fd5b506105b76114d1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060557600080fd5b5061060e6114f7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065c57600080fd5b5061066561151d565b6040518082815260200191505060405180910390f35b34801561068757600080fd5b50610690611523565b005b34801561069e57600080fd5b506106a7611658565b6040518082815260200191505060405180910390f35b3480156106c957600080fd5b506106fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061165e565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561072e57600080fd5b5061076d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611688565b005b34801561077b57600080fd5b50610784611756565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d257600080fd5b506107db61177b565b6040518082815260200191505060405180910390f35b3480156107fd57600080fd5b50610806611781565b6040518082815260200191505060405180910390f35b34801561082857600080fd5b506108aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611787565b005b3480156108b857600080fd5b506108ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c07565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561094a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109c057600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610a2b57600080fd5b505af1158015610a3f573d6000803e3d6000fd5b505050506040513d6020811015610a5557600080fd5b81019080805190602001909291905050501515141515610a7457600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600a6020528060005260406000206000915090508060000154908060010154905082565b60006001905090565b600060011515600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151480610b7257508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610b7d57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920775d484846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b50505050600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610ca782600454611d5d565b8160000160008282540192505081905550505050565b600080600080600080610cce612b2a565b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820154815250509050610d498160000151600454611d98565b96508060200151955080604001519450610e5c600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663207a6c338a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610e1957600080fd5b505af1158015610e2d573d6000803e3d6000fd5b505050506040513d6020811015610e4357600080fd5b8101908080519060200190929190505050600454611d98565b9250600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395360a02896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610f1b57600080fd5b505af1158015610f2f573d6000803e3d6000fd5b505050506040513d6020811015610f4557600080fd5b81019080805190602001909291905050509150610f6188611db3565b93505091939550919395565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fca57600080fd5b600a600060015481526020019081526020016000209050828160000181905550818160010181905550505050565b600060011515600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561105957600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090504281600101819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561110457600080fd5b819050600015158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561116f57600080fd5b505af1158015611183573d6000803e3d6000fd5b505050506040513d602081101561119957600080fd5b8101908080519060200190929190505050151514156111b757600080fd5b6001600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561126e57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060011515600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561131357600080fd5b61131f82600454611d5d565b915081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015151561137257600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000160008282540392505081905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142557600080fd5b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600b6020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806008819055505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561157e57600080fd5b600060085414151561158f57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561161557600080fd5b505af1158015611629573d6000803e3d6000fd5b505050506040513d602081101561163f57600080fd5b8101908080519060200190929190505050600881905550565b60045481565b60096020528060005260406000206000915090508060000154908060010154908060020154905083565b60008060011515600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156116ea57600080fd5b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150816002015490504281101561173e574290505b6117488184611f0e565b826002018190555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60015481565b606060008060008060006001151561179f338b611f2c565b15151415156117ad57600080fd5b600487511415156117bd57600080fd5b600115156117ca88611fd4565b15151415156117d857600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632222e43a33896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156118b857808201518184015260208101905061189d565b505050509050019350505050600060405180830381600087803b1580156118de57600080fd5b505af11580156118f2573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920775d4338a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663669a828b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015611a5957600080fd5b505af1158015611a6d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611a9757600080fd5b810190808051640100000000811115611aaf57600080fd5b82810190506020810184811115611ac557600080fd5b8151856020820283011164010000000082111715611ae257600080fd5b50509291905050509550611b0389611afc8a600454611d5d565b8989612046565b8095508196508297508398508499505050505050611b3e8986611b2885600454611d98565b611b3485600454611d98565b888860018e6123f5565b6001876001815181101515611b4f57fe5b90602001906020020151148015611b6a575060001515851515145b15611bb157611baf89611baa611ba3611b858c600454611d5d565b8a6001815181101515611b9457fe5b90602001906020020151611d5d565b6064611d98565b612889565b505b6002544201600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c6457600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611ccf57600080fd5b505af1158015611ce3573d6000803e3d6000fd5b505050506040513d6020811015611cf957600080fd5b81019080805190602001909291905050501515141515611d1857600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806000841415611d725760009150611d91565b8284029050828482811515611d8357fe5b04141515611d8d57fe5b8091505b5092915050565b6000808284811515611da657fe5b0490508091505092915050565b600042600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154108015611eff5750611388600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395360a02846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ec157600080fd5b505af1158015611ed5573d6000803e3d6000fd5b505050506040513d6020811015611eeb57600080fd5b810190808051906020019092919050505010155b15611f0957600190505b919050565b6000808284019050838110151515611f2257fe5b8091505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611fac575042600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411155b8015611fc4575060011515611fc083611db3565b1515145b15611fce57600190505b92915050565b60008060019150600090505b82518110156120405760008382815181101515611ff957fe5b906020019060200201511415801561202957506001838281518110151561201c57fe5b9060200190602002015114155b1561203357600091505b8080600101915050611fe0565b50919050565b600080600080600080600080600960008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002092508a96506120a33360016065612a11565b60320191506120b48c836065612a11565b603201905060018a60008151811015156120ca57fe5b90602001906020020151141561210b576121066120ff888b60008151811015156120f057fe5b90602001906020020151611d5d565b6064611d98565b870196505b60018a600381518110151561211c57fe5b90602001906020020151141561217257612169836000015461216461215d86600001548d600381518110151561214e57fe5b90602001906020020151611d5d565b6064611d98565b612af8565b83600001819055505b6121a76121a061219a89600a6000600154815260200190815260200160002060000154611d5d565b84611d5d565b6064611d98565b96506121e26121db6121d58560000154600a6000600154815260200190815260200160002060010154611d5d565b83611d5d565b6064611d98565b955060018a60028151811015156121f557fe5b9060200190602002015114156122365761223161222a888b600281518110151561221b57fe5b90602001906020020151611d5d565b6064611d98565b870196505b858710151561228f5761227d8b612278612251896064611d5d565b612273600a600060015481526020019081526020016000206000015487611d5d565b611d98565b612b11565b945082600001549350600197506122d7565b8a94506122d483600001546122cf6122a88a6064611d5d565b6122ca600a600060015481526020019081526020016000206001015486611d5d565b611d98565b612b11565b93505b6122e5836000015485612af8565b8360000181905550848b11156123e757600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec6f772d336123496123418f8a612af8565b600454611d98565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156123ce57600080fd5b505af11580156123e2573d6000803e3d6000fd5b505050505b505050945094509450945094565b6000806000809250600115158a151514156126f057600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395360a028c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156124c757600080fd5b505af11580156124db573d6000803e3d6000fd5b505050506040513d60208110156124f157600080fd5b810190808051906020019092919050505091506125108b836029612a11565b600a0190506125296125228383611d5d565b6064611d98565b925060008311156126ef57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b04eb6398c856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156125f957600080fd5b505af115801561260d573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e212ea33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156126d657600080fd5b505af11580156126ea573d6000803e3d6000fd5b505050505b5b7fb521f84624afe810424a8cbb85a0740a5999831e697a75fa208455349473e7c7338c8c868d8d8d8d8d604051808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200188151515158152602001878152602001868152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a1600185141561287c577fe71af83b34f734e9b87bbcb0fba4bf4e7c28c768c814fe98932dc7ce791d0fb68460008151811015156127fc57fe5b9060200190602002015185600181518110151561281557fe5b9060200190602002015186600281518110151561282e57fe5b9060200190602002015187600381518110151561284757fe5b906020019060200201516040518085815260200184815260200183815260200182815260200194505050505060405180910390a15b5050505050505050505050565b600080612894612b4c565b60008060008060006060600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209750600a600060015481526020019081526020016000206040805190810160405290816000820154815260200160018201548152505096506129223360016065612a11565b60320195506129338b876065612a11565b603201945061295961295261294c8c8a60000151611d5d565b88611d5d565b6064611d98565b93506129806129796129738a600001548a60200151611d5d565b87611d5d565b6064611d98565b925060009150828410151561299f5787600001549150600198506129d0565b6129cd88600001546129c86129b5876064611d5d565b6129c38b602001518a611d5d565b611d98565b612b11565b91505b6129de886000015483612af8565b8860000181905550612a038b8a60006129f986600454611d98565b88886002886123f5565b505050505050505092915050565b600081428585604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040516020818303038152906040526040518082805190602001908083835b602083101515612ab45780518252602082019150602081019050602083039250612a8f565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515612aee57fe5b0690509392505050565b6000828211151515612b0657fe5b818303905092915050565b6000818310612b205781612b22565b825b905092915050565b6060604051908101604052806000815260200160008152602001600081525090565b6040805190810160405280600081526020016000815250905600a165627a7a72305820fbae04c656f656c4eaa2ca5f9671584e91d57f131f540bb1b98b6f527e9e9feb0029"
}