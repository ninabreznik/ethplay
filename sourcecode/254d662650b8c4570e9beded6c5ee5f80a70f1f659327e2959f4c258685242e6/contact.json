{
  "address": "0xdc8a6ef9a8a4114773e806dc24bb8e7b6f3d92eb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoBossWannaCry",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-18\n*/\n\npragma solidity ^0.4.24;\n\n/*\n* CryptoMiningWar - Blockchain-based strategy game\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\ncontract PullPayment {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public payments;\n  uint256 public totalPayments;\n\n  /**\n  * @dev Withdraw accumulated balance, called by payee.\n  */\n  function withdrawPayments() public {\n    address payee = msg.sender;\n    uint256 payment = payments[payee];\n\n    require(payment != 0);\n    require(address(this).balance >= payment);\n\n    totalPayments = totalPayments.sub(payment);\n    payments[payee] = 0;\n\n    payee.transfer(payment);\n  }\n\n  /**\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\n  * @param dest The destination address of the funds.\n  * @param amount The amount to transfer.\n  */\n  function asyncSend(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].add(amount);\n    totalPayments = totalPayments.add(amount);\n  }\n}\ncontract CryptoEngineerInterface {\n    uint256 public prizePool = 0;\n\n    function subVirus(address /*_addr*/, uint256 /*_value*/) public pure {}\n    function claimPrizePool(address /*_addr*/, uint256 /*_value*/) public pure {} \n    function fallback() public payable {}\n\n    function isEngineerContract() external pure returns(bool) {}\n}\ninterface CryptoMiningWarInterface {\n    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\n    function isMiningWarContract() external pure returns(bool);\n}\ninterface MiniGameInterface {\n     function isContractMiniGame() external pure returns( bool _isContractMiniGame );\n}\ncontract CryptoBossWannaCry is PullPayment{\n    bool init = false;\n\taddress public administrator;\n    uint256 public bossRoundNumber;\n    uint256 public BOSS_HP_DEFAULT = 10000000; \n    uint256 public HALF_TIME_ATK_BOSS = 0;\n    // engineer game infomation\n    uint256 constant public VIRUS_MINING_PERIOD = 86400; \n    uint256 public BOSS_DEF_DEFFAULT = 0;\n    CryptoEngineerInterface public Engineer;\n    CryptoMiningWarInterface public MiningWar;\n    \n    // player information\n    mapping(address => PlayerData) public players;\n    // boss information\n    mapping(uint256 => BossData) public bossData;\n\n    mapping(address => bool)   public miniGames;\n        \n    struct PlayerData {\n        uint256 currentBossRoundNumber;\n        uint256 lastBossRoundNumber;\n        uint256 win;\n        uint256 share;\n        uint256 dame;\n        uint256 nextTimeAtk;\n    }\n\n    struct BossData {\n        uint256 bossRoundNumber;\n        uint256 bossHp;\n        uint256 def;\n        uint256 prizePool;\n        address playerLastAtk;\n        uint256 totalDame;\n        bool ended;\n    }\n    event eventAttackBoss(\n        uint256 bossRoundNumber,\n        address playerAtk,\n        uint256 virusAtk,\n        uint256 dame,\n        uint256 totalDame,\n        uint256 timeAtk,\n        bool isLastHit,\n        uint256 crystalsReward\n    );\n    event eventEndAtkBoss(\n        uint256 bossRoundNumber,\n        address playerWin,\n        uint256 ethBonus,\n        uint256 bossHp,\n        uint256 prizePool\n    );\n    modifier disableContract()\n    {\n        require(tx.origin == msg.sender);\n        _;\n    }\n    modifier isAdministrator()\n    {\n        require(msg.sender == administrator);\n        _;\n    }\n\n    constructor() public {\n        administrator = msg.sender;\n        // set interface contract\n        setMiningWarInterface(0x65c347702b66ff8f1a28cf9a9768487fbe97765f);\n        setEngineerInterface(0xb2d6000d4a7fe8b1358d54a9bc21f2badf91d849);\n    }\n    function () public payable\n    {\n        \n    }\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n    {\n    \t_isContractMiniGame = true;\n    }\n    function isBossWannaCryContract() public pure returns(bool)\n    {\n        return true;\n    }\n    /** \n    * @dev Main Contract call this function to setup mini game.\n    */\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public\n    {\n    \n    }\n     //@dev use this function in case of bug\n    function upgrade(address addr) public isAdministrator\n    {\n        selfdestruct(addr);\n    }\n    // ---------------------------------------------------------------------------------------\n    // SET INTERFACE CONTRACT\n    // ---------------------------------------------------------------------------------------\n    \n    function setMiningWarInterface(address _addr) public isAdministrator\n    {\n        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\n\n        require(miningWarInterface.isMiningWarContract() == true);\n                \n        MiningWar = miningWarInterface;\n    }\n    function setEngineerInterface(address _addr) public isAdministrator\n    {\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\n        \n        require(engineerInterface.isEngineerContract() == true);\n\n        Engineer = engineerInterface;\n    }\n    function setContractsMiniGame( address _addr ) public isAdministrator \n    {\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\n        if( MiniGame.isContractMiniGame() == false ) { revert(); }\n\n        miniGames[_addr] = true;\n    }\n\n    function setBossRoundNumber(uint256 _value) public isAdministrator\n    {\n        bossRoundNumber = _value;\n    } \n    /**\n    * @dev remove mini game contract from main contract\n    * @param _addr mini game contract address\n    */\n    function removeContractMiniGame(address _addr) public isAdministrator\n    {\n        miniGames[_addr] = false;\n    }\n\n    function startGame() public isAdministrator\n    {\n        require(init == false);\n        init = true;\n        bossData[bossRoundNumber].ended = true;\n    \n        startNewBoss();\n    }\n    /**\n    * @dev set defence for boss\n    * @param _value number defence\n    */\n    function setDefenceBoss(uint256 _value) public isAdministrator\n    {\n        BOSS_DEF_DEFFAULT = _value;  \n    }\n    /**\n    * @dev set HP for boss\n    * @param _value number HP default\n    */\n    function setBossHPDefault(uint256 _value) public isAdministrator\n    {\n        BOSS_HP_DEFAULT = _value;  \n    }\n    function setHalfTimeAtkBoss(uint256 _value) public isAdministrator\n    {\n        HALF_TIME_ATK_BOSS = _value;  \n    }\n    function startNewBoss() private\n    {\n        require(bossData[bossRoundNumber].ended == true);\n\n        bossRoundNumber = bossRoundNumber + 1;\n\n        uint256 bossHp = BOSS_HP_DEFAULT * bossRoundNumber;\n        // claim 5% of current prizePool as rewards.\n        uint256 engineerPrizePool = Engineer.prizePool();\n        uint256 prizePool = SafeMath.div(SafeMath.mul(engineerPrizePool, 5),100);\n        Engineer.claimPrizePool(address(this), prizePool); \n\n        bossData[bossRoundNumber] = BossData(bossRoundNumber, bossHp, BOSS_DEF_DEFFAULT, prizePool, 0x0, 0, false);\n    }\n    function endAtkBoss() private \n    {\n        require(bossData[bossRoundNumber].ended == false);\n        require(bossData[bossRoundNumber].totalDame >= bossData[bossRoundNumber].bossHp);\n\n        BossData storage b = bossData[bossRoundNumber];\n        b.ended = true;\n         // update eth bonus for player last hit\n        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );\n\n        if (b.playerLastAtk != 0x0) {\n            PlayerData storage p = players[b.playerLastAtk];\n            p.win =  p.win + ethBonus;\n\n            uint256 share = SafeMath.div(SafeMath.mul(SafeMath.mul(b.prizePool, 95), p.dame), SafeMath.mul(b.totalDame, 100));\n            ethBonus += share;\n        }\n\n        emit eventEndAtkBoss(bossRoundNumber, b.playerLastAtk, ethBonus, b.bossHp, b.prizePool);\n        startNewBoss();\n    }\n    /**\n    * @dev player atk the boss\n    * @param _value number virus for this attack boss\n    */\n    function atkBoss(uint256 _value) public disableContract\n    {\n        require(bossData[bossRoundNumber].ended == false);\n        require(bossData[bossRoundNumber].totalDame < bossData[bossRoundNumber].bossHp);\n        require(players[msg.sender].nextTimeAtk <= now);\n\n        Engineer.subVirus(msg.sender, _value);\n        \n        uint256 rate = 50 + randomNumber(msg.sender, now, 60); // 50 - 110%\n        \n        uint256 atk = SafeMath.div(SafeMath.mul(_value, rate), 100);\n        \n        updateShareETH(msg.sender);\n\n        // update dame\n        BossData storage b = bossData[bossRoundNumber];\n        \n        uint256 currentTotalDame = b.totalDame;\n        uint256 dame = 0;\n        if (atk > b.def) {\n            dame = SafeMath.sub(atk, b.def);\n        }\n\n        b.totalDame = SafeMath.min(SafeMath.add(currentTotalDame, dame), b.bossHp);\n        b.playerLastAtk = msg.sender;\n\n        dame = SafeMath.sub(b.totalDame, currentTotalDame);\n\n        // bonus crystals\n        uint256 crystalsBonus = SafeMath.div(SafeMath.mul(dame, 5), 100);\n        MiningWar.addCrystal(msg.sender, crystalsBonus);\n        // update player\n        PlayerData storage p = players[msg.sender];\n\n        p.nextTimeAtk = now + HALF_TIME_ATK_BOSS;\n\n        if (p.currentBossRoundNumber == bossRoundNumber) {\n            p.dame = SafeMath.add(p.dame, dame);\n        } else {\n            p.currentBossRoundNumber = bossRoundNumber;\n            p.dame = dame;\n        }\n\n        bool isLastHit;\n        if (b.totalDame >= b.bossHp) {\n            isLastHit = true;\n            endAtkBoss();\n        }\n        \n        // emit event attack boss\n        emit eventAttackBoss(b.bossRoundNumber, msg.sender, _value, dame, p.dame, now, isLastHit, crystalsBonus);\n    }\n \n    function updateShareETH(address _addr) private\n    {\n        PlayerData storage p = players[_addr];\n        \n        if ( \n            bossData[p.currentBossRoundNumber].ended == true &&\n            p.lastBossRoundNumber < p.currentBossRoundNumber\n            ) {\n            p.share = SafeMath.add(p.share, calculateShareETH(_addr, p.currentBossRoundNumber));\n            p.lastBossRoundNumber = p.currentBossRoundNumber;\n        }\n    }\n\n    /**\n    * @dev calculate share Eth of player\n    */\n    function calculateShareETH(address _addr, uint256 _bossRoundNumber) public view returns(uint256 _share)\n    {\n        PlayerData memory p = players[_addr];\n        BossData memory b = bossData[_bossRoundNumber];\n        if ( \n            p.lastBossRoundNumber >= p.currentBossRoundNumber && \n            p.currentBossRoundNumber != 0 \n            ) {\n            _share = 0;\n        } else {\n            if (b.totalDame == 0) return 0;\n            _share = SafeMath.div(SafeMath.mul(SafeMath.mul(b.prizePool, 95), p.dame), SafeMath.mul(b.totalDame, 100)); // prizePool * 95% * playerDame / totalDame \n        } \n        if (b.ended == false)  _share = 0;\n    }\n    function getCurrentReward(address _addr) public view returns(uint256 _currentReward)\n    {\n        PlayerData memory p = players[_addr];\n        _currentReward = SafeMath.add(p.win, p.share);\n        _currentReward += calculateShareETH(_addr, p.currentBossRoundNumber);\n    }\n\n    function withdrawReward(address _addr) public \n    {\n        updateShareETH(_addr);\n        \n        PlayerData storage p = players[_addr];\n        \n        uint256 reward = SafeMath.add(p.share, p.win);\n        if (address(this).balance >= reward && reward > 0) {\n            _addr.transfer(reward);\n            // update player\n            p.win = 0;\n            p.share = 0;\n        }\n    }\n    //--------------------------------------------------------------------------\n    // INTERNAL FUNCTION\n    //--------------------------------------------------------------------------\n    function devFee(uint256 _amount) private pure returns(uint256)\n    {\n        return SafeMath.div(SafeMath.mul(_amount, 5), 100);\n    }\n    function randomNumber(address _addr, uint256 randNonce, uint256 _maxNumber) private returns(uint256)\n    {\n        return uint256(keccak256(abi.encodePacked(now, _addr, randNonce))) % _maxNumber;\n    }\n}",
  "bytecode": "60806040526000600260006101000a81548160ff02191690831515021790555062989680600455600060055560006006553480156200003d57600080fd5b5033600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000ad7365c347702b66ff8f1a28cf9a9768487fbe97765f620000e1640100000000026401000000009004565b620000db73b2d6000d4a7fe8b1358d54a9bc21f2badf91d8496200023d640100000000026401000000009004565b62000399565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200014057600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663688b5c2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620001ac57600080fd5b505af1158015620001c1573d6000803e3d6000fd5b505050506040513d6020811015620001d857600080fd5b81019080805190602001909291905050501515141515620001f857600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200029c57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663b9a59b836040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200030857600080fd5b505af11580156200031d573d6000803e3d6000fd5b505050506040513d60208110156200033457600080fd5b810190808051906020019092919050505015151415156200035457600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61250480620003a96000396000f30060806040526004361061018a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680625b44871461018c5780630900f010146101b75780630b3fe32d146101fa578063150228f414610227578063306142c3146102525780633281d576146102ed5780633b5a2a3b1461031c5780633b8678de146103475780634d307e3f1461037457806351ab01b5146103cb5780636103d70b146103f6578063614781f91461040d57806379eb16d41461043a57806384ffcb5d1461049b57806386dd5e03146104de5780638a56b2301461050b5780639ff12bba1461054e578063b239dac614610591578063b4bd7d41146105ec578063b86e321c14610643578063be7ccd7e14610686578063c3f656f1146106bd578063c533799214610714578063c702732914610741578063ccdc309714610770578063d65ab5f21461079b578063e12936d0146107b2578063e2982c21146107dd578063e2eb41ff14610834578063f53d0a8e146108ae578063ffa651b614610905575b005b34801561019857600080fd5b506101a1610948565b6040518082815260200191505060405180910390f35b3480156101c357600080fd5b506101f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061094e565b005b34801561020657600080fd5b50610225600480360381019080803590602001909291905050506109c3565b005b34801561023357600080fd5b5061023c610a29565b6040518082815260200191505060405180910390f35b34801561025e57600080fd5b5061027d60048036038101908080359060200190929190505050610a2f565b604051808881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018215151515815260200197505050505050505060405180910390f35b3480156102f957600080fd5b50610302610a9e565b604051808215151515815260200191505060405180910390f35b34801561032857600080fd5b50610331610aa7565b6040518082815260200191505060405180910390f35b34801561035357600080fd5b5061037260048036038101908080359060200190929190505050610aad565b005b34801561038057600080fd5b506103b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b13565b6040518082815260200191505060405180910390f35b3480156103d757600080fd5b506103e0610bd2565b6040518082815260200191505060405180910390f35b34801561040257600080fd5b5061040b610bd8565b005b34801561041957600080fd5b5061043860048036038101908080359060200190929190505050610cff565b005b34801561044657600080fd5b50610485600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061121a565b6040518082815260200191505060405180910390f35b3480156104a757600080fd5b506104dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061140f565b005b3480156104ea57600080fd5b506105096004803603810190808035906020019092919050505061157c565b005b34801561051757600080fd5b5061054c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115e2565b005b34801561055a57600080fd5b5061058f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611739565b005b34801561059d57600080fd5b506105d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117f0565b604051808215151515815260200191505060405180910390f35b3480156105f857600080fd5b50610601611810565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064f57600080fd5b50610684600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611836565b005b34801561069257600080fd5b506106bb6004803603810190808035906020019092919080359060200190929190505050611924565b005b3480156106c957600080fd5b506106d2611928565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072057600080fd5b5061073f6004803603810190808035906020019092919050505061194e565b005b34801561074d57600080fd5b506107566119b4565b604051808215151515815260200191505060405180910390f35b34801561077c57600080fd5b506107856119bd565b6040518082815260200191505060405180910390f35b3480156107a757600080fd5b506107b06119c3565b005b3480156107be57600080fd5b506107c7611a97565b6040518082815260200191505060405180910390f35b3480156107e957600080fd5b5061081e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a9e565b6040518082815260200191505060405180910390f35b34801561084057600080fd5b50610875600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ab6565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b3480156108ba57600080fd5b506108c3611af2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561091157600080fd5b50610946600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b18565b005b60015481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109aa57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1f57600080fd5b8060058190555050565b60065481565b600a6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16905087565b60006001905090565b60055481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b0957600080fd5b8060068190555050565b6000610b1d61244b565b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c0604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815250509050610bb881604001518260600151611c6f565b9150610bc883826000015161121a565b8201915050919050565b60045481565b6000803391506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114151515610c2f57600080fd5b803073ffffffffffffffffffffffffffffffffffffffff163110151515610c5557600080fd5b610c6a81600154611c8d90919063ffffffff16565b60018190555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610cfa573d6000803e3d6000fd5b505050565b6000806000806000806000803373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515610d4557600080fd5b60001515600a6000600354815260200190815260200160002060060160009054906101000a900460ff161515141515610d7d57600080fd5b600a6000600354815260200190815260200160002060010154600a6000600354815260200190815260200160002060050154101515610dbb57600080fd5b42600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015411151515610e0c57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920775d4338b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610ed157600080fd5b505af1158015610ee5573d6000803e3d6000fd5b50505050610ef53342603c611ca6565b6032019750610f0e610f078a8a611d8d565b6064611dc8565b9650610f1933611de3565b600a60006003548152602001908152602001600020955085600501549450600093508560020154871115610f5857610f55878760020154611c8d565b93505b610f6f610f658686611c6f565b8760010154611ea2565b8660050181905550338660040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610fc8866005015486611c8d565b9350610fdf610fd8856005611d8d565b6064611dc8565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e212ea33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b50505050600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150600554420182600501819055506003548260000154141561113557611128826004015485611c6f565b826004018190555061114a565b60035482600001819055508382600401819055505b856001015486600501541015156111685760019050611167611ebb565b5b7f578ea18e7d557abb72727be622c8bc8224fc05d071e7df3d8dab335f9550975b8660000154338b87866004015442878a604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001878152602001868152602001858152602001848152602001831515151581526020018281526020019850505050505050505060405180910390a1505050505050505050565b600061122461244b565b61122c612482565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c0604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815250509150600a600085815260200190815260200160002060e06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250509050816000015182602001511015801561139657506000826000015114155b156113a457600092506113f0565b60008160a0015114156113ba5760009250611407565b6113ed6113d96113cf8360600151605f611d8d565b8460800151611d8d565b6113e88360a001516064611d8d565b611dc8565b92505b600015158160c001511515141561140657600092505b5b505092915050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146d57600080fd5b819050600015158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156114d857600080fd5b505af11580156114ec573d6000803e3d6000fd5b505050506040513d602081101561150257600080fd5b81019080805190602001909291905050501515141561152057600080fd5b6001600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115d857600080fd5b8060038190555050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164057600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663688b5c2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b505050506040513d60208110156116d557600080fd5b810190808051906020019092919050505015151415156116f457600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561179557600080fd5b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600b6020528060005260406000206000915054906101000a900460ff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061184283611de3565b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915061189582600301548360020154611c6f565b9050803073ffffffffffffffffffffffffffffffffffffffff1631101580156118be5750600081115b1561191f578273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611909573d6000803e3d6000fd5b5060008260020181905550600082600301819055505b505050565b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119aa57600080fd5b8060048190555050565b60006001905090565b60035481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a1f57600080fd5b60001515600260009054906101000a900460ff161515141515611a4157600080fd5b6001600260006101000a81548160ff0219169083151502179055506001600a6000600354815260200190815260200160002060060160006101000a81548160ff021916908315150217905550611a95612139565b565b6201518081565b60006020528060005260406000206000915090505481565b60096020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b7657600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663b9a59b836040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611be157600080fd5b505af1158015611bf5573d6000803e3d6000fd5b505050506040513d6020811015611c0b57600080fd5b81019080805190602001909291905050501515141515611c2a57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000808284019050838110151515611c8357fe5b8091505092915050565b6000828211151515611c9b57fe5b818303905092915050565b600081428585604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040516020818303038152906040526040518082805190602001908083835b602083101515611d495780518252602082019150602081019050602083039250611d24565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515611d8357fe5b0690509392505050565b6000806000841415611da25760009150611dc1565b8284029050828482811515611db357fe5b04141515611dbd57fe5b8091505b5092915050565b6000808284811515611dd657fe5b0490508091505092915050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060011515600a60008360000154815260200190815260200160002060060160009054906101000a900460ff161515148015611e68575080600001548160010154105b15611e9e57611e888160030154611e8384846000015461121a565b611c6f565b8160030181905550806000015481600101819055505b5050565b6000818310611eb15781611eb3565b825b905092915050565b60008060008060001515600a6000600354815260200190815260200160002060060160009054906101000a900460ff161515141515611ef957600080fd5b600a6000600354815260200190815260200160002060010154600a600060035481526020019081526020016000206005015410151515611f3857600080fd5b600a60006003548152602001908152602001600020935060018460060160006101000a81548160ff021916908315150217905550611f85611f7e85600301546005611d8d565b6064611dc8565b925060008460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561207a57600960008560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915082826002015401826002018190555061207261205e6120548660030154605f611d8d565b8460040154611d8d565b61206d86600501546064611d8d565b611dc8565b905080830192505b7fe59d8825db491fdabdc07d1171098852d7d4c83dd600bb8d877cd86ede263f4c6003548560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168587600101548860030154604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390a1612133612139565b50505050565b600080600060011515600a6000600354815260200190815260200160002060060160009054906101000a900460ff16151514151561217657600080fd5b600160035401600381905550600354600454029250600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663719ce73e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561221157600080fd5b505af1158015612225573d6000803e3d6000fd5b505050506040513d602081101561223b57600080fd5b8101908080519060200190929190505050915061226361225c836005611d8d565b6064611dc8565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637baf71f930836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561232a57600080fd5b505af115801561233e573d6000803e3d6000fd5b5050505060e06040519081016040528060035481526020018481526020016006548152602001828152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160001515815250600a600060035481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff021916908315150217905550905050505050565b60c0604051908101604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60e06040519081016040528060008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160001515815250905600a165627a7a723058204a0a12826933408fd2650a18bc1ab139e0994700b1b8654c2db1e4d3bf1df5c20029"
}