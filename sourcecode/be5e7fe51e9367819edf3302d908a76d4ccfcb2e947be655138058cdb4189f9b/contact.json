{
  "address": "0xbda109309f9fafa6dd6a9cb9f1df4085b27ee8ef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Maker: Contract 2",
  "contractName": "SaiTap",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-18\n*/\n\n// hevm: flattened sources of src/tap.sol\npragma solidity ^0.4.18;\n\n////// lib/ds-guard/lib/ds-auth/src/auth.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() public {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n////// lib/ds-spell/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n////// lib/ds-thing/lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// lib/ds-thing/src/thing.sol\n// thing.sol - `auth` with handy mixins. your things should be DSThings\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import 'ds-auth/auth.sol'; */\n/* import 'ds-note/note.sol'; */\n/* import 'ds-math/math.sol'; */\n\ncontract DSThing is DSAuth, DSNote, DSMath {\n\n    function S(string s) internal pure returns (bytes4) {\n        return bytes4(keccak256(s));\n    }\n\n}\n\n////// lib/ds-token/lib/ds-stop/src/stop.sol\n/// stop.sol -- mixin for enable/disable functionality\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import \"ds-auth/auth.sol\"; */\n/* import \"ds-note/note.sol\"; */\n\ncontract DSStop is DSNote, DSAuth {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped);\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\n////// lib/ds-token/lib/erc20/src/erc20.sol\n/// erc20.sol -- API for the ERC20 token standard\n\n// See <https://github.com/ethereum/EIPs/issues/20>.\n\n// This file likely does not meet the threshold of originality\n// required for copyright to apply.  As a result, this is free and\n// unencumbered software belonging to the public domain.\n\n/* pragma solidity ^0.4.8; */\n\ncontract ERC20Events {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\ncontract ERC20 is ERC20Events {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address guy) public view returns (uint);\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public returns (bool);\n}\n\n////// lib/ds-token/src/base.sol\n/// base.sol -- basic ERC20 implementation\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import \"erc20/erc20.sol\"; */\n/* import \"ds-math/math.sol\"; */\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n\n    function DSTokenBase(uint supply) public {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _supply;\n    }\n    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) public view returns (uint) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n}\n\n////// lib/ds-token/src/token.sol\n/// token.sol -- ERC20 implementation with minting and burning\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import \"ds-stop/stop.sol\"; */\n\n/* import \"./base.sol\"; */\n\ncontract DSToken is DSTokenBase(0), DSStop {\n\n    bytes32  public  symbol;\n    uint256  public  decimals = 18; // standard token precision. override to customize\n\n    function DSToken(bytes32 symbol_) public {\n        symbol = symbol_;\n    }\n\n    event Mint(address indexed guy, uint wad);\n    event Burn(address indexed guy, uint wad);\n\n    function approve(address guy) public stoppable returns (bool) {\n        return super.approve(guy, uint(-1));\n    }\n\n    function approve(address guy, uint wad) public stoppable returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        stoppable\n        returns (bool)\n    {\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function push(address dst, uint wad) public {\n        transferFrom(msg.sender, dst, wad);\n    }\n    function pull(address src, uint wad) public {\n        transferFrom(src, msg.sender, wad);\n    }\n    function move(address src, address dst, uint wad) public {\n        transferFrom(src, dst, wad);\n    }\n\n    function mint(uint wad) public {\n        mint(msg.sender, wad);\n    }\n    function burn(uint wad) public {\n        burn(msg.sender, wad);\n    }\n    function mint(address guy, uint wad) public auth stoppable {\n        _balances[guy] = add(_balances[guy], wad);\n        _supply = add(_supply, wad);\n        Mint(guy, wad);\n    }\n    function burn(address guy, uint wad) public auth stoppable {\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n        }\n\n        _balances[guy] = sub(_balances[guy], wad);\n        _supply = sub(_supply, wad);\n        Burn(guy, wad);\n    }\n\n    // Optional token name\n    bytes32   public  name = \"\";\n\n    function setName(bytes32 name_) public auth {\n        name = name_;\n    }\n}\n\n////// lib/ds-value/src/value.sol\n/// value.sol - a value is a simple thing, it can be get and set\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import 'ds-thing/thing.sol'; */\n\ncontract DSValue is DSThing {\n    bool    has;\n    bytes32 val;\n    function peek() public view returns (bytes32, bool) {\n        return (val,has);\n    }\n    function read() public view returns (bytes32) {\n        var (wut, haz) = peek();\n        assert(haz);\n        return wut;\n    }\n    function poke(bytes32 wut) public note auth {\n        val = wut;\n        has = true;\n    }\n    function void() public note auth {  // unset the value\n        has = false;\n    }\n}\n\n////// src/vox.sol\n/// vox.sol -- target price feed\n\n// Copyright (C) 2016, 2017  Nikolai Mushegian <[email protected]>\n// Copyright (C) 2016, 2017  Daniel Brockman <[email protected]>\n// Copyright (C) 2017        Rain Break <[email protected]>\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.18; */\n\n/* import \"ds-thing/thing.sol\"; */\n\ncontract SaiVox is DSThing {\n    uint256  _par;\n    uint256  _way;\n\n    uint256  public  fix;\n    uint256  public  how;\n    uint256  public  tau;\n\n    function SaiVox(uint par_) public {\n        _par = fix = par_;\n        _way = RAY;\n        tau  = era();\n    }\n\n    function era() public view returns (uint) {\n        return block.timestamp;\n    }\n\n    function mold(bytes32 param, uint val) public note auth {\n        if (param == 'way') _way = val;\n    }\n\n    // Dai Target Price (ref per dai)\n    function par() public returns (uint) {\n        prod();\n        return _par;\n    }\n    function way() public returns (uint) {\n        prod();\n        return _way;\n    }\n\n    function tell(uint256 ray) public note auth {\n        fix = ray;\n    }\n    function tune(uint256 ray) public note auth {\n        how = ray;\n    }\n\n    function prod() public note {\n        var age = era() - tau;\n        if (age == 0) return;  // optimised\n        tau = era();\n\n        if (_way != RAY) _par = rmul(_par, rpow(_way, age));  // optimised\n\n        if (how == 0) return;  // optimised\n        var wag = int128(how * age);\n        _way = inj(prj(_way) + (fix < _par ? wag : -wag));\n    }\n\n    function inj(int128 x) internal pure returns (uint256) {\n        return x >= 0 ? uint256(x) + RAY\n            : rdiv(RAY, RAY + uint256(-x));\n    }\n    function prj(uint256 x) internal pure returns (int128) {\n        return x >= RAY ? int128(x - RAY)\n            : int128(RAY) - int128(rdiv(RAY, x));\n    }\n}\n\n////// src/tub.sol\n/// tub.sol -- simplified CDP engine (baby brother of `vat')\n\n// Copyright (C) 2017  Nikolai Mushegian <[email protected]>\n// Copyright (C) 2017  Daniel Brockman <[email protected]>\n// Copyright (C) 2017  Rain Break <[email protected]>\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.18; */\n\n/* import \"ds-thing/thing.sol\"; */\n/* import \"ds-token/token.sol\"; */\n/* import \"ds-value/value.sol\"; */\n\n/* import \"./vox.sol\"; */\n\ncontract SaiTubEvents {\n    event LogNewCup(address indexed lad, bytes32 cup);\n}\n\ncontract SaiTub is DSThing, SaiTubEvents {\n    DSToken  public  sai;  // Stablecoin\n    DSToken  public  sin;  // Debt (negative sai)\n\n    DSToken  public  skr;  // Abstracted collateral\n    ERC20    public  gem;  // Underlying collateral\n\n    DSToken  public  gov;  // Governance token\n\n    SaiVox   public  vox;  // Target price feed\n    DSValue  public  pip;  // Reference price feed\n    DSValue  public  pep;  // Governance price feed\n\n    address  public  tap;  // Liquidator\n    address  public  pit;  // Governance Vault\n\n    uint256  public  axe;  // Liquidation penalty\n    uint256  public  cap;  // Debt ceiling\n    uint256  public  mat;  // Liquidation ratio\n    uint256  public  tax;  // Stability fee\n    uint256  public  fee;  // Governance fee\n    uint256  public  gap;  // Join-Exit Spread\n\n    bool     public  off;  // Cage flag\n    bool     public  out;  // Post cage exit\n\n    uint256  public  fit;  // REF per SKR (just before settlement)\n\n    uint256  public  rho;  // Time of last drip\n    uint256         _chi;  // Accumulated Tax Rates\n    uint256         _rhi;  // Accumulated Tax + Fee Rates\n    uint256  public  rum;  // Total normalised debt\n\n    uint256                   public  cupi;\n    mapping (bytes32 => Cup)  public  cups;\n\n    struct Cup {\n        address  lad;      // CDP owner\n        uint256  ink;      // Locked collateral (in SKR)\n        uint256  art;      // Outstanding normalised debt (tax only)\n        uint256  ire;      // Outstanding normalised debt\n    }\n\n    function lad(bytes32 cup) public view returns (address) {\n        return cups[cup].lad;\n    }\n    function ink(bytes32 cup) public view returns (uint) {\n        return cups[cup].ink;\n    }\n    function tab(bytes32 cup) public returns (uint) {\n        return rmul(cups[cup].art, chi());\n    }\n    function rap(bytes32 cup) public returns (uint) {\n        return sub(rmul(cups[cup].ire, rhi()), tab(cup));\n    }\n\n    // Total CDP Debt\n    function din() public returns (uint) {\n        return rmul(rum, chi());\n    }\n    // Backing collateral\n    function air() public view returns (uint) {\n        return skr.balanceOf(this);\n    }\n    // Raw collateral\n    function pie() public view returns (uint) {\n        return gem.balanceOf(this);\n    }\n\n    //------------------------------------------------------------------\n\n    function SaiTub(\n        DSToken  sai_,\n        DSToken  sin_,\n        DSToken  skr_,\n        ERC20    gem_,\n        DSToken  gov_,\n        DSValue  pip_,\n        DSValue  pep_,\n        SaiVox   vox_,\n        address  pit_\n    ) public {\n        gem = gem_;\n        skr = skr_;\n\n        sai = sai_;\n        sin = sin_;\n\n        gov = gov_;\n        pit = pit_;\n\n        pip = pip_;\n        pep = pep_;\n        vox = vox_;\n\n        axe = RAY;\n        mat = RAY;\n        tax = RAY;\n        fee = RAY;\n        gap = WAD;\n\n        _chi = RAY;\n        _rhi = RAY;\n\n        rho = era();\n    }\n\n    function era() public constant returns (uint) {\n        return block.timestamp;\n    }\n\n    //--Risk-parameter-config-------------------------------------------\n\n    function mold(bytes32 param, uint val) public note auth {\n        if      (param == 'cap') cap = val;\n        else if (param == 'mat') { require(val >= RAY); mat = val; }\n        else if (param == 'tax') { require(val >= RAY); drip(); tax = val; }\n        else if (param == 'fee') { require(val >= RAY); drip(); fee = val; }\n        else if (param == 'axe') { require(val >= RAY); axe = val; }\n        else if (param == 'gap') { require(val >= WAD); gap = val; }\n        else return;\n    }\n\n    //--Price-feed-setters----------------------------------------------\n\n    function setPip(DSValue pip_) public note auth {\n        pip = pip_;\n    }\n    function setPep(DSValue pep_) public note auth {\n        pep = pep_;\n    }\n    function setVox(SaiVox vox_) public note auth {\n        vox = vox_;\n    }\n\n    //--Tap-setter------------------------------------------------------\n    function turn(address tap_) public note {\n        require(tap  == 0);\n        require(tap_ != 0);\n        tap = tap_;\n    }\n\n    //--Collateral-wrapper----------------------------------------------\n\n    // Wrapper ratio (gem per skr)\n    function per() public view returns (uint ray) {\n        return skr.totalSupply() == 0 ? RAY : rdiv(pie(), skr.totalSupply());\n    }\n    // Join price (gem per skr)\n    function ask(uint wad) public view returns (uint) {\n        return rmul(wad, wmul(per(), gap));\n    }\n    // Exit price (gem per skr)\n    function bid(uint wad) public view returns (uint) {\n        return rmul(wad, wmul(per(), sub(2 * WAD, gap)));\n    }\n    function join(uint wad) public note {\n        require(!off);\n        require(ask(wad) > 0);\n        require(gem.transferFrom(msg.sender, this, ask(wad)));\n        skr.mint(msg.sender, wad);\n    }\n    function exit(uint wad) public note {\n        require(!off || out);\n        require(gem.transfer(msg.sender, bid(wad)));\n        skr.burn(msg.sender, wad);\n    }\n\n    //--Stability-fee-accumulation--------------------------------------\n\n    // Accumulated Rates\n    function chi() public returns (uint) {\n        drip();\n        return _chi;\n    }\n    function rhi() public returns (uint) {\n        drip();\n        return _rhi;\n    }\n    function drip() public note {\n        if (off) return;\n\n        var rho_ = era();\n        var age = rho_ - rho;\n        if (age == 0) return;    // optimised\n        rho = rho_;\n\n        var inc = RAY;\n\n        if (tax != RAY) {  // optimised\n            var _chi_ = _chi;\n            inc = rpow(tax, age);\n            _chi = rmul(_chi, inc);\n            sai.mint(tap, rmul(sub(_chi, _chi_), rum));\n        }\n\n        // optimised\n        if (fee != RAY) inc = rmul(inc, rpow(fee, age));\n        if (inc != RAY) _rhi = rmul(_rhi, inc);\n    }\n\n\n    //--CDP-risk-indicator----------------------------------------------\n\n    // Abstracted collateral price (ref per skr)\n    function tag() public view returns (uint wad) {\n        return off ? fit : wmul(per(), uint(pip.read()));\n    }\n    // Returns true if cup is well-collateralized\n    function safe(bytes32 cup) public returns (bool) {\n        var pro = rmul(tag(), ink(cup));\n        var con = rmul(vox.par(), tab(cup));\n        var min = rmul(con, mat);\n        return pro >= min;\n    }\n\n\n    //--CDP-operations--------------------------------------------------\n\n    function open() public note returns (bytes32 cup) {\n        require(!off);\n        cupi = add(cupi, 1);\n        cup = bytes32(cupi);\n        cups[cup].lad = msg.sender;\n        LogNewCup(msg.sender, cup);\n    }\n    function give(bytes32 cup, address guy) public note {\n        require(msg.sender == cups[cup].lad);\n        require(guy != 0);\n        cups[cup].lad = guy;\n    }\n\n    function lock(bytes32 cup, uint wad) public note {\n        require(!off);\n        cups[cup].ink = add(cups[cup].ink, wad);\n        skr.pull(msg.sender, wad);\n        require(cups[cup].ink == 0 || cups[cup].ink > 0.005 ether);\n    }\n    function free(bytes32 cup, uint wad) public note {\n        require(msg.sender == cups[cup].lad);\n        cups[cup].ink = sub(cups[cup].ink, wad);\n        skr.push(msg.sender, wad);\n        require(safe(cup));\n        require(cups[cup].ink == 0 || cups[cup].ink > 0.005 ether);\n    }\n\n    function draw(bytes32 cup, uint wad) public note {\n        require(!off);\n        require(msg.sender == cups[cup].lad);\n        require(rdiv(wad, chi()) > 0);\n\n        cups[cup].art = add(cups[cup].art, rdiv(wad, chi()));\n        rum = add(rum, rdiv(wad, chi()));\n\n        cups[cup].ire = add(cups[cup].ire, rdiv(wad, rhi()));\n        sai.mint(cups[cup].lad, wad);\n\n        require(safe(cup));\n        require(sai.totalSupply() <= cap);\n    }\n    function wipe(bytes32 cup, uint wad) public note {\n        require(!off);\n\n        var owe = rmul(wad, rdiv(rap(cup), tab(cup)));\n\n        cups[cup].art = sub(cups[cup].art, rdiv(wad, chi()));\n        rum = sub(rum, rdiv(wad, chi()));\n\n        cups[cup].ire = sub(cups[cup].ire, rdiv(add(wad, owe), rhi()));\n        sai.burn(msg.sender, wad);\n\n        var (val, ok) = pep.peek();\n        if (ok && val != 0) gov.move(msg.sender, pit, wdiv(owe, uint(val)));\n    }\n\n    function shut(bytes32 cup) public note {\n        require(!off);\n        require(msg.sender == cups[cup].lad);\n        if (tab(cup) != 0) wipe(cup, tab(cup));\n        if (ink(cup) != 0) free(cup, ink(cup));\n        delete cups[cup];\n    }\n\n    function bite(bytes32 cup) public note {\n        require(!safe(cup) || off);\n\n        // Take on all of the debt, except unpaid fees\n        var rue = tab(cup);\n        sin.mint(tap, rue);\n        rum = sub(rum, cups[cup].art);\n        cups[cup].art = 0;\n        cups[cup].ire = 0;\n\n        // Amount owed in SKR, including liquidation penalty\n        var owe = rdiv(rmul(rmul(rue, axe), vox.par()), tag());\n\n        if (owe > cups[cup].ink) {\n            owe = cups[cup].ink;\n        }\n\n        skr.push(tap, owe);\n        cups[cup].ink = sub(cups[cup].ink, owe);\n    }\n\n    //------------------------------------------------------------------\n\n    function cage(uint fit_, uint jam) public note auth {\n        require(!off && fit_ != 0);\n        off = true;\n        axe = RAY;\n        gap = WAD;\n        fit = fit_;         // ref per skr\n        require(gem.transfer(tap, jam));\n    }\n    function flow() public note auth {\n        require(off);\n        out = true;\n    }\n}\n\n////// src/tap.sol\n/// tap.sol -- liquidation engine (see also `vow`)\n\n// Copyright (C) 2017  Nikolai Mushegian <[email protected]>\n// Copyright (C) 2017  Daniel Brockman <[email protected]>\n// Copyright (C) 2017  Rain Break <[email protected]>\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.18; */\n\n/* import \"./tub.sol\"; */\n\ncontract SaiTap is DSThing {\n    DSToken  public  sai;\n    DSToken  public  sin;\n    DSToken  public  skr;\n\n    SaiVox   public  vox;\n    SaiTub   public  tub;\n\n    uint256  public  gap;  // Boom-Bust Spread\n    bool     public  off;  // Cage flag\n    uint256  public  fix;  // Cage price\n\n    // Surplus\n    function joy() public view returns (uint) {\n        return sai.balanceOf(this);\n    }\n    // Bad debt\n    function woe() public view returns (uint) {\n        return sin.balanceOf(this);\n    }\n    // Collateral pending liquidation\n    function fog() public view returns (uint) {\n        return skr.balanceOf(this);\n    }\n\n\n    function SaiTap(SaiTub tub_) public {\n        tub = tub_;\n\n        sai = tub.sai();\n        sin = tub.sin();\n        skr = tub.skr();\n\n        vox = tub.vox();\n\n        gap = WAD;\n    }\n\n    function mold(bytes32 param, uint val) public note auth {\n        if (param == 'gap') gap = val;\n    }\n\n    // Cancel debt\n    function heal() public note {\n        if (joy() == 0 || woe() == 0) return;  // optimised\n        var wad = min(joy(), woe());\n        sai.burn(wad);\n        sin.burn(wad);\n    }\n\n    // Feed price (sai per skr)\n    function s2s() public returns (uint) {\n        var tag = tub.tag();    // ref per skr\n        var par = vox.par();    // ref per sai\n        return rdiv(tag, par);  // sai per skr\n    }\n    // Boom price (sai per skr)\n    function bid(uint wad) public returns (uint) {\n        return rmul(wad, wmul(s2s(), sub(2 * WAD, gap)));\n    }\n    // Bust price (sai per skr)\n    function ask(uint wad) public returns (uint) {\n        return rmul(wad, wmul(s2s(), gap));\n    }\n    function flip(uint wad) internal {\n        require(ask(wad) > 0);\n        skr.push(msg.sender, wad);\n        sai.pull(msg.sender, ask(wad));\n        heal();\n    }\n    function flop(uint wad) internal {\n        skr.mint(sub(wad, fog()));\n        flip(wad);\n        require(joy() == 0);  // can't flop into surplus\n    }\n    function flap(uint wad) internal {\n        heal();\n        sai.push(msg.sender, bid(wad));\n        skr.burn(msg.sender, wad);\n    }\n    function bust(uint wad) public note {\n        require(!off);\n        if (wad > fog()) flop(wad);\n        else flip(wad);\n    }\n    function boom(uint wad) public note {\n        require(!off);\n        flap(wad);\n    }\n\n    //------------------------------------------------------------------\n\n    function cage(uint fix_) public note auth {\n        require(!off);\n        off = true;\n        fix = fix_;\n    }\n    function cash(uint wad) public note {\n        require(off);\n        sai.burn(msg.sender, wad);\n        require(tub.gem().transfer(msg.sender, rmul(wad, fix)));\n    }\n    function mock(uint wad) public note {\n        require(off);\n        sai.mint(msg.sender, wad);\n        require(tub.gem().transferFrom(msg.sender, this, rmul(wad, fix)));\n    }\n    function vent() public note {\n        require(off);\n        skr.burn(fog());\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"heal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"skr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"cash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"woe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tub\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"s2s\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"off\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vox\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fog\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"param\",\"type\":\"bytes32\"},{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"mold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fix_\",\"type\":\"uint256\"}],\"name\":\"cage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"bust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"boom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"ask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b6040516020806116b68339810160405280805160018054600160a060020a03191633600160a060020a031690811790915590925090507fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a260068054600160a060020a031916600160a060020a03838116919091179182905516639166cba46000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156100e857600080fd5b6102c65a03f115156100f957600080fd5b505050604051805160028054600160a060020a031916600160a060020a0392831617905560065416905063071bafb56000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561017857600080fd5b6102c65a03f1151561018957600080fd5b505050604051805160038054600160a060020a031916600160a060020a03928316179055600654169050630f8a771e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561020857600080fd5b6102c65a03f1151561021957600080fd5b505050604051805160048054600160a060020a031916600160a060020a039283161790556006541690506367550a356000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561029857600080fd5b6102c65a03f115156102a957600080fd5b505050604051805160058054600160a060020a031916600160a060020a03929092169190911790555050670de0b6b3a76400006007556113c8806102ee6000396000f30060606040526004361061013a5763ffffffff60e060020a6000350416630434fe0b811461013f578063071bafb5146101545780630f8a771e1461018357806313af4035146101965780631406b921146101b557806317dc92f5146101c85780632da8d3e6146101de57806334e70cc2146102035780633de377ec14610216578063454a2ab31461022c578063465b43d01461024257806365d1df24146102555780636626b26d1461026857806367550a351461028f5780636c32c0a6146102a25780637296359a146102b55780637a9e5e4b146102c85780638da5cb5b146102e75780639166cba4146102fa57806392b0d7211461030d578063a2f91af214610326578063a551878e1461033c578063af378ce51461034f578063b443a08514610365578063bf7e214f1461037b578063e47e7e661461038e575b600080fd5b341561014a57600080fd5b6101526103a4565b005b341561015f57600080fd5b6101676104f6565b604051600160a060020a03909116815260200160405180910390f35b341561018e57600080fd5b610167610505565b34156101a157600080fd5b610152600160a060020a0360043516610514565b34156101c057600080fd5b610152610593565b34156101d357600080fd5b610152600435610661565b34156101e957600080fd5b6101f1610823565b60405190815260200160405180910390f35b341561020e57600080fd5b61016761089d565b341561022157600080fd5b6101526004356108ac565b341561023757600080fd5b6101f1600435610a55565b341561024d57600080fd5b6101f1610a8d565b341561026057600080fd5b6101f1610ae8565b341561027357600080fd5b61027b610bca565b604051901515815260200160405180910390f35b341561029a57600080fd5b610167610bd3565b34156102ad57600080fd5b6101f1610be2565b34156102c057600080fd5b6101f1610be8565b34156102d357600080fd5b610152600160a060020a0360043516610c43565b34156102f257600080fd5b610167610cc2565b341561030557600080fd5b610167610cd1565b341561031857600080fd5b610152600435602435610ce0565b341561033157600080fd5b610152600435610d8b565b341561034757600080fd5b6101f1610e26565b341561035a57600080fd5b610152600435610e2c565b341561037057600080fd5b610152600435610eb8565b341561038657600080fd5b610167610f27565b341561039957600080fd5b6101f1600435610f36565b60006004356024358082600160a060020a033316600160e060020a031986351634873660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4610401610a8d565b15806104125750610410610823565b155b1561041c576104f1565b610434610427610a8d565b61042f610823565b610f4f565b600254909350600160a060020a03166342966c688460405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561047f57600080fd5b6102c65a03f1151561049057600080fd5b5050600354600160a060020a031690506342966c688460405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b15156104dc57600080fd5b6102c65a03f115156104ed57600080fd5b5050505b505050565b600354600160a060020a031681565b600454600160a060020a031681565b61052a33600035600160e060020a031916610f68565b151561053557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a460085460ff1615156105fa57600080fd5b600454600160a060020a03166342966c68610613610be8565b60405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561064957600080fd5b6102c65a03f1151561065a57600080fd5b5050505050565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a460085460ff1615156106c857600080fd5b600254600160a060020a0316639dc29fac338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561071e57600080fd5b6102c65a03f1151561072f57600080fd5b5050600654600160a060020a03169050637bd2bea76000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561077b57600080fd5b6102c65a03f1151561078c57600080fd5b50505060405180519050600160a060020a031663a9059cbb336107b18660095461105f565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156107fd57600080fd5b6102c65a03f1151561080e57600080fd5b5050506040518051905015156104f157600080fd5b600354600090600160a060020a03166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561087e57600080fd5b6102c65a03f1151561088f57600080fd5b505050604051805191505090565b600654600160a060020a031681565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a460085460ff16151561091357600080fd5b600254600160a060020a03166340c10f19338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561096957600080fd5b6102c65a03f1151561097a57600080fd5b5050600654600160a060020a03169050637bd2bea76000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156109c657600080fd5b6102c65a03f115156109d757600080fd5b50505060405180519050600160a060020a03166323b872dd33306109fd8760095461105f565b60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156107fd57600080fd5b6000610a8782610a82610a66610ae8565b610a7d670de0b6b3a76400006002026007546110a2565b6110b2565b61105f565b92915050565b600254600090600160a060020a03166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561087e57600080fd5b60065460009081908190600160a060020a03166351f9106682604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b3657600080fd5b6102c65a03f11515610b4757600080fd5b5050506040518051600554909350600160a060020a0316905063495d32cb6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b9c57600080fd5b6102c65a03f11515610bad57600080fd5b505050604051805190509050610bc382826110da565b9250505090565b60085460ff1681565b600554600160a060020a031681565b60075481565b600454600090600160a060020a03166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561087e57600080fd5b610c5933600035600160e060020a031916610f68565b1515610c6457600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600154600160a060020a031681565b600254600160a060020a031681565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4610d4c33600035600160e060020a031916610f68565b1515610d5757600080fd5b7f6761700000000000000000000000000000000000000000000000000000000000841415610d855760078390555b50505050565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4610df733600035600160e060020a031916610f68565b1515610e0257600080fd5b60085460ff1615610e1257600080fd5b50506008805460ff19166001179055600955565b60095481565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a460085460ff1615610e9257600080fd5b610e9a610be8565b831115610eaf57610eaa836110fe565b6104f1565b6104f183611188565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a460085460ff1615610f1e57600080fd5b6104f183611282565b600054600160a060020a031681565b6000610a8782610a82610f47610ae8565b6007546110b2565b600081831115610f5f5781610f61565b825b9392505050565b600030600160a060020a031683600160a060020a03161415610f8c57506001610a87565b600154600160a060020a0384811691161415610faa57506001610a87565b600054600160a060020a03161515610fc457506000610a87565b60008054600160a060020a03169063b7009613908590309086906040516020015260405160e060020a63ffffffff8616028152600160a060020a039384166004820152919092166024820152600160e060020a03199091166044820152606401602060405180830381600087803b151561103d57600080fd5b6102c65a03f1151561104e57600080fd5b505050604051805190509050610a87565b60006b033b2e3c9fd0803ce800000061109161107b8585611364565b60026b033b2e3c9fd0803ce80000005b0461138c565b81151561109a57fe5b049392505050565b80820382811115610a8757600080fd5b6000670de0b6b3a76400006110916110ca8585611364565b6002670de0b6b3a764000061108b565b6000816110916110f6856b033b2e3c9fd0803ce8000000611364565b60028561108b565b600454600160a060020a031663a0712d686111208361111b610be8565b6110a2565b60405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561115657600080fd5b6102c65a03f1151561116757600080fd5b50505061117381611188565b61117b610a8d565b1561118557600080fd5b50565b600061119382610f36565b1161119d57600080fd5b600454600160a060020a031663b753a98c338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156111f357600080fd5b6102c65a03f1151561120457600080fd5b5050600254600160a060020a0316905063f2d5d56b3361122384610f36565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561126657600080fd5b6102c65a03f1151561127757600080fd5b5050506111856103a4565b61128a6103a4565b600254600160a060020a031663b753a98c336112a584610a55565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156112e857600080fd5b6102c65a03f115156112f957600080fd5b5050600454600160a060020a03169050639dc29fac338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561135357600080fd5b6102c65a03f11515610d8557600080fd5b600081158061138157505080820282828281151561137e57fe5b04145b1515610a8757600080fd5b80820182811015610a8757600080fd00a165627a7a723058201d5cef56d558b5c5fdeb560a0045c5bf90fe5020537776c583d9a1ceb09f945c0029000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af3",
  "constructorArguments": "000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af3"
}