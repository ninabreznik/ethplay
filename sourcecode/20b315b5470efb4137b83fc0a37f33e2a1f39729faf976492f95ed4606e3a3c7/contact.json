{
  "address": "0x223c067f8cf28ae173ee5cafea60ca44c335fecb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Azimuth",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-04\n*/\n\n//  the azimuth data store\n//  https://azimuth.network\n\npragma solidity 0.4.24;\n\n////////////////////////////////////////////////////////////////////////////////\n//  Imports\n////////////////////////////////////////////////////////////////////////////////\n\n// OpenZeppelin's Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//  Azimuth\n////////////////////////////////////////////////////////////////////////////////\n\n//  Azimuth: point state data contract\n//\n//    This contract is used for storing all data related to Azimuth points\n//    and their ownership. Consider this contract the Azimuth ledger.\n//\n//    It also contains permissions data, which ties in to ERC721\n//    functionality. Operators of an address are allowed to transfer\n//    ownership of all points owned by their associated address\n//    (ERC721's approveAll()). A transfer proxy is allowed to transfer\n//    ownership of a single point (ERC721's approve()).\n//    Separate from ERC721 are managers, assigned per point. They are\n//    allowed to perform \"low-impact\" operations on the owner's points,\n//    like configuring public keys and making escape requests.\n//\n//    Since data stores are difficult to upgrade, this contract contains\n//    as little actual business logic as possible. Instead, the data stored\n//    herein can only be modified by this contract's owner, which can be\n//    changed and is thus upgradable/replaceable.\n//\n//    This contract will be owned by the Ecliptic contract.\n//\ncontract Azimuth is Ownable\n{\n//\n//  Events\n//\n\n  //  OwnerChanged: :point is now owned by :owner\n  //\n  event OwnerChanged(uint32 indexed point, address indexed owner);\n\n  //  Activated: :point is now active\n  //\n  event Activated(uint32 indexed point);\n\n  //  Spawned: :prefix has spawned :child\n  //\n  event Spawned(uint32 indexed prefix, uint32 indexed child);\n\n  //  EscapeRequested: :point has requested a new :sponsor\n  //\n  event EscapeRequested(uint32 indexed point, uint32 indexed sponsor);\n\n  //  EscapeCanceled: :point's :sponsor request was canceled or rejected\n  //\n  event EscapeCanceled(uint32 indexed point, uint32 indexed sponsor);\n\n  //  EscapeAccepted: :point confirmed with a new :sponsor\n  //\n  event EscapeAccepted(uint32 indexed point, uint32 indexed sponsor);\n\n  //  LostSponsor: :point's :sponsor is now refusing it service\n  //\n  event LostSponsor(uint32 indexed point, uint32 indexed sponsor);\n\n  //  ChangedKeys: :point has new network public keys\n  //\n  event ChangedKeys( uint32 indexed point,\n                     bytes32 encryptionKey,\n                     bytes32 authenticationKey,\n                     uint32 cryptoSuiteVersion,\n                     uint32 keyRevisionNumber );\n\n  //  BrokeContinuity: :point has a new continuity number, :number\n  //\n  event BrokeContinuity(uint32 indexed point, uint32 number);\n\n  //  ChangedSpawnProxy: :spawnProxy can now spawn using :point\n  //\n  event ChangedSpawnProxy(uint32 indexed point, address indexed spawnProxy);\n\n  //  ChangedTransferProxy: :transferProxy can now transfer ownership of :point\n  //\n  event ChangedTransferProxy( uint32 indexed point,\n                              address indexed transferProxy );\n\n  //  ChangedManagementProxy: :managementProxy can now manage :point\n  //\n  event ChangedManagementProxy( uint32 indexed point,\n                                address indexed managementProxy );\n\n  //  ChangedVotingProxy: :votingProxy can now vote using :point\n  //\n  event ChangedVotingProxy(uint32 indexed point, address indexed votingProxy);\n\n  //  ChangedDns: dnsDomains have been updated\n  //\n  event ChangedDns(string primary, string secondary, string tertiary);\n\n//\n//  Structures\n//\n\n  //  Size: kinds of points registered on-chain\n  //\n  //    NOTE: the order matters, because of Solidity enum numbering\n  //\n  enum Size\n  {\n    Galaxy, // = 0\n    Star,   // = 1\n    Planet  // = 2\n  }\n\n  //  Point: state of a point\n  //\n  //    While the ordering of the struct members is semantically chaotic,\n  //    they are ordered to tightly pack them into Ethereum's 32-byte storage\n  //    slots, which reduces gas costs for some function calls.\n  //    The comment ticks indicate assumed slot boundaries.\n  //\n  struct Point\n  {\n    //  encryptionKey: (curve25519) encryption public key, or 0 for none\n    //\n    bytes32 encryptionKey;\n  //\n    //  authenticationKey: (ed25519) authentication public key, or 0 for none\n    //\n    bytes32 authenticationKey;\n  //\n    //  spawned: for stars and galaxies, all :active children\n    //\n    uint32[] spawned;\n  //\n    //  hasSponsor: true if the sponsor still supports the point\n    //\n    bool hasSponsor;\n\n    //  active: whether point can be linked\n    //\n    //    false: point belongs to prefix, cannot be configured or linked\n    //    true: point no longer belongs to prefix, can be configured and linked\n    //\n    bool active;\n\n    //  escapeRequested: true if the point has requested to change sponsors\n    //\n    bool escapeRequested;\n\n    //  sponsor: the point that supports this one on the network, or,\n    //           if :hasSponsor is false, the last point that supported it.\n    //           (by default, the point's half-width prefix)\n    //\n    uint32 sponsor;\n\n    //  escapeRequestedTo: if :escapeRequested is true, new sponsor requested\n    //\n    uint32 escapeRequestedTo;\n\n    //  cryptoSuiteVersion: version of the crypto suite used for the pubkeys\n    //\n    uint32 cryptoSuiteVersion;\n\n    //  keyRevisionNumber: incremented every time the public keys change\n    //\n    uint32 keyRevisionNumber;\n\n    //  continuityNumber: incremented to indicate network-side state loss\n    //\n    uint32 continuityNumber;\n  }\n\n  //  Deed: permissions for a point\n  //\n  struct Deed\n  {\n    //  owner: address that owns this point\n    //\n    address owner;\n\n    //  managementProxy: 0, or another address with the right to perform\n    //                   low-impact, managerial operations on this point\n    //\n    address managementProxy;\n\n    //  spawnProxy: 0, or another address with the right to spawn children\n    //              of this point\n    //\n    address spawnProxy;\n\n    //  votingProxy: 0, or another address with the right to vote as this point\n    //\n    address votingProxy;\n\n    //  transferProxy: 0, or another address with the right to transfer\n    //                 ownership of this point\n    //\n    address transferProxy;\n  }\n\n//\n//  General state\n//\n\n  //  points: per point, general network-relevant point state\n  //\n  mapping(uint32 => Point) public points;\n\n  //  rights: per point, on-chain ownership and permissions\n  //\n  mapping(uint32 => Deed) public rights;\n\n  //  operators: per owner, per address, has the right to transfer ownership\n  //             of all the owner's points (ERC721)\n  //\n  mapping(address => mapping(address => bool)) public operators;\n\n  //  dnsDomains: base domains for contacting galaxies\n  //\n  //    dnsDomains[0] is primary, the others are used as fallbacks\n  //\n  string[3] public dnsDomains;\n\n//\n//  Lookups\n//\n\n  //  sponsoring: per point, the points they are sponsoring\n  //\n  mapping(uint32 => uint32[]) public sponsoring;\n\n  //  sponsoringIndexes: per point, per point, (index + 1) in\n  //                     the sponsoring array\n  //\n  mapping(uint32 => mapping(uint32 => uint256)) public sponsoringIndexes;\n\n  //  escapeRequests: per point, the points they have open escape requests from\n  //\n  mapping(uint32 => uint32[]) public escapeRequests;\n\n  //  escapeRequestsIndexes: per point, per point, (index + 1) in\n  //                         the escapeRequests array\n  //\n  mapping(uint32 => mapping(uint32 => uint256)) public escapeRequestsIndexes;\n\n  //  pointsOwnedBy: per address, the points they own\n  //\n  mapping(address => uint32[]) public pointsOwnedBy;\n\n  //  pointOwnerIndexes: per owner, per point, (index + 1) in\n  //                     the pointsOwnedBy array\n  //\n  //    We delete owners by moving the last entry in the array to the\n  //    newly emptied slot, which is (n - 1) where n is the value of\n  //    pointOwnerIndexes[owner][point].\n  //\n  mapping(address => mapping(uint32 => uint256)) public pointOwnerIndexes;\n\n  //  managerFor: per address, the points they are the management proxy for\n  //\n  mapping(address => uint32[]) public managerFor;\n\n  //  managerForIndexes: per address, per point, (index + 1) in\n  //                     the managerFor array\n  //\n  mapping(address => mapping(uint32 => uint256)) public managerForIndexes;\n\n  //  spawningFor: per address, the points they can spawn with\n  //\n  mapping(address => uint32[]) public spawningFor;\n\n  //  spawningForIndexes: per address, per point, (index + 1) in\n  //                      the spawningFor array\n  //\n  mapping(address => mapping(uint32 => uint256)) public spawningForIndexes;\n\n  //  votingFor: per address, the points they can vote with\n  //\n  mapping(address => uint32[]) public votingFor;\n\n  //  votingForIndexes: per address, per point, (index + 1) in\n  //                    the votingFor array\n  //\n  mapping(address => mapping(uint32 => uint256)) public votingForIndexes;\n\n  //  transferringFor: per address, the points they can transfer\n  //\n  mapping(address => uint32[]) public transferringFor;\n\n  //  transferringForIndexes: per address, per point, (index + 1) in\n  //                          the transferringFor array\n  //\n  mapping(address => mapping(uint32 => uint256)) public transferringForIndexes;\n\n//\n//  Logic\n//\n\n  //  constructor(): configure default dns domains\n  //\n  constructor()\n    public\n  {\n    setDnsDomains(\"example.com\", \"example.com\", \"example.com\");\n  }\n\n  //  setDnsDomains(): set the base domains used for contacting galaxies\n  //\n  //    Note: since a string is really just a byte[], and Solidity can't\n  //    work with two-dimensional arrays yet, we pass in the three\n  //    domains as individual strings.\n  //\n  function setDnsDomains(string _primary, string _secondary, string _tertiary)\n    onlyOwner\n    public\n  {\n    dnsDomains[0] = _primary;\n    dnsDomains[1] = _secondary;\n    dnsDomains[2] = _tertiary;\n    emit ChangedDns(_primary, _secondary, _tertiary);\n  }\n\n  //\n  //  Point reading\n  //\n\n    //  isActive(): return true if _point is active\n    //\n    function isActive(uint32 _point)\n      view\n      external\n      returns (bool equals)\n    {\n      return points[_point].active;\n    }\n\n    //  getKeys(): returns the public keys and their details, as currently\n    //             registered for _point\n    //\n    function getKeys(uint32 _point)\n      view\n      external\n      returns (bytes32 crypt, bytes32 auth, uint32 suite, uint32 revision)\n    {\n      Point storage point = points[_point];\n      return (point.encryptionKey,\n              point.authenticationKey,\n              point.cryptoSuiteVersion,\n              point.keyRevisionNumber);\n    }\n\n    //  getKeyRevisionNumber(): gets the revision number of _point's current\n    //                          public keys\n    //\n    function getKeyRevisionNumber(uint32 _point)\n      view\n      external\n      returns (uint32 revision)\n    {\n      return points[_point].keyRevisionNumber;\n    }\n\n    //  hasBeenLinked(): returns true if the point has ever been assigned keys\n    //\n    function hasBeenLinked(uint32 _point)\n      view\n      external\n      returns (bool result)\n    {\n      return ( points[_point].keyRevisionNumber > 0 );\n    }\n\n    //  isLive(): returns true if _point currently has keys properly configured\n    //\n    function isLive(uint32 _point)\n      view\n      external\n      returns (bool result)\n    {\n      Point storage point = points[_point];\n      return ( point.encryptionKey != 0 &&\n               point.authenticationKey != 0 &&\n               point.cryptoSuiteVersion != 0 );\n    }\n\n    //  getContinuityNumber(): returns _point's current continuity number\n    //\n    function getContinuityNumber(uint32 _point)\n      view\n      external\n      returns (uint32 continuityNumber)\n    {\n      return points[_point].continuityNumber;\n    }\n\n    //  getSpawnCount(): return the number of children spawned by _point\n    //\n    function getSpawnCount(uint32 _point)\n      view\n      external\n      returns (uint32 spawnCount)\n    {\n      uint256 len = points[_point].spawned.length;\n      assert(len < 2**32);\n      return uint32(len);\n    }\n\n    //  getSpawned(): return array of points created under _point\n    //\n    //    Note: only useful for clients, as Solidity does not currently\n    //    support returning dynamic arrays.\n    //\n    function getSpawned(uint32 _point)\n      view\n      external\n      returns (uint32[] spawned)\n    {\n      return points[_point].spawned;\n    }\n\n    //  hasSponsor(): returns true if _point's sponsor is providing it service\n    //\n    function hasSponsor(uint32 _point)\n      view\n      external\n      returns (bool has)\n    {\n      return points[_point].hasSponsor;\n    }\n\n    //  getSponsor(): returns _point's current (or most recent) sponsor\n    //\n    function getSponsor(uint32 _point)\n      view\n      external\n      returns (uint32 sponsor)\n    {\n      return points[_point].sponsor;\n    }\n\n    //  isSponsor(): returns true if _sponsor is currently providing service\n    //               to _point\n    //\n    function isSponsor(uint32 _point, uint32 _sponsor)\n      view\n      external\n      returns (bool result)\n    {\n      Point storage point = points[_point];\n      return ( point.hasSponsor &&\n               (point.sponsor == _sponsor) );\n    }\n\n    //  getSponsoringCount(): returns the number of points _sponsor is\n    //                        providing service to\n    //\n    function getSponsoringCount(uint32 _sponsor)\n      view\n      external\n      returns (uint256 count)\n    {\n      return sponsoring[_sponsor].length;\n    }\n\n    //  getSponsoring(): returns a list of points _sponsor is providing\n    //                   service to\n    //\n    //    Note: only useful for clients, as Solidity does not currently\n    //    support returning dynamic arrays.\n    //\n    function getSponsoring(uint32 _sponsor)\n      view\n      external\n      returns (uint32[] sponsees)\n    {\n      return sponsoring[_sponsor];\n    }\n\n    //  escaping\n\n    //  isEscaping(): returns true if _point has an outstanding escape request\n    //\n    function isEscaping(uint32 _point)\n      view\n      external\n      returns (bool escaping)\n    {\n      return points[_point].escapeRequested;\n    }\n\n    //  getEscapeRequest(): returns _point's current escape request\n    //\n    //    the returned escape request is only valid as long as isEscaping()\n    //    returns true\n    //\n    function getEscapeRequest(uint32 _point)\n      view\n      external\n      returns (uint32 escape)\n    {\n      return points[_point].escapeRequestedTo;\n    }\n\n    //  isRequestingEscapeTo(): returns true if _point has an outstanding\n    //                          escape request targetting _sponsor\n    //\n    function isRequestingEscapeTo(uint32 _point, uint32 _sponsor)\n      view\n      public\n      returns (bool equals)\n    {\n      Point storage point = points[_point];\n      return (point.escapeRequested && (point.escapeRequestedTo == _sponsor));\n    }\n\n    //  getEscapeRequestsCount(): returns the number of points _sponsor\n    //                            is providing service to\n    //\n    function getEscapeRequestsCount(uint32 _sponsor)\n      view\n      external\n      returns (uint256 count)\n    {\n      return escapeRequests[_sponsor].length;\n    }\n\n    //  getEscapeRequests(): get the points _sponsor has received escape\n    //                       requests from\n    //\n    //    Note: only useful for clients, as Solidity does not currently\n    //    support returning dynamic arrays.\n    //\n    function getEscapeRequests(uint32 _sponsor)\n      view\n      external\n      returns (uint32[] requests)\n    {\n      return escapeRequests[_sponsor];\n    }\n\n  //\n  //  Point writing\n  //\n\n    //  activatePoint(): activate a point, register it as spawned by its prefix\n    //\n    function activatePoint(uint32 _point)\n      onlyOwner\n      external\n    {\n      //  make a point active, setting its sponsor to its prefix\n      //\n      Point storage point = points[_point];\n      require(!point.active);\n      point.active = true;\n      registerSponsor(_point, true, getPrefix(_point));\n      emit Activated(_point);\n    }\n\n    //  setKeys(): set network public keys of _point to _encryptionKey and\n    //            _authenticationKey, with the specified _cryptoSuiteVersion\n    //\n    function setKeys(uint32 _point,\n                     bytes32 _encryptionKey,\n                     bytes32 _authenticationKey,\n                     uint32 _cryptoSuiteVersion)\n      onlyOwner\n      external\n    {\n      Point storage point = points[_point];\n      if ( point.encryptionKey == _encryptionKey &&\n           point.authenticationKey == _authenticationKey &&\n           point.cryptoSuiteVersion == _cryptoSuiteVersion )\n      {\n        return;\n      }\n\n      point.encryptionKey = _encryptionKey;\n      point.authenticationKey = _authenticationKey;\n      point.cryptoSuiteVersion = _cryptoSuiteVersion;\n      point.keyRevisionNumber++;\n\n      emit ChangedKeys(_point,\n                       _encryptionKey,\n                       _authenticationKey,\n                       _cryptoSuiteVersion,\n                       point.keyRevisionNumber);\n    }\n\n    //  incrementContinuityNumber(): break continuity for _point\n    //\n    function incrementContinuityNumber(uint32 _point)\n      onlyOwner\n      external\n    {\n      Point storage point = points[_point];\n      point.continuityNumber++;\n      emit BrokeContinuity(_point, point.continuityNumber);\n    }\n\n    //  registerSpawn(): add a point to its prefix's list of spawned points\n    //\n    function registerSpawned(uint32 _point)\n      onlyOwner\n      external\n    {\n      //  if a point is its own prefix (a galaxy) then don't register it\n      //\n      uint32 prefix = getPrefix(_point);\n      if (prefix == _point)\n      {\n        return;\n      }\n\n      //  register a new spawned point for the prefix\n      //\n      points[prefix].spawned.push(_point);\n      emit Spawned(prefix, _point);\n    }\n\n    //  loseSponsor(): indicates that _point's sponsor is no longer providing\n    //                 it service\n    //\n    function loseSponsor(uint32 _point)\n      onlyOwner\n      external\n    {\n      Point storage point = points[_point];\n      if (!point.hasSponsor)\n      {\n        return;\n      }\n      registerSponsor(_point, false, point.sponsor);\n      emit LostSponsor(_point, point.sponsor);\n    }\n\n    //  setEscapeRequest(): for _point, start an escape request to _sponsor\n    //\n    function setEscapeRequest(uint32 _point, uint32 _sponsor)\n      onlyOwner\n      external\n    {\n      if (isRequestingEscapeTo(_point, _sponsor))\n      {\n        return;\n      }\n      registerEscapeRequest(_point, true, _sponsor);\n      emit EscapeRequested(_point, _sponsor);\n    }\n\n    //  cancelEscape(): for _point, stop the current escape request, if any\n    //\n    function cancelEscape(uint32 _point)\n      onlyOwner\n      external\n    {\n      Point storage point = points[_point];\n      if (!point.escapeRequested)\n      {\n        return;\n      }\n      uint32 request = point.escapeRequestedTo;\n      registerEscapeRequest(_point, false, 0);\n      emit EscapeCanceled(_point, request);\n    }\n\n    //  doEscape(): perform the requested escape\n    //\n    function doEscape(uint32 _point)\n      onlyOwner\n      external\n    {\n      Point storage point = points[_point];\n      require(point.escapeRequested);\n      registerSponsor(_point, true, point.escapeRequestedTo);\n      registerEscapeRequest(_point, false, 0);\n      emit EscapeAccepted(_point, point.sponsor);\n    }\n\n  //\n  //  Point utils\n  //\n\n    //  getPrefix(): compute prefix (\"parent\") of _point\n    //\n    function getPrefix(uint32 _point)\n      pure\n      public\n      returns (uint16 prefix)\n    {\n      if (_point < 0x10000)\n      {\n        return uint16(_point % 0x100);\n      }\n      return uint16(_point % 0x10000);\n    }\n\n    //  getPointSize(): return the size of _point\n    //\n    function getPointSize(uint32 _point)\n      external\n      pure\n      returns (Size _size)\n    {\n      if (_point < 0x100) return Size.Galaxy;\n      if (_point < 0x10000) return Size.Star;\n      return Size.Planet;\n    }\n\n    //  internal use\n\n    //  registerSponsor(): set the sponsorship state of _point and update the\n    //                     reverse lookup for sponsors\n    //\n    function registerSponsor(uint32 _point, bool _hasSponsor, uint32 _sponsor)\n      internal\n    {\n      Point storage point = points[_point];\n      bool had = point.hasSponsor;\n      uint32 prev = point.sponsor;\n\n      //  if we didn't have a sponsor, and won't get one,\n      //  or if we get the sponsor we already have,\n      //  nothing will change, so jump out early.\n      //\n      if ( (!had && !_hasSponsor) ||\n           (had && _hasSponsor && prev == _sponsor) )\n      {\n        return;\n      }\n\n      //  if the point used to have a different sponsor, do some gymnastics\n      //  to keep the reverse lookup gapless.  delete the point from the old\n      //  sponsor's list, then fill that gap with the list tail.\n      //\n      if (had)\n      {\n        //  i: current index in previous sponsor's list of sponsored points\n        //\n        uint256 i = sponsoringIndexes[prev][_point];\n\n        //  we store index + 1, because 0 is the solidity default value\n        //\n        assert(i > 0);\n        i--;\n\n        //  copy the last item in the list into the now-unused slot,\n        //  making sure to update its :sponsoringIndexes reference\n        //\n        uint32[] storage prevSponsoring = sponsoring[prev];\n        uint256 last = prevSponsoring.length - 1;\n        uint32 moved = prevSponsoring[last];\n        prevSponsoring[i] = moved;\n        sponsoringIndexes[prev][moved] = i + 1;\n\n        //  delete the last item\n        //\n        delete(prevSponsoring[last]);\n        prevSponsoring.length = last;\n        sponsoringIndexes[prev][_point] = 0;\n      }\n\n      if (_hasSponsor)\n      {\n        uint32[] storage newSponsoring = sponsoring[_sponsor];\n        newSponsoring.push(_point);\n        sponsoringIndexes[_sponsor][_point] = newSponsoring.length;\n      }\n\n      point.sponsor = _sponsor;\n      point.hasSponsor = _hasSponsor;\n    }\n\n    //  registerEscapeRequest(): set the escape state of _point and update the\n    //                           reverse lookup for sponsors\n    //\n    function registerEscapeRequest( uint32 _point,\n                                    bool _isEscaping, uint32 _sponsor )\n      internal\n    {\n      Point storage point = points[_point];\n      bool was = point.escapeRequested;\n      uint32 prev = point.escapeRequestedTo;\n\n      //  if we weren't escaping, and won't be,\n      //  or if we were escaping, and the new target is the same,\n      //  nothing will change, so jump out early.\n      //\n      if ( (!was && !_isEscaping) ||\n           (was && _isEscaping && prev == _sponsor) )\n      {\n        return;\n      }\n\n      //  if the point used to have a different request, do some gymnastics\n      //  to keep the reverse lookup gapless.  delete the point from the old\n      //  sponsor's list, then fill that gap with the list tail.\n      //\n      if (was)\n      {\n        //  i: current index in previous sponsor's list of sponsored points\n        //\n        uint256 i = escapeRequestsIndexes[prev][_point];\n\n        //  we store index + 1, because 0 is the solidity default value\n        //\n        assert(i > 0);\n        i--;\n\n        //  copy the last item in the list into the now-unused slot,\n        //  making sure to update its :escapeRequestsIndexes reference\n        //\n        uint32[] storage prevRequests = escapeRequests[prev];\n        uint256 last = prevRequests.length - 1;\n        uint32 moved = prevRequests[last];\n        prevRequests[i] = moved;\n        escapeRequestsIndexes[prev][moved] = i + 1;\n\n        //  delete the last item\n        //\n        delete(prevRequests[last]);\n        prevRequests.length = last;\n        escapeRequestsIndexes[prev][_point] = 0;\n      }\n\n      if (_isEscaping)\n      {\n        uint32[] storage newRequests = escapeRequests[_sponsor];\n        newRequests.push(_point);\n        escapeRequestsIndexes[_sponsor][_point] = newRequests.length;\n      }\n\n      point.escapeRequestedTo = _sponsor;\n      point.escapeRequested = _isEscaping;\n    }\n\n  //\n  //  Deed reading\n  //\n\n    //  owner\n\n    //  getOwner(): return owner of _point\n    //\n    function getOwner(uint32 _point)\n      view\n      external\n      returns (address owner)\n    {\n      return rights[_point].owner;\n    }\n\n    //  isOwner(): true if _point is owned by _address\n    //\n    function isOwner(uint32 _point, address _address)\n      view\n      external\n      returns (bool result)\n    {\n      return (rights[_point].owner == _address);\n    }\n\n    //  getOwnedPointCount(): return length of array of points that _whose owns\n    //\n    function getOwnedPointCount(address _whose)\n      view\n      external\n      returns (uint256 count)\n    {\n      return pointsOwnedBy[_whose].length;\n    }\n\n    //  getOwnedPoints(): return array of points that _whose owns\n    //\n    //    Note: only useful for clients, as Solidity does not currently\n    //    support returning dynamic arrays.\n    //\n    function getOwnedPoints(address _whose)\n      view\n      external\n      returns (uint32[] ownedPoints)\n    {\n      return pointsOwnedBy[_whose];\n    }\n\n    //  getOwnedPointAtIndex(): get point at _index from array of points that\n    //                         _whose owns\n    //\n    function getOwnedPointAtIndex(address _whose, uint256 _index)\n      view\n      external\n      returns (uint32 point)\n    {\n      uint32[] storage owned = pointsOwnedBy[_whose];\n      require(_index < owned.length);\n      return owned[_index];\n    }\n\n    //  management proxy\n\n    //  getManagementProxy(): returns _point's current management proxy\n    //\n    function getManagementProxy(uint32 _point)\n      view\n      external\n      returns (address manager)\n    {\n      return rights[_point].managementProxy;\n    }\n\n    //  isManagementProxy(): returns true if _proxy is _point's management proxy\n    //\n    function isManagementProxy(uint32 _point, address _proxy)\n      view\n      external\n      returns (bool result)\n    {\n      return (rights[_point].managementProxy == _proxy);\n    }\n\n    //  canManage(): true if _who is the owner or manager of _point\n    //\n    function canManage(uint32 _point, address _who)\n      view\n      external\n      returns (bool result)\n    {\n      Deed storage deed = rights[_point];\n      return ( (0x0 != _who) &&\n               ( (_who == deed.owner) ||\n                 (_who == deed.managementProxy) ) );\n    }\n\n    //  getManagerForCount(): returns the amount of points _proxy can manage\n    //\n    function getManagerForCount(address _proxy)\n      view\n      external\n      returns (uint256 count)\n    {\n      return managerFor[_proxy].length;\n    }\n\n    //  getManagerFor(): returns the points _proxy can manage\n    //\n    //    Note: only useful for clients, as Solidity does not currently\n    //    support returning dynamic arrays.\n    //\n    function getManagerFor(address _proxy)\n      view\n      external\n      returns (uint32[] mfor)\n    {\n      return managerFor[_proxy];\n    }\n\n    //  spawn proxy\n\n    //  getSpawnProxy(): returns _point's current spawn proxy\n    //\n    function getSpawnProxy(uint32 _point)\n      view\n      external\n      returns (address spawnProxy)\n    {\n      return rights[_point].spawnProxy;\n    }\n\n    //  isSpawnProxy(): returns true if _proxy is _point's spawn proxy\n    //\n    function isSpawnProxy(uint32 _point, address _proxy)\n      view\n      external\n      returns (bool result)\n    {\n      return (rights[_point].spawnProxy == _proxy);\n    }\n\n    //  canSpawnAs(): true if _who is the owner or spawn proxy of _point\n    //\n    function canSpawnAs(uint32 _point, address _who)\n      view\n      external\n      returns (bool result)\n    {\n      Deed storage deed = rights[_point];\n      return ( (0x0 != _who) &&\n               ( (_who == deed.owner) ||\n                 (_who == deed.spawnProxy) ) );\n    }\n\n    //  getSpawningForCount(): returns the amount of points _proxy\n    //                         can spawn with\n    //\n    function getSpawningForCount(address _proxy)\n      view\n      external\n      returns (uint256 count)\n    {\n      return spawningFor[_proxy].length;\n    }\n\n    //  getSpawningFor(): get the points _proxy can spawn with\n    //\n    //    Note: only useful for clients, as Solidity does not currently\n    //    support returning dynamic arrays.\n    //\n    function getSpawningFor(address _proxy)\n      view\n      external\n      returns (uint32[] sfor)\n    {\n      return spawningFor[_proxy];\n    }\n\n    //  voting proxy\n\n    //  getVotingProxy(): returns _point's current voting proxy\n    //\n    function getVotingProxy(uint32 _point)\n      view\n      external\n      returns (address voter)\n    {\n      return rights[_point].votingProxy;\n    }\n\n    //  isVotingProxy(): returns true if _proxy is _point's voting proxy\n    //\n    function isVotingProxy(uint32 _point, address _proxy)\n      view\n      external\n      returns (bool result)\n    {\n      return (rights[_point].votingProxy == _proxy);\n    }\n\n    //  canVoteAs(): true if _who is the owner of _point,\n    //               or the voting proxy of _point's owner\n    //\n    function canVoteAs(uint32 _point, address _who)\n      view\n      external\n      returns (bool result)\n    {\n      Deed storage deed = rights[_point];\n      return ( (0x0 != _who) &&\n               ( (_who == deed.owner) ||\n                 (_who == deed.votingProxy) ) );\n    }\n\n    //  getVotingForCount(): returns the amount of points _proxy can vote as\n    //\n    function getVotingForCount(address _proxy)\n      view\n      external\n      returns (uint256 count)\n    {\n      return votingFor[_proxy].length;\n    }\n\n    //  getVotingFor(): returns the points _proxy can vote as\n    //\n    //    Note: only useful for clients, as Solidity does not currently\n    //    support returning dynamic arrays.\n    //\n    function getVotingFor(address _proxy)\n      view\n      external\n      returns (uint32[] vfor)\n    {\n      return votingFor[_proxy];\n    }\n\n    //  transfer proxy\n\n    //  getTransferProxy(): returns _point's current transfer proxy\n    //\n    function getTransferProxy(uint32 _point)\n      view\n      external\n      returns (address transferProxy)\n    {\n      return rights[_point].transferProxy;\n    }\n\n    //  isTransferProxy(): returns true if _proxy is _point's transfer proxy\n    //\n    function isTransferProxy(uint32 _point, address _proxy)\n      view\n      external\n      returns (bool result)\n    {\n      return (rights[_point].transferProxy == _proxy);\n    }\n\n    //  canTransfer(): true if _who is the owner or transfer proxy of _point,\n    //                 or is an operator for _point's current owner\n    //\n    function canTransfer(uint32 _point, address _who)\n      view\n      external\n      returns (bool result)\n    {\n      Deed storage deed = rights[_point];\n      return ( (0x0 != _who) &&\n               ( (_who == deed.owner) ||\n                 (_who == deed.transferProxy) ||\n                 operators[deed.owner][_who] ) );\n    }\n\n    //  getTransferringForCount(): returns the amount of points _proxy\n    //                             can transfer\n    //\n    function getTransferringForCount(address _proxy)\n      view\n      external\n      returns (uint256 count)\n    {\n      return transferringFor[_proxy].length;\n    }\n\n    //  getTransferringFor(): get the points _proxy can transfer\n    //\n    //    Note: only useful for clients, as Solidity does not currently\n    //    support returning dynamic arrays.\n    //\n    function getTransferringFor(address _proxy)\n      view\n      external\n      returns (uint32[] tfor)\n    {\n      return transferringFor[_proxy];\n    }\n\n    //  isOperator(): returns true if _operator is allowed to transfer\n    //                ownership of _owner's points\n    //\n    function isOperator(address _owner, address _operator)\n      view\n      external\n      returns (bool result)\n    {\n      return operators[_owner][_operator];\n    }\n\n  //\n  //  Deed writing\n  //\n\n    //  setOwner(): set owner of _point to _owner\n    //\n    //    Note: setOwner() only implements the minimal data storage\n    //    logic for a transfer; the full transfer is implemented in\n    //    Ecliptic.\n    //\n    //    Note: _owner must not be the zero address.\n    //\n    function setOwner(uint32 _point, address _owner)\n      onlyOwner\n      external\n    {\n      //  prevent burning of points by making zero the owner\n      //\n      require(0x0 != _owner);\n\n      //  prev: previous owner, if any\n      //\n      address prev = rights[_point].owner;\n\n      if (prev == _owner)\n      {\n        return;\n      }\n\n      //  if the point used to have a different owner, do some gymnastics to\n      //  keep the list of owned points gapless.  delete this point from the\n      //  list, then fill that gap with the list tail.\n      //\n      if (0x0 != prev)\n      {\n        //  i: current index in previous owner's list of owned points\n        //\n        uint256 i = pointOwnerIndexes[prev][_point];\n\n        //  we store index + 1, because 0 is the solidity default value\n        //\n        assert(i > 0);\n        i--;\n\n        //  copy the last item in the list into the now-unused slot,\n        //  making sure to update its :pointOwnerIndexes reference\n        //\n        uint32[] storage owner = pointsOwnedBy[prev];\n        uint256 last = owner.length - 1;\n        uint32 moved = owner[last];\n        owner[i] = moved;\n        pointOwnerIndexes[prev][moved] = i + 1;\n\n        //  delete the last item\n        //\n        delete(owner[last]);\n        owner.length = last;\n        pointOwnerIndexes[prev][_point] = 0;\n      }\n\n      //  update the owner list and the owner's index list\n      //\n      rights[_point].owner = _owner;\n      pointsOwnedBy[_owner].push(_point);\n      pointOwnerIndexes[_owner][_point] = pointsOwnedBy[_owner].length;\n      emit OwnerChanged(_point, _owner);\n    }\n\n    //  setManagementProxy(): makes _proxy _point's management proxy\n    //\n    function setManagementProxy(uint32 _point, address _proxy)\n      onlyOwner\n      external\n    {\n      Deed storage deed = rights[_point];\n      address prev = deed.managementProxy;\n      if (prev == _proxy)\n      {\n        return;\n      }\n\n      //  if the point used to have a different manager, do some gymnastics\n      //  to keep the reverse lookup gapless.  delete the point from the\n      //  old manager's list, then fill that gap with the list tail.\n      //\n      if (0x0 != prev)\n      {\n        //  i: current index in previous manager's list of managed points\n        //\n        uint256 i = managerForIndexes[prev][_point];\n\n        //  we store index + 1, because 0 is the solidity default value\n        //\n        assert(i > 0);\n        i--;\n\n        //  copy the last item in the list into the now-unused slot,\n        //  making sure to update its :managerForIndexes reference\n        //\n        uint32[] storage prevMfor = managerFor[prev];\n        uint256 last = prevMfor.length - 1;\n        uint32 moved = prevMfor[last];\n        prevMfor[i] = moved;\n        managerForIndexes[prev][moved] = i + 1;\n\n        //  delete the last item\n        //\n        delete(prevMfor[last]);\n        prevMfor.length = last;\n        managerForIndexes[prev][_point] = 0;\n      }\n\n      if (0x0 != _proxy)\n      {\n        uint32[] storage mfor = managerFor[_proxy];\n        mfor.push(_point);\n        managerForIndexes[_proxy][_point] = mfor.length;\n      }\n\n      deed.managementProxy = _proxy;\n      emit ChangedManagementProxy(_point, _proxy);\n    }\n\n    //  setSpawnProxy(): makes _proxy _point's spawn proxy\n    //\n    function setSpawnProxy(uint32 _point, address _proxy)\n      onlyOwner\n      external\n    {\n      Deed storage deed = rights[_point];\n      address prev = deed.spawnProxy;\n      if (prev == _proxy)\n      {\n        return;\n      }\n\n      //  if the point used to have a different spawn proxy, do some\n      //  gymnastics to keep the reverse lookup gapless.  delete the point\n      //  from the old proxy's list, then fill that gap with the list tail.\n      //\n      if (0x0 != prev)\n      {\n        //  i: current index in previous proxy's list of spawning points\n        //\n        uint256 i = spawningForIndexes[prev][_point];\n\n        //  we store index + 1, because 0 is the solidity default value\n        //\n        assert(i > 0);\n        i--;\n\n        //  copy the last item in the list into the now-unused slot,\n        //  making sure to update its :spawningForIndexes reference\n        //\n        uint32[] storage prevSfor = spawningFor[prev];\n        uint256 last = prevSfor.length - 1;\n        uint32 moved = prevSfor[last];\n        prevSfor[i] = moved;\n        spawningForIndexes[prev][moved] = i + 1;\n\n        //  delete the last item\n        //\n        delete(prevSfor[last]);\n        prevSfor.length = last;\n        spawningForIndexes[prev][_point] = 0;\n      }\n\n      if (0x0 != _proxy)\n      {\n        uint32[] storage sfor = spawningFor[_proxy];\n        sfor.push(_point);\n        spawningForIndexes[_proxy][_point] = sfor.length;\n      }\n\n      deed.spawnProxy = _proxy;\n      emit ChangedSpawnProxy(_point, _proxy);\n    }\n\n    //  setVotingProxy(): makes _proxy _point's voting proxy\n    //\n    function setVotingProxy(uint32 _point, address _proxy)\n      onlyOwner\n      external\n    {\n      Deed storage deed = rights[_point];\n      address prev = deed.votingProxy;\n      if (prev == _proxy)\n      {\n        return;\n      }\n\n      //  if the point used to have a different voter, do some gymnastics\n      //  to keep the reverse lookup gapless.  delete the point from the\n      //  old voter's list, then fill that gap with the list tail.\n      //\n      if (0x0 != prev)\n      {\n        //  i: current index in previous voter's list of points it was\n        //     voting for\n        //\n        uint256 i = votingForIndexes[prev][_point];\n\n        //  we store index + 1, because 0 is the solidity default value\n        //\n        assert(i > 0);\n        i--;\n\n        //  copy the last item in the list into the now-unused slot,\n        //  making sure to update its :votingForIndexes reference\n        //\n        uint32[] storage prevVfor = votingFor[prev];\n        uint256 last = prevVfor.length - 1;\n        uint32 moved = prevVfor[last];\n        prevVfor[i] = moved;\n        votingForIndexes[prev][moved] = i + 1;\n\n        //  delete the last item\n        //\n        delete(prevVfor[last]);\n        prevVfor.length = last;\n        votingForIndexes[prev][_point] = 0;\n      }\n\n      if (0x0 != _proxy)\n      {\n        uint32[] storage vfor = votingFor[_proxy];\n        vfor.push(_point);\n        votingForIndexes[_proxy][_point] = vfor.length;\n      }\n\n      deed.votingProxy = _proxy;\n      emit ChangedVotingProxy(_point, _proxy);\n    }\n\n    //  setManagementProxy(): makes _proxy _point's transfer proxy\n    //\n    function setTransferProxy(uint32 _point, address _proxy)\n      onlyOwner\n      external\n    {\n      Deed storage deed = rights[_point];\n      address prev = deed.transferProxy;\n      if (prev == _proxy)\n      {\n        return;\n      }\n\n      //  if the point used to have a different transfer proxy, do some\n      //  gymnastics to keep the reverse lookup gapless.  delete the point\n      //  from the old proxy's list, then fill that gap with the list tail.\n      //\n      if (0x0 != prev)\n      {\n        //  i: current index in previous proxy's list of transferable points\n        //\n        uint256 i = transferringForIndexes[prev][_point];\n\n        //  we store index + 1, because 0 is the solidity default value\n        //\n        assert(i > 0);\n        i--;\n\n        //  copy the last item in the list into the now-unused slot,\n        //  making sure to update its :transferringForIndexes reference\n        //\n        uint32[] storage prevTfor = transferringFor[prev];\n        uint256 last = prevTfor.length - 1;\n        uint32 moved = prevTfor[last];\n        prevTfor[i] = moved;\n        transferringForIndexes[prev][moved] = i + 1;\n\n        //  delete the last item\n        //\n        delete(prevTfor[last]);\n        prevTfor.length = last;\n        transferringForIndexes[prev][_point] = 0;\n      }\n\n      if (0x0 != _proxy)\n      {\n        uint32[] storage tfor = transferringFor[_proxy];\n        tfor.push(_point);\n        transferringForIndexes[_proxy][_point] = tfor.length;\n      }\n\n      deed.transferProxy = _proxy;\n      emit ChangedTransferProxy(_point, _proxy);\n    }\n\n    //  setOperator(): dis/allow _operator to transfer ownership of all points\n    //                 owned by _owner\n    //\n    //    operators are part of the ERC721 standard\n    //\n    function setOperator(address _owner, address _operator, bool _approved)\n      onlyOwner\n      external\n    {\n      operators[_owner][_operator] = _approved;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060008054600160a060020a03191633179055604080518082018252600b8082527f6578616d706c652e636f6d00000000000000000000000000000000000000000060208084018290528451808601865283815280820183905285518087019096529285528401526200008d9264010000000062000093810204565b62000307565b600054600160a060020a03163314620000ab57600080fd5b8251620000c090600490602086019062000262565b508151620000d690600590602085019062000262565b508051620000ec90600690602084019062000262565b507ffafd04ade1daae2e1fdb0fc1cc6a899fd424063ed5c92120e67e073053b9489883838360405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015620001585781810151838201526020016200013e565b50505050905090810190601f168015620001865780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015620001bb578181015183820152602001620001a1565b50505050905090810190601f168015620001e95780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156200021e57818101518382015260200162000204565b50505050905090810190601f1680156200024c5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a557805160ff1916838001178555620002d5565b82800160010185558215620002d5579182015b82811115620002d5578251825591602001919060010190620002b8565b50620002e3929150620002e7565b5090565b6200030491905b80821115620002e35760008155600101620002ee565b90565b613e0180620003176000396000f3006080604052600436106103bb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301d8a97f81146103c05780630333d499146103f657806304bbb61d1461046757806304bc94e5146104a4578063073167da146104fe57806308083039146105225780630f934e661461055a578063108d995b1461059457806312ace2e6146105b257806312afbc78146105d357806313063180146105f457806322a7906f1461061457806324541f781461063857806324ba1a461461065657806324cf61b5146106805780632637588e146106a4578063293a9169146106cb5780632a19642c146106e95780632c7ba564146107135780632cce0e291461073d5780633262207c1461076157806333f337241461078b578063375e24c1146107a957806337de45c1146107d35780633b17b4ea146107fd5780633c01a9fa1461081b578063439f7d3c146108395780634448f5fb14610857578063474dbae714610875578063483a15ed1461089f57806352c0683b146108c05780635a83df54146108ea5780635e19b3051461090e578063621b23e21461092c57806363fa9a871461094a5780636436b1b9146109c65780636d09887b146109e7578063715018a614610a05578063728aa85714610a1a57806376944d5b14610a4457806377eb4c5014610a6e5780637bc702a114610a8c578063846f652b14610aaa5780638866bb2c14610ac85780638a27bf5914610af25780638d2d3f4114610b1c5780638da5cb5b14610b3a5780639137fe0a14610b4f57806391398f2514610b795780639397640514610b9a578063942324c314610bdc5780639b0d1b2c14610bfa5780639b350e1214610c1b5780639dd9019014610c39578063a297c1d814610c5a578063a46afef114610c84578063a634585914610ca2578063b6363cf214610cc6578063b65afedd14610ced578063bac55edd14610d17578063bc562b9e14610dec578063bc735d9014610e0a578063c17ad9d814610e36578063c210c62314610e54578063c6d761d414610e9e578063caf590f914610ebc578063d154126414610ee6578063d2588e2014610f07578063d2a9b6ed14610f31578063d5c5164f14610f52578063ddc3595014610f76578063e01cff8414610fa0578063e213c84014610fc1578063e4a358d714610feb578063eccc8ff114611020578063f2fde38b146110ad578063f4914919146110ce578063f4e3be2d146110ec578063f5af66211461110a578063f9b87d4014611128578063fdb357be14611154578063fde9073314611175575b600080fd5b3480156103cc57600080fd5b506103e463ffffffff60043581169060243516611199565b60408051918252519081900360200190f35b34801561040257600080fd5b50610417600160a060020a03600435166111b6565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561045357818101518382015260200161043b565b505050509050019250505060405180910390f35b34801561047357600080fd5b5061048b600160a060020a036004351660243561124f565b6040805163ffffffff9092168252519081900360200190f35b3480156104b057600080fd5b506104c263ffffffff60043516611297565b60408051600160a060020a0396871681529486166020860152928516848401529084166060840152909216608082015290519081900360a00190f35b34801561050a57600080fd5b5061048b600160a060020a03600435166024356112d9565b34801561052e57600080fd5b5061054663ffffffff600435811690602435166112f4565b604080519115158252519081900360200190f35b34801561056657600080fd5b5061057863ffffffff60043516611338565b60408051600160a060020a039092168252519081900360200190f35b3480156105a057600080fd5b5061048b63ffffffff6004351661135c565b3480156105be57600080fd5b5061048b63ffffffff60043516602435611391565b3480156105df57600080fd5b506103e4600160a060020a03600435166113ac565b34801561060057600080fd5b5061061263ffffffff600435166113c7565b005b34801561062057600080fd5b5061048b600160a060020a036004351660243561147f565b34801561064457600080fd5b5061057863ffffffff600435166114e1565b34801561066257600080fd5b5061054663ffffffff60043516600160a060020a0360243516611505565b34801561068c57600080fd5b5061048b600160a060020a0360043516602435611532565b3480156106b057600080fd5b50610546600160a060020a036004358116906024351661154d565b3480156106d757600080fd5b5061048b63ffffffff6004351661156d565b3480156106f557600080fd5b5061061263ffffffff60043516600160a060020a036024351661159a565b34801561071f57600080fd5b5061061263ffffffff60043516600160a060020a036024351661189c565b34801561074957600080fd5b506103e463ffffffff60043581169060243516611b9b565b34801561076d57600080fd5b5061054663ffffffff60043516600160a060020a0360243516611bb8565b34801561079757600080fd5b5061057863ffffffff60043516611be4565b3480156107b557600080fd5b5061054663ffffffff60043516600160a060020a0360243516611c08565b3480156107df57600080fd5b506103e4600160a060020a036004351663ffffffff60243516611c34565b34801561080957600080fd5b5061054663ffffffff60043516611c51565b34801561082757600080fd5b5061041763ffffffff60043516611ca4565b34801561084557600080fd5b5061048b63ffffffff60043516611d11565b34801561086357600080fd5b506103e463ffffffff60043516611d36565b34801561088157600080fd5b506103e4600160a060020a036004351663ffffffff60243516611d4e565b3480156108ab57600080fd5b50610417600160a060020a0360043516611d6b565b3480156108cc57600080fd5b506103e4600160a060020a036004351663ffffffff60243516611ddb565b3480156108f657600080fd5b5061048b600160a060020a0360043516602435611df8565b34801561091a57600080fd5b5061054663ffffffff60043516611e13565b34801561093857600080fd5b5061057863ffffffff60043516611e36565b34801561095657600080fd5b5061096863ffffffff60043516611e57565b604080519a8b5260208b0199909952961515898901529415156060890152921515608088015263ffffffff91821660a0880152811660c087015290811660e08601529081166101008501521661012083015251908190036101400190f35b3480156109d257600080fd5b506103e4600160a060020a0360043516611eeb565b3480156109f357600080fd5b5061054663ffffffff60043516611f06565b348015610a1157600080fd5b50610612611f3a565b348015610a2657600080fd5b5061054663ffffffff60043516600160a060020a0360243516611f99565b348015610a5057600080fd5b506103e4600160a060020a036004351663ffffffff60243516612025565b348015610a7a57600080fd5b5061054663ffffffff60043516612042565b348015610a9857600080fd5b5061061263ffffffff60043516612060565b348015610ab657600080fd5b5061041763ffffffff60043516612103565b348015610ad457600080fd5b5061061263ffffffff60043516600160a060020a0360243516612173565b348015610afe57600080fd5b5061054663ffffffff60043516600160a060020a0360243516612472565b348015610b2857600080fd5b5061048b63ffffffff600435166124cb565b348015610b4657600080fd5b506105786124fc565b348015610b5b57600080fd5b5061054663ffffffff60043516600160a060020a036024351661250b565b348015610b8557600080fd5b50610417600160a060020a0360043516612564565b348015610ba657600080fd5b50610bb863ffffffff600435166125d4565b60405180826002811115610bc857fe5b60ff16815260200191505060405180910390f35b348015610be857600080fd5b506103e463ffffffff6004351661260f565b348015610c0657600080fd5b50610417600160a060020a0360043516612627565b348015610c2757600080fd5b5061054663ffffffff60043516612697565b348015610c4557600080fd5b5061048b63ffffffff600435166024356126bb565b348015610c6657600080fd5b5061061263ffffffff60043516600160a060020a03602435166126d6565b348015610c9057600080fd5b5061041763ffffffff600435166129d5565b348015610cae57600080fd5b5061061263ffffffff60043581169060243516612a42565b348015610cd257600080fd5b50610546600160a060020a0360043581169060243516612ab8565b348015610cf957600080fd5b5061054663ffffffff60043516600160a060020a0360243516612ae6565b348015610d2357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261061294369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612b3f9650505050505050565b348015610df857600080fd5b5061061263ffffffff60043516612cfe565b348015610e1657600080fd5b50610612600160a060020a03600435811690602435166044351515612da4565b348015610e4257600080fd5b5061061263ffffffff60043516612df5565b348015610e6057600080fd5b50610e7263ffffffff60043516612ea8565b60408051948552602085019390935263ffffffff91821684840152166060830152519081900360800190f35b348015610eaa57600080fd5b5061061263ffffffff60043516612efa565b348015610ec857600080fd5b5061054663ffffffff60043516600160a060020a0360243516612fa8565b348015610ef257600080fd5b506103e4600160a060020a0360043516612fd1565b348015610f1357600080fd5b506103e4600160a060020a036004351663ffffffff60243516612fec565b348015610f3d57600080fd5b50610417600160a060020a0360043516613009565b348015610f5e57600080fd5b5061048b600160a060020a0360043516602435613079565b348015610f8257600080fd5b5061061263ffffffff60043516600160a060020a0360243516613094565b348015610fac57600080fd5b506103e4600160a060020a0360043516613328565b348015610fcd57600080fd5b5061054663ffffffff60043516600160a060020a0360243516613343565b348015610ff757600080fd5b5061100963ffffffff6004351661336f565b6040805161ffff9092168252519081900360200190f35b34801561102c57600080fd5b50611038600435613394565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561107257818101518382015260200161105a565b50505050905090810190601f16801561109f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156110b957600080fd5b50610612600160a060020a036004351661342f565b3480156110da57600080fd5b5061061263ffffffff60043516613452565b3480156110f857600080fd5b5061057863ffffffff60043516613508565b34801561111657600080fd5b5061048b63ffffffff6004351661352d565b34801561113457600080fd5b5061061263ffffffff600435811690602435906044359060643516613556565b34801561116057600080fd5b506103e4600160a060020a036004351661369b565b34801561118157600080fd5b5061054663ffffffff600435811690602435166136b6565b600a60209081526000928352604080842090915290825290205481565b600160a060020a0381166000908152600b602090815260409182902080548351818402810184019094528084526060939283018282801561124257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116112055790505b505050505090505b919050565b60116020528160005260406000208181548110151561126a57fe5b9060005260206000209060089182820401919006600402915091509054906101000a900463ffffffff1681565b600260208190526000918252604090912080546001820154928201546003830154600490930154600160a060020a039283169483169391831692918216911685565b60136020528160005260406000208181548110151561126a57fe5b63ffffffff82166000908152600160205260408120600381015460ff1680156113305750600381015463ffffffff848116630100000090920416145b949350505050565b63ffffffff16600090815260026020526040902060010154600160a060020a031690565b63ffffffff90811660009081526001602052604090206003015473010000000000000000000000000000000000000090041690565b60076020528160005260406000208181548110151561126a57fe5b600160a060020a03166000908152600b602052604090205490565b60008054600160a060020a031633146113df57600080fd5b5063ffffffff81166000908152600160205260409020600381015462010000900460ff16151561140e57600080fd5b61142e8260018360030160079054906101000a900463ffffffff16613705565b61143a826000806139bf565b600381015460405163ffffffff63010000009092048216918416907f7e447c9b1bda4b174b0796e100bf7f34ebf36dbb7fe665490b1bfce6246a9da590600090a35050565b600160a060020a0382166000908152600b60205260408120805483106114a457600080fd5b80838154811015156114b257fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691505092915050565b63ffffffff16600090815260026020526040902060040154600160a060020a031690565b63ffffffff9190911660009081526002602081905260409091200154600160a060020a0391821691161490565b600b6020528160005260406000208181548110151561126a57fe5b600360209081526000928352604080842090915290825290205460ff1681565b63ffffffff8116600090815260016020526040812060020154640100000000811061159457fe5b92915050565b60008054819081908190819081908190600160a060020a031633146115be57600080fd5b63ffffffff8916600090815260026020819052604090912090810154909750600160a060020a03908116965088168614156115f857611891565b600160a060020a0386161561176d57600160a060020a038616600090815260106020908152604080832063ffffffff8d1684529091528120549550851161163b57fe5b600160a060020a0386166000908152600f60205260409020805460001996870196919550908101935084908490811061167057fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691508184868154811015156116a757fe5b600091825260208083206008830401805460079093166004026101000a63ffffffff818102199094169584160294909417909355600160a060020a03891682526010835260408083209186168352925220600186019055835484908490811061170c57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff02191690558284816117419190613d06565b50600160a060020a038616600090815260106020908152604080832063ffffffff8d1684529091528120555b600160a060020a0388161561183f57600f600089600160a060020a0316600160a060020a0316815260200190815260200160002090508089908060018154018082558091505090600182039060005260206000209060089182820401919006600402909192909190916101000a81548163ffffffff021916908363ffffffff160217905550508080549050601060008a600160a060020a0316600160a060020a0316815260200190815260200160002060008b63ffffffff1663ffffffff168152602001908152602001600020819055505b600287018054600160a060020a031916600160a060020a038a1690811790915560405163ffffffff8b16907f902736af7b3cefe10d9e840aed0d687e35c84095122b25051a20ead8866f006d90600090a35b505050505050505050565b60008054819081908190819081908190600160a060020a031633146118c057600080fd5b63ffffffff891660009081526002602052604090206004810154909750600160a060020a03908116965088168614156118f857611891565b600160a060020a03861615611a6d57600160a060020a038616600090815260146020908152604080832063ffffffff8d1684529091528120549550851161193b57fe5b600160a060020a0386166000908152601360205260409020805460001996870196919550908101935084908490811061197057fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691508184868154811015156119a757fe5b600091825260208083206008830401805460079093166004026101000a63ffffffff818102199094169584160294909417909355600160a060020a038916825260148352604080832091861683529252206001860190558354849084908110611a0c57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff0219169055828481611a419190613d06565b50600160a060020a038616600090815260146020908152604080832063ffffffff8d1684529091528120555b600160a060020a03881615611b3f576013600089600160a060020a0316600160a060020a0316815260200190815260200160002090508089908060018154018082558091505090600182039060005260206000209060089182820401919006600402909192909190916101000a81548163ffffffff021916908363ffffffff160217905550508080549050601460008a600160a060020a0316600160a060020a0316815260200190815260200160002060008b63ffffffff1663ffffffff168152602001908152602001600020819055505b600487018054600160a060020a031916600160a060020a038a1690811790915560405163ffffffff8b16907fcfe369b7197e7f0cf06793ae2472a9b13583fecbed2f78dfa14d1f10796b847c90600090a3505050505050505050565b600860209081526000928352604080842090915290825290205481565b63ffffffff91909116600090815260026020526040902060040154600160a060020a0391821691161490565b63ffffffff16600090815260026020526040902060030154600160a060020a031690565b63ffffffff91909116600090815260026020526040902060010154600160a060020a0391821691161490565b601260209081526000928352604080842090915290825290205481565b63ffffffff81166000908152600160205260408120805415801590611c795750600181015415155b8015611c9d575060038101546b010000000000000000000000900463ffffffff1615155b9392505050565b63ffffffff8116600090815260096020908152604091829020805483518184028101840190945280845260609392830182828015611242576000918252602091829020805463ffffffff168452908202830192909160049101808411611205575094979650505050505050565b63ffffffff908116600090815260016020526040902060030154630100000090041690565b63ffffffff1660009081526009602052604090205490565b600c60209081526000928352604080842090915290825290205481565b600160a060020a0381166000908152600d6020908152604091829020805483518184028101840190945280845260609392830182828015611242576000918252602091829020805463ffffffff168452908202830192909160049101808411611205575094979650505050505050565b600e60209081526000928352604080842090915290825290205481565b600d6020528160005260406000208181548110151561126a57fe5b63ffffffff16600090815260016020526040902060030154610100900460ff1690565b63ffffffff16600090815260026020526040902054600160a060020a031690565b600160208190526000918252604090912080549181015460039091015460ff808216916101008104821691620100008204169063ffffffff6301000000820481169167010000000000000081048216916b01000000000000000000000082048116916f010000000000000000000000000000008104821691730100000000000000000000000000000000000000909104168a565b600160a060020a03166000908152600f602052604090205490565b63ffffffff9081166000908152600160205260408120600301546f0100000000000000000000000000000090049091161190565b600054600160a060020a03163314611f5157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b63ffffffff82166000908152600260205260408120600160a060020a0383161580159061133057508054600160a060020a0384811691161480611feb57506004810154600160a060020a038481169116145b8061133057508054600160a060020a0390811660009081526003602090815260408083209387168352929052205460ff1691505092915050565b601060209081526000928352604080842090915290825290205481565b63ffffffff1660009081526001602052604090206003015460ff1690565b60008054600160a060020a0316331461207857600080fd5b5063ffffffff811660009081526001602052604090206003810154610100900460ff16156120a557600080fd5b60038101805461ff0019166101001790556120ce8260016120c58261336f565b61ffff16613705565b60405163ffffffff8316907fe74c03809d0769e1b1f706cc8414258cd1f3b6fe020cd15d0165c210ba503a0f90600090a25050565b63ffffffff8116600090815260016020908152604091829020600201805483518184028101840190945280845260609392830182828015611242576000918252602091829020805463ffffffff168452908202830192909160049101808411611205575094979650505050505050565b60008054819081908190819081908190600160a060020a0316331461219757600080fd5b63ffffffff891660009081526002602052604090206001810154909750600160a060020a03908116965088168614156121cf57611891565b600160a060020a0386161561234457600160a060020a0386166000908152600e6020908152604080832063ffffffff8d1684529091528120549550851161221257fe5b600160a060020a0386166000908152600d60205260409020805460001996870196919550908101935084908490811061224757fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16915081848681548110151561227e57fe5b600091825260208083206008830401805460079093166004026101000a63ffffffff818102199094169584160294909417909355600160a060020a0389168252600e83526040808320918616835292522060018601905583548490849081106122e357fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff02191690558284816123189190613d06565b50600160a060020a0386166000908152600e6020908152604080832063ffffffff8d1684529091528120555b600160a060020a0388161561241657600d600089600160a060020a0316600160a060020a0316815260200190815260200160002090508089908060018154018082558091505090600182039060005260206000209060089182820401919006600402909192909190916101000a81548163ffffffff021916908363ffffffff160217905550508080549050600e60008a600160a060020a0316600160a060020a0316815260200190815260200160002060008b63ffffffff1663ffffffff168152602001908152602001600020819055505b600187018054600160a060020a031916600160a060020a038a1690811790915560405163ffffffff8b16907fab9c9327cffd2acc168fafedbe06139f5f55cb84c761df05e0511c251e2ee9bf90600090a3505050505050505050565b63ffffffff82166000908152600260205260408120600160a060020a0383161580159061133057508054600160a060020a0384811691161480611330575060020154600160a060020a0390811692169190911492915050565b63ffffffff9081166000908152600160205260409020600301546f0100000000000000000000000000000090041690565b600054600160a060020a031681565b63ffffffff82166000908152600260205260408120600160a060020a0383161580159061133057508054600160a060020a0384811691161480611330575060010154600160a060020a0390811692169190911492915050565b600160a060020a038116600090815260136020908152604091829020805483518184028101840190945280845260609392830182828015611242576000918252602091829020805463ffffffff168452908202830192909160049101808411611205575094979650505050505050565b60006101008263ffffffff1610156125ee5750600061124a565b620100008263ffffffff1610156126075750600161124a565b506002919050565b63ffffffff1660009081526007602052604090205490565b600160a060020a0381166000908152600f6020908152604091829020805483518184028101840190945280845260609392830182828015611242576000918252602091829020805463ffffffff168452908202830192909160049101808411611205575094979650505050505050565b63ffffffff1660009081526001602052604090206003015462010000900460ff1690565b60096020528160005260406000208181548110151561126a57fe5b60008054819081908190819081908190600160a060020a031633146126fa57600080fd5b63ffffffff891660009081526002602052604090206003810154909750600160a060020a039081169650881686141561273257611891565b600160a060020a038616156128a757600160a060020a038616600090815260126020908152604080832063ffffffff8d1684529091528120549550851161277557fe5b600160a060020a038616600090815260116020526040902080546000199687019691955090810193508490849081106127aa57fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691508184868154811015156127e157fe5b600091825260208083206008830401805460079093166004026101000a63ffffffff818102199094169584160294909417909355600160a060020a03891682526012835260408083209186168352925220600186019055835484908490811061284657fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff021916905582848161287b9190613d06565b50600160a060020a038616600090815260126020908152604080832063ffffffff8d1684529091528120555b600160a060020a03881615612979576011600089600160a060020a0316600160a060020a0316815260200190815260200160002090508089908060018154018082558091505090600182039060005260206000209060089182820401919006600402909192909190916101000a81548163ffffffff021916908363ffffffff160217905550508080549050601260008a600160a060020a0316600160a060020a0316815260200190815260200160002060008b63ffffffff1663ffffffff168152602001908152602001600020819055505b600387018054600160a060020a031916600160a060020a038a1690811790915560405163ffffffff8b16907fcbd6269ec71457f2c7b1a22774f246f6c5a2eae3795ed7300db517680c61c80590600090a3505050505050505050565b63ffffffff8116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015611242576000918252602091829020805463ffffffff168452908202830192909160049101808411611205575094979650505050505050565b600054600160a060020a03163314612a5957600080fd5b612a6382826136b6565b15612a6d57612ab4565b612a79826001836139bf565b8063ffffffff168263ffffffff167fb4d4850b8f218218141c5665cba379e53e9bb015b51e8d934be70210aead874a60405160405180910390a35b5050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205460ff1690565b63ffffffff82166000908152600260205260408120600160a060020a0383161580159061133057508054600160a060020a0384811691161480611330575060030154600160a060020a0390811692169190911492915050565b600054600160a060020a03163314612b5657600080fd5b8251612b69906004906020860190613d3a565b508151612b7d906005906020850190613d3a565b508051612b91906006906020840190613d3a565b507ffafd04ade1daae2e1fdb0fc1cc6a899fd424063ed5c92120e67e073053b9489883838360405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015612bfb578181015183820152602001612be3565b50505050905090810190601f168015612c285780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015612c5b578181015183820152602001612c43565b50505050905090810190601f168015612c885780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015612cbb578181015183820152602001612ca3565b50505050905090810190601f168015612ce85780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505050565b60008054600160a060020a03163314612d1657600080fd5b5063ffffffff81166000908152600160205260409020600381015460ff161515612d3f57612ab4565b612d5f8260008360030160039054906101000a900463ffffffff16613705565b600381015460405163ffffffff63010000009092048216918416907fd7704f9a25193dbd0b0cb4a809feffffa7f19d1aae8817a71346c194448210d590600090a35050565b600054600160a060020a03163314612dbb57600080fd5b600160a060020a03928316600090815260036020908152604080832094909516825292909252919020805460ff1916911515919091179055565b60008054600160a060020a03163314612e0d57600080fd5b612e168261336f565b61ffff16905063ffffffff8216811415612e2f57612ab4565b63ffffffff80821660008181526001602081815260408084206002018054938401815584529083206008830401805488871660046007909516949094026101000a848102970219169590951790945592517fb2d3a6e7a339f5c8ff96265e2f03a010a8541070f3744a2470909644150815469190a35050565b63ffffffff9081166000908152600160208190526040909120805491810154600390910154919390926b01000000000000000000000083048116926f0100000000000000000000000000000090041690565b600080548190600160a060020a03163314612f1457600080fd5b63ffffffff83166000908152600160205260409020600381015490925062010000900460ff161515612f4557612fa3565b506003810154670100000000000000900463ffffffff16612f68836000806139bf565b8063ffffffff168363ffffffff167fd653bb0e0bb7ce8393e624d98fbf17cda5902c8328ed0cd09988f36890d9932a60405160405180910390a35b505050565b63ffffffff91909116600090815260026020526040902054600160a060020a0391821691161490565b600160a060020a03166000908152600d602052604090205490565b601460209081526000928352604080842090915290825290205481565b600160a060020a038116600090815260116020908152604091829020805483518184028101840190945280845260609392830182828015611242576000918252602091829020805463ffffffff168452908202830192909160049101808411611205575094979650505050505050565b600f6020528160005260406000208181548110151561126a57fe5b600080548190819081908190600160a060020a031633146130b457600080fd5b600160a060020a03861615156130c957600080fd5b63ffffffff8716600090815260026020526040902054600160a060020a03908116955086168514156130fa5761331f565b600160a060020a0385161561326f57600160a060020a0385166000908152600c6020908152604080832063ffffffff8b1684529091528120549450841161313d57fe5b600160a060020a0385166000908152600b60205260409020805460001995860195919450908101925083908390811061317257fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690508083858154811015156131a957fe5b600091825260208083206008830401805460079093166004026101000a63ffffffff818102199094169584160294909417909355600160a060020a0388168252600c835260408083209185168352925220600185019055825483908390811061320e57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff02191690558183816132439190613d06565b50600160a060020a0385166000908152600c6020908152604080832063ffffffff8b1684529091528120555b63ffffffff87811660008181526002602090815260408083208054600160a060020a031916600160a060020a038d16908117909155808452600b835281842080546001810182558186528486206008820401805460079092166004026101000a98890219909116978702979097179096558084529454600c835281842085855290925280832091909155517f16d0f539d49c6cad822b767a9445bfb1cf7ea6f2a6c2b120a7ea4cc7660d8fda9190a35b50505050505050565b600160a060020a031660009081526013602052604090205490565b63ffffffff91909116600090815260026020526040902060030154600160a060020a0391821691161490565b6000620100008263ffffffff16101561338c575060ff811661124a565b5061ffff1690565b600481600381106133a157fe5b018054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815293508301828280156134275780601f106133fc57610100808354040283529160200191613427565b820191906000526020600020905b81548152906001019060200180831161340a57829003601f168201915b505050505081565b600054600160a060020a0316331461344657600080fd5b61344f81613c96565b50565b60008054600160a060020a0316331461346a57600080fd5b5063ffffffff80821660008181526001602081815260409283902060038101805473010000000000000000000000000000000000000080820489169095018816850276ffffffff000000000000000000000000000000000000001990911617908190558451939004909516825291517f29294799f1c21a37ef838e15f79dd91bcee2df99d63cd1c18ac968b129514e6e929181900390910190a25050565b63ffffffff1660009081526002602081905260409091200154600160a060020a031690565b63ffffffff90811660009081526001602052604090206003015467010000000000000090041690565b60008054600160a060020a0316331461356e57600080fd5b5063ffffffff841660009081526001602052604090208054841480156135975750600181015483145b80156135be5750600381015463ffffffff8381166b01000000000000000000000090920416145b156135c857613694565b83815560018082018490556003820180546f0100000000000000000000000000000063ffffffff8087166b01000000000000000000000081026effffffff0000000000000000000000199094169390931782810482169095018116820272ffffffff0000000000000000000000000000001990951694909417928390556040805189815260208101899052808201939093529204831660608201529051918716917faa10e7a0117d4323f1d99d630ec169bebb3a988e895770e351987e01ff5423d59181900360800190a25b5050505050565b600160a060020a031660009081526011602052604090205490565b63ffffffff82166000908152600160205260408120600381015462010000900460ff16801561133057506003810154670100000000000000900463ffffffff9081169084161491505092915050565b63ffffffff80841660009081526001602052604081206003810154909260ff821692630100000090920416908080808086158015613741575089155b8061376857508680156137515750895b801561376857508863ffffffff168663ffffffff16145b15613772576139b2565b86156138cc5763ffffffff8087166000908152600860209081526040808320938f16835292905290812054955085116137a757fe5b63ffffffff8616600090815260076020526040902080546000199687019691955090810193508490849081106137d957fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16915081848681548110151561381057fe5b600091825260208083206008808404909101805460079094166004026101000a63ffffffff818102199095169685160295909517909455898216835292835260408083209186168352925220600186019055835484908490811061387057fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff02191690558284816138a59190613d06565b5063ffffffff8087166000908152600860209081526040808320938f168352929052908120555b891561398957600760008a63ffffffff1663ffffffff1681526020019081526020016000209050808b908060018154018082558091505090600182039060005260206000209060089182820401919006600402909192909190916101000a81548163ffffffff021916908363ffffffff160217905550508080549050600860008b63ffffffff1663ffffffff16815260200190815260200160002060008d63ffffffff1663ffffffff168152602001908152602001600020819055505b60038801805466ffffffff0000001916630100000063ffffffff8c16021760ff19168b15151790555b5050505050505050505050565b63ffffffff80841660009081526001602052604081206003810154909260ff620100008304169267010000000000000090920416908080808086158015613a04575089155b80613a2b5750868015613a145750895b8015613a2b57508863ffffffff168663ffffffff16145b15613a35576139b2565b8615613b8d5763ffffffff8087166000908152600a60209081526040808320938f1683529290529081205495508511613a6a57fe5b63ffffffff861660009081526009602052604090208054600019968701969195509081019350849084908110613a9c57fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169150818486815481101515613ad357fe5b600091825260208083206008830401805460079093166004026101000a63ffffffff8181021990941695841602949094179093558881168252600a8352604080832091861683529252206001860190558354849084908110613b3157fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff0219169055828481613b669190613d06565b5063ffffffff8087166000908152600a60209081526040808320938f168352929052908120555b8915613c4a57600960008a63ffffffff1663ffffffff1681526020019081526020016000209050808b908060018154018082558091505090600182039060005260206000209060089182820401919006600402909192909190916101000a81548163ffffffff021916908363ffffffff160217905550508080549050600a60008b63ffffffff1663ffffffff16815260200190815260200160002060008d63ffffffff1663ffffffff168152602001908152602001600020819055505b6003880180548b1515620100000262ff00001963ffffffff8d16670100000000000000026affffffff000000000000001990931692909217919091161790555050505050505050505050565b600160a060020a0381161515613cab57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b815481835581811115612fa3576007016008900481600701600890048360005260206000209182019101612fa39190613db8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613d7b57805160ff1916838001178555613da8565b82800160010185558215613da8579182015b82811115613da8578251825591602001919060010190613d8d565b50613db4929150613db8565b5090565b613dd291905b80821115613db45760008155600101613dbe565b905600a165627a7a72305820e17b29d41082d92ff3fcb77ee16ddd9cee4ce75a55eb3bc727ed72ff0e59df930029"
}