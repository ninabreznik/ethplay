{
  "address": "0x190c2cfc69e68a8e8d5e2b9e2b9cc3332caff77b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Maker: Sai Proxy 1",
  "contractName": "SaiProxyCreateAndExecute",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-18\n*/\n\npragma solidity ^0.4.13;\n\ncontract TubInterface {\n    function open() public returns (bytes32);\n    function join(uint) public;\n    function exit(uint) public;\n    function lock(bytes32, uint) public;\n    function free(bytes32, uint) public;\n    function draw(bytes32, uint) public;\n    function wipe(bytes32, uint) public;\n    function give(bytes32, address) public;\n    function shut(bytes32) public;\n    function bite(bytes32) public;\n    function cups(bytes32) public returns (address, uint, uint, uint);\n    function gem() public returns (TokenInterface);\n    function gov() public returns (TokenInterface);\n    function skr() public returns (TokenInterface);\n    function sai() public returns (TokenInterface);\n    function vox() public returns (VoxInterface);\n    function ask(uint) public returns (uint);\n    function mat() public returns (uint);\n    function chi() public returns (uint);\n    function ink(bytes32) public returns (uint);\n    function tab(bytes32) public returns (uint);\n    function rap(bytes32) public returns (uint);\n    function per() public returns (uint);\n    function pip() public returns (PipInterface);\n    function pep() public returns (PepInterface);\n    function tag() public returns (uint);\n    function drip() public;\n}\n\ncontract TapInterface {\n    function skr() public returns (TokenInterface);\n    function sai() public returns (TokenInterface);\n    function tub() public returns (TubInterface);\n    function bust(uint) public;\n    function boom(uint) public;\n    function cash(uint) public;\n    function mock(uint) public;\n    function heal() public;\n}\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint);\n    function balanceOf(address) public returns (uint);\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract VoxInterface {\n    function par() public returns (uint);\n}\n\ncontract PipInterface {\n    function read() public returns (bytes32);\n}\n\ncontract PepInterface {\n    function peek() public returns (bytes32, bool);\n}\n\ncontract OtcInterface {\n    function getPayAmount(address, address, uint) public constant returns (uint);\n    function buyAllAmount(address, uint, address pay_gem, uint) public returns (uint);\n}\n\ncontract ProxyRegistryInterface {\n    function build(address) public returns (address);\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract SaiProxy is DSMath {\n    function open(address tub_) public returns (bytes32) {\n        return TubInterface(tub_).open();\n    }\n\n    function give(address tub_, bytes32 cup, address lad) public {\n        TubInterface(tub_).give(cup, lad);\n    }\n\n    function lock(address tub_, bytes32 cup) public payable {\n        if (msg.value > 0) {\n            TubInterface tub = TubInterface(tub_);\n\n            tub.gem().deposit.value(msg.value)();\n\n            uint ink = rdiv(msg.value, tub.per());\n            if (tub.gem().allowance(this, tub) != uint(-1)) {\n                tub.gem().approve(tub, uint(-1));\n            }\n            tub.join(ink);\n\n            if (tub.skr().allowance(this, tub) != uint(-1)) {\n                tub.skr().approve(tub, uint(-1));\n            }\n            tub.lock(cup, ink);\n        }\n    }\n\n    function draw(address tub_, bytes32 cup, uint wad) public {\n        if (wad > 0) {\n            TubInterface tub = TubInterface(tub_);\n            tub.draw(cup, wad);\n            tub.sai().transfer(msg.sender, wad);\n        }\n    }\n\n    function handleGovFee(TubInterface tub, uint saiDebtFee, address otc_) internal {\n        bytes32 val;\n        bool ok;\n        (val, ok) = tub.pep().peek();\n        if (ok && val != 0) {\n            uint govAmt = wdiv(saiDebtFee, uint(val));\n            if (otc_ != address(0)) {\n                uint saiGovAmt = OtcInterface(otc_).getPayAmount(tub.sai(), tub.gov(), govAmt);\n                if (tub.sai().allowance(this, otc_) != uint(-1)) {\n                    tub.sai().approve(otc_, uint(-1));\n                }\n                tub.sai().transferFrom(msg.sender, this, saiGovAmt);\n                OtcInterface(otc_).buyAllAmount(tub.gov(), govAmt, tub.sai(), saiGovAmt);\n            } else {\n                tub.gov().transferFrom(msg.sender, this, govAmt);\n            }\n        }\n    }\n\n    function wipe(address tub_, bytes32 cup, uint wad, address otc_) public {\n        if (wad > 0) {\n            TubInterface tub = TubInterface(tub_);\n\n            tub.sai().transferFrom(msg.sender, this, wad);\n            handleGovFee(tub, rmul(wad, rdiv(tub.rap(cup), tub.tab(cup))), otc_);\n\n            if (tub.sai().allowance(this, tub) != uint(-1)) {\n                tub.sai().approve(tub, uint(-1));\n            }\n            if (tub.gov().allowance(this, tub) != uint(-1)) {\n                tub.gov().approve(tub, uint(-1));\n            }\n            tub.wipe(cup, wad);\n        }\n    }\n\n    function wipe(address tub_, bytes32 cup, uint wad) public {\n        wipe(tub_, cup, wad, address(0));\n    }\n\n    function free(address tub_, bytes32 cup, uint jam) public {\n        if (jam > 0) {\n            TubInterface tub = TubInterface(tub_);\n            uint ink = rdiv(jam, tub.per());\n            tub.free(cup, ink);\n            if (tub.skr().allowance(this, tub) != uint(-1)) {\n                tub.skr().approve(tub, uint(-1));\n            }\n            tub.exit(ink);\n            tub.gem().withdraw(jam);\n            address(msg.sender).transfer(jam);\n        }\n    }\n\n    function lockAndDraw(address tub_, bytes32 cup, uint wad) public payable {\n        lock(tub_, cup);\n        draw(tub_, cup, wad);\n    }\n\n    function lockAndDraw(address tub_, uint wad) public payable returns (bytes32 cup) {\n        cup = open(tub_);\n        lockAndDraw(tub_, cup, wad);\n    }\n\n    function wipeAndFree(address tub_, bytes32 cup, uint jam, uint wad) public payable {\n        wipe(tub_, cup, wad);\n        free(tub_, cup, jam);\n    }\n\n    function wipeAndFree(address tub_, bytes32 cup, uint jam, uint wad, address otc_) public payable {\n        wipe(tub_, cup, wad, otc_);\n        free(tub_, cup, jam);\n    }\n\n    function shut(address tub_, bytes32 cup) public {\n        TubInterface tub = TubInterface(tub_);\n        wipeAndFree(tub_, cup, rmul(tub.ink(cup), tub.per()), tub.tab(cup));\n        tub.shut(cup);\n    }\n\n    function shut(address tub_, bytes32 cup, address otc_) public {\n        TubInterface tub = TubInterface(tub_);\n        wipeAndFree(tub_, cup, rmul(tub.ink(cup), tub.per()), tub.tab(cup), otc_);\n        tub.shut(cup);\n    }\n}\n\ncontract SaiProxyCreateAndExecute is SaiProxy {\n\n    // Create a DSProxy instance and open a cup\n    function createAndOpen(address registry_, address tub_) public returns (address proxy, bytes32 cup) {\n        proxy = ProxyRegistryInterface(registry_).build(msg.sender);\n        cup = open(tub_);\n        TubInterface(tub_).give(cup, proxy);\n    }\n\n    // Create a DSProxy instance, open a cup, and lock collateral\n    function createOpenAndLock(address registry_, address tub_) public payable returns (address proxy, bytes32 cup) {\n        proxy = ProxyRegistryInterface(registry_).build(msg.sender);\n        cup = open(tub_);\n        lock(tub_, cup);\n        TubInterface(tub_).give(cup, proxy);\n    }\n\n    // Create a DSProxy instance, open a cup, lock collateral, and draw DAI\n    function createOpenLockAndDraw(address registry_, address tub_, uint wad) public payable returns (address proxy, bytes32 cup) {\n        proxy = ProxyRegistryInterface(registry_).build(msg.sender);\n        cup = open(tub_);\n        lockAndDraw(tub_, cup, wad);\n        TubInterface(tub_).give(cup, proxy);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5061263c806100206000396000f3006080604052600436106100cc5763ffffffff60e060020a6000350416630344a36f81146100d15780631b968160146100fa5780631edf0c1e14610120578063516e9aec1461013a578063581f3c5014610163578063792037e3146101ad5780638a9fc475146101d8578063a3dc65a714610207578063b95460f81461022e578063bc244c111461024f578063bc25a81014610273578063d3140a651461028a578063da93dfcf146102a7578063eefe3818146102d2578063f9ef04be146102ec578063faed77ab14610313575b600080fd5b3480156100dd57600080fd5b506100f8600160a060020a0360043516602435604435610330565b005b6100f8600160a060020a03600435811690602435906044359060643590608435166104c5565b6100f8600160a060020a03600435166024356044356104e3565b610151600160a060020a03600435166024356104fd565b60408051918252519081900360200190f35b34801561016f57600080fd5b5061018a600160a060020a036004358116906024351661051b565b60408051600160a060020a03909316835260208301919091528051918290030190f35b3480156101b957600080fd5b506100f8600160a060020a03600435811690602435906044351661062e565b3480156101e457600080fd5b506100f8600160a060020a0360043581169060243590604435906064351661086a565b34801561021357600080fd5b506100f8600160a060020a0360043516602435604435610ed9565b34801561023a57600080fd5b50610151600160a060020a0360043516610ee6565b34801561025b57600080fd5b506100f8600160a060020a0360043516602435610f58565b6100f8600160a060020a03600435166024356110da565b61018a600160a060020a036004358116906024351660443561166e565b3480156102b357600080fd5b506100f8600160a060020a03600435811690602435906044351661178c565b61018a600160a060020a03600435811690602435166117e1565b3480156102f857600080fd5b506100f8600160a060020a03600435166024356044356118de565b6100f8600160a060020a0360043516602435604435606435611cf2565b6000808211156104bf5750604080517f440f19ba000000000000000000000000000000000000000000000000000000008152600481018490526024810183905290518491600160a060020a0383169163440f19ba9160448082019260009290919082900301818387803b1580156103a657600080fd5b505af11580156103ba573d6000803e3d6000fd5b5050505080600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b505050506040513d602081101561042657600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561049257600080fd5b505af11580156104a6573d6000803e3d6000fd5b505050506040513d60208110156104bc57600080fd5b50505b50505050565b6104d18585848461086a565b6104dc8585856118de565b5050505050565b6104ed83836110da565b6104f8838383610330565b505050565b600061050883610ee6565b90506105158382846104e3565b92915050565b604080517ff3701da200000000000000000000000000000000000000000000000000000000815233600482015290516000918291600160a060020a0386169163f3701da291602480830192602092919082900301818787803b15801561058057600080fd5b505af1158015610594573d6000803e3d6000fd5b505050506040513d60208110156105aa57600080fd5b505191506105b783610ee6565b6040805160e260020a632eaa14a702815260048101839052600160a060020a03858116602483015291519293509085169163baa8529c9160448082019260009290919082900301818387803b15801561060f57600080fd5b505af1158015610623573d6000803e3d6000fd5b505050509250929050565b604080517f1f3634ed00000000000000000000000000000000000000000000000000000000815260048101849052905184916107eb918391869161075791600160a060020a03851691631f3634ed916024808201926020929091908290030181600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b5051604080517f7ec9c3b80000000000000000000000000000000000000000000000000000000081529051600160a060020a03881691637ec9c3b89160048083019260209291908290030181600087803b15801561072657600080fd5b505af115801561073a573d6000803e3d6000fd5b505050506040513d602081101561075057600080fd5b5051611d08565b604080517ff7c8d634000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a0387169163f7c8d6349160248083019260209291908290030181600087803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506040513d60208110156107e357600080fd5b5051866104c5565b604080517fb84d2106000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a0383169163b84d210691602480830192600092919082900301818387803b15801561084c57600080fd5b505af1158015610860573d6000803e3d6000fd5b5050505050505050565b6000808311156104dc5784905080600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050506040513d60208110156108df57600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b505050506040513d602081101561097b57600080fd5b5050604080517f6f78ee0d000000000000000000000000000000000000000000000000000000008152600481018690529051610aba918391610ab4918791610aaf91600160a060020a03861691636f78ee0d916024808201926020929091908290030181600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b505050506040513d6020811015610a1a57600080fd5b5051604080517ff7c8d634000000000000000000000000000000000000000000000000000000008152600481018c90529051600160a060020a0389169163f7c8d6349160248083019260209291908290030181600087803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b505050506040513d6020811015610aa857600080fd5b5051611d4b565b611d08565b84611d6f565b60001981600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610afb57600080fd5b505af1158015610b0f573d6000803e3d6000fd5b505050506040513d6020811015610b2557600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0385811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b158015610b7c57600080fd5b505af1158015610b90573d6000803e3d6000fd5b505050506040513d6020811015610ba657600080fd5b505114610c865780600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b505050506040513d6020811015610c1557600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03848116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b505050505b60001981600160a060020a03166312d43a516040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610cc757600080fd5b505af1158015610cdb573d6000803e3d6000fd5b505050506040513d6020811015610cf157600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0385811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b158015610d4857600080fd5b505af1158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b505114610e525780600160a060020a03166312d43a516040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610db757600080fd5b505af1158015610dcb573d6000803e3d6000fd5b505050506040513d6020811015610de157600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03848116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b158015610e3957600080fd5b505af1158015610e4d573d6000803e3d6000fd5b505050505b604080517f73b3810100000000000000000000000000000000000000000000000000000000815260048101869052602481018590529051600160a060020a038316916373b3810191604480830192600092919082900301818387803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b505050505050505050565b6104f8838383600061086a565b600081600160a060020a031663fcfff16f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f2657600080fd5b505af1158015610f3a573d6000803e3d6000fd5b505050506040513d6020811015610f5057600080fd5b505192915050565b604080517f1f3634ed000000000000000000000000000000000000000000000000000000008152600481018390529051839161105c9183918591610fc991600160a060020a03851691631f3634ed916024808201926020929091908290030181600087803b15801561069f57600080fd5b604080517ff7c8d634000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a0387169163f7c8d6349160248083019260209291908290030181600087803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b505050506040513d602081101561105557600080fd5b5051611cf2565b604080517fb84d2106000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a0383169163b84d210691602480830192600092919082900301818387803b1580156110bd57600080fd5b505af11580156110d1573d6000803e3d6000fd5b50505050505050565b60008060003411156104bf5783915081600160a060020a0316637bd2bea76040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561112757600080fd5b505af115801561113b573d6000803e3d6000fd5b505050506040513d602081101561115157600080fd5b5051604080517fd0e30db00000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163d0e30db0913491600480830192600092919082900301818588803b1580156111b057600080fd5b505af11580156111c4573d6000803e3d6000fd5b505050505061120b3483600160a060020a0316637ec9c3b86040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a7e57600080fd5b905060001982600160a060020a0316637bd2bea76040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561124e57600080fd5b505af1158015611262573d6000803e3d6000fd5b505050506040513d602081101561127857600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0386811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b1580156112cf57600080fd5b505af11580156112e3573d6000803e3d6000fd5b505050506040513d60208110156112f957600080fd5b5051146113d95781600160a060020a0316637bd2bea76040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b505050506040513d602081101561136857600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03858116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b1580156113c057600080fd5b505af11580156113d4573d6000803e3d6000fd5b505050505b81600160a060020a031663049878f3826040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b15801561142257600080fd5b505af1158015611436573d6000803e3d6000fd5b5050505060001982600160a060020a0316630f8a771e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561147b57600080fd5b505af115801561148f573d6000803e3d6000fd5b505050506040513d60208110156114a557600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0386811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b1580156114fc57600080fd5b505af1158015611510573d6000803e3d6000fd5b505050506040513d602081101561152657600080fd5b5051146116065781600160a060020a0316630f8a771e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561156b57600080fd5b505af115801561157f573d6000803e3d6000fd5b505050506040513d602081101561159557600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03858116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b1580156115ed57600080fd5b505af1158015611601573d6000803e3d6000fd5b505050505b604080517fb3b77a5100000000000000000000000000000000000000000000000000000000815260048101859052602481018390529051600160a060020a0384169163b3b77a5191604480830192600092919082900301818387803b15801561084c57600080fd5b604080517ff3701da200000000000000000000000000000000000000000000000000000000815233600482015290516000918291600160a060020a0387169163f3701da291602480830192602092919082900301818787803b1580156116d357600080fd5b505af11580156116e7573d6000803e3d6000fd5b505050506040513d60208110156116fd57600080fd5b5051915061170a84610ee6565b90506117178482856104e3565b6040805160e260020a632eaa14a702815260048101839052600160a060020a03848116602483015291519186169163baa8529c9160448082019260009290919082900301818387803b15801561176c57600080fd5b505af1158015611780573d6000803e3d6000fd5b50505050935093915050565b6040805160e260020a632eaa14a702815260048101849052600160a060020a03838116602483015291519185169163baa8529c9160448082019260009290919082900301818387803b1580156110bd57600080fd5b604080517ff3701da200000000000000000000000000000000000000000000000000000000815233600482015290516000918291600160a060020a0386169163f3701da291602480830192602092919082900301818787803b15801561184657600080fd5b505af115801561185a573d6000803e3d6000fd5b505050506040513d602081101561187057600080fd5b5051915061187d83610ee6565b905061188983826110da565b6040805160e260020a632eaa14a702815260048101839052600160a060020a03848116602483015291519185169163baa8529c9160448082019260009290919082900301818387803b15801561060f57600080fd5b60008060008311156104dc5784915061192f8383600160a060020a0316637ec9c3b86040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a7e57600080fd5b604080517fa5cd184e00000000000000000000000000000000000000000000000000000000815260048101879052602481018390529051919250600160a060020a0384169163a5cd184e9160448082019260009290919082900301818387803b15801561199b57600080fd5b505af11580156119af573d6000803e3d6000fd5b5050505060001982600160a060020a0316630f8a771e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156119f457600080fd5b505af1158015611a08573d6000803e3d6000fd5b505050506040513d6020811015611a1e57600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0386811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b158015611a7557600080fd5b505af1158015611a89573d6000803e3d6000fd5b505050506040513d6020811015611a9f57600080fd5b505114611b7f5781600160a060020a0316630f8a771e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611ae457600080fd5b505af1158015611af8573d6000803e3d6000fd5b505050506040513d6020811015611b0e57600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03858116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b158015611b6657600080fd5b505af1158015611b7a573d6000803e3d6000fd5b505050505b81600160a060020a0316637f8661a1826040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b158015611bc857600080fd5b505af1158015611bdc573d6000803e3d6000fd5b5050505081600160a060020a0316637bd2bea76040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611c1e57600080fd5b505af1158015611c32573d6000803e3d6000fd5b505050506040513d6020811015611c4857600080fd5b5051604080517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0390921691632e1a7d4d9160248082019260009290919082900301818387803b158015611cad57600080fd5b505af1158015611cc1573d6000803e3d6000fd5b505060405133925085156108fc02915085906000818181858888f193505050501580156104bc573d6000803e3d6000fd5b611cfd848483610ed9565b6104bf8484846118de565b60006b033b2e3c9fd0803ce8000000611d3a611d2485856125c0565b60026b033b2e3c9fd0803ce80000005b046125e8565b811515611d4357fe5b049392505050565b600081611d3a611d67856b033b2e3c9fd0803ce80000006125c0565b600285611d34565b60008060008086600160a060020a031663ace237f56040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b505050506040513d6020811015611ddd57600080fd5b5051604080517f59e02dd70000000000000000000000000000000000000000000000000000000081528151600160a060020a03909316926359e02dd7926004808401939192918290030181600087803b158015611e3957600080fd5b505af1158015611e4d573d6000803e3d6000fd5b505050506040513d6040811015611e6357600080fd5b5080516020909101519094509250828015611e7d57508315155b156110d157611e8c86856125f8565b9150600160a060020a038516156124bc5784600160a060020a031663ff1fd97488600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611eea57600080fd5b505af1158015611efe573d6000803e3d6000fd5b505050506040513d6020811015611f1457600080fd5b5051604080517f12d43a510000000000000000000000000000000000000000000000000000000081529051600160a060020a038c16916312d43a519160048083019260209291908290030181600087803b158015611f7157600080fd5b505af1158015611f85573d6000803e3d6000fd5b505050506040513d6020811015611f9b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039384166004820152929091166024830152604482018690525160648083019260209291908290030181600087803b158015611ff257600080fd5b505af1158015612006573d6000803e3d6000fd5b505050506040513d602081101561201c57600080fd5b5051604080517f9166cba4000000000000000000000000000000000000000000000000000000008152905191925060001991600160a060020a038a1691639166cba49160048083019260209291908290030181600087803b15801561208057600080fd5b505af1158015612094573d6000803e3d6000fd5b505050506040513d60208110156120aa57600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0389811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b15801561210157600080fd5b505af1158015612115573d6000803e3d6000fd5b505050506040513d602081101561212b57600080fd5b50511461220b5786600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561217057600080fd5b505af1158015612184573d6000803e3d6000fd5b505050506040513d602081101561219a57600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03888116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b1580156121f257600080fd5b505af1158015612206573d6000803e3d6000fd5b505050505b86600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561224957600080fd5b505af115801561225d573d6000803e3d6000fd5b505050506040513d602081101561227357600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b1580156122e557600080fd5b505af11580156122f9573d6000803e3d6000fd5b505050506040513d602081101561230f57600080fd5b5050604080517f12d43a510000000000000000000000000000000000000000000000000000000081529051600160a060020a0380881692638185402b92918b16916312d43a51916004808201926020929091908290030181600087803b15801561237857600080fd5b505af115801561238c573d6000803e3d6000fd5b505050506040513d60208110156123a257600080fd5b5051604080517f9166cba400000000000000000000000000000000000000000000000000000000815290518691600160a060020a038d1691639166cba4916004808201926020929091908290030181600087803b15801561240257600080fd5b505af1158015612416573d6000803e3d6000fd5b505050506040513d602081101561242c57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015260248101939093529216604482015260648101859052905160848083019260209291908290030181600087803b15801561248a57600080fd5b505af115801561249e573d6000803e3d6000fd5b505050506040513d60208110156124b457600080fd5b506110d19050565b86600160a060020a03166312d43a516040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156124fa57600080fd5b505af115801561250e573d6000803e3d6000fd5b505050506040513d602081101561252457600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561259657600080fd5b505af11580156125aa573d6000803e3d6000fd5b505050506040513d6020811015610ece57600080fd5b60008115806125dd5750508082028282828115156125da57fe5b04145b151561051557600080fd5b8082018281101561051557600080fd5b600081611d3a611d6785670de0b6b3a76400006125c05600a165627a7a7230582033cc049a11d1a88f203641dbab2250a92c6161b9763b5836879221347b59c14f0029"
}