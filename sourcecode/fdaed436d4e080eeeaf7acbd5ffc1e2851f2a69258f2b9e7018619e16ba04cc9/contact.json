{
  "address": "0x651455a972659c7399b563005894628ac41c3750",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CWI_Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        assert(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\ncontract Owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Owned {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20Basic;\n\n    event Released(uint256 amount);\n    event Revoked();\n\n    // beneficiary of tokens after they are released\n    address public beneficiary;\n\n    uint256 public cliff;\n    uint256 public start;\n    uint256 public duration;\n\n    bool public revocable;\n\n    mapping (address => uint256) public released;\n    mapping (address => bool) public revoked;\n\n    address internal ownerShip;\n\n    /**\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n     * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n     * of the balance will have vested.\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _start the time (as Unix time) at which point vesting starts\n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _revocable whether the vesting is revocable or not\n     */\n    constructor(\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        bool _revocable,\n        address _realOwner\n    )\n        public\n    {\n        require(_beneficiary != address(0));\n        require(_cliff <= _duration);\n\n        beneficiary = _beneficiary;\n        revocable = _revocable;\n        duration = _duration;\n        cliff = _start.add(_cliff);\n        start = _start;\n        ownerShip = _realOwner;\n    }\n\n    /**\n     * @notice Transfers vested tokens to beneficiary.\n     * @param token ERC20 token which is being vested\n     */\n    function release(ERC20Basic token) public {\n        uint256 unreleased = releasableAmount(token);\n\n        require(unreleased > 0);\n\n        released[token] = released[token].add(unreleased);\n\n        token.safeTransfer(beneficiary, unreleased);\n\n        emit Released(unreleased);\n    }\n\n    /**\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\n     * remain in the contract, the rest are returned to the owner.\n     * @param token ERC20 token which is being vested\n     */\n    function revoke(ERC20Basic token) public onlyOwner {\n        require(revocable);\n        require(!revoked[token]);\n\n        uint256 balance = token.balanceOf(this);\n\n        uint256 unreleased = releasableAmount(token);\n        uint256 refund = balance.sub(unreleased);\n\n        revoked[token] = true;\n\n        token.safeTransfer(ownerShip, refund);\n\n        emit Revoked();\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\n     * @param token ERC20 token which is being vested\n     */\n    function releasableAmount(ERC20Basic token) public view returns (uint256) {\n        return vestedAmount(token).sub(released[token]);\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested.\n     * @param token ERC20 token which is being vested\n     */\n    function vestedAmount(ERC20Basic token) public view returns (uint256) {\n        uint256 currentBalance = token.balanceOf(this);\n        uint256 totalBalance = currentBalance.add(released[token]);\n\n        if (block.timestamp < cliff) {\n            return 0;\n        } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n            return totalBalance;\n        } else {\n            return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n        }\n    }\n}\n\n/**\n * @title TokenVault\n * @dev TokenVault is a token holder contract that will allow a\n * beneficiary to spend the tokens from some function of a specified ERC20 token\n */\ncontract TokenVault {\n    using SafeERC20 for ERC20;\n\n    // ERC20 token contract being held\n    ERC20 public token;\n\n    constructor(ERC20 _token) public {\n        token = _token;\n    }\n\n    /**\n     * @notice Allow the token itself to send tokens\n     * using transferFrom().\n     */\n    function fillUpAllowance() public {\n        uint256 amount = token.balanceOf(this);\n        require(amount > 0);\n\n        token.approve(token, amount);\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n    }\n}\n\ncontract CWI_Token is BurnableToken, Owned {\n    string public constant name = \"COOP WORLD INVEST\";\n    string public constant symbol = \"CWI\";\n    uint8 public constant decimals = 18;\n \n    /// Maximum tokens to be allocated ( 5.5 billion BKB)\n    uint256 public constant HARD_CAP = 5500000000 * 10**uint256(decimals);\n\n    /// This address will be used to distribute the team, advisors and reserve tokens\n    address public saleTokensAddress;\n\n    /// This vault is used to keep the Founders, Advisors and Partners tokens\n    TokenVault public reserveTokensVault;\n\n    /// Date when the vesting for regular users starts\n    uint64 internal daySecond     = 86400;\n    uint64 internal lock90Days    = 90;\n    uint64 internal unlock100Days = 100;\n    uint64 internal lock365Days   = 365;\n\n    /// Store the vesting contract addresses for each sale contributor\n    mapping(address => address) public vestingOf;\n\n    constructor(address _saleTokensAddress) public payable {\n        require(_saleTokensAddress != address(0));\n\n        saleTokensAddress = _saleTokensAddress;\n\n        /// Maximum tokens to be sold - 1/1 ( 5.5 billion )\n        uint256 saleTokens = 5500000000;\n        createTokensInt(saleTokens, saleTokensAddress);\n\n        require(totalSupply_ <= HARD_CAP);\n    }\n\n    /// @dev Create a ReserveTokenVault \n    function createReserveTokensVault() external onlyOwner {\n        require(reserveTokensVault == address(0));\n\n        /// Reserve tokens - 0 ( 0 billion )\n        uint256 reserveTokens = 0;\n        reserveTokensVault = createTokenVaultInt(reserveTokens);\n\n        require(totalSupply_ <= HARD_CAP);\n    }\n\n    /// @dev Create a TokenVault and fill with the specified newly minted tokens\n    function createTokenVaultInt(uint256 tokens) internal onlyOwner returns (TokenVault) {\n        TokenVault tokenVault = new TokenVault(ERC20(this));\n        createTokensInt(tokens, tokenVault);\n        tokenVault.fillUpAllowance();\n        return tokenVault;\n    }\n\n    // @dev create specified number of tokens and transfer to destination\n    function createTokensInt(uint256 _tokens, address _destination) internal onlyOwner {\n        uint256 tokens = _tokens * 10**uint256(decimals);\n        totalSupply_ = totalSupply_.add(tokens);\n        balances[_destination] = balances[_destination].add(tokens);\n        emit Transfer(0x0, _destination, tokens);\n\n        require(totalSupply_ <= HARD_CAP);\n    }\n\n    /// @dev vest Detail : second unit\n    function vestTokensDetailInt(\n                        address _beneficiary,\n                        uint256 _startS,\n                        uint256 _cliffS,\n                        uint256 _durationS,\n                        bool _revocable,\n                        uint256 _tokensAmountInt) external onlyOwner {\n        require(_beneficiary != address(0));\n\n        uint256 tokensAmount = _tokensAmountInt * 10**uint256(decimals);\n\n        if(vestingOf[_beneficiary] == 0x0) {\n            TokenVesting vesting = new TokenVesting(_beneficiary, _startS, _cliffS, _durationS, _revocable, owner);\n            vestingOf[_beneficiary] = address(vesting);\n        }\n\n        require(this.transferFrom(reserveTokensVault, vestingOf[_beneficiary], tokensAmount));\n    }\n\n    /// @dev vest StartAt : day unit\n    function vestTokensStartAtInt(\n                            address _beneficiary, \n                            uint256 _tokensAmountInt,\n                            uint256 _startS,\n                            uint256 _afterDay,\n                            uint256 _cliffDay,\n                            uint256 _durationDay ) public onlyOwner {\n        require(_beneficiary != address(0));\n\n        uint256 tokensAmount = _tokensAmountInt * 10**uint256(decimals);\n        uint256 afterSec = _afterDay * daySecond;\n        uint256 cliffSec = _cliffDay * daySecond;\n        uint256 durationSec = _durationDay * daySecond;\n\n        if(vestingOf[_beneficiary] == 0x0) {\n            TokenVesting vesting = new TokenVesting(_beneficiary, _startS + afterSec, cliffSec, durationSec, true, owner);\n            vestingOf[_beneficiary] = address(vesting);\n        }\n\n        require(this.transferFrom(reserveTokensVault, vestingOf[_beneficiary], tokensAmount));\n    }\n\n    /// @dev vest function from now\n    function vestTokensFromNowInt(address _beneficiary, uint256 _tokensAmountInt, uint256 _afterDay, uint256 _cliffDay, uint256 _durationDay ) public onlyOwner {\n        vestTokensStartAtInt(_beneficiary, _tokensAmountInt, now, _afterDay, _cliffDay, _durationDay);\n    }\n\n    /// @dev vest the sale contributor tokens for 100 days, 1% gradual release \n    function vestCmdNow1PercentInt(address _beneficiary, uint256 _tokensAmountInt) external onlyOwner {\n        vestTokensFromNowInt(_beneficiary, _tokensAmountInt, 0, 0, unlock100Days);\n    }\n    /// @dev vest the sale contributor tokens for 100 days, 1% gradual release after 3 month later, no cliff\n    function vestCmd3Month1PercentInt(address _beneficiary, uint256 _tokensAmountInt) external onlyOwner {\n        vestTokensFromNowInt(_beneficiary, _tokensAmountInt, lock90Days, 0, unlock100Days);\n    }\n\n    /// @dev vest the sale contributor tokens 100% release after 1 year\n    function vestCmd1YearInstantInt(address _beneficiary, uint256 _tokensAmountInt) external onlyOwner {\n        vestTokensFromNowInt(_beneficiary, _tokensAmountInt, 0, lock365Days, lock365Days);\n    }\n\n    /// @dev releases vested tokens for the caller's own address\n    function releaseVestedTokens() external {\n        releaseVestedTokensFor(msg.sender);\n    }\n\n    /// @dev releases vested tokens for the specified address.\n    /// Can be called by anyone for any address.\n    function releaseVestedTokensFor(address _owner) public {\n        TokenVesting(vestingOf[_owner]).release(this);\n    }\n\n    /// @dev check the vested balance for an address\n    function lockedBalanceOf(address _owner) public view returns (uint256) {\n        return balances[vestingOf[_owner]];\n    }\n\n    /// @dev check the locked but releaseable balance of an owner\n    function releaseableBalanceOf(address _owner) public view returns (uint256) {\n        if (vestingOf[_owner] == address(0) ) {\n            return 0;\n        } else {\n            return TokenVesting(vestingOf[_owner]).releasableAmount(this);\n        }\n    }\n\n    /// @dev revoke vested tokens for the specified address.\n    /// Tokens already vested remain in the contract, the rest are returned to the owner.\n    function revokeVestedTokensFor(address _owner) public onlyOwner {\n        TokenVesting(vestingOf[_owner]).revoke(this);\n    }\n\n    /// @dev Create a ReserveTokenVault \n    function makeReserveToVault() external onlyOwner {\n        require(reserveTokensVault != address(0));\n        reserveTokensVault.fillUpAllowance();\n    }\n\n}",
  "bytecode": "608060408190526005805460a060020a60e060020a03191676015180000000000000000000000000000000000000000017905560068054605a67ffffffffffffffff1990911617604060020a608060020a0319166864000000000000000017608060020a60c060020a03191671016d000000000000000000000000000000001790556020806200236a833981016040525160038054600160a060020a031916331790556000600160a060020a0382161515620000ba57600080fd5b5060048054600160a060020a031916600160a060020a038381169190911791829055640147d3570091620000fa918391166401000000006200011e810204565b6001546b11c57e4d6efac14efc00000010156200011657600080fd5b505062000223565b600354600090600160a060020a031633146200013957600080fd5b50600154670de0b6b3a7640000830290620001639082640100000000620014286200020c82021704565b600155600160a060020a038216600090815260208190526040902054620001999082640100000000620014286200020c82021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36001546b11c57e4d6efac14efc00000010156200020757600080fd5b505050565b6000828201838110156200021c57fe5b9392505050565b61213780620002336000396000f3006080604052600436106101665763ffffffff60e060020a60003504166306fdde03811461016b578063095ea7b3146101f557806318160ddd1461022d57806323b872dd14610254578063313ce5671461027e57806333902973146102a95780633a03171c146102c057806342966c68146102d557806354dd1da4146102ed578063593557361461030257806362290f351461032357806366188463146103535780636e68751c1461037757806370a08231146103985780638b88cb94146103b95780638da5cb5b146103dd57806395d89b411461040e578063a9059cbb14610423578063afa3174414610447578063b0dd5b621461045c578063b8c7839114610471578063bbae7ab414610492578063c26fe7ce146104b6578063c47cfca1146104d7578063d73dd623146104f8578063dd62ed3e1461051c578063de9ab12d14610543578063e4fe9d1514610570578063edfedf9314610585578063fb17eaf9146105b7575b600080fd5b34801561017757600080fd5b506101806105db565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020157600080fd5b50610219600160a060020a0360043516602435610612565b604080519115158252519081900360200190f35b34801561023957600080fd5b50610242610678565b60408051918252519081900360200190f35b34801561026057600080fd5b50610219600160a060020a036004358116906024351660443561067e565b34801561028a57600080fd5b506102936107f5565b6040805160ff9092168252519081900360200190f35b3480156102b557600080fd5b506102be6107fa565b005b3480156102cc57600080fd5b50610242610881565b3480156102e157600080fd5b506102be600435610891565b3480156102f957600080fd5b506102be61094e565b34801561030e57600080fd5b50610242600160a060020a0360043516610959565b34801561032f57600080fd5b506102be600160a060020a036004351660243560443560643560843560a435610986565b34801561035f57600080fd5b50610219600160a060020a0360043516602435610b9c565b34801561038357600080fd5b506102be600160a060020a0360043516610c8c565b3480156103a457600080fd5b50610242600160a060020a0360043516610d2d565b3480156103c557600080fd5b506102be600160a060020a0360043516602435610d48565b3480156103e957600080fd5b506103f2610d91565b60408051600160a060020a039092168252519081900360200190f35b34801561041a57600080fd5b50610180610da0565b34801561042f57600080fd5b50610219600160a060020a0360043516602435610dd7565b34801561045357600080fd5b506103f2610eb8565b34801561046857600080fd5b506102be610ec7565b34801561047d57600080fd5b50610242600160a060020a0360043516610f62565b34801561049e57600080fd5b506102be600160a060020a0360043516602435611030565b3480156104c257600080fd5b506102be600160a060020a0360043516611079565b3480156104e357600080fd5b506103f2600160a060020a03600435166110e8565b34801561050457600080fd5b50610219600160a060020a0360043516602435611103565b34801561052857600080fd5b50610242600160a060020a036004358116906024351661119c565b34801561054f57600080fd5b506102be600160a060020a03600435166024356044356064356084356111c7565b34801561057c57600080fd5b506103f26111ec565b34801561059157600080fd5b506102be600160a060020a0360043516602435604435606435608435151560a4356111fb565b3480156105c357600080fd5b506102be600160a060020a03600435166024356113d1565b60408051808201909152601181527f434f4f5020574f524c4420494e56455354000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561069557600080fd5b600160a060020a0384166000908152602081905260409020548211156106ba57600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156106ea57600080fd5b600160a060020a038416600090815260208190526040902054610713908363ffffffff61141616565b600160a060020a038086166000908152602081905260408082209390935590851681522054610748908363ffffffff61142816565b600160a060020a0380851660009081526020818152604080832094909455918716815260028252828120338252909152205461078a908363ffffffff61141616565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b600354600090600160a060020a0316331461081457600080fd5b600554600160a060020a03161561082a57600080fd5b5060006108368161143e565b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556001546b11c57e4d6efac14efc000000101561087e57600080fd5b50565b6b11c57e4d6efac14efc00000081565b600080821161089f57600080fd5b336000908152602081905260409020548211156108bb57600080fd5b50336000818152602081905260409020546108dc908363ffffffff61141616565b600160a060020a038216600090815260208190526040902055600154610908908363ffffffff61141616565b600155604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b61095733611079565b565b600160a060020a03808216600090815260076020908152604080832054909316825281905220545b919050565b6003546000908190819081908190600160a060020a031633146109a857600080fd5b600160a060020a038b1615156109bd57600080fd5b600554600160a060020a038c8116600090815260076020526040902054670de0b6b3a76400008d0297507401000000000000000000000000000000000000000090920467ffffffffffffffff168a81029650898102955088029350161515610ad3576003548b908a86019085908590600190600160a060020a0316610a406115d2565b600160a060020a039687168152602081019590955260408086019490945260608501929092521515608084015290921660a082015290519081900360c001906000f080158015610a94573d6000803e3d6000fd5b50600160a060020a038c81166000908152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905590505b600554600160a060020a038c811660009081526007602090815260408083205481517f23b872dd0000000000000000000000000000000000000000000000000000000081529585166004870152909316602485015260448401899052915130936323b872dd936064808301949193928390030190829087803b158015610b5857600080fd5b505af1158015610b6c573d6000803e3d6000fd5b505050506040513d6020811015610b8257600080fd5b50511515610b8f57600080fd5b5050505050505050505050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610bf157336000908152600260209081526040808320600160a060020a0388168452909152812055610c26565b610c01818463ffffffff61141616565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600354600160a060020a03163314610ca357600080fd5b600160a060020a038082166000908152600760205260408082205481517f74a8f10300000000000000000000000000000000000000000000000000000000815230600482015291519316926374a8f1039260248084019391929182900301818387803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b5050505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610d5f57600080fd5b610d8d8282600080600660089054906101000a900467ffffffffffffffff1667ffffffffffffffff166111c7565b5050565b600354600160a060020a031681565b60408051808201909152600381527f4357490000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515610dee57600080fd5b33600090815260208190526040902054821115610e0a57600080fd5b33600090815260208190526040902054610e2a908363ffffffff61141616565b3360009081526020819052604080822092909255600160a060020a03851681522054610e5c908363ffffffff61142816565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600454600160a060020a031681565b600354600160a060020a03163314610ede57600080fd5b600554600160a060020a03161515610ef557600080fd5b600560009054906101000a9004600160a060020a0316600160a060020a03166312d60f866040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610f4857600080fd5b505af1158015610f5c573d6000803e3d6000fd5b50505050565b600160a060020a038181166000908152600760205260408120549091161515610f8d57506000610981565b600160a060020a0380831660009081526007602090815260408083205481517f1726cbc80000000000000000000000000000000000000000000000000000000081523060048201529151941693631726cbc893602480840194938390030190829087803b158015610ffd57600080fd5b505af1158015611011573d6000803e3d6000fd5b505050506040513d602081101561102757600080fd5b50519050610981565b600354600160a060020a0316331461104757600080fd5b600654610d8d9083908390600090700100000000000000000000000000000000900467ffffffffffffffff16806111c7565b600160a060020a038082166000908152600760205260408082205481517f19165587000000000000000000000000000000000000000000000000000000008152306004820152915193169263191655879260248084019391929182900301818387803b158015610d1257600080fd5b600760205260009081526040902054600160a060020a031681565b336000908152600260209081526040808320600160a060020a0386168452909152812054611137908363ffffffff61142816565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a031633146111de57600080fd5b610d26858542868686610986565b600554600160a060020a031681565b6003546000908190600160a060020a0316331461121757600080fd5b600160a060020a038816151561122c57600080fd5b600160a060020a03808916600090815260076020526040902054670de0b6b3a76400008502935016151561130b5760035488908890889088908890600160a060020a03166112786115d2565b600160a060020a039687168152602081019590955260408086019490945260608501929092521515608084015290921660a082015290519081900360c001906000f0801580156112cc573d6000803e3d6000fd5b50600160a060020a038981166000908152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905590505b600554600160a060020a0389811660009081526007602090815260408083205481517f23b872dd0000000000000000000000000000000000000000000000000000000081529585166004870152909316602485015260448401869052915130936323b872dd936064808301949193928390030190829087803b15801561139057600080fd5b505af11580156113a4573d6000803e3d6000fd5b505050506040513d60208110156113ba57600080fd5b505115156113c757600080fd5b5050505050505050565b600354600160a060020a031633146113e857600080fd5b600654610d8d908390839067ffffffffffffffff8082169160009168010000000000000000909104166111c7565b60008282111561142257fe5b50900390565b60008282018381101561143757fe5b9392505050565b6003546000908190600160a060020a0316331461145a57600080fd5b306114636115e3565b600160a060020a03909116815260405190819003602001906000f080158015611490573d6000803e3d6000fd5b50905061149d83826114fa565b80600160a060020a03166312d60f866040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156114db57600080fd5b505af11580156114ef573d6000803e3d6000fd5b509295945050505050565b600354600090600160a060020a0316331461151457600080fd5b50600154670de0b6b3a7640000830290611534908263ffffffff61142816565b600155600160a060020a038216600090815260208190526040902054611560908263ffffffff61142816565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36001546b11c57e4d6efac14efc00000010156115cd57600080fd5b505050565b60405161087d80620015f583390190565b60405161029a8062001e72833901905600608060405234801561001057600080fd5b5060405160c08061087d83398101604090815281516020830151918301516060840151608085015160a09095015160008054600160a060020a0319163317905592949192909190600160a060020a038616151561006c57600080fd5b8284111561007957600080fd5b60018054600160a060020a031916600160a060020a0388161790556005805460ff191683151517905560048390556100be85856401000000006100f181026106431704565b600255600394909455505060088054600160a060020a031916600160a060020a0390931692909217909155506101079050565b60008282018381101561010057fe5b9392505050565b610767806101166000396000f3006080604052600436106100a05763ffffffff60e060020a6000350416630fb5a6b481146100a557806313d033c0146100cc5780631726cbc8146100e15780631916558714610102578063384711cc1461012557806338af3eed1461014657806374a8f10314610177578063872a7810146101985780638da5cb5b146101c15780639852595c146101d6578063be9a6555146101f7578063fa01dc061461020c575b600080fd5b3480156100b157600080fd5b506100ba61022d565b60408051918252519081900360200190f35b3480156100d857600080fd5b506100ba610233565b3480156100ed57600080fd5b506100ba600160a060020a0360043516610239565b34801561010e57600080fd5b50610123600160a060020a0360043516610271565b005b34801561013157600080fd5b506100ba600160a060020a036004351661031d565b34801561015257600080fd5b5061015b610474565b60408051600160a060020a039092168252519081900360200190f35b34801561018357600080fd5b50610123600160a060020a0360043516610483565b3480156101a457600080fd5b506101ad6105ec565b604080519115158252519081900360200190f35b3480156101cd57600080fd5b5061015b6105f5565b3480156101e257600080fd5b506100ba600160a060020a0360043516610604565b34801561020357600080fd5b506100ba610616565b34801561021857600080fd5b506101ad600160a060020a036004351661061c565b60045481565b60025481565b600160a060020a03811660009081526006602052604081205461026b9061025f8461031d565b9063ffffffff61063116565b92915050565b600061027c82610239565b90506000811161028b57600080fd5b600160a060020a0382166000908152600660205260409020546102b4908263ffffffff61064316565b600160a060020a038084166000818152600660205260409020929092556001546102e69291168363ffffffff61065d16565b6040805182815290517ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659181900360200190a15050565b600080600083600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b505050506040513d60208110156103a757600080fd5b5051600160a060020a0385166000908152600660205260409020549092506103d690839063ffffffff61064316565b90506002544210156103eb576000925061046d565b6004546003546104009163ffffffff61064316565b421015806104265750600160a060020a03841660009081526007602052604090205460ff165b156104335780925061046d565b61046a60045461045e6104516003544261063190919063ffffffff16565b849063ffffffff6106f916565b9063ffffffff61072416565b92505b5050919050565b600154600160a060020a031681565b6000805481908190600160a060020a0316331461049f57600080fd5b60055460ff1615156104b057600080fd5b600160a060020a03841660009081526007602052604090205460ff16156104d657600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038616916370a082319160248083019260209291908290030181600087803b15801561053757600080fd5b505af115801561054b573d6000803e3d6000fd5b505050506040513d602081101561056157600080fd5b5051925061056e84610239565b9150610580838363ffffffff61063116565b600160a060020a038086166000818152600760205260409020805460ff191660011790556008549293506105bd929091168363ffffffff61065d16565b6040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a150505050565b60055460ff1681565b600054600160a060020a031681565b60066020526000908152604090205481565b60035481565b60076020526000908152604090205460ff1681565b60008282111561063d57fe5b50900390565b60008282018381101561065257fe5b8091505b5092915050565b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b505050506040513d60208110156106ea57600080fd5b505115156106f457fe5b505050565b60008083151561070c5760009150610656565b5082820282848281151561071c57fe5b041461065257fe5b600080828481151561073257fe5b049493505050505600a165627a7a72305820a05d7ba3e32f7b256d9fa7883e4105de557b22d051d0725f3127c05ecd2ef7280029608060405234801561001057600080fd5b5060405160208061029a833981016040525160008054600160a060020a03909216600160a060020a0319909216919091179055610248806100526000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312d60f868114610050578063fc0c546a14610067575b600080fd5b34801561005c57600080fd5b506100656100a5565b005b34801561007357600080fd5b5061007c610200565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008054604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a082319160248082019260209290919082900301818787803b15801561011857600080fd5b505af115801561012c573d6000803e3d6000fd5b505050506040513d602081101561014257600080fd5b505190506000811161015357600080fd5b60008054604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921660048301819052602483018590529051909263095ea7b392604480820193602093909283900390910190829087803b1580156101d157600080fd5b505af11580156101e5573d6000803e3d6000fd5b505050506040513d60208110156101fb57600080fd5b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058201e562edb03530420573d02016ee2c0b9ebbcb6bbd640ac1344ed2042070582650029a165627a7a7230582099646e8ce8b6a7076f915bf1b6b269076772a948c51af4b36cf68780d27c9e9100290000000000000000000000009abbe4660836de554e57b4fec52de2acb04e3c0d",
  "constructorArguments": "0000000000000000000000009abbe4660836de554e57b4fec52de2acb04e3c0d"
}