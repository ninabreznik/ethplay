{
  "address": "0xd13d19b30d65ec58ce853462d27c46978e71a3f8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Brick",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-14\n*/\n\npragma solidity ^0.4.24;\n\n\ncontract BrickAccessControl {\n\n    constructor() public {\n        admin = msg.sender;\n        nodeToId[admin] = 1;\n    }\n\n    address public admin;\n    address[] public nodes;\n    mapping (address => uint) nodeToId;\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Not authorized admin\");\n        _;\n    }\n\n    modifier onlyNode() {\n        require(nodeToId[msg.sender] != 0, \"Not authorized node\");\n        _;\n    }\n\n    function setAdmin(address _newAdmin) public onlyAdmin {\n        require(_newAdmin != address(0));\n\n        admin = _newAdmin;\n    }\n\n    function getNodes() public view returns (address[]) {\n        return nodes;\n    }\n\n    function addNode(address _newNode) public onlyAdmin {\n        require(_newNode != address(0), \"Cannot set to empty address\");\n\n        nodeToId[_newNode] = nodes.push(_newNode);\n    }\n\n    function removeNode(address _node) public onlyAdmin {\n        require(_node != address(0), \"Cannot set to empty address\");\n\n        uint index = nodeToId[_node] - 1;\n        delete nodes[index];\n        delete nodeToId[_node];\n    }\n\n}\n\ncontract BrickBase is BrickAccessControl {\n\n    /**************\n       Events\n    ***************/\n\n    // S201. 대출 계약 생성\n    event ContractCreated(bytes32 loanId);\n\n    // S201. 대출중\n    event ContractStarted(bytes32 loanId);\n\n    // S301. 상환 완료\n    event RedeemCompleted(bytes32 loanId);\n\n    // S302. 청산 완료\n    event LiquidationCompleted(bytes32 loanId);\n\n\n    /**************\n       Data Types\n    ***************/\n\n    struct Contract {\n        bytes32 loanId;         // 계약 번호\n        uint16 productId;       // 상품 번호\n        bytes8 coinName;        // 담보 코인 종류\n        uint256 coinAmount;     // 담보 코인양\n        uint32 coinUnitPrice;   // 1 코인당 금액\n        string collateralAddress;  // 담보 입금 암호화폐 주소\n        uint32 loanAmount;      // 대출원금\n        uint64 createAt;        // 계약일\n        uint64 openAt;          // 원화지급일(개시일)\n        uint64 expireAt;        // 만기일\n        bytes8 feeRate;         // 이자율\n        bytes8 overdueRate;     // 연체이자율\n        bytes8 liquidationRate; // 청산 조건(담보 청산비율)\n        uint32 prepaymentFee;   // 중도상환수수료\n        bytes32 extra;          // 기타 정보\n    }\n\n    struct ClosedContract {\n        bytes32 loanId;         // 계약 번호\n        bytes8 status;          // 종료 타입(S301, S302)\n        uint256 returnAmount;   // 반환코인량(유저에게 돌려준 코인)\n        uint32 returnCash;      // 반환 현금(유저에게 돌려준 원화)\n        string returnAddress;   // 담보 반환 암호화폐 주소\n        uint32 feeAmount;       // 총이자(이자 + 연체이자 + 운영수수료 + 조기상환수수료)\n        uint32 evalUnitPrice;   // 청산시점 평가금액(1 코인당 금액)\n        uint64 evalAt;          // 청산시점 평가일\n        uint64 closeAt;         // 종료일자\n        bytes32 extra;          // 기타 정보\n    }\n\n\n    /**************\n        Storage\n    ***************/\n\n    // 계약 번호 => 대출 계약서\n    mapping (bytes32 => Contract) loanIdToContract;\n    // 계약 번호 => 종료된 대출 계약서\n    mapping (bytes32 => ClosedContract) loanIdToClosedContract;\n\n    bytes32[] contracts;\n    bytes32[] closedContracts;\n\n}\n\ncontract BrickInterface is BrickBase {\n\n    function createContract(\n        bytes32 _loanId, uint16 _productId, bytes8 _coinName, uint256 _coinAmount, uint32 _coinUnitPrice,\n        string _collateralAddress, uint32 _loanAmount, uint64[] _times, bytes8[] _rates, uint32 _prepaymentFee, bytes32 _extra)\n        public;\n\n    function closeContract(\n        bytes32 _loanId, bytes8 _status, uint256 _returnAmount, uint32 _returnCash, string _returnAddress,\n        uint32 _feeAmount, uint32 _evalUnitPrice, uint64 _evalAt, uint64 _closeAt, bytes32 _extra)\n        public;\n\n    function getContract(bytes32 _loanId)\n        public\n        view\n        returns (\n        bytes32 loanId,\n        uint16 productId,\n        bytes8 coinName,\n        uint256 coinAmount,\n        uint32 coinUnitPrice,\n        string collateralAddress,\n        uint32 loanAmount,\n        uint32 prepaymentFee,\n        bytes32 extra);\n\n    function getContractTimestamps(bytes32 _loanId)\n        public\n        view\n        returns (\n        bytes32 loanId,\n        uint64 createAt,\n        uint64 openAt,\n        uint64 expireAt);\n\n    function getContractRates(bytes32 _loanId)\n        public\n        view\n        returns (\n        bytes32 loanId,\n        bytes8 feeRate,\n        bytes8 overdueRate,\n        bytes8 liquidationRate);\n\n    function getClosedContract(bytes32 _loanId)\n        public\n        view\n        returns (\n        bytes32 loanId,\n        bytes8 status,\n        uint256 returnAmount,\n        uint32 returnCash,\n        string returnAddress,\n        uint32 feeAmount,\n        uint32 evalUnitPrice,\n        uint64 evalAt,\n        uint64 closeAt,\n        bytes32 extra);\n\n    function totalContracts() public view returns (uint);\n\n    function totalClosedContracts() public view returns (uint);\n\n}\n\n\n\ncontract Brick is BrickInterface {\n\n    /// @dev 대출 계약서 생성하기\n    /// @param _loanId 계약 번호\n    /// @param _productId 상품 번호\n    /// @param _coinName 담보 코인 종류\n    /// @param _coinAmount 담보 코인양\n    /// @param _coinUnitPrice 1 코인당 금액\n    /// @param _collateralAddress 담보 입금 암호화폐 주소\n    /// @param _loanAmount 대출원금\n    /// @param _times 계약 시간 정보[createAt, openAt, expireAt]\n    /// @param _rates 이자율[feeRate, overdueRate, liquidationRate]\n    /// @param _prepaymentFee 중도상환수수료\n    /// @param _extra 기타 정보\n    function createContract(\n        bytes32 _loanId, uint16 _productId, bytes8 _coinName, uint256 _coinAmount, uint32 _coinUnitPrice,\n        string _collateralAddress, uint32 _loanAmount, uint64[] _times, bytes8[] _rates, uint32 _prepaymentFee, bytes32 _extra)\n        public\n        onlyNode\n    {\n        require(loanIdToContract[_loanId].loanId == 0, \"Already exists in Contract.\");\n        require(loanIdToClosedContract[_loanId].loanId == 0, \"Already exists in ClosedContract.\");\n\n        Contract memory _contract = Contract({\n            loanId: _loanId,\n            productId: _productId,\n            coinName: _coinName,\n            coinAmount: _coinAmount,\n            coinUnitPrice: _coinUnitPrice,\n            collateralAddress: _collateralAddress,\n            loanAmount: _loanAmount,\n            createAt: _times[0],\n            openAt: _times[1],\n            expireAt: _times[2],\n            feeRate: _rates[0],\n            overdueRate: _rates[1],\n            liquidationRate: _rates[2],\n            prepaymentFee: _prepaymentFee,\n            extra: _extra\n        });\n        loanIdToContract[_loanId] = _contract;\n        contracts.push(_loanId);\n\n        emit ContractCreated(_loanId);\n    }\n\n    /// @dev 대출 계약 종료하기\n    /// @param _loanId 계약 번호\n    /// @param _status 종료 타입(S301, S302)\n    /// @param _returnAmount 반환코인량(유저에게 돌려준 코인)\n    /// @param _returnCash 반환 현금(유저에게 돌려준 원화)\n    /// @param _returnAddress 담보 반환 암호화폐 주소\n    /// @param _feeAmount 총이자(이자 + 연체이자 + 운영수수료 + 조기상환수수료)\n    /// @param _evalUnitPrice 청산시점 평가금액(1 코인당 금액)\n    /// @param _evalAt 청산시점 평가일\n    /// @param _closeAt 종료일자\n    /// @param _extra 기타 정보\n    function closeContract(\n        bytes32 _loanId, bytes8 _status, uint256 _returnAmount, uint32 _returnCash, string _returnAddress,\n        uint32 _feeAmount, uint32 _evalUnitPrice, uint64 _evalAt, uint64 _closeAt, bytes32 _extra)\n        public\n        onlyNode\n    {\n        require(loanIdToContract[_loanId].loanId != 0, \"Not exists in Contract.\");\n        require(loanIdToClosedContract[_loanId].loanId == 0, \"Already exists in ClosedContract.\");\n\n        ClosedContract memory closedContract = ClosedContract({\n            loanId: _loanId,\n            status: _status,\n            returnAmount: _returnAmount,\n            returnCash: _returnCash,\n            returnAddress: _returnAddress,\n            feeAmount: _feeAmount,\n            evalUnitPrice: _evalUnitPrice,\n            evalAt: _evalAt,\n            closeAt: _closeAt,\n            extra: _extra\n        });\n        loanIdToClosedContract[_loanId] = closedContract;\n        closedContracts.push(_loanId);\n\n        if (_status == bytes16(\"S301\")) {\n            emit RedeemCompleted(_loanId);\n        } else if (_status == bytes16(\"S302\")) {\n            emit LiquidationCompleted(_loanId);\n        }\n    }\n\n    /// @dev 진행중인 대출 계약서 조회하기\n    /// @param _loanId 계약 번호\n    /// @return The contract of given loanId\n    function getContract(bytes32 _loanId)\n        public\n        view\n        returns (\n        bytes32 loanId,\n        uint16 productId,\n        bytes8 coinName,\n        uint256 coinAmount,\n        uint32 coinUnitPrice,\n        string collateralAddress,\n        uint32 loanAmount,\n        uint32 prepaymentFee,\n        bytes32 extra)\n    {\n        require(loanIdToContract[_loanId].loanId != 0, \"Not exists in Contract.\");\n\n        Contract storage c = loanIdToContract[_loanId];\n        loanId = c.loanId;\n        productId = uint16(c.productId);\n        coinName = c.coinName;\n        coinAmount = uint256(c.coinAmount);\n        coinUnitPrice = uint32(c.coinUnitPrice);\n        collateralAddress = c.collateralAddress;\n        loanAmount = uint32(c.loanAmount);\n        prepaymentFee = uint32(c.prepaymentFee);\n        extra = c.extra;\n    }\n\n    function getContractTimestamps(bytes32 _loanId)\n        public\n        view\n        returns (\n        bytes32 loanId,\n        uint64 createAt,\n        uint64 openAt,\n        uint64 expireAt)\n    {\n        require(loanIdToContract[_loanId].loanId != 0, \"Not exists in Contract.\");\n\n        Contract storage c = loanIdToContract[_loanId];\n        loanId = c.loanId;\n        createAt = uint64(c.createAt);\n        openAt = uint64(c.openAt);\n        expireAt = uint64(c.expireAt);\n    }\n\n    function getContractRates(bytes32 _loanId)\n        public\n        view\n        returns (\n        bytes32 loanId,\n        bytes8 feeRate,\n        bytes8 overdueRate,\n        bytes8 liquidationRate)\n    {\n        require(loanIdToContract[_loanId].loanId != 0, \"Not exists in Contract.\");\n\n        Contract storage c = loanIdToContract[_loanId];\n        loanId = c.loanId;\n        feeRate = c.feeRate;\n        overdueRate = c.overdueRate;\n        liquidationRate = c.liquidationRate;\n    }\n\n    /// @dev 종료된 대출 계약서 조회하기\n    /// @param _loanId 계약 번호\n    /// @return The closed contract of given loanId\n    function getClosedContract(bytes32 _loanId)\n        public\n        view\n        returns (\n        bytes32 loanId,\n        bytes8 status,\n        uint256 returnAmount,\n        uint32 returnCash,\n        string returnAddress,\n        uint32 feeAmount,\n        uint32 evalUnitPrice,\n        uint64 evalAt,\n        uint64 closeAt,\n        bytes32 extra)\n    {\n        require(loanIdToClosedContract[_loanId].loanId != 0, \"Not exists in ClosedContract.\");\n\n        ClosedContract storage c = loanIdToClosedContract[_loanId];\n\n        loanId = c.loanId;\n        status = c.status;\n        returnAmount = uint256(c.returnAmount);\n        returnCash = uint32(c.returnCash);\n        returnAddress = c.returnAddress;\n        feeAmount = uint32(c.feeAmount);\n        evalUnitPrice = uint32(c.evalUnitPrice);\n        evalAt = uint64(c.evalAt);\n        closeAt = uint64(c.closeAt);\n        extra = c.extra;\n    }\n\n    function totalContracts() public view returns (uint) {\n        return contracts.length;\n    }\n\n    function totalClosedContracts() public view returns (uint) {\n        return closedContracts.length;\n    }\n\n}",
  "bytecode": ""
}