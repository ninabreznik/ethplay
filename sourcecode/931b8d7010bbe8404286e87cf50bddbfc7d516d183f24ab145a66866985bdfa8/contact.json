{
  "address": "0x80fa08fc8da9db6dac8cd05d8741a2e7f20f39da",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpaceKIMToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-10\n*/\n\npragma solidity ^0.4.18;\n\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  function Ownable() public {\n    owner = msg.sender;\n  }\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) balances;\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\ncontract BurnableToken is StandardToken {\n  event Burn(address indexed burner, uint256 value);\n  function burn(uint256 _value) public {\n    require(_value > 0);\n    require(_value <= balances[msg.sender]);\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(burner, _value);\n  }\n}\ncontract SpaceKIMToken is BurnableToken {\n  string public constant name = \"Space KIM Token\";\n  string public constant symbol = \"KIM\";\n  uint32 public constant decimals = 0;\n  uint256 public constant INITIAL_SUPPLY = 37900000;\n  function SpaceKIMToken() public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n}\n\ncontract Crowdsale is Ownable {\n\n  using SafeMath for uint;\n\n  SpaceKIMToken public token = new SpaceKIMToken();\n\n  address multisig;\n  address restricted;\n\n  uint statusPreSale = 0;\n\n  uint rate;\n  uint minAmount;\n\n  uint saleStartDate;\n  uint saleFinishDate;\n\n  uint olympStartDate;\n  uint olympEndDate;\n\n  uint percentsTeamTokens;\n  uint percentsPreSaleTokens;\n  uint percentsBountySecondTokens;\n  uint percentsOlympicTokens;\n\n  uint endCrowdsaleDate;\n\n  modifier saleIsOn() {\n    uint curState = getStatus();\n    require(curState != 0 && curState != 5 && curState != 3);\n    _;\n  }\n\n  modifier isUnderHardCap() {\n    uint _availableTokens = token.balanceOf(this);\n    uint _tokens = calculateTokens(msg.value);\n    uint _minTokens = holdTokensOnStage();\n    require(_availableTokens.sub(_tokens) >= _minTokens);\n    _;\n  }\n\n  modifier checkMinAmount() {\n    require(msg.value >= minAmount);\n    _;\n  }\n  function Crowdsale() public {\n    multisig = 0x381b16397eF8fB8FFF65F6d3B6E5979C9d38fe40;\n    restricted = 0x381b16397eF8fB8FFF65F6d3B6E5979C9d38fe40;\n    minAmount = 0.01 * 1 ether;\n    rate = 10000;\n\n    saleStartDate = 1515974400; // 15.01.2018 00:00 GMT Main START\n    saleFinishDate = 1517961600; // 07.02.2017 00:00 GMT Main END\n    //Bounty first\n    olympStartDate = 1518134400; // 09.02.2018 00:00 GMT Olymp START\n    olympEndDate = 1519516800; // 25.02.2018 00:00 GMT Olymp END\n    //Bounty second\n    endCrowdsaleDate = 1519948800; // 02.03.2018 00:00 GMT Close Contract\n\n    percentsTeamTokens = 20;\n    percentsBountySecondTokens = 5;\n    percentsPreSaleTokens = 30;\n    percentsOlympicTokens = 15;\n  }\n\n  function calculateTokens(uint value) internal constant returns (uint) {\n    uint tokens = rate.mul(value).div(1 ether);\n    if(getStatus() == 1){\n      tokens += tokens.div(2);\n    }\n    return tokens;\n  }\n\n  // 0 - stop\n  // 1 - preSale\n  // 2 - sale\n  // 3 - Bounty First\n  // 4 - Olympic games\n  // 5 - Bounty Second\n  function getStatus() internal constant returns (uint8) {\n    if(now > endCrowdsaleDate) {\n      return 0;\n    } else if(now > olympEndDate && now < endCrowdsaleDate) {\n      return 5;\n    } else if(now > olympStartDate && now < olympEndDate) {\n      return 4;\n    } else if(now > saleFinishDate && now < olympStartDate) {\n      return 3;\n    } else if(now > saleStartDate && now < saleFinishDate) {\n      return 2;\n    } else if(statusPreSale == 1){\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  function holdTokensOnStage() public view returns (uint) {\n    uint _totalSupply = token.totalSupply();\n    uint _percents = 100;\n    uint curState = getStatus();\n    if(curState == 5) {\n      _percents = percentsTeamTokens;//20\n    } else if(curState == 4) {\n      _percents = percentsTeamTokens.add(percentsBountySecondTokens);//20+5\n    } else if(curState == 3) {\n      _percents = percentsTeamTokens.add(percentsBountySecondTokens).add(percentsOlympicTokens);//20+5+15\n    } else if(curState == 2) {\n      _percents = percentsTeamTokens.add(percentsBountySecondTokens).add(percentsOlympicTokens);//20+5+15\n    } else if(curState == 1) {\n      _percents = _percents.sub(percentsPreSaleTokens);//70\n    }\n    return _totalSupply.mul(_percents).div(100);\n  }\n\n  function onBalance() public view returns (uint) {\n    return token.balanceOf(this);\n  }\n\n  function availableTokensOnCurrentStage() public view returns (uint) {\n    uint _currentHolder = token.balanceOf(this);\n    uint _minTokens = holdTokensOnStage();\n    return _currentHolder.sub(_minTokens);\n  }\n\n  function getStatusInfo() public view returns (string) {\n    uint curState = getStatus();\n    if(now > endCrowdsaleDate) {\n      return \"Crowdsale is over\";\n    } else if(curState == 5) {\n      return \"Now Bounty #2 token distribution is active\";\n    } else if(curState == 4) {\n      return \"Now Olympic Special (ICO #2) is active\";\n    } else if(curState == 3) {\n      return \"Now Bounty #1 token distribution is active\";\n    } else if(curState == 2) {\n      return \"Now ICO #1 is active\";\n    } else if(curState == 1) {\n      return \"Now Pre-ICO is active\";\n    } else {\n      return \"The sale of tokens is stopped\";\n    }\n  }\n\n  function setStatus(uint8 newStatus) public onlyOwner {\n    require(newStatus == 1 || newStatus == 0);\n    statusPreSale = newStatus;\n  }\n\n  function burnTokens() public onlyOwner {\n    require(now > endCrowdsaleDate);\n    uint _totalSupply = token.totalSupply();\n    uint _teamTokens = _totalSupply.mul(percentsTeamTokens).div(100);\n    token.transfer(restricted, _teamTokens);\n    uint _burnTokens = token.balanceOf(this);\n    token.burn(_burnTokens);\n  }\n\n  function sendTokens(address to, uint tokens) public onlyOwner {\n    uint curState = getStatus();\n    require(curState == 5 || curState == 3);\n    uint _minTokens = holdTokensOnStage();\n    require(token.balanceOf(this).sub(tokens) >=  _minTokens);\n    token.transfer(to, tokens);\n  }\n\n  function createTokens() public saleIsOn isUnderHardCap checkMinAmount payable {\n    uint tokens = calculateTokens(msg.value);\n    multisig.transfer(msg.value);\n    token.transfer(msg.sender, tokens);\n  }\n\n  function() external payable {\n    createTokens();\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6302424ee06000819055506302424ee0600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113a7806100716000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015857806318160ddd146101b257806323b872dd146101db5780632ff2e9dc14610254578063313ce5671461027d57806342966c68146102b257806366188463146102d557806370a082311461032f57806395d89b411461037c578063a9059cbb1461040a578063d73dd62314610464578063dd62ed3e146104be575b600080fd5b34156100d557600080fd5b6100dd61052a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011d578082015181840152602081019050610102565b50505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016357600080fd5b610198600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610563565b604051808215151515815260200191505060405180910390f35b34156101bd57600080fd5b6101c5610655565b6040518082815260200191505060405180910390f35b34156101e657600080fd5b61023a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061065b565b604051808215151515815260200191505060405180910390f35b341561025f57600080fd5b610267610a1a565b6040518082815260200191505060405180910390f35b341561028857600080fd5b610290610a22565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34156102bd57600080fd5b6102d36004808035906020019091905050610a27565b005b34156102e057600080fd5b610315600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b8a565b604051808215151515815260200191505060405180910390f35b341561033a57600080fd5b610366600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e1b565b6040518082815260200191505060405180910390f35b341561038757600080fd5b61038f610e64565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103cf5780820151818401526020810190506103b4565b50505050905090810190601f1680156103fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041557600080fd5b61044a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e9d565b604051808215151515815260200191505060405180910390f35b341561046f57600080fd5b6104a4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110c1565b604051808215151515815260200191505060405180910390f35b34156104c957600080fd5b610514600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112bd565b6040518082815260200191505060405180910390f35b6040805190810160405280600f81526020017f5370616365204b494d20546f6b656e000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561069857600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106e657600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561077157600080fd5b6107c382600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061085882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061092a82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134490919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6302424ee081565b600081565b60008082111515610a3757600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610a8557600080fd5b339050610ada82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134490919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b328260005461134490919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610c9b576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d2f565b610cae838261134490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f4b494d000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610eda57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610f2857600080fd5b610f7a82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061100f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600061115282600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561135257fe5b818303905092915050565b600080828401905083811015151561137157fe5b80915050929150505600a165627a7a7230582087b487cc2e141f215d1e9dfa7008fadbfc0fc0463f99df22ef50b35462e9a53f0029"
}