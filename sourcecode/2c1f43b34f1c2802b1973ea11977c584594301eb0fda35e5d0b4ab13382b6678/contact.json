{
  "address": "0x6907af9888fb0a5ce6b66325d143eb63da2e396f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Whitelist",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an address access to this role\n     */\n    function add(Role storage _role, address _addr) internal {\n        _role.bearer[_addr] = true;\n    }\n\n    /**\n     * @dev remove an address' access to this role\n     */\n    function remove(Role storage _role, address _addr) internal {\n        _role.bearer[_addr] = false;\n    }\n\n    /**\n     * @dev check if an address has this role\n     * // reverts\n     */\n    function check(Role storage _role, address _addr) internal view {\n        require(has(_role, _addr));\n    }\n\n    /**\n     * @dev check if an address has this role\n     * @return bool\n     */\n    function has(Role storage _role, address _addr) internal view returns (bool) {\n        return _role.bearer[_addr];\n    }\n}\n\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n    using Roles for Roles.Role;\n\n    mapping (string => Roles.Role) private roles;\n\n    event RoleAdded(address indexed operator, string role);\n    event RoleRemoved(address indexed operator, string role);\n\n    /**\n     * @dev reverts if addr does not have role\n     * @param _operator address\n     * @param _role the name of the role\n     * // reverts\n     */\n    function checkRole(address _operator, string _role)\n        public\n        view\n    {\n        roles[_role].check(_operator);\n    }\n\n    /**\n     * @dev determine if addr has role\n     * @param _operator address\n     * @param _role the name of the role\n     * @return bool\n     */\n    function hasRole(address _operator, string _role)\n        public\n        view\n        returns (bool)\n    {\n        return roles[_role].has(_operator);\n    }\n\n    /**\n     * @dev add a role to an address\n     * @param _operator address\n     * @param _role the name of the role\n     */\n    function addRole(address _operator, string _role) internal {\n        roles[_role].add(_operator);\n        emit RoleAdded(_operator, _role);\n    }\n\n    /**\n     * @dev remove a role from an address\n     * @param _operator address\n     * @param _role the name of the role\n     */\n    function removeRole(address _operator, string _role) internal {\n        roles[_role].remove(_operator);\n        emit RoleRemoved(_operator, _role);\n    }\n\n    /**\n     * @dev modifier to scope access to a single role (uses msg.sender as addr)\n     * @param _role the name of the role\n     * // reverts\n     */\n    modifier onlyRole(string _role) {\n        checkRole(msg.sender, _role);\n        _;\n    }\n\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n    string public constant ROLE_WHITELISTED = \"whitelist\";\n\n    /**\n     * @dev Throws if operator is not whitelisted.\n     * @param _operator address\n     */\n    modifier onlyIfWhitelisted(address _operator) {\n        checkRole(_operator, ROLE_WHITELISTED);\n        _;\n    }\n\n    /**\n     * @dev add an address to the whitelist\n     * @param _operator address\n     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n     */\n    function addAddressToWhitelist(address _operator)\n        public\n        onlyOwner\n    {\n        addRole(_operator, ROLE_WHITELISTED);\n    }\n\n    /**\n     * @dev getter to determine if address is in whitelist\n     */\n    function whitelist(address _operator)\n        public\n        view\n        returns (bool)\n    {\n        return hasRole(_operator, ROLE_WHITELISTED);\n    }\n\n    /**\n     * @dev add addresses to the whitelist\n     * @param _operators addresses\n     * @return true if at least one address was added to the whitelist,\n     * false if all addresses were already in the whitelist\n     */\n    function addAddressesToWhitelist(address[] _operators)\n        public\n        onlyOwner\n    {\n        for (uint256 i = 0; i < _operators.length; i++) {\n            addAddressToWhitelist(_operators[i]);\n        }\n    }\n\n    /**\n     * @dev remove an address from the whitelist\n     * @param _operator address\n     * @return true if the address was removed from the whitelist,\n     * false if the address wasn't in the whitelist in the first place\n     */\n    function removeAddressFromWhitelist(address _operator)\n        public\n        onlyOwner\n    {\n        removeRole(_operator, ROLE_WHITELISTED);\n    }\n\n    /**\n     * @dev remove addresses from the whitelist\n     * @param _operators addresses\n     * @return true if at least one address was removed from the whitelist,\n     * false if all addresses weren't in the whitelist in the first place\n     */\n    function removeAddressesFromWhitelist(address[] _operators)\n        public\n        onlyOwner\n    {\n        for (uint256 i = 0; i < _operators.length; i++) {\n            removeAddressFromWhitelist(_operators[i]);\n        }\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610d1a806100cf6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630988ca8c146100b457806318b919e91461013d578063217fe6c6146101cd57806324953eaa1461026e578063286dd3f5146102d45780637b9417c8146103175780638da5cb5b1461035a5780638f32d59b146103b15780639b19251a146103e0578063e2ec6ec31461043b578063f2fde38b146104a1575b600080fd5b3480156100c057600080fd5b5061013b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506104e4565b005b34801561014957600080fd5b50610152610565565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610192578082015181840152602081019050610177565b50505050905090810190601f1680156101bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d957600080fd5b50610254600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061059e565b604051808215151515815260200191505060405180910390f35b34801561027a57600080fd5b506102d260048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610625565b005b3480156102e057600080fd5b50610315600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610679565b005b34801561032357600080fd5b50610358600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ce565b005b34801561036657600080fd5b5061036f610723565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103bd57600080fd5b506103c661074c565b604051808215151515815260200191505060405180910390f35b3480156103ec57600080fd5b50610421600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107a3565b604051808215151515815260200191505060405180910390f35b34801561044757600080fd5b5061049f600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506107eb565b005b3480156104ad57600080fd5b506104e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061083f565b005b610561826001836040518082805190602001908083835b60208310151561052057805182526020820191506020810190506020830392506104fb565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061085e90919063ffffffff16565b5050565b6040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525081565b600061061d836001846040518082805190602001908083835b6020831015156105dc57805182526020820191506020810190506020830392506105b7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061087790919063ffffffff16565b905092915050565b600061062f61074c565b151561063a57600080fd5b600090505b815181101561067557610668828281518110151561065957fe5b90602001906020020151610679565b808060010191505061063f565b5050565b61068161074c565b151561068c57600080fd5b6106cb816040805190810160405280600981526020017f77686974656c69737400000000000000000000000000000000000000000000008152506108d0565b50565b6106d661074c565b15156106e157600080fd5b610720816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250610a04565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60006107e4826040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525061059e565b9050919050565b60006107f561074c565b151561080057600080fd5b600090505b815181101561083b5761082e828281518110151561081f57fe5b906020019060200201516106ce565b8080600101915050610805565b5050565b61084761074c565b151561085257600080fd5b61085b81610b38565b50565b6108688282610877565b151561087357600080fd5b5050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61094d826001836040518082805190602001908083835b60208310151561090c57805182526020820191506020810190506020830392506108e7565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020610c3290919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b838110156109c65780820151818401526020810190506109ab565b50505050905090810190601f1680156109f35780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b610a81826001836040518082805190602001908083835b602083101515610a405780518252602082019150602081019050602083039250610a1b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020610c9090919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b83811015610afa578082015181840152602081019050610adf565b50505050905090810190601f168015610b275780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b7457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a723058209af9a54807dcce703a567fab24ed4a7ce847490c22d51b62219576a15b964b860029"
}