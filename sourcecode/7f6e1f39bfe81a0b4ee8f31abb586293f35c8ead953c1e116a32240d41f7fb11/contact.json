{
  "address": "0xbe2d9c289038d32c3d82bd99f464b48bf4696e52",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SuperJackPot",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-21\n*/\n\npragma solidity 0.5.6;\n\n\n\ncontract Ownable {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"\");\n        owner = newOwner;\n    }\n\n}\n\n\n// Developer @gogol\n// Design @chechenets\n// Architect @tugush\n\ncontract Manageable is Ownable {\n    mapping(address => bool) public listOfManagers;\n\n    modifier onlyManager() {\n        require(listOfManagers[msg.sender], \"\");\n        _;\n    }\n\n    function addManager(address _manager) public onlyOwner returns (bool success) {\n        if (!listOfManagers[_manager]) {\n            require(_manager != address(0), \"\");\n            listOfManagers[_manager] = true;\n            success = true;\n        }\n    }\n\n    function removeManager(address _manager) public onlyOwner returns (bool success) {\n        if (listOfManagers[_manager]) {\n            listOfManagers[_manager] = false;\n            success = true;\n        }\n    }\n\n    function getInfo(address _manager) public view returns (bool) {\n        return listOfManagers[_manager];\n    }\n}\n\n// Developer @gogol\n// Design @chechenets\n// Architect @tugush\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"\"); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"\");\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"\");\n        return a % b;\n    }\n}\n\n\n// Developer @gogol\n// Design @chechenets\n// Architect @tugush\n\ncontract iRNG {\n    function update(uint roundNumber, uint additionalNonce, uint period) public payable;\n}\n\n\ncontract BaseGame is Manageable {\n    using SafeMath for uint;\n\n    enum RoundState {NOT_STARTED, ACCEPT_FUNDS, WAIT_RESULT, SUCCESS, REFUND}\n\n    struct Round {\n        RoundState state;\n        uint ticketsCount;\n        uint participantCount;\n        TicketsInterval[] tickets;\n        address[] participants;\n        uint random;\n        uint nonce; //xored participants addresses\n        uint startRoundTime;\n        uint[] winningTickets;\n        address[] winners;\n        uint roundFunds;\n        mapping(address => uint) winnersFunds;\n        mapping(address => uint) participantFunds;\n        mapping(address => bool) sendGain;\n    }\n\n    struct TicketsInterval {\n        address participant;\n        uint firstTicket;\n        uint lastTicket;\n    }\n\n    uint constant public NUMBER_OF_WINNERS = 10;\n    uint constant public SHARE_DENOMINATOR = 10000;\n    uint constant public ORACLIZE_TIMEOUT = 86400;  // one day\n    uint[] public shareOfWinners = [5000, 2500, 1250, 620, 320, 160, 80, 40, 20, 10];\n    address payable public organiser;\n    uint constant public ORGANISER_PERCENT = 20;\n    uint constant public ROUND_FUND_PERCENT = 80;\n\n    uint public period;\n    address public hourlyGame;\n    address public management;\n    address payable public rng;\n\n    mapping (uint => Round) public rounds;\n\n    uint public ticketPrice;\n    uint public currentRound;\n\n    event GameStarted(uint start);\n    event RoundStateChanged(uint currentRound, RoundState state);\n    event ParticipantAdded(uint round, address participant, uint ticketsCount, uint funds);\n    event RoundProcecced(uint round, address[] winners, uint[] winningTickets, uint roundFunds);\n    event RefundIsSuccess(uint round, address participant, uint funds);\n    event RefundIsFailed(uint round, address participant);\n    event Withdraw(address participant, uint funds, uint fromRound, uint toRound);\n    event TicketPriceChanged(uint price);\n\n    modifier onlyRng {\n        require(msg.sender == address(rng), \"\");\n        _;\n    }\n\n    modifier onlyGameContract {\n        require(msg.sender == address(hourlyGame) || msg.sender == management, \"\");\n        _;\n    }\n\n    constructor (address payable _rng, uint _period) public {\n        require(_rng != address(0), \"\");\n        require(_period >= 60, \"\");\n\n        rng = _rng;\n        period = _period;\n    }\n\n    function setContracts(address payable _rng, address _hourlyGame, address _management) public onlyOwner {\n        require(_rng != address(0), \"\");\n        require(_hourlyGame != address(0), \"\");\n        require(_management != address(0), \"\");\n\n        rng = _rng;\n        hourlyGame = _hourlyGame;\n        management = _management;\n    }\n\n    function startGame(uint _startPeriod) public payable onlyGameContract {\n        currentRound = 1;\n        uint time = getCurrentTime().add(_startPeriod).sub(period);\n        rounds[currentRound].startRoundTime = time;\n        rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\n\n        iRNG(rng).update.value(msg.value)(currentRound, 0, _startPeriod);\n\n        emit GameStarted(time);\n    }\n\n    function buyTickets(address _participant) public payable onlyGameContract {\n        uint funds = msg.value;\n\n        updateRoundTimeAndState();\n        addParticipant(_participant, funds.div(ticketPrice));\n        updateRoundFundsAndParticipants(_participant, funds);\n\n        if (getCurrentTime() > rounds[currentRound].startRoundTime.add(period) &&\n            rounds[currentRound].participantCount >= 10\n        ) {\n            _restartGame();\n        }\n    }\n\n    function buyBonusTickets(address _participant, uint _ticketsCount) public payable onlyGameContract {\n        updateRoundTimeAndState();\n        addParticipant(_participant, _ticketsCount);\n        updateRoundFundsAndParticipants(_participant, uint(0));\n\n        if (getCurrentTime() > rounds[currentRound].startRoundTime.add(period) &&\n            rounds[currentRound].participantCount >= 10\n        ) {\n            _restartGame();\n        }\n    }\n\n    function processRound(uint _round, uint _randomNumber) public payable onlyRng returns (bool) {\n        if (rounds[_round].winners.length != 0) {\n            return true;\n        }\n\n        if (checkRoundState(_round) == RoundState.REFUND) {\n            return true;\n        }\n\n        if (rounds[_round].participantCount < 10) {\n            rounds[_round].state = RoundState.ACCEPT_FUNDS;\n            emit RoundStateChanged(_round, rounds[_round].state);\n            return true;\n        }\n\n        rounds[_round].random = _randomNumber;\n        findWinTickets(_round);\n        findWinners(_round);\n        rounds[_round].state = RoundState.SUCCESS;\n        emit RoundStateChanged(_round, rounds[_round].state);\n\n        if (rounds[_round.add(1)].state == RoundState.NOT_STARTED) {\n            currentRound = _round.add(1);\n            rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\n            emit RoundStateChanged(currentRound, rounds[currentRound].state);\n        }\n\n        emit RoundProcecced(_round, rounds[_round].winners, rounds[_round].winningTickets, rounds[_round].roundFunds);\n        getRandomNumber(_round + 1, rounds[_round].nonce);\n        return true;\n    }\n\n    function restartGame() public payable onlyOwner {\n        _restartGame();\n    }\n\n    function getRandomNumber(uint _round, uint _nonce) public payable onlyRng {\n        iRNG(rng).update(_round, _nonce, period);\n    }\n\n    function setTicketPrice(uint _ticketPrice) public onlyGameContract {\n        require(_ticketPrice > 0, \"\");\n\n        emit TicketPriceChanged(_ticketPrice);\n        ticketPrice = _ticketPrice;\n    }\n\n    function findWinTickets(uint _round) public {\n        uint[10] memory winners = _findWinTickets(rounds[_round].random, rounds[_round].ticketsCount);\n\n        for (uint i = 0; i < 10; i++) {\n            rounds[_round].winningTickets.push(winners[i]);\n        }\n    }\n\n    function _findWinTickets(uint _random, uint _ticketsNum) public pure returns (uint[10] memory) {\n        uint random = _random;//uint(keccak256(abi.encodePacked(_random)));\n        uint winnersNum = 10;\n\n        uint[10] memory winTickets;\n        uint shift = uint(256).div(winnersNum);\n\n        for (uint i = 0; i < 10; i++) {\n            winTickets[i] =\n            uint(keccak256(abi.encodePacked(((random << (i.mul(shift))) >> (shift.mul(winnersNum.sub(1)).add(6)))))).mod(_ticketsNum);\n        }\n\n        return winTickets;\n    }\n\n    function refund(uint _round) public {\n        if (checkRoundState(_round) == RoundState.REFUND\n        && rounds[_round].participantFunds[msg.sender] > 0\n        ) {\n            uint amount = rounds[_round].participantFunds[msg.sender];\n            rounds[_round].participantFunds[msg.sender] = 0;\n            address(msg.sender).transfer(amount);\n            emit RefundIsSuccess(_round, msg.sender, amount);\n        } else {\n            emit RefundIsFailed(_round, msg.sender);\n        }\n    }\n\n    function checkRoundState(uint _round) public returns (RoundState) {\n        if (rounds[_round].state == RoundState.WAIT_RESULT\n        && getCurrentTime() > rounds[_round].startRoundTime.add(ORACLIZE_TIMEOUT)\n        ) {\n            rounds[_round].state = RoundState.REFUND;\n            emit RoundStateChanged(_round, rounds[_round].state);\n        }\n        return rounds[_round].state;\n    }\n\n    function setOrganiser(address payable _organiser) public onlyOwner {\n        require(_organiser != address(0), \"\");\n\n        organiser = _organiser;\n    }\n\n   function getGain(uint _fromRound, uint _toRound) public {\n        _transferGain(msg.sender, _fromRound, _toRound);\n    }\n\n    function sendGain(address payable _participant, uint _fromRound, uint _toRound) public onlyManager {\n        _transferGain(_participant, _fromRound, _toRound);\n    }\n\n    function getTicketsCount(uint _round) public view returns (uint) {\n        return rounds[_round].ticketsCount;\n    }\n\n    function getTicketPrice() public view returns (uint) {\n        return ticketPrice;\n    }\n\n    function getCurrentTime() public view returns (uint) {\n        return now;\n    }\n\n    function getPeriod() public view returns (uint) {\n        return period;\n    }\n\n    function getRoundWinners(uint _round) public view returns (address[] memory) {\n        return rounds[_round].winners;\n    }\n\n    function getRoundWinningTickets(uint _round) public view returns (uint[] memory) {\n        return rounds[_round].winningTickets;\n    }\n\n    function getRoundParticipants(uint _round) public view returns (address[] memory) {\n        return rounds[_round].participants;\n    }\n\n    function getWinningFunds(uint _round, address _winner) public view returns  (uint) {\n        return rounds[_round].winnersFunds[_winner];\n    }\n\n    function getRoundFunds(uint _round) public view returns (uint) {\n        return rounds[_round].roundFunds;\n    }\n\n    function getParticipantFunds(uint _round, address _participant) public view returns (uint) {\n        return rounds[_round].participantFunds[_participant];\n    }\n\n    function getCurrentRound() public view returns (uint) {\n        return currentRound;\n    }\n\n    function getRoundStartTime(uint _round) public view returns (uint) {\n        return rounds[_round].startRoundTime;\n    }\n\n    function _restartGame() internal {\n        uint _now = getCurrentTime().sub(rounds[1].startRoundTime);\n        rounds[currentRound].startRoundTime = getCurrentTime().sub(_now.mod(period));\n        rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\n        emit RoundStateChanged(currentRound, rounds[currentRound].state);\n        iRNG(rng).update(currentRound, 0, period.sub(_now.mod(period)));\n    }\n\n    function _transferGain(address payable _participant, uint _fromRound, uint _toRound) internal {\n        require(_fromRound <= _toRound, \"\");\n        require(_participant != address(0), \"\");\n\n        uint funds;\n\n        for (uint i = _fromRound; i <= _toRound; i++) {\n\n            if (rounds[i].state == RoundState.SUCCESS\n            && rounds[i].sendGain[_participant] == false) {\n\n                rounds[i].sendGain[_participant] = true;\n                funds = funds.add(getWinningFunds(i, _participant));\n            }\n        }\n\n        require(funds > 0, \"\");\n        _participant.transfer(funds);\n        emit Withdraw(_participant, funds, _fromRound, _toRound);\n\n    }\n\n    // find participant who has winning ticket\n    // to start: _begin is 0, _end is last index in ticketsInterval array\n    function getWinner(\n        uint _round,\n        uint _beginInterval,\n        uint _endInterval,\n        uint _winningTicket\n    )\n        internal\n        returns (address)\n    {\n        if (_beginInterval == _endInterval) {\n            return rounds[_round].tickets[_beginInterval].participant;\n        }\n\n        uint len = _endInterval.add(1).sub(_beginInterval);\n        uint mid = _beginInterval.add((len.div(2))).sub(1);\n        TicketsInterval memory interval = rounds[_round].tickets[mid];\n\n        if (_winningTicket < interval.firstTicket) {\n            return getWinner(_round, _beginInterval, mid, _winningTicket);\n        } else if (_winningTicket > interval.lastTicket) {\n            return getWinner(_round, mid.add(1), _endInterval, _winningTicket);\n        } else {\n            return interval.participant;\n        }\n    }\n\n    function addParticipant(address _participant, uint _ticketsCount) internal {\n        rounds[currentRound].participants.push(_participant);\n        uint currTicketsCount = rounds[currentRound].ticketsCount;\n        rounds[currentRound].ticketsCount = currTicketsCount.add(_ticketsCount);\n        rounds[currentRound].tickets.push(TicketsInterval(\n                _participant,\n                currTicketsCount,\n                rounds[currentRound].ticketsCount.sub(1))\n        );\n        rounds[currentRound].nonce = rounds[currentRound].nonce + uint(keccak256(abi.encodePacked(_participant)));\n        emit ParticipantAdded(currentRound, _participant, _ticketsCount, _ticketsCount.mul(ticketPrice));\n    }\n\n    function updateRoundTimeAndState() internal {\n        if (getCurrentTime() > rounds[currentRound].startRoundTime.add(period)\n            && rounds[currentRound].participantCount >= 10\n        ) {\n            rounds[currentRound].state = RoundState.WAIT_RESULT;\n            emit RoundStateChanged(currentRound, rounds[currentRound].state);\n            currentRound = currentRound.add(1);\n            rounds[currentRound].startRoundTime = rounds[currentRound-1].startRoundTime.add(period);\n            rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\n            emit RoundStateChanged(currentRound, rounds[currentRound].state);\n        }\n    }\n\n    function updateRoundFundsAndParticipants(address _participant, uint _funds) internal {\n\n        if (rounds[currentRound].participantFunds[_participant] == 0) {\n            rounds[currentRound].participantCount = rounds[currentRound].participantCount.add(1);\n        }\n\n        rounds[currentRound].participantFunds[_participant] =\n        rounds[currentRound].participantFunds[_participant].add(_funds);\n\n        rounds[currentRound].roundFunds =\n        rounds[currentRound].roundFunds.add(_funds);\n    }\n\n    function findWinners(uint _round) internal {\n        address winner;\n        uint fundsToWinner;\n        for (uint i = 0; i < NUMBER_OF_WINNERS; i++) {\n            winner = getWinner(\n                _round,\n                0,\n                (rounds[_round].tickets.length).sub(1),\n                rounds[_round].winningTickets[i]\n            );\n\n            rounds[_round].winners.push(winner);\n            fundsToWinner = rounds[_round].roundFunds.mul(shareOfWinners[i]).div(SHARE_DENOMINATOR);\n            rounds[_round].winnersFunds[winner] = rounds[_round].winnersFunds[winner].add(fundsToWinner);\n        }\n    }\n\n\n}\n\n\n// Developer @gogol\n// Design @chechenets\n// Architect @tugush\n\n\ncontract IChecker {\n    function update() public payable;\n}\n\n\ncontract SuperJackPot is BaseGame {\n\n    IChecker public checker;\n    uint constant public SUPERJACKPOT_ORGANISER_SHARE = 20;          // 20% to organiser\n    uint constant public SUPERJACKPOT_WINNER_SHARE = 80;             // 80% to winner\n\n    modifier onlyChecker {\n        require(msg.sender == address(checker), \"\");\n        _;\n    }\n\n    constructor(\n        address payable _rng,\n        uint _period,\n        address _checker\n    )\n        public\n        BaseGame(_rng, _period) {\n            require(_checker != address(0), \"\");\n\n            checker = IChecker(_checker);\n    }\n\n    function () external payable {\n\n    }\n\n    function processGame() public payable onlyChecker {\n        rounds[currentRound].state = RoundState.WAIT_RESULT;\n        emit RoundStateChanged(currentRound, rounds[currentRound].state);\n        iRNG(rng).update.value(msg.value)(currentRound, rounds[currentRound].nonce, 0);\n        currentRound = currentRound.add(1);\n        rounds[currentRound].startRoundTime = getCurrentTime();\n        rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\n        emit RoundStateChanged(currentRound, rounds[currentRound].state);\n    }\n\n    function startGame(uint _startPeriod) public payable onlyGameContract {\n        _startPeriod;\n        currentRound = 1;\n        uint time = getCurrentTime();\n        rounds[currentRound].startRoundTime = time;\n        rounds[currentRound].state = RoundState.ACCEPT_FUNDS;\n        emit RoundStateChanged(currentRound, rounds[currentRound].state);\n        emit GameStarted(time);\n        checker.update.value(msg.value)();\n    }\n\n    function setChecker(address _checker) public onlyOwner {\n        require(_checker != address(0), \"\");\n\n        checker = IChecker(_checker);\n    }\n\n    function processRound(uint _round, uint _randomNumber) public payable onlyRng returns (bool) {\n        rounds[_round].random = _randomNumber;\n        rounds[_round].winningTickets.push(_randomNumber.mod(rounds[_round].ticketsCount));\n\n        address winner = getWinner(\n            _round,\n            0,\n            (rounds[_round].tickets.length).sub(1),\n            rounds[_round].winningTickets[0]\n        );\n\n        rounds[_round].winners.push(winner);\n        rounds[_round].winnersFunds[winner] = rounds[_round].roundFunds;\n        rounds[_round].state = RoundState.SUCCESS;\n\n        emit RoundStateChanged(_round, rounds[_round].state);\n        emit RoundProcecced(_round, rounds[_round].winners, rounds[_round].winningTickets, rounds[_round].roundFunds);\n\n        return true;\n    }\n\n    function buyTickets(address _participant) public payable onlyGameContract {\n        require(msg.value > 0, \"\");\n\n        uint ticketsCount = msg.value.div(ticketPrice);\n        addParticipant(_participant, ticketsCount);\n\n        updateRoundFundsAndParticipants(_participant, msg.value);\n    }\n\n    function getGain(uint _fromRound, uint _toRound) public {\n        transferGain(msg.sender, _fromRound, _toRound);\n    }\n\n    function sendGain(address payable _participant, uint _fromRound, uint _toRound) public onlyManager {\n        transferGain(_participant, _fromRound, _toRound);\n    }\n\n    function transferGain(address payable _participant, uint _fromRound, uint _toRound) internal {\n        require(_fromRound <= _toRound, \"\");\n        require(_participant != address(0), \"\");\n\n        uint funds;\n\n        for (uint i = _fromRound; i <= _toRound; i++) {\n\n            if (rounds[i].state == RoundState.SUCCESS\n                && rounds[i].sendGain[_participant] == false) {\n\n                rounds[i].sendGain[_participant] = true;\n                funds = funds.add(getWinningFunds(i, _participant));\n            }\n        }\n\n        require(funds > 0, \"\");\n\n        uint fundsToOrganiser = funds.mul(SUPERJACKPOT_ORGANISER_SHARE).div(100);\n        uint fundsToWinner = funds.mul(SUPERJACKPOT_WINNER_SHARE).div(100);\n\n        _participant.transfer(fundsToWinner);\n        organiser.transfer(fundsToOrganiser);\n\n        emit Withdraw(_participant, fundsToWinner, _fromRound, _toRound);\n        emit Withdraw(organiser, fundsToOrganiser, _fromRound, _toRound);\n\n    }\n}\n\n\n// Developer @gogol\n// Design @chechenets\n// Architect @tugush",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000bf43a3f0777bf04f9820380b6e4df6e692f7ddb7000000000000000000000000000000000000000000000000000000000000003d0000000000000000000000005943a67e4375b556df0856fdf08f972d02677b78"
}