{
  "address": "0xd110bb8a24b100c37af7310416e685af807c1f10",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WDT",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-13\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // require(_b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = _a / _b;\n        // require(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    * @notice Renouncing to ownership will leave the contract without an owner.\n    * It will not be possible to call the functions with the `onlyOwner`\n    * modifier anymore.\n    */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n    * @dev Transfers control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n\n/**\n* @title ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/20\n*/\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n* https://github.com/ethereum/EIPs/issues/20\n* Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n*/\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n* @title Pausable token\n* @dev StandardToken modified with pausable transfers.\n**/\ncontract PausableERC20Token is StandardToken, Pausable {\n\n    function transfer(\n        address _to,\n        uint256 _value\n    )\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(\n        address _spender,\n        uint256 _value\n    )\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(\n        address _spender,\n        uint _addedValue\n    )\n        public\n        whenNotPaused\n        returns (bool success)\n    {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(\n        address _spender,\n        uint _subtractedValue\n    )\n        public\n        whenNotPaused\n        returns (bool success)\n    {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\n\n/**\n* @title Burnable Pausable Token\n* @dev Pausable Token that can be irreversibly burned (destroyed).\n*/\ncontract BurnablePausableERC20Token is PausableERC20Token {\n\n    mapping (address => mapping (address => uint256)) internal allowedBurn;\n\n    event Burn(address indexed burner, uint256 value);\n\n    event ApprovalBurn(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function allowanceBurn(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowedBurn[_owner][_spender];\n    }\n\n    function approveBurn(address _spender, uint256 _value)\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        allowedBurn[msg.sender][_spender] = _value;\n        emit ApprovalBurn(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(\n        uint256 _value\n    ) \n        public\n        whenNotPaused\n    {\n        _burn(msg.sender, _value);\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * @param _from address The address which you want to send tokens from\n    * @param _value uint256 The amount of token to be burned\n    */\n    function burnFrom(\n        address _from, \n        uint256 _value\n    ) \n        public \n        whenNotPaused\n    {\n        require(_value <= allowedBurn[_from][msg.sender]);\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        allowedBurn[_from][msg.sender] = allowedBurn[_from][msg.sender].sub(_value);\n        _burn(_from, _value);\n    }\n\n    function _burn(\n        address _who, \n        uint256 _value\n    ) \n        internal \n        whenNotPaused\n    {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n    function increaseBurnApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        allowedBurn[msg.sender][_spender] = (\n        allowedBurn[msg.sender][_spender].add(_addedValue));\n        emit ApprovalBurn(msg.sender, _spender, allowedBurn[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseBurnApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        uint256 oldValue = allowedBurn[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowedBurn[msg.sender][_spender] = 0;\n        } else {\n            allowedBurn[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit ApprovalBurn(msg.sender, _spender, allowedBurn[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract FreezableBurnablePausableERC20Token is BurnablePausableERC20Token {\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(\n        address target,\n        bool freeze\n    )\n        public\n        onlyOwner\n    {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function transfer(\n        address _to,\n        uint256 _value\n    )\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        require(!frozenAccount[msg.sender], \"Sender account freezed\");\n        require(!frozenAccount[_to], \"Receiver account freezed\");\n\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        require(!frozenAccount[msg.sender], \"Spender account freezed\");\n        require(!frozenAccount[_from], \"Sender account freezed\");\n        require(!frozenAccount[_to], \"Receiver account freezed\");\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function burn(\n        uint256 _value\n    ) \n        public\n        whenNotPaused\n    {\n        require(!frozenAccount[msg.sender], \"Sender account freezed\");\n\n        return super.burn(_value);\n    }\n\n    function burnFrom(\n        address _from, \n        uint256 _value\n    ) \n        public \n        whenNotPaused\n    {\n        require(!frozenAccount[msg.sender], \"Spender account freezed\");\n        require(!frozenAccount[_from], \"Sender account freezed\");\n\n        return super.burnFrom(_from, _value);\n    }\n}\n\n/**\n* @title WDT\n* @dev Token that is ERC20 compatible, Pausableb, Burnable, Ownable with SafeMath.\n*/\ncontract WDT is FreezableBurnablePausableERC20Token {\n\n    /** Token Setting: You are free to change any of these\n    * @param name string The name of your token (can be not unique)\n    * @param symbol string The symbol of your token (can be not unique, can be more than three characters)\n    * @param decimals uint8 The accuracy decimals of your token (conventionally be 18)\n    * Read this to choose decimals: https://ethereum.stackexchange.com/questions/38704/why-most-erc-20-tokens-have-18-decimals\n    * @param INITIAL_SUPPLY uint256 The total supply of your token. Example default to be \"10000\". Change as you wish.\n    **/\n    string public constant name = \"VODA TOKEN\";\n    string public constant symbol = \"WDT\";\n    uint8 public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 81000000 * (10 ** uint256(decimals));\n\n    /**\n    * @dev Constructor that gives msg.sender all of existing tokens.\n    * Literally put all the issued money in your pocket\n    */\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b5060038054600160a060020a031916339081179091556a43006acc6ed72ff1000000600281905560008281526020818152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36116258061009b6000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610158578063095ea7b3146101e25780630cfa03181461021a57806318160ddd1461023e57806323b872dd1461026557806326ed274e1461028f5780632ff2e9dc146102b3578063313ce567146102c85780633f4ba83a146102f357806342966c681461030a5780635c975abb14610322578063661884631461033757806370a082311461035b578063715018a61461037c57806373cd0a191461039157806379cc6790146103b85780638456cb59146103dc5780638da5cb5b146103f157806395d89b4114610422578063a9059cbb14610437578063b414d4b61461045b578063d73dd6231461047c578063dd62ed3e146104a0578063e724529c146104c7578063f2fde38b146104ed578063fc7f1a881461050e575b600080fd5b34801561016457600080fd5b5061016d610532565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a757818101518382015260200161018f565b50505050905090810190601f1680156101d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ee57600080fd5b50610206600160a060020a0360043516602435610569565b604080519115158252519081900360200190f35b34801561022657600080fd5b50610206600160a060020a0360043516602435610594565b34801561024a57600080fd5b50610253610615565b60408051918252519081900360200190f35b34801561027157600080fd5b50610206600160a060020a036004358116906024351660443561061b565b34801561029b57600080fd5b50610206600160a060020a0360043516602435610780565b3480156102bf57600080fd5b5061025361088c565b3480156102d457600080fd5b506102dd61089b565b6040805160ff9092168252519081900360200190f35b3480156102ff57600080fd5b506103086108a0565b005b34801561031657600080fd5b50610308600435610918565b34801561032e57600080fd5b50610206610991565b34801561034357600080fd5b50610206600160a060020a03600435166024356109a1565b34801561036757600080fd5b50610253600160a060020a03600435166109c5565b34801561038857600080fd5b506103086109e0565b34801561039d57600080fd5b50610253600160a060020a0360043581169060243516610a4e565b3480156103c457600080fd5b50610308600160a060020a0360043516602435610a79565b3480156103e857600080fd5b50610308610b65565b3480156103fd57600080fd5b50610406610be2565b60408051600160a060020a039092168252519081900360200190f35b34801561042e57600080fd5b5061016d610bf1565b34801561044357600080fd5b50610206600160a060020a0360043516602435610c28565b34801561046757600080fd5b50610206600160a060020a0360043516610d13565b34801561048857600080fd5b50610206600160a060020a0360043516602435610d28565b3480156104ac57600080fd5b50610253600160a060020a0360043581169060243516610d4c565b3480156104d357600080fd5b50610308600160a060020a03600435166024351515610d77565b3480156104f957600080fd5b50610308600160a060020a0360043516610df2565b34801561051a57600080fd5b50610206600160a060020a0360043516602435610e12565b60408051808201909152600a81527f564f444120544f4b454e00000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff161561058357600080fd5b61058d8383610ec5565b9392505050565b60035460009060a060020a900460ff16156105ae57600080fd5b336000818152600460209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927fc1033302c4d7c43fc10fb5d86d019f38ef2246edfc17885576bddffb41e07059929181900390910190a350600192915050565b60025490565b60035460009060a060020a900460ff161561063557600080fd5b3360009081526005602052604090205460ff161561069d576040805160e560020a62461bcd02815260206004820152601760248201527f5370656e646572206163636f756e7420667265657a6564000000000000000000604482015290519081900360640190fd5b600160a060020a03841660009081526005602052604090205460ff16156106fc576040805160e560020a62461bcd02815260206004820152601660248201526000805160206115da833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526005602052604090205460ff161561076d576040805160e560020a62461bcd02815260206004820152601860248201527f5265636569766572206163636f756e7420667265657a65640000000000000000604482015290519081900360640190fd5b610778848484610f2b565b949350505050565b600354600090819060a060020a900460ff161561079c57600080fd5b50336000908152600460209081526040808320600160a060020a03871684529091529020548083106107f157336000908152600460209081526040808320600160a060020a0388168452909152812055610826565b610801818463ffffffff610f5016565b336000908152600460209081526040808320600160a060020a03891684529091529020555b336000818152600460209081526040808320600160a060020a0389168085529083529281902054815190815290519293927fc1033302c4d7c43fc10fb5d86d019f38ef2246edfc17885576bddffb41e07059929181900390910190a35060019392505050565b6a43006acc6ed72ff100000081565b601281565b600354600160a060020a031633146108b757600080fd5b60035460a060020a900460ff1615156108cf57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035460a060020a900460ff161561092f57600080fd5b3360009081526005602052604090205460ff1615610985576040805160e560020a62461bcd02815260206004820152601660248201526000805160206115da833981519152604482015290519081900360640190fd5b61098e81610f67565b50565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff16156109bb57600080fd5b61058d8383610f88565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146109f757600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60035460a060020a900460ff1615610a9057600080fd5b3360009081526005602052604090205460ff1615610af8576040805160e560020a62461bcd02815260206004820152601760248201527f5370656e646572206163636f756e7420667265657a6564000000000000000000604482015290519081900360640190fd5b600160a060020a03821660009081526005602052604090205460ff1615610b57576040805160e560020a62461bcd02815260206004820152601660248201526000805160206115da833981519152604482015290519081900360640190fd5b610b618282611077565b5050565b600354600160a060020a03163314610b7c57600080fd5b60035460a060020a900460ff1615610b9357600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600381527f5744540000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff1615610c4257600080fd5b3360009081526005602052604090205460ff1615610c98576040805160e560020a62461bcd02815260206004820152601660248201526000805160206115da833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526005602052604090205460ff1615610d09576040805160e560020a62461bcd02815260206004820152601860248201527f5265636569766572206163636f756e7420667265657a65640000000000000000604482015290519081900360640190fd5b61058d8383611120565b60056020526000908152604090205460ff1681565b60035460009060a060020a900460ff1615610d4257600080fd5b61058d8383611144565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600354600160a060020a03163314610d8e57600080fd5b600160a060020a038216600081815260056020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600354600160a060020a03163314610e0957600080fd5b61098e816111dd565b60035460009060a060020a900460ff1615610e2c57600080fd5b336000908152600460209081526040808320600160a060020a0387168452909152902054610e60908363ffffffff61125b16565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937fc1033302c4d7c43fc10fb5d86d019f38ef2246edfc17885576bddffb41e07059929081900390910190a350600192915050565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035460009060a060020a900460ff1615610f4557600080fd5b61077884848461126d565b60008083831115610f6057600080fd5b5050900390565b60035460a060020a900460ff1615610f7e57600080fd5b61098e33826113e2565b336000908152600160209081526040808320600160a060020a0386168452909152812054808310610fdc57336000908152600160209081526040808320600160a060020a0388168452909152812055611011565b610fec818463ffffffff610f5016565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60035460a060020a900460ff161561108e57600080fd5b600160a060020a03821660009081526004602090815260408083203384529091529020548111156110be57600080fd5b600160a060020a03821660009081526004602090815260408083203384529091529020546110f2908263ffffffff610f5016565b600160a060020a0383166000908152600460209081526040808320338452909152902055610b6182826113e2565b60035460009060a060020a900460ff161561113a57600080fd5b61058d83836114fa565b336000908152600160209081526040808320600160a060020a0386168452909152812054611178908363ffffffff61125b16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03811615156111f257600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282018381101561058d57600080fd5b600160a060020a03831660009081526020819052604081205482111561129257600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020548211156112c257600080fd5b600160a060020a03831615156112d757600080fd5b600160a060020a038416600090815260208190526040902054611300908363ffffffff610f5016565b600160a060020a038086166000908152602081905260408082209390935590851681522054611335908363ffffffff61125b16565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054611377908363ffffffff610f5016565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60035460a060020a900460ff16156113f957600080fd5b600160a060020a03821660009081526020819052604090205481111561141e57600080fd5b600160a060020a038216600090815260208190526040902054611447908263ffffffff610f5016565b600160a060020a038316600090815260208190526040902055600254611473908263ffffffff610f5016565b600255604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b3360009081526020819052604081205482111561151657600080fd5b600160a060020a038316151561152b57600080fd5b3360009081526020819052604090205461154b908363ffffffff610f5016565b3360009081526020819052604080822092909255600160a060020a0385168152205461157d908363ffffffff61125b16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050560053656e646572206163636f756e7420667265657a656400000000000000000000a165627a7a72305820f8f6bc56a4098ac8e7f4d4c5407b56a575022c00e462ac63383741186b0937820029"
}