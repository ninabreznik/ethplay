{
  "address": "0x9a336d0b50fb7231a7461b77c8db2bcc3176339b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Kilestone",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-17\n*/\n\npragma solidity ^ 0.4 .9;\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract Kilestone {\n    using SafeMath\n    for uint256;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => uint256) balances;\n    uint256 public totalSupply;\n    uint256 public decimals;\n    address public owner;\n    bytes32 public symbol;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\n\n    function Kilestone() {\n        totalSupply = 60000000000;\n        symbol = 'Kilestone';\n        owner = 0x004713DaD2A631d121abF9B04f7e3af542Ae5e0a;\n        balances[owner] = totalSupply;\n        decimals = 4;\n    }\n\n    function balanceOf(address _owner) constant returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function transfer(address _to, uint256 _value) returns(bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool) {\n        var _allowance = allowed[_from][msg.sender];\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns(bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function() {\n        revert();\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50640df847580060028190557f4b696c6573746f6e65000000000000000000000000000000000000000000000060055560048054600160a060020a031916724713dad2a631d121abf9b04f7e3af542ae5e0a17808255600160a060020a031660009081526001602052604090209190915560035561050c806100936000396000f3006080604052600436106100985763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b381146100aa57806318160ddd146100e257806323b872dd14610109578063313ce5671461013357806370a08231146101485780638da5cb5b1461016957806395d89b411461019a578063a9059cbb146101af578063dd62ed3e146101d3575b3480156100a457600080fd5b50600080fd5b3480156100b657600080fd5b506100ce600160a060020a03600435166024356101fa565b604080519115158252519081900360200190f35b3480156100ee57600080fd5b506100f7610298565b60408051918252519081900360200190f35b34801561011557600080fd5b506100ce600160a060020a036004358116906024351660443561029e565b34801561013f57600080fd5b506100f76103a9565b34801561015457600080fd5b506100f7600160a060020a03600435166103af565b34801561017557600080fd5b5061017e6103ca565b60408051600160a060020a039092168252519081900360200190f35b3480156101a657600080fd5b506100f76103d9565b3480156101bb57600080fd5b506100ce600160a060020a03600435166024356103df565b3480156101df57600080fd5b506100f7600160a060020a036004358116906024351661048f565b6000811580610228575033600090815260208181526040808320600160a060020a0387168452909152902054155b151561023357600080fd5b33600081815260208181526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025481565b600160a060020a03808416600090815260208181526040808320338452825280832054938616835260019091528120549091906102e1908463ffffffff6104b816565b600160a060020a038086166000908152600160205260408082209390935590871681522054610316908463ffffffff6104ce16565b600160a060020a03861660009081526001602052604090205561033f818463ffffffff6104ce16565b600160a060020a0380871660008181526020818152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b60035481565b600160a060020a031660009081526001602052604090205490565b600454600160a060020a031681565b60055481565b336000908152600160205260408120546103ff908363ffffffff6104ce16565b3360009081526001602052604080822092909255600160a060020a03851681522054610431908363ffffffff6104b816565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a0391821660009081526020818152604080832093909416825291909152205490565b6000828201838110156104c757fe5b9392505050565b6000828211156104da57fe5b509003905600a165627a7a72305820f974fb95aa49f18a2c2061af3b9e66358becf9ec09dabc1031960936ff8f60d30029"
}