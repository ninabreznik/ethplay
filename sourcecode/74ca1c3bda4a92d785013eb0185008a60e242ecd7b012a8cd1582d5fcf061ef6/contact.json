{
  "address": "0x00000000441378008ea67f4284a57932b1c000a5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "TrueGBP",
  "contractName": "TrueGBP",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "20000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-26\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/Proxy/Proxy.sol\n\n/**\n * @title Proxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\ncontract Proxy {\n    \n    /**\n    * @dev Tells the address of the implementation where every call will be delegated.\n    * @return address of the implementation to which it will be delegated\n    */\n    function implementation() public view returns (address);\n\n    /**\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n    * This function will return whatever the implementation call returns\n    */\n    function() external payable {\n        address _impl = implementation();\n        \n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize)\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n            let size := returndatasize\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n\n// File: contracts/Proxy/UpgradeabilityProxy.sol\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n */\ncontract UpgradeabilityProxy is Proxy {\n    /**\n    * @dev This event will be emitted every time the implementation gets upgraded\n    * @param implementation representing the address of the upgraded implementation\n    */\n    event Upgraded(address indexed implementation);\n\n    // Storage position of the address of the current implementation\n    bytes32 private constant implementationPosition = keccak256(\"trueGBP.proxy.implementation\");\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address impl) {\n        bytes32 position = implementationPosition;\n        assembly {\n          impl := sload(position)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the current implementation\n    * @param newImplementation address representing the new implementation to be set\n    */\n    function _setImplementation(address newImplementation) internal {\n        bytes32 position = implementationPosition;\n        assembly {\n          sstore(position, newImplementation)\n        }\n    }\n\n    /**\n    * @dev Upgrades the implementation address\n    * @param newImplementation representing the address of the new implementation to be set\n    */\n    function _upgradeTo(address newImplementation) internal {\n        address currentImplementation = implementation();\n        require(currentImplementation != newImplementation);\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n}\n\n// File: contracts/Proxy/OwnedUpgradeabilityProxy.sol\n\n/**\n * @title OwnedUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n */\ncontract TrueGBP is UpgradeabilityProxy {\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev Event to show ownership transfer is pending\n    * @param currentOwner representing the address of the current owner\n    * @param pendingOwner representing the address of the pending owner\n    */\n    event NewPendingOwner(address currentOwner, address pendingOwner);\n    \n    // Storage position of the owner and pendingOwner of the contract\n    bytes32 private constant proxyOwnerPosition = keccak256(\"trueGBP.proxy.owner\");\n    bytes32 private constant pendingProxyOwnerPosition = keccak256(\"trueGBP.pending.proxy.owner\");\n\n    /**\n    * @dev the constructor sets the original owner of the contract to the sender account.\n    */\n    constructor() public {\n        _setUpgradeabilityOwner(msg.sender);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyProxyOwner() {\n        require(msg.sender == proxyOwner(), \"only Proxy Owner\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the pending owner.\n    */\n    modifier onlyPendingProxyOwner() {\n        require(msg.sender == pendingProxyOwner(), \"only pending Proxy Owner\");\n        _;\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function proxyOwner() public view returns (address owner) {\n        bytes32 position = proxyOwnerPosition;\n        assembly {\n            owner := sload(position)\n        }\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function pendingProxyOwner() public view returns (address pendingOwner) {\n        bytes32 position = pendingProxyOwnerPosition;\n        assembly {\n            pendingOwner := sload(position)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function _setUpgradeabilityOwner(address newProxyOwner) internal {\n        bytes32 position = proxyOwnerPosition;\n        assembly {\n            sstore(position, newProxyOwner)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function _setPendingUpgradeabilityOwner(address newPendingProxyOwner) internal {\n        bytes32 position = pendingProxyOwnerPosition;\n        assembly {\n            sstore(position, newPendingProxyOwner)\n        }\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    *changes the pending owner to newOwner. But doesn't actually transfer\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferProxyOwnership(address newOwner) external onlyProxyOwner {\n        require(newOwner != address(0));\n        _setPendingUpgradeabilityOwner(newOwner);\n        emit NewPendingOwner(proxyOwner(), newOwner);\n    }\n\n    /**\n    * @dev Allows the pendingOwner to claim ownership of the proxy\n    */\n    function claimProxyOwnership() external onlyPendingProxyOwner {\n        emit ProxyOwnershipTransferred(proxyOwner(), pendingProxyOwner());\n        _setUpgradeabilityOwner(pendingProxyOwner());\n        _setPendingUpgradeabilityOwner(address(0));\n    }\n\n    /**\n    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n    * @param implementation representing the address of the new implementation to be set.\n    */\n    function upgradeTo(address implementation) external onlyProxyOwner {\n        _upgradeTo(implementation);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingProxyOwner\",\"outputs\":[{\"name\":\"pendingOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5061002333640100000000610028810204565b61005d565b604080517f747275654742502e70726f78792e6f776e6572000000000000000000000000008152905190819003601301902055565b61066f8061006c6000396000f3006080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146100a85780630add8140146100e65780633659cfe6146100fb5780635c60da1b1461012b5780639965b3d614610140578063f1739cae14610155575b6000610081610183565b905060405136600082376000803683855af43d806000843e8180156100a4578184f35b8184fd5b3480156100b457600080fd5b506100bd6101b9565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100f257600080fd5b506100bd6101ef565b34801561010757600080fd5b5061012973ffffffffffffffffffffffffffffffffffffffff60043516610225565b005b34801561013757600080fd5b506100bd610183565b34801561014c57600080fd5b506101296102d4565b34801561016157600080fd5b5061012973ffffffffffffffffffffffffffffffffffffffff600435166103fb565b604080517f747275654742502e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190205490565b604080517f747275654742502e70726f78792e6f776e657200000000000000000000000000815290519081900360130190205490565b604080517f747275654742502e70656e64696e672e70726f78792e6f776e657200000000008152905190819003601b0190205490565b61022d6101b9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102c857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b6102d181610524565b50565b6102dc6101ef565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561037757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6f6e6c792070656e64696e672050726f7879204f776e65720000000000000000604482015290519081900360640190fd5b61037f6101ef565b73ffffffffffffffffffffffffffffffffffffffff1661039d6101b9565b73ffffffffffffffffffffffffffffffffffffffff167f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd960405160405180910390a36103ef6103ea6101ef565b6105a4565b6103f960006105d9565b565b6104036101b9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561049e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811615156104c057600080fd5b6104c9816105d9565b7fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b6104f26101b9565b6040805173ffffffffffffffffffffffffffffffffffffffff928316815291841660208301528051918290030190a150565b600061052e610183565b905073ffffffffffffffffffffffffffffffffffffffff808216908316141561055657600080fd5b61055f8261060e565b60405173ffffffffffffffffffffffffffffffffffffffff8316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b604080517f747275654742502e70726f78792e6f776e6572000000000000000000000000008152905190819003601301902055565b604080517f747275654742502e70656e64696e672e70726f78792e6f776e657200000000008152905190819003601b01902055565b604080517f747275654742502e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c019020555600a165627a7a72305820c2bdf73159855e7c448186eab032b40fadf7442462586757c0c0cf1ffa28abfe0029"
}