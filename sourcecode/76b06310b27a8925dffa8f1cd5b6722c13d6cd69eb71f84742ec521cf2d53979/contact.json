{
  "address": "0xeb96f4caaea05e69f41c25ae42b58ffff7df628d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EONToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-29\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param _owner The address to query the the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev transfer token for a specified address\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    uint256 _allowance = allowed[_from][msg.sender];\n    require(_to != address(0));\n    require (_value <= _allowance);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract EONToken is StandardToken {\n  string public constant name = \"EOS Network\";\n  string public constant symbol = \"EON\";\n  uint8 public constant decimals = 18;\n  mapping(address => bool) public claimed;\n  event Claim(address indexed from);\n\n  constructor() public {\n    totalSupply = 1000000000000000000000000000;\n    balances[msg.sender] = totalSupply;\n  }\n\n  function claim() public returns (bool) {\n    claimed[msg.sender] = true;\n    emit Claim(msg.sender);\n    return true;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506b033b2e3c9fd0803ce80000006000818155338152600160205260409020556106b78061003f6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c65780634e71d92d146101f157806370a082311461020657806395d89b4114610227578063a9059cbb1461023c578063c884ef8314610260578063dd62ed3e14610281575b600080fd5b3480156100bf57600080fd5b506100c86102a8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a03600435166024356102df565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a610381565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a0360043581169060243516604435610387565b3480156101d257600080fd5b506101db6104bb565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b506101616104c0565b34801561021257600080fd5b5061018a600160a060020a036004351661050a565b34801561023357600080fd5b506100c8610525565b34801561024857600080fd5b50610161600160a060020a036004351660243561055c565b34801561026c57600080fd5b50610161600160a060020a0360043516610623565b34801561028d57600080fd5b5061018a600160a060020a0360043581169060243516610638565b60408051808201909152600b81527f454f53204e6574776f726b000000000000000000000000000000000000000000602082015281565b600081158061030f5750336000908152600260209081526040808320600160a060020a0387168452909152902054155b151561031a57600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005481565b600160a060020a0380841660009081526002602090815260408083203384529091528120549091841615156103bb57600080fd5b808311156103c857600080fd5b600160a060020a0385166000908152600160205260409020546103f1908463ffffffff61066316565b600160a060020a038087166000908152600160205260408082209390935590861681522054610426908463ffffffff61067516565b600160a060020a03851660009081526001602052604090205561044f818463ffffffff61066316565b600160a060020a03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b601281565b33600081815260036020526040808220805460ff19166001179055519091907f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc908390a250600190565b600160a060020a031660009081526001602052604090205490565b60408051808201909152600381527f454f4e0000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561057357600080fd5b33600090815260016020526040902054610593908363ffffffff61066316565b3360009081526001602052604080822092909255600160a060020a038516815220546105c5908363ffffffff61067516565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60036020526000908152604090205460ff1681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561066f57fe5b50900390565b60008282018381101561068457fe5b93925050505600a165627a7a7230582018809228963e48b06a8155943c2591f849cc10e4eb20265cce75c4b8994bd8560029"
}