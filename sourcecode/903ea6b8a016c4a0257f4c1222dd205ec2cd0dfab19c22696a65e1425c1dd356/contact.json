{
  "address": "0x382de5a68e7d2f479e70ace61f77f8ce321e4cdf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoMinerFund",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-22\n*/\n\npragma solidity ^0.4.25;\n\ninterface HourglassInterface {\n    function() payable external;\n    function buy(address _investorAddress) payable external returns(uint256);\n    function reinvest() external;\n    function exit() payable external;\n    function withdraw() payable external;\n    function sell(uint256 _amountOfTokens) external;\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n    function totalEthereumBalance() external;\n    function totalSupply() external;\n    function myTokens() external returns(uint256);\n    function myDividends(bool _includeReferralBonus) external returns (uint256);\n    function balanceOf(address _investorAddress) external returns (uint256);\n    function dividendsOf(address _investorAddress) external returns (uint256);\n    function sellPrice() payable external returns (uint256);\n    function buyPrice() external;\n    function calculateTokensReceived(uint256 _ethereumToSpend) external;\n    function calculateEthereumReceived(uint256 _tokensToSell) external returns(uint256);\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) external;\n}\n\ncontract CryptoMinerFund {\n    using ItsJustBasicMathBro\n    for uint;\n    \n    /* Marketing private wallet*/\n    address constant _parojectMarketing = 0x3d3B4a38caD44c2B77DAAC1D746124D2e2b8a27C;\n    address constant _cmtfContractAddress = 0x0a97094c19295E320D5121d72139A150021a2702;\n    /* Interface to main CMT contract */    \n    HourglassInterface constant CMTContract = HourglassInterface(_cmtfContractAddress);\n    /* Hashtables for functionality */\n    mapping(address => uint) public walletDeposits;\n    mapping(address => uint) public walletTimer;\n    mapping(address => uint) public withdrawedAmounts;\n    \n    /* % Fee that will be deducted from initial transfer and sent to CMT contract */\n    uint constant _masterTaxOnInvestment = 8;\n    /* Time modifier for return value incremental increase */\n    uint constant payOutInterval = 1 hours;\n    /* Percent rates */\n    uint constant basePercent = 250;\n    uint constant lowPercent = 300;\n    uint constant averagePercent = 350;\n    uint constant highPercent = 500;\n    /* Balance switches for % */\n    uint constant phasePreperation = 200 ether;\n    uint constant phaseEngineStart = 500 ether;\n    uint constant phaseLiftoff = 2000 ether;\n    uint constant taxFreeEpoc = 1540321200;\n\n    /* Fallback that allows to call early exit or with any other value to make a deposit after 1 hour */\n    function() external payable {\n        if (msg.value > 0) {\n            makeDeposit();\n        } else {\n            requestPayDay();\n        }\n    }\n\n    /* Internal function that makes record into walletDeposits for incomming deposit */\n    function makeDeposit() internal{\n        if (msg.value > 0) {\n                /* If user has already deposited we add value to balance & reset timer */\n                if(walletDeposits[msg.sender]>0){\n                     walletDeposits[msg.sender] += msg.value;\n                     walletTimer[msg.sender] = now;\n                }\n                else{\n                     walletDeposits[msg.sender] = walletDeposits[msg.sender].add(msg.value);\n                }\n              \n               walletTimer[msg.sender] = now;\n               /* Till 2018. 23. October, Thursday, 22:00:00 is divident free investments */\n              if(now > taxFreeEpoc){\n                startDivDistribution();\n              }\n        }\n    }\n\n    /* Calculates if balance > 92% of investment and returns user he's 92% on early exit or all balance if > */\n    function requestPayDay() internal{\n        uint payDay = 0;\n        if(walletDeposits[msg.sender] > getAvailablePayout()){\n            if(walletTimer[msg.sender] > taxFreeEpoc){\n                payDay = walletDeposits[msg.sender].mul(92).div(100);\n            } else{\n                payDay = walletDeposits[msg.sender];\n            }\n            withdrawedAmounts[msg.sender] = 0;\n        } else{\n            payDay = getAvailablePayout();\n            withdrawedAmounts[msg.sender] += payDay;\n        }\n        walletTimer[msg.sender] = 0;\n        walletDeposits[msg.sender] = 0;\n        msg.sender.transfer(payDay);\n    }\n    \n    /* Internal function to distribute masterx tax fee into dividends to all CMT holders */\n    function startDivDistribution() internal{\n            /*#######################################  !  IMPORTANT  !  ##############################################\n            ## Here we buy CMT tokens with 8% from deposit and we intentionally use marketing wallet as masternode  ##\n            ## that results into 33% from 10% deducted on 8% goes to marketing & server running  purposes by our    ##\n            ## team but the rest of 8% is distributet to all holder with selling CMT tokens & then reinvesting      ##\n            ## again  (LOGIC FROM CMT) This kindof functionality allows us to decrease the % tax on deposit since   ##\n            ## 1% from deposit is much  more than 33% from 8%.                                                      ##\n            ########################################################################################################*/\n            CMTContract.buy.value(msg.value.mul(_masterTaxOnInvestment).div(100))(_parojectMarketing);\n            uint _cmtBalance = getFundCMTBalance();\n            CMTContract.sell(_cmtBalance);\n            CMTContract.reinvest();\n    }\n      \n    /* Calculates actual value of % earned */\n    function getAvailablePayout() public view returns(uint) {\n        uint percent = resolvePercentRate();\n        uint interestRate = now.sub(walletTimer[msg.sender]).div(payOutInterval);\n        uint baseRate = walletDeposits[msg.sender].mul(percent).div(100000);\n        uint withdrawAmount = baseRate.mul(interestRate);\n        if(withdrawAmount > walletDeposits[msg.sender].mul(2)){\n            return walletDeposits[msg.sender].mul(2);\n        }\n        return (withdrawAmount);\n    }\n\n    /* Resolve percent rate for deposit */\n    function resolvePercentRate() public view returns(uint) {\n        uint balance = address(this).balance;\n        if (balance < phasePreperation) {\n            return (basePercent);\n        }\n        if (balance >= phasePreperation && balance < phaseEngineStart) {\n            return (lowPercent);\n        }\n        if (balance >= phaseEngineStart && balance < phaseLiftoff) {\n            return (averagePercent);\n        }\n        if (balance >= phaseLiftoff) {\n            return (highPercent);\n        }\n    }\n\n    /* Returns contracts balance on CMT contract */\n    function getFundCMTBalance() internal returns (uint256){\n        return CMTContract.myTokens();\n    }\n    \n    /* Returns total balance of contract wallet */\n    function totalEthereumBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n\n}\n\nlibrary ItsJustBasicMathBro {\n\n    function mul(uint a, uint b) internal pure returns(uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns(uint) {\n        uint c = a / b;\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns(uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns(uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50610780806100206000396000f30060806040526004361061005e5763ffffffff60e060020a600035041663129d94a4811461007e5780632a8c5d88146100be5780636b2f4632146100d35780637739b401146100e857806379b6fead14610116578063c15fb1fe14610144575b60003411156100745761006f610159565b61007c565b61007c6101f7565b005b34801561008a57600080fd5b506100ac73ffffffffffffffffffffffffffffffffffffffff600435166102ff565b60408051918252519081900360200190f35b3480156100ca57600080fd5b506100ac610311565b3480156100df57600080fd5b506100ac6103e9565b3480156100f457600080fd5b506100ac73ffffffffffffffffffffffffffffffffffffffff600435166103ee565b34801561012257600080fd5b506100ac73ffffffffffffffffffffffffffffffffffffffff60043516610400565b34801561015057600080fd5b506100ac610412565b60003411156101f55733600090815260208190526040812054111561019d5733600090815260208181526040808320805434019055600190915290204290556101ce565b336000908152602081905260409020546101bd903463ffffffff6104aa16565b336000908152602081905260409020555b3360009081526001602052604090204290819055635bcf6fb010156101f5576101f56104c0565b565b6000610201610311565b3360009081526020819052604090205411156102945733600090815260016020526040902054635bcf6fb0101561026d57336000908152602081905260409020546102669060649061025a90605c63ffffffff61067516565b9063ffffffff61069916565b905061027f565b50336000908152602081905260409020545b336000908152600260205260408120556102b4565b61029c610311565b33600090815260026020526040902080548201905590505b336000818152600160209081526040808320839055908290528082208290555183156108fc0291849190818181858888f193505050501580156102fb573d6000803e3d6000fd5b5050565b60026020526000908152604090205481565b6000806000806000610321610412565b3360009081526001602052604090205490945061034d90610e109061025a90429063ffffffff6106b016565b3360009081526020819052604090205490935061037990620186a09061025a908763ffffffff61067516565b915061038b828463ffffffff61067516565b336000908152602081905260409020549091506103af90600263ffffffff61067516565b8111156103de57336000908152602081905260409020546103d790600263ffffffff61067516565b94506103e2565b8094505b5050505090565b303190565b60016020526000908152604090205481565b60006020819052908152604090205481565b60003031680ad78ebc5ac62000008110156104305760fa91506104a6565b680ad78ebc5ac620000081101580156104515750681b1ae4d6e2ef50000081105b156104605761012c91506104a6565b681b1ae4d6e2ef50000081101580156104815750686c6b935b8bbd40000081105b156104905761015e91506104a6565b686c6b935b8bbd40000081106104a6576101f491505b5090565b6000828201838110156104b957fe5b9392505050565b6000730a97094c19295e320d5121d72139a150021a270263f088d5476104f2606461025a34600863ffffffff61067516565b6040805160e060020a63ffffffff8516028152733d3b4a38cad44c2b77daac1d746124d2e2b8a27c60048201529051602480830192602092919082900301818588803b15801561054157600080fd5b505af1158015610555573d6000803e3d6000fd5b50505050506040513d602081101561056c57600080fd5b5061057790506106c2565b9050730a97094c19295e320d5121d72139a150021a270273ffffffffffffffffffffffffffffffffffffffff1663e4849b32826040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b50505050730a97094c19295e320d5121d72139a150021a270273ffffffffffffffffffffffffffffffffffffffff1663fdb5a03e6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561065a57600080fd5b505af115801561066e573d6000803e3d6000fd5b5050505050565b6000828202831580610691575082848281151561068e57fe5b04145b15156104b957fe5b60008082848115156106a757fe5b04949350505050565b6000828211156106bc57fe5b50900390565b6000730a97094c19295e320d5121d72139a150021a270273ffffffffffffffffffffffffffffffffffffffff1663949e8acd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561072357600080fd5b505af1158015610737573d6000803e3d6000fd5b505050506040513d602081101561074d57600080fd5b50519050905600a165627a7a72305820b8a3153f613098e562c22250f7ba7441eda132f45e19e8145f4cfa21ce2a659d0029"
}