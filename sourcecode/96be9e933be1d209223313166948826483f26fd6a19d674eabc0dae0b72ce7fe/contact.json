{
  "address": "0xb061021d6ec56942e6869eede86af3ca617dfd0c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "umbrellaLlotto",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-22\n*/\n\npragma solidity ^0.4.25;\n\n/*\n    Lambo Lotto Win | Dapps game for real crypto human\n    site: https://llotto.win/\n    telegram: https://t.me/Lambollotto/\n    discord: https://discord.gg/VWV5jeW/\n    \n    win 122%, bet 0.15 ETH, 5 players 4 winners\n    win 131%, bet 0.10 ETH, 4 players 3 winners\n    win 144%, bet 0.05 ETH, 3 players 2 winners\n    win 194%, bet 0.01 ETH, 2 players 1 winners\n*/    \n    \ncontract umbrellaLlotto {\n    \n    address public tech = msg.sender;\n    address public promo = msg.sender;\n\n    uint private techGet = 0;\n    uint private promoGet = 0;\n    \n    address[] public placesFirst;\n    address[] public placesSecond;\n    address[] public placesThird;\n    address[] public placesFour;\n    \n    uint private seed;\n    \n    uint public totalIn;\n    \n    uint public roundPlacesFirst = 1;\n    uint public roundPlacesSecond = 1;\n    uint public roundPlacesThird = 1;\n    uint public roundPlacesFour = 1;\n\n    event playerFirstEvent(uint numpl, address pl, uint indexed round);\n    event playerSecondEvent(uint numpl, address pl, uint indexed round);\n    event playerThirdEvent(uint numpl, address pl, uint indexed round);\n    event playerFourEvent(uint numpl, address pl, uint indexed round);\n\n    event placesFirstEvent(address indexed pl, uint round, bool win);\n    event placesSecondEvent(address indexed pl, uint round, bool win);\n    event placesThirdEvent(address indexed pl, uint round, bool win);\n    event placesFourEvent(address indexed pl, uint round, bool win);\n    \n    // returns a pseudo-random number\n    function random(uint lessThan) internal returns (uint) {\n        return uint(sha256(abi.encodePacked(\n            blockhash(block.number - lessThan - 1),\n            msg.sender,\n            seed += (block.difficulty % lessThan)\n        ))) % lessThan;\n    }\n    \n    function() external payable {\n        \n        require(msg.sender == tx.origin);\n        require(msg.value == 0.15 ether || msg.value == 0.1 ether || msg.value == 0.05 ether || msg.value == 0.01 ether);\n        \n        totalIn += msg.value;\n        \n        if(msg.value == 0.01 ether) // 1 from 2 players get 194%\n        {\n            placesFirst.push(msg.sender);\n            emit playerFirstEvent(placesFirst.length , msg.sender, roundPlacesFirst);\n            \n            if (placesFirst.length == 2) {\n                uint loserF = random(placesFirst.length);\n                for (uint iF = 0; iF < placesFirst.length; iF++) {\n                    if (iF != loserF) {\n                        placesFirst[iF].transfer(0.0194 ether);\n                        emit placesFirstEvent(placesFirst[iF], roundPlacesFirst, true);\n                    }else{\n                        emit placesFirstEvent(placesFirst[iF], roundPlacesFirst, false);\n                    }\n                }\n                \n                promoGet += 0.0004 ether;\n                techGet += 0.0002 ether;\n                \n                delete placesFirst;\n                roundPlacesFirst++;\n            }\n        }\n\n        if(msg.value == 0.05 ether) // 2 from 3 players get 144%\n        {\n            placesSecond.push(msg.sender);\n            emit playerSecondEvent(placesSecond.length, msg.sender, roundPlacesSecond);\n            \n            if (placesSecond.length == 3) {\n                uint loserS = random(placesSecond.length);\n                for (uint iS = 0; iS < placesSecond.length; iS++) {\n                    if (iS != loserS) {\n                        placesSecond[iS].transfer(0.072 ether);\n                        emit placesSecondEvent(placesSecond[iS], roundPlacesSecond, true);\n                    }else{\n                        emit placesSecondEvent(placesSecond[iS], roundPlacesSecond, false);\n                    }\n                }\n\n                promoGet += 0.004 ether;\n                techGet += 0.002 ether;\n                \n                delete placesSecond;\n                roundPlacesSecond++;\n            }\n        }\n        \n        if(msg.value == 0.1 ether) // 3 from 4 players get 131%\n        {\n            placesThird.push(msg.sender);\n            emit playerThirdEvent(placesThird.length, msg.sender, roundPlacesThird);\n            \n            if (placesThird.length == 4) {\n                uint loserT = random(placesThird.length);\n                for (uint iT = 0; iT < placesThird.length; iT++) {\n                    if (iT != loserT) {\n                        placesThird[iT].transfer(0.131 ether);\n                        emit placesThirdEvent(placesThird[iT], roundPlacesThird, true);\n                    }else{\n                        emit placesThirdEvent(placesThird[iT], roundPlacesThird, false);\n                    }\n                }\n\n                promoGet += 0.004 ether;\n                techGet += 0.003 ether;\n                \n                delete placesThird;\n                roundPlacesThird++;\n            }\n        } \n        \n        if(msg.value == 0.15 ether) // 4 from 5 players get 122%\n        {\n            placesFour.push(msg.sender);\n            emit playerFourEvent(placesFour.length, msg.sender, roundPlacesFour);\n            \n            if (placesFour.length == 5) {\n                uint loserFr = random(placesFour.length);\n                for (uint iFr = 0; iFr < placesFour.length; iFr++) {\n                    if (iFr != loserFr) {\n                        placesFour[iFr].transfer(0.183 ether);\n                        emit placesFourEvent(placesFour[iFr], roundPlacesFour, true);\n                    }else{\n                        emit placesFourEvent(placesFour[iFr], roundPlacesFour, false);\n                    }\n                }\n\n                promoGet += 0.012 ether;\n                techGet += 0.006 ether;\n                \n                delete placesFour;\n                roundPlacesFour++;\n            }\n        }        \n\n    }\n    \n    function promoGetGift() public{\n        require(msg.sender == promo);\n        if(promo.send(promoGet)){\n            promoGet = 0;\n        }    \n    } \n    \n    function techGetGift() public{\n        require(msg.sender == tech);\n        if(tech.send(techGet)){\n            techGet = 0;\n        }\n    }   \n    \n    function setPromoGet(address _newPromoGet)\n        public{\n        require(msg.sender == tech);\n        require(msg.sender == tx.origin);\n        promo =  _newPromoGet;\n    }    \n}",
  "bytecode": "60806040526000805433600160a060020a031991821681178355600180549092161781556002829055600391909155600a819055600b819055600c819055600d5534801561004c57600080fd5b50610e698061005c6000396000f3006080604052600436106100cf5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095f2f1681146109fd5780630fcb27a314610a2e57806311e1743714610a555780631f46045814610a6d5780634dff67c314610a845780635b6e3f6b14610a995780635ed4513e14610aae578063909da93214610ac65780639e3171c614610ade578063de80b0a514610af3578063e221c87114610b08578063e3cb134c14610b1d578063ee55973514610b3e578063fc8e058a14610b53575b6000808080808080803332146100e457600080fd5b34670214e8348c4f0000148061010157503467016345785d8a0000145b8061011257503466b1a2bc2ec50000145b80610123575034662386f26fc10000145b151561012e57600080fd5b6009805434908101909155662386f26fc100001415610366576004805460018101825560008290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff191633908117909155600a54915460408051918252602082019290925281517fc15a5ebe9ac4710335ee787d0c601bc5d9fddeabfbf40950d6838cc9b008973a929181900390910190a260045460021415610366576004546101f090610b6b565b9750600096505b600454871015610333578688146102c357600480548890811061021657fe5b6000918252602082200154604051600160a060020a0390911691906644ec327ca480009082818181858883f19350505050158015610258573d6000803e3d6000fd5b50600480548890811061026757fe5b60009182526020918290200154600a54604080519182526001938201939093528251600160a060020a03909216927fe5374b857371c6a17789cb673956992baba5430cdf183cba204ceda6e3a6c19c92918290030190a2610328565b60048054889081106102d157fe5b6000918252602080832090910154600a5460408051918252928101939093528151600160a060020a03909116927fe5374b857371c6a17789cb673956992baba5430cdf183cba204ceda6e3a6c19c92908290030190a25b6001909601956101f7565b6003805466016bcc41e900000190556002805465b5e620f4800001905561035c60046000610dfb565b600a805460010190555b3466b1a2bc2ec500001415610595576005805460018101825560008290527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155600b54915460408051918252602082019290925281517f20e5c2b8d16eeca5c4825389b551f15c9cf0f69f996e40bd20545ea21d260d68929181900390910190a2600554600314156105955760055461041e90610b6b565b9550600094505b600554851015610561578486146104f157600580548690811061044457fe5b6000918252602082200154604051600160a060020a03909116919066ffcb9e57d400009082818181858883f19350505050158015610486573d6000803e3d6000fd5b50600580548690811061049557fe5b60009182526020918290200154600b54604080519182526001938201939093528251600160a060020a03909216927f6af864d0d05077db3109707b26ebca31d2ee7452991c00d6ee2c495171c8019992918290030190a2610556565b60058054869081106104ff57fe5b6000918252602080832090910154600b5460408051918252928101939093528151600160a060020a03909116927f6af864d0d05077db3109707b26ebca31d2ee7452991c00d6ee2c495171c8019992908290030190a25b600190940193610425565b60038054660e35fa931a00000190556002805466071afd498d000001905561058b60056000610dfb565b600b805460010190555b3467016345785d8a000014156107c6576006805460018101825560008290527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff191633908117909155600c54915460408051918252602082019290925281517f437b65567122b327430db147d4455256fa9c51bec39c66ee5b7b3cad55d049c7929181900390910190a2600654600414156107c65760065461064e90610b6b565b9350600092505b6006548310156107925782841461072257600680548490811061067457fe5b6000918252602082200154604051600160a060020a0390911691906701d167ce519380009082818181858883f193505050501580156106b7573d6000803e3d6000fd5b5060068054849081106106c657fe5b60009182526020918290200154600c54604080519182526001938201939093528251600160a060020a03909216927f053cca7a3427e84097b7855b6685a27afb16fa81e8dd68b53bdc62e74edcaa2392918290030190a2610787565b600680548490811061073057fe5b6000918252602080832090910154600c5460408051918252928101939093528151600160a060020a03909116927f053cca7a3427e84097b7855b6685a27afb16fa81e8dd68b53bdc62e74edcaa2392908290030190a25b600190920191610655565b60038054660e35fa931a000001905560028054660aa87bee5380000190556107bc60066000610dfb565b600c805460010190555b34670214e8348c4f000014156109f3576007805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff191633908117909155600d54915460408051918252602082019290925281517e1747592ca611bc839d65e87e6739de9829cec580e93bd376c3f9a9c6b7176c929181900390910190a2600754600514156109f35760075461087e90610b6b565b9150600090505b6007548110156109bf578082146109525760078054829081106108a457fe5b6000918252602082200154604051600160a060020a03909116919067028a2587c9e580009082818181858883f193505050501580156108e7573d6000803e3d6000fd5b5060078054829081106108f657fe5b60009182526020918290200154600d54604080519182526001938201939093528251600160a060020a03909216927ff0eb5ad6932d3b85823104d840f7b9ed92518b4e28b91e0b9afcce2c5e2ed0c092918290030190a26109b7565b600780548290811061096057fe5b6000918252602080832090910154600d5460408051918252928101939093528151600160a060020a03909116927ff0eb5ad6932d3b85823104d840f7b9ed92518b4e28b91e0b9afcce2c5e2ed0c092908290030190a25b600101610885565b60038054662aa1efb94e000001905560028054661550f7dca700000190556109e960076000610dfb565b600d805460010190555b5050505050505050005b348015610a0957600080fd5b50610a12610c7f565b60408051600160a060020a039092168252519081900360200190f35b348015610a3a57600080fd5b50610a43610c8e565b60408051918252519081900360200190f35b348015610a6157600080fd5b50610a12600435610c94565b348015610a7957600080fd5b50610a82610cbc565b005b348015610a9057600080fd5b50610a43610d0b565b348015610aa557600080fd5b50610a43610d11565b348015610aba57600080fd5b50610a12600435610d17565b348015610ad257600080fd5b50610a12600435610d25565b348015610aea57600080fd5b50610a43610d33565b348015610aff57600080fd5b50610a12610d39565b348015610b1457600080fd5b50610a43610d48565b348015610b2957600080fd5b50610a82600160a060020a0360043516610d4e565b348015610b4a57600080fd5b50610a82610da0565b348015610b5f57600080fd5b50610a12600435610ded565b600081600260018443030340338544811515610b8357fe5b06600860008282540192505081905560405160200180846000191660001916815260200183600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140182815260200193505050506040516020818303038152906040526040518082805190602001908083835b60208310610c175780518252601f199092019160209182019101610bf8565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015610c58573d6000803e3d6000fd5b5050506040513d6020811015610c6d57600080fd5b5051811515610c7857fe5b0692915050565b600054600160a060020a031681565b600b5481565b6004805482908110610ca257fe5b600091825260209091200154600160a060020a0316905081565b600154600160a060020a03163314610cd357600080fd5b600154600354604051600160a060020a039092169181156108fc0291906000818181858888f1935050505015610d095760006003555b565b600d5481565b600a5481565b6005805482908110610ca257fe5b6007805482908110610ca257fe5b600c5481565b600154600160a060020a031681565b60095481565b600054600160a060020a03163314610d6557600080fd5b333214610d7157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610db757600080fd5b60008054600254604051600160a060020a039092169281156108fc029290818181858888f1935050505015610d09576000600255565b6006805482908110610ca257fe5b5080546000825590600052602060002090810190610e199190610e1c565b50565b610e3a91905b80821115610e365760008155600101610e22565b5090565b905600a165627a7a72305820b7ed4177507b1ef32f04862918dfa5d51672cfbafaff47fb229baa9a7e906fc40029"
}