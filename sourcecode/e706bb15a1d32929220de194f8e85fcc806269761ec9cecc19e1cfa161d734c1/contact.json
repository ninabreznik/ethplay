{
  "address": "0xc8e6cd948e3f6c586c9af12ea23c504d0933e19a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IcoToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-26\n*/\n\npragma solidity 0.4.21;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/IcoToken.sol\n\n/**\n * @title FCTF 10 ICO token\n * @dev Hardcaped ERC20 token, not mintable.\n */\ncontract IcoToken is StandardToken, BurnableToken, Ownable {\n\n    string public constant name = \"FCTF 10 ICO\";\n    string public constant symbol = \"10ICO\";\n    uint8 public constant decimals = 8;\n    \n    uint256 public constant INITIAL_SUPPLY = 65000000; // also hardcap\n\n    /**\n    * @dev The IcoToken constructor.\n    * @dev All initial tokens are given to this contract and the owner has the right to distribute them.\n    */\n    function IcoToken() public {\n        totalSupply_ = INITIAL_SUPPLY * (10**uint256(decimals));\n        // mint all tokens\n        balances[this] = totalSupply_;\n        emit Transfer(address(0), this, totalSupply_);\n\n        // owner has the right to use them\n        allowed[this][owner] = balances[this];\n        emit Approval(this, owner, balances[this]);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @dev Also gives the new owner allowance to spend all this contract's tokens.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        super.transferOwnership(newOwner);\n        this.approve(msg.sender, 0);\n        this.approve(newOwner, 0);\n        this.approve(newOwner, balances[this]);\n    }\n\n    /**\n     * @dev Burns all tokens owned by this contract.\n     */\n    function burnUnused() public onlyOwner {\n        this.approve(msg.sender, 0);\n        this.burn(balances[this]);\n    }\n\n    /**\n     * @dev Transfers the current balance to the owner and terminates the contract.\n     */\n    function destroy() public onlyOwner {\n        selfdestruct(owner);\n    }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a0390811691909117909155661717b72f0a4000600181905530909116600081815260208190526040808220849055919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a3600160a060020a0330811660008181526020818152604080832054600283528184206003805488168652908452828520829055548585529390925291909316927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3610d68806101096000396000f3006060604052600436106100d75763ffffffff60e060020a60003504166306fdde0381146100dc578063095ea7b31461016657806318160ddd1461019c57806323b872dd146101c15780632ff2e9dc146101e9578063313ce567146101fc57806342966c6814610225578063661884631461023d57806370a082311461025f57806383197ef01461027e5780638da5cb5b1461029157806395d89b41146102c0578063a9059cbb146102d3578063d36e9ac3146102f5578063d73dd62314610308578063dd62ed3e1461032a578063f2fde38b1461034f575b600080fd5b34156100e757600080fd5b6100ef61036e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012b578082015183820152602001610113565b50505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157600080fd5b610188600160a060020a03600435166024356103a5565b604051901515815260200160405180910390f35b34156101a757600080fd5b6101af610411565b60405190815260200160405180910390f35b34156101cc57600080fd5b610188600160a060020a0360043581169060243516604435610417565b34156101f457600080fd5b6101af610597565b341561020757600080fd5b61020f61059f565b60405160ff909116815260200160405180910390f35b341561023057600080fd5b61023b6004356105a4565b005b341561024857600080fd5b610188600160a060020a03600435166024356105b1565b341561026a57600080fd5b6101af600160a060020a03600435166106ab565b341561028957600080fd5b61023b6106c6565b341561029c57600080fd5b6102a46106ef565b604051600160a060020a03909116815260200160405180910390f35b34156102cb57600080fd5b6100ef6106fe565b34156102de57600080fd5b610188600160a060020a0360043516602435610735565b341561030057600080fd5b61023b610847565b341561031357600080fd5b610188600160a060020a0360043516602435610935565b341561033557600080fd5b6101af600160a060020a03600435811690602435166109d9565b341561035a57600080fd5b61023b600160a060020a0360043516610a04565b60408051908101604052600b81527f464354462031302049434f000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b6000600160a060020a038316151561042e57600080fd5b600160a060020a03841660009081526020819052604090205482111561045357600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561048657600080fd5b600160a060020a0384166000908152602081905260409020546104af908363ffffffff610b7f16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546104e4908363ffffffff610b9116565b600160a060020a038085166000908152602081815260408083209490945587831682526002815283822033909316825291909152205461052a908363ffffffff610b7f16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6303dfd24081565b600881565b6105ae3382610ba4565b50565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561060e57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610645565b61061e818463ffffffff610b7f16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a039081169116146106e157600080fd5b600354600160a060020a0316ff5b600354600160a060020a031681565b60408051908101604052600581527f313049434f000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561074c57600080fd5b600160a060020a03331660009081526020819052604090205482111561077157600080fd5b600160a060020a03331660009081526020819052604090205461079a908363ffffffff610b7f16565b600160a060020a0333811660009081526020819052604080822093909355908516815220546107cf908363ffffffff610b9116565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b60035433600160a060020a0390811691161461086257600080fd5b30600160a060020a031663095ea7b333600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108b757600080fd5b5af115156108c457600080fd5b50505060405180515050600160a060020a03301660008181526020819052604090819020546342966c68915160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561092357600080fd5b5af1151561093057600080fd5b505050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461096d908363ffffffff610b9116565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610a1f57600080fd5b610a2881610ca1565b30600160a060020a031663095ea7b333600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a7d57600080fd5b5af11515610a8a57600080fd5b50505060405180515050600160a060020a03301663095ea7b382600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610ae957600080fd5b5af11515610af657600080fd5b50505060405180515050600160a060020a033016600081815260208190526040908190205463095ea7b3918491905160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b6557600080fd5b5af11515610b7257600080fd5b5050506040518051505050565b600082821115610b8b57fe5b50900390565b81810182811015610b9e57fe5b92915050565b600160a060020a038216600090815260208190526040902054811115610bc957600080fd5b600160a060020a038216600090815260208190526040902054610bf2908263ffffffff610b7f16565b600160a060020a038316600090815260208190526040902055600154610c1e908263ffffffff610b7f16565b600155600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a26000600160a060020a0383167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b60035433600160a060020a03908116911614610cbc57600080fd5b600160a060020a0381161515610cd157600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582086ddbc60e75a3b68b1c117ad8588273671f620765e1a9bfd282b78402d3a335f0029"
}