{
  "address": "0x0fbe7b60a90350e326b1fd00d0b20355a277842e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ActiveBitcoinEtherCertificate",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\npragma solidity 0.5.7;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * FUNCTIONS, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n\n    // MODIFIERS\n\n    /// @dev Throws if called by any account other than the owner.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only Owner\");\n        _;\n    }\n\n    /// @dev Throws if called by any account other than the new owner.\n    modifier onlyNewOwner() {\n        require(msg.sender == newOwner, \"Only New Owner\");\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != address(0), \"Address is Null\");\n        _;\n    }\n\n    // CONSTRUCTOR\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n    /// @param _newOwner The address to transfer ownership to.\n    \n    function transferOwnership(address _newOwner) public notNull(_newOwner) onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    /// @dev Allow the new owner to claim ownership and so proving that the newOwner is valid.\n    function acceptOwnership() public onlyNewOwner {\n        address oldOwner = owner;\n        owner = newOwner;\n        newOwner = address(0);\n        emit OwnershipTransferred(oldOwner, owner);\n    }\n\n    // EVENTS\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n\n    bool public paused = false;\n\n    // MODIFIERS\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"only when not paused\");\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused, \"only when paused\");\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n\n    // EVENTS\n\n    event Pause();\n\n    event Unpause();\n}\n\n\n// Abstract contract for the full ERC 20 Token standard\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n\ncontract ERC20Interface {\n    /// total amount of tokens\n    function totalSupply() public view returns(uint256 supply);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    // EVENTS\n    \n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // require(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // require(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20Token is Ownable, ERC20Interface {\n\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 internal _totalSupply;\n    \n    // CONSTRUCTOR\n\n    constructor(uint256 initialAmount) public {\n        if (initialAmount == 0)\n            return;\n        balances[msg.sender] = initialAmount;\n        _totalSupply = initialAmount;\n        emit Transfer(address(0), msg.sender, initialAmount);\n    }\n\n    // EXTERNAL FUNCTIONS\n\n    // PUBLIC FUNCTIONS\n\n    function totalSupply() public view returns(uint256 supply)\n    {\n        return _totalSupply;\n    }\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n\n        return transferInternal(msg.sender, _to, _value);\n    }\n\n    /* ALLOW FUNCTIONS */\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    */\n   \n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens   \n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public notNull(_spender) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowed[_from][msg.sender], \"insufficient tokens\");\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        return transferInternal(_from, _to, _value);\n    }\n\n    /**\n     * @dev Returns balance of the `_owner`.\n     *\n     * @param _owner   The address whose balance will be returned.\n     * @return balance Balance of the `_owner`.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @notice internal send `_value` token to `_to` from `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferInternal(address _from, address _to, uint256 _value) internal notNull(_from) notNull(_to) returns (bool) {\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }   \n\n    // PRIVATE FUNCTIONS\n}\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is ERC20Token, Pausable {\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\n        return super.transfer(_to, _value);\n    }\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\n        return super.approve(_spender, _value);\n    }\n}\n\n\n// module handling minting and burning of tokens and administration of minters\n\ncontract MintableToken is PausableToken\n{\n    using SafeMath for uint256;\n\n    mapping(address => bool) internal minters; // list of allowed minters\n\n    // MODIFIERS\n\n    modifier onlyMinter {\n        require(minters[msg.sender], \"Caller not minter\");\n        _; \n    }\n\n    // CONSTRUCTOR\n\n    constructor() public {\n        addMinter(msg.sender);   // Set the owner as minter\n    }\n\n    // EXTERNAL FUNCTIONS\n\n    // PUBLIC FUNCTIONS\n\n    /// @dev  mint tokens to address\n    /// @notice mint `_value` token to `_to`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be minted\n    function mint(address _to, uint256 _value) public onlyMinter {\n        mintInternal(_to, _value);\n    }\n\n    /// @dev add minter\n    /// @notice add minter address `_newMinter`\n    /// @param _newMinter The address of the minter to add\n    function addMinter(address _newMinter) public notNull(_newMinter) onlyOwner {\n        if (minters[_newMinter])\n            return;\n        minters[_newMinter] = true;\n        emit AddMinter(_newMinter);\n    }\n\n    /// @dev remove minter \n    /// @notice remove minter address  `_oldMinter`\n    /// @param _oldMinter The address of the minter to remove\n    function removeMinter(address _oldMinter) public notNull(_oldMinter) onlyOwner {\n        if (!minters[_oldMinter])\n            return;\n        minters[_oldMinter] = false;\n        emit RemoveMinter(_oldMinter);\n    }\n\n    /// @dev check minter\n    /// @notice is address `_minter` a inter\n    /// @param _minter The address of the minter to check\n    function isMinter(address _minter) public notNull(_minter) view returns(bool)  {\n        return minters[_minter];\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @dev  mint tokens to address\n    /// @notice mint `_value` token to `_to`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be _totalSupply\n    function mintInternal(address _to, uint256 _value) internal notNull(_to) {\n        balances[_to] = balances[_to].add(_value);\n        _totalSupply = _totalSupply.add(_value);\n        emit Transfer(address(0), _to, _value);\n    }\n\n    /// @dev burn tokens, e.g. when migrating\n    /// @notice burn `_value` token from `_from`\n    /// @param _from The address of the recipient\n    /// @param _value The amount of token to be _totalSupply from the callers account\n    function burn(address _from, uint256 _value) internal notNull(_from) {\n        balances[_from] = balances[_from].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Transfer(_from, address(0), _value);\n    }\n\n\n    // PRIVATE FUNCTIONS\n\n    // EVENTS\n    \n    event AddMinter(address indexed newMinter);\n    \n    event RemoveMinter(address indexed oldMinter);\n}\n\n/// @dev Migration Agent Base\ncontract MigrationAgent is Ownable, Pausable {\n\n    address public migrationToContract; // the contract to migrate to\n    address public migrationFromContract; // the conttactto migate from\n\n    // MODIFIERS\n    \n    modifier onlyMigrationFromContract() {\n        require(msg.sender == migrationFromContract, \"Only from migration contract\");\n        _;\n    }\n    // EXTERNAL FUNCTIONS\n\n    // PUBLIC FUNCTIONS\n\n    /// @dev set contract to migrate to \n    /// @param _toContract Then contract address to migrate to\n    function startMigrateToContract(address _toContract) public onlyOwner whenPaused {\n        migrationToContract = _toContract;\n        require(MigrationAgent(migrationToContract).isMigrationAgent(), \"not a migratable contract\");\n        emit StartMigrateToContract(address(this), _toContract);\n    }\n\n    /// @dev set contract to migrate from\n    /// @param _fromContract Then contract address to migrate from\n    function startMigrateFromContract(address _fromContract) public onlyOwner whenPaused {\n        migrationFromContract = _fromContract;\n        require(MigrationAgent(migrationFromContract).isMigrationAgent(), \"not a migratable contract\");\n        emit StartMigrateFromContract(_fromContract, address(this));\n    }\n\n    /// @dev Each user calls the migrate function on the original contract to migrate the users’ tokens to the migration agent migrateFrom on the `migrationToContract` contract\n    function migrate() public;   \n\n    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\n    /// @param _from The account to be migrated into new contract\n    /// @param _value The token balance to be migrated\n    function migrateFrom(address _from, uint256 _value) public returns(bool);\n\n    /// @dev is a valid migration agent\n    /// @return true if contract is a migratable contract\n    function isMigrationAgent() public pure returns(bool) {\n        return true;\n    }\n\n    // INTERNAL FUNCTIONS\n\n    // PRIVATE FUNCTIONS\n\n    // EVENTS\n\n    event StartMigrateToContract(address indexed fromContract, address indexed toContract);\n\n    event StartMigrateFromContract(address indexed fromContract, address indexed toContract);\n\n    event MigratedTo(address indexed owner, address indexed _contract, uint256 value);\n\n    event MigratedFrom(address indexed owner, address indexed _contract, uint256 value);\n}\n\n\ncontract ActiveBitcoinEtherCertificate is MintableToken, MigrationAgent {\n\n    using SafeMath for uint256;\n\n    string constant public name = \"Active Bitcoin Ether Certificate\";\n    string constant public symbol = \"ABEC\";\n    uint8 constant public decimals = 5;\n    string constant public version = \"1.0.0.0\";\n\n    address public redeemAddress;\n    string public description;\n\n    // CONSTRUCTOR\n\n    constructor(address _redeemAddress) ERC20Token(0) notNull(_redeemAddress) public {\n        redeemAddress = _redeemAddress;\n    }\n\n    // EXTERNAL FUNCTIONS\n\n    /// @notice update contract description to  `_text` \n    /// @param _text The new description\n    function updateDescription(string calldata _text) external onlyMinter {\n        description = _text;\n    }\n\n    // PUBLIC FUNCTIONS\n\n    /*\n        MIGRATE FUNCTIONS\n     */\n    // safe migrate function\n    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\n    /// @param _from The account to be migrated into new contract\n    /// @param _value The token balance to be migrated\n    function migrateFrom(address _from, uint256 _value) public onlyMigrationFromContract whenNotPaused returns(bool) {\n        mintInternal(_from, _value);\n\n        emit MigratedFrom(_from, migrationFromContract, _value);\n        return true;\n    }\n\n    /// @dev Each user calls the migrate function on the original contract to migrate the users’ tokens to the migration agent migrateFrom on the `migrationToContract` contract\n    function migrate() public whenNotPaused {\n        require(migrationToContract != address(0), \"not in migration mode\"); // revert if not in migrate mode\n        uint256 value = balanceOf(msg.sender);\n        require (value > 0, \"no balance\"); // revert if not value left to transfer\n        burn(msg.sender, value);\n        require(MigrationAgent(migrationToContract).migrateFrom(msg.sender, value)==true, \"migrateFrom must return true\");\n        emit MigratedTo(msg.sender, migrationToContract, value);\n    }\n\n    /*\n        Helper FUNCTIONS\n    */\n\n    /// @dev helper function to return foreign tokens accidental send to contract address\n    /// @param _tokenaddress Address of foreign ERC20 contract\n    /// @param _to Address to send foreign tokens to\n    function refundForeignTokens(address _tokenaddress,address _to) public notNull(_to) onlyMinter {\n        require(_tokenaddress != address(this), \"Must not be self\");\n        ERC20Interface token = ERC20Interface(_tokenaddress);\n\n        // transfer current balance for this contract to _to  in token contract\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.transfer.selector, _to, token.balanceOf(address(this))));\n        require(success);\n\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)));\n        }        \n    }\n\n    /// @notice minter transfer account tokens from one address `_from` to new token owner address `_to`. If `_to` is the redeem address then tokens will be burned \n    /// @param _from The address of the original token owner\n    /// @param _to The address of the new token owner\n    /// @return Whether the transfer was successful or not\n    function transferAccount(address _from, address _to) public onlyMinter returns (bool result) {\n        uint256 balance = balanceOf(_from);\n        if(_to == redeemAddress) {\n            result = transferInternal(_from, _to, balance);\n        } else {\n            result = super.transferInternal(_from, _to, balance);\n        }\n        emit TransferAccount(_from, _to);\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @notice internal send `_value` token to `_to` from `_from` \n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred \n    /// @return Whether the transfer was successful or not\n    function transferInternal(address _from, address _to, uint256 _value) internal notNull(_from) returns (bool) {\n        require(_to == redeemAddress, \"Wrong destination address\");\n        // burn _value\n        balances[_from] = balances[_from].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        // report as transfer + burn \n        emit Transfer(_from, _to, _value);\n        emit Transfer(_to, address(0), _value);\n        return true;\n    }\n\n    // PRIVATE FUNCTIONS\n\n    event TransferAccount(address indexed _from, address indexed _to);\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_toContract\",\"type\":\"address\"}],\"name\":\"startMigrateToContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldMinter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrateFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenaddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"refundForeignTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAccount\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromContract\",\"type\":\"address\"}],\"name\":\"startMigrateFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMigrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationToContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_redeemAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toContract\",\"type\":\"address\"}],\"name\":\"StartMigrateToContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toContract\",\"type\":\"address\"}],\"name\":\"StartMigrateFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MigratedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MigratedFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"AddMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"RemoveMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526005805460ff191690553480156200001b57600080fd5b50604051602080620023c3833981018060405260208110156200003d57600080fd5b5051600080546001600160a01b031916331781555062000063336200010160201b60201c565b806001600160a01b038116620000da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f41646472657373206973204e756c6c0000000000000000000000000000000000604482015290519081900360640190fd5b50600980546001600160a01b0319166001600160a01b039290921691909117905562000268565b806001600160a01b0381166200017857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f41646472657373206973204e756c6c0000000000000000000000000000000000604482015290519081900360640190fd5b6000546001600160a01b03163314620001f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526006602052604090205460ff16156200021a5762000264565b6001600160a01b038216600081815260066020526040808220805460ff19166001179055517f16baa937b08d58713325f93ac58b8a9369a4359bbefb4957d6d9b402735722ab9190a25b5050565b61214b80620002786000396000f3fe608060405234801561001057600080fd5b50600436106101fa5760003560e01c80638456cb591161011a578063a9059cbb116100ad578063dd62ed3e1161007c578063dd62ed3e1461056c578063df4bcf581461059a578063e735b48a146105a2578063ee5554d314610612578063f2fde38b1461061a576101fa565b8063a9059cbb146104ec578063aa271e1a14610518578063d4ee1d901461053e578063d66ef1b414610546576101fa565b80638fd3ab80116100e95780638fd3ab801461048857806395d89b411461049057806396b4f7a314610498578063983b2d56146104c6576101fa565b80638456cb59146104425780638d0e29091461044a5780638da5cb5b146104525780638f803d331461045a576101fa565b80633f4ba83a1161019257806370a082311161016157806370a08231146103e05780637284e4161461040657806379ba50971461040e5780637a3130e314610416576101fa565b80633f4ba83a1461039c57806340c10f19146103a457806354fd4d50146103d05780635c975abb146103d8576101fa565b806323b872dd116101ce57806323b872dd146102fe578063265b5150146103345780633092afd514610358578063313ce5671461037e576101fa565b80620b6425146101ff57806306fdde0314610227578063095ea7b3146102a457806318160ddd146102e4575b600080fd5b6102256004803603602081101561021557600080fd5b50356001600160a01b0316610640565b005b61022f6107fa565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610269578181015183820152602001610251565b50505050905090810190601f1680156102965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d0600480360360408110156102ba57600080fd5b506001600160a01b038135169060200135610833565b604080519115158252519081900360200190f35b6102ec610890565b60408051918252519081900360200190f35b6102d06004803603606081101561031457600080fd5b506001600160a01b03813581169160208101359091169060400135610897565b61033c6108f6565b604080516001600160a01b039092168252519081900360200190f35b6102256004803603602081101561036e57600080fd5b50356001600160a01b0316610905565b610386610a14565b6040805160ff9092168252519081900360200190f35b610225610a19565b610225600480360360408110156103ba57600080fd5b506001600160a01b038135169060200135610af0565b61022f610b58565b6102d0610b7e565b6102ec600480360360208110156103f657600080fd5b50356001600160a01b0316610b87565b61022f610ba2565b610225610c30565b6102d06004803603604081101561042c57600080fd5b506001600160a01b038135169060200135610cef565b610225610df6565b61033c610ec9565b61033c610ed8565b6102256004803603604081101561047057600080fd5b506001600160a01b0381358116916020013516610ee7565b6102256111a2565b61022f6113ce565b6102d0600480360360408110156104ae57600080fd5b506001600160a01b03813581169160200135166113f1565b610225600480360360208110156104dc57600080fd5b50356001600160a01b03166114da565b6102d06004803603604081101561050257600080fd5b506001600160a01b0381351690602001356115ec565b6102d06004803603602081101561052e57600080fd5b50356001600160a01b0316611642565b61033c6116b1565b6102256004803603602081101561055c57600080fd5b50356001600160a01b03166116c0565b6102ec6004803603604081101561058257600080fd5b506001600160a01b038135811691602001351661187a565b6102d06118a5565b610225600480360360208110156105b857600080fd5b8101906020810181356401000000008111156105d357600080fd5b8201836020820111156105e557600080fd5b8035906020019184600183028401116401000000008311171561060757600080fd5b5090925090506118aa565b61033c611919565b6102256004803603602081101561063057600080fd5b50356001600160a01b0316611928565b6000546001600160a01b031633146106925760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6927b7363c9027bbb732b902604482015290519081900360640190fd5b60055460ff166106e25760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f1bdb9b1e481dda195b881c185d5cd95902604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b03838116919091179182905560408051600160e31b631be979eb0281529051929091169163df4bcf5891600480820192602092909190829003018186803b15801561074157600080fd5b505afa158015610755573d6000803e3d6000fd5b505050506040513d602081101561076b57600080fd5b50516107c15760408051600160e51b62461bcd02815260206004820152601960248201527f6e6f742061206d696772617461626c6520636f6e747261637400000000000000604482015290519081900360640190fd5b6040516001600160a01b0382169030907fcec25bfd2f5c0c367bf2d8d279728841ec464c722dfa79bcedd028c24a253b9690600090a350565b6040518060400160405280602081526020017f41637469766520426974636f696e20457468657220436572746966696361746581525081565b60055460009060ff161561087f5760408051600160e51b62461bcd02815260206004820152601460248201526000805160206120c0833981519152604482015290519081900360640190fd5b61088983836119ea565b9392505050565b6004545b90565b60055460009060ff16156108e35760408051600160e51b62461bcd02815260206004820152601460248201526000805160206120c0833981519152604482015290519081900360640190fd5b6108ee848484611aa1565b949350505050565b6009546001600160a01b031681565b806001600160a01b0381166109525760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b6000546001600160a01b031633146109a45760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6927b7363c9027bbb732b902604482015290519081900360640190fd5b6001600160a01b03821660009081526006602052604090205460ff166109c957610a10565b6001600160a01b038216600081815260066020526040808220805460ff19169055517f2f91b591fc56ac0917953ad01ec225524ee5ef0555213e4c8a9d8c9728ee7ffb9190a25b5050565b600581565b6000546001600160a01b03163314610a6b5760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6927b7363c9027bbb732b902604482015290519081900360640190fd5b60055460ff16610abb5760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f1bdb9b1e481dda195b881c185d5cd95902604482015290519081900360640190fd5b6005805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b3360009081526006602052604090205460ff16610b4e5760408051600160e51b62461bcd0281526020600482015260116024820152600160791b7021b0b63632b9103737ba1036b4b73a32b902604482015290519081900360640190fd5b610a108282611b7f565b604051806040016040528060078152602001600160cc1b660312e302e302e30281525081565b60055460ff1681565b6001600160a01b031660009081526002602052604090205490565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c285780601f10610bfd57610100808354040283529160200191610c28565b820191906000526020600020905b815481529060010190602001808311610c0b57829003601f168201915b505050505081565b6001546001600160a01b03163314610c925760408051600160e51b62461bcd02815260206004820152600e60248201527f4f6e6c79204e6577204f776e6572000000000000000000000000000000000000604482015290519081900360640190fd5b60008054600180546001600160a01b038082166001600160a01b03198086169190911780875592169092556040519282169391169183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6008546000906001600160a01b03163314610d545760408051600160e51b62461bcd02815260206004820152601c60248201527f4f6e6c792066726f6d206d6967726174696f6e20636f6e747261637400000000604482015290519081900360640190fd5b60055460ff1615610d9d5760408051600160e51b62461bcd02815260206004820152601460248201526000805160206120c0833981519152604482015290519081900360640190fd5b610da78383611b7f565b6008546040805184815290516001600160a01b03928316928616917fe502aa3e015149f4b76a0b2b5394e3100903c4af27c3ddc98385395d3f552526919081900360200190a350600192915050565b6000546001600160a01b03163314610e485760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6927b7363c9027bbb732b902604482015290519081900360640190fd5b60055460ff1615610e915760408051600160e51b62461bcd02815260206004820152601460248201526000805160206120c0833981519152604482015290519081900360640190fd5b6005805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6008546001600160a01b031681565b6000546001600160a01b031681565b806001600160a01b038116610f345760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b3360009081526006602052604090205460ff16610f925760408051600160e51b62461bcd0281526020600482015260116024820152600160791b7021b0b63632b9103737ba1036b4b73a32b902604482015290519081900360640190fd5b6001600160a01b038316301415610ff35760408051600160e51b62461bcd02815260206004820152601060248201527f4d757374206e6f742062652073656c6600000000000000000000000000000000604482015290519081900360640190fd5b60408051600160e01b6370a08231028152306004820152905184916000916060916001600160a01b03851691600160e01b63a9059cbb0291889184916370a08231916024808301926020929190829003018186803b15801561105457600080fd5b505afa158015611068573d6000803e3d6000fd5b505050506040513d602081101561107e57600080fd5b5051604080516001600160a01b03909316602484015260448084019290925280518084039092018252606490920182526020810180516001600160e01b03166001600160e01b031990941693909317835290518151919290918291908083835b602083106110fd5780518252601f1990920191602091820191016110de565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461115f576040519150601f19603f3d011682016040523d82523d6000602084013e611164565b606091505b50915091508161117357600080fd5b80511561119a5780806020019051602081101561118f57600080fd5b505161119a57600080fd5b505050505050565b60055460ff16156111eb5760408051600160e51b62461bcd02815260206004820152601460248201526000805160206120c0833981519152604482015290519081900360640190fd5b6007546001600160a01b031661124b5760408051600160e51b62461bcd02815260206004820152601560248201527f6e6f7420696e206d6967726174696f6e206d6f64650000000000000000000000604482015290519081900360640190fd5b600061125633610b87565b9050600081116112a05760408051600160e51b62461bcd02815260206004820152600a6024820152600160b01b696e6f2062616c616e636502604482015290519081900360640190fd5b6112aa3382611c58565b60075460408051600160e01b637a3130e30281523360048201526024810184905290516001600160a01b0390921691637a3130e3916044808201926020929091908290030181600087803b15801561130157600080fd5b505af1158015611315573d6000803e3d6000fd5b505050506040513d602081101561132b57600080fd5b505115156001146113865760408051600160e51b62461bcd02815260206004820152601c60248201527f6d69677261746546726f6d206d7573742072657475726e207472756500000000604482015290519081900360640190fd5b6007546040805183815290516001600160a01b039092169133917f638edf84937fb2534b47cac985ea84d6ea4f4076315b56ea1c784d26b87e2bcb919081900360200190a350565b604051806040016040528060048152602001600160e01b63414245430281525081565b3360009081526006602052604081205460ff1661144f5760408051600160e51b62461bcd0281526020600482015260116024820152600160791b7021b0b63632b9103737ba1036b4b73a32b902604482015290519081900360640190fd5b600061145a84610b87565b6009549091506001600160a01b03848116911614156114855761147e848483611d31565b9150611493565b611490848483611ea8565b91505b826001600160a01b0316846001600160a01b03167f93c70cc9715bef0d83edf2095f3595402279d274f402a73ffc17f1bcb19d863d60405160405180910390a35092915050565b806001600160a01b0381166115275760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b6000546001600160a01b031633146115795760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6927b7363c9027bbb732b902604482015290519081900360640190fd5b6001600160a01b03821660009081526006602052604090205460ff161561159f57610a10565b6001600160a01b038216600081815260066020526040808220805460ff19166001179055517f16baa937b08d58713325f93ac58b8a9369a4359bbefb4957d6d9b402735722ab9190a25050565b60055460009060ff16156116385760408051600160e51b62461bcd02815260206004820152601460248201526000805160206120c0833981519152604482015290519081900360640190fd5b6108898383611ff3565b6000816001600160a01b0381166116915760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b50506001600160a01b031660009081526006602052604090205460ff1690565b6001546001600160a01b031681565b6000546001600160a01b031633146117125760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6927b7363c9027bbb732b902604482015290519081900360640190fd5b60055460ff166117625760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f1bdb9b1e481dda195b881c185d5cd95902604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b03838116919091179182905560408051600160e31b631be979eb0281529051929091169163df4bcf5891600480820192602092909190829003018186803b1580156117c157600080fd5b505afa1580156117d5573d6000803e3d6000fd5b505050506040513d60208110156117eb57600080fd5b50516118415760408051600160e51b62461bcd02815260206004820152601960248201527f6e6f742061206d696772617461626c6520636f6e747261637400000000000000604482015290519081900360640190fd5b60405130906001600160a01b038316907fafb3eb79b985ae31830cb04dfc82c2d58e1b1c9851b6f7d8bf0c8311fbcaf02090600090a350565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600190565b3360009081526006602052604090205460ff166119085760408051600160e51b62461bcd0281526020600482015260116024820152600160791b7021b0b63632b9103737ba1036b4b73a32b902604482015290519081900360640190fd5b611914600a8383612027565b505050565b6007546001600160a01b031681565b806001600160a01b0381166119755760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b6000546001600160a01b031633146119c75760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6927b7363c9027bbb732b902604482015290519081900360640190fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000826001600160a01b038116611a395760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b3360008181526003602090815260408083206001600160a01b03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6001600160a01b0383166000908152600360209081526040808320338452909152812054821115611b1c5760408051600160e51b62461bcd02815260206004820152601360248201527f696e73756666696369656e7420746f6b656e7300000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0384166000908152600360209081526040808320338452909152902054611b50908363ffffffff61200016565b6001600160a01b03851660009081526003602090815260408083203384529091529020556108ee848484611d31565b816001600160a01b038116611bcc5760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b6001600160a01b038316600090815260026020526040902054611bf5908363ffffffff61201516565b6001600160a01b038416600090815260026020526040902055600454611c21908363ffffffff61201516565b6004556040805183815290516001600160a01b038516916000916000805160206120e08339815191529181900360200190a3505050565b816001600160a01b038116611ca55760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b6001600160a01b038316600090815260026020526040902054611cce908363ffffffff61200016565b6001600160a01b038416600090815260026020526040902055600454611cfa908363ffffffff61200016565b6004556040805183815290516000916001600160a01b038616916000805160206120e08339815191529181900360200190a3505050565b6000836001600160a01b038116611d805760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b6009546001600160a01b03858116911614611de55760408051600160e51b62461bcd02815260206004820152601960248201527f57726f6e672064657374696e6174696f6e206164647265737300000000000000604482015290519081900360640190fd5b6001600160a01b038516600090815260026020526040902054611e0e908463ffffffff61200016565b6001600160a01b038616600090815260026020526040902055600454611e3a908463ffffffff61200016565b6004556040805184815290516001600160a01b0380871692908816916000805160206120e08339815191529181900360200190a36040805184815290516000916001600160a01b038716916000805160206120e08339815191529181900360200190a3506001949350505050565b6000836001600160a01b038116611ef75760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b836001600160a01b038116611f445760408051600160e51b62461bcd02815260206004820152600f6024820152600080516020612100833981519152604482015290519081900360640190fd5b6001600160a01b038616600090815260026020526040902054611f6d908563ffffffff61200016565b6001600160a01b038088166000908152600260205260408082209390935590871681522054611fa2908563ffffffff61201516565b6001600160a01b0380871660008181526002602090815260409182902094909455805188815290519193928a16926000805160206120e083398151915292918290030190a350600195945050505050565b6000610889338484611d31565b60008282111561200f57600080fd5b50900390565b60008282018381101561088957600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120685782800160ff19823516178555612095565b82800160010185558215612095579182015b8281111561209557823582559160200191906001019061207a565b506120a19291506120a5565b5090565b61089491905b808211156120a157600081556001016120ab56fe6f6e6c79207768656e206e6f7420706175736564000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef41646472657373206973204e756c6c0000000000000000000000000000000000a165627a7a72305820c00fcea7c19ab458e48786a9d63b4c4c62cf93273210c79a0d904066db4b22f20029000000000000000000000000abec0a9d4f357ef021ee5154d0d78361ef5943d8",
  "constructorArguments": "000000000000000000000000abec0a9d4f357ef021ee5154d0d78361ef5943d8"
}