{
  "address": "0xffb17cf95479532727660e21b8c509ec5bde651e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenLiquidityMarket",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-06\n*/\n\npragma solidity ^0.4.21;\n\nlibrary SafeMath {\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n}\n\ncontract Token {\n  function balanceOf(address _owner) public returns (uint256); \n  function transfer(address to, uint256 tokens) public returns (bool);\n  function transferFrom(address from, address to, uint256 tokens) public returns(bool);\n}\n\ncontract TokenLiquidityMarket { \n    \n  using SafeMath for uint256;  \n\n  address public platform;\n  address public admin;\n  address public traded_token;\n  \n  uint256 public eth_seed_amount;\n  uint256 public traded_token_seed_amount;\n  uint256 public commission_ratio;\n  uint256 public eth_balance;\n  uint256 public traded_token_balance;\n\n  bool public eth_is_seeded;\n  bool public traded_token_is_seeded;\n  bool public trading_deactivated;\n  bool public admin_commission_activated;\n\n  modifier only_admin() {\n      require(msg.sender == admin);\n      _;\n  }\n  \n  modifier trading_activated() {\n      require(trading_deactivated == false);\n      _;\n  }\n  \n  function TokenLiquidityMarket(address _traded_token,uint256 _eth_seed_amount, uint256 _traded_token_seed_amount, uint256 _commission_ratio) public {\n    admin = tx.origin;\n    platform = msg.sender; \n    traded_token = _traded_token;\n    eth_seed_amount = _eth_seed_amount;\n    traded_token_seed_amount = _traded_token_seed_amount;\n    commission_ratio = _commission_ratio;\n  }\n\n  function change_admin(address _newAdmin) public only_admin() {\n    admin = _newAdmin;\n  }\n  \n  function withdraw_arbitrary_token(address _token, uint256 _amount) public only_admin() {\n      require(_token != traded_token);\n      require(Token(_token).transfer(admin, _amount));\n  }\n\n  function withdraw_excess_tokens() public only_admin() {\n    uint256 queried_traded_token_balance_ = Token(traded_token).balanceOf(this);\n    require(queried_traded_token_balance_ >= traded_token_balance);\n    uint256 excess_ = queried_traded_token_balance_.sub(traded_token_balance);\n    require(Token(traded_token).transfer(admin, excess_));\n  }\n\n  function transfer_tokens_through_proxy_to_contract(address _from, address _to, uint256 _amount) private {\n    traded_token_balance = traded_token_balance.add(_amount);\n    require(Token(traded_token).transferFrom(_from,_to,_amount));\n  }  \n\n  function transfer_tokens_from_contract(address _to, uint256 _amount) private {\n    traded_token_balance = traded_token_balance.sub(_amount);\n    require(Token(traded_token).transfer(_to,_amount));\n  }\n\n  function transfer_eth_to_contract() private {\n    eth_balance = eth_balance.add(msg.value);\n  }\n  \n  function transfer_eth_from_contract(address _to, uint256 _amount) private {\n    eth_balance = eth_balance.sub(_amount);\n    _to.transfer(_amount);\n  }\n  \n  function deposit_token(uint256 _amount) private { \n    transfer_tokens_through_proxy_to_contract(msg.sender, this, _amount);\n  }  \n\n  function deposit_eth() private { \n    transfer_eth_to_contract();\n  }  \n  \n  function withdraw_token(uint256 _amount) public only_admin() {\n    transfer_tokens_from_contract(admin, _amount);\n  }\n  \n  function withdraw_eth(uint256 _amount) public only_admin() {\n    transfer_eth_from_contract(admin, _amount);\n  }\n\n  function set_traded_token_as_seeded() private {\n    traded_token_is_seeded = true;\n  }\n\n  function set_eth_as_seeded() private {\n    eth_is_seeded = true;\n  }\n\n  function seed_traded_token() public only_admin() {\n    require(!traded_token_is_seeded);\n    set_traded_token_as_seeded();\n    deposit_token(traded_token_seed_amount); \n  }\n  \n  function seed_eth() public payable only_admin() {\n    require(!eth_is_seeded);\n    require(msg.value == eth_seed_amount);\n    set_eth_as_seeded();\n    deposit_eth(); \n  }\n\n  function seed_additional_token(uint256 _amount) public only_admin() {\n    require(market_is_open());\n    deposit_token(_amount);\n  }\n\n  function seed_additional_eth() public payable only_admin() {\n    require(market_is_open());\n    deposit_eth();\n  }\n\n  function market_is_open() private view returns(bool) {\n    return (eth_is_seeded && traded_token_is_seeded);\n  }\n\n  function deactivate_trading() public only_admin() {\n    require(!trading_deactivated);\n    trading_deactivated = true;\n  }\n  \n  function reactivate_trading() public only_admin() {\n    require(trading_deactivated);\n    trading_deactivated = false;\n  }\n\n  function get_amount_sell(uint256 _amount) public view returns(uint256) {\n    uint256 traded_token_balance_plus_amount_ = traded_token_balance.add(_amount);\n    return (eth_balance.mul(_amount)).div(traded_token_balance_plus_amount_);\n  }\n\n  function get_amount_buy(uint256 _amount) public view returns(uint256) {\n    uint256 eth_balance_plus_amount_ = eth_balance.add(_amount);\n    return ((traded_token_balance).mul(_amount)).div(eth_balance_plus_amount_);\n  }\n  \n  function get_amount_minus_commission(uint256 _amount) private view returns(uint256) {\n    return (_amount.mul(uint256(1 ether).sub(commission_ratio))).div(1 ether);  \n\n  }\n\n  function activate_admin_commission() public only_admin() {\n    require(!admin_commission_activated);\n    admin_commission_activated = true;\n  }\n\n  function deactivate_admin_comission() public only_admin() {\n    require(admin_commission_activated);\n    admin_commission_activated = false;\n  }\n\n  function change_admin_commission(uint256 _new_commission_ratio) public only_admin() {\n     require(_new_commission_ratio != commission_ratio);\n     commission_ratio = _new_commission_ratio;\n  }\n\n\n  function complete_sell_exchange(uint256 _amount_give) private {\n    uint256 amount_get_ = get_amount_sell(_amount_give);\n    uint256 amount_get_minus_commission_ = get_amount_minus_commission(amount_get_);\n    uint256 platform_commission_ = (amount_get_.sub(amount_get_minus_commission_)).div(5);\n    uint256 admin_commission_ = ((amount_get_.sub(amount_get_minus_commission_)).mul(4)).div(5);\n    transfer_tokens_through_proxy_to_contract(msg.sender,this,_amount_give);\n    transfer_eth_from_contract(msg.sender,amount_get_minus_commission_);  \n    transfer_eth_from_contract(platform, platform_commission_);     \n    if(admin_commission_activated) {\n      transfer_eth_from_contract(admin, admin_commission_);     \n    }\n  }\n  \n  function complete_buy_exchange() private {\n    uint256 amount_get_ = get_amount_buy(msg.value);\n    uint256 amount_get_minus_commission_ = get_amount_minus_commission(amount_get_);\n    uint256 platform_commission_ = (amount_get_.sub(amount_get_minus_commission_)).div(5);\n    uint256 admin_commission_ = ((amount_get_.sub(amount_get_minus_commission_)).mul(4)).div(5);\n    transfer_eth_to_contract();\n    transfer_tokens_from_contract(msg.sender, amount_get_minus_commission_);\n    transfer_tokens_from_contract(platform, platform_commission_);\n    if(admin_commission_activated) {\n      transfer_tokens_from_contract(admin, admin_commission_);\n    }\n  }\n  \n  function sell_tokens(uint256 _amount_give) public trading_activated() {\n    require(market_is_open());\n    complete_sell_exchange(_amount_give);\n  }\n  \n  function buy_tokens() private trading_activated() {\n    require(market_is_open());\n    complete_buy_exchange();\n  }\n\n  function() public payable {\n    buy_tokens();\n  }\n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c997d07b0bc607b6d1bcb6fb9d4a5579c466c3e5000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000b1a2bc2ec50000"
}