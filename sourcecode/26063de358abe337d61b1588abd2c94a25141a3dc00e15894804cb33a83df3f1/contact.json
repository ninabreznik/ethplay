{
  "address": "0x161c011006beac7f79bb02aa3c92b5b4581bf58f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "selfdropToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-02\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract selfdropToken {\n\n    using SafeMath for uint256;\n    address owner = msg.sender;\n    address selfdroptoken;\n    address[] public hugeetherinvest;\n\n    mapping (address => bool) public blacklist;\n\n    uint256 public totalRemaining = 60000000e18;\n    uint256 public selfdropvalue;\n\n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    event crowdsaleFinishedd();\n\n    bool public distributionFinished;\n    bool public crowdsaleFinished;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    modifier canDistrCS() {\n        require(!crowdsaleFinished);\n        _;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlynotblacklist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    function setselfdroptoken(address _selfdroptoken) public onlyOwner {\n        require (_selfdroptoken != address(0));\n        selfdroptoken = _selfdroptoken;\n    } \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function finishselfdrop() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n    function finishcrowdsale() onlyOwner canDistrCS public returns (bool) {\n        crowdsaleFinished = true;\n        emit crowdsaleFinishedd();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) private returns (bool) {\n\n        totalRemaining = totalRemaining.sub(_amount);\n        ERC20(selfdroptoken).transfer(_to,_amount);\n        emit Distr(_to, _amount);\n        return true;\n        \n        if (totalRemaining == 0) {\n            distributionFinished = true;\n            crowdsaleFinished = true;\n        }\n    }\n    function setselfdropvalue(uint256 _value) public onlyOwner {\n        selfdropvalue = _value.mul(1e18);\n    }\n    function () public payable{\n        if(msg.value == 0){getTokenss();}else{getTokens();}         \n    }\n    function getTokenss() canDistr onlynotblacklist internal {\n        \n        require (selfdropvalue != 0);\n        \n        if (selfdropvalue > totalRemaining) {\n            selfdropvalue = totalRemaining;\n        }\n        \n        require(selfdropvalue <= totalRemaining);\n        \n        address investor = msg.sender;\n        uint256 toGive = selfdropvalue;\n        \n        distr(investor, toGive);\n        \n        if (toGive > 0) {\n            blacklist[investor] = true;\n        }\n    }\n    function getTokens() canDistrCS public payable {\n        \n        require(msg.value >= 0.001 ether);\n        \n        uint256 rate = 1000000;\n        uint256 value = msg.value.mul(rate);\n        \n        require(totalRemaining >= value);\n        \n        address investor = msg.sender;\n        uint256 toGive = value;\n        \n        distr(investor, toGive);\n        \n        if(msg.value >= 0.1 ether){\n            hugeetherinvest.push(msg.sender);\n        }\n    }\n    function withdrawSDTfromcontract() public onlyOwner {\n        ERC20(selfdroptoken).transfer(owner,ERC20(selfdroptoken).balanceOf(address(this)));\n    }\n    function withdraw() public onlyOwner {\n        msg.sender.transfer(this.balance);\n    }\n}",
  "bytecode": "608060405260008054600160a060020a031916331790556a31a17e847807b1bc00000060045534801561003157600080fd5b5060008054600160a060020a031916331790556108eb806100536000396000f3006080604052600436106100cf5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633ccfd60b81146100ed5780635fffad5a14610102578063a27966dd1461011a578063a477695514610143578063aa6ca808146100e3578063ae8f232814610164578063c108d54214610179578063c880ee9d1461018e578063caebf872146101b5578063d8a54360146101e9578063ece84fd5146101fe578063f2fde38b14610213578063f3074b5814610234578063f9f92be414610249575b3415156100e3576100de61026a565b6100eb565b6100eb610311565b005b3480156100f957600080fd5b506100eb6103e1565b34801561010e57600080fd5b506100eb600435610428565b34801561012657600080fd5b5061012f61045d565b604080519115158252519081900360200190f35b34801561014f57600080fd5b506100eb600160a060020a03600435166104c1565b34801561017057600080fd5b5061012f61051c565b34801561018557600080fd5b5061012f610587565b34801561019a57600080fd5b506101a3610590565b60408051918252519081900360200190f35b3480156101c157600080fd5b506101cd600435610596565b60408051600160a060020a039092168252519081900360200190f35b3480156101f557600080fd5b506101a36105be565b34801561020a57600080fd5b5061012f6105c4565b34801561021f57600080fd5b506100eb600160a060020a03600435166105d2565b34801561024057600080fd5b506100eb610625565b34801561025557600080fd5b5061012f600160a060020a036004351661076c565b600654600090819060ff161561027f57600080fd5b3360009081526003602052604090205460ff161561029c57600080fd5b60055415156102aa57600080fd5b60045460055411156102bd576004546005555b60045460055411156102ce57600080fd5b505060055433906102df8282610781565b50600081111561030d57600160a060020a0382166000908152600360205260409020805460ff191660011790555b5050565b600654600090819081908190610100900460ff161561032f57600080fd5b66038d7ea4c6800034101561034357600080fd5b620f42409350610359348563ffffffff61088216565b9250826004541015151561036c57600080fd5b503390508161037b8282610781565b5067016345785d8a000034106103db57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff1916331790555b50505050565b600054600160a060020a031633146103f857600080fd5b6040513390303180156108fc02916000818181858888f19350505050158015610425573d6000803e3d6000fd5b50565b600054600160a060020a0316331461043f57600080fd5b61045781670de0b6b3a764000063ffffffff61088216565b60055550565b60008054600160a060020a0316331461047557600080fd5b60065460ff161561048557600080fd5b6006805460ff191660011790556040517f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc90600090a150600190565b600054600160a060020a031633146104d857600080fd5b600160a060020a03811615156104ed57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a0316331461053457600080fd5b600654610100900460ff161561054957600080fd5b6006805461ff0019166101001790556040517fd1c8bbfa76e9f070045ef4a7018db364903bb8506d198e39ccc82c712fd5542790600090a150600190565b60065460ff1681565b60055481565b60028054829081106105a457fe5b600091825260209091200154600160a060020a0316905081565b60045481565b600654610100900460ff1681565b600054600160a060020a031633146105e957600080fd5b600160a060020a038116156104255760008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b600054600160a060020a0316331461063c57600080fd5b60015460008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039485169463a9059cbb9493169285926370a082319260248083019360209383900390910190829087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b505050506040513d60208110156106da57600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505050506040513d602081101561030d57600080fd5b60036020526000908152604090205460ff1681565b600454600090610797908363ffffffff6108ad16565b6004908155600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506040513d602081101561083857600080fd5b5050604080518381529051600160a060020a038516917f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77919081900360200190a250600192915050565b600082820283158061089e575082848281151561089b57fe5b04145b15156108a657fe5b9392505050565b6000828211156108b957fe5b509003905600a165627a7a72305820c102e3885c8cec99bb10bed556f33f206693491e6c5d76384fb8bc82f6ae27540029"
}