{
  "address": "0x30cecb5461a449a90081f5a5f55db4e048397bab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Tracto Token",
  "contractName": "Tracto",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-13\n*/\n\npragma solidity ^0.4.11;\n\n// ----------------------------------------------------------------------------------------------\n  // Fixed supply token contract \n  // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n  // ----------------------------------------------------------------------------------------------\n    \n   // ERC Token Standard #20 Interface\n   // https://github.com/ethereum/EIPs/issues/20\n  contract ERC20Interface {\n      \n      function totalSupply() constant returns (uint256 totSupply);   \n      function balanceOf(address _owner) constant returns (uint256 balance);   \n      function transfer(address _to, uint256 _value) returns (bool success);\t  \n      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);   \n      function approve(address _spender, uint256 _value) returns (bool success);   \n      function allowance(address _owner, address _spender) constant returns (uint256 remaining);             \n      event Transfer(address indexed _from, address indexed _to, uint256 _value);   \n      event Approval(address indexed _owner, address indexed _spender, uint256 _value); \t   \n  }\n  \n  contract FlexiInterface {\n  \n\t  function increaseApproval (address _spender, uint _addedValue) returns (bool success);\n\t  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\n      function transferOwnership (address newOwner);\n  }\n   \n  contract Tracto is ERC20Interface, FlexiInterface {\n      string public symbol = \"TRCT\";\n      string public name = \"Tracto\";\n      uint8 public constant decimals = 8;\n      uint256 _totalSupply = 7000000000000000;\n      \n      // Owner of this contract\n      address public owner;\n   \n      // Balances for each account\n      mapping(address => uint256) balances;\n   \n      // Owner of account approves the transfer of an amount to another account\n      mapping(address => mapping (address => uint256)) allowed;\n   \n      // Functions with this modifier can only be executed by the owner\n      modifier onlyOwner() {\n          \n\t\t  require(msg.sender == owner);\n          _;\n      }\n\t  \n\t  modifier notThisContract(address _to) {\n\t\t\n\t\t  require(_to != address(this));\n\t\t  _;\t\t\n\t  }\n   \n      // Constructor\n      function Tracto() {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n      \n      function () payable {\n          if(this.balance > 1000000000000000000){\n            owner.transfer(this.balance);\n          }\n      }\n\n      // What is the balance of a particular account?\n      function balanceOf(address _owner) constant returns (uint256 balance) {\n          return balances[_owner];\n      }\n\t  \n\t  function totalSupply() constant returns (uint256 totSupply) {\n          //totalSupply = _totalSupply;\n\t\t  return _totalSupply;\n      }\n\t    \n      // Transfer the balance from owner's account to another account\n      function transfer(address _to, uint256 _amount) notThisContract(_to) returns (bool success) {\n          require(_to != 0x0);\n\t\t  require(_amount > 0);\n\t\t  require(balances[msg.sender] >= _amount);\n\t\t  require(balances[_to] + _amount > balances[_to]);\n\t\t  balances[msg.sender] -= _amount;\n          balances[_to] += _amount;\t\t  \n\t\t  Transfer(msg.sender, _to, _amount);\n\t\t  return true;\n\t \n      }\n   \n      // Send _value amount of tokens from address _from to address _to\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n      // fees in sub-currencies; the command should fail unless the _from account has\n      // deliberately authorized the sender of the message via some mechanism; we propose\n      // these standardized APIs for approval:\n      function transferFrom(\n          address _from,\n          address _to,\n          uint256 _amount\n      ) notThisContract(_to) returns (bool success) {\n\t  \n\t\t   require(balances[_from] >= _amount);\n\t\t   require(allowed[_from][msg.sender] >= _amount);\n\t\t   require(_amount > 0);\n\t\t   require(balances[_to] + _amount > balances[_to]);\n\t\t   \n\t\t   balances[_from] -= _amount;\n           allowed[_from][msg.sender] -= _amount;\n           balances[_to] += _amount;\n           Transfer(_from, _to, _amount);\n           return true;\n\t  \n         \n     }\n  \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     /*function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }*/\n     \n    function approve(address _spender, uint256 _amount) returns (bool) {\n\n\t\t// To change the approve amount you first have to reduce the addresses`\n\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\n\t\t//  already 0 to mitigate the race condition described here:\n\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t\trequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\t\tallowed[msg.sender][_spender] = _amount;\n\t\tApproval(msg.sender, _spender, _amount);\n\t\treturn true;\n\t}\n     \n     /**\n       * approve should be called when allowed[_spender] == 0. To increment\n       * allowed value is better to use this function to avoid 2 calls (and wait until \n       * the first transaction is mined)\n       * From MonolithDAO Token.sol\n       */\n      function increaseApproval (address _spender, uint _addedValue) \n        returns (bool success) {\n        //allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        allowed[msg.sender][_spender] += _addedValue;\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n      }\n\n      function decreaseApproval (address _spender, uint _subtractedValue) \n        returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n          allowed[msg.sender][_spender] = 0;\n        } else {\n          //allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n          allowed[msg.sender][_spender] -= _subtractedValue;\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n      }\n  \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n     }\n     \n    function changeNameSymbol(string _name, string _symbol) onlyOwner {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t}\n\t  \n\tfunction transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n }",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeNameSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600481526020017f5452435400000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000168565b506040805190810160405280600681526020017f54726163746f0000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000168565b506618de76816d80006002553415620000b757600080fd5b5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060025460046000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b62000217565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ab57805160ff1916838001178555620001dc565b82800160010185558215620001dc579182015b82811115620001db578251825591602001919060010190620001be565b5b509050620001eb9190620001ef565b5090565b6200021491905b8082111562000210576000816000905550600101620001f6565b5090565b90565b61162780620002276000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610173578063095ea7b31461020257806318160ddd1461025c57806323b872dd14610285578063313ce567146102fe578063501a4d681461032d57806366188463146103cd57806370a08231146104275780638da5cb5b1461047457806395d89b41146104c9578063a9059cbb14610558578063d73dd623146105b2578063dd62ed3e1461060c578063f2fde38b14610678575b5b670de0b6b3a76400003073ffffffffffffffffffffffffffffffffffffffff1631111561017057600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561016f57600080fd5b5b5b005b341561017e57600080fd5b6101866106b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c75780820151818401525b6020810190506101ab565b50505050905090810190601f1680156101f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020d57600080fd5b610242600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061074f565b604051808215151515815260200191505060405180910390f35b341561026757600080fd5b61026f6108d7565b6040518082815260200191505060405180910390f35b341561029057600080fd5b6102e4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108e2565b604051808215151515815260200191505060405180910390f35b341561030957600080fd5b610311610c2d565b604051808260ff1660ff16815260200191505060405180910390f35b341561033857600080fd5b6103cb600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610c32565b005b34156103d857600080fd5b61040d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cc2565b604051808215151515815260200191505060405180910390f35b341561043257600080fd5b61045e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f4b565b6040518082815260200191505060405180910390f35b341561047f57600080fd5b610487610f95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104d457600080fd5b6104dc610fbb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561051d5780820151818401525b602081019050610501565b50505050905090810190601f16801561054a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561056357600080fd5b610598600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611059565b604051808215151515815260200191505060405180910390f35b34156105bd57600080fd5b6105f2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112b4565b604051808215151515815260200191505060405180910390f35b341561061757600080fd5b610662600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061142c565b6040518082815260200191505060405180910390f35b341561068357600080fd5b6106af600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114b4565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107475780601f1061071c57610100808354040283529160200191610747565b820191906000526020600020905b81548152906001019060200180831161072a57829003601f168201915b505050505081565b6000808214806107db57506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156107e657600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600060025490505b90565b6000823073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561092057600080fd5b82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561096e57600080fd5b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156109f957600080fd5b600083111515610a0857600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610a9657600080fd5b82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5b509392505050565b600881565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c8e57600080fd5b8160019080519060200190610ca4929190611556565b508060009080519060200190610cbb929190611556565b505b5b5050565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd3576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e5e565b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505b5092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110515780601f1061102657610100808354040283529160200191611051565b820191906000526020600020905b81548152906001019060200180831161103457829003601f168201915b505050505081565b6000823073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561109757600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff16141515156110bd57600080fd5b6000831115156110cc57600080fd5b82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561111a57600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115156111a857600080fd5b82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5b5092915050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190505b92915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561151057600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061159757805160ff19168380011785556115c5565b828001600101855582156115c5579182015b828111156115c45782518255916020019190600101906115a9565b5b5090506115d291906115d6565b5090565b6115f891905b808211156115f45760008160009055506001016115dc565b5090565b905600a165627a7a72305820f5a901b7c617001162e3a79d55f8c604ac1d9c40bb5616393b4260a0f5a306420029"
}