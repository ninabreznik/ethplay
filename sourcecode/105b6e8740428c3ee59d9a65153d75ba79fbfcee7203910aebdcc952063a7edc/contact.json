{
  "address": "0xdc4d9bba9a9013b6fe27ee2c531cabe5d6b43197",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DragonKing",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\n/**\n  * Dragonking is a blockchain game in which players may purchase dragons and knights of different levels and values.\n  * Once every period of time the volcano erupts and wipes a few of them from the board. The value of the killed characters\n  * gets distributed amongst all of the survivors. The dragon king receive a bigger share than the others.\n  * In contrast to dragons, knights need to be teleported to the battlefield first with the use of teleport tokens.\n  * Additionally, they may attack a dragon once per period.\n  * Both character types can be protected from death up to three times.\n  * Take a look at dragonking.io for more detailed information.\n  * @author: Julia Altenried, Yuriy Kashnikov\n  * */\n\npragma solidity ^0.4.24;\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() public onlyOwner {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) public onlyOwner {\n    selfdestruct(_recipient);\n  }\n}\n\n/**\n * DragonKing game configuration contract\n**/\n\ncontract DragonKingConfig is Ownable {\n\n  struct PurchaseRequirement {\n    address[] tokens;\n    uint256[] amounts;\n  }\n\n  /** the Gift token contract **/\n  ERC20 public giftToken;\n  /** amount of gift tokens to send **/\n  uint256 public giftTokenAmount;\n  /** purchase requirements for each type of character **/\n  PurchaseRequirement[30] purchaseRequirements; \n  /** the cost of each character type */\n  uint128[] public costs;\n  /** the value of each character type (cost - fee), so it's not necessary to compute it each time*/\n  uint128[] public values;\n  /** the fee to be paid each time an character is bought in percent*/\n  uint8 fee;\n  /** The maximum of characters allowed in the game */\n  uint16 public maxCharacters;\n  /** the amount of time that should pass since last eruption **/\n  uint256 public eruptionThreshold;\n  /** the amount of time that should pass ince last castle loot distribution **/\n  uint256 public castleLootDistributionThreshold;\n  /** how many characters to kill in %, e.g. 20 will stand for 20%, should be < 100 **/\n  uint8 public percentageToKill;\n  /* Cooldown threshold */\n  uint256 public constant CooldownThreshold = 1 days;\n  /** fight factor, used to compute extra probability in fight **/\n  uint8 public fightFactor;\n\n  /** the price for teleportation*/\n  uint256 public teleportPrice;\n  /** the price for protection */\n  uint256 public protectionPrice;\n  /** the luck threshold */\n  uint256 public luckThreshold;\n\n  function hasEnoughTokensToPurchase(address buyer, uint8 characterType) external returns (bool canBuy) {\n    for (uint256 i = 0; i < purchaseRequirements[characterType].tokens.length; i++) {\n      if (ERC20(purchaseRequirements[characterType].tokens[i]).balanceOf(buyer) < purchaseRequirements[characterType].amounts[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n\n  function getPurchaseRequirements(uint8 characterType) view external returns (address[] tokens, uint256[] amounts) {\n    tokens = purchaseRequirements[characterType].tokens;\n    amounts = purchaseRequirements[characterType].amounts;\n  }\n\n\n}\n\n\ncontract DragonKing is Destructible {\n\n  /**\n   * @dev Throws if called by contract not a user \n   */\n  modifier onlyUser() {\n    require(msg.sender == tx.origin, \n            \"contracts cannot execute this method\"\n           );\n    _;\n  }\n\n\n  struct Character {\n    uint8 characterType;\n    uint128 value;\n    address owner;\n    uint64 purchaseTimestamp;\n    uint8 fightCount;\n  }\n\n  DragonKingConfig public config;\n\n  /** the neverdie token contract used to purchase protection from eruptions and fights */\n  ERC20 neverdieToken;\n  /** the teleport token contract used to send knights to the game scene */\n  ERC20 teleportToken;\n  /** the luck token contract **/\n  ERC20 luckToken;\n  /** the SKL token contract **/\n  ERC20 sklToken;\n  /** the XP token contract **/\n  ERC20 xperToken;\n  \n\n  /** array holding ids of the curret characters **/\n  uint32[] public ids;\n  /** the id to be given to the next character **/\n  uint32 public nextId;\n  /** non-existant character **/\n  uint16 public constant INVALID_CHARACTER_INDEX = ~uint16(0);\n\n  /** the castle treasury **/\n  uint128 public castleTreasury;\n  /** the castle loot distribution factor **/\n  uint8 public luckRounds = 2;\n  /** the id of the oldest character **/\n  uint32 public oldest;\n  /** the character belonging to a given id **/\n  mapping(uint32 => Character) characters;\n  /** teleported knights **/\n  mapping(uint32 => bool) teleported;\n\n  /** constant used to signal that there is no King at the moment **/\n  uint32 constant public noKing = ~uint32(0);\n\n  /** total number of characters in the game **/\n  uint16 public numCharacters;\n  /** number of characters per type **/\n  mapping(uint8 => uint16) public numCharactersXType;\n\n  /** timestamp of the last eruption event **/\n  uint256 public lastEruptionTimestamp;\n  /** timestamp of the last castle loot distribution **/\n  mapping(uint32 => uint256) public lastCastleLootDistributionTimestamp;\n\n  /** character type range constants **/\n  uint8 public constant DRAGON_MIN_TYPE = 0;\n  uint8 public constant DRAGON_MAX_TYPE = 5;\n\n  uint8 public constant KNIGHT_MIN_TYPE = 6;\n  uint8 public constant KNIGHT_MAX_TYPE = 11;\n\n  uint8 public constant BALLOON_MIN_TYPE = 12;\n  uint8 public constant BALLOON_MAX_TYPE = 14;\n\n  uint8 public constant WIZARD_MIN_TYPE = 15;\n  uint8 public constant WIZARD_MAX_TYPE = 20;\n\n  uint8 public constant ARCHER_MIN_TYPE = 21;\n  uint8 public constant ARCHER_MAX_TYPE = 26;\n\n  uint8 public constant NUMBER_OF_LEVELS = 6;\n\n  uint8 public constant INVALID_CHARACTER_TYPE = 27;\n\n    /** knight cooldown. contains the timestamp of the earliest possible moment to start a fight */\n  mapping(uint32 => uint) public cooldown;\n\n    /** tells the number of times a character is protected */\n  mapping(uint32 => uint8) public protection;\n\n  // EVENTS\n\n  /** is fired when new characters are purchased (who bought how many characters of which type?) */\n  event NewPurchase(address player, uint8 characterType, uint16 amount, uint32 startId);\n  /** is fired when a player leaves the game */\n  event NewExit(address player, uint256 totalBalance, uint32[] removedCharacters);\n  /** is fired when an eruption occurs */\n  event NewEruption(uint32[] hitCharacters, uint128 value, uint128 gasCost);\n  /** is fired when a single character is sold **/\n  event NewSell(uint32 characterId, address player, uint256 value);\n  /** is fired when a knight fights a dragon **/\n  event NewFight(uint32 winnerID, uint32 loserID, uint256 value, uint16 probability, uint16 dice);\n  /** is fired when a knight is teleported to the field **/\n  event NewTeleport(uint32 characterId);\n  /** is fired when a protection is purchased **/\n  event NewProtection(uint32 characterId, uint8 lifes);\n  /** is fired when a castle loot distribution occurs**/\n  event NewDistributionCastleLoot(uint128 castleLoot, uint32 characterId, uint128 luckFactor);\n\n  /* initializes the contract parameter */\n  constructor(address tptAddress, address ndcAddress, address sklAddress, address xperAddress, address luckAddress, address _configAddress) public {\n    nextId = 1;\n    teleportToken = ERC20(tptAddress);\n    neverdieToken = ERC20(ndcAddress);\n    sklToken = ERC20(sklAddress);\n    xperToken = ERC20(xperAddress);\n    luckToken = ERC20(luckAddress);\n    config = DragonKingConfig(_configAddress);\n  }\n\n  /** \n    * gifts one character\n    * @param receiver gift character owner\n    * @param characterType type of the character to create as a gift\n    */\n  function giftCharacter(address receiver, uint8 characterType) payable public onlyUser {\n    _addCharacters(receiver, characterType);\n    assert(config.giftToken().transfer(receiver, config.giftTokenAmount()));\n  }\n\n  /**\n   * buys as many characters as possible with the transfered value of the given type\n   * @param characterType the type of the character\n   */\n  function addCharacters(uint8 characterType) payable public onlyUser {\n    _addCharacters(msg.sender, characterType);\n  }\n\n  function _addCharacters(address receiver, uint8 characterType) internal {\n    uint16 amount = uint16(msg.value / config.costs(characterType));\n    require(\n      amount > 0,\n      \"insufficient amount of ether to purchase a given type of character\");\n    uint16 nchars = numCharacters;\n    require(\n      config.hasEnoughTokensToPurchase(receiver, characterType),\n      \"insufficinet amount of tokens to purchase a given type of character\"\n    );\n    if (characterType >= INVALID_CHARACTER_TYPE || msg.value < config.costs(characterType) || nchars + amount > config.maxCharacters()) revert();\n    uint32 nid = nextId;\n    //if type exists, enough ether was transferred and there are less than maxCharacters characters in the game\n    if (characterType <= DRAGON_MAX_TYPE) {\n      //dragons enter the game directly\n      if (oldest == 0 || oldest == noKing)\n        oldest = nid;\n      for (uint8 i = 0; i < amount; i++) {\n        addCharacter(nid + i, nchars + i);\n        characters[nid + i] = Character(characterType, config.values(characterType), receiver, uint64(now), 0);\n      }\n      numCharactersXType[characterType] += amount;\n      numCharacters += amount;\n    }\n    else {\n      // to enter game knights, mages, and archers should be teleported later\n      for (uint8 j = 0; j < amount; j++) {\n        characters[nid + j] = Character(characterType, config.values(characterType), receiver, uint64(now), 0);\n      }\n    }\n    nextId = nid + amount;\n    emit NewPurchase(receiver, characterType, amount, nid);\n  }\n\n\n\n  /**\n   * adds a single dragon of the given type to the ids array, which is used to iterate over all characters\n   * @param nId the id the character is about to receive\n   * @param nchars the number of characters currently in the game\n   */\n  function addCharacter(uint32 nId, uint16 nchars) internal {\n    if (nchars < ids.length)\n      ids[nchars] = nId;\n    else\n      ids.push(nId);\n  }\n\n  /**\n   * leave the game.\n   * pays out the sender's balance and removes him and his characters from the game\n   * */\n  function exit() public {\n    uint32[] memory removed = new uint32[](50);\n    uint8 count;\n    uint32 lastId;\n    uint playerBalance;\n    uint16 nchars = numCharacters;\n    for (uint16 i = 0; i < nchars; i++) {\n      if (characters[ids[i]].owner == msg.sender \n          && characters[ids[i]].purchaseTimestamp + 1 days < now\n          && (characters[ids[i]].characterType < BALLOON_MIN_TYPE || characters[ids[i]].characterType > BALLOON_MAX_TYPE)) {\n        //first delete all characters at the end of the array\n        while (nchars > 0 \n            && characters[ids[nchars - 1]].owner == msg.sender \n            && characters[ids[nchars - 1]].purchaseTimestamp + 1 days < now\n            && (characters[ids[i]].characterType < BALLOON_MIN_TYPE || characters[ids[i]].characterType > BALLOON_MAX_TYPE)) {\n          nchars--;\n          lastId = ids[nchars];\n          numCharactersXType[characters[lastId].characterType]--;\n          playerBalance += characters[lastId].value;\n          removed[count] = lastId;\n          count++;\n          if (lastId == oldest) oldest = 0;\n          delete characters[lastId];\n        }\n        //replace the players character by the last one\n        if (nchars > i + 1) {\n          playerBalance += characters[ids[i]].value;\n          removed[count] = ids[i];\n          count++;\n          nchars--;\n          replaceCharacter(i, nchars);\n        }\n      }\n    }\n    numCharacters = nchars;\n    emit NewExit(msg.sender, playerBalance, removed); //fire the event to notify the client\n    msg.sender.transfer(playerBalance);\n    if (oldest == 0)\n      findOldest();\n  }\n\n  /**\n   * Replaces the character with the given id with the last character in the array\n   * @param index the index of the character in the id array\n   * @param nchars the number of characters\n   * */\n  function replaceCharacter(uint16 index, uint16 nchars) internal {\n    uint32 characterId = ids[index];\n    numCharactersXType[characters[characterId].characterType]--;\n    if (characterId == oldest) oldest = 0;\n    delete characters[characterId];\n    ids[index] = ids[nchars];\n    delete ids[nchars];\n  }\n\n  /**\n   * The volcano eruption can be triggered by anybody but only if enough time has passed since the last eription.\n   * The volcano hits up to a certain percentage of characters, but at least one.\n   * The percantage is specified in 'percentageToKill'\n   * */\n\n  function triggerVolcanoEruption() public onlyUser {\n    require(now >= lastEruptionTimestamp + config.eruptionThreshold(),\n           \"not enough time passed since last eruption\");\n    require(numCharacters > 0,\n           \"there are no characters in the game\");\n    lastEruptionTimestamp = now;\n    uint128 pot;\n    uint128 value;\n    uint16 random;\n    uint32 nextHitId;\n    uint16 nchars = numCharacters;\n    uint32 howmany = nchars * config.percentageToKill() / 100;\n    uint128 neededGas = 80000 + 10000 * uint32(nchars);\n    if(howmany == 0) howmany = 1;//hit at least 1\n    uint32[] memory hitCharacters = new uint32[](howmany);\n    bool[] memory alreadyHit = new bool[](nextId);\n    uint16 i = 0;\n    uint16 j = 0;\n    while (i < howmany) {\n      j++;\n      random = uint16(generateRandomNumber(lastEruptionTimestamp + j) % nchars);\n      nextHitId = ids[random];\n      if (!alreadyHit[nextHitId]) {\n        alreadyHit[nextHitId] = true;\n        hitCharacters[i] = nextHitId;\n        value = hitCharacter(random, nchars, 0);\n        if (value > 0) {\n          nchars--;\n        }\n        pot += value;\n        i++;\n      }\n    }\n    uint128 gasCost = uint128(neededGas * tx.gasprice);\n    numCharacters = nchars;\n    if (pot > gasCost){\n      distribute(pot - gasCost); //distribute the pot minus the oraclize gas costs\n      emit NewEruption(hitCharacters, pot - gasCost, gasCost);\n    }\n    else\n      emit NewEruption(hitCharacters, 0, gasCost);\n  }\n\n  /**\n   * Knight can attack a dragon.\n   * Archer can attack only a balloon.\n   * Dragon can attack wizards and archers.\n   * Wizard can attack anyone, except balloon.\n   * Balloon cannot attack.\n   * The value of the loser is transfered to the winner.\n   * @param characterID the ID of the knight to perfrom the attack\n   * @param characterIndex the index of the knight in the ids-array. Just needed to save gas costs.\n   *            In case it's unknown or incorrect, the index is looked up in the array.\n   * */\n  function fight(uint32 characterID, uint16 characterIndex) public onlyUser {\n    if (characterIndex >= numCharacters || characterID != ids[characterIndex])\n      characterIndex = getCharacterIndex(characterID);\n    Character storage character = characters[characterID];\n    require(cooldown[characterID] + config.CooldownThreshold() <= now,\n            \"not enough time passed since the last fight of this character\");\n    require(character.owner == msg.sender,\n            \"only owner can initiate a fight for this character\");\n\n    uint8 ctype = character.characterType;\n    require(ctype < BALLOON_MIN_TYPE || ctype > BALLOON_MAX_TYPE,\n            \"balloons cannot fight\");\n\n    uint16 adversaryIndex = getRandomAdversary(characterID, ctype);\n    require(adversaryIndex != INVALID_CHARACTER_INDEX);\n    uint32 adversaryID = ids[adversaryIndex];\n\n    Character storage adversary = characters[adversaryID];\n    uint128 value;\n    uint16 base_probability;\n    uint16 dice = uint16(generateRandomNumber(characterID) % 100);\n    if (luckToken.balanceOf(msg.sender) >= config.luckThreshold()) {\n      base_probability = uint16(generateRandomNumber(dice) % 100);\n      if (base_probability < dice) {\n        dice = base_probability;\n      }\n      base_probability = 0;\n    }\n    uint256 characterPower = sklToken.balanceOf(character.owner) / 10**15 + xperToken.balanceOf(character.owner);\n    uint256 adversaryPower = sklToken.balanceOf(adversary.owner) / 10**15 + xperToken.balanceOf(adversary.owner);\n    \n    if (character.value == adversary.value) {\n        base_probability = 50;\n      if (characterPower > adversaryPower) {\n        base_probability += uint16(100 / config.fightFactor());\n      } else if (adversaryPower > characterPower) {\n        base_probability -= uint16(100 / config.fightFactor());\n      }\n    } else if (character.value > adversary.value) {\n      base_probability = 100;\n      if (adversaryPower > characterPower) {\n        base_probability -= uint16((100 * adversary.value) / character.value / config.fightFactor());\n      }\n    } else if (characterPower > adversaryPower) {\n        base_probability += uint16((100 * character.value) / adversary.value / config.fightFactor());\n    }\n    \n    if (characters[characterID].fightCount < 3) {\n      characters[characterID].fightCount++;\n    }\n    \n    if (dice >= base_probability) {\n      // adversary won\n      if (adversary.characterType < BALLOON_MIN_TYPE || adversary.characterType > BALLOON_MAX_TYPE) {\n        value = hitCharacter(characterIndex, numCharacters, adversary.characterType);\n        if (value > 0) {\n          numCharacters--;\n        } else {\n          cooldown[characterID] = now;\n        }\n        if (adversary.characterType >= ARCHER_MIN_TYPE && adversary.characterType <= ARCHER_MAX_TYPE) {\n          castleTreasury += value;\n        } else {\n          adversary.value += value;\n        }\n        emit NewFight(adversaryID, characterID, value, base_probability, dice);\n      } else {\n        emit NewFight(adversaryID, characterID, 0, base_probability, dice); // balloons do not hit back\n      }\n    } else {\n      // character won\n      cooldown[characterID] = now;\n      value = hitCharacter(adversaryIndex, numCharacters, character.characterType);\n      if (value > 0) {\n        numCharacters--;\n      }\n      if (character.characterType >= ARCHER_MIN_TYPE && character.characterType <= ARCHER_MAX_TYPE) {\n        castleTreasury += value;\n      } else {\n        character.value += value;\n      }\n      if (oldest == 0) findOldest();\n      emit NewFight(characterID, adversaryID, value, base_probability, dice);\n    }\n  }\n\n  \n  /*\n  * @param characterType\n  * @param adversaryType\n  * @return whether adversaryType is a valid type of adversary for a given character\n  */\n  function isValidAdversary(uint8 characterType, uint8 adversaryType) pure returns (bool) {\n    if (characterType >= KNIGHT_MIN_TYPE && characterType <= KNIGHT_MAX_TYPE) { // knight\n      return (adversaryType <= DRAGON_MAX_TYPE);\n    } else if (characterType >= WIZARD_MIN_TYPE && characterType <= WIZARD_MAX_TYPE) { // wizard\n      return (adversaryType < BALLOON_MIN_TYPE || adversaryType > BALLOON_MAX_TYPE);\n    } else if (characterType >= DRAGON_MIN_TYPE && characterType <= DRAGON_MAX_TYPE) { // dragon\n      return (adversaryType >= WIZARD_MIN_TYPE);\n    } else if (characterType >= ARCHER_MIN_TYPE && characterType <= ARCHER_MAX_TYPE) { // archer\n      return ((adversaryType >= BALLOON_MIN_TYPE && adversaryType <= BALLOON_MAX_TYPE)\n             || (adversaryType >= KNIGHT_MIN_TYPE && adversaryType <= KNIGHT_MAX_TYPE));\n \n    }\n    return false;\n  }\n\n  /**\n   * pick a random adversary.\n   * @param nonce a nonce to make sure there's not always the same adversary chosen in a single block.\n   * @return the index of a random adversary character\n   * */\n  function getRandomAdversary(uint256 nonce, uint8 characterType) internal view returns(uint16) {\n    uint16 randomIndex = uint16(generateRandomNumber(nonce) % numCharacters);\n    // use 7, 11 or 13 as step size. scales for up to 1000 characters\n    uint16 stepSize = numCharacters % 7 == 0 ? (numCharacters % 11 == 0 ? 13 : 11) : 7;\n    uint16 i = randomIndex;\n    //if the picked character is a knight or belongs to the sender, look at the character + stepSizes ahead in the array (modulo the total number)\n    //will at some point return to the startingPoint if no character is suited\n    do {\n      if (isValidAdversary(characterType, characters[ids[i]].characterType) && characters[ids[i]].owner != msg.sender) {\n        return i;\n      }\n      i = (i + stepSize) % numCharacters;\n    } while (i != randomIndex);\n\n    return INVALID_CHARACTER_INDEX;\n  }\n\n\n  /**\n   * generate a random number.\n   * @param nonce a nonce to make sure there's not always the same number returned in a single block.\n   * @return the random number\n   * */\n  function generateRandomNumber(uint256 nonce) internal view returns(uint) {\n    return uint(keccak256(block.blockhash(block.number - 1), now, numCharacters, nonce));\n  }\n\n\t/**\n   * Hits the character of the given type at the given index.\n   * Wizards can knock off two protections. Other characters can do only one.\n   * @param index the index of the character\n   * @param nchars the number of characters\n   * @return the value gained from hitting the characters (zero is the character was protected)\n   * */\n  function hitCharacter(uint16 index, uint16 nchars, uint8 characterType) internal returns(uint128 characterValue) {\n    uint32 id = ids[index];\n    uint8 knockOffProtections = 1;\n    if (characterType >= WIZARD_MIN_TYPE && characterType <= WIZARD_MAX_TYPE) {\n      knockOffProtections = 2;\n    }\n    if (protection[id] >= knockOffProtections) {\n      protection[id] = protection[id] - knockOffProtections;\n      return 0;\n    }\n    characterValue = characters[ids[index]].value;\n    nchars--;\n    replaceCharacter(index, nchars);\n  }\n\n  /**\n   * finds the oldest character\n   * */\n  function findOldest() public {\n    uint32 newOldest = noKing;\n    for (uint16 i = 0; i < numCharacters; i++) {\n      if (ids[i] < newOldest && characters[ids[i]].characterType <= DRAGON_MAX_TYPE)\n        newOldest = ids[i];\n    }\n    oldest = newOldest;\n  }\n\n  /**\n  * distributes the given amount among the surviving characters\n  * @param totalAmount nthe amount to distribute\n  */\n  function distribute(uint128 totalAmount) internal {\n    uint128 amount;\n    castleTreasury += totalAmount / 20; //5% into castle treasury\n    if (oldest == 0)\n      findOldest();\n    if (oldest != noKing) {\n      //pay 10% to the oldest dragon\n      characters[oldest].value += totalAmount / 10;\n      amount  = totalAmount / 100 * 85;\n    } else {\n      amount  = totalAmount / 100 * 95;\n    }\n    //distribute the rest according to their type\n    uint128 valueSum;\n    uint8 size = ARCHER_MAX_TYPE + 1;\n    uint128[] memory shares = new uint128[](size);\n    for (uint8 v = 0; v < size; v++) {\n      if ((v < BALLOON_MIN_TYPE || v > BALLOON_MAX_TYPE) && numCharactersXType[v] > 0) {\n           valueSum += config.values(v);\n      }\n    }\n    for (uint8 m = 0; m < size; m++) {\n      if ((v < BALLOON_MIN_TYPE || v > BALLOON_MAX_TYPE) && numCharactersXType[m] > 0) {\n        shares[m] = amount * config.values(m) / valueSum / numCharactersXType[m];\n      }\n    }\n    uint8 cType;\n    for (uint16 i = 0; i < numCharacters; i++) {\n      cType = characters[ids[i]].characterType;\n      if (cType < BALLOON_MIN_TYPE || cType > BALLOON_MAX_TYPE)\n        characters[ids[i]].value += shares[characters[ids[i]].characterType];\n    }\n  }\n\n  /**\n   * allows the owner to collect the accumulated fees\n   * sends the given amount to the owner's address if the amount does not exceed the\n   * fees (cannot touch the players' balances) minus 100 finney (ensure that oraclize fees can be paid)\n   * @param amount the amount to be collected\n   * */\n  function collectFees(uint128 amount) public onlyOwner {\n    uint collectedFees = getFees();\n    if (amount + 100 finney < collectedFees) {\n      owner.transfer(amount);\n    }\n  }\n\n  /**\n  * withdraw NDC and TPT tokens\n  */\n  function withdraw() public onlyOwner {\n    uint256 ndcBalance = neverdieToken.balanceOf(this);\n    if(ndcBalance > 0)\n      assert(neverdieToken.transfer(owner, ndcBalance));\n    uint256 tptBalance = teleportToken.balanceOf(this);\n    if(tptBalance > 0)\n      assert(teleportToken.transfer(owner, tptBalance));\n  }\n\n  /**\n   * pays out the players.\n   * */\n  function payOut() public onlyOwner {\n    for (uint16 i = 0; i < numCharacters; i++) {\n      characters[ids[i]].owner.transfer(characters[ids[i]].value);\n      delete characters[ids[i]];\n    }\n    delete ids;\n    numCharacters = 0;\n  }\n\n  /**\n   * pays out the players and kills the game.\n   * */\n  function stop() public onlyOwner {\n    withdraw();\n    payOut();\n    destroy();\n  }\n\n  function generateLuckFactor(uint128 nonce) internal view returns(uint128 luckFactor) {\n    uint128 f;\n    luckFactor = 50;\n    for(uint8 i = 0; i < luckRounds; i++){\n      f = roll(uint128(generateRandomNumber(nonce+i*7)%1000));\n      if(f < luckFactor) luckFactor = f;\n    }\n  }\n  \n  function roll(uint128 nonce) internal view returns(uint128) {\n    uint128 sum = 0;\n    uint128 inc = 1;\n    for (uint128 i = 45; i >= 3; i--) {\n      if (sum > nonce) {\n          return i;\n      }\n      sum += inc;\n      if (i != 35) {\n          inc += 1;\n      }\n    }\n    return 3;\n  }\n  \n  function distributeCastleLootMulti(uint32[] characterIds) external onlyUser {\n    require(characterIds.length <= 50);\n    for(uint i = 0; i < characterIds.length; i++){\n      distributeCastleLoot(characterIds[i]);\n    }\n  }\n\n  /* @dev distributes castle loot among archers */\n  function distributeCastleLoot(uint32 characterId) public onlyUser {\n    require(castleTreasury > 0, \"empty treasury\");\n    Character archer = characters[characterId];\n    require(archer.characterType >= ARCHER_MIN_TYPE && archer.characterType <= ARCHER_MAX_TYPE, \"only archers can access the castle treasury\");\n    if(lastCastleLootDistributionTimestamp[characterId] == 0) \n      require(now - archer.purchaseTimestamp >= config.castleLootDistributionThreshold(), \n            \"not enough time has passed since the purchase\");\n    else \n      require(now >= lastCastleLootDistributionTimestamp[characterId] + config.castleLootDistributionThreshold(),\n            \"not enough time passed since the last castle loot distribution\");\n    require(archer.fightCount >= 3, \"need to fight 3 times\");\n    lastCastleLootDistributionTimestamp[characterId] = now;\n    archer.fightCount = 0;\n    \n    uint128 luckFactor = generateLuckFactor(uint128(generateRandomNumber(characterId) % 1000));\n    if (luckFactor < 3) {\n      luckFactor = 3;\n    }\n    assert(luckFactor <= 50);\n    uint128 amount = castleTreasury * luckFactor / 100; \n    archer.value += amount;\n    castleTreasury -= amount;\n    emit NewDistributionCastleLoot(amount, characterId, luckFactor);\n\n  }\n\n  /**\n   * sell the character of the given id\n   * throws an exception in case of a knight not yet teleported to the game\n   * @param characterId the id of the character\n   * */\n  function sellCharacter(uint32 characterId, uint16 characterIndex) public onlyUser {\n    if (characterIndex >= numCharacters || characterId != ids[characterIndex])\n      characterIndex = getCharacterIndex(characterId);\n    Character storage char = characters[characterId];\n    require(msg.sender == char.owner,\n            \"only owners can sell their characters\");\n    require(char.characterType < BALLOON_MIN_TYPE || char.characterType > BALLOON_MAX_TYPE,\n            \"balloons are not sellable\");\n    require(char.purchaseTimestamp + 1 days < now,\n            \"character can be sold only 1 day after the purchase\");\n    uint128 val = char.value;\n    numCharacters--;\n    replaceCharacter(characterIndex, numCharacters);\n    msg.sender.transfer(val);\n    if (oldest == 0)\n      findOldest();\n    emit NewSell(characterId, msg.sender, val);\n  }\n\n  /**\n   * receive approval to spend some tokens.\n   * used for teleport and protection.\n   * @param sender the sender address\n   * @param value the transferred value\n   * @param tokenContract the address of the token contract\n   * @param callData the data passed by the token contract\n   * */\n  function receiveApproval(address sender, uint256 value, address tokenContract, bytes callData) public {\n    require(tokenContract == address(teleportToken), \"everything is paid with teleport tokens\");\n    bool forProtection = secondToUint32(callData) == 1 ? true : false;\n    uint32 id;\n    uint256 price;\n    if (!forProtection) {\n      id = toUint32(callData);\n      price = config.teleportPrice();\n      if (characters[id].characterType >= BALLOON_MIN_TYPE && characters[id].characterType <= WIZARD_MAX_TYPE) {\n        price *= 2;\n      }\n      require(value >= price,\n              \"insufficinet amount of tokens to teleport this character\");\n      assert(teleportToken.transferFrom(sender, this, price));\n      teleportCharacter(id);\n    } else {\n      id = toUint32(callData);\n      // user can purchase extra lifes only right after character purchaes\n      // in other words, user value should be equal the initial value\n      uint8 cType = characters[id].characterType;\n      require(characters[id].value == config.values(cType),\n              \"protection could be bought only before the first fight and before the first volcano eruption\");\n\n      // calc how many lifes user can actually buy\n      // the formula is the following:\n\n      uint256 lifePrice;\n      uint8 max;\n      if(cType <= KNIGHT_MAX_TYPE ){\n        lifePrice = ((cType % NUMBER_OF_LEVELS) + 1) * config.protectionPrice();\n        max = 3;\n      } else if (cType >= BALLOON_MIN_TYPE && cType <= BALLOON_MAX_TYPE) {\n        lifePrice = (((cType+3) % NUMBER_OF_LEVELS) + 1) * config.protectionPrice() * 2;\n        max = 6;\n      } else if (cType >= WIZARD_MIN_TYPE && cType <= WIZARD_MAX_TYPE) {\n        lifePrice = (((cType+3) % NUMBER_OF_LEVELS) + 1) * config.protectionPrice() * 2;\n        max = 3;\n      } else if (cType >= ARCHER_MIN_TYPE && cType <= ARCHER_MAX_TYPE) {\n        lifePrice = (((cType+3) % NUMBER_OF_LEVELS) + 1) * config.protectionPrice();\n        max = 3;\n      }\n\n      price = 0;\n      uint8 i = protection[id];\n      for (i; i < max && value >= price + lifePrice * (i + 1); i++) {\n        price += lifePrice * (i + 1);\n      }\n      assert(teleportToken.transferFrom(sender, this, price));\n      protectCharacter(id, i);\n    } \n  }\n\n  /**\n   * Knights, balloons, wizards, and archers are only entering the game completely, when they are teleported to the scene\n   * @param id the character id\n   * */\n  function teleportCharacter(uint32 id) internal {\n    // ensure we do not teleport twice\n    require(teleported[id] == false,\n           \"already teleported\");\n    teleported[id] = true;\n    Character storage character = characters[id];\n    require(character.characterType > DRAGON_MAX_TYPE,\n           \"dragons do not need to be teleported\"); //this also makes calls with non-existent ids fail\n    addCharacter(id, numCharacters);\n    numCharacters++;\n    numCharactersXType[character.characterType]++;\n    emit NewTeleport(id);\n  }\n\n  /**\n   * adds protection to a character\n   * @param id the character id\n   * @param lifes the number of protections\n   * */\n  function protectCharacter(uint32 id, uint8 lifes) internal {\n    protection[id] = lifes;\n    emit NewProtection(id, lifes);\n  }\n  \n  /**\n   * set the castle loot factor (percent of the luck factor being distributed)\n   * */\n  function setLuckRound(uint8 rounds) public onlyOwner{\n    require(rounds >= 1 && rounds <= 100);\n    luckRounds = rounds;\n  }\n\n\n  /****************** GETTERS *************************/\n\n  /**\n   * returns the character of the given id\n   * @param characterId the character id\n   * @return the type, value and owner of the character\n   * */\n  function getCharacter(uint32 characterId) public view returns(uint8, uint128, address) {\n    return (characters[characterId].characterType, characters[characterId].value, characters[characterId].owner);\n  }\n\n  /**\n   * returns the index of a character of the given id\n   * @param characterId the character id\n   * @return the character id\n   * */\n  function getCharacterIndex(uint32 characterId) constant public returns(uint16) {\n    for (uint16 i = 0; i < ids.length; i++) {\n      if (ids[i] == characterId) {\n        return i;\n      }\n    }\n    revert();\n  }\n\n  /**\n   * returns 10 characters starting from a certain indey\n   * @param startIndex the index to start from\n   * @return 4 arrays containing the ids, types, values and owners of the characters\n   * */\n  function get10Characters(uint16 startIndex) constant public returns(uint32[10] characterIds, uint8[10] types, uint128[10] values, address[10] owners) {\n    uint32 endIndex = startIndex + 10 > numCharacters ? numCharacters : startIndex + 10;\n    uint8 j = 0;\n    uint32 id;\n    for (uint16 i = startIndex; i < endIndex; i++) {\n      id = ids[i];\n      characterIds[j] = id;\n      types[j] = characters[id].characterType;\n      values[j] = characters[id].value;\n      owners[j] = characters[id].owner;\n      j++;\n    }\n\n  }\n\n  /**\n   * returns the number of dragons in the game\n   * @return the number of dragons\n   * */\n  function getNumDragons() constant public returns(uint16 numDragons) {\n    for (uint8 i = DRAGON_MIN_TYPE; i <= DRAGON_MAX_TYPE; i++)\n      numDragons += numCharactersXType[i];\n  }\n\n  /**\n   * returns the number of wizards in the game\n   * @return the number of wizards\n   * */\n  function getNumWizards() constant public returns(uint16 numWizards) {\n    for (uint8 i = WIZARD_MIN_TYPE; i <= WIZARD_MAX_TYPE; i++)\n      numWizards += numCharactersXType[i];\n  }\n  /**\n   * returns the number of archers in the game\n   * @return the number of archers\n   * */\n  function getNumArchers() constant public returns(uint16 numArchers) {\n    for (uint8 i = ARCHER_MIN_TYPE; i <= ARCHER_MAX_TYPE; i++)\n      numArchers += numCharactersXType[i];\n  }\n\n  /**\n   * returns the number of knights in the game\n   * @return the number of knights\n   * */\n  function getNumKnights() constant public returns(uint16 numKnights) {\n    for (uint8 i = KNIGHT_MIN_TYPE; i <= KNIGHT_MAX_TYPE; i++)\n      numKnights += numCharactersXType[i];\n  }\n\n  /**\n   * @return the accumulated fees\n   * */\n  function getFees() constant public returns(uint) {\n    uint reserved = castleTreasury;\n    for (uint16 j = 0; j < numCharacters; j++)\n      reserved += characters[ids[j]].value;\n    return address(this).balance - reserved;\n  }\n\n\n  /************* HELPERS ****************/\n\n  /**\n   * only works for bytes of length < 32\n   * @param b the byte input\n   * @return the uint\n   * */\n  function toUint32(bytes b) internal pure returns(uint32) {\n    bytes32 newB;\n    assembly {\n      newB: = mload(0xa0)\n    }\n    return uint32(newB);\n  }\n  \n  function secondToUint32(bytes b) internal pure returns(uint32){\n    bytes32 newB;\n    assembly {\n      newB: = mload(0xc0)\n    }\n    return uint32(newB);\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"characterId\",\"type\":\"uint32\"},{\"name\":\"characterIndex\",\"type\":\"uint16\"}],\"name\":\"sellCharacter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"characterType\",\"type\":\"uint8\"}],\"name\":\"giftCharacter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rounds\",\"type\":\"uint8\"}],\"name\":\"setLuckRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumArchers\",\"outputs\":[{\"name\":\"numArchers\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerVolcanoEruption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KNIGHT_MAX_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"collectFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"castleTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"numCharactersXType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BALLOON_MIN_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"characterId\",\"type\":\"uint32\"}],\"name\":\"getCharacter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint128\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVALID_CHARACTER_INDEX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"characterId\",\"type\":\"uint32\"}],\"name\":\"getCharacterIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"lastCastleLootDistributionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint16\"}],\"name\":\"get10Characters\",\"outputs\":[{\"name\":\"characterIds\",\"type\":\"uint32[10]\"},{\"name\":\"types\",\"type\":\"uint8[10]\"},{\"name\":\"values\",\"type\":\"uint128[10]\"},{\"name\":\"owners\",\"type\":\"address[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"protection\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"characterID\",\"type\":\"uint32\"},{\"name\":\"characterIndex\",\"type\":\"uint16\"}],\"name\":\"fight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"characterType\",\"type\":\"uint8\"}],\"name\":\"addCharacters\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumDragons\",\"outputs\":[{\"name\":\"numDragons\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"tokenContract\",\"type\":\"address\"},{\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KNIGHT_MIN_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WIZARD_MAX_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumWizards\",\"outputs\":[{\"name\":\"numWizards\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUMBER_OF_LEVELS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"characterType\",\"type\":\"uint8\"},{\"name\":\"adversaryType\",\"type\":\"uint8\"}],\"name\":\"isValidAdversary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ARCHER_MIN_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"cooldown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WIZARD_MIN_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumKnights\",\"outputs\":[{\"name\":\"numKnights\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastEruptionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DRAGON_MAX_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ARCHER_MAX_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BALLOON_MAX_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"characterIds\",\"type\":\"uint32[]\"}],\"name\":\"distributeCastleLootMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noKing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"characterId\",\"type\":\"uint32\"}],\"name\":\"distributeCastleLoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DRAGON_MIN_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numCharacters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVALID_CHARACTER_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"findOldest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tptAddress\",\"type\":\"address\"},{\"name\":\"ndcAddress\",\"type\":\"address\"},{\"name\":\"sklAddress\",\"type\":\"address\"},{\"name\":\"xperAddress\",\"type\":\"address\"},{\"name\":\"luckAddress\",\"type\":\"address\"},{\"name\":\"_configAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"characterType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"startId\",\"type\":\"uint32\"}],\"name\":\"NewPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"removedCharacters\",\"type\":\"uint32[]\"}],\"name\":\"NewExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hitCharacters\",\"type\":\"uint32[]\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"gasCost\",\"type\":\"uint128\"}],\"name\":\"NewEruption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"characterId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"loserID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"probability\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"uint16\"}],\"name\":\"NewFight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"characterId\",\"type\":\"uint32\"}],\"name\":\"NewTeleport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"characterId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"lifes\",\"type\":\"uint8\"}],\"name\":\"NewProtection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"castleLoot\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"characterId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"luckFactor\",\"type\":\"uint128\"}],\"name\":\"NewDistributionCastleLoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c596bd09d652827b0106292d3e378d5938df4b12000000000000000000000000a54ddc7b3cce7fc8b1e3fa0256d0db80d2c10970000000000000000000000000a7bd9d58d22d5e35ec4a08083141e0340ea2ca93000000000000000000000000d28525ad63f337c86843d720dae921228e44f0ac000000000000000000000000ca1c217a2200b60dbd52e33c7cb1758db2b30a0e0000000000000000000000000242269c58c2885684a597d47da9ef87917771fb"
}