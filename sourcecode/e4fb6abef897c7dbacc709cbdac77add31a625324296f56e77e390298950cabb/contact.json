{
  "address": "0xf04795e826c7a83ab3e146069adc9e158f739194",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VoiceOfSteelToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\npragma solidity ^0.4.16;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract ERC20Basic is Pausable {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 tokens);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  address public voiceOfSteelTokenAddress;\n  uint256 noEther = 0;\n\n  string public name = \"Voice of Steel Token\";\n  uint8 public decimals = 18;\n  string public symbol = \"VST\";\n\n  address public enterWallet = 0xD7F68D64719401853eC60173891DC1AA7c0ecd71;\n  address public investWallet = 0x14c7FBA3C597b53571169Ae2c40CC765303932aE;\n  address public exitWallet = 0xD7F68D64719401853eC60173891DC1AA7c0ecd71;\n  uint256 public priceEthPerToken = 33333;\n  \n  uint256 public investCommission = 50;\n  uint256 public withdrawCommission = 100;\n  bool public availableWithdrawal = false;\n  \n  event MoreData(uint256 ethAmount, uint256 price);\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n    \n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    if (_to == voiceOfSteelTokenAddress && availableWithdrawal) {\n\n      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n\n      balances[msg.sender] = balances[msg.sender].sub(_value);\n      totalSupply = totalSupply.sub(_value);\n\n      msg.sender.transfer(weiAmount);\n      exitWallet.transfer(weiAmount.div(100).mul(uint256(100).sub(withdrawCommission)));\n\n      Transfer(msg.sender, voiceOfSteelTokenAddress, _value);\n      MoreData(weiAmount, priceEthPerToken);\n      return true;\n\n    } else {\n      balances[msg.sender] = balances[msg.sender].sub(_value);\n      balances[_to] = balances[_to].add(_value);\n      Transfer(msg.sender, _to, _value);\n      MoreData(0, priceEthPerToken);\n      return true;\n    }\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n    \n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    if (_to == voiceOfSteelTokenAddress && availableWithdrawal) {\n\n      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n\n      balances[_from] = balances[_from].sub(_value);\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n      msg.sender.transfer(weiAmount);\n      exitWallet.transfer(weiAmount.div(100).mul(uint256(100).sub(withdrawCommission)));\n\n      Transfer(_from, voiceOfSteelTokenAddress, _value);\n      MoreData(weiAmount, priceEthPerToken);\n      return true;\n\n    } else {\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        MoreData(0, priceEthPerToken);\n        return true;\n    }\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract VoiceOfSteelToken is StandardToken {\n    \n  function () payable whenNotPaused {\n    \n    uint256 amount = msg.value;\n    address investor = msg.sender;\n    \n    uint256 tokens = amount.mul(priceEthPerToken).div(10000);\n    \n    totalSupply = totalSupply.add(tokens);\n    balances[investor] = balances[investor].add(tokens);\n\n    uint256 fisrtAmount = amount.div(100).mul(investCommission);\n    investWallet.transfer(fisrtAmount);\n    uint256 leftAmount = amount.sub(fisrtAmount);\n    enterWallet.transfer(leftAmount);\n    \n    Transfer(voiceOfSteelTokenAddress, investor, tokens);\n    MoreData(amount, priceEthPerToken);\n    \n  }\n\n  function setVoiceOfSteelTokenAddress(address _address) onlyOwner {\n    voiceOfSteelTokenAddress = _address;\n  }\n\n  function addEther() payable onlyOwner {}\n\n  function deleteInvestorTokens(address investor, uint256 tokens) onlyOwner {\n    require(tokens <= balances[investor]);\n\n    balances[investor] = balances[investor].sub(tokens);\n    totalSupply = totalSupply.sub(tokens);\n    Transfer(investor, voiceOfSteelTokenAddress, tokens);\n    MoreData(0, priceEthPerToken);\n  }\n\n  function setNewPrice(uint256 _ethPerToken) onlyOwner {\n    priceEthPerToken = _ethPerToken;\n  }\n\n  function getWei(uint256 weiAmount) onlyOwner {\n    owner.transfer(weiAmount);\n  }\n\n  function airdrop(address[] _array1, uint256[] _array2) onlyOwner {\n    address[] memory arrayAddress = _array1;\n    uint256[] memory arrayAmount = _array2;\n    uint256 arrayLength = arrayAddress.length.sub(1);\n    uint256 i = 0;\n     \n    while (i <= arrayLength) {\n        totalSupply = totalSupply.add(arrayAmount[i]);\n        balances[arrayAddress[i]] = balances[arrayAddress[i]].add(arrayAmount[i]);\n        Transfer(voiceOfSteelTokenAddress, arrayAddress[i], arrayAmount[i]);\n        MoreData(0, priceEthPerToken);\n        i = i.add(1);\n    }  \n  }\n  \n  function setNewInvestCommission(uint256 _newInvestCommission) onlyOwner {\n    investCommission = _newInvestCommission;\n  }\n  \n  function setNewAvailableWithdrawal(bool _newAvailableWithdrawal) onlyOwner {\n    availableWithdrawal = _newAvailableWithdrawal;\n  }\n  \n  function setNewWithdrawCommission(uint256 _newWithdrawCommission) onlyOwner {\n    withdrawCommission = _newWithdrawCommission;\n  }\n  \n  function newEnterWallet(address _enterWallet) onlyOwner {\n    enterWallet = _enterWallet;\n  }\n  \n  function newInvestWallet(address _investWallet) onlyOwner {\n    investWallet = _investWallet;\n  }\n  \n  function newExitWallet(address _exitWallet) onlyOwner {\n    exitWallet = _exitWallet;\n  }\n  \n}",
  "bytecode": "606060405260008060146101000a81548160ff02191690831515021790555060006004556040805190810160405280601481526020017f566f696365206f6620537465656c20546f6b656e00000000000000000000000081525060059080519060200190620000709291906200024d565b506012600660006101000a81548160ff021916908360ff1602179055506040805190810160405280600381526020017f565354000000000000000000000000000000000000000000000000000000000081525060079080519060200190620000da9291906200024d565b5073d7f68d64719401853ec60173891dc1aa7c0ecd71600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507314c7fba3c597b53571169ae2c40cc765303932ae600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073d7f68d64719401853ec60173891dc1aa7c0ecd71600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550618235600b556032600c556064600d556000600e60006101000a81548160ff0219169083151502179055505b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b620002fc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029057805160ff1916838001178555620002c1565b82800160010185558215620002c1579182015b82811115620002c0578251825591602001919060010190620002a3565b5b509050620002d09190620002d4565b5090565b620002f991905b80821115620002f5576000816000905550600101620002db565b5090565b90565b612ce6806200030c6000396000f300606060405236156101aa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610483578063095ea7b3146105125780631305a3fa1461056c57806318160ddd1461059157806323b872dd146105ba578063313ce567146106335780633e25e837146106625780633f4ba83a1461068b578063436e388d146106a0578063479e24e6146106f55780634e5f8751146107185780634fb67f0414610751578063572347f9146107a65780635c975abb146107d3578063672434821461080057806370a082311461089a578063800d41a3146108e75780638456cb59146109205780638894dd2b146109355780638d976d761461093f5780638da5cb5b14610968578063907b270b146109bd57806395d89b41146109e657806398cf6dd314610a75578063a73e983714610ab7578063a9059cbb14610af0578063bbc620a814610b4a578063bc8409a414610b6d578063dd62ed3e14610bc2578063e942c56414610c2e578063eb5068f214610c51578063ebd4da7614610ca6578063ee8cdd4e14610cdf578063f2fde38b14610d02575b5b60008060008060008060149054906101000a900460ff161515156101ce57600080fd5b3494503393506101fd6127106101ef600b5488610d3b90919063ffffffff16565b610d6f90919063ffffffff16565b925061021483600154610d8b90919063ffffffff16565b60018190555061026c83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d8b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102d7600c546102c9606488610d6f90919063ffffffff16565b610d3b90919063ffffffff16565b9150600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561033b57600080fd5b61034e8286610daa90919063ffffffff16565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156103b257600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37fab7f846db15fde07b57a465eadfc9522aa6025fb46956793ecd4fc860d117d2185600b54604051808381526020018281526020019250505060405180910390a15b5b5050505050005b341561048e57600080fd5b610496610dc4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104d75780820151818401525b6020810190506104bb565b50505050905090810190601f1680156105045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051d57600080fd5b610552600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e62565b604051808215151515815260200191505060405180910390f35b341561057757600080fd5b61058f60048080351515906020019091905050610fea565b005b341561059c57600080fd5b6105a4611064565b6040518082815260200191505060405180910390f35b34156105c557600080fd5b610619600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061106a565b604051808215151515815260200191505060405180910390f35b341561063e57600080fd5b61064661187b565b604051808260ff1660ff16815260200191505060405180910390f35b341561066d57600080fd5b61067561188e565b6040518082815260200191505060405180910390f35b341561069657600080fd5b61069e611894565b005b34156106ab57600080fd5b6106b3611955565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561070057600080fd5b610716600480803590602001909190505061197b565b005b341561072357600080fd5b61074f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119e2565b005b341561075c57600080fd5b610764611a83565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107b157600080fd5b6107b9611aa9565b604051808215151515815260200191505060405180910390f35b34156107de57600080fd5b6107e6611abc565b604051808215151515815260200191505060405180910390f35b341561080b57600080fd5b61089860048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611acf565b005b34156108a557600080fd5b6108d1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d90565b6040518082815260200191505060405180910390f35b34156108f257600080fd5b61091e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dda565b005b341561092b57600080fd5b610933611e7b565b005b61093d611f3e565b005b341561094a57600080fd5b610952611f9d565b6040518082815260200191505060405180910390f35b341561097357600080fd5b61097b611fa3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109c857600080fd5b6109d0611fc8565b6040518082815260200191505060405180910390f35b34156109f157600080fd5b6109f9611fce565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a3a5780820151818401525b602081019050610a1e565b50505050905090810190601f168015610a675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610a8057600080fd5b610ab5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061206c565b005b3415610ac257600080fd5b610aee600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612294565b005b3415610afb57600080fd5b610b30600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612335565b604051808215151515815260200191505060405180910390f35b3415610b5557600080fd5b610b6b60048080359060200190919050506128b7565b005b3415610b7857600080fd5b610b8061291e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bcd57600080fd5b610c18600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612944565b6040518082815260200191505060405180910390f35b3415610c3957600080fd5b610c4f60048080359060200190919050506129cc565b005b3415610c5c57600080fd5b610c64612a8d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610cb157600080fd5b610cdd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612ab3565b005b3415610cea57600080fd5b610d006004808035906020019091905050612b54565b005b3415610d0d57600080fd5b610d39600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612bbb565b005b60008082840290506000841480610d5c5750828482811515610d5957fe5b04145b1515610d6457fe5b8091505b5092915050565b6000808284811515610d7d57fe5b0490508091505b5092915050565b6000808284019050838110151515610d9f57fe5b8091505b5092915050565b6000828211151515610db857fe5b81830390505b92915050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e5a5780601f10610e2f57610100808354040283529160200191610e5a565b820191906000526020600020905b815481529060010190602001808311610e3d57829003601f168201915b505050505081565b600080821480610eee57506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610ef957600080fd5b81600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104557600080fd5b80600e60006101000a81548160ff0219169083151502179055505b5b50565b60015481565b600080600060149054906101000a900460ff1615151561108957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156110c557600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561111357600080fd5b600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561119e57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156112075750600e60009054906101000a900460ff165b1561158857611235600b54611227600d5486610d3b90919063ffffffff16565b610d6f90919063ffffffff16565b905061128983600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610daa90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061135b83600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610daa90919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561141b57600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc611492611470600d546064610daa90919063ffffffff16565b611484606486610d6f90919063ffffffff16565b610d3b90919063ffffffff16565b9081150290604051600060405180830381858888f1935050505015156114b757600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37fab7f846db15fde07b57a465eadfc9522aa6025fb46956793ecd4fc860d117d2181600b54604051808381526020018281526020019250505060405180910390a160019150611872565b6115da83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d8b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061166f83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610daa90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061174183600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610daa90919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37fab7f846db15fde07b57a465eadfc9522aa6025fb46956793ecd4fc860d117d216000600b54604051808381526020018281526020019250505060405180910390a160019150611872565b5b5b509392505050565b600660009054906101000a900460ff1681565b600d5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ef57600080fd5b600060149054906101000a900460ff16151561190a57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a15b5b5b565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119d657600080fd5b80600c819055505b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a3d57600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60009054906101000a900460ff1681565b600060149054906101000a900460ff1681565b611ad7612c92565b611adf612ca6565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b3d57600080fd5b859350849250611b5860018551610daa90919063ffffffff16565b9150600090505b8181111515611d8657611b948382815181101515611b7957fe5b90602001906020020151600154610d8b90919063ffffffff16565b600181905550611c1a8382815181101515611bab57fe5b90602001906020020151600260008785815181101515611bc757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d8b90919063ffffffff16565b600260008684815181101515611c2c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508381815181101515611c8257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8584815181101515611d0a57fe5b906020019060200201516040518082815260200191505060405180910390a37fab7f846db15fde07b57a465eadfc9522aa6025fb46956793ecd4fc860d117d216000600b54604051808381526020018281526020019250505060405180910390a1611d7f600182610d8b90919063ffffffff16565b9050611b5f565b5b5b505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e3557600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ed657600080fd5b600060149054906101000a900460ff16151515611ef257600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a15b5b5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f9957600080fd5b5b5b565b600c5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120645780601f1061203957610100808354040283529160200191612064565b820191906000526020600020905b81548152906001019060200180831161204757829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120c757600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561211557600080fd5b61216781600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610daa90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121bf81600154610daa90919063ffffffff16565b600181905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a37fab7f846db15fde07b57a465eadfc9522aa6025fb46956793ecd4fc860d117d216000600b54604051808381526020018281526020019250505060405180910390a15b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122ef57600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600080600060149054906101000a900460ff1615151561235457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561239057600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156123de57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156124475750600e60009054906101000a900460ff165b156126d457612475600b54612467600d5486610d3b90919063ffffffff16565b610d6f90919063ffffffff16565b90506124c983600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610daa90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061252183600154610daa90919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561256757600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6125de6125bc600d546064610daa90919063ffffffff16565b6125d0606486610d6f90919063ffffffff16565b610d3b90919063ffffffff16565b9081150290604051600060405180830381858888f19350505050151561260357600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37fab7f846db15fde07b57a465eadfc9522aa6025fb46956793ecd4fc860d117d2181600b54604051808381526020018281526020019250505060405180910390a1600191506128af565b61272683600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610daa90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127bb83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d8b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37fab7f846db15fde07b57a465eadfc9522aa6025fb46956793ecd4fc860d117d216000600b54604051808381526020018281526020019250505060405180910390a1600191506128af565b5b5b5092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561291257600080fd5b80600d819055505b5b50565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a2757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515612a8857600080fd5b5b5b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b0e57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612baf57600080fd5b80600b819055505b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c1657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612c8d57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820e1f4f6a8d37caa9acd8ff69468f64250f28876a096842b663ad9234f18648e3f0029"
}