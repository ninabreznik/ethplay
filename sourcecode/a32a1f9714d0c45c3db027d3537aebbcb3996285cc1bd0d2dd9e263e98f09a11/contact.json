{
  "address": "0x02a0bfe1cfd594df9fbfaf5412f4cd6a9e1653b1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Disputer",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-11\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/IDisputer.sol\n\n/**\n * Interface of what the disputer contract should do.\n *\n * Its main responsibility to interact with Augur. Only minimal glue methods\n * are added apart from that in order for crowdsourcer to be able to interact\n * with it.\n *\n * This contract holds the actual crowdsourced REP for dispute, so it doesn't\n * need to transfer it from elsewhere at the moment of dispute. It doesn't care\n * at all who this REP belongs to, it just spends it for dispute. Accounting\n * is done in other contracts.\n */\ninterface IDisputer {\n  /**\n   * This function should use as little gas as possible, as it will be called\n   * during rush time. Unnecessary operations are postponed for later.\n   *\n   * Can by called by anyone, but only once.\n   */\n  function dispute(address feeReceiver) external;\n\n  // intentionally can be called by anyone, as no user input is used\n  function approveManagerToSpendDisputeTokens() external;\n\n  function getOwner() external view returns(address);\n\n  function hasDisputed() external view returns(bool);\n\n  function feeReceiver() external view returns(address);\n\n  function getREP() external view returns(IERC20);\n\n  function getDisputeTokenAddress() external view returns(IERC20);\n}\n\n// File: contracts/augur/feeWindow.sol\n\ninterface FeeWindow {\n  function getStartTime() external view returns(uint256);\n  function isOver() external view returns(bool);\n}\n\n// File: contracts/augur/universe.sol\n\ninterface Universe {\n  function getDisputeRoundDurationInSeconds() external view returns(uint256);\n\n  function isForking() external view returns(bool);\n\n  function isContainerForMarket(address _shadyMarket) external view returns(\n    bool\n  );\n}\n\n// File: contracts/augur/reportingParticipant.sol\n\n/**\n * This should've been an interface, but interfaces cannot inherit interfaces\n */\ncontract ReportingParticipant is IERC20 {\n  function redeem(address _redeemer) external returns(bool);\n  function getStake() external view returns(uint256);\n  function getPayoutDistributionHash() external view returns(bytes32);\n  function getFeeWindow() external view returns(FeeWindow);\n}\n\n// File: contracts/augur/market.sol\n\ninterface Market {\n  function contribute(\n    uint256[] _payoutNumerators,\n    bool _invalid,\n    uint256 _amount\n  ) external returns(bool);\n\n  function getReputationToken() external view returns(IERC20);\n\n  function getUniverse() external view returns(Universe);\n\n  function derivePayoutDistributionHash(\n    uint256[] _payoutNumerators,\n    bool _invalid\n  ) external view returns(bytes32);\n\n  function getCrowdsourcer(\n    bytes32 _payoutDistributionHash\n  ) external view returns(ReportingParticipant);\n\n  function getNumParticipants() external view returns(uint256);\n\n  function getReportingParticipant(uint256 _index) external view returns(\n    ReportingParticipant\n  );\n\n  function isFinalized() external view returns(bool);\n\n  function getFeeWindow() external view returns(FeeWindow);\n\n  function getWinningReportingParticipant() external view returns(\n    ReportingParticipant\n  );\n\n  function isContainerForReportingParticipant(\n    ReportingParticipant _shadyReportingParticipant\n  ) external view returns(bool);\n}\n\n// File: contracts/DisputerParams.sol\n\nlibrary DisputerParams {\n  struct Params {\n    Market market;\n    uint256 feeWindowId;\n    uint256[] payoutNumerators;\n    bool invalid;\n  }\n}\n\n// File: contracts/BaseDisputer.sol\n\n/**\n * Shared code between real disputer and mock disputer, to make test coverage\n * better.\n */\ncontract BaseDisputer is IDisputer {\n  address public m_owner;\n  address public m_feeReceiver = 0;\n  DisputerParams.Params public m_params;\n  IERC20 public m_rep;\n  IERC20 public m_disputeToken;\n\n  /**\n   * As much as we can do during dispute, without actually interacting\n   * with Augur\n   */\n  function dispute(address feeReceiver) external {\n    require(m_feeReceiver == 0, \"Can only dispute once\");\n    preDisputeCheck();\n    require(feeReceiver != 0, \"Must have valid fee receiver\");\n    m_feeReceiver = feeReceiver;\n\n    IERC20 rep = getREP();\n    uint256 initialREPBalance = rep.balanceOf(this);\n    IERC20 disputeToken = disputeImpl();\n    uint256 finalREPBalance = rep.balanceOf(this);\n    m_disputeToken = disputeToken;\n    uint256 finalDisputeTokenBalance = disputeToken.balanceOf(this);\n    assert(finalREPBalance + finalDisputeTokenBalance >= initialREPBalance);\n  }\n\n  // intentionally can be called by anyone, as no user input is used\n  function approveManagerToSpendDisputeTokens() external {\n    IERC20 disputeTokenAddress = getDisputeTokenAddress();\n    require(disputeTokenAddress.approve(m_owner, 2 ** 256 - 1));\n  }\n\n  function getOwner() external view returns(address) {\n    return m_owner;\n  }\n\n  function hasDisputed() external view returns(bool) {\n    return m_feeReceiver != 0;\n  }\n\n  function feeReceiver() external view returns(address) {\n    require(m_feeReceiver != 0);\n    return m_feeReceiver;\n  }\n\n  function getREP() public view returns(IERC20) {\n    return m_rep;\n  }\n\n  function getDisputeTokenAddress() public view returns(IERC20) {\n    require(m_disputeToken != IERC20(address(this)));\n    return m_disputeToken;\n  }\n\n  function getREPImpl() internal view returns(IERC20);\n  function disputeImpl() internal returns(IERC20 disputeToken);\n  function preDisputeCheck() internal;\n\n  // it is ESSENTIAL that this function is kept internal\n  // otherwise it can allow taking over ownership\n  function baseInit(\n    address owner,\n    Market market,\n    uint256 feeWindowId,\n    uint256[] payoutNumerators,\n    bool invalid\n  ) internal {\n    m_owner = owner;\n    m_params = DisputerParams.Params(\n      market,\n      feeWindowId,\n      payoutNumerators,\n      invalid\n    );\n    // we remember REP address with which we were created to persist\n    // through forks and not break\n    m_rep = getREPImpl();\n    assert(m_rep.approve(m_owner, 2 ** 256 - 1));\n\n    if (address(market) != 0) {\n      // this is a hack. Some tests create disputer with 0 as market address\n      // however mock ERC20 won't like approving 0 address\n      // so we skip approval in those cases\n      // TODO: fix those tests and remove conditional here\n      assert(m_rep.approve(market, 2 ** 256 - 1));\n    }\n\n    // micro gas optimization, initialize with non-zero to make it cheaper\n    // to write during dispute\n    m_disputeToken = IERC20(address(this));\n  }\n}\n\n// File: contracts/Disputer.sol\n\n/**\n * Only the code that really interacts with Augur should be place here,\n * the rest goes into BaseDisputer for better testability.\n */\ncontract Disputer is BaseDisputer {\n  uint256 public m_windowStart;\n  uint256 public m_windowEnd;\n  bytes32 public m_payoutDistributionHash;\n  uint256 public m_roundNumber;\n\n  // we will keep track of all contributions made so far\n  uint256 public m_cumulativeDisputeStake;\n  uint256 public m_cumulativeDisputeStakeInOurOutcome;\n  uint256 public m_cumulativeRoundsProcessed;\n\n  constructor(\n    address owner,\n    Market market,\n    uint256 feeWindowId,\n    uint256[] payoutNumerators,\n    bool invalid\n  ) public {\n    if (address(market) == 0) {\n      // needed for easier instantiation for tests, etc.\n      // this will be a _very_ crappy uninitialized instance of Disputer\n      return;\n    }\n\n    baseInit(owner, market, feeWindowId, payoutNumerators, invalid);\n\n    Universe universe = market.getUniverse();\n    uint256 disputeRoundDuration = universe.getDisputeRoundDurationInSeconds();\n    m_windowStart = feeWindowId * disputeRoundDuration;\n    m_windowEnd = (feeWindowId + 1) * disputeRoundDuration;\n\n    m_payoutDistributionHash = market.derivePayoutDistributionHash(\n      payoutNumerators,\n      invalid\n    );\n\n    m_roundNumber = inferRoundNumber();\n\n    processCumulativeRounds();\n  }\n\n  function inferRoundNumber() public view returns(uint256) {\n    Market market = m_params.market;\n    Universe universe = market.getUniverse();\n    require(!universe.isForking());\n\n    FeeWindow feeWindow = m_params.market.getFeeWindow();\n    require(\n      address(feeWindow) != 0,\n      \"magic of choosing round number by timestamp only works during disputing\"\n    );\n    // once there is a fee window, it always corresponds to next round\n    uint256 nextParticipant = market.getNumParticipants();\n    uint256 disputeRoundDuration = universe.getDisputeRoundDurationInSeconds();\n    uint256 nextParticipantFeeWindowStart = feeWindow.getStartTime();\n    require(m_windowStart >= nextParticipantFeeWindowStart);\n    uint256 feeWindowDifferenceSeconds = m_windowStart - nextParticipantFeeWindowStart;\n    require(feeWindowDifferenceSeconds % disputeRoundDuration == 0);\n    uint256 feeWindowDifferenceRounds = feeWindowDifferenceSeconds / disputeRoundDuration;\n    return nextParticipant + feeWindowDifferenceRounds;\n  }\n\n  // anyone can call this to keep disputer up to date w.r.t. latest rounds sizes\n  function processCumulativeRounds() public {\n    Market market = m_params.market;\n    require(!market.isFinalized());\n    uint256 numParticipants = market.getNumParticipants();\n\n    while (m_cumulativeRoundsProcessed < numParticipants && m_cumulativeRoundsProcessed < m_roundNumber) {\n      ReportingParticipant participant = market.getReportingParticipant(\n        m_cumulativeRoundsProcessed\n      );\n      uint256 stake = participant.getStake();\n      m_cumulativeDisputeStake += stake;\n      if (participant.getPayoutDistributionHash() == m_payoutDistributionHash) {\n        m_cumulativeDisputeStakeInOurOutcome += stake;\n      }\n      ++m_cumulativeRoundsProcessed;\n    }\n  }\n\n  function shouldProcessCumulativeRounds() public view returns(bool) {\n    Market market = m_params.market;\n    require(!market.isFinalized());\n    uint256 numParticipants = market.getNumParticipants();\n    return m_cumulativeRoundsProcessed < m_roundNumber && m_cumulativeRoundsProcessed < numParticipants;\n  }\n\n  function preDisputeCheck() internal {\n    // most frequent reasons for failure, to fail early and save gas\n    // solhint-disable-next-line not-rely-on-time\n    require(block.timestamp > m_windowStart && block.timestamp < m_windowEnd);\n  }\n\n  /**\n   * This function should use as little gas as possible, as it will be called\n   * during rush time. Unnecessary operations are postponed for later.\n   *\n   * Can only be called once.\n   */\n  function disputeImpl() internal returns(IERC20) {\n    if (m_cumulativeRoundsProcessed < m_roundNumber) {\n      // hopefully we won't need it, we should prepare contract a few days\n      // before time T\n      processCumulativeRounds();\n    }\n\n    Market market = m_params.market;\n\n    // don't waste gas on safe math\n    uint256 roundSizeMinusOne = 2 * m_cumulativeDisputeStake - 3 * m_cumulativeDisputeStakeInOurOutcome - 1;\n\n    ReportingParticipant crowdsourcerBefore = market.getCrowdsourcer(\n      m_payoutDistributionHash\n    );\n    uint256 alreadyContributed = address(\n      crowdsourcerBefore\n    ) == 0 ? 0 : crowdsourcerBefore.getStake();\n\n    require(alreadyContributed < roundSizeMinusOne, \"We are too late\");\n\n    uint256 optimalContributionSize = roundSizeMinusOne - alreadyContributed;\n    uint256 ourBalance = getREP().balanceOf(this);\n\n    require(\n      market.contribute(\n        m_params.payoutNumerators,\n        m_params.invalid,\n        ourBalance > optimalContributionSize ? optimalContributionSize : ourBalance\n      )\n    );\n\n    if (market.getNumParticipants() == m_roundNumber) {\n      // we are still within current round\n      return market.getCrowdsourcer(m_payoutDistributionHash);\n    } else {\n      // We somehow overfilled the round. This sucks, but let's try to recover.\n      ReportingParticipant participant = market.getWinningReportingParticipant(\n\n      );\n      require(\n        participant.getPayoutDistributionHash() == m_payoutDistributionHash,\n        \"Wrong winning participant?\"\n      );\n      return IERC20(address(participant));\n    }\n  }\n\n  function getREPImpl() internal view returns(IERC20) {\n    return m_params.market.getReputationToken();\n  }\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}