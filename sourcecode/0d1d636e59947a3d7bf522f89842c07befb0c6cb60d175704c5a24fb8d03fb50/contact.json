{
  "address": "0x311d745582a97be5d7abbce48855ecec72737c5d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Tokensale",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-01\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/* The authentication manager details user accounts that have access to certain priviledges and keeps a permanent ledger of who has and has had these rights. */\ncontract AuthenticationManager {\n   \n    /* Map addresses to admins */\n    mapping (address => bool) adminAddresses;\n\n    /* Map addresses to account readers */\n    mapping (address => bool) accountReaderAddresses;\n\n    /* Map addresses to account minters */\n    mapping (address => bool) accountMinterAddresses;\n\n    /* Details of all admins that have ever existed */\n    address[] adminAudit;\n\n    /* Details of all account readers that have ever existed */\n    address[] accountReaderAudit;\n\n    /* Details of all account minters that have ever existed */\n    address[] accountMinterAudit;\n\n    /* Fired whenever an admin is added to the contract. */\n    event AdminAdded(address addedBy, address admin);\n\n    /* Fired whenever an admin is removed from the contract. */\n    event AdminRemoved(address removedBy, address admin);\n\n    /* Fired whenever an account-reader contract is added. */\n    event AccountReaderAdded(address addedBy, address account);\n\n    /* Fired whenever an account-reader contract is removed. */\n    event AccountReaderRemoved(address removedBy, address account);\n\n    /* Fired whenever an account-minter contract is added. */\n    event AccountMinterAdded(address addedBy, address account);\n\n    /* Fired whenever an account-minter contract is removed. */\n    event AccountMinterRemoved(address removedBy, address account);\n\n    /* When this contract is first setup we use the creator as the first admin */    \n    function AuthenticationManager() {\n        /* Set the first admin to be the person creating the contract */\n        adminAddresses[msg.sender] = true;\n        AdminAdded(0, msg.sender);\n        adminAudit.length++;\n        adminAudit[adminAudit.length - 1] = msg.sender;\n    }\n\n    /* Gets whether or not the specified address is currently an admin */\n    function isCurrentAdmin(address _address) constant returns (bool) {\n        return adminAddresses[_address];\n    }\n\n    /* Gets whether or not the specified address has ever been an admin */\n    function isCurrentOrPastAdmin(address _address) constant returns (bool) {\n        for (uint256 i = 0; i < adminAudit.length; i++)\n            if (adminAudit[i] == _address)\n                return true;\n        return false;\n    }\n\n    /* Gets whether or not the specified address is currently an account reader */\n    function isCurrentAccountReader(address _address) constant returns (bool) {\n        return accountReaderAddresses[_address];\n    }\n\n    /* Gets whether or not the specified address has ever been an admin */\n    function isCurrentOrPastAccountReader(address _address) constant returns (bool) {\n        for (uint256 i = 0; i < accountReaderAudit.length; i++)\n            if (accountReaderAudit[i] == _address)\n                return true;\n        return false;\n    }\n\n    /* Gets whether or not the specified address is currently an account minter */\n    function isCurrentAccountMinter(address _address) constant returns (bool) {\n        return accountMinterAddresses[_address];\n    }\n\n    /* Gets whether or not the specified address has ever been an admin */\n    function isCurrentOrPastAccountMinter(address _address) constant returns (bool) {\n        for (uint256 i = 0; i < accountMinterAudit.length; i++)\n            if (accountMinterAudit[i] == _address)\n                return true;\n        return false;\n    }\n\n    /* Adds a user to our list of admins */\n    function addAdmin(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already admin\n        if (adminAddresses[_address])\n            throw;\n        \n        // Add the user\n        adminAddresses[_address] = true;\n        AdminAdded(msg.sender, _address);\n        adminAudit.length++;\n        adminAudit[adminAudit.length - 1] = _address;\n\n    }\n\n    /* Removes a user from our list of admins but keeps them in the history audit */\n    function removeAdmin(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        /* Don't allow removal of self */\n        if (_address == msg.sender)\n            throw;\n\n        // Fail if this account is already non-admin\n        if (!adminAddresses[_address])\n            throw;\n\n        /* Remove this admin user */\n        adminAddresses[_address] = false;\n        AdminRemoved(msg.sender, _address);\n    }\n\n    /* Adds a user/contract to our list of account readers */\n    function addAccountReader(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already in the list\n        if (accountReaderAddresses[_address])\n            throw;\n        \n        // Add the account reader\n        accountReaderAddresses[_address] = true;\n        AccountReaderAdded(msg.sender, _address);\n        accountReaderAudit.length++;\n        accountReaderAudit[accountReaderAudit.length - 1] = _address;\n    }\n\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\n    function removeAccountReader(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already not in the list\n        if (!accountReaderAddresses[_address])\n            throw;\n\n        /* Remove this account reader */\n        accountReaderAddresses[_address] = false;\n        AccountReaderRemoved(msg.sender, _address);\n    }\n\n    /* Add a contract to our list of account minters */\n    function addAccountMinter(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already in the list\n        if (accountMinterAddresses[_address])\n            throw;\n        \n        // Add the minter\n        accountMinterAddresses[_address] = true;\n        AccountMinterAdded(msg.sender, _address);\n        accountMinterAudit.length++;\n        accountMinterAudit[accountMinterAudit.length - 1] = _address;\n    }\n\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\n    function removeAccountMinter(address _address) {\n        /* Ensure we're an admin */\n        if (!isCurrentAdmin(msg.sender))\n            throw;\n\n        // Fail if this account is already not in the list\n        if (!accountMinterAddresses[_address])\n            throw;\n\n        /* Remove this minter account */\n        accountMinterAddresses[_address] = false;\n        AccountMinterRemoved(msg.sender, _address);\n    }\n}\n\n// parse a raw bitcoin transaction byte array\nlibrary BTC {\n    // Convert a variable integer into something useful and return it and\n    // the index to after it.\n    function parseVarInt(bytes txBytes, uint pos) returns (uint, uint) {\n        // the first byte tells us how big the integer is\n        var ibit = uint8(txBytes[pos]);\n        pos += 1;  // skip ibit\n\n        if (ibit < 0xfd) {\n            return (ibit, pos);\n        } else if (ibit == 0xfd) {\n            return (getBytesLE(txBytes, pos, 16), pos + 2);\n        } else if (ibit == 0xfe) {\n            return (getBytesLE(txBytes, pos, 32), pos + 4);\n        } else if (ibit == 0xff) {\n            return (getBytesLE(txBytes, pos, 64), pos + 8);\n        }\n    }\n    // convert little endian bytes to uint\n    function getBytesLE(bytes data, uint pos, uint bits) returns (uint) {\n        if (bits == 8) {\n            return uint8(data[pos]);\n        } else if (bits == 16) {\n            return uint16(data[pos])\n                 + uint16(data[pos + 1]) * 2 ** 8;\n        } else if (bits == 32) {\n            return uint32(data[pos])\n                 + uint32(data[pos + 1]) * 2 ** 8\n                 + uint32(data[pos + 2]) * 2 ** 16\n                 + uint32(data[pos + 3]) * 2 ** 24;\n        } else if (bits == 64) {\n            return uint64(data[pos])\n                 + uint64(data[pos + 1]) * 2 ** 8\n                 + uint64(data[pos + 2]) * 2 ** 16\n                 + uint64(data[pos + 3]) * 2 ** 24\n                 + uint64(data[pos + 4]) * 2 ** 32\n                 + uint64(data[pos + 5]) * 2 ** 40\n                 + uint64(data[pos + 6]) * 2 ** 48\n                 + uint64(data[pos + 7]) * 2 ** 56;\n        }\n    }\n    // scan the full transaction bytes and return the first two output\n    // values (in satoshis) and addresses (in binary)\n    function getFirstTwoOutputs(bytes txBytes)\n             returns (uint, bytes20, uint, bytes20)\n    {\n        uint pos;\n        uint[] memory input_script_lens = new uint[](2);\n        uint[] memory output_script_lens = new uint[](2);\n        uint[] memory script_starts = new uint[](2);\n        uint[] memory output_values = new uint[](2);\n        bytes20[] memory output_addresses = new bytes20[](2);\n\n        pos = 4;  // skip version\n\n        (input_script_lens, pos) = scanInputs(txBytes, pos, 0);\n\n        (output_values, script_starts, output_script_lens, pos) = scanOutputs(txBytes, pos, 2);\n\n        for (uint i = 0; i < 2; i++) {\n            var pkhash = parseOutputScript(txBytes, script_starts[i], output_script_lens[i]);\n            output_addresses[i] = pkhash;\n        }\n\n        return (output_values[0], output_addresses[0],\n                output_values[1], output_addresses[1]);\n    }\n    // Check whether `btcAddress` is in the transaction outputs *and*\n    // whether *at least* `value` has been sent to it.\n    function checkValueSent(bytes txBytes, bytes20 btcAddress, uint value)\n             returns (bool)\n    {\n        uint pos = 4;  // skip version\n        (, pos) = scanInputs(txBytes, pos, 0);  // find end of inputs\n\n        // scan *all* the outputs and find where they are\n        var (output_values, script_starts, output_script_lens,) = scanOutputs(txBytes, pos, 0);\n\n        // look at each output and check whether it at least value to btcAddress\n        for (uint i = 0; i < output_values.length; i++) {\n            var pkhash = parseOutputScript(txBytes, script_starts[i], output_script_lens[i]);\n            if (pkhash == btcAddress && output_values[i] >= value) {\n                return true;\n            }\n        }\n    }\n    // scan the inputs and find the script lengths.\n    // return an array of script lengths and the end position\n    // of the inputs.\n    // takes a 'stop' argument which sets the maximum number of\n    // outputs to scan through. stop=0 => scan all.\n    function scanInputs(bytes txBytes, uint pos, uint stop)\n             returns (uint[], uint)\n    {\n        uint n_inputs;\n        uint halt;\n        uint script_len;\n\n        (n_inputs, pos) = parseVarInt(txBytes, pos);\n\n        if (stop == 0 || stop > n_inputs) {\n            halt = n_inputs;\n        } else {\n            halt = stop;\n        }\n\n        uint[] memory script_lens = new uint[](halt);\n\n        for (var i = 0; i < halt; i++) {\n            pos += 36;  // skip outpoint\n            (script_len, pos) = parseVarInt(txBytes, pos);\n            script_lens[i] = script_len;\n            pos += script_len + 4;  // skip sig_script, seq\n        }\n\n        return (script_lens, pos);\n    }\n    // scan the outputs and find the values and script lengths.\n    // return array of values, array of script lengths and the\n    // end position of the outputs.\n    // takes a 'stop' argument which sets the maximum number of\n    // outputs to scan through. stop=0 => scan all.\n    function scanOutputs(bytes txBytes, uint pos, uint stop)\n             returns (uint[], uint[], uint[], uint)\n    {\n        uint n_outputs;\n        uint halt;\n        uint script_len;\n\n        (n_outputs, pos) = parseVarInt(txBytes, pos);\n\n        if (stop == 0 || stop > n_outputs) {\n            halt = n_outputs;\n        } else {\n            halt = stop;\n        }\n\n        uint[] memory script_starts = new uint[](halt);\n        uint[] memory script_lens = new uint[](halt);\n        uint[] memory output_values = new uint[](halt);\n\n        for (var i = 0; i < halt; i++) {\n            output_values[i] = getBytesLE(txBytes, pos, 64);\n            pos += 8;\n\n            (script_len, pos) = parseVarInt(txBytes, pos);\n            script_starts[i] = pos;\n            script_lens[i] = script_len;\n            pos += script_len;\n        }\n\n        return (output_values, script_starts, script_lens, pos);\n    }\n    // Slice 20 contiguous bytes from bytes `data`, starting at `start`\n    function sliceBytes20(bytes data, uint start) returns (bytes20) {\n        uint160 slice = 0;\n        for (uint160 i = 0; i < 20; i++) {\n            slice += uint160(data[i + start]) << (8 * (19 - i));\n        }\n        return bytes20(slice);\n    }\n    // returns true if the bytes located in txBytes by pos and\n    // script_len represent a P2PKH script\n    function isP2PKH(bytes txBytes, uint pos, uint script_len) returns (bool) {\n        return (script_len == 25)           // 20 byte pubkeyhash + 5 bytes of script\n            && (txBytes[pos] == 0x76)       // OP_DUP\n            && (txBytes[pos + 1] == 0xa9)   // OP_HASH160\n            && (txBytes[pos + 2] == 0x14)   // bytes to push\n            && (txBytes[pos + 23] == 0x88)  // OP_EQUALVERIFY\n            && (txBytes[pos + 24] == 0xac); // OP_CHECKSIG\n    }\n    // returns true if the bytes located in txBytes by pos and\n    // script_len represent a P2SH script\n    function isP2SH(bytes txBytes, uint pos, uint script_len) returns (bool) {\n        return (script_len == 23)           // 20 byte scripthash + 3 bytes of script\n            && (txBytes[pos + 0] == 0xa9)   // OP_HASH160\n            && (txBytes[pos + 1] == 0x14)   // bytes to push\n            && (txBytes[pos + 22] == 0x87); // OP_EQUAL\n    }\n    // Get the pubkeyhash / scripthash from an output script. Assumes\n    // pay-to-pubkey-hash (P2PKH) or pay-to-script-hash (P2SH) outputs.\n    // Returns the pubkeyhash/ scripthash, or zero if unknown output.\n    function parseOutputScript(bytes txBytes, uint pos, uint script_len)\n             returns (bytes20)\n    {\n        if (isP2PKH(txBytes, pos, script_len)) {\n            return sliceBytes20(txBytes, pos + 3);\n        } else if (isP2SH(txBytes, pos, script_len)) {\n            return sliceBytes20(txBytes, pos + 2);\n        } else {\n            return;\n        }\n    }\n}\n\ncontract LockinManager {\n    using SafeMath for uint256;\n\n    /*Defines the structure for a lock*/\n    struct Lock {\n        uint256 amount;\n        uint256 unlockDate;\n        uint256 lockedFor;\n    }\n    \n    /*Object of Lock*/    \n    Lock lock;\n\n    /*Value of default lock days*/\n    uint256 defaultAllowedLock = 7;\n\n    /* mapping of list of locked address with array of locks for a particular address */\n    mapping (address => Lock[]) public lockedAddresses;\n\n    /* mapping of valid contracts with their lockin timestamp */\n    mapping (address => uint256) public allowedContracts;\n\n    /* list of locked days mapped with their locked timestamp*/\n    mapping (uint => uint256) public allowedLocks;\n\n    /* Defines our interface to the token contract */\n    Token token;\n\n    /* Defines the admin contract we interface with for credentails. */\n    AuthenticationManager authenticationManager;\n\n     /* Fired whenever lock day is added by the admin. */\n    event LockedDayAdded(address _admin, uint256 _daysLocked, uint256 timestamp);\n\n     /* Fired whenever lock day is removed by the admin. */\n    event LockedDayRemoved(address _admin, uint256 _daysLocked, uint256 timestamp);\n\n     /* Fired whenever valid contract is added by the admin. */\n    event ValidContractAdded(address _admin, address _validAddress, uint256 timestamp);\n\n     /* Fired whenever valid contract is removed by the admin. */\n    event ValidContractRemoved(address _admin, address _validAddress, uint256 timestamp);\n\n    /* Create a new instance of this fund with links to other contracts that are required. */\n    function LockinManager(address _token, address _authenticationManager) {\n      \n        /* Setup access to our other contracts and validate their versions */\n        token  = Token(_token);\n        authenticationManager = AuthenticationManager(_authenticationManager);\n    }\n   \n    /* This modifier allows a method to only be called by current admins */\n    modifier adminOnly {\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\n        _;\n    }\n\n    /* This modifier allows a method to only be called by token contract */\n    modifier validContractOnly {\n        require(allowedContracts[msg.sender] != 0);\n\n        _;\n    }\n\n    /* Gets the length of locked values for an account */\n    function getLocks(address _owner) validContractOnly constant returns (uint256) {\n        return lockedAddresses[_owner].length;\n    }\n\n    function getLock(address _owner, uint256 count) validContractOnly returns(uint256 amount, uint256 unlockDate, uint256 lockedFor) {\n        amount     = lockedAddresses[_owner][count].amount;\n        unlockDate = lockedAddresses[_owner][count].unlockDate;\n        lockedFor   = lockedAddresses[_owner][count].lockedFor;\n    }\n    \n    /* Gets amount for which an address is locked with locked index */\n    function getLocksAmount(address _owner, uint256 count) validContractOnly returns(uint256 amount) {        \n        amount = lockedAddresses[_owner][count].amount;\n    }\n\n    /* Gets unlocked timestamp for which an address is locked with locked index */\n    function getLocksUnlockDate(address _owner, uint256 count) validContractOnly returns(uint256 unlockDate) {\n        unlockDate = lockedAddresses[_owner][count].unlockDate;\n    }\n\n    /* Gets days for which an address is locked with locked index */\n    function getLocksLockedFor(address _owner, uint256 count) validContractOnly returns(uint256 lockedFor) {\n        lockedFor = lockedAddresses[_owner][count].lockedFor;\n    }\n\n    /* Locks tokens for an address for the default number of days */\n    function defaultLockin(address _address, uint256 _value) validContractOnly\n    {\n        lockIt(_address, _value, defaultAllowedLock);\n    }\n\n    /* locks tokens for sender for n days*/\n    function lockForDays(uint256 _value, uint256 _days) \n    {\n        require( ! ifInAllowedLocks(_days));        \n\n        require(token.availableBalance(msg.sender) >= _value);\n        \n        lockIt(msg.sender, _value, _days);     \n    }\n\n    function lockIt(address _address, uint256 _value, uint256 _days) internal {\n\n        // expiry will be calculated as 24 * 60 * 60\n        uint256 _expiry = now + _days.mul(86400);\n        lockedAddresses[_address].push(Lock(_value, _expiry, _days));        \n    }\n\n    /* check if input day is present in locked days */\n    function ifInAllowedLocks(uint256 _days) constant returns(bool) {\n        return allowedLocks[_days] == 0;\n    }\n\n    /* Adds a day to our list of allowedLocks */\n    function addAllowedLock(uint _day) adminOnly {\n\n        // Fail if day is already present in locked days\n        if (allowedLocks[_day] != 0)\n            throw;\n        \n        // Add day in locked days \n        allowedLocks[_day] = now;\n        LockedDayAdded(msg.sender, _day, now);\n    }\n\n    /* Remove allowed Lock */\n    function removeAllowedLock(uint _day) adminOnly {\n\n        // Fail if day doesnot exist in allowedLocks\n        if ( allowedLocks[_day] ==  0)\n            throw;\n\n        /* Remove locked day  */\n        allowedLocks[_day] = 0;\n        LockedDayRemoved(msg.sender, _day, now);\n    }\n\n    /* Adds a address to our list of allowedContracts */\n    function addValidContract(address _address) adminOnly {\n\n        // Fail if address is already present in valid contracts\n        if (allowedContracts[_address] != 0)\n            throw;\n        \n        // add an address in allowedContracts\n        allowedContracts[_address] = now;\n\n        ValidContractAdded(msg.sender, _address, now);\n    }\n\n    /* Removes allowed contract from the list of allowedContracts */\n    function removeValidContract(address _address) adminOnly {\n\n        // Fail if address doesnot exist in allowedContracts\n        if ( allowedContracts[_address] ==  0)\n            throw;\n\n        /* Remove allowed contract from allowedContracts  */\n        allowedContracts[_address] = 0;\n\n        ValidContractRemoved(msg.sender, _address, now);\n    }\n\n    /* Set default allowed lock */\n    function setDefaultAllowedLock(uint _days) adminOnly {\n        defaultAllowedLock = _days;\n    }\n}\n\n/* The Token itself is a simple extension of the ERC20 that allows for granting other Token contracts special rights to act on behalf of all transfers. */\ncontract Token {\n    using SafeMath for uint256;\n\n    /* Map all our our balances for issued tokens */\n    mapping (address => uint256) public balances;\n\n    /* Map between users and their approval addresses and amounts */\n    mapping(address => mapping (address => uint256)) allowed;\n\n    /* List of all token holders */\n    address[] allTokenHolders;\n\n    /* The name of the contract */\n    string public name;\n\n    /* The symbol for the contract */\n    string public symbol;\n\n    /* How many DPs are in use in this contract */\n    uint8 public decimals;\n\n    /* Defines the current supply of the token in its own units */\n    uint256 totalSupplyAmount = 0;\n    \n    /* Defines the address of the Refund Manager contract which is the only contract to destroy tokens. */\n    address public refundManagerContractAddress;\n\n    /* Defines the admin contract we interface with for credentails. */\n    AuthenticationManager authenticationManager;\n\n    /* Instance of lockin contract */\n    LockinManager lockinManager;\n\n    /** @dev Returns the balance that a given address has available for transfer.\n      * @param _owner The address of the token owner.\n      */\n    function availableBalance(address _owner) constant returns(uint256) {\n        \n        uint256 length =  lockinManager.getLocks(_owner);\n    \n        uint256 lockedValue = 0;\n        \n        for(uint256 i = 0; i < length; i++) {\n\n            if(lockinManager.getLocksUnlockDate(_owner, i) > now) {\n                uint256 _value = lockinManager.getLocksAmount(_owner, i);    \n                lockedValue = lockedValue.add(_value);                \n            }\n        }\n        \n        return balances[_owner].sub(lockedValue);\n    }\n\n    /* Fired when the fund is eventually closed. */\n    event FundClosed();\n    \n    /* Our transfer event to fire whenever we shift SMRT around */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    /* Our approval event when one user approves another to control */\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /* Create a new instance of this fund with links to other contracts that are required. */\n    function Token(address _authenticationManagerAddress) {\n        // Setup defaults\n        name = \"PIE (Authorito Capital)\";\n        symbol = \"PIE\";\n        decimals = 18;\n\n        /* Setup access to our other contracts */\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);        \n    }\n\n    modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    }\n\n    /* This modifier allows a method to only be called by account readers */\n    modifier accountReaderOnly {\n        if (!authenticationManager.isCurrentAccountReader(msg.sender)) throw;\n        _;\n    }\n\n    /* This modifier allows a method to only be called by current admins */\n    modifier adminOnly {\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\n        _;\n    }   \n    \n    function setLockinManagerAddress(address _lockinManager) adminOnly {\n        lockinManager = LockinManager(_lockinManager);\n    }\n\n    function setRefundManagerContract(address _refundManagerContractAddress) adminOnly {\n        refundManagerContractAddress = _refundManagerContractAddress;\n    }\n\n    /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3) returns (bool) {\n        \n        if (availableBalance(_from) >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to]) {\n            bool isNew = balances[_to] == 0;\n            balances[_from] = balances[_from].sub(_amount);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n            balances[_to] = balances[_to].add(_amount);\n            if (isNew)\n                tokenOwnerAdd(_to);\n            if (balances[_from] == 0)\n                tokenOwnerRemove(_from);\n            Transfer(_from, _to, _amount);\n            return true;\n        }\n        return false;\n    }\n\n    /* Returns the total number of holders of this currency. */\n    function tokenHolderCount() accountReaderOnly constant returns (uint256) {\n        return allTokenHolders.length;\n    }\n\n    /* Gets the token holder at the specified index. */\n    function tokenHolder(uint256 _index) accountReaderOnly constant returns (address) {\n        return allTokenHolders[_index];\n    }\n \n    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\n    function approve(address _spender, uint256 _amount) onlyPayloadSize(2) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /* Gets the current allowance that has been approved for the specified spender of the owner address */\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* Gets the total supply available of this token */\n    function totalSupply() constant returns (uint256) {\n        return totalSupplyAmount;\n    }\n\n    /* Gets the balance of a specified account */\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /* Transfer the balance from owner's account to another account */\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2) returns (bool) {\n                \n        /* Check if sender has balance and for overflows */\n        if (availableBalance(msg.sender) < _amount || balances[_to].add(_amount) < balances[_to])\n            return false;\n\n        /* Do a check to see if they are new, if so we'll want to add it to our array */\n        bool isRecipientNew = balances[_to] == 0;\n\n        /* Add and subtract new balances */\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        \n        /* Consolidate arrays if they are new or if sender now has empty balance */\n        if (isRecipientNew)\n            tokenOwnerAdd(_to);\n        if (balances[msg.sender] <= 0)\n            tokenOwnerRemove(msg.sender);\n\n        /* Fire notification event */\n        Transfer(msg.sender, _to, _amount);\n        return true; \n    }\n\n    /* If the specified address is not in our owner list, add them - this can be called by descendents to ensure the database is kept up to date. */\n    function tokenOwnerAdd(address _addr) internal {\n        /* First check if they already exist */\n        uint256 tokenHolderCount = allTokenHolders.length;\n        for (uint256 i = 0; i < tokenHolderCount; i++)\n            if (allTokenHolders[i] == _addr)\n                /* Already found so we can abort now */\n                return;\n        \n        /* They don't seem to exist, so let's add them */\n        allTokenHolders.length++;\n        allTokenHolders[allTokenHolders.length - 1] = _addr;\n    }\n\n    /* If the specified address is in our owner list, remove them - this can be called by descendents to ensure the database is kept up to date. */\n    function tokenOwnerRemove(address _addr) internal {\n        /* Find out where in our array they are */\n        uint256 tokenHolderCount = allTokenHolders.length;\n        uint256 foundIndex = 0;\n        bool found = false;\n        uint256 i;\n        for (i = 0; i < tokenHolderCount; i++)\n            if (allTokenHolders[i] == _addr) {\n                foundIndex = i;\n                found = true;\n                break;\n            }\n        \n        /* If we didn't find them just return */\n        if (!found)\n            return;\n        \n        /* We now need to shuffle down the array */\n        for (i = foundIndex; i < tokenHolderCount - 1; i++)\n            allTokenHolders[i] = allTokenHolders[i + 1];\n        allTokenHolders.length--;\n    }\n\n    /* Mint new tokens - this can only be done by special callers (i.e. the ICO management) during the ICO phase. */\n    function mintTokens(address _address, uint256 _amount) onlyPayloadSize(2) {\n\n        /* if it is comming from account minter */\n        if ( ! authenticationManager.isCurrentAccountMinter(msg.sender))\n            throw;\n\n        /* Mint the tokens for the new address*/\n        bool isNew = balances[_address] == 0;\n        totalSupplyAmount = totalSupplyAmount.add(_amount);\n        balances[_address] = balances[_address].add(_amount);\n\n        lockinManager.defaultLockin(_address, _amount);        \n\n        if (isNew)\n            tokenOwnerAdd(_address);\n        Transfer(0, _address, _amount);\n    }\n\n    /** This will destroy the tokens of the investor and called by sale contract only at the time of refund. */\n    function destroyTokens(address _investor, uint256 tokenCount) returns (bool) {\n        \n        /* Can only be called by refund manager, also refund manager address must not be empty */\n        if ( refundManagerContractAddress  == 0x0 || msg.sender != refundManagerContractAddress)\n            throw;\n\n        uint256 balance = availableBalance(_investor);\n\n        if (balance < tokenCount) {\n            return false;\n        }\n\n        balances[_investor] -= tokenCount;\n        totalSupplyAmount -= tokenCount;\n\n        if(balances[_investor] <= 0)\n            tokenOwnerRemove(_investor);\n\n        return true;\n    }\n}\n\ncontract Tokensale {\n    using SafeMath for uint256;\n    \n    /* Defines whether or not the  Token Contract address has yet been set.  */\n    bool public tokenContractDefined = false;\n    \n    /* Defines whether or not we are in the Sale phase */\n    bool public salePhase = true;\n\n    /* Defines the sale price of ethereum during Sale */\n    uint256 public ethereumSaleRate = 700; // The number of tokens to be minted for every ETH\n\n    /* Defines the sale price of bitcoin during Sale */\n    uint256 public bitcoinSaleRate = 14000; // The number of tokens to be minted for every BTC\n\n    /* Defines our interface to the  Token contract. */\n    Token token;\n\n    /* Defines the admin contract we interface with for credentails. */\n    AuthenticationManager authenticationManager;\n\n    /* Claimed Transactions from btc relay. */\n    mapping(uint256 => bool) public transactionsClaimed;\n\n    /* Defines the minimum ethereum to invest during Sale */\n    uint256 public minimunEthereumToInvest = 0;\n\n    /* Defines the minimum btc to invest during Sale */\n    uint256 public minimunBTCToInvest = 0;\n\n    /* Defines our event fired when the Sale is closed */\n    event SaleClosed();\n\n    /* Defines our event fired when the Sale is reopened */\n    event SaleStarted();\n\n    /* Ethereum Rate updated by the admin. */\n    event EthereumRateUpdated(uint256 rate, uint256 timestamp);\n\n    /* Bitcoin Rate updated by the admin. */\n    event BitcoinRateUpdated(uint256 rate, uint256 timestamp);\n\n    /* Minimun Ethereum Investment updated by the admin. */\n    event MinimumEthereumInvestmentUpdated(uint256 _value, uint256 timestamp);\n\n    /* Minimun Bitcoin Investment updated by the admin. */\n    event MinimumBitcoinInvestmentUpdated(uint256 _value, uint256 timestamp);\n\n    /* Ensures that once the Sale is over this contract cannot be used until the point it is destructed. */\n    modifier onlyDuringSale {\n\n        if (!tokenContractDefined || (!salePhase)) throw;\n        _;\n    }\n\n    /* This modifier allows a method to only be called by current admins */\n    modifier adminOnly {\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\n        _;\n    }\n\n    /* Create the  token sale and define the address of the main authentication Manager address. */\n    function Tokensale(address _authenticationManagerAddress) {        \n                \n        /* Setup access to our other contracts */\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\n    }\n\n    /* Set the Token contract address as a one-time operation.  This happens after all the contracts are created and no\n       other functionality can be used until this is set. */\n    function setTokenContractAddress(address _tokenContractAddress) adminOnly {\n        /* This can only happen once in the lifetime of this contract */\n        if (tokenContractDefined)\n            throw;\n\n        /* Setup access to our other contracts */\n        token = Token(_tokenContractAddress);\n\n        tokenContractDefined = true;\n    }\n\n    /* Run this function when transaction has been verified by the btc relay */\n    function processBTCTransaction(bytes txn, uint256 _txHash, address ethereumAddress, bytes20 bitcoinAddress) adminOnly returns (uint256)\n    {\n        /* Transaction is already claimed */\n        if(transactionsClaimed[_txHash] != false) \n            throw;\n\n        var (outputValue1, outputAddress1, outputValue2, outputAddress2) = BTC.getFirstTwoOutputs(txn);\n\n        if(BTC.checkValueSent(txn, bitcoinAddress, 1))\n        {\n            require(outputValue1 >= minimunBTCToInvest);\n\n             //multiply by exchange rate\n            uint256 tokensPurchased = outputValue1 * bitcoinSaleRate * (10**10);  \n\n            token.mintTokens(ethereumAddress, tokensPurchased);\n\n            transactionsClaimed[_txHash] = true;\n        }\n        else\n        {\n            // value was not sent to this btc address\n            throw;\n        }\n    }\n\n    function btcTransactionClaimed(uint256 _txHash) returns(bool) {\n        return transactionsClaimed[_txHash];\n    }   \n    \n    // fallback function can be used to buy tokens\n    function () payable {\n    \n        buyTokens(msg.sender);\n    \n    }\n\n    /* Handle receiving ether in Sale phase - we work out how much the user has bought, allocate a suitable balance and send their change */\n    function buyTokens(address beneficiary) onlyDuringSale payable {\n\n        require(beneficiary != 0x0);\n        require(validPurchase());\n        \n        uint256 weiAmount = msg.value;\n\n        uint256 tokensPurchased = weiAmount.mul(ethereumSaleRate);\n        \n        /* Increase their new balance if they actually purchased any */\n        if (tokensPurchased > 0)\n        {\n            token.mintTokens(beneficiary, tokensPurchased);\n        }\n    }\n\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal constant returns (bool) {\n\n        bool nonZeroPurchase = ( msg.value != 0 && msg.value >= minimunEthereumToInvest);\n        return nonZeroPurchase;\n    }\n\n    /* Rate on which */\n    function setEthereumRate(uint256 _rate) adminOnly {\n\n        ethereumSaleRate = _rate;\n\n        /* Audit this */\n        EthereumRateUpdated(ethereumSaleRate, now);\n    }\n\n      /* Rate on which */\n    function setBitcoinRate(uint256 _rate) adminOnly {\n\n        bitcoinSaleRate = _rate;\n\n        /* Audit this */\n        BitcoinRateUpdated(bitcoinSaleRate, now);\n    }    \n\n        /* update min Ethereum to invest */\n    function setMinimumEthereumToInvest(uint256 _value) adminOnly {\n\n        minimunEthereumToInvest = _value;\n\n        /* Audit this */\n        MinimumEthereumInvestmentUpdated(_value, now);\n    }    \n\n          /* update minimum Bitcoin to invest */\n    function setMinimumBitcoinToInvest(uint256 _value) adminOnly {\n\n        minimunBTCToInvest = _value;\n\n        /* Audit this */\n        MinimumBitcoinInvestmentUpdated(_value, now);\n    }\n\n      /* Close the Sale phase and transition to execution phase */\n    function close() adminOnly onlyDuringSale {\n\n        // Close the Sale\n        salePhase = false;\n        SaleClosed();\n\n        // Withdraw funds to the caller\n        if (!msg.sender.send(this.balance))\n            throw;\n    }\n\n    /* Open the sale phase*/\n    function openSale() adminOnly {        \n        salePhase = true;\n        SaleStarted();\n    }\n}",
  "bytecode": "606060405260008060006101000a81548160ff0219169083151502179055506001600060016101000a81548160ff0219169083151502179055506102bc6001556136b060025560006006556000600755341561005a57600080fd5b6040516020806115348339810160405280805190602001909190505080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061146d806100c76000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063038e666f146100fc5780630502631714610125578063166280141461014e578063167ff46f1461017157806320940b13146101865780633050f769146101c1578063360821e8146101fc57806343d726d61461021f578063666fc4d414610234578063a970ef6e1461025d578063b107baa11461028a578063b1efbd6f146102b3578063b23d4854146102d6578063ce649b391461030f578063e4f2487a14610332578063ec8ac4d81461035f578063ee3a02291461038d575b6100fa3361043e565b005b341561010757600080fd5b61010f6105ad565b6040518082815260200191505060405180910390f35b341561013057600080fd5b6101386105b3565b6040518082815260200191505060405180910390f35b341561015957600080fd5b61016f60048080359060200190919050506105b9565b005b341561017c57600080fd5b6101846106ef565b005b341561019157600080fd5b6101a76004808035906020019091905050610823565b604051808215151515815260200191505060405180910390f35b34156101cc57600080fd5b6101e2600480803590602001909190505061084d565b604051808215151515815260200191505060405180910390f35b341561020757600080fd5b61021d600480803590602001909190505061086d565b005b341561022a57600080fd5b6102326109a1565b005b341561023f57600080fd5b610247610b5d565b6040518082815260200191505060405180910390f35b341561026857600080fd5b610270610b63565b604051808215151515815260200191505060405180910390f35b341561029557600080fd5b61029d610b75565b6040518082815260200191505060405180910390f35b34156102be57600080fd5b6102d46004808035906020019091905050610b7b565b005b34156102e157600080fd5b61030d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610caf565b005b341561031a57600080fd5b6103306004808035906020019091905050610e11565b005b341561033d57600080fd5b610345610f47565b604051808215151515815260200191505060405180910390f35b61038b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061043e565b005b341561039857600080fd5b610428600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080356bffffffffffffffffffffffff1916906020019091905050610f5a565b6040518082815260200191505060405180910390f35b6000806000809054906101000a900460ff1615806104695750600060019054906101000a900460ff16155b1561047357600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561049957600080fd5b6104a16113ef565b15156104ac57600080fd5b3491506104c46001548361140e90919063ffffffff16565b905060008111156105a857600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f0dda65c84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561059357600080fd5b6102c65a03f115156105a457600080fd5b5050505b505050565b60015481565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561067e57600080fd5b6102c65a03f1151561068f57600080fd5b5050506040518051905015156106a457600080fd5b806002819055507f5f2bf49af30808bbff24b0af5819f56ba193d8fc47b367615775ee2dd5f97dec60025442604051808381526020018281526020019250505060405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156107b457600080fd5b6102c65a03f115156107c557600080fd5b5050506040518051905015156107da57600080fd5b6001600060016101000a81548160ff0219169083151502179055507f912ee23dde46ec889d6748212cce445d667f7041597691dc89e8549ad8bc0acb60405160405180910390a1565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561093257600080fd5b6102c65a03f1151561094357600080fd5b50505060405180519050151561095857600080fd5b806007819055507f0f581aed4ee55ef244fb65c7f6dc5bc8dba3949c6677963e9f59c228d1486b128142604051808381526020018281526020019250505060405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6657600080fd5b6102c65a03f11515610a7757600080fd5b505050604051805190501515610a8c57600080fd5b6000809054906101000a900460ff161580610ab45750600060019054906101000a900460ff16155b15610abe57600080fd5b60008060016101000a81548160ff0219169083151502179055507f4c013bd73202fde3c7cfe26ca486d0882f2c5b2fc9c761b15212f759bd2347dd60405160405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610b5b57600080fd5b565b60065481565b6000809054906101000a900460ff1681565b60075481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610c4057600080fd5b6102c65a03f11515610c5157600080fd5b505050604051805190501515610c6657600080fd5b806006819055507fc1ffc0a535dad619268801c820e9d9dcb693707a76982d938cf157d2166045298142604051808381526020018281526020019250505060405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610d7457600080fd5b6102c65a03f11515610d8557600080fd5b505050604051805190501515610d9a57600080fd5b6000809054906101000a900460ff1615610db357600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016000806101000a81548160ff02191690831515021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610ed657600080fd5b6102c65a03f11515610ee757600080fd5b505050604051805190501515610efc57600080fd5b806001819055507f911ff22b86be19d04e0e69cc90dd5eb2534d2782c97535811f664c6f82e9275360015442604051808381526020018281526020019250505060405180910390a150565b600060019054906101000a900460ff1681565b600080600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561102857600080fd5b6102c65a03f1151561103957600080fd5b50505060405180519050151561104e57600080fd5b60001515600560008b815260200190815260200160002060009054906101000a900460ff16151514151561108157600080fd5b73a9df6dd82d1193451404d78bffe8ae140fbedb6063e0303a2e8b6000604051608001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111105780820151818401526020810190506110f5565b50505050905090810190601f16801561113d5780820380516001836020036101000a031916815260200191505b509250505060806040518083038186803b151561115957600080fd5b6102c65a03f4151561116a57600080fd5b50505060405180519060200180519060200180519060200180519050945094509450945073a9df6dd82d1193451404d78bffe8ae140fbedb6063e57ea16d8b8960016000604051602001526040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001846bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561124a57808201518184015260208101905061122f565b50505050905090810190601f1680156112775780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b151561129557600080fd5b6102c65a03f415156112a657600080fd5b50505060405180519050156113dd5760075485101515156112c657600080fd5b6402540be4006002548602029050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f0dda65c89836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561139857600080fd5b6102c65a03f115156113a957600080fd5b5050506001600560008b815260200190815260200160002060006101000a81548160ff0219169083151502179055506113e2565b600080fd5b5050505050949350505050565b6000806000341415801561140557506006543410155b90508091505090565b6000808284029050600084148061142f575082848281151561142c57fe5b04145b151561143757fe5b80915050929150505600a165627a7a7230582096a5a452671d27e9b522559dcd7f98278a2a8e0e5dfa5ba39817895bb16d6a4d002900000000000000000000000064c14e2c286918803de6d965174ca6bc9048eafa",
  "constructorArguments": "00000000000000000000000064c14e2c286918803de6d965174ca6bc9048eafa",
  "libraries": [
    {
      "name": "BTC",
      "address": "0xa9df6dd82d1193451404d78bffe8ae140fbedb60"
    }
  ]
}