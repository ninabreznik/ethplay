{
  "address": "0xcb6e019e74a2d6e0dd60afc716e4c708140bff7d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AutoChainTokenCandy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-19\n*/\n\npragma solidity ^0.4.24;\n\ncontract AutoChainTokenCandyInface{\n\n    function name() public constant returns (string );\n    function  symbol() public constant returns (string );\n    function  decimals()  public constant returns (uint8 );\n    // 返回token总量，名称为totalSupply().\n    function  totalSupply()  public constant returns (uint256 );\n\n    /// 获取账户_owner拥有token的数量 \n    function  balanceOf(address _owner)  public constant returns (uint256 );\n\n    //从消息发送者账户中往_to账户转数量为_value的token\n    function  transfer(address _to, uint256 _value) public returns (bool );\n\n    //从账户_from中往账户_to转数量为_value的token，与approve方法配合使用\n    function  transferFrom(address _from, address _to, uint256 _value) public returns   \n    (bool );\n\n    //消息发送账户设置账户_spender能从发送账户中转出数量为_value的token\n    function  approve(address _spender, uint256 _value) public returns (bool );\n\n    //获取账户_spender可以从账户_owner中转出token的数量\n    function  allowance(address _owner, address _spender) public constant returns \n    (uint256 );\n\n    //发生转账时必须要触发的事件 \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    //当函数approve(address _spender, uint256 _value)成功执行时必须触发的事件\n    event Approval(address indexed _owner, address indexed _spender, uint256 \n    _value);\n}\n\ncontract AutoChainTokenCandy is AutoChainTokenCandyInface {\n\n    /* private variables of the token */\n    uint256 private _localtotalSupply;\t\t//总量\n    string private _localname;                   //名称: eg Simon Bucks\n    uint8 private _localdecimals;               //最多的小数位数，How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string private _localsymbol;               //token简称: eg SBX\n    string private _localversion = '0.01';    //版本\n\n    address private _localowner; //存储合约owner\n\n    mapping (address => uint256) private balances;\n    mapping (address => mapping (address => uint256)) private allowed;\n\n    function  AutoChainTokenCandy() public {\n        _localowner=msg.sender;\t\t//储存合约的owner\n        balances[msg.sender] = 50000000000; // 初始token数量给予消息发送者,需要增加小数点后的位数\n        _localtotalSupply = 50000000000;         // 设置初始总量,需要增加小数点后的位数\n        _localname = 'AutoChainTokenCandy';                   // token名称\n        _localdecimals = 4;           // 小数位数\n        _localsymbol = 'ATCx';             // token简称\n        \n    }\n\n    function getOwner() constant public returns (address ){\n        return _localowner;\n    }\n\n    function  name() constant public returns (string ){\n    \treturn _localname;\n    }\n    function  decimals() public constant returns (uint8 ){\n    \treturn _localdecimals;\n    }\n    function  symbol() public constant returns (string ){\n    \treturn _localsymbol;\n    }\n    function  version() public constant returns (string ){\n    \treturn _localversion;\n    }\n    function  totalSupply() public constant returns (uint256 ){\n    \treturn _localtotalSupply;\n    }\n    function  transfer(address _to, uint256 _value) public returns (bool ) {\n        //默认totalSupply 不会超过最大值 (2^256 - 1).\n        //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常\n        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n        balances[_to] += _value;//往接收账户增加token数量_value\n        emit Transfer(msg.sender, _to, _value);//触发转币交易事件\n        return true;\n    }\n    function  transferFrom(address _from, address _to, uint256 _value) public returns \n    (bool ) {\n        require(balances[_from] >= _value &&  balances[_to] + _value > balances[_to] && allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;//接收账户增加token数量_value\n        balances[_from] -= _value; //支出账户_from减去token数量_value\n        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n        emit Transfer(_from, _to, _value);//触发转币交易事件\n        return true;\n    }\n    function  balanceOf(address _owner) public constant returns (uint256 ) {\n        return balances[_owner];\n    }\n    function  approve(address _spender, uint256 _value) public returns (bool )   \n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    function  allowance(address _owner, address _spender) public constant returns (uint256 ) {\n        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n    }\n}",
  "bytecode": "60c0604052600460808190527f302e30310000000000000000000000000000000000000000000000000000000060a090815261003c919081610118565b5034801561004957600080fd5b5060058054600160a060020a031916339081179091556000908152600660209081526040808320640ba43b740090819055909255815180830190925260138083527f4175746f436861696e546f6b656e43616e647900000000000000000000000000929091019182526100be91600191610118565b506002805460ff19166004908117909155604080518082019091528181527f415443780000000000000000000000000000000000000000000000000000000060209091019081526101129160039190610118565b506101b3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015957805160ff1916838001178555610186565b82800160010185558215610186579182015b8281111561018657825182559160200191906001019061016b565b50610192929150610196565b5090565b6101b091905b80821115610192576000815560010161019c565b90565b6106b9806101c26000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806354fd4d50146101f157806370a0823114610206578063893d20e81461022757806395d89b4114610258578063a9059cbb1461026d578063dd62ed3e14610291575b600080fd5b3480156100bf57600080fd5b506100c86102b8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a036004351660243561034d565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a6103b3565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a03600435811690602435166044356103b9565b3480156101d257600080fd5b506101db6104bc565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b506100c86104c5565b34801561021257600080fd5b5061018a600160a060020a0360043516610526565b34801561023357600080fd5b5061023c610541565b60408051600160a060020a039092168252519081900360200190f35b34801561026457600080fd5b506100c8610550565b34801561027957600080fd5b50610161600160a060020a03600435166024356105b1565b34801561029d57600080fd5b5061018a600160a060020a0360043581169060243516610662565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156103435780601f1061031857610100808354040283529160200191610343565b820191906000526020600020905b81548152906001019060200180831161032657829003601f168201915b5050505050905090565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005490565b600160a060020a03831660009081526006602052604081205482118015906103fa5750600160a060020a038316600090815260066020526040902054828101115b80156104295750600160a060020a03841660009081526007602090815260408083203384529091529020548211155b151561043457600080fd5b600160a060020a03808416600081815260066020908152604080832080548801905593881680835284832080548890039055600782528483203384528252918490208054879003905583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b60025460ff1690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103435780601f1061031857610100808354040283529160200191610343565b600160a060020a031660009081526006602052604090205490565b600554600160a060020a031690565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103435780601f1061031857610100808354040283529160200191610343565b3360009081526006602052604081205482118015906105e95750600160a060020a038316600090815260066020526040902054828101115b15156105f457600080fd5b33600081815260066020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b600160a060020a039182166000908152600760209081526040808320939094168252919091522054905600a165627a7a723058208cfd989eaa222b0c6a461af254b51c220aae2f3dcee2e9cfcf2f03d5673324560029"
}