{
  "address": "0x83d3f733de9a8c6e3d5824dd34b16f8a52778668",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BIGSTAGE",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-24\n*/\n\npragma solidity ^0.4.18;\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply) {}\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n}\n\ncontract BIGSTAGE is StandardToken { // CHANGE THIS. Update the contract name.\n\n    /* Public variables of the token */\n\n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    They allow one to customise the token contract & in no way influences the core functionality.\n    Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name;                   // Token Name\n    uint8 public constant decimals = 18;  // How many decimals to show. To be standard complicant keep it 18\n    string public symbol;                 // An identifier: eg SBX, XPR etc..\n    string public version = '1.0'; \n    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n    uint256 public totalEthInWei;         // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We'll store the total ETH raised via our ICO here.  \n    address public fundsWallet;           // Where should the raised ETH go?\n    uint256 public constant INITIAL_SUPPLY = 2000000000 * (10 ** uint256(decimals));\n\n    // This is a constructor function \n    // which means the following function name has to match the contract name declared above\n    function BIGSTAGE() {\n        balances[msg.sender] = INITIAL_SUPPLY;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)\n        totalSupply = INITIAL_SUPPLY;                        // Update total supply (1000 for example) (CHANGE THIS)\n        name = \"BIGSTAGE\";                                   // Set the name for display purposes (CHANGE THIS)                                             // Amount of decimals for display purposes (CHANGE THIS)\n        symbol = \"BiiC\";                                             // Set the symbol for display purposes (CHANGE THIS)\n        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)\n        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH\n    }\n\n    function() payable{\n        totalEthInWei = totalEthInWei + msg.value;\n        uint256 amount = msg.value * unitsOneEthCanBuy;\n        require(balances[fundsWallet] >= amount);\n\n        balances[fundsWallet] = balances[fundsWallet] - amount;\n        balances[msg.sender] = balances[msg.sender] + amount;\n\n        Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n\n        //Transfer ether to fundsWallet\n        fundsWallet.transfer(msg.value);                               \n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n}",
  "bytecode": "60c0604052600360808190527f312e30000000000000000000000000000000000000000000000000000000000060a090815261003e9160059190610112565b5034801561004b57600080fd5b5033600090815260208181526040918290206b06765c793fa10079d000000090819055600255815180830190925260088083527f4249475354414745000000000000000000000000000000000000000000000000929091019182526100b291600391610112565b506040805180820190915260048082527f426969430000000000000000000000000000000000000000000000000000000060209092019182526100f59181610112565b50600a60065560088054600160a060020a031916331790556101ad565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015357805160ff1916838001178555610180565b82800160010185558215610180579182015b82811115610180578251825591602001919060010190610165565b5061018c929150610190565b5090565b6101aa91905b8082111561018c5760008155600101610196565b90565b6109bf806101bc6000396000f3006080604052600436106100c15763ffffffff60e060020a60003504166306fdde0381146101a2578063095ea7b31461022c57806318160ddd146102645780632194f3a21461028b57806323b872dd146102bc5780632ff2e9dc146102e6578063313ce567146102fb57806354fd4d501461032657806365f2bc2e1461033b57806370a0823114610350578063933ba4131461037157806395d89b4114610386578063a9059cbb1461039b578063cae9ca51146103bf578063dd62ed3e14610428575b6007805434908101909155600654600854600160a060020a03166000908152602081905260409020549102908111156100f957600080fd5b60088054600160a060020a0390811660009081526020818152604080832080548790039055338084529281902080548701905593548451868152945192949316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600854604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015801561019e573d6000803e3d6000fd5b5050005b3480156101ae57600080fd5b506101b761044f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f15781810151838201526020016101d9565b50505050905090810190601f16801561021e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023857600080fd5b50610250600160a060020a03600435166024356104dd565b604080519115158252519081900360200190f35b34801561027057600080fd5b50610279610544565b60408051918252519081900360200190f35b34801561029757600080fd5b506102a061054a565b60408051600160a060020a039092168252519081900360200190f35b3480156102c857600080fd5b50610250600160a060020a0360043581169060243516604435610559565b3480156102f257600080fd5b50610279610644565b34801561030757600080fd5b50610310610654565b6040805160ff9092168252519081900360200190f35b34801561033257600080fd5b506101b7610659565b34801561034757600080fd5b506102796106b4565b34801561035c57600080fd5b50610279600160a060020a03600435166106ba565b34801561037d57600080fd5b506102796106d5565b34801561039257600080fd5b506101b76106db565b3480156103a757600080fd5b50610250600160a060020a0360043516602435610736565b3480156103cb57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610250948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107cd9650505050505050565b34801561043457600080fd5b50610279600160a060020a0360043581169060243516610968565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104d55780601f106104aa576101008083540402835291602001916104d5565b820191906000526020600020905b8154815290600101906020018083116104b857829003601f168201915b505050505081565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60025481565b600854600160a060020a031681565b600160a060020a03831660009081526020819052604081205482118015906105a45750600160a060020a03841660009081526001602090815260408083203384529091529020548211155b80156105b05750600082115b1561063957600160a060020a0380841660008181526020818152604080832080548801905593881680835284832080548890039055600182528483203384528252918490208054879003905583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600161063d565b5060005b9392505050565b6b06765c793fa10079d000000081565b601281565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104d55780601f106104aa576101008083540402835291602001916104d5565b60065481565b600160a060020a031660009081526020819052604090205490565b60075481565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104d55780601f106104aa576101008083540402835291602001916104d5565b3360009081526020819052604081205482118015906107555750600082115b156107c5573360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600161053e565b50600061053e565b336000818152600160209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b8381101561090d5781810151838201526020016108f5565b50505050905090810190601f16801561093a5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af192505050151561095e57600080fd5b5060019392505050565b600160a060020a039182166000908152600160209081526040808320939094168252919091522054905600a165627a7a72305820213edb5c74be0ad8da65393655e570bfe278bab9488104bd982d6f2a6a0626c50029"
}