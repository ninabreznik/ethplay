{
  "address": "0x9919d97e50397b7483e9ea61e027e4c4419c8171",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Dicether: Old",
  "contractName": "GameChannel",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-27\n*/\n\npragma solidity ^0.4.24;\n\ninterface ConflictResolutionInterface {\n    function minHouseStake(uint activeGames) external pure returns(uint);\n\n    function maxBalance() external pure returns(int);\n\n    function conflictEndFine() external pure returns(int);\n\n    function isValidBet(uint8 _gameType, uint _betNum, uint _betValue) external pure returns(bool);\n\n    function endGameConflict(\n        uint8 _gameType,\n        uint _betNum,\n        uint _betValue,\n        int _balance,\n        uint _stake,\n        bytes32 _serverSeed,\n        bytes32 _userSeed\n    )\n        external\n        view\n        returns(int);\n\n    function serverForceGameEnd(\n        uint8 gameType,\n        uint _betNum,\n        uint _betValue,\n        int _balance,\n        uint _stake,\n        uint _endInitiatedTime\n    )\n        external\n        view\n        returns(int);\n\n    function userForceGameEnd(\n        uint8 _gameType,\n        uint _betNum,\n        uint _betValue,\n        int _balance,\n        uint _stake,\n        uint _endInitiatedTime\n    )\n        external\n        view\n        returns(int);\n}\n\nlibrary MathUtil {\n    /**\n     * @dev Returns the absolute value of _val.\n     * @param _val value\n     * @return The absolute value of _val.\n     */\n    function abs(int _val) internal pure returns(uint) {\n        if (_val < 0) {\n            return uint(-_val);\n        } else {\n            return uint(_val);\n        }\n    }\n\n    /**\n     * @dev Calculate maximum.\n     */\n    function max(uint _val1, uint _val2) internal pure returns(uint) {\n        return _val1 >= _val2 ? _val1 : _val2;\n    }\n\n    /**\n     * @dev Calculate minimum.\n     */\n    function min(uint _val1, uint _val2) internal pure returns(uint) {\n        return _val1 <= _val2 ? _val1 : _val2;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n    address public pendingOwner;\n\n    event LogOwnerShipTransferred(address indexed previousOwner, address indexed newOwner);\n    event LogOwnerShipTransferInitiated(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Modifier, which throws if called by other account than owner.\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n     * @dev Set contract creator as initial owner\n     */\n    constructor() public {\n        owner = msg.sender;\n        pendingOwner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        pendingOwner = _newOwner;\n        emit LogOwnerShipTransferInitiated(owner, _newOwner);\n    }\n\n    /**\n     * @dev PendingOwner can accept ownership.\n     */\n    function claimOwnership() public onlyPendingOwner {\n        owner = pendingOwner;\n        pendingOwner = address(0);\n        emit LogOwnerShipTransferred(owner, pendingOwner);\n    }\n}\n\ncontract Activatable is Ownable {\n    bool public activated = false;\n\n    /// @dev Event is fired if activated.\n    event LogActive();\n\n    /// @dev Modifier, which only allows function execution if activated.\n    modifier onlyActivated() {\n        require(activated);\n        _;\n    }\n\n    /// @dev Modifier, which only allows function execution if not activated.\n    modifier onlyNotActivated() {\n        require(!activated);\n        _;\n    }\n\n    /// @dev activate contract, can be only called once by the contract owner.\n    function activate() public onlyOwner onlyNotActivated {\n        activated = true;\n        emit LogActive();\n    }\n}\n\ncontract ConflictResolutionManager is Ownable {\n    /// @dev Conflict resolution contract.\n    ConflictResolutionInterface public conflictRes;\n\n    /// @dev New Conflict resolution contract.\n    address public newConflictRes = 0;\n\n    /// @dev Time update of new conflict resolution contract was initiated.\n    uint public updateTime = 0;\n\n    /// @dev Min time before new conflict res contract can be activated after initiating update.\n    uint public constant MIN_TIMEOUT = 3 days;\n\n    /// @dev Min time before new conflict res contract can be activated after initiating update.\n    uint public constant MAX_TIMEOUT = 6 days;\n\n    /// @dev Update of conflict resolution contract was initiated.\n    event LogUpdatingConflictResolution(address newConflictResolutionAddress);\n\n    /// @dev New conflict resolution contract is active.\n    event LogUpdatedConflictResolution(address newConflictResolutionAddress);\n\n    /**\n     * @dev Constructor\n     * @param _conflictResAddress conflict resolution contract address.\n     */\n    constructor(address _conflictResAddress) public {\n        conflictRes = ConflictResolutionInterface(_conflictResAddress);\n    }\n\n    /**\n     * @dev Initiate conflict resolution contract update.\n     * @param _newConflictResAddress New conflict resolution contract address.\n     */\n    function updateConflictResolution(address _newConflictResAddress) public onlyOwner {\n        newConflictRes = _newConflictResAddress;\n        updateTime = block.timestamp;\n\n        emit LogUpdatingConflictResolution(_newConflictResAddress);\n    }\n\n    /**\n     * @dev Active new conflict resolution contract.\n     */\n    function activateConflictResolution() public onlyOwner {\n        require(newConflictRes != 0);\n        require(updateTime != 0);\n        require(updateTime + MIN_TIMEOUT <= block.timestamp && block.timestamp <= updateTime + MAX_TIMEOUT);\n\n        conflictRes = ConflictResolutionInterface(newConflictRes);\n        newConflictRes = 0;\n        updateTime = 0;\n\n        emit LogUpdatedConflictResolution(newConflictRes);\n    }\n}\n\ncontract Pausable is Activatable {\n    using SafeMath for uint;\n\n    /// @dev Is contract paused. Initial it is paused.\n    bool public paused = true;\n\n    /// @dev Time pause was called\n    uint public timePaused = block.timestamp;\n\n    /// @dev Modifier, which only allows function execution if not paused.\n    modifier onlyNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n\n    /// @dev Modifier, which only allows function execution if paused.\n    modifier onlyPaused() {\n        require(paused);\n        _;\n    }\n\n    /// @dev Modifier, which only allows function execution if paused longer than timeSpan.\n    modifier onlyPausedSince(uint timeSpan) {\n        require(paused && (timePaused.add(timeSpan) <= block.timestamp));\n        _;\n    }\n\n    /// @dev Event is fired if paused.\n    event LogPause();\n\n    /// @dev Event is fired if pause is ended.\n    event LogUnpause();\n\n    /**\n     * @dev Pause contract. No new game sessions can be created.\n     */\n    function pause() public onlyOwner onlyNotPaused {\n        paused = true;\n        timePaused = block.timestamp;\n        emit LogPause();\n    }\n\n    /**\n     * @dev Unpause contract. Initial contract is paused and can only be unpaused after activating it.\n     */\n    function unpause() public onlyOwner onlyPaused onlyActivated {\n        paused = false;\n        timePaused = 0;\n        emit LogUnpause();\n    }\n}\n\ncontract Destroyable is Pausable {\n    /// @dev After pausing the contract for 20 days owner can selfdestruct it.\n    uint public constant TIMEOUT_DESTROY = 20 days;\n\n    /**\n     * @dev Destroy contract and transfer ether to owner.\n     */\n    function destroy() public onlyOwner onlyPausedSince(TIMEOUT_DESTROY) {\n        selfdestruct(owner);\n    }\n}\n\ncontract GameChannelBase is Destroyable, ConflictResolutionManager {\n    using SafeCast for int;\n    using SafeCast for uint;\n    using SafeMath for int;\n    using SafeMath for uint;\n\n\n    /// @dev Different game session states.\n    enum GameStatus {\n        ENDED, ///< @dev Game session is ended.\n        ACTIVE, ///< @dev Game session is active.\n        USER_INITIATED_END, ///< @dev User initiated non regular end.\n        SERVER_INITIATED_END ///< @dev Server initiated non regular end.\n    }\n\n    /// @dev Reason game session ended.\n    enum ReasonEnded {\n        REGULAR_ENDED, ///< @dev Game session is regularly ended.\n        SERVER_FORCED_END, ///< @dev User did not respond. Server forced end.\n        USER_FORCED_END, ///< @dev Server did not respond. User forced end.\n        CONFLICT_ENDED ///< @dev Server or user raised conflict ans pushed game state, opponent pushed same game state.\n    }\n\n    struct Game {\n        /// @dev Game session status.\n        GameStatus status;\n\n        /// @dev User's stake.\n        uint128 stake;\n\n        /// @dev Last game round info if not regularly ended.\n        /// If game session is ended normally this data is not used.\n        uint8 gameType;\n        uint32 roundId;\n        uint betNum;\n        uint betValue;\n        int balance;\n        bytes32 userSeed;\n        bytes32 serverSeed;\n        uint endInitiatedTime;\n    }\n\n    /// @dev Minimal time span between profit transfer.\n    uint public constant MIN_TRANSFER_TIMESPAN = 1 days;\n\n    /// @dev Maximal time span between profit transfer.\n    uint public constant MAX_TRANSFER_TIMSPAN = 6 * 30 days;\n\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n    );\n\n    bytes32 public constant BET_TYPEHASH = keccak256(\n        \"Bet(uint32 roundId,uint8 gameType,uint256 number,uint256 value,int256 balance,bytes32 serverHash,bytes32 userHash,uint256 gameId)\"\n    );\n\n    bytes32 public DOMAIN_SEPERATOR;\n\n    /// @dev Current active game sessions.\n    uint public activeGames = 0;\n\n    /// @dev Game session id counter. Points to next free game session slot. So gameIdCntr -1 is the\n    // number of game sessions created.\n    uint public gameIdCntr = 1;\n\n    /// @dev Only this address can accept and end games.\n    address public serverAddress;\n\n    /// @dev Address to transfer profit to.\n    address public houseAddress;\n\n    /// @dev Current house stake.\n    uint public houseStake = 0;\n\n    /// @dev House profit since last profit transfer.\n    int public houseProfit = 0;\n\n    /// @dev Min value user needs to deposit for creating game session.\n    uint128 public minStake;\n\n    /// @dev Max value user can deposit for creating game session.\n    uint128 public maxStake;\n\n    /// @dev Timeout until next profit transfer is allowed.\n    uint public profitTransferTimeSpan = 14 days;\n\n    /// @dev Last time profit transferred to house.\n    uint public lastProfitTransferTimestamp;\n\n    /// @dev Maps gameId to game struct.\n    mapping (uint => Game) public gameIdGame;\n\n    /// @dev Maps user address to current user game id.\n    mapping (address => uint) public userGameId;\n\n    /// @dev Maps user address to pending returns.\n    mapping (address => uint) public pendingReturns;\n\n    /// @dev Modifier, which only allows to execute if house stake is high enough.\n    modifier onlyValidHouseStake(uint _activeGames) {\n        uint minHouseStake = conflictRes.minHouseStake(_activeGames);\n        require(houseStake >= minHouseStake, \"inv houseStake\");\n        _;\n    }\n\n    /// @dev Modifier to check if value send fulfills user stake requirements.\n    modifier onlyValidValue() {\n        require(minStake <= msg.value && msg.value <= maxStake, \"inv stake\");\n        _;\n    }\n\n    /// @dev Modifier, which only allows server to call function.\n    modifier onlyServer() {\n        require(msg.sender == serverAddress);\n        _;\n    }\n\n    /// @dev Modifier, which only allows to set valid transfer timeouts.\n    modifier onlyValidTransferTimeSpan(uint transferTimeout) {\n        require(transferTimeout >= MIN_TRANSFER_TIMESPAN\n                && transferTimeout <= MAX_TRANSFER_TIMSPAN);\n        _;\n    }\n\n    /// @dev This event is fired when user creates game session.\n    event LogGameCreated(address indexed user, uint indexed gameId, uint128 stake, bytes32 indexed serverEndHash, bytes32 userEndHash);\n\n    /// @dev This event is fired when user requests conflict end.\n    event LogUserRequestedEnd(address indexed user, uint indexed gameId);\n\n    /// @dev This event is fired when server requests conflict end.\n    event LogServerRequestedEnd(address indexed user, uint indexed gameId);\n\n    /// @dev This event is fired when game session is ended.\n    event LogGameEnded(address indexed user, uint indexed gameId, uint32 roundId, int balance, ReasonEnded reason);\n\n    /// @dev this event is fired when owner modifies user's stake limits.\n    event LogStakeLimitsModified(uint minStake, uint maxStake);\n\n    /**\n     * @dev Contract constructor.\n     * @param _serverAddress Server address.\n     * @param _minStake Min value user needs to deposit to create game session.\n     * @param _maxStake Max value user can deposit to create game session.\n     * @param _conflictResAddress Conflict resolution contract address.\n     * @param _houseAddress House address to move profit to.\n     * @param _chainId Chain id for signature domain.\n     */\n    constructor(\n        address _serverAddress,\n        uint128 _minStake,\n        uint128 _maxStake,\n        address _conflictResAddress,\n        address _houseAddress,\n        uint _chainId\n    )\n        public\n        ConflictResolutionManager(_conflictResAddress)\n    {\n        require(_minStake > 0 && _minStake <= _maxStake);\n\n        serverAddress = _serverAddress;\n        houseAddress = _houseAddress;\n        lastProfitTransferTimestamp = block.timestamp;\n        minStake = _minStake;\n        maxStake = _maxStake;\n\n        DOMAIN_SEPERATOR =  keccak256(abi.encode(\n            EIP712DOMAIN_TYPEHASH,\n            keccak256(\"Dicether\"),\n            keccak256(\"2\"),\n            _chainId,\n            address(this)\n        ));\n    }\n\n    /**\n     * @dev Set gameIdCntr. Can be only set before activating contract.\n     */\n    function setGameIdCntr(uint _gameIdCntr) public onlyOwner onlyNotActivated {\n        require(gameIdCntr > 0);\n        gameIdCntr = _gameIdCntr;\n    }\n\n    /**\n     * @notice Withdraw pending returns.\n     */\n    function withdraw() public {\n        uint toTransfer = pendingReturns[msg.sender];\n        require(toTransfer > 0);\n\n        pendingReturns[msg.sender] = 0;\n        msg.sender.transfer(toTransfer);\n    }\n\n    /**\n     * @notice Transfer house profit to houseAddress.\n     */\n    function transferProfitToHouse() public {\n        require(lastProfitTransferTimestamp.add(profitTransferTimeSpan) <= block.timestamp);\n\n        // update last transfer timestamp\n        lastProfitTransferTimestamp = block.timestamp;\n\n        if (houseProfit <= 0) {\n            // no profit to transfer\n            return;\n        }\n\n        uint toTransfer = houseProfit.castToUint();\n\n        houseProfit = 0;\n        houseStake = houseStake.sub(toTransfer);\n\n        houseAddress.transfer(toTransfer);\n    }\n\n    /**\n     * @dev Set profit transfer time span.\n     */\n    function setProfitTransferTimeSpan(uint _profitTransferTimeSpan)\n        public\n        onlyOwner\n        onlyValidTransferTimeSpan(_profitTransferTimeSpan)\n    {\n        profitTransferTimeSpan = _profitTransferTimeSpan;\n    }\n\n    /**\n     * @dev Increase house stake by msg.value\n     */\n    function addHouseStake() public payable onlyOwner {\n        houseStake = houseStake.add(msg.value);\n    }\n\n    /**\n     * @dev Withdraw house stake.\n     */\n    function withdrawHouseStake(uint value) public onlyOwner {\n        uint minHouseStake = conflictRes.minHouseStake(activeGames);\n\n        require(value <= houseStake && houseStake.sub(value) >= minHouseStake);\n        require(houseProfit <= 0 || houseProfit.castToUint() <= houseStake.sub(value));\n\n        houseStake = houseStake.sub(value);\n        owner.transfer(value);\n    }\n\n    /**\n     * @dev Withdraw house stake and profit.\n     */\n    function withdrawAll() public onlyOwner onlyPausedSince(3 days) {\n        houseProfit = 0;\n        uint toTransfer = houseStake;\n        houseStake = 0;\n        owner.transfer(toTransfer);\n    }\n\n    /**\n     * @dev Set new house address.\n     * @param _houseAddress New house address.\n     */\n    function setHouseAddress(address _houseAddress) public onlyOwner {\n        houseAddress = _houseAddress;\n    }\n\n    /**\n     * @dev Set stake min and max value.\n     * @param _minStake Min stake.\n     * @param _maxStake Max stake.\n     */\n    function setStakeRequirements(uint128 _minStake, uint128 _maxStake) public onlyOwner {\n        require(_minStake > 0 && _minStake <= _maxStake);\n        minStake = _minStake;\n        maxStake = _maxStake;\n        emit LogStakeLimitsModified(minStake, maxStake);\n    }\n\n    /**\n     * @dev Close game session.\n     * @param _game Game session data.\n     * @param _gameId Id of game session.\n     * @param _userAddress User's address of game session.\n     * @param _reason Reason for closing game session.\n     * @param _balance Game session balance.\n     */\n    function closeGame(\n        Game storage _game,\n        uint _gameId,\n        uint32 _roundId,\n        address _userAddress,\n        ReasonEnded _reason,\n        int _balance\n    )\n        internal\n    {\n        _game.status = GameStatus.ENDED;\n\n        activeGames = activeGames.sub(1);\n\n        payOut(_userAddress, _game.stake, _balance);\n\n        emit LogGameEnded(_userAddress, _gameId, _roundId, _balance, _reason);\n    }\n\n    /**\n     * @dev End game by paying out user and server.\n     * @param _userAddress User's address.\n     * @param _stake User's stake.\n     * @param _balance User's balance.\n     */\n    function payOut(address _userAddress, uint128 _stake, int _balance) internal {\n        int stakeInt = _stake;\n        int houseStakeInt = houseStake.castToInt();\n\n        assert(_balance <= conflictRes.maxBalance());\n        assert((stakeInt.add(_balance)) >= 0);\n\n        if (_balance > 0 && houseStakeInt < _balance) {\n            // Should never happen!\n            // House is bankrupt.\n            // Payout left money.\n            _balance = houseStakeInt;\n        }\n\n        houseProfit = houseProfit.sub(_balance);\n\n        int newHouseStake = houseStakeInt.sub(_balance);\n        houseStake = newHouseStake.castToUint();\n\n        uint valueUser = stakeInt.add(_balance).castToUint();\n        pendingReturns[_userAddress] += valueUser;\n        if (pendingReturns[_userAddress] > 0) {\n            safeSend(_userAddress);\n        }\n    }\n\n    /**\n     * @dev Send value of pendingReturns[_address] to _address.\n     * @param _address Address to send value to.\n     */\n    function safeSend(address _address) internal {\n        uint valueToSend = pendingReturns[_address];\n        assert(valueToSend > 0);\n\n        pendingReturns[_address] = 0;\n        if (_address.send(valueToSend) == false) {\n            pendingReturns[_address] = valueToSend;\n        }\n    }\n\n    /**\n     * @dev Verify signature of given data. Throws on verification failure.\n     * @param _sig Signature of given data in the form of rsv.\n     * @param _address Address of signature signer.\n     */\n    function verifySig(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes _sig,\n        address _address\n    )\n        internal\n        view\n    {\n        // check if this is the correct contract\n        address contractAddress = this;\n        require(_contractAddress == contractAddress, \"inv contractAddress\");\n\n        bytes32 roundHash = calcHash(\n                _roundId,\n                _gameType,\n                _num,\n                _value,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId\n        );\n\n        verify(\n                roundHash,\n                _sig,\n                _address\n        );\n    }\n\n     /**\n     * @dev Check if _sig is valid signature of _hash. Throws if invalid signature.\n     * @param _hash Hash to check signature of.\n     * @param _sig Signature of _hash.\n     * @param _address Address of signer.\n     */\n    function verify(\n        bytes32 _hash,\n        bytes _sig,\n        address _address\n    )\n        internal\n        pure\n    {\n        (bytes32 r, bytes32 s, uint8 v) = signatureSplit(_sig);\n        address addressRecover = ecrecover(_hash, v, r, s);\n        require(addressRecover == _address, \"inv sig\");\n    }\n\n    /**\n     * @dev Calculate typed hash of given data (compare eth_signTypedData).\n     * @return Hash of given data.\n     */\n    function calcHash(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId\n    )\n        private\n        view\n        returns(bytes32)\n    {\n        bytes32 betHash = keccak256(abi.encode(\n            BET_TYPEHASH,\n            _roundId,\n            _gameType,\n            _num,\n            _value,\n            _balance,\n            _serverHash,\n            _userHash,\n            _gameId\n        ));\n\n        return keccak256(abi.encodePacked(\n            \"\\x19\\x01\",\n            DOMAIN_SEPERATOR,\n            betHash\n        ));\n    }\n\n    /**\n     * @dev Split the given signature of the form rsv in r s v. v is incremented with 27 if\n     * it is below 2.\n     * @param _signature Signature to split.\n     * @return r s v\n     */\n    function signatureSplit(bytes _signature)\n        private\n        pure\n        returns (bytes32 r, bytes32 s, uint8 v)\n    {\n        require(_signature.length == 65, \"inv sig\");\n\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            v := and(mload(add(_signature, 65)), 0xff)\n        }\n        if (v < 2) {\n            v = v + 27;\n        }\n    }\n}\n\ncontract GameChannelConflict is GameChannelBase {\n    using SafeCast for int;\n    using SafeCast for uint;\n    using SafeMath for int;\n    using SafeMath for uint;\n\n    /**\n     * @dev Contract constructor.\n     * @param _serverAddress Server address.\n     * @param _minStake Min value user needs to deposit to create game session.\n     * @param _maxStake Max value user can deposit to create game session.\n     * @param _conflictResAddress Conflict resolution contract address\n     * @param _houseAddress House address to move profit to\n     * @param _chainId Chain id for signature domain.\n     */\n    constructor(\n        address _serverAddress,\n        uint128 _minStake,\n        uint128 _maxStake,\n        address _conflictResAddress,\n        address _houseAddress,\n        uint _chainId\n    )\n        public\n        GameChannelBase(_serverAddress, _minStake, _maxStake, _conflictResAddress, _houseAddress, _chainId)\n    {\n        // nothing to do\n    }\n\n    /**\n     * @dev Used by server if user does not end game session.\n     * @param _roundId Round id of bet.\n     * @param _gameType Game type of bet.\n     * @param _num Number of bet.\n     * @param _value Value of bet.\n     * @param _balance Balance before this bet.\n     * @param _serverHash Hash of server seed for this bet.\n     * @param _userHash Hash of user seed for this bet.\n     * @param _gameId Game session id.\n     * @param _contractAddress Address of this contract.\n     * @param _userSig User signature of this bet.\n     * @param _userAddress Address of user.\n     * @param _serverSeed Server seed for this bet.\n     * @param _userSeed User seed for this bet.\n     */\n    function serverEndGameConflict(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes _userSig,\n        address _userAddress,\n        bytes32 _serverSeed,\n        bytes32 _userSeed\n    )\n        public\n        onlyServer\n    {\n        verifySig(\n                _roundId,\n                _gameType,\n                _num,\n                _value,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _userSig,\n                _userAddress\n        );\n\n        serverEndGameConflictImpl(\n                _roundId,\n                _gameType,\n                _num,\n                _value,\n                _balance,\n                _serverHash,\n                _userHash,\n                _serverSeed,\n                _userSeed,\n                _gameId,\n                _userAddress\n        );\n    }\n\n    /**\n     * @notice Can be used by user if server does not answer to the end game session request.\n     * @param _roundId Round id of bet.\n     * @param _gameType Game type of bet.\n     * @param _num Number of bet.\n     * @param _value Value of bet.\n     * @param _balance Balance before this bet.\n     * @param _serverHash Hash of server seed for this bet.\n     * @param _userHash Hash of user seed for this bet.\n     * @param _gameId Game session id.\n     * @param _contractAddress Address of this contract.\n     * @param _serverSig Server signature of this bet.\n     * @param _userSeed User seed for this bet.\n     */\n    function userEndGameConflict(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes _serverSig,\n        bytes32 _userSeed\n    )\n        public\n    {\n        verifySig(\n            _roundId,\n            _gameType,\n            _num,\n            _value,\n            _balance,\n            _serverHash,\n            _userHash,\n            _gameId,\n            _contractAddress,\n            _serverSig,\n            serverAddress\n        );\n\n        userEndGameConflictImpl(\n            _roundId,\n            _gameType,\n            _num,\n            _value,\n            _balance,\n            _userHash,\n            _userSeed,\n            _gameId,\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice Cancel active game without playing. Useful if server stops responding before\n     * one game is played.\n     * @param _gameId Game session id.\n     */\n    function userCancelActiveGame(uint _gameId) public {\n        address userAddress = msg.sender;\n        uint gameId = userGameId[userAddress];\n        Game storage game = gameIdGame[gameId];\n\n        require(gameId == _gameId, \"inv gameId\");\n\n        if (game.status == GameStatus.ACTIVE) {\n            game.endInitiatedTime = block.timestamp;\n            game.status = GameStatus.USER_INITIATED_END;\n\n            emit LogUserRequestedEnd(msg.sender, gameId);\n        } else if (game.status == GameStatus.SERVER_INITIATED_END && game.roundId == 0) {\n            cancelActiveGame(game, gameId, userAddress);\n        } else {\n            revert();\n        }\n    }\n\n    /**\n     * @dev Cancel active game without playing. Useful if user starts game session and\n     * does not play.\n     * @param _userAddress Users' address.\n     * @param _gameId Game session id.\n     */\n    function serverCancelActiveGame(address _userAddress, uint _gameId) public onlyServer {\n        uint gameId = userGameId[_userAddress];\n        Game storage game = gameIdGame[gameId];\n\n        require(gameId == _gameId, \"inv gameId\");\n\n        if (game.status == GameStatus.ACTIVE) {\n            game.endInitiatedTime = block.timestamp;\n            game.status = GameStatus.SERVER_INITIATED_END;\n\n            emit LogServerRequestedEnd(msg.sender, gameId);\n        } else if (game.status == GameStatus.USER_INITIATED_END && game.roundId == 0) {\n            cancelActiveGame(game, gameId, _userAddress);\n        } else {\n            revert();\n        }\n    }\n\n    /**\n    * @dev Force end of game if user does not respond. Only possible after a certain period of time\n    * to give the user a chance to respond.\n    * @param _userAddress User's address.\n    */\n    function serverForceGameEnd(address _userAddress, uint _gameId) public onlyServer {\n        uint gameId = userGameId[_userAddress];\n        Game storage game = gameIdGame[gameId];\n\n        require(gameId == _gameId, \"inv gameId\");\n        require(game.status == GameStatus.SERVER_INITIATED_END, \"inv status\");\n\n        // theoretically we have enough data to calculate winner\n        // but as user did not respond assume he has lost.\n        int newBalance = conflictRes.serverForceGameEnd(\n            game.gameType,\n            game.betNum,\n            game.betValue,\n            game.balance,\n            game.stake,\n            game.endInitiatedTime\n        );\n\n        closeGame(game, gameId, game.roundId, _userAddress, ReasonEnded.SERVER_FORCED_END, newBalance);\n    }\n\n    /**\n    * @notice Force end of game if server does not respond. Only possible after a certain period of time\n    * to give the server a chance to respond.\n    */\n    function userForceGameEnd(uint _gameId) public {\n        address userAddress = msg.sender;\n        uint gameId = userGameId[userAddress];\n        Game storage game = gameIdGame[gameId];\n\n        require(gameId == _gameId, \"inv gameId\");\n        require(game.status == GameStatus.USER_INITIATED_END, \"inv status\");\n\n        int newBalance = conflictRes.userForceGameEnd(\n            game.gameType,\n            game.betNum,\n            game.betValue,\n            game.balance,\n            game.stake,\n            game.endInitiatedTime\n        );\n\n        closeGame(game, gameId, game.roundId, userAddress, ReasonEnded.USER_FORCED_END, newBalance);\n    }\n\n    /**\n     * @dev Conflict handling implementation. Stores game data and timestamp if game\n     * is active. If server has already marked conflict for game session the conflict\n     * resolution contract is used (compare conflictRes).\n     * @param _roundId Round id of bet.\n     * @param _gameType Game type of bet.\n     * @param _num Number of bet.\n     * @param _value Value of bet.\n     * @param _balance Balance before this bet.\n     * @param _userHash Hash of user's seed for this bet.\n     * @param _userSeed User's seed for this bet.\n     * @param _gameId game Game session id.\n     * @param _userAddress User's address.\n     */\n    function userEndGameConflictImpl(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _userHash,\n        bytes32 _userSeed,\n        uint _gameId,\n        address _userAddress\n    )\n        private\n    {\n        uint gameId = userGameId[_userAddress];\n        Game storage game = gameIdGame[gameId];\n        int maxBalance = conflictRes.maxBalance();\n        int gameStake = game.stake;\n\n        require(gameId == _gameId, \"inv gameId\");\n        require(_roundId > 0, \"inv roundId\");\n        require(keccak256(abi.encodePacked(_userSeed)) == _userHash, \"inv userSeed\");\n        require(-gameStake <= _balance && _balance <= maxBalance, \"inv balance\"); // game.stake save to cast as uint128\n        require(conflictRes.isValidBet(_gameType, _num, _value), \"inv bet\");\n        require(gameStake.add(_balance).sub(_value.castToInt()) >= 0, \"value too high\"); // game.stake save to cast as uint128\n\n        if (game.status == GameStatus.SERVER_INITIATED_END && game.roundId == _roundId) {\n            game.userSeed = _userSeed;\n            endGameConflict(game, gameId, _userAddress);\n        } else if (game.status == GameStatus.ACTIVE\n                || (game.status == GameStatus.SERVER_INITIATED_END && game.roundId < _roundId)) {\n            game.status = GameStatus.USER_INITIATED_END;\n            game.endInitiatedTime = block.timestamp;\n            game.roundId = _roundId;\n            game.gameType = _gameType;\n            game.betNum = _num;\n            game.betValue = _value;\n            game.balance = _balance;\n            game.userSeed = _userSeed;\n            game.serverSeed = bytes32(0);\n\n            emit LogUserRequestedEnd(msg.sender, gameId);\n        } else {\n            revert(\"inv state\");\n        }\n    }\n\n    /**\n     * @dev Conflict handling implementation. Stores game data and timestamp if game\n     * is active. If user has already marked conflict for game session the conflict\n     * resolution contract is used (compare conflictRes).\n     * @param _roundId Round id of bet.\n     * @param _gameType Game type of bet.\n     * @param _num Number of bet.\n     * @param _value Value of bet.\n     * @param _balance Balance before this bet.\n     * @param _serverHash Hash of server's seed for this bet.\n     * @param _userHash Hash of user's seed for this bet.\n     * @param _serverSeed Server's seed for this bet.\n     * @param _userSeed User's seed for this bet.\n     * @param _userAddress User's address.\n     */\n    function serverEndGameConflictImpl(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        bytes32 _serverSeed,\n        bytes32 _userSeed,\n        uint _gameId,\n        address _userAddress\n    )\n        private\n    {\n        uint gameId = userGameId[_userAddress];\n        Game storage game = gameIdGame[gameId];\n        int maxBalance = conflictRes.maxBalance();\n        int gameStake = game.stake;\n\n        require(gameId == _gameId, \"inv gameId\");\n        require(_roundId > 0, \"inv roundId\");\n        require(keccak256(abi.encodePacked(_serverSeed)) == _serverHash, \"inv serverSeed\");\n        require(keccak256(abi.encodePacked(_userSeed)) == _userHash, \"inv userSeed\");\n        require(-gameStake <= _balance && _balance <= maxBalance, \"inv balance\"); // game.stake save to cast as uint128\n        require(conflictRes.isValidBet(_gameType, _num, _value), \"inv bet\");\n        require(gameStake.add(_balance).sub(_value.castToInt()) >= 0, \"too high value\"); // game.stake save to cast as uin128\n\n        if (game.status == GameStatus.USER_INITIATED_END && game.roundId == _roundId) {\n            game.serverSeed = _serverSeed;\n            endGameConflict(game, gameId, _userAddress);\n        } else if (game.status == GameStatus.ACTIVE\n                || (game.status == GameStatus.USER_INITIATED_END && game.roundId < _roundId)) {\n            game.status = GameStatus.SERVER_INITIATED_END;\n            game.endInitiatedTime = block.timestamp;\n            game.roundId = _roundId;\n            game.gameType = _gameType;\n            game.betNum = _num;\n            game.betValue = _value;\n            game.balance = _balance;\n            game.serverSeed = _serverSeed;\n            game.userSeed = _userSeed;\n\n            emit LogServerRequestedEnd(_userAddress, gameId);\n        } else {\n            revert(\"inv state\");\n        }\n    }\n\n    /**\n     * @dev End conflicting game without placed bets.\n     * @param _game Game session data.\n     * @param _gameId Game session id.\n     * @param _userAddress User's address.\n     */\n    function cancelActiveGame(Game storage _game, uint _gameId, address _userAddress) private {\n        // user need to pay a fee when conflict ended.\n        // this ensures a malicious, rich user can not just generate game sessions and then wait\n        // for us to end the game session and then confirm the session status, so\n        // we would have to pay a high gas fee without profit.\n        int newBalance = -conflictRes.conflictEndFine();\n\n        // do not allow balance below user stake\n        int stake = _game.stake;\n        if (newBalance < -stake) {\n            newBalance = -stake;\n        }\n        closeGame(_game, _gameId, 0, _userAddress, ReasonEnded.CONFLICT_ENDED, newBalance);\n    }\n\n    /**\n     * @dev End conflicting game.\n     * @param _game Game session data.\n     * @param _gameId Game session id.\n     * @param _userAddress User's address.\n     */\n    function endGameConflict(Game storage _game, uint _gameId, address _userAddress) private {\n        int newBalance = conflictRes.endGameConflict(\n            _game.gameType,\n            _game.betNum,\n            _game.betValue,\n            _game.balance,\n            _game.stake,\n            _game.serverSeed,\n            _game.userSeed\n        );\n\n        closeGame(_game, _gameId, _game.roundId, _userAddress, ReasonEnded.CONFLICT_ENDED, newBalance);\n    }\n}\n\ncontract GameChannel is GameChannelConflict {\n    /**\n     * @dev contract constructor\n     * @param _serverAddress Server address.\n     * @param _minStake Min value user needs to deposit to create game session.\n     * @param _maxStake Max value user can deposit to create game session.\n     * @param _conflictResAddress Conflict resolution contract address.\n     * @param _houseAddress House address to move profit to.\n     * @param _chainId Chain id for signature domain.\n     */\n    constructor(\n        address _serverAddress,\n        uint128 _minStake,\n        uint128 _maxStake,\n        address _conflictResAddress,\n        address _houseAddress,\n        uint _chainId\n    )\n        public\n        GameChannelConflict(_serverAddress, _minStake, _maxStake, _conflictResAddress, _houseAddress, _chainId)\n    {\n        // nothing to do\n    }\n\n    /**\n     * @notice Create games session request. msg.value needs to be valid stake value.\n     * @param _userEndHash Last entry of users' hash chain.\n     * @param _previousGameId User's previous game id, initial 0.\n     * @param _createBefore Game can be only created before this timestamp.\n     * @param _serverEndHash Last entry of server's hash chain.\n     * @param _serverSig Server signature. See verifyCreateSig\n     */\n    function createGame(\n        bytes32 _userEndHash,\n        uint _previousGameId,\n        uint _createBefore,\n        bytes32 _serverEndHash,\n        bytes _serverSig\n    )\n        public\n        payable\n        onlyValidValue\n        onlyValidHouseStake(activeGames + 1)\n        onlyNotPaused\n    {\n        uint previousGameId = userGameId[msg.sender];\n        Game storage game = gameIdGame[previousGameId];\n\n        require(game.status == GameStatus.ENDED, \"prev game not ended\");\n        require(previousGameId == _previousGameId, \"inv gamePrevGameId\");\n        require(block.timestamp < _createBefore, \"expired\");\n\n        verifyCreateSig(msg.sender, _previousGameId, _createBefore, _serverEndHash, _serverSig);\n\n        uint gameId = gameIdCntr++;\n        userGameId[msg.sender] = gameId;\n        Game storage newGame = gameIdGame[gameId];\n\n        newGame.stake = uint128(msg.value); // It's safe to cast msg.value as it is limited, see onlyValidValue\n        newGame.status = GameStatus.ACTIVE;\n\n        activeGames = activeGames.add(1);\n\n        // It's safe to cast msg.value as it is limited, see onlyValidValue\n        emit LogGameCreated(msg.sender, gameId, uint128(msg.value), _serverEndHash,  _userEndHash);\n    }\n\n\n    /**\n     * @dev Regular end game session. Used if user and house have both\n     * accepted current game session state.\n     * The game session with gameId _gameId is closed\n     * and the user paid out. This functions is called by the server after\n     * the user requested the termination of the current game session.\n     * @param _roundId Round id of bet.\n     * @param _balance Current balance.\n     * @param _serverHash Hash of server's seed for this bet.\n     * @param _userHash Hash of user's seed for this bet.\n     * @param _gameId Game session id.\n     * @param _contractAddress Address of this contract.\n     * @param _userAddress Address of user.\n     * @param _userSig User's signature of this bet.\n     */\n    function serverEndGame(\n        uint32 _roundId,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        address _userAddress,\n        bytes _userSig\n    )\n        public\n        onlyServer\n    {\n        verifySig(\n                _roundId,\n                0,\n                0,\n                0,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _userSig,\n                _userAddress\n        );\n\n        regularEndGame(_userAddress, _roundId, _balance, _gameId, _contractAddress);\n    }\n\n    /**\n     * @notice Regular end game session. Normally not needed as server ends game (@see serverEndGame).\n     * Can be used by user if server does not end game session.\n     * @param _roundId Round id of bet.\n     * @param _balance Current balance.\n     * @param _serverHash Hash of server's seed for this bet.\n     * @param _userHash Hash of user's seed for this bet.\n     * @param _gameId Game session id.\n     * @param _contractAddress Address of this contract.\n     * @param _serverSig Server's signature of this bet.\n     */\n    function userEndGame(\n        uint32 _roundId,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes _serverSig\n    )\n        public\n    {\n        verifySig(\n                _roundId,\n                0,\n                0,\n                0,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _serverSig,\n                serverAddress\n        );\n\n        regularEndGame(msg.sender, _roundId, _balance, _gameId, _contractAddress);\n    }\n\n    /**\n     * @dev Verify server signature.\n     * @param _userAddress User's address.\n     * @param _previousGameId User's previous game id, initial 0.\n     * @param _createBefore Game can be only created before this timestamp.\n     * @param _serverEndHash Last entry of server's hash chain.\n     * @param _serverSig Server signature.\n     */\n    function verifyCreateSig(\n        address _userAddress,\n        uint _previousGameId,\n        uint _createBefore,\n        bytes32 _serverEndHash,\n        bytes _serverSig\n    )\n        private view\n    {\n        address contractAddress = this;\n        bytes32 hash = keccak256(abi.encodePacked(\n            contractAddress, _userAddress, _previousGameId, _createBefore, _serverEndHash\n        ));\n\n        verify(hash, _serverSig, serverAddress);\n    }\n\n    /**\n     * @dev Regular end game session implementation. Used if user and house have both\n     * accepted current game session state. The game session with gameId _gameId is closed\n     * and the user paid out.\n     * @param _userAddress Address of user.\n     * @param _balance Current balance.\n     * @param _gameId Game session id.\n     * @param _contractAddress Address of this contract.\n     */\n    function regularEndGame(\n        address _userAddress,\n        uint32 _roundId,\n        int _balance,\n        uint _gameId,\n        address _contractAddress\n    )\n        private\n    {\n        uint gameId = userGameId[_userAddress];\n        Game storage game = gameIdGame[gameId];\n        int maxBalance = conflictRes.maxBalance();\n        int gameStake = game.stake;\n\n        require(_gameId == gameId, \"inv gameId\");\n        require(_roundId > 0, \"inv roundId\");\n        // save to cast as game.stake hash fixed range\n        require(-gameStake <= _balance && _balance <= maxBalance, \"inv balance\");\n        require(game.status == GameStatus.ACTIVE, \"inv status\");\n\n        assert(_contractAddress == address(this));\n\n        closeGame(game, gameId, _roundId, _userAddress, ReasonEnded.REGULAR_ENDED, _balance);\n    }\n}\n\nlibrary SafeCast {\n    /**\n     * Cast unsigned a to signed a.\n     */\n    function castToInt(uint a) internal pure returns(int) {\n        assert(a < (1 << 255));\n        return int(a);\n    }\n\n    /**\n     * Cast signed a to unsigned a.\n     */\n    function castToUint(int a) internal pure returns(uint) {\n        assert(a >= 0);\n        return uint(a);\n    }\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two unsigned integers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, throws on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n        int256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Integer division of two signed integers, truncating the quotient.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // Overflow only happens when the smallest negative int is multiplied by -1.\n        int256 INT256_MIN = int256((uint256(1) << 255));\n        assert(a != INT256_MIN || b != - 1);\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, throws on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        assert((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, throws on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        assert((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n}",
  "bytecode": "60806040526001805460a060020a61ffff02191675010000000000000000000000000000000000000000001781554260025560048054600160a060020a0319169055600060058190556007819055600891909155600b819055600c5562127500600e553480156200006f57600080fd5b5060405160c08062003d3483398101604090815281516020830151918301516060840151608085015160a0909501516000805433600160a060020a0319918216178255600180548216905560038054909116600160a060020a038516179055939592939192918690869086908690869086908690869086908690869086906001608060020a038616118015620001175750836001608060020a0316856001608060020a031611155b15156200012357600080fd5b60098054600160a060020a03808916600160a060020a031992831617909255600a80549285169290911691909117905542600f55600d80546001608060020a03868116700100000000000000000000000000000000028189166001608060020a03199093169290921716179055604080517f454950373132446f6d61696e28737472696e67206e616d652c737472696e672081527f76657273696f6e2c75696e7432353620636861696e49642c61646472657373206020808301919091527f766572696679696e67436f6e74726163742900000000000000000000000000008284015282519182900360520182207f4469636574686572000000000000000000000000000000000000000000000000835283519283900360080183207f32000000000000000000000000000000000000000000000000000000000000008452845193849003600101842084840192909252838501526060830152608082018490523060a0808401919091528351808403909101815260c090920192839052815191929182918401908083835b60208310620002d05780518252601f199092019160209182019101620002af565b5181516000196020949094036101000a939093019283169219169190911790526040519201829003909120600655505050505050505050505050505050505050505050613a1180620003236000396000f3006080604052600436106102795763ffffffff60e060020a6000350416630df63210811461027e5780630f15f4c0146102a5578063186601ca146102bc57806319fc36ed146102e55780631b08345a146102fa57806326b387bb1461031b578063287e9fbc1461033c5780632c94a23514610354578063375b3c0a146103695780633ccfd60b1461039a5780633f4ba83a146103af578063410453ae146103c457806341b801841461044f5780634d20d4bc146104645780634e71e0c8146104795780634f739ff01461048e578063543ad1df14610496578063563c23a0146104ab5780635ba2dd22146104c05780635c975abb146104f157806381efc01d1461050657806383197ef01461051e57806383e256dc146105335780638456cb59146105c4578063853828b6146105d9578063878de0ae146105ee57806388fedd04146106835780638da5cb5b146106985780639399dd7e146106ad578063947bc72d146107555780639b29f1331461076a5780639c0051db146107825780639f34ce141461079a578063a09f8659146107af578063a8182cd3146107c4578063afc81953146107e8578063b064ca1814610846578063bd5c4e241461085e578063c49f91d314610873578063c861f3a014610888578063cbffb1ae1461089d578063d1e9dcbf146108be578063d6e5fe98146108e2578063d7cee31e14610909578063db420fe31461091e578063dc55509014610933578063de38eb3a14610948578063e30c39781461095d578063e475222e14610972578063e60a33aa14610987578063ea1b28e014610a0a578063ef3aaf5414610a1f578063f2fde38b14610a40578063f87ffb7414610a61578063fd306ca714610a76575b600080fd5b34801561028a57600080fd5b50610293610a8b565b60408051918252519081900360200190f35b3480156102b157600080fd5b506102ba610a91565b005b3480156102c857600080fd5b506102d1610b0e565b604080519115158252519081900360200190f35b3480156102f157600080fd5b50610293610b1e565b34801561030657600080fd5b50610293600160a060020a0360043516610b25565b34801561032757600080fd5b50610293600160a060020a0360043516610b37565b34801561034857600080fd5b506102ba600435610b49565b34801561036057600080fd5b50610293610b8b565b34801561037557600080fd5b5061037e610b91565b604080516001608060020a039092168252519081900360200190f35b3480156103a657600080fd5b506102ba610ba0565b3480156103bb57600080fd5b506102ba610bfb565b3480156103d057600080fd5b50604080516020600460e43581810135601f81018490048402850184019095528484526102ba94823563ffffffff1694602480359560443595606435956084359560a435600160a060020a039081169660c43590911695369561010494929391909201918190840183828082843750949750610c919650505050505050565b34801561045b57600080fd5b50610293610cd4565b34801561047057600080fd5b50610293610cda565b34801561048557600080fd5b506102ba610cf5565b6102ba610d73565b3480156104a257600080fd5b50610293610da2565b3480156104b757600080fd5b50610293610da9565b3480156104cc57600080fd5b506104d5610daf565b60408051600160a060020a039092168252519081900360200190f35b3480156104fd57600080fd5b506102d1610dbe565b34801561051257600080fd5b506102ba600435610dce565b34801561052a57600080fd5b506102ba610f3c565b34801561053f57600080fd5b5061054b600435610f9d565b604051808b600381111561055b57fe5b60ff90811682526001608060020a03909b166020820152989099166040808a019190915263ffffffff9097166060890152608088019590955260a087019390935260c086019190915260e085015261010084015261012083015251908190036101400192509050f35b3480156105d057600080fd5b506102ba611012565b3480156105e557600080fd5b506102ba6110df565b3480156105fa57600080fd5b50604080516020601f610124356004818101359283018490048402850184019095528184526102ba9463ffffffff8135169460ff60248035919091169560443595606435956084359560a4359560c4359560e43595600160a060020a036101043516953695610144949301918190840183828082843750949750509335945061117a9350505050565b34801561068f57600080fd5b506102936111c0565b3480156106a457600080fd5b506104d56111c6565b3480156106b957600080fd5b50604080516020601f610124356004818101359283018490048402850184019095528184526102ba9463ffffffff8135169460ff60248035919091169560443595606435956084359560a4359560c4359560e43595600160a060020a03610104351695369561014494930191819084018382808284375094975050508335600160a060020a0316945050506020820135916040013590506111d5565b34801561076157600080fd5b50610293611221565b34801561077657600080fd5b506102ba600435611228565b34801561078e57600080fd5b506102ba600435611327565b3480156107a657600080fd5b506102ba611366565b3480156107bb57600080fd5b506104d5611438565b3480156107d057600080fd5b506102ba600160a060020a0360043516602435611447565b604080516020601f6084356004818101359283018490048402850184019095528184526102ba948035946024803595604435956064359536959460a49490939101919081908401838280828437509497506115679650505050505050565b34801561085257600080fd5b506102ba600435611963565b34801561086a57600080fd5b50610293611b4a565b34801561087f57600080fd5b50610293611b51565b34801561089457600080fd5b50610293611bd1565b3480156108a957600080fd5b506102ba600160a060020a0360043516611bd7565b3480156108ca57600080fd5b506102ba600160a060020a0360043516602435611c53565b3480156108ee57600080fd5b506102ba6001608060020a0360043581169060243516611e5e565b34801561091557600080fd5b506104d5611f38565b34801561092a57600080fd5b506104d5611f47565b34801561093f57600080fd5b50610293611f56565b34801561095457600080fd5b50610293611f5c565b34801561096957600080fd5b506104d5611f63565b34801561097e57600080fd5b50610293611f72565b34801561099357600080fd5b50604080516020601f60c4356004818101359283018490048402850184019095528184526102ba9463ffffffff813516946024803595604435956064359560843595600160a060020a0360a43516953695919460e4949193909201918190840183828082843750949750611f789650505050505050565b348015610a1657600080fd5b5061037e611fb8565b348015610a2b57600080fd5b506102ba600160a060020a0360043516611fdb565b348015610a4c57600080fd5b506102ba600160a060020a0360043516612021565b348015610a6d57600080fd5b50610293612096565b348015610a8257600080fd5b506102ba61209c565b60065481565b600054600160a060020a03163314610aa857600080fd5b60015460a060020a900460ff1615610abf57600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fc9d6bebde85c4e3348468c6af2cb34f978d1a8c6eebc438f1361c1ad5edf5f0e90600090a1565b60015460a060020a900460ff1681565b6201518081565b60116020526000908152604090205481565b60126020526000908152604090205481565b600054600160a060020a03163314610b6057600080fd5b60015460a060020a900460ff1615610b7757600080fd5b600854600010610b8657600080fd5b600855565b600e5481565b600d546001608060020a031681565b33600090815260126020526040812054908111610bbc57600080fd5b336000818152601260205260408082208290555183156108fc0291849190818181858888f19350505050158015610bf7573d6000803e3d6000fd5b5050565b600054600160a060020a03163314610c1257600080fd5b60015460a860020a900460ff161515610c2a57600080fd5b60015460a060020a900460ff161515610c4257600080fd5b6001805475ff00000000000000000000000000000000000000000019169055600060028190556040517f730c1faaa977b67dacf1e2451ef54556e04a07d577785ff79f6d31f73502efc99190a1565b600954600160a060020a03163314610ca857600080fd5b610cbd8860008060008b8b8b8b8b8a8c61213a565b610cca82898987876121ba565b5050505050505050565b600f5481565b60405180608161396582396081019050604051809103902081565b600154600160a060020a03163314610d0c57600080fd5b6001805460008054600160a060020a0380841673ffffffffffffffffffffffffffffffffffffffff1992831617808455919093169093556040519092909116907f897d3c8bbea11029ba3b26eb993fe8edb14c2c4c0d2ecceccce41d1d83d3e359908390a3565b600054600160a060020a03163314610d8a57600080fd5b600b54610d9d903463ffffffff61241b16565b600b55565b6203f48081565b60025481565b600354600160a060020a031681565b60015460a860020a900460ff1681565b60008054600160a060020a03163314610de657600080fd5b600354600754604080517f73c4726b000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a03909216916373c4726b916024808201926020929091908290030181600087803b158015610e5057600080fd5b505af1158015610e64573d6000803e3d6000fd5b505050506040513d6020811015610e7a57600080fd5b5051600b549091508211801590610ea45750600b548190610ea1908463ffffffff61242e16565b10155b1515610eaf57600080fd5b6000600c54131580610edd5750600b54610ecf908363ffffffff61242e16565b610eda600c54612440565b11155b1515610ee857600080fd5b600b54610efb908363ffffffff61242e16565b600b5560008054604051600160a060020a039091169184156108fc02918591818181858888f19350505050158015610f37573d6000803e3d6000fd5b505050565b600054600160a060020a03163314610f5357600080fd5b600154621a5e009060a860020a900460ff168015610f8457506002544290610f81908363ffffffff61241b16565b11155b1515610f8f57600080fd5b600054600160a060020a0316ff5b601060205260009081526040902080546001820154600283015460038401546004850154600586015460069096015460ff8087169761010088046001608060020a03169771010000000000000000000000000000000000810490921696609060020a90920463ffffffff16959194919391928a565b600054600160a060020a0316331461102957600080fd5b60015460a860020a900460ff161561108b576040805160e560020a62461bcd02815260206004820152600660248201527f7061757365640000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805475ff000000000000000000000000000000000000000000191660a860020a179055426002556040517f4b314b34e912fda7f95e7d23e9c8c95f82f0aff1984e4ce592a0b005f905562490600090a1565b60008054600160a060020a031633146110f757600080fd5b6001546203f4809060a860020a900460ff16801561112857506002544290611125908363ffffffff61241b16565b11155b151561113357600080fd5b6000600c819055600b8054908290558154604051919450600160a060020a03169184156108fc02918591818181858888f19350505050158015610f37573d6000803e3d6000fd5b6111a28b8b8b8b8b8b8b8b8b8b600960009054906101000a9004600160a060020a031661213a565b6111b38b8b8b8b8b8a878b33612450565b5050505050505050505050565b600c5481565b600054600160a060020a031681565b600954600160a060020a031633146111ec57600080fd5b6111ff8d8d8d8d8d8d8d8d8d8d8d61213a565b6112128d8d8d8d8d8d8d89898f8d612a22565b50505050505050505050505050565b62ed4e0081565b33600081815260116020908152604080832054808452601090925290912083821461128b576040805160e560020a62461bcd02815260206004820152600a6024820152600080516020613945833981519152604482015290519081900360640190fd5b6001815460ff16600381111561129d57fe5b14156112e657426006820155805460ff19166002178155604051829033907f9b60ba122ac2e613ae737820a8eb2d8c28356ff6b03d569dacb7ce2bcdc86fed90600090a3611321565b6003815460ff1660038111156112f857fe5b14801561131157508054609060020a900463ffffffff16155b1561027957611321818385613090565b50505050565b600054600160a060020a0316331461133e57600080fd5b80620151808110158015611355575062ed4e008111155b151561136057600080fd5b50600e55565b600054600160a060020a0316331461137d57600080fd5b600454600160a060020a0316151561139457600080fd5b60055415156113a257600080fd5b426203f48060055401111580156113c057506207e900600554014211155b15156113cb57600080fd5b600480546003805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551690556000600581905560408051918252517f28de3c2df3d09a8b061f86cd0c78b7d02f1f5caffcd086ff45ee12a4a51056c89181900360200190a1565b600454600160a060020a031681565b6009546000908190600160a060020a0316331461146357600080fd5b5050600160a060020a03821660009081526011602090815260408083205480845260109092529091208282146114d1576040805160e560020a62461bcd02815260206004820152600a6024820152600080516020613945833981519152604482015290519081900360640190fd5b6001815460ff1660038111156114e357fe5b141561152c57426006820155805460ff19166003178155604051829033907fdbbc392d5391708a9def7f560f8cbdef92e1bb37e5104831e78feda1488b7ab090600090a3611321565b6002815460ff16600381111561153e57fe5b14801561155757508054609060020a900463ffffffff16155b1561027957611321818386613090565b600d54600090819081908190346001608060020a03909116118015906115ac5750600d5470010000000000000000000000000000000090046001608060020a03163411155b1515611602576040805160e560020a62461bcd02815260206004820152600960248201527f696e76207374616b650000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600754600354604080517f73c4726b00000000000000000000000000000000000000000000000000000000815260019093016004840181905290519092600092600160a060020a0316916373c4726b9160248082019260209290919082900301818787803b15801561167357600080fd5b505af1158015611687573d6000803e3d6000fd5b505050506040513d602081101561169d57600080fd5b5051600b549091508111156116fc576040805160e560020a62461bcd02815260206004820152600e60248201527f696e7620686f7573655374616b65000000000000000000000000000000000000604482015290519081900360640190fd5b60015460a860020a900460ff161561175e576040805160e560020a62461bcd02815260206004820152600660248201527f7061757365640000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b33600090815260116020908152604080832054808452601090925282209097509550855460ff16600381111561179057fe5b146117e5576040805160e560020a62461bcd02815260206004820152601360248201527f707265762067616d65206e6f7420656e64656400000000000000000000000000604482015290519081900360640190fd5b858a1461183c576040805160e560020a62461bcd02815260206004820152601260248201527f696e762067616d655072657647616d6549640000000000000000000000000000604482015290519081900360640190fd5b428911611893576040805160e560020a62461bcd02815260206004820152600760248201527f6578706972656400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6118a0338b8b8b8b61314c565b60088054600180820190925533600090815260116020908152604080832084905583835260109091529020805470ffffffffffffffffffffffffffffffff001916610100346001608060020a0316021760ff19168317815560075491965094506119099161241b565b600755604080516001608060020a0334168152602081018d905281518a92879233927fd25faca801440882fa5d7c7f70b072a2ad89621e277ee0b6f9923ccac48411b1929181900390910190a45050505050505050505050565b336000818152601160209081526040808320548084526010909252822090918483146119c7576040805160e560020a62461bcd02815260206004820152600a6024820152600080516020613945833981519152604482015290519081900360640190fd5b6002825460ff1660038111156119d957fe5b14611a2e576040805160e560020a62461bcd02815260206004820152600a60248201527f696e762073746174757300000000000000000000000000000000000000000000604482015290519081900360640190fd5b60038054835460018501546002860154938601546006870154604080517f0c5ebb1a00000000000000000000000000000000000000000000000000000000815271010000000000000000000000000000000000860460ff1660048201526024810194909452604484019690965260648301919091526101009092046001608060020a0316608482015260a48101919091529151600160a060020a0390911691630c5ebb1a9160c48083019260209291908290030181600087803b158015611af457600080fd5b505af1158015611b08573d6000803e3d6000fd5b505050506040513d6020811015611b1e57600080fd5b50518254909150611b439083908590609060020a900463ffffffff1687600286613220565b5050505050565b621a5e0081565b604080517f454950373132446f6d61696e28737472696e67206e616d652c737472696e672081527f76657273696f6e2c75696e7432353620636861696e49642c616464726573732060208201527f766572696679696e67436f6e747261637429000000000000000000000000000081830152905190819003605201902081565b600b5481565b600054600160a060020a03163314611bee57600080fd5b60048054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911681179091554260055560408051918252517f97044e884f04922f1959ef2de012f4734423df2d4da57fd4c5eaf40cd63b525f9181900360200190a150565b60095460009081908190600160a060020a03163314611c7157600080fd5b600160a060020a03851660009081526011602090815260408083205480845260109092529091209093509150838314611ce2576040805160e560020a62461bcd02815260206004820152600a6024820152600080516020613945833981519152604482015290519081900360640190fd5b6003825460ff166003811115611cf457fe5b14611d49576040805160e560020a62461bcd02815260206004820152600a60248201527f696e762073746174757300000000000000000000000000000000000000000000604482015290519081900360640190fd5b60038054835460018501546002860154938601546006870154604080517f834d42c600000000000000000000000000000000000000000000000000000000815271010000000000000000000000000000000000860460ff1660048201526024810194909452604484019690965260648301919091526101009092046001608060020a0316608482015260a48101919091529151600160a060020a039091169163834d42c69160c48083019260209291908290030181600087803b158015611e0f57600080fd5b505af1158015611e23573d6000803e3d6000fd5b505050506040513d6020811015611e3957600080fd5b50518254909150611b439083908590609060020a900463ffffffff1688600186613220565b600054600160a060020a03163314611e7557600080fd5b6000826001608060020a0316118015611ea05750806001608060020a0316826001608060020a031611155b1515611eab57600080fd5b600d80546fffffffffffffffffffffffffffffffff19166001608060020a038481169190911781167001000000000000000000000000000000008483168102919091179283905560408051848416815291909304909116602082015281517f1ec948cac143dba0e555a87dd86ae387e2ecd4a8fee80f7dd324d5987cb3e7f8929181900390910190a15050565b600a54600160a060020a031681565b600954600160a060020a031681565b60055481565b6207e90081565b600154600160a060020a031681565b60075481565b611fa28760008060008a8a8a8a8a8a600960009054906101000a9004600160a060020a031661213a565b611faf33888886866121ba565b50505050505050565b600d5470010000000000000000000000000000000090046001608060020a031681565b600054600160a060020a03163314611ff257600080fd5b600a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461203857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691821790925560008054604051929316917f83ada3430836f9d4bd6f7bc690ffbba5199cb19b37393dd64c229930213535969190a350565b60085481565b6000426120b6600e54600f5461241b90919063ffffffff16565b11156120c157600080fd5b42600f55600c546000126120d457612137565b6120df600c54612440565b6000600c55600b549091506120fa908263ffffffff61242e16565b600b55600a54604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610bf7573d6000803e3d6000fd5b50565b306000600160a060020a038516821461219d576040805160e560020a62461bcd02815260206004820152601360248201527f696e7620636f6e74726163744164647265737300000000000000000000000000604482015290519081900360640190fd5b6121ad8d8d8d8d8d8d8d8d6132c9565b905061121281858561344f565b600160a060020a038086166000908152601160209081526040808320548084526010835281842060035483517f73ad468a00000000000000000000000000000000000000000000000000000000815293519296919594859491909216926373ad468a9260048084019391929182900301818787803b15801561223b57600080fd5b505af115801561224f573d6000803e3d6000fd5b505050506040513d602081101561226557600080fd5b5051835490925061010090046001608060020a031690508386146122c1576040805160e560020a62461bcd02815260206004820152600a6024820152600080516020613945833981519152604482015290519081900360640190fd5b600063ffffffff89161161231f576040805160e560020a62461bcd02815260206004820152600b60248201527f696e7620726f756e644964000000000000000000000000000000000000000000604482015290519081900360640190fd5b8681600003131580156123325750818713155b1515612388576040805160e560020a62461bcd02815260206004820152600b60248201527f696e762062616c616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001835460ff16600381111561239a57fe5b146123ef576040805160e560020a62461bcd02815260206004820152600a60248201527f696e762073746174757300000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038516301461240157fe5b61241083858a8c60008c613220565b505050505050505050565b8181018281101561242857fe5b92915050565b60008282111561243a57fe5b50900390565b60008082121561244c57fe5b5090565b600160a060020a038082166000908152601160209081526040808320548084526010835281842060035483517f73ad468a00000000000000000000000000000000000000000000000000000000815293519296919594859491909216926373ad468a9260048084019391929182900301818787803b1580156124d157600080fd5b505af11580156124e5573d6000803e3d6000fd5b505050506040513d60208110156124fb57600080fd5b5051835490925061010090046001608060020a03169050858414612557576040805160e560020a62461bcd02815260206004820152600a6024820152600080516020613945833981519152604482015290519081900360640190fd5b600063ffffffff8e16116125b5576040805160e560020a62461bcd02815260206004820152600b60248201527f696e7620726f756e644964000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160208082018a90528251808303820181529183019283905281518b93918291908401908083835b602083106125ff5780518252601f1990920191602091820191016125e0565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515612687576040805160e560020a62461bcd02815260206004820152600c60248201527f696e762075736572536565640000000000000000000000000000000000000000604482015290519081900360640190fd5b88816000031315801561269a5750818913155b15156126f0576040805160e560020a62461bcd02815260206004820152600b60248201527f696e762062616c616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b600354604080517f09eecdd700000000000000000000000000000000000000000000000000000000815260ff8f166004820152602481018e9052604481018d90529051600160a060020a03909216916309eecdd7916064808201926020929091908290030181600087803b15801561276757600080fd5b505af115801561277b573d6000803e3d6000fd5b505050506040513d602081101561279157600080fd5b505115156127e9576040805160e560020a62461bcd02815260206004820152600760248201527f696e762062657400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006128136127f78c613531565b612807848d63ffffffff61355c16565b9063ffffffff61359516565b1215612869576040805160e560020a62461bcd02815260206004820152600e60248201527f76616c756520746f6f2068696768000000000000000000000000000000000000604482015290519081900360640190fd5b6003835460ff16600381111561287b57fe5b1480156128985750825463ffffffff8e8116609060020a90920416145b156128b457600483018790556128af8385876135c4565b611212565b6001835460ff1660038111156128c657fe5b14806128fc57506003835460ff1660038111156128df57fe5b1480156128fc5750825463ffffffff808f16609060020a90920416105b156129d2578254600290849060ff191660018302179055504283600601819055508c8360000160126101000a81548163ffffffff021916908363ffffffff1602179055508b8360000160116101000a81548160ff021916908360ff1602179055508a83600101819055508983600201819055508883600301819055508683600401816000191690555060006001028360050181600019169055508333600160a060020a03167f9b60ba122ac2e613ae737820a8eb2d8c28356ff6b03d569dacb7ce2bcdc86fed60405160405180910390a3611212565b6040805160e560020a62461bcd02815260206004820152600960248201527f696e762073746174650000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038082166000908152601160209081526040808320548084526010835281842060035483517f73ad468a00000000000000000000000000000000000000000000000000000000815293519296919594859491909216926373ad468a9260048084019391929182900301818787803b158015612aa357600080fd5b505af1158015612ab7573d6000803e3d6000fd5b505050506040513d6020811015612acd57600080fd5b5051835490925061010090046001608060020a03169050858414612b29576040805160e560020a62461bcd02815260206004820152600a6024820152600080516020613945833981519152604482015290519081900360640190fd5b60008f63ffffffff16111515612b89576040805160e560020a62461bcd02815260206004820152600b60248201527f696e7620726f756e644964000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160208082018b90528251808303820181529183019283905281518d93918291908401908083835b60208310612bd35780518252601f199092019160209182019101612bb4565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515612c5b576040805160e560020a62461bcd02815260206004820152600e60248201527f696e762073657276657253656564000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160208082018a90528251808303820181529183019283905281518c93918291908401908083835b60208310612ca55780518252601f199092019160209182019101612c86565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515612d2d576040805160e560020a62461bcd02815260206004820152600c60248201527f696e762075736572536565640000000000000000000000000000000000000000604482015290519081900360640190fd5b8a8160000313158015612d405750818b13155b1515612d96576040805160e560020a62461bcd02815260206004820152600b60248201527f696e762062616c616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b600360009054906101000a9004600160a060020a0316600160a060020a03166309eecdd78f8f8f6040518463ffffffff1660e060020a028152600401808460ff1660ff1681526020018381526020018281526020019350505050602060405180830381600087803b158015612e0a57600080fd5b505af1158015612e1e573d6000803e3d6000fd5b505050506040513d6020811015612e3457600080fd5b50511515612e8c576040805160e560020a62461bcd02815260206004820152600760248201527f696e762062657400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000612eaa612e9a8e613531565b612807848f63ffffffff61355c16565b1215612f00576040805160e560020a62461bcd02815260206004820152600e60248201527f746f6f20686967682076616c7565000000000000000000000000000000000000604482015290519081900360640190fd5b6002835460ff166003811115612f1257fe5b148015612f3e57508e63ffffffff168360000160129054906101000a900463ffffffff1663ffffffff16145b15612f5a5760058301889055612f558385876135c4565b61307f565b6001835460ff166003811115612f6c57fe5b1480612fb157506002835460ff166003811115612f8557fe5b148015612fb157508e63ffffffff168360000160129054906101000a900463ffffffff1663ffffffff16105b156129d2578254600390849060ff191660018302179055504283600601819055508e8360000160126101000a81548163ffffffff021916908363ffffffff1602179055508d8360000160116101000a81548160ff021916908360ff1602179055508c83600101819055508b83600201819055508a836003018190555087836005018160001916905550868360040181600019169055508385600160a060020a03167fdbbc392d5391708a9def7f560f8cbdef92e1bb37e5104831e78feda1488b7ab060405160405180910390a35b505050505050505050505050505050565b600080600360009054906101000a9004600160a060020a0316600160a060020a031663fcec617a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156130e657600080fd5b505af11580156130fa573d6000803e3d6000fd5b505050506040513d602081101561311057600080fd5b505185546000918203935061010090046001608060020a0316915081900382121561313c578060000391505b611b438585600086600387613220565b604080516c0100000000000000000000000030818102602080850191909152600160a060020a038a169092026034840152604883018890526068830187905260888084018790528451808503909101815260a8909301938490528251909360009392909182918401908083835b602083106131d85780518252601f1990920191602091820191016131b9565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600954909450611faf9350849250869150600160a060020a031661344f565b855460ff1916865560075461323690600161242e565b600755855461325590849061010090046001608060020a0316836136eb565b8483600160a060020a03167f59ba0efd7d5a5d7e109fb346b50365a8d68661fc7c2c311cd29750707e1b8de5868486604051808463ffffffff1663ffffffff1681526020018381526020018260038111156132ac57fe5b60ff168152602001935050505060405180910390a3505050505050565b6000806040518080613965608191396040805191829003608101822060208084019190915263ffffffff8e168383015260ff8d166060840152608083018c905260a083018b905260c083018a905260e08301899052610100830188905261012080840188905282518085039091018152610140909301918290528251929350909182918401908083835b602083106133725780518252601f199092019160209182019101613353565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206006547f190100000000000000000000000000000000000000000000000000000000000084840152602284015260428084018290528551808503909101815260629093019485905282519097509195509293508392850191508083835b602083106134155780518252601f1990920191602091820191016133f6565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209d9c50505050505050505050505050565b60008060008061345e86613842565b60408051600080825260208083018085528e905260ff8516838501526060830187905260808301869052925195995093975091955060019360a0808401949293601f19830193908390039091019190865af11580156134c1573d6000803e3d6000fd5b5050604051601f190151915050600160a060020a0380821690861614611faf576040805160e560020a62461bcd02815260206004820152600760248201527f696e762073696700000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60007f8000000000000000000000000000000000000000000000000000000000000000821061244c57fe5b60008282018183128015906135715750838112155b80613586575060008312801561358657508381125b151561358e57fe5b9392505050565b60008183038183128015906135aa5750838113155b806135865750600083128015613586575083811361358e57fe5b600380548454600186015460028701549387015460058801546004808a0154604080517f2a0763ce00000000000000000000000000000000000000000000000000000000815271010000000000000000000000000000000000880460ff16938101939093526024830195909552604482019790975260648101929092526101009093046001608060020a0316608482015260a481019290925260c48201939093529151600092600160a060020a0390921691632a0763ce9160e480830192602092919082900301818787803b15801561369c57600080fd5b505af11580156136b0573d6000803e3d6000fd5b505050506040513d60208110156136c657600080fd5b505184549091506113219085908590609060020a900463ffffffff1685600386613220565b600080600080856001608060020a03169350613708600b54613531565b9250600360009054906101000a9004600160a060020a0316600160a060020a03166373ad468a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561375d57600080fd5b505af1158015613771573d6000803e3d6000fd5b505050506040513d602081101561378757600080fd5b505185131561379257fe5b60006137a4858763ffffffff61355c16565b12156137ac57fe5b6000851380156137bb57508483125b156137c4578294505b600c546137d7908663ffffffff61359516565b600c556137ea838663ffffffff61359516565b91506137f582612440565b600b5561381061380b858763ffffffff61355c16565b612440565b600160a060020a038816600090815260126020526040812080548301908190559192501015611faf57611faf876138cb565b6000806000835160411415156138a2576040805160e560020a62461bcd02815260206004820152600760248201527f696e762073696700000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505060208101516040820151604183015160ff1660028110156138c457601b015b9193909250565b600160a060020a0381166000908152601260205260408120549081116138ed57fe5b600160a060020a0382166000818152601260205260408082208290555183156108fc0291849190818181858888f115159350610bf79250505057600160a060020a03919091166000908152601260205260409020555600696e762067616d654964000000000000000000000000000000000000000000004265742875696e74333220726f756e6449642c75696e74382067616d65547970652c75696e74323536206e756d6265722c75696e743235362076616c75652c696e743235362062616c616e63652c6279746573333220736572766572486173682c627974657333322075736572486173682c75696e743235362067616d65496429a165627a7a723058203458c0de667e73f2913d3fc2f76cb916d1ec73476544588e122277b779a3ab850029000000000000000000000000cef260a5fed7a896bbe07b933b3a5c17aec094d8000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000d72f1d4339d7a29b60f6cd27883e41e33361781c00000000000000000000000071be1ace87248f3950bdfc4c89b4b3eed059f6f30000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "000000000000000000000000cef260a5fed7a896bbe07b933b3a5c17aec094d8000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000d72f1d4339d7a29b60f6cd27883e41e33361781c00000000000000000000000071be1ace87248f3950bdfc4c89b4b3eed059f6f30000000000000000000000000000000000000000000000000000000000000001"
}