{
  "address": "0x0f44ef14948994d9cae6a745bd46bf3122e60ac1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "x2",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity 0.5.8;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address payable public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == owner;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address payable newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract x2 is Ownable {\n    using SafeMath for uint256;\n\n    uint public depositAmount = 10000000000000000000; // 10 eth\n    uint public currentPaymentIndex;\n    uint public percent = 150;\n\n    uint public amountRaised;\n    uint public depositorsCount;\n\n\n    struct Deposit {\n        address payable depositor;\n        uint amount;\n        uint payout;\n        uint depositTime;\n        uint paymentTime;\n    }\n\n    // list of all deposites\n    Deposit[] public deposits;\n    // list of user deposits\n    mapping (address => uint[]) public depositors;\n\n    event OnDepositReceived(address investorAddress, uint value);\n    event OnPaymentSent(address investorAddress, uint value);\n\n\n    constructor () public {\n\n    }\n\n\n    function () external payable {\n        makeDeposit();\n    }\n\n    function makeDeposit() internal {\n        require(msg.value == depositAmount);\n\n        Deposit memory newDeposit = Deposit(msg.sender, msg.value, msg.value.mul(percent).div(100), now, 0);\n        deposits.push(newDeposit);\n\n        if (depositors[msg.sender].length == 0) depositorsCount += 1;\n\n        depositors[msg.sender].push(deposits.length - 1);\n\n        amountRaised = amountRaised.add(msg.value);\n\n        emit OnDepositReceived(msg.sender, msg.value);\n\n        owner.transfer(msg.value.mul(10).div(100));\n\n        if (address(this).balance >= deposits[currentPaymentIndex].payout && deposits[currentPaymentIndex].paymentTime == 0) {\n            deposits[currentPaymentIndex].paymentTime = now;\n            deposits[currentPaymentIndex].depositor.send(deposits[currentPaymentIndex].payout);\n            emit OnPaymentSent(deposits[currentPaymentIndex].depositor, deposits[currentPaymentIndex].payout);\n            currentPaymentIndex += 1;\n        }\n    }\n\n\n    function getDepositsCount() public view returns (uint) {\n        return deposits.length;\n    }\n\n    function lastDepositId() public view returns (uint) {\n        return deposits.length - 1;\n    }\n\n    function getDeposit(uint _id) public view returns (address, uint, uint, uint, uint){\n        return (deposits[_id].depositor, deposits[_id].amount, deposits[_id].payout,\n        deposits[_id].depositTime, deposits[_id].paymentTime);\n    }\n\n    function getUserDepositsCount(address depositor) public view returns (uint) {\n        return depositors[depositor].length;\n    }\n\n    // lastIndex from the end of payments lest (0 - last payment), returns: address of depositor, payment time, payment amount\n    function getLastPayments(uint lastIndex) public view returns (address, uint, uint, uint, uint) {\n        uint depositIndex = currentPaymentIndex.sub(lastIndex + 1);\n\n        return (deposits[depositIndex].depositor,\n        deposits[depositIndex].amount,\n        deposits[depositIndex].payout,\n        deposits[depositIndex].depositTime,\n        deposits[depositIndex].paymentTime);\n    }\n\n    function getUserDeposit(address depositor, uint depositNumber) public view returns(uint, uint, uint, uint) {\n        return (deposits[depositors[depositor][depositNumber]].amount,\n        deposits[depositors[depositor][depositNumber]].payout,\n        deposits[depositors[depositor][depositNumber]].depositTime,\n        deposits[depositors[depositor][depositNumber]].paymentTime);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"lastDepositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"depositNumber\",\"type\":\"uint256\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPaymentIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"depositTime\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getUserDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lastIndex\",\"type\":\"uint256\"}],\"name\":\"getLastPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnDepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnPaymentSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6080604052678ac7230489e80000600155609660035534801561002157600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610ce78061007a6000396000f3fe6080604052600436106100f35760003560e01c80637b3e5e7b1161008a578063b02c43d011610059578063b02c43d0146102f3578063d6a133011461031d578063d74f8e9a14610350578063f2fde38b1461037a576100f3565b80637b3e5e7b146102255780638da5cb5b1461023a5780638f32d59b1461026b5780639f9fb96814610294576100f3565b80634c5822e4116100c65780634c5822e414610187578063607110581461019c5780636a22028b146101fb57806370ba111314610210576100f3565b806310f811a8146100fd5780633a561ae214610124578063419759f514610139578063466c01b81461014e575b6100fb6103ad565b005b34801561010957600080fd5b50610112610791565b60408051918252519081900360200190f35b34801561013057600080fd5b5061011261079b565b34801561014557600080fd5b506101126107a1565b34801561015a57600080fd5b506101126004803603604081101561017157600080fd5b506001600160a01b0381351690602001356107a7565b34801561019357600080fd5b506101126107d5565b3480156101a857600080fd5b506101d5600480360360408110156101bf57600080fd5b506001600160a01b0381351690602001356107db565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561020757600080fd5b5061011261094b565b34801561021c57600080fd5b50610112610951565b34801561023157600080fd5b50610112610957565b34801561024657600080fd5b5061024f61095d565b604080516001600160a01b039092168252519081900360200190f35b34801561027757600080fd5b5061028061096c565b604080519115158252519081900360200190f35b3480156102a057600080fd5b506102be600480360360208110156102b757600080fd5b503561097d565b604080516001600160a01b03909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156102ff57600080fd5b506102be6004803603602081101561031657600080fd5b5035610a40565b34801561032957600080fd5b506101126004803603602081101561034057600080fd5b50356001600160a01b0316610a88565b34801561035c57600080fd5b506102be6004803603602081101561037357600080fd5b5035610aa3565b34801561038657600080fd5b506100fb6004803603602081101561039d57600080fd5b50356001600160a01b0316610b82565b60015434146103bb57600080fd5b6103c3610c83565b6040518060a00160405280336001600160a01b0316815260200134815260200161040960646103fd60035434610b9c90919063ffffffff16565b9063ffffffff610bcc16565b815242602080830191909152600060409283018190526006805460018101825590825284517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600590920291820180546001600160a01b0319166001600160a01b03909216919091179055848301517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40820155848401517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4182015560608501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4282015560808501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d439091015533815260079091522054909150610532576005805460010190555b3360009081526007602090815260408220600654815460018101835591845291909220600019909101910155600454610571903463ffffffff610bee16565b6004556040805133815234602082015281517f299ae32315de11eb02d7f92e1275f1a5b1ea92f7bd795e064255f9fbc8d3515f929181900390910190a16000546001600160a01b03166108fc6105d360646103fd34600a63ffffffff610b9c16565b6040518115909202916000818181858888f193505050501580156105fb573d6000803e3d6000fd5b5060066002548154811061060b57fe5b906000526020600020906005020160020154306001600160a01b03163110158015610656575060066002548154811061064057fe5b9060005260206000209060050201600401546000145b1561078e574260066002548154811061066b57fe5b90600052602060002090600502016004018190555060066002548154811061068f57fe5b6000918252602090912060059091020154600254600680546001600160a01b03909316926108fc929081106106c057fe5b9060005260206000209060050201600201549081150290604051600060405180830381858888f19350505050507f7e85df118d8f91d5f8b2f66ea2a976319a26ece892a32f3a7895f6069298e7dd60066002548154811061071d57fe5b906000526020600020906005020160000160009054906101000a90046001600160a01b031660066002548154811061075157fe5b600091825260209182902060026005909202010154604080516001600160a01b039094168452918301528051918290030190a16002805460010190555b50565b6006546000190190565b60055481565b60015481565b600760205281600052604060002081815481106107c057fe5b90600052602060002001600091509150505481565b60065490565b6001600160a01b038216600090815260076020526040812080548291829182916006918790811061080857fe5b90600052602060002001548154811061081d57fe5b906000526020600020906005020160010154600660076000896001600160a01b03166001600160a01b03168152602001908152602001600020878154811061086157fe5b90600052602060002001548154811061087657fe5b9060005260206000209060050201600201546006600760008a6001600160a01b03166001600160a01b0316815260200190815260200160002088815481106108ba57fe5b9060005260206000200154815481106108cf57fe5b9060005260206000209060050201600301546006600760008b6001600160a01b03166001600160a01b03168152602001908152602001600020898154811061091357fe5b90600052602060002001548154811061092857fe5b906000526020600020906005020160040154935093509350935092959194509250565b60025481565b60035481565b60045481565b6000546001600160a01b031681565b6000546001600160a01b0316331490565b60008060008060006006868154811061099257fe5b6000918252602090912060059091020154600680546001600160a01b0390921691889081106109bd57fe5b906000526020600020906005020160010154600688815481106109dc57fe5b906000526020600020906005020160020154600689815481106109fb57fe5b90600052602060002090600502016003015460068a81548110610a1a57fe5b6000918252602090912060046005909202010154939a9299509097509550909350915050565b60068181548110610a4d57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909185565b6001600160a01b031660009081526007602052604090205490565b600080600080600080610ac487600101600254610c0090919063ffffffff16565b905060068181548110610ad357fe5b6000918252602090912060059091020154600680546001600160a01b039092169183908110610afe57fe5b90600052602060002090600502016001015460068381548110610b1d57fe5b90600052602060002090600502016002015460068481548110610b3c57fe5b90600052602060002090600502016003015460068581548110610b5b57fe5b6000918252602090912060046005909202010154939b929a50909850965090945092505050565b610b8a61096c565b610b9357600080fd5b61078e81610c15565b600082610bab57506000610bc6565b82820282848281610bb857fe5b0414610bc357600080fd5b90505b92915050565b6000808211610bda57600080fd5b6000828481610be557fe5b04949350505050565b600082820183811015610bc357600080fd5b600082821115610c0f57600080fd5b50900390565b6001600160a01b038116610c2857600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152509056fea165627a7a723058206f1397cb929d0032a78c095841ca5e7a32b08e1b4071386dfd464ba4be05c4a70029"
}