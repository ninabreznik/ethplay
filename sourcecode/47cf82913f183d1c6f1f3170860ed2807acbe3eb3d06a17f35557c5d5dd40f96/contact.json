{
  "address": "0xcffb306e7ec0b3af874dd49c202658caefca7904",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EstateRegistry",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-zos/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: openzeppelin-zos/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-zos/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-zos/contracts/introspection/ERC165Support.sol\n\n/**\n * @title ERC165Support\n * @dev Implements ERC165 returning true for ERC165 interface identifier\n */\ncontract ERC165Support is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool) \n  {\n    return _supportsInterface(_interfaceId);\n  }\n\n  function _supportsInterface(bytes4 _interfaceId)\n    internal\n    view\n    returns (bool) \n  {\n    return _interfaceId == InterfaceId_ERC165;\n  }\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is ERC165Support, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  function _supportsInterface(bytes4 _interfaceId)\n    internal\n    view\n    returns (bool)\n  {\n    return super._supportsInterface(_interfaceId) || \n      _interfaceId == InterfaceId_ERC721 || _interfaceId == InterfaceId_ERC721Exists;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: zos-lib/contracts/migrations/Migratable.sol\n\n/**\n * @title Migratable\n * Helper contract to support intialization and migration schemes between\n * different implementations of a contract in the context of upgradeability.\n * To use it, replace the constructor with a function that has the\n * `isInitializer` modifier starting with `\"0\"` as `migrationId`.\n * When you want to apply some migration code during an upgrade, increase\n * the `migrationId`. Or, if the migration code must be applied only after\n * another migration has been already applied, use the `isMigration` modifier.\n * This helper supports multiple inheritance.\n * WARNING: It is the developer's responsibility to ensure that migrations are\n * applied in a correct order, or that they are run at all.\n * See `Initializable` for a simpler version.\n */\ncontract Migratable {\n  /**\n   * @dev Emitted when the contract applies a migration.\n   * @param contractName Name of the Contract.\n   * @param migrationId Identifier of the migration applied.\n   */\n  event Migrated(string contractName, string migrationId);\n\n  /**\n   * @dev Mapping of the already applied migrations.\n   * (contractName => (migrationId => bool))\n   */\n  mapping (string => mapping (string => bool)) internal migrated;\n\n  /**\n   * @dev Internal migration id used to specify that a contract has already been initialized.\n   */\n  string constant private INITIALIZED_ID = \"initialized\";\n\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   * @param contractName Name of the contract.\n   * @param migrationId Identifier of the migration.\n   */\n  modifier isInitializer(string contractName, string migrationId) {\n    validateMigrationIsPending(contractName, INITIALIZED_ID);\n    validateMigrationIsPending(contractName, migrationId);\n    _;\n    emit Migrated(contractName, migrationId);\n    migrated[contractName][migrationId] = true;\n    migrated[contractName][INITIALIZED_ID] = true;\n  }\n\n  /**\n   * @dev Modifier to use in the migration of a contract.\n   * @param contractName Name of the contract.\n   * @param requiredMigrationId Identifier of the previous migration, required\n   * to apply new one.\n   * @param newMigrationId Identifier of the new migration to be applied.\n   */\n  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {\n    require(isMigrated(contractName, requiredMigrationId), \"Prerequisite migration ID has not been run yet\");\n    validateMigrationIsPending(contractName, newMigrationId);\n    _;\n    emit Migrated(contractName, newMigrationId);\n    migrated[contractName][newMigrationId] = true;\n  }\n\n  /**\n   * @dev Returns true if the contract migration was applied.\n   * @param contractName Name of the contract.\n   * @param migrationId Identifier of the migration.\n   * @return true if the contract migration was applied, false otherwise.\n   */\n  function isMigrated(string contractName, string migrationId) public view returns(bool) {\n    return migrated[contractName][migrationId];\n  }\n\n  /**\n   * @dev Initializer that marks the contract as initialized.\n   * It is important to run this if you had deployed a previous version of a Migratable contract.\n   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.\n   */\n  function initialize() isInitializer(\"Migratable\", \"1.2.1\") public {\n  }\n\n  /**\n   * @dev Reverts if the requested migration was already executed.\n   * @param contractName Name of the contract.\n   * @param migrationId Identifier of the migration.\n   */\n  function validateMigrationIsPending(string contractName, string migrationId) private view {\n    require(!isMigrated(contractName, migrationId), \"Requested target migration ID has already been run\");\n  }\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is Migratable, ERC165Support, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  function initialize(string _name, string _symbol) public isInitializer(\"ERC721Token\", \"1.9.0\") {\n    name_ = _name;\n    symbol_ = _symbol;\n  }\n\n  function _supportsInterface(bytes4 _interfaceId)\n    internal\n    view\n    returns (bool)\n  {\n    return super._supportsInterface(_interfaceId) || \n      _interfaceId == InterfaceId_ERC721Enumerable || _interfaceId == InterfaceId_ERC721Metadata;\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: openzeppelin-zos/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable is Migratable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function initialize(address _sender) public isInitializer(\"Ownable\", \"1.9.0\") {\n    owner = _sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/estate/IEstateRegistry.sol\n\ncontract IEstateRegistry {\n  function mint(address to, string metadata) external returns (uint256);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner); // from ERC721\n\n  // Events\n\n  event CreateEstate(\n    address indexed _owner,\n    uint256 indexed _estateId,\n    string _data\n  );\n\n  event AddLand(\n    uint256 indexed _estateId,\n    uint256 indexed _landId\n  );\n\n  event RemoveLand(\n    uint256 indexed _estateId,\n    uint256 indexed _landId,\n    address indexed _destinatary\n  );\n\n  event Update(\n    uint256 indexed _assetId,\n    address indexed _holder,\n    address indexed _operator,\n    string _data\n  );\n\n  event UpdateOperator(\n    uint256 indexed _estateId,\n    address indexed _operator\n  );\n\n  event UpdateManager(\n    address indexed _owner,\n    address indexed _operator,\n    address indexed _caller,\n    bool _approved\n  );\n\n  event SetLANDRegistry(\n    address indexed _registry\n  );\n}\n\n// File: contracts/estate/EstateStorage.sol\n\ncontract LANDRegistry {\n  function decodeTokenId(uint value) external pure returns (int, int);\n  function updateLandData(int x, int y, string data) external;\n  function setUpdateOperator(uint256 assetId, address operator) external;\n  function ping() public;\n  function ownerOf(uint256 tokenId) public returns (address);\n  function safeTransferFrom(address, address, uint256) public;\n  function updateOperator(uint256 landId) public returns (address);\n}\n\n\ncontract EstateStorage {\n  bytes4 internal constant InterfaceId_GetMetadata = bytes4(keccak256(\"getMetadata(uint256)\"));\n  bytes4 internal constant InterfaceId_VerifyFingerprint = bytes4(\n    keccak256(\"verifyFingerprint(uint256,bytes)\")\n  );\n\n  LANDRegistry public registry;\n\n  // From Estate to list of owned LAND ids (LANDs)\n  mapping(uint256 => uint256[]) public estateLandIds;\n\n  // From LAND id (LAND) to its owner Estate id\n  mapping(uint256 => uint256) public landIdEstate;\n\n  // From Estate id to mapping of LAND id to index on the array above (estateLandIds)\n  mapping(uint256 => mapping(uint256 => uint256)) public estateLandIndex;\n\n  // Metadata of the Estate\n  mapping(uint256 => string) internal estateData;\n\n  // Operator of the Estate\n  mapping (uint256 => address) public updateOperator;\n\n  // From account to mapping of operator to bool whether is allowed to update content or not\n  mapping(address => mapping(address => bool)) public updateManager;\n\n}\n\n// File: contracts/estate/EstateRegistry.sol\n\n/**\n * @title ERC721 registry of every minted Estate and their owned LANDs\n * @dev Usings we are inheriting and depending on:\n * From ERC721Token:\n *   - using SafeMath for uint256;\n *   - using AddressUtils for address;\n */\n// solium-disable-next-line max-len\ncontract EstateRegistry is Migratable, IEstateRegistry, ERC721Token, ERC721Receiver, Ownable, EstateStorage {\n  modifier canTransfer(uint256 estateId) {\n    require(isApprovedOrOwner(msg.sender, estateId), \"Only owner or operator can transfer\");\n    _;\n  }\n\n  modifier onlyRegistry() {\n    require(msg.sender == address(registry), \"Only the registry can make this operation\");\n    _;\n  }\n\n  modifier onlyUpdateAuthorized(uint256 estateId) {\n    require(_isUpdateAuthorized(msg.sender, estateId), \"Unauthorized user\");\n    _;\n  }\n\n  modifier onlyLandUpdateAuthorized(uint256 estateId, uint256 landId) {\n    require(_isLandUpdateAuthorized(msg.sender, estateId, landId), \"unauthorized user\");\n    _;\n  }\n\n  modifier canSetUpdateOperator(uint256 estateId) {\n    address owner = ownerOf(estateId);\n    require(\n      isApprovedOrOwner(msg.sender, estateId) || updateManager[owner][msg.sender], \n      \"unauthorized user\"\n    );\n    _;\n  }\n\n  /**\n   * @dev Mint a new Estate with some metadata\n   * @param to The address that will own the minted token\n   * @param metadata Set an initial metadata\n   * @return An uint256 representing the new token id\n   */\n  function mint(address to, string metadata) external onlyRegistry returns (uint256) {\n    return _mintEstate(to, metadata);\n  }\n\n  /**\n   * @notice Transfer a LAND owned by an Estate to a new owner\n   * @param estateId Current owner of the token\n   * @param landId LAND to be transfered\n   * @param destinatary New owner\n   */\n  function transferLand(\n    uint256 estateId,\n    uint256 landId,\n    address destinatary\n  )\n    external\n    canTransfer(estateId)\n  {\n    return _transferLand(estateId, landId, destinatary);\n  }\n\n  /**\n   * @notice Transfer many tokens owned by an Estate to a new owner\n   * @param estateId Current owner of the token\n   * @param landIds LANDs to be transfered\n   * @param destinatary New owner\n   */\n  function transferManyLands(\n    uint256 estateId,\n    uint256[] landIds,\n    address destinatary\n  )\n    external\n    canTransfer(estateId)\n  {\n    uint length = landIds.length;\n    for (uint i = 0; i < length; i++) {\n      _transferLand(estateId, landIds[i], destinatary);\n    }\n  }\n\n  /**\n   * @notice Get the Estate id for a given LAND id\n   * @dev This information also lives on estateLandIds,\n   *   but it being a mapping you need to know the Estate id beforehand.\n   * @param landId LAND to search\n   * @return The corresponding Estate id\n   */\n  function getLandEstateId(uint256 landId) external view returns (uint256) {\n    return landIdEstate[landId];\n  }\n\n  function setLANDRegistry(address _registry) external onlyOwner {\n    require(_registry.isContract(), \"The LAND registry address should be a contract\");\n    require(_registry != 0, \"The LAND registry address should be valid\");\n    registry = LANDRegistry(_registry);\n    emit SetLANDRegistry(registry);\n  }\n\n  function ping() external {\n    registry.ping();\n  }\n\n  /**\n   * @notice Return the amount of tokens for a given Estate\n   * @param estateId Estate id to search\n   * @return Tokens length\n   */\n  function getEstateSize(uint256 estateId) external view returns (uint256) {\n    return estateLandIds[estateId].length;\n  }\n\n  /**\n   * @notice Update the metadata of an Estate\n   * @dev Reverts if the Estate does not exist or the user is not authorized\n   * @param estateId Estate id to update\n   * @param metadata string metadata\n   */\n  function updateMetadata(\n    uint256 estateId,\n    string metadata\n  )\n    external\n    onlyUpdateAuthorized(estateId)\n  {\n    _updateMetadata(estateId, metadata);\n\n    emit Update(\n      estateId,\n      ownerOf(estateId),\n      msg.sender,\n      metadata\n    );\n  }\n\n  function getMetadata(uint256 estateId) external view returns (string) {\n    return estateData[estateId];\n  }\n\n  function isUpdateAuthorized(address operator, uint256 estateId) external view returns (bool) {\n    return _isUpdateAuthorized(operator, estateId);\n  }\n\n  /**\n  * @dev Set an updateManager for an account\n  * @param _owner - address of the account to set the updateManager\n  * @param _operator - address of the account to be set as the updateManager\n  * @param _approved - bool whether the address will be approved or not\n  */\n  function setUpdateManager(address _owner, address _operator, bool _approved) external {\n    require(_operator != msg.sender, \"The operator should be different from owner\");\n    require(\n      _owner == msg.sender\n      || operatorApprovals[_owner][msg.sender],\n      \"Unauthorized user\"\n    );\n\n    updateManager[_owner][_operator] = _approved;\n\n    emit UpdateManager(\n      _owner, \n      _operator,\n      msg.sender,\n      _approved\n    );\n  } \n\n  function setUpdateOperator(uint256 estateId, address operator) public canSetUpdateOperator(estateId) {\n    updateOperator[estateId] = operator;\n    emit UpdateOperator(estateId, operator);\n  }  \n\n  function setLandUpdateOperator(\n    uint256 estateId, \n    uint256 landId, \n    address operator\n  ) \n    public \n    canSetUpdateOperator(estateId)\n  {\n    require(landIdEstate[landId] == estateId, \"The LAND is not part of the Estate\");\n    registry.setUpdateOperator(landId, operator);\n  }\n\n  function initialize(\n    string _name,\n    string _symbol,\n    address _registry\n  )\n    public\n    isInitializer(\"EstateRegistry\", \"0.0.2\")\n  {\n    require(_registry != 0, \"The registry should be a valid address\");\n\n    ERC721Token.initialize(_name, _symbol);\n    Ownable.initialize(msg.sender);\n    registry = LANDRegistry(_registry);\n  }\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    onlyRegistry\n    returns (bytes4)\n  {\n    uint256 estateId = _bytesToUint(_data);\n    _pushLandId(estateId, _tokenId);\n    return ERC721_RECEIVED;\n  }\n\n  /**\n   * @dev Creates a checksum of the contents of the Estate\n   * @param estateId the estateId to be verified\n   */\n  function getFingerprint(uint256 estateId)\n    public\n    view\n    returns (bytes32 result)\n  {\n    result = keccak256(abi.encodePacked(\"estateId\", estateId));\n\n    uint256 length = estateLandIds[estateId].length;\n    for (uint i = 0; i < length; i++) {\n      result ^= keccak256(abi.encodePacked(estateLandIds[estateId][i]));\n    }\n    return result;\n  }\n\n  /**\n   * @dev Verifies a checksum of the contents of the Estate\n   * @param estateId the estateid to be verified\n   * @param fingerprint the user provided identification of the Estate contents\n   */\n  function verifyFingerprint(uint256 estateId, bytes fingerprint) public view returns (bool) {\n    return getFingerprint(estateId) == _bytesToBytes32(fingerprint);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of multiple Estate IDs to another address\n   * @dev Delegates to safeTransferFrom for each transfer\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param estateIds uint256 array of IDs to be transferred\n  */\n  function safeTransferManyFrom(address from, address to, uint256[] estateIds) public {\n    safeTransferManyFrom(\n      from,\n      to,\n      estateIds,\n      \"\"\n    );\n  }\n\n  /**\n   * @dev Safely transfers the ownership of multiple Estate IDs to another address\n   * @dev Delegates to safeTransferFrom for each transfer\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param estateIds uint256 array of IDs to be transferred\n   * @param data bytes data to send along with a safe transfer check\n  */\n  function safeTransferManyFrom(\n    address from,\n    address to,\n    uint256[] estateIds,\n    bytes data\n  )\n    public\n  {\n    for (uint i = 0; i < estateIds.length; i++) {\n      safeTransferFrom(\n        from,\n        to,\n        estateIds[i],\n        data\n      );\n    }\n  }\n\n  /**\n   * @dev update LAND data owned by an Estate\n   * @param estateId Estate\n   * @param landId LAND to be updated\n   * @param data string metadata\n   */\n  function updateLandData(uint256 estateId, uint256 landId, string data) public {\n    _updateLandData(estateId, landId, data);\n  }\n\n  /**\n   * @dev update LANDs data owned by an Estate\n   * @param estateId Estate id\n   * @param landIds LANDs to be updated\n   * @param data string metadata\n   */\n  function updateManyLandData(uint256 estateId, uint256[] landIds, string data) public {\n    uint length = landIds.length;\n    for (uint i = 0; i < length; i++) {\n      _updateLandData(estateId, landIds[i], data);\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) \n  public \n  {\n    updateOperator[_tokenId] = address(0);\n    super.transferFrom(_from, _to, _tokenId);\n  }\n\n  // check the supported interfaces via ERC165\n  function _supportsInterface(bytes4 _interfaceId) internal view returns (bool) {\n    // solium-disable-next-line operator-whitespace\n    return super._supportsInterface(_interfaceId)\n      || _interfaceId == InterfaceId_GetMetadata\n      || _interfaceId == InterfaceId_VerifyFingerprint;\n  }\n\n  /**\n   * @dev Internal function to mint a new Estate with some metadata\n   * @param to The address that will own the minted token\n   * @param metadata Set an initial metadata\n   * @return An uint256 representing the new token id\n   */\n  function _mintEstate(address to, string metadata) internal returns (uint256) {\n    require(to != address(0), \"You can not mint to an empty address\");\n    uint256 estateId = _getNewEstateId();\n    _mint(to, estateId);\n    _updateMetadata(estateId, metadata);\n    emit CreateEstate(to, estateId, metadata);\n    return estateId;\n  }\n\n  /**\n   * @dev Internal function to update an Estate metadata\n   * @dev Does not require the Estate to exist, for a public interface use `updateMetadata`\n   * @param estateId Estate id to update\n   * @param metadata string metadata\n   */\n  function _updateMetadata(uint256 estateId, string metadata) internal {\n    estateData[estateId] = metadata;\n  }\n\n  /**\n   * @notice Return a new unique id\n   * @dev It uses totalSupply to determine the next id\n   * @return uint256 Representing the new Estate id\n   */\n  function _getNewEstateId() internal view returns (uint256) {\n    return totalSupply().add(1);\n  }\n\n  /**\n   * @dev Appends a new LAND id to an Estate updating all related storage\n   * @param estateId Estate where the LAND should go\n   * @param landId Transfered LAND\n   */\n  function _pushLandId(uint256 estateId, uint256 landId) internal {\n    require(exists(estateId), \"The Estate id should exist\");\n    require(landIdEstate[landId] == 0, \"The LAND is already owned by an Estate\");\n    require(registry.ownerOf(landId) == address(this), \"The EstateRegistry cannot manage the LAND\");\n\n    estateLandIds[estateId].push(landId);\n\n    landIdEstate[landId] = estateId;\n\n    estateLandIndex[estateId][landId] = estateLandIds[estateId].length;\n\n    emit AddLand(estateId, landId);\n  }\n\n  /**\n   * @dev Removes a LAND from an Estate and transfers it to a new owner\n   * @param estateId Current owner of the LAND\n   * @param landId LAND to be transfered\n   * @param destinatary New owner\n   */\n  function _transferLand(\n    uint256 estateId,\n    uint256 landId,\n    address destinatary\n  )\n    internal\n  {\n    require(destinatary != address(0), \"You can not transfer LAND to an empty address\");\n\n    uint256[] storage landIds = estateLandIds[estateId];\n    mapping(uint256 => uint256) landIndex = estateLandIndex[estateId];\n\n    /**\n     * Using 1-based indexing to be able to make this check\n     */\n    require(landIndex[landId] != 0, \"The LAND is not part of the Estate\");\n\n    uint lastIndexInArray = landIds.length.sub(1);\n\n    /**\n     * Get the landIndex of this token in the landIds list\n     */\n    uint indexInArray = landIndex[landId].sub(1);\n\n    /**\n     * Get the landId at the end of the landIds list\n     */\n    uint tempTokenId = landIds[lastIndexInArray];\n\n    /**\n     * Store the last token in the position previously occupied by landId\n     */\n    landIndex[tempTokenId] = indexInArray.add(1);\n    landIds[indexInArray] = tempTokenId;\n\n    /**\n     * Delete the landIds[last element]\n     */\n    delete landIds[lastIndexInArray];\n    landIds.length = lastIndexInArray;\n\n    /**\n     * Drop this landId from both the landIndex and landId list\n     */\n    landIndex[landId] = 0;\n\n    /**\n     * Drop this landId Estate\n     */\n    landIdEstate[landId] = 0;\n\n    registry.safeTransferFrom(this, destinatary, landId);\n\n    emit RemoveLand(estateId, landId, destinatary);\n  }\n\n  function _isUpdateAuthorized(address operator, uint256 estateId) internal view returns (bool) {\n    address owner = ownerOf(estateId);\n\n    return isApprovedOrOwner(operator, estateId)\n      || updateOperator[estateId] == operator\n      || updateManager[owner][operator];\n  }\n\n  function _isLandUpdateAuthorized(\n    address operator, \n    uint256 estateId, \n    uint256 landId\n  ) \n    internal returns (bool) \n  {\n    return _isUpdateAuthorized(operator, estateId) || registry.updateOperator(landId) == operator;\n  }\n\n  function _bytesToUint(bytes b) internal pure returns (uint256) {\n    return uint256(_bytesToBytes32(b));\n  }\n\n  function _bytesToBytes32(bytes b) internal pure returns (bytes32) {\n    bytes32 out;\n\n    for (uint i = 0; i < b.length; i++) {\n      out |= bytes32(b[i] & 0xFF) >> i.mul(8);\n    }\n\n    return out;\n  }\n\n  function _updateLandData(\n    uint256 estateId,\n    uint256 landId,\n    string data\n  )\n    internal\n    onlyLandUpdateAuthorized(estateId, landId)\n  {\n    require(landIdEstate[landId] == estateId, \"The LAND is not part of the Estate\");\n    int x;\n    int y;\n    (x, y) = registry.decodeTokenId(landId);\n    registry.updateLandData(x, y, data);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506144a3806100206000396000f30060806040526004361061025b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461026057806306fdde0314610296578063077f224a1461032057806307ecec3e146103c4578063081812fc146103eb578063095ea7b31461041f5780630a354fce14610443578063150b7a021461046d578063159a6475146104f957806318160ddd146105115780631d11016a1461052657806323b872dd1461054d57806328b34ef6146105775780632f745c59146105d75780633970bfd3146105fb5780634080704914610616578063426a0af31461064657806342842e0e146106de5780634cd88b76146107085780634f558e791461079f5780634f6ccce7146107b7578063535a920c146107cf57806353c8388e146107f05780635c36b186146108145780636352211e1461082957806365937ab91461084157806370a082311461086557806373b913fa146108865780637b103999146108f15780638129fc1c146109065780638da5cb5b1461091b5780638f9f4b631461093057806395d89b411461098e5780639d40b850146109a35780639f813b1b146109bb578063a22cb465146109d6578063a506e5dc146109fc578063a574cea414610a23578063b0b02c6014610a3b578063b88d4fde14610a5f578063bb96913214610ace578063c0bac1a814610ae6578063c4d66de814610b7d578063c87b56dd14610b9e578063d0def52114610bb6578063d93eeb5c14610be3578063e985e9c514610c8c578063ef1db76214610cb3578063f2fde38b14610cdf578063f4a4344814610d00575b600080fd5b34801561026c57600080fd5b50610282600160e060020a031960043516610d18565b604080519115158252519081900360200190f35b3480156102a257600080fd5b506102ab610d29565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e55781810151838201526020016102cd565b50505050905090810190601f1680156103125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103c294369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050509235600160a060020a03169350610dc092505050565b005b3480156103d057600080fd5b50610282600160a060020a03600435811690602435166111c7565b3480156103f757600080fd5b506104036004356111e7565b60408051600160a060020a039092168252519081900360200190f35b34801561042b57600080fd5b506103c2600160a060020a0360043516602435611202565b34801561044f57600080fd5b5061045b6004356112ab565b60408051918252519081900360200190f35b34801561047957600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526104dc94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506112bd9650505050505050565b60408051600160e060020a03199092168252519081900360200190f35b34801561050557600080fd5b5061045b60043561138c565b34801561051d57600080fd5b5061045b611506565b34801561053257600080fd5b506103c2600435602435600160a060020a036044351661150c565b34801561055957600080fd5b506103c2600160a060020a03600435811690602435166044356116c0565b34801561058357600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103c29482359460248035953695946064949201919081908401838280828437509497506116ec9650505050505050565b3480156105e357600080fd5b5061045b600160a060020a03600435166024356116f7565b34801561060757600080fd5b5061045b600435602435611744565b34801561062257600080fd5b506103c2600480359060248035908101910135600160a060020a0360443516611774565b34801561065257600080fd5b506040805160206004602480358281013584810280870186019097528086526103c29684359636966044959194909101929182918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506118169650505050505050565b3480156106ea57600080fd5b506103c2600160a060020a0360043581169060243516604435611854565b34801561071457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103c294369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506118d49650505050505050565b3480156107ab57600080fd5b50610282600435611c4b565b3480156107c357600080fd5b5061045b600435611c68565b3480156107db57600080fd5b506103c2600160a060020a0360043516611c9d565b3480156107fc57600080fd5b506103c2600480359060248035908101910135611e18565b34801561082057600080fd5b506103c2611f1d565b34801561083557600080fd5b50610403600435611f9d565b34801561084d57600080fd5b50610282600160a060020a0360043516602435611fc1565b34801561087157600080fd5b5061045b600160a060020a0360043516611fd4565b34801561089257600080fd5b5060408051602060046044358181013583810280860185019096528085526103c2958335600160a060020a0390811696602480359092169636969560649592949301928291850190849080828437509497506120079650505050505050565b3480156108fd57600080fd5b50610403612023565b34801561091257600080fd5b506103c2612032565b34801561092757600080fd5b5061040361237f565b34801561093c57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028295833595369560449491939091019190819084018382808284375094975061238e9650505050505050565b34801561099a57600080fd5b506102ab6123aa565b3480156109af57600080fd5b5061040360043561240b565b3480156109c757600080fd5b5061045b600435602435612426565b3480156109e257600080fd5b506103c2600160a060020a03600435166024351515612443565b348015610a0857600080fd5b506103c2600435602435600160a060020a03604435166124c7565b348015610a2f57600080fd5b506102ab600435612530565b348015610a4757600080fd5b506103c2600435600160a060020a03602435166125d1565b348015610a6b57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526103c294600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506126c89650505050505050565b348015610ada57600080fd5b5061045b600435612748565b348015610af257600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028294369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061275a9650505050505050565b348015610b8957600080fd5b506103c2600160a060020a0360043516612821565b348015610baa57600080fd5b506102ab600435612b8d565b348015610bc257600080fd5b5061045b60048035600160a060020a03169060248035908101910135612c0b565b348015610bef57600080fd5b5060408051602060046044358181013583810280860185019096528085526103c2958335600160a060020a03908116966024803590921696369695606495929493019282918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612cd89650505050505050565b348015610c9857600080fd5b50610282600160a060020a0360043581169060243516612d0f565b348015610cbf57600080fd5b506103c2600160a060020a03600435811690602435166044351515612d3d565b348015610ceb57600080fd5b506103c2600160a060020a0360043516612ec5565b348015610d0c57600080fd5b5061045b600435612f4d565b6000610d2382612f5f565b92915050565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610db55780601f10610d8a57610100808354040283529160200191610db5565b820191906000526020600020905b815481529060010190602001808311610d9857829003601f168201915b505050505090505b90565b6040805190810160405280600e81526020017f45737461746552656769737472790000000000000000000000000000000000008152506040805190810160405280600581526020017f302e302e32000000000000000000000000000000000000000000000000000000815250610e59826040805190810160405280600b8152602001600080516020614438833981519152815250613000565b610e638282613000565b600160a060020a0383161515610ee9576040805160e560020a62461bcd02815260206004820152602660248201527f5468652072656769737472792073686f756c6420626520612076616c6964206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610ef385856118d4565b610efc33612821565b600d8054600160a060020a031916600160a060020a0385161790556040805181815283519181019190915282516000805160206144188339815191529184918491908190602080830191606084019187019080838360005b83811015610f6c578181015183820152602001610f54565b50505050905090810190601f168015610f995780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610fcc578181015183820152602001610fb4565b50505050905090810190601f168015610ff95780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160016000836040518082805190602001908083835b6020831061103c5780518252601f19909201916020918201910161101d565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842086519094879450925082918401908083835b602083106110985780518252601f199092019160209182019101611079565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420805460ff19169515159590951790945550508351600192600092869290918291908401908083835b6020831061110a5780518252601f1990920191602091820191016110eb565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208582018252600b80875260008051602061443883398151915293870193845291519095945092508291908083835b602083106111835780518252601f199092019160209182019101611164565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805460ff19169315159390931790925550505050505050565b601360209081526000928352604080842090915290825290205460ff1681565b600090815260026020526040902054600160a060020a031690565b600061120d82611f9d565b9050600160a060020a03838116908216141561122857600080fd5b33600160a060020a038216148061124457506112448133612d0f565b151561124f57600080fd5b6000828152600260205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600f6020526000908152604090205481565b600d546000908190600160a060020a0316331461134a576040805160e560020a62461bcd02815260206004820152602960248201527f4f6e6c79207468652072656769737472792063616e206d616b6520746869732060448201527f6f7065726174696f6e0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61135383613089565b905061135f8185613094565b7f150b7a020000000000000000000000000000000000000000000000000000000091505b50949350505050565b60008060008360405160200180807f65737461746549640000000000000000000000000000000000000000000000008152506008018281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106114085780518252601f1990920191602091820191016113e9565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008a8152600e909252928120549297509195509093505050505b818110156114ff576000848152600e6020526040902080548290811061146d57fe5b9060005260206000200154604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106114c65780518252601f1990920191602091820191016114a7565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120959095189450505060010161144b565b5050919050565b60095490565b82600061151882611f9d565b90506115243383613308565b806115525750600160a060020a038116600090815260136020908152604080832033845290915290205460ff165b15156115a8576040805160e560020a62461bcd02815260206004820152601160248201527f756e617574686f72697a65642075736572000000000000000000000000000000604482015290519081900360640190fd5b6000848152600f60205260409020548514611633576040805160e560020a62461bcd02815260206004820152602260248201527f546865204c414e44206973206e6f742070617274206f6620746865204573746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600d54604080517fb0b02c6000000000000000000000000000000000000000000000000000000000815260048101879052600160a060020a0386811660248301529151919092169163b0b02c6091604480830192600092919082900301818387803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b505050505050505050565b60008181526012602052604090208054600160a060020a03191690556116e783838361335f565b505050565b6116e783838361344c565b600061170283611fd4565b821061170d57600080fd5b600160a060020a038316600090815260076020526040902080548390811061173157fe5b9060005260206000200154905092915050565b600e6020528160005260406000208181548110151561175f57fe5b90600052602060002001600091509150505481565b600080856117823382613308565b15156117d5576040805160e560020a62461bcd0281526020600482015260236024820152600080516020614458833981519152604482015260e960020a623332b902606482015290519081900360840190fd5b849250600091505b8282101561180d57611802878787858181106117f557fe5b90506020020135866136d5565b6001909101906117dd565b50505050505050565b815160005b8181101561184d5761184585858381518110151561183557fe5b906020019060200201518561344c565b60010161181b565b5050505050565b8061185f3382613308565b15156118b2576040805160e560020a62461bcd0281526020600482015260236024820152600080516020614458833981519152604482015260e960020a623332b902606482015290519081900360840190fd5b6118ce84848460206040519081016040528060008152506126c8565b50505050565b6040805190810160405280600b81526020017f455243373231546f6b656e0000000000000000000000000000000000000000008152506040805190810160405280600581526020017f312e392e3000000000000000000000000000000000000000000000000000000081525061196d826040805190810160405280600b8152602001600080516020614438833981519152815250613000565b6119778282613000565b835161198a90600590602087019061435f565b50825161199e90600690602086019061435f565b506000805160206144188339815191528282604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156119f15781810151838201526020016119d9565b50505050905090810190601f168015611a1e5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611a51578181015183820152602001611a39565b50505050905090810190601f168015611a7e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160016000836040518082805190602001908083835b60208310611ac15780518252601f199092019160209182019101611aa2565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842086519094879450925082918401908083835b60208310611b1d5780518252601f199092019160209182019101611afe565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420805460ff19169515159590951790945550508351600192600092869290918291908401908083835b60208310611b8f5780518252601f199092019160209182019101611b70565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208582018252600b80875260008051602061443883398151915293870193845291519095945092508291908083835b60208310611c085780518252601f199092019160209182019101611be9565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805460ff191693151593909317909255505050505050565b600090815260016020526040902054600160a060020a0316151590565b6000611c72611506565b8210611c7d57600080fd5b6009805483908110611c8b57fe5b90600052602060002001549050919050565b600c54600160a060020a03163314611cb457600080fd5b611cc681600160a060020a031661399d565b1515611d42576040805160e560020a62461bcd02815260206004820152602e60248201527f546865204c414e4420726567697374727920616464726573732073686f756c6460448201527f206265206120636f6e7472616374000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0381161515611dc8576040805160e560020a62461bcd02815260206004820152602960248201527f546865204c414e4420726567697374727920616464726573732073686f756c6460448201527f2062652076616c69640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600d8054600160a060020a031916600160a060020a0383811691909117918290556040519116907f2e88792af6f2248ed486ffffc86edf9bc197596990f7b406d5f867a1dd930ba590600090a250565b82611e2333826139a5565b1515611e79576040805160e560020a62461bcd02815260206004820152601160248201527f556e617574686f72697a65642075736572000000000000000000000000000000604482015290519081900360640190fd5b611eb38484848080601f01602080910402602001604051908101604052809392919081815260200183838082843750613a19945050505050565b33611ebd85611f9d565b600160a060020a0316857f47c705b9219229ad762fca605f08fb024a3415d0ae78af5d319820c72e51041486866040518080602001828103825284848281815260200192508082843760405192018290039550909350505050a450505050565b600d60009054906101000a9004600160a060020a0316600160a060020a0316635c36b1866040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015611f8957600080fd5b505af11580156118ce573d6000803e3d6000fd5b600081815260016020526040812054600160a060020a0316801515610d2357600080fd5b6000611fcd83836139a5565b9392505050565b6000600160a060020a0382161515611feb57600080fd5b50600160a060020a031660009081526003602052604090205490565b6116e78383836020604051908101604052806000815250612cd8565b600d54600160a060020a031681565b6040805190810160405280600a81526020017f4d696772617461626c65000000000000000000000000000000000000000000008152506040805190810160405280600581526020017f312e322e310000000000000000000000000000000000000000000000000000008152506120cb826040805190810160405280600b8152602001600080516020614438833981519152815250613000565b6120d58282613000565b6000805160206144188339815191528282604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561212757818101518382015260200161210f565b50505050905090810190601f1680156121545780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561218757818101518382015260200161216f565b50505050905090810190601f1680156121b45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160016000836040518082805190602001908083835b602083106121f75780518252601f1990920191602091820191016121d8565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842086519094879450925082918401908083835b602083106122535780518252601f199092019160209182019101612234565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420805460ff19169515159590951790945550508351600192600092869290918291908401908083835b602083106122c55780518252601f1990920191602091820191016122a6565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208582018252600b80875260008051602061443883398151915293870193845291519095945092508291908083835b6020831061233e5780518252601f19909201916020918201910161231f565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805460ff19169315159390931790925550505050565b600c54600160a060020a031681565b600061239982613a38565b6123a28461138c565b149392505050565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610db55780601f10610d8a57610100808354040283529160200191610db5565b601260205260009081526040902054600160a060020a031681565b601060209081526000928352604080842090915290825290205481565b600160a060020a03821633141561245957600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b826124d23382613308565b1515612525576040805160e560020a62461bcd0281526020600482015260236024820152600080516020614458833981519152604482015260e960020a623332b902606482015290519081900360840190fd5b6118ce8484846136d5565b60008181526011602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156125c55780601f1061259a576101008083540402835291602001916125c5565b820191906000526020600020905b8154815290600101906020018083116125a857829003601f168201915b50505050509050919050565b8160006125dd82611f9d565b90506125e93383613308565b806126175750600160a060020a038116600090815260136020908152604080832033845290915290205460ff165b151561266d576040805160e560020a62461bcd02815260206004820152601160248201527f756e617574686f72697a65642075736572000000000000000000000000000000604482015290519081900360640190fd5b6000848152601260205260408082208054600160a060020a031916600160a060020a0387169081179091559051909186917f9d9dd80a56a16f715df6eb40b771e24ff8cbea6eed9de28473ce0f28fe5602a99190a350505050565b816126d33382613308565b1515612726576040805160e560020a62461bcd0281526020600482015260236024820152600080516020614458833981519152604482015260e960020a623332b902606482015290519081900360840190fd5b6127318585856116c0565b61273d85858585613ad0565b151561184d57600080fd5b6000908152600f602052604090205490565b600080836040518082805190602001908083835b6020831061278d5780518252601f19909201916020918201910161276e565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842086519094879450925082918401908083835b602083106127e95780518252601f1990920191602091820191016127ca565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1695945050505050565b6040805190810160405280600781526020017f4f776e61626c65000000000000000000000000000000000000000000000000008152506040805190810160405280600581526020017f312e392e300000000000000000000000000000000000000000000000000000008152506128ba826040805190810160405280600b8152602001600080516020614438833981519152815250613000565b6128c48282613000565b600c8054600160a060020a031916600160a060020a0385161790556040805181815283519181019190915282516000805160206144188339815191529184918491908190602080830191606084019187019080838360005b8381101561293457818101518382015260200161291c565b50505050905090810190601f1680156129615780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561299457818101518382015260200161297c565b50505050905090810190601f1680156129c15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160016000836040518082805190602001908083835b60208310612a045780518252601f1990920191602091820191016129e5565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842086519094879450925082918401908083835b60208310612a605780518252601f199092019160209182019101612a41565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420805460ff19169515159590951790945550508351600192600092869290918291908401908083835b60208310612ad25780518252601f199092019160209182019101612ab3565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208582018252600b80875260008051602061443883398151915293870193845291519095945092508291908083835b60208310612b4b5780518252601f199092019160209182019101612b2c565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805460ff1916931515939093179092555050505050565b6060612b9882611c4b565b1515612ba357600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156125c55780601f1061259a576101008083540402835291602001916125c5565b600d54600090600160a060020a03163314612c96576040805160e560020a62461bcd02815260206004820152602960248201527f4f6e6c79207468652072656769737472792063616e206d616b6520746869732060448201527f6f7065726174696f6e0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b612cd08484848080601f01602080910402602001604051908101604052809392919081815260200183838082843750613c38945050505050565b949350505050565b60005b825181101561184d57612d0785858584815181101515612cf757fe5b90602001906020020151856126c8565b600101612cdb565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600160a060020a038216331415612dc4576040805160e560020a62461bcd02815260206004820152602b60248201527f546865206f70657261746f722073686f756c6420626520646966666572656e7460448201527f2066726f6d206f776e6572000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038316331480612dfe5750600160a060020a038316600090815260046020908152604080832033845290915290205460ff165b1515612e54576040805160e560020a62461bcd02815260206004820152601160248201527f556e617574686f72697a65642075736572000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03838116600081815260136020908152604080832094871680845294825291829020805460ff191686151590811790915582519081529151339493927fd79fbfe1644c022b9150727d871532bfcc3e27ffee86fc596a062770ac97b04292908290030190a4505050565b600c54600160a060020a03163314612edc57600080fd5b600160a060020a0381161515612ef157600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c8054600160a060020a031916600160a060020a0392909216919091179055565b6000908152600e602052604090205490565b6000612f6a82613d89565b80612fb25750604080517f6765744d657461646174612875696e743235362900000000000000000000000081529051908190036014019020600160e060020a03198381169116145b80610d235750604080517f76657269667946696e6765727072696e742875696e743235362c62797465732981529051908190036020019020600160e060020a03198381169116149050919050565b61300a828261275a565b15613085576040805160e560020a62461bcd02815260206004820152603260248201527f52657175657374656420746172676574206d6967726174696f6e20494420686160448201527f7320616c7265616479206265656e2072756e0000000000000000000000000000606482015290519081900360840190fd5b5050565b6000610d2382613a38565b61309d82611c4b565b15156130f3576040805160e560020a62461bcd02815260206004820152601a60248201527f546865204573746174652069642073686f756c64206578697374000000000000604482015290519081900360640190fd5b6000818152600f60205260409020541561317d576040805160e560020a62461bcd02815260206004820152602660248201527f546865204c414e4420697320616c7265616479206f776e656420627920616e2060448201527f4573746174650000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600d54604080517f6352211e0000000000000000000000000000000000000000000000000000000081526004810184905290513092600160a060020a031691636352211e9160248083019260209291908290030181600087803b1580156131e357600080fd5b505af11580156131f7573d6000803e3d6000fd5b505050506040513d602081101561320d57600080fd5b5051600160a060020a031614613293576040805160e560020a62461bcd02815260206004820152602960248201527f5468652045737461746552656769737472792063616e6e6f74206d616e61676560448201527f20746865204c414e440000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000828152600e60209081526040808320805460018101825581855283852001859055848452600f835281842086905585845254601083528184208585529092528083209190915551829184917fff0e52667d53255667dc777a00af81038a4646367b0d73d8ee8540ca5b0c9a2e9190a35050565b60008061331483611f9d565b905080600160a060020a031684600160a060020a0316148061334f575083600160a060020a0316613344846111e7565b600160a060020a0316145b80612cd05750612cd08185612d0f565b8061336a3382613308565b15156133bd576040805160e560020a62461bcd0281526020600482015260236024820152600080516020614458833981519152604482015260e960020a623332b902606482015290519081900360840190fd5b600160a060020a03841615156133d257600080fd5b600160a060020a03831615156133e757600080fd5b6133f18483613dfe565b6133fb8483613e60565b6134058383613f99565b8183600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b600080848461345c338383613fe2565b15156134b2576040805160e560020a62461bcd02815260206004820152601160248201527f756e617574686f72697a65642075736572000000000000000000000000000000604482015290519081900360640190fd5b6000868152600f6020526040902054871461353d576040805160e560020a62461bcd02815260206004820152602260248201527f546865204c414e44206973206e6f742070617274206f6620746865204573746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600d54604080517f7efd9112000000000000000000000000000000000000000000000000000000008152600481018990528151600160a060020a0390931692637efd9112926024808401939192918290030181600087803b1580156135a157600080fd5b505af11580156135b5573d6000803e3d6000fd5b505050506040513d60408110156135cb57600080fd5b508051602091820151600d546040517fd4dd159400000000000000000000000000000000000000000000000000000000815260048101848152602482018490526060604483019081528b5160648401528b51959a50939850600160a060020a039092169463d4dd1594948a948a948d949093919260849091019185019080838360005b8381101561366657818101518382015260200161364e565b50505050905090810190601f1680156136935780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156136b457600080fd5b505af11580156136c8573d6000803e3d6000fd5b5050505050505050505050565b600080808080600160a060020a0386161515613761576040805160e560020a62461bcd02815260206004820152602d60248201527f596f752063616e206e6f74207472616e73666572204c414e4420746f20616e2060448201527f656d707479206164647265737300000000000000000000000000000000000000606482015290519081900360840190fd5b6000888152600e60209081526040808320601083528184208b85529283905292205491965094501515613804576040805160e560020a62461bcd02815260206004820152602260248201527f546865204c414e44206973206e6f742070617274206f6620746865204573746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b845461381790600163ffffffff61409a16565b60008881526020869052604090205490935061383a90600163ffffffff61409a16565b9150848381548110151561384a57fe5b600091825260209091200154905061386982600163ffffffff6140ac16565b6000828152602086905260409020558454819086908490811061388857fe5b60009182526020909120015584548590849081106138a257fe5b6000918252602082200155826138b886826143dd565b50600087815260208581526040808320839055600f909152808220829055600d5481517f42842e0e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a038a81166024830152604482018c9052925192909116926342842e0e9260648084019382900301818387803b15801561394357600080fd5b505af1158015613957573d6000803e3d6000fd5b5050505085600160a060020a031687897f7932eb5ab0d4d4d172776074ee15d13d708465ff5476902ed15a4965434fcab160405160405180910390a45050505050505050565b6000903b1190565b6000806139b183611f9d565b90506139bd8484613308565b806139e15750600083815260126020526040902054600160a060020a038581169116145b80612cd05750600160a060020a0380821660009081526013602090815260408083209388168352929052205460ff1691505092915050565b600082815260116020908152604090912082516116e79284019061435f565b600080805b8351811015613ac957613a5781600863ffffffff6140b916565b8482815181101515613a6557fe5b60209101015160029190910a7f0100000000000000000000000000000000000000000000000000000000000000918290049091027fff0000000000000000000000000000000000000000000000000000000000000016049190911790600101613a3d565b5092915050565b600080613ae585600160a060020a031661399d565b1515613af45760019150611383565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015613b87578181015183820152602001613b6f565b50505050905090810190601f168015613bb45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015613bd657600080fd5b505af1158015613bea573d6000803e3d6000fd5b505050506040513d6020811015613c0057600080fd5b5051600160e060020a0319167f150b7a0200000000000000000000000000000000000000000000000000000000149695505050505050565b600080600160a060020a0384161515613cc0576040805160e560020a62461bcd028152602060048201526024808201527f596f752063616e206e6f74206d696e7420746f20616e20656d7074792061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b613cc86140e2565b9050613cd48482614102565b613cde8184613a19565b8084600160a060020a03167fd66691e9db811aef0bc0900328bd314b23f1f2285d5cb6d4baa4d959b3645a3c856040518080602001828103825283818151815260200191508051906020019080838360005b83811015613d48578181015183820152602001613d30565b50505050905090810190601f168015613d755780820380516001836020036101000a031916815260200191505b509250505060405180910390a39392505050565b6000613d9482614151565b80613dc85750600160e060020a031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b80610d23575050600160e060020a0319167f5b5e139f000000000000000000000000000000000000000000000000000000001490565b81600160a060020a0316613e1182611f9d565b600160a060020a031614613e2457600080fd5b600081815260026020526040902054600160a060020a0316156130855760009081526002602052604090208054600160a060020a031916905550565b6000806000613e6f85856141c6565b600084815260086020908152604080832054600160a060020a0389168452600790925290912054909350613eaa90600163ffffffff61409a16565b600160a060020a038616600090815260076020526040902080549193509083908110613ed257fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515613f1257fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260408120805484908110613f4457fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490613f7b9060001983016143dd565b50600093845260086020526040808520859055908452909220555050565b6000613fa5838361424f565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6000613fee84846139a5565b80612cd05750600d54604080517f9d40b850000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a03808816931691639d40b8509160248083019260209291908290030181600087803b15801561405c57600080fd5b505af1158015614070573d6000803e3d6000fd5b505050506040513d602081101561408657600080fd5b5051600160a060020a031614949350505050565b6000828211156140a657fe5b50900390565b81810182811015610d2357fe5b60008215156140ca57506000610d23565b508181028183828115156140da57fe5b0414610d2357fe5b60006140fd60016140f1611506565b9063ffffffff6140ac16565b905090565b61410c82826142d2565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b600061415c8261432d565b806141905750600160e060020a031982167f80ac58cd00000000000000000000000000000000000000000000000000000000145b80610d23575050600160e060020a0319167f4f558e79000000000000000000000000000000000000000000000000000000001490565b81600160a060020a03166141d982611f9d565b600160a060020a0316146141ec57600080fd5b600160a060020a03821660009081526003602052604090205461421690600163ffffffff61409a16565b600160a060020a039092166000908152600360209081526040808320949094559181526001909152208054600160a060020a0319169055565b600081815260016020526040902054600160a060020a03161561427157600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a03881690811790915584526003909152909120546142b2916140ac565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a03821615156142e757600080fd5b6142f18282613f99565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600160e060020a031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106143a057805160ff19168380011785556143cd565b828001600101855582156143cd579182015b828111156143cd5782518255916020019190600101906143b2565b506143d99291506143fd565b5090565b8154818355818111156116e7576000838152602090206116e79181019083015b610dbd91905b808211156143d957600081556001016144035600dd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3696e697469616c697a65640000000000000000000000000000000000000000004f6e6c79206f776e6572206f72206f70657261746f722063616e207472616e73a165627a7a723058202df94adccba47d4db66807d6b6f0eb3f6d26f335b8ffafdcd99c12c0efa4d8bc0029"
}