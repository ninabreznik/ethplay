{
  "address": "0x24a77c1f17c547105e14813e517be06b0040aa76",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LiveStarsToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-21\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title SafeMath\n * Math operations with safety checks\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n/**\n * @title Ownable\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n    address public owner;\n\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n/**\n * @title Haltable\n * Abstract contract that allows children to implement an\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n */\ncontract Haltable is Ownable {\n    bool public halted;\n\n    modifier stopInEmergency {\n        require(!halted);\n        _;\n    }\n\n    modifier onlyInEmergency {\n        require(halted);\n        _;\n    }\n\n    // called by the owner on emergency, triggers stopped state\n    function halt() external onlyOwner {\n        halted = true;\n    }\n\n    // called by the owner on end of emergency, returns to normal state\n    function unhalt() external onlyOwner onlyInEmergency {\n        halted = false;\n    }\n}\n\n/**\n * @title ERC20\n * ERC20 interface\n */\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) constant returns (uint balance);\n    function transfer(address _to, uint _value);\n    function transferFrom(address _from, address _to, uint _value);\n    function approve(address _spender, uint _value);\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n/**\n * @title StandardToken\n * Standard ERC20-compliant token\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * fix for ERC20 short address attack\n     */\n    modifier onlyPayloadSize(uint256 size) {\n        require(msg.data.length >= size + 4);\n        _;\n    }\n\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n        var _allowance = allowed[_from][msg.sender];\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint _value) {\n        /**\n         * Allowed amount should be first set to 0\n         * by calling approve(_spender, 0) in order to avoid this:\n         * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n         */\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract LiveStarsToken is StandardToken {\n    string public name = \"Live Stars Token\";\n    string public symbol = \"LIVE\";\n    uint256 public decimals = 18;\n    uint256 public INITIAL_SUPPLY = 200000000 * 1 ether;\n\n    /**\n     * All tokens are allocated to creator.\n     */\n    function LiveStarsToken() {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n}\n\ncontract LiveStarsTokenPresale is Haltable {\n    using SafeMath for uint;\n\n    string public name = \"Live Stars Token Presale\";\n\n    LiveStarsToken public token;\n    address public beneficiary;\n\n    uint public hardCap;\n    uint public collected;\n    uint public price;\n    uint public purchaseLimit;\n\n    uint public currentBalance;\n\n    uint public tokensSold = 0;\n    uint public investorCount = 0;\n\n    uint public startTime;\n    uint public endTime;\n\n    event GoalReached(uint amountRaised);\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n\n    modifier onlyAfter(uint time) {\n        require(now >= time);\n        _;\n    }\n\n    modifier onlyBefore(uint time) {\n        require(now <= time);\n        _;\n    }\n\n    function LiveStarsTokenPresale(\n        uint _hardCapUSD,\n        address _token,\n        address _beneficiary,\n        uint _totalTokens,\n        uint _priceETH,\n        uint _purchaseLimitUSD,\n\n        uint _startTime,\n        uint _duration\n    ) {\n        hardCap = _hardCapUSD  * 1 ether / _priceETH;\n        price = _totalTokens * 1 ether / hardCap;\n\n        purchaseLimit = _purchaseLimitUSD * 1 ether / _priceETH * price;\n        token = LiveStarsToken(_token);\n        beneficiary = _beneficiary;\n\n        startTime = _startTime;\n        endTime = _startTime + _duration * 1 hours;\n    }\n\n    function () payable stopInEmergency{\n        require(msg.value >= 0.01 * 1 ether);\n        doPurchase(msg.sender);\n    }\n\n    function withdraw() onlyOwner {\n        require(beneficiary.send(currentBalance));\n        currentBalance = 0;\n    }\n\n    function finalWithdraw() onlyOwner onlyAfter(endTime) {\n        if (currentBalance > 0) {\n            require(beneficiary.send(currentBalance));\n        }\n\n        token.transfer(beneficiary, token.balanceOf(this));\n    }\n\n    function doPurchase(address _owner) private onlyAfter(startTime) onlyBefore(endTime) {\n        assert(collected.add(msg.value) <= hardCap);\n\n        uint tokens = msg.value * price;\n        assert(token.balanceOf(msg.sender) + tokens <= purchaseLimit);\n\n        if (token.balanceOf(msg.sender) == 0) investorCount++;\n\n        collected = collected.add(msg.value);\n        currentBalance = currentBalance.add(msg.value);\n        token.transfer(msg.sender, tokens);\n        tokensSold = tokensSold.add(tokens);\n\n        NewContribution(_owner, tokens, msg.value);\n\n        if (collected == hardCap) {\n            GoalReached(hardCap);\n        }\n    }\n}",
  "bytecode": "60606040526040805190810160405280601081526020017f4c69766520537461727320546f6b656e000000000000000000000000000000008152506003908051906020019061004f929190610111565b506040805190810160405280600481526020017f4c495645000000000000000000000000000000000000000000000000000000008152506004908051906020019061009b929190610111565b5060126005556aa56fa5b99019a5c800000060065534156100bb57600080fd5b5b600654600081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6101b6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015257805160ff1916838001178555610180565b82800160010185558215610180579182015b8281111561017f578251825591602001919060010190610164565b5b50905061018d9190610191565b5090565b6101b391905b808211156101af576000816000905550600101610197565b5090565b90565b610c56806101c56000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a7578063095ea7b31461013657806318160ddd1461017857806323b872dd146101a15780632ff2e9dc14610202578063313ce5671461022b57806370a082311461025457806395d89b41146102a1578063a9059cbb14610330578063dd62ed3e14610372575b600080fd5b34156100b257600080fd5b6100ba6103de565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100fb5780820151818401525b6020810190506100df565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014157600080fd5b610176600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061047c565b005b341561018357600080fd5b61018b6105fd565b6040518082815260200191505060405180910390f35b34156101ac57600080fd5b610200600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610603565b005b341561020d57600080fd5b6102156108c7565b6040518082815260200191505060405180910390f35b341561023657600080fd5b61023e6108cd565b6040518082815260200191505060405180910390f35b341561025f57600080fd5b61028b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108d3565b6040518082815260200191505060405180910390f35b34156102ac57600080fd5b6102b461091d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102f55780820151818401525b6020810190506102d9565b50505050905090810190601f1680156103225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033b57600080fd5b610370600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109bb565b005b341561037d57600080fd5b6103c8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b69565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b505050505081565b600081148061050757506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561051257600080fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b600060606004810160003690501015151561061d57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506106ee83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061078383600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c1090919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107d98383610c1090919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b60065481565b60055481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109b35780601f10610988576101008083540402835291602001916109b3565b820191906000526020600020905b81548152906001019060200180831161099657829003601f168201915b505050505081565b6040600481016000369050101515156109d357600080fd5b610a2582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c1090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610aba82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000808284019050838110151515610c0557fe5b8091505b5092915050565b6000828211151515610c1e57fe5b81830390505b929150505600a165627a7a723058203fa4f82b2b0e7bcf66ef6c95eecf4f285a68e7b7a2397261aff297e8e68aa4490029"
}