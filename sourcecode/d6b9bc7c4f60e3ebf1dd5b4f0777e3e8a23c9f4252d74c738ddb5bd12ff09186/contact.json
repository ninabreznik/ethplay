{
  "address": "0xac99580f92eb7a91daff30de133f93ad82b5070a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartHash",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-07\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\ncontract SmartHash {\n    using SafeMath for uint256;\n\n    uint256 constant public DEPOSIT_MINIMUM_AMOUNT = 10 finney;\n    uint256 constant public MAXIMUM_DEPOSITS_PER_USER = 50;\n\n    uint256 constant public MINIMUM_DAILY_PERCENT = 20;\n    uint256 constant public REFERRAL_PERCENT = 50;\n    uint256 constant public MARKETING_PERCENT = 50;\n    uint256 constant public MAXIMUM_RETURN_PERCENT = 1500;\n    uint256 constant public PERCENTS_DIVIDER = 1000;\n\n    uint256 constant public BALANCE_STEP = 100 ether;\n    uint256 constant public TIME_STEP = 1 days;\n    uint256 constant public STEP_MULTIPLIER = 2;\n\n    address constant public MARKETING_ADDRESS = 0xd0396aAEcb5547776852aB8682Ba72E1209b536d;\n\n    uint256 public usersCount = 0;\n    uint256 public depositsCount = 0;\n    uint256 public totalDeposited = 0;\n    uint256 public totalWithdrawn = 0;\n\n    struct User {\n        uint256 deposited;\n        uint256 withdrawn;\n        uint256 timestamp;\n        uint256 depositsCount;\n        uint256[] deposits;\n    }\n\n    struct Deposit {\n        uint256 amount;\n        uint256 payed;\n        uint256 timestamp;\n    }\n\n    mapping (address => User) public users;\n    mapping (uint256 => Deposit) public deposits;\n\n    function() public payable {\n        if (msg.value >= DEPOSIT_MINIMUM_AMOUNT) {\n            makeDeposit();\n        } else {\n            payDividends();\n        }\n    }\n\n    function createUser() private {\n        users[msg.sender] = User({\n            deposited : 0,\n            withdrawn : 0,\n            timestamp : now,\n            depositsCount : 0,\n            deposits : new uint256[](0)\n        });\n\n        usersCount++;\n    }\n\n    function makeDeposit() private {\n        if (users[msg.sender].deposited == 0) {\n            createUser();\n        }\n\n        User storage user = users[msg.sender];\n\n        require(user.depositsCount < MAXIMUM_DEPOSITS_PER_USER);\n\n        Deposit memory deposit = Deposit({\n            amount : msg.value,\n            payed : 0,\n            timestamp : now\n        });\n\n        deposits[depositsCount] = deposit;\n        user.deposits.push(depositsCount);\n\n        user.deposited = user.deposited.add(msg.value);\n        totalDeposited = totalDeposited.add(msg.value);\n\n        user.depositsCount++;\n        depositsCount++;\n\n        uint256 marketingAmount = msg.value.mul(MARKETING_PERCENT).div(PERCENTS_DIVIDER);\n        MARKETING_ADDRESS.send(marketingAmount);\n\n        address refAddress = bytesToAddress(msg.data);\n        if (refAddress != address(0) && refAddress != msg.sender) {\n            uint256 refAmount = msg.value.mul(REFERRAL_PERCENT).div(PERCENTS_DIVIDER);\n            refAddress.send(refAmount);\n        }\n    }\n\n    function payDividends() private {\n        User storage user = users[msg.sender];\n\n        uint256 userMaximumReturn = user.deposited.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER);\n\n        require(user.deposited > 0 && user.withdrawn < userMaximumReturn);\n\n        uint256 userDividends = 0;\n\n        for (uint256 i = 0; i < user.depositsCount; i++) {\n            if (deposits[user.deposits[i]].payed < deposits[user.deposits[i]].amount.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER)) {\n                uint256 depositId = user.deposits[i];\n\n                Deposit storage deposit = deposits[depositId];\n\n                uint256 depositDividends = getDepositDividends(depositId, msg.sender);\n                userDividends = userDividends.add(depositDividends);\n\n                deposits[depositId].payed = deposit.payed.add(depositDividends);\n                deposits[depositId].timestamp = now;\n            }\n        }\n\n        msg.sender.transfer(userDividends.add(msg.value));\n\n        users[msg.sender].timestamp = now;\n\n        users[msg.sender].withdrawn = user.withdrawn.add(userDividends);\n        totalWithdrawn = totalWithdrawn.add(userDividends);\n    }\n\n    function getDepositDividends(uint256 depositId, address userAddress) private view returns (uint256) {\n        uint256 userActualPercent = getUserActualPercent(userAddress);\n\n        Deposit storage deposit = deposits[depositId];\n\n        uint256 timeDiff = now.sub(deposit.timestamp);\n        uint256 depositDividends = deposit.amount.mul(userActualPercent).div(PERCENTS_DIVIDER).mul(timeDiff).div(TIME_STEP);\n\n        uint256 depositMaximumReturn = deposit.amount.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER);\n\n        if (depositDividends.add(deposit.payed) > depositMaximumReturn) {\n            depositDividends = depositMaximumReturn.sub(deposit.payed);\n        }\n\n        return depositDividends;\n    }\n\n    function getContractActualPercent() public view returns (uint256) {\n        uint256 contractBalance = address(this).balance;\n        uint256 balanceAddPercent = contractBalance.div(BALANCE_STEP).mul(STEP_MULTIPLIER);\n\n        return MINIMUM_DAILY_PERCENT.add(balanceAddPercent);\n    }\n\n    function getUserActualPercent(address userAddress) public view returns (uint256) {\n        uint256 contractActualPercent = getContractActualPercent();\n\n        User storage user = users[userAddress];\n\n        uint256 userMaximumReturn = user.deposited.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER);\n\n        if (user.deposited > 0 && user.withdrawn < userMaximumReturn) {\n            uint256 timeDiff = now.sub(user.timestamp);\n            uint256 userAddPercent = timeDiff.div(TIME_STEP).mul(STEP_MULTIPLIER);\n        }\n\n        return contractActualPercent.add(userAddPercent);\n    }\n\n    function getUserDividends(address userAddress) public view returns (uint256) {\n        User storage user = users[userAddress];\n\n        uint256 userDividends = 0;\n\n        for (uint256 i = 0; i < user.depositsCount; i++) {\n            if (deposits[user.deposits[i]].payed < deposits[user.deposits[i]].amount.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER)) {\n                userDividends = userDividends.add(getDepositDividends(user.deposits[i], userAddress));\n            }\n        }\n\n        return userDividends;\n    }\n\n    function getUserDeposits(address userAddress) public view returns (uint256[]){\n        return users[userAddress].deposits;\n    }\n\n    function bytesToAddress(bytes data) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(data, 20))\n        }\n    }\n}",
  "bytecode": "60806040526000805560006001556000600255600060035534801561002357600080fd5b50610d67806100336000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301c234a88114610141578063040a772e146101685780630d9b221714610189578063114c68f41461019e5780632a5bf6d2146101b3578063300d86131461022457806332bc298c1461023957806333a8915a1461024e5780634506e935146102635780634b319713146102785780634e27e5771461024e5780636ba13a821461028d5780637c8ec77c146102a25780638079b146146102b75780638bd6a153146102cc578063a87430ba146102e1578063b02c43d014610328578063d970e0021461035e578063e689c4761461037f578063eb2e73831461024e578063ff50abdc146103b0575b662386f26fc100003410610137576101326103c5565b61013f565b61013f6105a9565b005b34801561014d57600080fd5b506101566107c7565b60408051918252519081900360200190f35b34801561017457600080fd5b50610156600160a060020a03600435166107cd565b34801561019557600080fd5b50610156610895565b3480156101aa57600080fd5b5061015661089a565b3480156101bf57600080fd5b506101d4600160a060020a03600435166108a7565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102105781810151838201526020016101f8565b505050509050019250505060405180910390f35b34801561023057600080fd5b50610156610916565b34801561024557600080fd5b50610156610921565b34801561025a57600080fd5b50610156610928565b34801561026f57600080fd5b5061015661092d565b34801561028457600080fd5b50610156610933565b34801561029957600080fd5b50610156610939565b3480156102ae57600080fd5b5061015661093f565b3480156102c357600080fd5b50610156610944565b3480156102d857600080fd5b5061015661098d565b3480156102ed57600080fd5b50610302600160a060020a0360043516610993565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561033457600080fd5b506103406004356109ba565b60408051938452602084019290925282820152519081900360600190f35b34801561036a57600080fd5b50610156600160a060020a03600435166109db565b34801561038b57600080fd5b50610394610a91565b60408051600160a060020a039092168252519081900360200190f35b3480156103bc57600080fd5b50610156610aa9565b60006103cf610cb1565b336000908152600460205260408120548190819015156103f1576103f1610aaf565b336000908152600460205260409020600381015490955060321161041457600080fd5b60408051606081018252348082526000602080840182815242858701908152600180548552600584529684208651815591518288015551600290910155845460048b01805496870181558352912090930192909255865490955061047d9163ffffffff610b5d16565b8555600254610492903463ffffffff610b5d16565b60025560038501805460019081019091558054810190556104cc6103e86104c034603263ffffffff610b7a16565b9063ffffffff610ba816565b60405190935073d0396aaecb5547776852ab8682ba72e1209b536d9084156108fc029085906000818181858888f193505050505061053a6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610bcb945050505050565b9150600160a060020a0382161580159061055d5750600160a060020a0382163314155b156105a2576105796103e86104c034603263ffffffff610b7a16565b604051909150600160a060020a0383169082156108fc029083906000818181858888f150505050505b5050505050565b3360009081526004602052604081208054909190819081908190819081906105e1906103e8906104c0906105dc63ffffffff610b7a16565b9550600087600001541180156105fa5750858760010154105b151561060557600080fd5b60009450600093505b866003015484101561072d576106666103e86104c06105dc600560008c6004018a81548110151561063b57fe5b9060005260206000200154815260200190815260200160002060000154610b7a90919063ffffffff16565b60056000896004018781548110151561067b57fe5b9060005260206000200154815260200190815260200160002060010154101561072257600487018054859081106106ae57fe5b906000526020600020015492506005600084815260200190815260200160002091506106da8333610bd2565b90506106ec858263ffffffff610b5d16565b6001830154909550610704908263ffffffff610b5d16565b60008481526005602052604090206001810191909155426002909101555b60019093019261060e565b336108fc610741873463ffffffff610b5d16565b6040518115909202916000818181858888f19350505050158015610769573d6000803e3d6000fd5b50336000908152600460205260409020426002909101556001870154610795908663ffffffff610b5d16565b336000908152600460205260409020600101556003546107bb908663ffffffff610b5d16565b60035550505050505050565b6103e881565b600160a060020a038116600090815260046020526040812081805b826003015481101561088d576108156103e86104c06105dc60056000886004018781548110151561063b57fe5b60056000856004018481548110151561082a57fe5b9060005260206000200154815260200190815260200160002060010154101561088557610882610875846004018381548110151561086457fe5b906000526020600020015487610bd2565b839063ffffffff610b5d16565b91505b6001016107e8565b509392505050565b601481565b68056bc75e2d6310000081565b600160a060020a03811660009081526004602081815260409283902090910180548351818402810184019094528084526060939283018282801561090a57602002820191906000526020600020905b8154815260200190600101908083116108f6575b50505050509050919050565b662386f26fc1000081565b6201518081565b603281565b60015481565b60035481565b60005481565b600281565b600030318161097360026109678468056bc75e2d6310000063ffffffff610ba816565b9063ffffffff610b7a16565b905061098660148263ffffffff610b5d16565b9250505090565b6105dc81565b60046020526000908152604090208054600182015460028301546003909301549192909184565b60056020526000908152604090208054600182015460029092015490919083565b6000806000806000806109ec610944565b600160a060020a038816600090815260046020526040902080549196509450610a25906103e8906104c0906105dc63ffffffff610b7a16565b925060008460000154118015610a3e5750828460010154105b15610a76576002840154610a5990429063ffffffff610c9a16565b9150610a736002610967846201518063ffffffff610ba816565b90505b610a86858263ffffffff610b5d16565b979650505050505050565b73d0396aaecb5547776852ab8682ba72e1209b536d81565b60025481565b60a0604051908101604052806000815260200160008152602001428152602001600081526020016000604051908082528060200260200182016040528015610b01578160200160208202803883390190505b50905233600090815260046020818152604092839020845181558482015160018201559284015160028401556060840151600384015560808401518051610b4f938501929190910190610cd3565b505060008054600101905550565b600082820183811015610b6f57600080fd5b8091505b5092915050565b600080831515610b8d5760009150610b73565b50828202828482811515610b9d57fe5b0414610b6f57600080fd5b600080808311610bb757600080fd5b8284811515610bc257fe5b04949350505050565b6014015190565b600080600080600080610be4876109db565b600089815260056020526040902060028101549196509450610c0d90429063ffffffff610c9a16565b9250610c37620151806104c0856109676103e86104c08b8b60000154610b7a90919063ffffffff16565b8454909250610c56906103e8906104c0906105dc63ffffffff610b7a16565b905080610c70856001015484610b5d90919063ffffffff16565b1115610c8f576001840154610c8c90829063ffffffff610c9a16565b91505b509695505050505050565b60008083831115610caa57600080fd5b5050900390565b6060604051908101604052806000815260200160008152602001600081525090565b828054828255906000526020600020908101928215610d0e579160200282015b82811115610d0e578251825591602001919060010190610cf3565b50610d1a929150610d1e565b5090565b610d3891905b80821115610d1a5760008155600101610d24565b905600a165627a7a72305820f3300ca034592bd3f688a966171cba4101f638614aa1f7a98701e3c0e8f4f2000029"
}