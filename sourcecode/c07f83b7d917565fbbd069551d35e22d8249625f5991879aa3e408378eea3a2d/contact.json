{
  "address": "0x8a451BCD32a78661678E08a724C9f759906FD2Eb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Winbix: Token Sale",
  "contractName": "PreDAICO",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.5.0;\n\n\ncontract IOwnable {\n\n    address public owner;\n    address public newOwner;\n\n    event OwnerChanged(address _oldOwner, address _newOwner);\n\n    function changeOwner(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\ncontract Ownable is IOwnable {\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        emit OwnerChanged(address(0), owner);\n    }\n\n    function changeOwner(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerChanged(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(a >= b);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract IERC20Token {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value)  public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n    function approve(address _spender, uint256 _value)  public returns (bool success);\n    function allowance(address _owner, address _spender)  public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract IWinbixToken is IERC20Token {\n\n    uint256 public votableTotal;\n    uint256 public accruableTotal;\n    address public issuer;\n    bool public transferAllowed;\n\n    mapping (address => bool) public isPayable;\n\n    event SetIssuer(address _address);\n    event TransferAllowed(bool _newState);\n    event FreezeWallet(address _address);\n    event UnfreezeWallet(address _address);\n    event IssueTokens(address indexed _to, uint256 _value);\n    event IssueVotable(address indexed _to, uint256 _value);\n    event IssueAccruable(address indexed _to, uint256 _value);\n    event BurnTokens(address indexed _from, uint256 _value);\n    event BurnVotable(address indexed _from, uint256 _value);\n    event BurnAccruable(address indexed _from, uint256 _value);\n    event SetPayable(address _address, bool _state);\n\n    function setIssuer(address _address) public;\n    function allowTransfer(bool _allowTransfer) public;\n    function freeze(address _address) public;\n    function unfreeze(address _address) public;\n    function isFrozen(address _address) public returns (bool);\n    function issue(address _to, uint256 _value) public;\n    function issueVotable(address _to, uint256 _value) public;\n    function issueAccruable(address _to, uint256 _value) public;\n    function votableBalanceOf(address _address) public view returns (uint256);\n    function accruableBalanceOf(address _address) public view returns (uint256);\n    function burn(uint256 _value) public;\n    function burnAll() public;\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool);\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool);\n    function setMePayable(bool _state) public;\n}\n\ncontract IWinbixPayable {\n\n    function catchWinbix(address payable _from, uint256 _value) external;\n\n}\n\ncontract WinbixPayable is IWinbixPayable {\n\n    IWinbixToken internal winbixToken;\n\n    function winbixPayable(address payable _from, uint256 _value) internal;\n\n    function catchWinbix(address payable _from, uint256 _value) external {\n        require(address(msg.sender) == address(winbixToken));\n        winbixPayable(_from, _value);\n    }\n\n}\n\n\ncontract IVerificationList is IOwnable {\n\n    event Accept(address _address);\n    event Reject(address _address);\n    event SendToCheck(address _address);\n    event RemoveFromList(address _address);\n    \n    function isAccepted(address _address) public view returns (bool);\n    function isRejected(address _address) public view returns (bool);\n    function isOnCheck(address _address) public view returns (bool);\n    function isInList(address _address) public view returns (bool);\n    function isNotInList(address _address) public view returns (bool);\n    function isAcceptedOrNotInList(address _address) public view returns (bool);\n    function getState(address _address) public view returns (uint8);\n    \n    function accept(address _address) public;\n    function reject(address _address) public;\n    function toCheck(address _address) public;\n    function remove(address _address) public;\n}\n\ncontract IVoting is IOwnable {\n\n    uint public startDate;\n    uint public endDate;\n    uint public votesYes;\n    uint public votesNo;\n    uint8 public subject;\n    uint public nextVotingDate;\n\n\n    event InitVoting(uint startDate, uint endDate, uint8 subject);\n    event Vote(address _address, int _vote);\n\n    function initProlongationVoting() public;\n    function initTapChangeVoting(uint8 newPercent) public;\n    function inProgress() public view returns (bool);\n    function yes(address _address, uint _votes) public;\n    function no(address _address, uint _votes) public;\n    function vote(address _address) public view returns (int);\n    function votesTotal() public view returns (uint);\n    function isSubjectApproved() public view returns (bool);\n}\n\ncontract ITap is IOwnable {\n\n    uint8[12] public tapPercents = [2, 2, 3, 11, 11, 17, 11, 11, 8, 8, 8, 8];\n    uint8 public nextTapNum;\n    uint8 public nextTapPercent = tapPercents[nextTapNum];\n    uint public nextTapDate;\n    uint public remainsForTap;\n    uint public baseEther;\n\n    function init(uint _baseEther, uint _startDate) public;\n    function changeNextTap(uint8 _newPercent) public;\n    function getNext() public returns (uint);\n    function subRemainsForTap(uint _delta) public;\n}\n\ncontract IRefund is IOwnable {\n    \n    ITap public tap;\n    uint public refundedTokens;\n    uint public tokensBase;\n\n    function init(uint _tokensBase, address _tap, uint _startDate) public;\n    function refundEther(uint _value) public returns (uint);\n    function calculateEtherForRefund(uint _tokensAmount) public view returns (uint);\n}\n\ncontract PreDAICO is Ownable, WinbixPayable, SafeMath {\n\n    enum KycStates { None, OnCheck, Accepted, Rejected }\n    enum VotingType { None, Prolongation, TapChange }\n\n    uint constant SOFTCAP = 6250000 ether;\n    uint constant HARDCAP = 25000000 ether;\n    uint constant TOKENS_FOR_MARKETING = 2500000 ether;\n    uint constant TOKENS_FOR_ISSUE = 27500000 ether;\n\n    uint constant MIN_PURCHASE = 0.1 ether;\n\n    uint constant SKIP_TIME = 15 minutes;\n\n    uint constant PRICE1 = 550 szabo;\n    uint constant PRICE2 = 600 szabo;\n    uint constant PRICE3 = 650 szabo;\n    uint constant PRICE4 = 700 szabo;\n    uint constant PRICE5 = 750 szabo;\n\n    uint public soldTokens;\n    uint public recievedEther;\n    uint public etherAfterKyc;\n    uint public tokensAfterKyc;\n    uint public refundedTokens;\n\n    IVerificationList public buyers;\n    IVoting public voting;\n    ITap public tap;\n    IRefund public refund;\n\n    address public kycChecker;\n\n    mapping (address => uint) public etherPaid;\n    mapping (address => uint) public wbxSold;\n\n    uint public startDate;\n    uint public endDate;\n    uint public additionalTime;\n\n    uint public tokensForMarketingTotal;\n    uint public tokensForMarketingRemains;\n\n    VotingType private votingType;\n    bool private votingApplied = true;\n\n\n    event HardcapCompiled();\n    event SoftcapCompiled();\n    event Tap(address _address, uint _value);\n    event Refund(address _address, uint _tokenAmount, uint _etherAmount);\n\n    modifier isProceeds {\n        require(now >= startDate && now <= endDate);\n        _;\n    }\n\n    modifier onlyKycChecker {\n        require(msg.sender == kycChecker);\n        _;\n    }\n\n    function setExternals(\n        address _winbixToken,\n        address _buyers,\n        address _voting,\n        address _tap,\n        address _refund\n    ) public onlyOwner {\n        if (address(winbixToken) == address(0)) {\n            winbixToken = IWinbixToken(_winbixToken);\n            winbixToken.setMePayable(true);\n        }\n        if (address(buyers) == address(0)) {\n            buyers = IVerificationList(_buyers);\n            buyers.acceptOwnership();\n        }\n        if (address(voting) == address(0)) {\n            voting = IVoting(_voting);\n            voting.acceptOwnership();\n        }\n        if (address(tap) == address(0)) {\n            tap = ITap(_tap);\n            tap.acceptOwnership();\n        }\n        if (address(refund) == address(0)) {\n            refund = IRefund(_refund);\n            refund.acceptOwnership();\n        }\n        kycChecker = msg.sender;\n    }\n\n    function setKycChecker(address _address) public onlyOwner {\n        kycChecker = _address;\n    }\n\n    function startPreDaico() public onlyOwner {\n        require(\n            (startDate == 0) &&\n            address(buyers) != address(0) &&\n            address(voting) != address(0) &&\n            address(tap) != address(0) &&\n            address(refund) != address(0)\n        );\n        winbixToken.issue(address(this), TOKENS_FOR_ISSUE);\n        startDate = now;\n        endDate = now + 60 days;\n    }\n\n    function () external payable isProceeds {\n        require(soldTokens < HARDCAP && msg.value >= MIN_PURCHASE);\n\n        uint etherValue = msg.value;\n        uint tokenPrice = getTokenPrice();\n        uint tokenValue = safeMul(etherValue, 1 ether) / tokenPrice;\n        uint newSum = safeAdd(soldTokens, tokenValue);\n        bool softcapNotYetCompiled = soldTokens < SOFTCAP;\n\n        buyers.toCheck(msg.sender);\n        winbixToken.freeze(msg.sender);\n\n        if (newSum > HARDCAP) {\n            uint forRefund = safeMul((newSum - HARDCAP), tokenPrice) / (1 ether);\n            address(msg.sender).transfer(forRefund);\n            etherValue = safeSub(etherValue, forRefund);\n            tokenValue = safeSub(HARDCAP, soldTokens);\n        }\n\n        soldTokens += tokenValue;\n        recievedEther += etherValue;\n        etherPaid[msg.sender] += etherValue;\n        wbxSold[msg.sender] += tokenValue;\n\n        winbixToken.transfer(msg.sender, tokenValue);\n        winbixToken.issueVotable(msg.sender, tokenValue);\n        winbixToken.issueAccruable(msg.sender, tokenValue);\n\n        if (softcapNotYetCompiled && soldTokens >= SOFTCAP) {\n            emit SoftcapCompiled();\n        }\n        if (soldTokens == HARDCAP) {\n            endDate = now;\n            emit HardcapCompiled();\n        }\n    }\n\n    function getTokenPrice() public view returns (uint) {\n        if (soldTokens <= 5000000 ether) {\n            return PRICE1;\n        } else if (soldTokens <= 10000000 ether) {\n            return PRICE2;\n        } else if (soldTokens <= 15000000 ether) {\n            return PRICE3;\n        } else if (soldTokens <= 20000000 ether) {\n            return PRICE4;\n        } else {\n            return PRICE5;\n        }\n    }\n\n    function kycSuccess(address _address) public onlyKycChecker {\n        require(now > endDate + SKIP_TIME && now < endDate + additionalTime + 15 days);\n        require(!buyers.isAccepted(_address));\n        etherAfterKyc += etherPaid[_address];\n        tokensAfterKyc += wbxSold[_address];\n        winbixToken.unfreeze(_address);\n        buyers.accept(_address);\n    }\n\n    function kycFail(address _address) public onlyKycChecker {\n        require(now > endDate + SKIP_TIME && now < endDate + additionalTime + 15 days);\n        require(!buyers.isRejected(_address));\n        if (buyers.isAccepted(_address)) {\n            etherAfterKyc -= etherPaid[_address];\n            tokensAfterKyc -= wbxSold[_address];\n        }\n        winbixToken.freeze(_address);\n        buyers.reject(_address);\n    }\n\n    function getKycState(address _address) public view returns (KycStates) {\n        return KycStates(buyers.getState(_address));\n    }\n\n\n    function prepareTokensAfterKyc() public {\n        require(tokensForMarketingTotal == 0);\n        require(now > endDate + additionalTime + 15 days + SKIP_TIME && soldTokens >= SOFTCAP);\n        tokensForMarketingTotal = tokensAfterKyc / 10;\n        tokensForMarketingRemains = tokensForMarketingTotal;\n        winbixToken.burn(TOKENS_FOR_ISSUE - soldTokens - tokensForMarketingTotal);\n        winbixToken.allowTransfer(true);\n        tap.init(etherAfterKyc, endDate + additionalTime + 17 days + SKIP_TIME);\n        refund.init(tokensAfterKyc, address(tap), endDate + 45 days);\n    }\n\n    function transferTokensForMarketing(address _to, uint _value) public onlyOwner {\n        require(_value <= tokensForMarketingRemains && buyers.isAcceptedOrNotInList(_to));\n        winbixToken.transfer(_to, _value);\n        winbixToken.issueAccruable(_to, _value);\n        tokensForMarketingRemains -= _value;\n    }\n\n    function burnTokensIfSoftcapNotCompiled() public {\n        require(endDate > 0 && now > endDate + 2 days + SKIP_TIME && soldTokens < SOFTCAP);\n        winbixToken.burnAll();\n    }\n\n\n    function getTap() public onlyOwner {\n        uint tapValue = tap.getNext();\n        address(msg.sender).transfer(tapValue);\n        emit Tap(msg.sender, tapValue);\n    }\n\n\n    function getVotingSubject() public view returns (uint8) {\n        return voting.subject();\n    }\n\n    function initCrowdsaleProlongationVoting() public onlyOwner {\n        require(now >= endDate + SKIP_TIME && now <= endDate + 12 hours);\n        require(soldTokens >= SOFTCAP * 75 / 100);\n        require(soldTokens <= HARDCAP * 90 / 100);\n        voting.initProlongationVoting();\n        votingApplied = false;\n        additionalTime = 2 days;\n        votingType = VotingType.Prolongation;\n    }\n\n    function initTapChangeVoting(uint8 newPercent) public onlyOwner {\n        require(tokensForMarketingTotal > 0);\n        require(now > endDate + 17 days);\n        voting.initTapChangeVoting(newPercent);\n        votingApplied = false;\n        votingType = VotingType.TapChange;\n    }\n\n    function isVotingInProgress() public view returns (bool) {\n        return voting.inProgress();\n    }\n\n    function getVotingWeight(address _address) public view returns (uint) {\n        if (votingType == VotingType.TapChange && !buyers.isAccepted(_address)) {\n            return 0;\n        }\n        return winbixToken.votableBalanceOf(_address);\n    }\n\n    function voteYes() public {\n        voting.yes(msg.sender, getVotingWeight(msg.sender));\n    }\n\n    function voteNo() public {\n        voting.no(msg.sender, getVotingWeight(msg.sender));\n    }\n\n    function getVote(address _address) public view returns (int) {\n        return voting.vote(_address);\n    }\n\n    function getVotesTotal() public view returns (uint) {\n        return voting.votesTotal();\n    }\n\n    function isSubjectApproved() public view returns (bool) {\n        return voting.isSubjectApproved();\n    }\n\n    function applyVotedProlongation() public {\n        require(now < endDate + 2 days);\n        require(votingType == VotingType.Prolongation);\n        require(!votingApplied);\n        require(!voting.inProgress());\n        votingApplied = true;\n        if (voting.isSubjectApproved()) {\n            startDate = endDate + 2 days;\n            endDate = startDate + 30 days;\n            additionalTime = 0;\n        }\n    }\n\n    function applyVotedPercent() public {\n        require(votingType == VotingType.TapChange);\n        require(!votingApplied);\n        require(!voting.inProgress());\n        require(now < voting.nextVotingDate());\n        votingApplied = true;\n        if (voting.isSubjectApproved()) {\n            tap.changeNextTap(voting.subject());\n        }\n    }\n\n\n    function refundableBalanceOf(address _address) public view returns (uint) {\n        if (!buyers.isAcceptedOrNotInList(_address)) return 0;\n        return winbixToken.votableBalanceOf(_address);\n    }\n\n    function calculateEtherForRefund(uint _tokensAmount) public view returns (uint) {\n        return refund.calculateEtherForRefund(_tokensAmount);\n    }\n\n\n    function winbixPayable(address payable _from, uint256 _value) internal {\n        if (_value == 0) return;\n        uint etherValue;\n        KycStates state = getKycState(_from);\n        if (\n            (soldTokens < SOFTCAP && now > endDate + 2 days) ||\n            ((state == KycStates.Rejected || state == KycStates.OnCheck) && (now > endDate + additionalTime + 17 days))\n        ) {\n            etherValue = etherPaid[_from];\n            require(etherValue > 0 && _value == wbxSold[_from]);\n            _from.transfer(etherValue);\n            etherPaid[_from] = 0;\n            wbxSold[_from] = 0;\n            winbixToken.unfreeze(_from);\n        } else {\n            require(winbixToken.votableBalanceOf(_from) >= _value);\n            etherValue = refund.refundEther(_value);\n            _from.transfer(etherValue);\n            tap.subRemainsForTap(etherValue);\n            emit Refund(_from, _value, etherValue);\n        }\n        winbixToken.burn(_value);\n    }\n}",
  "bytecode": "608060408181526014805461ff00191661010017905560008054600160a060020a0319163317808255908352600160a060020a031660a0527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a1612ef9806100696000396000f3fe60806040526004361061028c5760003560e060020a9004806391d453a81161015e578063d4ee1d90116100c5578063f28209541161007e578063f282095414610cbe578063f320072a14610cd3578063f3da890814610ce8578063fce1ccca14610cfd578063fd22103114610d12578063fefe516f14610d275761028c565b8063d4ee1d9014610bfe578063d5da24b914610c13578063d84078fb14610c46578063dbcae0bb14610c5b578063df11994814610c70578063e557748b14610c855761028c565b8063aca4954511610117578063aca4954514610afe578063bb03fa1d14610b53578063c24a0f8b14610baa578063c3940d2c14610bbf578063c48303e514610bd4578063cfa820ee14610be95761028c565b806391d453a814610a1157806393db956b14610a445780639cc88bf214610a6e578063a47a533a14610a83578063a6f9dae114610ab6578063aa9fa86814610ae95761028c565b80635ed9ebfc1161020257806371186965116101bb578063711869651461095757806379ba50971461098a5780638d337b811461099f5780638da5cb5b146109d25780638fbb1bc3146109e757806390cf581c146109fc5761028c565b80635ed9ebfc146108ab578063607e4c4b146108c057806361863e44146108d5578063649873e8146109025780636577fe3e146109175780636d40d3831461092c5761028c565b806341c12a701161025457806341c12a70146107bb5780634b3d25ac146107d05780634b94f50e14610803578063525345d5146108185780635299ccc614610851578063590e1ae31461087a5761028c565b80630730723c146107205780630b97bc861461073757806319b656431461075e57806335c554d8146107915780633771034a146107a6575b600f5442101580156102a057506010544211155b15156102ab57600080fd5b6a14adf4b7320334b90000006003541080156102cf575067016345785d8a00003410155b15156102da57600080fd5b3460006102e5610d5a565b90506000816102fc84670de0b6b3a7640000610df3565b81151561030557fe5b049050600061031660035483610e1e565b600354600854604080517f24b98e8100000000000000000000000000000000000000000000000000000000815233600482015290519394506a052b7d2dcc80cd2e40000090921092600160a060020a03909116916324b98e8191602480830192600092919082900301818387803b15801561039057600080fd5b505af11580156103a4573d6000803e3d6000fd5b5050600254604080517f8d1fdf2f0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169350638d1fdf2f925060248082019260009290919082900301818387803b15801561040d57600080fd5b505af1158015610421573d6000803e3d6000fd5b505050506a14adf4b7320334b90000008211156104bd576000670de0b6b3a764000061045a6a14adf4b7320334b9000000850387610df3565b81151561046357fe5b6040519190049150339082156108fc029083906000818181858888f19350505050158015610495573d6000803e3d6000fd5b506104a08682610e2d565b95506104b96a14adf4b7320334b9000000600354610e2d565b9350505b60038054840190556004805486018155336000818152600d6020908152604080832080548b019055600e825280832080548901905560025481517fa9059cbb000000000000000000000000000000000000000000000000000000008152958601949094526024850188905251600160a060020a039093169363a9059cbb9360448083019491928390030190829087803b15801561055957600080fd5b505af115801561056d573d6000803e3d6000fd5b505050506040513d602081101561058357600080fd5b5050600254604080517f2c50da98000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a0390921691632c50da989160448082019260009290919082900301818387803b1580156105f157600080fd5b505af1158015610605573d6000803e3d6000fd5b5050600254604080517fcfc6f363000000000000000000000000000000000000000000000000000000008152336004820152602481018890529051600160a060020a03909216935063cfc6f363925060448082019260009290919082900301818387803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b505050508080156106a757506a052b7d2dcc80cd2e40000060035410155b156106d6576040517f6343bce1e692b8896ca1f91ca9d3c151de660d9d1762145673162d064b8f6ba290600090a15b6a14adf4b7320334b9000000600354141561071957426010556040517f13b122b9673fc89cb4b932204c37c3daa62adbe8d5e4939b6c32d2fb5e1b523b90600090a15b5050505050005b34801561072c57600080fd5b50610735610e3f565b005b34801561074357600080fd5b5061074c6110ce565b60408051918252519081900360200190f35b34801561076a57600080fd5b5061074c6004803603602081101561078157600080fd5b5035600160a060020a03166110d4565b34801561079d57600080fd5b5061074c6110e6565b3480156107b257600080fd5b5061074c6110ec565b3480156107c757600080fd5b506107356110f2565b3480156107dc57600080fd5b50610735600480360360208110156107f357600080fd5b5035600160a060020a031661115f565b34801561080f57600080fd5b5061074c610d5a565b34801561082457600080fd5b506107356004803603604081101561083b57600080fd5b50600160a060020a038135169060200135611366565b34801561085d57600080fd5b5061086661138b565b604080519115158252519081900360200190f35b34801561088657600080fd5b5061088f61141a565b60408051600160a060020a039092168252519081900360200190f35b3480156108b757600080fd5b5061074c611429565b3480156108cc57600080fd5b5061074c61142f565b3480156108e157600080fd5b50610735600480360360208110156108f857600080fd5b503560ff16611435565b34801561090e57600080fd5b5061074c6114ff565b34801561092357600080fd5b5061088f611505565b34801561093857600080fd5b50610941611514565b6040805160ff9092168252519081900360200190f35b34801561096357600080fd5b5061074c6004803603602081101561097a57600080fd5b5035600160a060020a0316611572565b34801561099657600080fd5b506107356116b0565b3480156109ab57600080fd5b5061074c600480360360208110156109c257600080fd5b5035600160a060020a031661173a565b3480156109de57600080fd5b5061088f6117a4565b3480156109f357600080fd5b5061074c6117b3565b348015610a0857600080fd5b506107356117b9565b348015610a1d57600080fd5b5061073560048036036020811015610a3457600080fd5b5035600160a060020a03166117d4565b348015610a5057600080fd5b5061074c60048036036020811015610a6757600080fd5b503561180d565b348015610a7a57600080fd5b50610735611872565b348015610a8f57600080fd5b5061074c60048036036020811015610aa657600080fd5b5035600160a060020a0316611983565b348015610ac257600080fd5b5061073560048036036020811015610ad957600080fd5b5035600160a060020a0316611995565b348015610af557600080fd5b5061074c6119ce565b348015610b0a57600080fd5b50610735600480360360a0811015610b2157600080fd5b50600160a060020a038135811691602081013582169160408201358116916060810135821691608090910135166119d4565b348015610b5f57600080fd5b50610b8660048036036020811015610b7657600080fd5b5035600160a060020a0316611cd8565b60405180826003811115610b9657fe5b60ff16815260200191505060405180910390f35b348015610bb657600080fd5b5061074c611d82565b348015610bcb57600080fd5b50610735611d88565b348015610be057600080fd5b50610735611ea4565b348015610bf557600080fd5b50610735611f32565b348015610c0a57600080fd5b5061088f612026565b348015610c1f57600080fd5b5061074c60048036036020811015610c3657600080fd5b5035600160a060020a0316612035565b348015610c5257600080fd5b506108666120c5565b348015610c6757600080fd5b50610735612123565b348015610c7c57600080fd5b5061074c6123d6565b348015610c9157600080fd5b5061073560048036036040811015610ca857600080fd5b50600160a060020a0381351690602001356123dc565b348015610cca57600080fd5b5061074c6125cd565b348015610cdf57600080fd5b5061088f61262b565b348015610cf457600080fd5b5061073561263a565b348015610d0957600080fd5b5061088f6127bf565b348015610d1e57600080fd5b5061088f6127ce565b348015610d3357600080fd5b5061073560048036036020811015610d4a57600080fd5b5035600160a060020a03166127dd565b60006a0422ca8b0a00a425000000600354111515610d8057506601f438daa06000610df0565b6003546a084595161401484a00000010610da25750660221b262dd8000610df0565b6003546a0c685fa11e01ec6f00000010610dc4575066024f2beb1aa000610df0565b6003546a108b2a2c2802909400000010610de6575066027ca57357c000610df0565b506602aa1efb94e0005b90565b6000828202831580610e0f5750828482811515610e0c57fe5b04145b1515610e1757fe5b9392505050565b600082820183811015610e1757fe5b600081831015610e3957fe5b50900390565b60125415610e4c57600080fd5b601154601054016213ca040142118015610e7357506a052b7d2dcc80cd2e40000060035410155b1515610e7e57600080fd5b600654600a900460128190556013819055600254600354604080517f42966c680000000000000000000000000000000000000000000000000000000081526a16bf59fcb70386cb800000929092039390930360048201529151600160a060020a03909116916342966c6891602480830192600092919082900301818387803b158015610f0957600080fd5b505af1158015610f1d573d6000803e3d6000fd5b5050600254604080517fd4cab60d000000000000000000000000000000000000000000000000000000008152600160048201529051600160a060020a03909216935063d4cab60d925060248082019260009290919082900301818387803b158015610f8757600080fd5b505af1158015610f9b573d6000803e3d6000fd5b5050600a54600554601154601054604080517fa5843f080000000000000000000000000000000000000000000000000000000081526004810194909452910162166d0401602483015251600160a060020a03909216935063a5843f08925060448082019260009290919082900301818387803b15801561101a57600080fd5b505af115801561102e573d6000803e3d6000fd5b5050600b54600654600a54601054604080517fea2299f80000000000000000000000000000000000000000000000000000000081526004810194909452600160a060020a039283166024850152623b53809091016044840152519216935063ea2299f8925060648082019260009290919082900301818387803b1580156110b457600080fd5b505af11580156110c8573d6000803e3d6000fd5b50505050565b600f5481565b600d6020526000908152604090205481565b60065481565b60045481565b600954600160a060020a0316630a92afd23361110d81612035565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156110b457600080fd5b600c54600160a060020a0316331461117657600080fd5b61038460105401421180156111955750601154601054016213c6800142105b15156111a057600080fd5b600854604080517fe6f091f9000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163e6f091f9916024808301926020929190829003018186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b50511561123c57600080fd5b600160a060020a038082166000818152600d6020908152604080832054600580549091019055600e9091528082205460068054909101905560025481517f45c8b1a6000000000000000000000000000000000000000000000000000000008152600481019490945290519316926345c8b1a692602480820193929182900301818387803b1580156112cc57600080fd5b505af11580156112e0573d6000803e3d6000fd5b5050600854604080517f9f005920000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301529151919092169350639f0059209250602480830192600092919082900301818387803b15801561134b57600080fd5b505af115801561135f573d6000803e3d6000fd5b5050505050565b600254600160a060020a0316331461137d57600080fd5b6113878282612a70565b5050565b600954604080517f5299ccc60000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691635299ccc6916004808301926020929190829003018186803b1580156113e957600080fd5b505afa1580156113fd573d6000803e3d6000fd5b505050506040513d602081101561141357600080fd5b5051905090565b600b54600160a060020a031681565b60035481565b60125481565b600054600160a060020a0316331461144c57600080fd5b60125460001061145b57600080fd5b6010546216698001421161146e57600080fd5b600954604080517f61863e4400000000000000000000000000000000000000000000000000000000815260ff841660048201529051600160a060020a03909216916361863e449160248082019260009290919082900301818387803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b50506014805461ffff19166002179055505050565b60055481565b600854600160a060020a031681565b600954604080517f0a59a98c0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691630a59a98c916004808301926020929190829003018186803b1580156113e957600080fd5b600854604080517fcf03caee000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163cf03caee91602480820192602092909190829003018186803b1580156115dc57600080fd5b505afa1580156115f0573d6000803e3d6000fd5b505050506040513d602081101561160657600080fd5b50511515611616575060006116ab565b600254604080517f57bd7811000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915191909216916357bd7811916024808301926020929190829003018186803b15801561167c57600080fd5b505afa158015611690573d6000803e3d6000fd5b505050506040513d60208110156116a657600080fd5b505190505b919050565b600154600160a060020a031633146116c757600080fd5b60005460015460408051600160a060020a03938416815292909116602083015280517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c9281900390910190a16001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b600954604080517f6dd7d8ea000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291516000939290921691636dd7d8ea91602480820192602092909190829003018186803b15801561167c57600080fd5b600054600160a060020a031681565b60135481565b600954600160a060020a031663b88000d43361110d81612035565b600054600160a060020a031633146117eb57600080fd5b600c8054600160a060020a031916600160a060020a0392909216919091179055565b600b54604080517f93db956b000000000000000000000000000000000000000000000000000000008152600481018490529051600092600160a060020a0316916393db956b916024808301926020929190829003018186803b15801561167c57600080fd5b600054600160a060020a0316331461188957600080fd5b600a54604080517ff3638f780000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163f3638f7891600480830192602092919082900301818787803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d602081101561191257600080fd5b5051604051909150339082156108fc029083906000818181858888f19350505050158015611944573d6000803e3d6000fd5b50604080513381526020810183905281517ffc3b98e76f4840b19b2829249e3a6ec2bbac1fb30a799c637102913eb3928a06929181900390910190a150565b600e6020526000908152604090205481565b600054600160a060020a031633146119ac57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60075481565b600054600160a060020a031633146119eb57600080fd5b600254600160a060020a03161515611a935760028054600160a060020a031916600160a060020a038781169190911791829055604080517f3642e5cd0000000000000000000000000000000000000000000000000000000081526001600482015290519290911691633642e5cd9160248082019260009290919082900301818387803b158015611a7a57600080fd5b505af1158015611a8e573d6000803e3d6000fd5b505050505b600854600160a060020a03161515611b1e5760088054600160a060020a031916600160a060020a0386811691909117918290556040805160e060020a6379ba5097028152905192909116916379ba50979160048082019260009290919082900301818387803b158015611b0557600080fd5b505af1158015611b19573d6000803e3d6000fd5b505050505b600954600160a060020a03161515611ba95760098054600160a060020a031916600160a060020a0385811691909117918290556040805160e060020a6379ba5097028152905192909116916379ba50979160048082019260009290919082900301818387803b158015611b9057600080fd5b505af1158015611ba4573d6000803e3d6000fd5b505050505b600a54600160a060020a03161515611c3457600a8054600160a060020a031916600160a060020a0384811691909117918290556040805160e060020a6379ba5097028152905192909116916379ba50979160048082019260009290919082900301818387803b158015611c1b57600080fd5b505af1158015611c2f573d6000803e3d6000fd5b505050505b600b54600160a060020a03161515611cbf57600b8054600160a060020a031916600160a060020a0383811691909117918290556040805160e060020a6379ba5097028152905192909116916379ba50979160048082019260009290919082900301818387803b158015611ca657600080fd5b505af1158015611cba573d6000803e3d6000fd5b505050505b5050600c8054600160a060020a03191633179055505050565b600854604080517f1bab58f5000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291516000939290921691631bab58f591602480820192602092909190829003018186803b158015611d4257600080fd5b505afa158015611d56573d6000803e3d6000fd5b505050506040513d6020811015611d6c57600080fd5b505160ff166003811115611d7c57fe5b92915050565b60105481565b600054600160a060020a03163314611d9f57600080fd5b600f54158015611db95750600854600160a060020a031615155b8015611dcf5750600954600160a060020a031615155b8015611de55750600a54600160a060020a031615155b8015611dfb5750600b54600160a060020a031615155b1515611e0657600080fd5b600254604080517f867904b40000000000000000000000000000000000000000000000000000000081523060048201526a16bf59fcb70386cb80000060248201529051600160a060020a039092169163867904b49160448082019260009290919082900301818387803b158015611e7c57600080fd5b505af1158015611e90573d6000803e3d6000fd5b505042600f819055624f1a00016010555050565b6000601054118015611ebc57506010546202a6840142115b8015611ed457506a052b7d2dcc80cd2e400000600354105b1515611edf57600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a0316639975038c6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156110b457600080fd5b600054600160a060020a03163314611f4957600080fd5b610384601054014210158015611f65575060105461a8c0014211155b1515611f7057600080fd5b6003546a03e09de2596099e2b000001115611f8a57600080fd5b6003546a129c8f71ad02e2a68000001015611fa457600080fd5b600960009054906101000a9004600160a060020a0316600160a060020a031663463af1956040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611ff757600080fd5b505af115801561200b573d6000803e3d6000fd5b5050601480546202a30060115561ffff191660011790555050565b600154600160a060020a031681565b6000600260145460ff16600281111561204a57fe5b1480156120b85750600854604080517fe6f091f9000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163e6f091f9916024808301926020929190829003018186803b1580156115dc57600080fd5b15611616575060006116ab565b600954604080517f873518130000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916387351813916004808301926020929190829003018186803b1580156113e957600080fd5b600260145460ff16600281111561213657fe5b1461214057600080fd5b601454610100900460ff161561215557600080fd5b600960009054906101000a9004600160a060020a0316600160a060020a031663873518136040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156121a657600080fd5b505afa1580156121ba573d6000803e3d6000fd5b505050506040513d60208110156121d057600080fd5b5051156121dc57600080fd5b600960009054906101000a9004600160a060020a0316600160a060020a031663e26a46056040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561222d57600080fd5b505afa158015612241573d6000803e3d6000fd5b505050506040513d602081101561225757600080fd5b5051421061226457600080fd5b6014805461ff001916610100179055600954604080517f5299ccc60000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691635299ccc691600480820192602092909190829003018186803b1580156122d157600080fd5b505afa1580156122e5573d6000803e3d6000fd5b505050506040513d60208110156122fb57600080fd5b5051156123d457600a54600954604080517f0a59a98c0000000000000000000000000000000000000000000000000000000081529051600160a060020a039384169363827ccfcc931691630a59a98c916004808301926020929190829003018186803b15801561236a57600080fd5b505afa15801561237e573d6000803e3d6000fd5b505050506040513d602081101561239457600080fd5b50516040805160e060020a63ffffffff851602815260ff909216600483015251602480830192600092919082900301818387803b1580156110b457600080fd5b565b60115481565b600054600160a060020a031633146123f357600080fd5b60135481111580156124935750600854604080517fcf03caee000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163cf03caee916024808301926020929190829003018186803b15801561246657600080fd5b505afa15801561247a573d6000803e3d6000fd5b505050506040513d602081101561249057600080fd5b50515b151561249e57600080fd5b600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561250d57600080fd5b505af1158015612521573d6000803e3d6000fd5b505050506040513d602081101561253757600080fd5b5050600254604080517fcfc6f363000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163cfc6f36391604480830192600092919082900301818387803b1580156125a757600080fd5b505af11580156125bb573d6000803e3d6000fd5b50506013805493909303909255505050565b600954604080517f54218cd80000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916354218cd8916004808301926020929190829003018186803b1580156113e957600080fd5b600c54600160a060020a031681565b6010546202a30001421061264d57600080fd5b600160145460ff16600281111561266057fe5b1461266a57600080fd5b601454610100900460ff161561267f57600080fd5b600960009054906101000a9004600160a060020a0316600160a060020a031663873518136040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156126d057600080fd5b505afa1580156126e4573d6000803e3d6000fd5b505050506040513d60208110156126fa57600080fd5b50511561270657600080fd5b6014805461ff001916610100179055600954604080517f5299ccc60000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691635299ccc691600480820192602092909190829003018186803b15801561277357600080fd5b505afa158015612787573d6000803e3d6000fd5b505050506040513d602081101561279d57600080fd5b5051156123d457601080546202a3008101600f55622a30000190556000601155565b600954600160a060020a031681565b600a54600160a060020a031681565b600c54600160a060020a031633146127f457600080fd5b61038460105401421180156128135750601154601054016213c6800142105b151561281e57600080fd5b600854604080517f48a46bd3000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915191909216916348a46bd3916024808301926020929190829003018186803b15801561288457600080fd5b505afa158015612898573d6000803e3d6000fd5b505050506040513d60208110156128ae57600080fd5b5051156128ba57600080fd5b600854604080517fe6f091f9000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163e6f091f9916024808301926020929190829003018186803b15801561292057600080fd5b505afa158015612934573d6000803e3d6000fd5b505050506040513d602081101561294a57600080fd5b50511561298a57600160a060020a0381166000908152600d602090815260408083205460058054919091039055600e909152902054600680549190910390555b600254604080517f8d1fdf2f000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291519190921691638d1fdf2f91602480830192600092919082900301818387803b1580156129f157600080fd5b505af1158015612a05573d6000803e3d6000fd5b5050600854604080517fab0da5a9000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152915191909216935063ab0da5a99250602480830192600092919082900301818387803b15801561134b57600080fd5b801515612a7c57611387565b600080612a8884611cd8565b90506a052b7d2dcc80cd2e400000600354108015612aac57506010546202a3000142115b80612aed57506003816003811115612ac057fe5b1480612ad757506001816003811115612ad557fe5b145b8015612aed575060115460105401621669800142115b15612c1357600160a060020a0384166000908152600d6020526040812054925082118015612b325750600160a060020a0384166000908152600e602052604090205483145b1515612b3d57600080fd5b604051600160a060020a0385169083156108fc029084906000818181858888f19350505050158015612b73573d6000803e3d6000fd5b50600160a060020a038085166000818152600d60209081526040808320839055600e90915280822082905560025481517f45c8b1a6000000000000000000000000000000000000000000000000000000008152600481019490945290519316926345c8b1a692602480820193929182900301818387803b158015612bf657600080fd5b505af1158015612c0a573d6000803e3d6000fd5b50505050612e49565b600254604080517f57bd7811000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151869392909216916357bd781191602480820192602092909190829003018186803b158015612c7c57600080fd5b505afa158015612c90573d6000803e3d6000fd5b505050506040513d6020811015612ca657600080fd5b50511015612cb357600080fd5b600b54604080517ffd535203000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163fd535203916024808201926020929091908290030181600087803b158015612d1a57600080fd5b505af1158015612d2e573d6000803e3d6000fd5b505050506040513d6020811015612d4457600080fd5b5051604051909250600160a060020a0385169083156108fc029084906000818181858888f19350505050158015612d7f573d6000803e3d6000fd5b50600a54604080517fe78473c4000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163e78473c49160248082019260009290919082900301818387803b158015612de657600080fd5b505af1158015612dfa573d6000803e3d6000fd5b505060408051600160a060020a03881681526020810187905280820186905290517f73f04af9dcc582a923ec15d3eea990fe34adabfff2879e28d44572e01a54abb69350908190036060019150a15b600254604080517f42966c68000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a03909216916342966c689160248082019260009290919082900301818387803b158015612eaf57600080fd5b505af1158015612ec3573d6000803e3d6000fd5b505050505050505056fea165627a7a7230582073895a1ad6835749f99afa1321661441157ecf823d3ab23e5a14570e4e0cd7fb0029"
}