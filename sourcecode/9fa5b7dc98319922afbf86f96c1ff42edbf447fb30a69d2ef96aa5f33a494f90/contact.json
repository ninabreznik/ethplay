{
  "address": "0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CREToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-24\n*/\n\npragma solidity ^0.4.24;\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n\n\tfunction safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\n\t\tuint256 c = a * b;\n\t\tjudgement(a == 0 || c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\n\t\tjudgement(b > 0);\n\t\tuint256 c = a / b;\n\t\tjudgement(a == b * c + a % b);\n\t\treturn c;\n\t}\n\n\tfunction safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\n\t\tjudgement(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tjudgement(c >= a && c >= b);\n\t\treturn c;\n\t}\n\n\tfunction safeMulWithPresent(uint256 a, uint256 b) pure internal returns (uint256){\n\t\tuint256 c = safeDiv(safeMul(a, b), 1000);\n\t\tjudgement(b == (c * 1000) / a);\n\t\treturn c;\n\t}\n\n\tfunction judgement(bool assertion) pure internal {\n\t\tif (!assertion) {\n\t\t\trevert();\n\t\t}\n\t}\n}\n\ncontract CREAuth {\n\taddress public owner;\n\tconstructor () public{\n\t\towner = msg.sender;\n\t}\n\tevent LogOwnerChanged (address msgSender);\n\n\t///@notice check if the msgSender is owner\n\tmodifier onlyOwner{\n\t\tassert(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction setOwner(address newOwner) public onlyOwner returns (bool){\n\t\trequire(newOwner != address(0));\n\t\towner = newOwner;\n\t\temit LogOwnerChanged(msg.sender);\n\t\treturn true;\n\t}\n\n}\n\ncontract Token is SafeMath {\n\t/*\n\t\tStandard ERC20 token\n\t*/\n\tuint256 public totalSupply;\n\tuint256 internal maxSupply;\n\t/// total amount of tokens\n\t/// @param _owner The address from which the balance will be retrieved\n\t/// @return The balance\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\n\n\t/// @notice send `_value` token to `_to` from `msg.sender`\n\t/// @param _to The address of the recipient\n\t/// @param _value The amount of token to be transferred\n\t/// @return Whether the transfer was successful or not\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n\n\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n\t/// @param _from The address of the sender\n\t/// @param _to The address of the recipient\n\t/// @param _value The amount of token to be transferred\n\t/// @return Whether the transfer was successful or not\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n\t/// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n\t/// @param _spender The address of the account able to transfer the tokens\n\t/// @param _value The amount of tokens to be approved for transfer\n\t/// @return Whether the approval was successful or not\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n\n\t/// @param _owner The address of the account owning tokens\n\t/// @param _spender The address of the account able to transfer the tokens\n\t/// @return Amount of remaining tokens allowed to spent\n\tfunction allowance(address _owner, address _spender) view public returns (uint256 remaining);\n\n\t/// @notice transferred\n\t/// @param amount The amount need to burn\n\n\tfunction burn(uint256 amount) public returns (bool);\n\n\t/// mapping the main chain's key to eth key\n\t/// @param key Tf main chain\n\tfunction register(string key) public returns (bool);\n\n\t/// mint the token to token owner\n\t/// @param amountOfMint of token mint\n\tfunction mint(uint256 amountOfMint) public returns (bool);\n\n\tevent Transfer                           (address indexed _from, address indexed _to, uint256 _value);\n\tevent Approval                           (address indexed _owner, address indexed _spender, uint256 _value);\n\tevent Burn                               (address indexed _owner, uint256 indexed _value);\n\tevent LogRegister                        (address user, string key);\n\tevent Mint                               (address user,uint256 indexed amountOfMint);\n}\n\ncontract StandardToken is Token, CREAuth {\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool ind) {\n\t\t//Default assumes totalSupply can't be over max (2^256 - 1).\n\t\t//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n\t\t//Replace the if with this one instead.\n\n\t\trequire(_to != address(0));\n\t\tassert(balances[msg.sender] >= _value && _value > 0);\n\n\t\tbalances[msg.sender] = safeSub(balances[msg.sender], _value);\n\t\tbalances[_to] = safeAdd(balances[_to], _value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\t//same as above. Replace this line with the following if you want to protect against wrapping uints.\n\t\trequire(_to != address(0));\n\t\tassert(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n\n\t\tbalances[_to] = safeAdd(balances[_to], _value);\n\t\tbalances[_from] = safeSub(balances[_from], _value);\n\t\tallowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\trequire(_spender != address(0));\n\t\trequire(_value > 0);\n\t\trequire(allowed[msg.sender][_spender] == 0);\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\tfunction allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\tfunction burn(uint256 amount) public onlyOwner returns (bool){\n\n\t\trequire(balances[msg.sender] >= amount);\n\t\tbalances[msg.sender] = safeSub(balances[msg.sender], amount);\n\t\ttotalSupply = safeSub(totalSupply, amount);\n\t\temit Burn(msg.sender, amount);\n\t\treturn true;\n\n\t}\n\n\tfunction register(string key) public returns (bool){\n\t\tassert(bytes(key).length <= 64);\n\n\t\tkeys[msg.sender] = key;\n\t\temit LogRegister(msg.sender, key);\n\t\treturn true;\n\t}\n\n\tfunction mint(uint256 amountOfMint) public onlyOwner returns (bool){\n\t\t//if totalSupply + amountOfMint <= maxSupply then mint token to contract owner\n\t\trequire(safeAdd(totalSupply, amountOfMint) <= maxSupply);\n\t\ttotalSupply = safeAdd(totalSupply, amountOfMint);\n\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], amountOfMint);\n\t\temit Mint(msg.sender ,amountOfMint);\n\t\treturn true;\n\t}\n\n\tmapping(address => uint256)                      internal balances;\n\tmapping(address => mapping(address => uint256))  private  allowed;\n\tmapping(address => string)                       private  keys;\n\n}\n\ncontract CREToken is StandardToken {\n\n\tstring public name = \"CoinRealEcosystem\";                                   /// Set the full name of this contract\n\tuint256 public decimals = 18;                                 /// Set the decimal\n\tstring public symbol = \"CRE\";                                 /// Set the symbol of this contract\n\n\n\tconstructor() public {/// Should have sth in this\n\t\towner = msg.sender;\n\t\ttotalSupply = 1000000000000000000000000000;\n\t\t/// 10 Billion for init mint\n\t\tmaxSupply = 2000000000000000000000000000;\n\t\t/// set Max supply as 20 billion\n\t\tbalances[msg.sender] = totalSupply;\n\t}\n\n\tfunction() public {\n\t\trevert();\n\t}\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountOfMint\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ind\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amountOfMint\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]",
  "bytecode": "60c0604052601160808190527f436f696e5265616c45636f73797374656d00000000000000000000000000000060a090815261003e91600691906100e6565b5060126007556040805180820190915260038082527f43524500000000000000000000000000000000000000000000000000000000006020909201918252610088916008916100e6565b5034801561009557600080fd5b506002805433600160a060020a0319918216811790911681179091556b033b2e3c9fd0803ce800000060008181556b06765c793fa10079d00000006001559182526003602052604090912055610181565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012757805160ff1916838001178555610154565b82800160010185558215610154579182015b82811115610154578251825591602001919060010190610139565b50610160929150610164565b5090565b61017e91905b80821115610160576000815560010161016a565b90565b610b89806101906000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e1578063095ea7b31461016b57806313af4035146101a357806318160ddd146101c457806323b872dd146101eb578063313ce5671461021557806342966c681461022a57806370a08231146102425780638da5cb5b1461026357806395d89b4114610294578063a0712d68146102a9578063a9059cbb146102c1578063dd62ed3e146102e5578063f2c298be1461030c575b3480156100db57600080fd5b50600080fd5b3480156100ed57600080fd5b506100f6610365565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610130578181015183820152602001610118565b50505050905090810190601f16801561015d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017757600080fd5b5061018f600160a060020a03600435166024356103f3565b604080519115158252519081900360200190f35b3480156101af57600080fd5b5061018f600160a060020a03600435166104ac565b3480156101d057600080fd5b506101d961053c565b60408051918252519081900360200190f35b3480156101f757600080fd5b5061018f600160a060020a0360043581169060243516604435610542565b34801561022157600080fd5b506101d96106ac565b34801561023657600080fd5b5061018f6004356106b2565b34801561024e57600080fd5b506101d9600160a060020a0360043516610755565b34801561026f57600080fd5b50610278610770565b60408051600160a060020a039092168252519081900360200190f35b3480156102a057600080fd5b506100f661077f565b3480156102b557600080fd5b5061018f6004356107da565b3480156102cd57600080fd5b5061018f600160a060020a0360043516602435610882565b3480156102f157600080fd5b506101d9600160a060020a0360043581169060243516610964565b34801561031857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261018f94369492936024939284019190819084018382808284375094975061098f9650505050505050565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103eb5780601f106103c0576101008083540402835291602001916103eb565b820191906000526020600020905b8154815290600101906020018083116103ce57829003601f168201915b505050505081565b6000600160a060020a038316151561040a57600080fd5b6000821161041757600080fd5b336000908152600460209081526040808320600160a060020a03871684529091529020541561044557600080fd5b336000818152600460209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600254600090600160a060020a031633146104c357fe5b600160a060020a03821615156104d857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790556040805133815290517fa414b3eaf11f6c863a0bb4b36d8231c14e687177fa35fc1ac22b8ff4cd2c109f916020908290030190a1506001919050565b60005481565b6000600160a060020a038316151561055957600080fd5b600160a060020a03841660009081526003602052604090205482118015906105a45750600160a060020a03841660009081526004602090815260408083203384529091529020548211155b80156105b05750600082115b15156105b857fe5b600160a060020a0383166000908152600360205260409020546105db9083610a7b565b600160a060020a03808516600090815260036020526040808220939093559086168152205461060a9083610a9f565b600160a060020a03851660009081526003602090815260408083209390935560048152828220338352905220546106419083610a9f565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60075481565b600254600090600160a060020a031633146106c957fe5b336000908152600360205260409020548211156106e557600080fd5b336000908152600360205260409020546106ff9083610a9f565b336000908152600360205260408120919091555461071d9083610a9f565b6000908155604051839133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59190a3506001919050565b600160a060020a031660009081526003602052604090205490565b600254600160a060020a031681565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103eb5780601f106103c0576101008083540402835291602001916103eb565b600254600090600160a060020a031633146107f157fe5b60015461080060005484610a7b565b111561080b57600080fd5b61081760005483610a7b565b6000908155338152600360205260409020546108339083610a7b565b336000818152600360209081526040918290209390935580519182525184927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885928290030190a2506001919050565b6000600160a060020a038316151561089957600080fd5b3360009081526003602052604090205482118015906108b85750600082115b15156108c057fe5b336000908152600360205260409020546108da9083610a9f565b3360009081526003602052604080822092909255600160a060020a038516815220546109069083610a7b565b600160a060020a0384166000818152600360209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b6000604082511115151561099f57fe5b33600090815260056020908152604090912083516109bf92850190610ac2565b507fd80364ba2cbb1e827ab8adac9651cdfc27fb7b61c0a95663cb80b82d7636ad2233836040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a38578181015183820152602001610a20565b50505050905090810190601f168015610a655780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1506001919050565b6000828201610a98848210801590610a935750838210155b610ab3565b9392505050565b6000610aad83831115610ab3565b50900390565b801515610abf57600080fd5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b0357805160ff1916838001178555610b30565b82800160010185558215610b30579182015b82811115610b30578251825591602001919060010190610b15565b50610b3c929150610b40565b5090565b610b5a91905b80821115610b3c5760008155600101610b46565b905600a165627a7a723058200bf82e4b106f8b5ef991aaf899bd4088ecbd01970ffb6fe141afcba7fa2a32c30029"
}