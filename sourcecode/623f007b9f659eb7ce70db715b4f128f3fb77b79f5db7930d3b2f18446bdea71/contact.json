{
  "address": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PayBits",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-09\n*/\n\npragma solidity ^0.4.16;\n\n    contract ERC20 {\n     function totalSupply() constant returns (uint256 totalSupply);\n     function balanceOf(address _owner) constant returns (uint256 balance);\n     function transfer(address _to, uint256 _value) returns (bool success);\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n     function approve(address _spender, uint256 _value) returns (bool success);\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n }\n \n  // PayBits is ERC20 Token\n  contract PayBits is ERC20 {\n     string public constant symbol = \"PYB\";\n     string public constant name = \"PayBits\";\n     uint8 public constant decimals = 18;\n     uint256 _totalSupply = 21000000 * 10**18;\n     \n\n     address public owner;\n  \n     mapping(address => uint256) balances;\n  \n     mapping(address => mapping (address => uint256)) allowed;\n     \n        // Total Supply of Token will be 21 Million only\n     function PayBits() {\n         owner = msg.sender;\n         balances[owner] = 21000000 * 10**18;\n     }\n     \n     modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n     \n     // To Distribute AirDrops for Applicants of Round 1\n     function AirDropPayBitsR1(address[] addresses) onlyOwner {\n         for (uint i = 0; i < addresses.length; i++) {\n             balances[owner] -= 400000000000000000000;\n             balances[addresses[i]] += 400000000000000000000;\n             Transfer(owner, addresses[i], 400000000000000000000);\n         }\n     }\n      // To Distribute AirDrops for Applicants of Round 2\n      function AirDropPayBitsR2(address[] addresses) onlyOwner {\n         for (uint i = 0; i < addresses.length; i++) {\n             balances[owner] -= 300000000000000000000;\n             balances[addresses[i]] += 300000000000000000000;\n             Transfer(owner, addresses[i], 300000000000000000000);\n         }\n     }\n      // To Distribute AirDrops for Applicants of Round 3\n     function AirDropPayBitsR3(address[] addresses) onlyOwner {\n         for (uint i = 0; i < addresses.length; i++) {\n             balances[owner] -= 200000000000000000000;\n             balances[addresses[i]] += 200000000000000000000;\n             Transfer(owner, addresses[i], 200000000000000000000);\n         }\n     }\n     \n     // To Distribute AirDrops of Remaining Token To Bounty (Press Release Post, Article submission, Blog submission, Social Sharing Etc)\n     function AirDropPayBitsBounty(address[] addresses) onlyOwner {\n         for (uint i = 0; i < addresses.length; i++) {\n             balances[owner] -= 100000000000000000000;\n             balances[addresses[i]] += 100000000000000000000;\n             Transfer(owner, addresses[i], 100000000000000000000);\n         }\n     }\n        // Total Supply of Coin will be 21 Million only \n     function totalSupply() constant returns (uint256 totalSupply) {\n         totalSupply = _totalSupply;\n     }\n  \n        // For Future Development 20% of token will be used\n     function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n     }\n \n     function transfer(address _to, uint256 _amount) returns (bool success) {\n         if (balances[msg.sender] >= _amount \n            && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[msg.sender] -= _amount;\n             balances[_to] += _amount;\n             Transfer(msg.sender, _to, _amount);\n            return true;\n         } else {\n             return false;\n         }\n     }\n     \n     \n     function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     ) returns (bool success) {\n         if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[_from] -= _amount;\n             allowed[_from][msg.sender] -= _amount;\n             balances[_to] += _amount;\n             Transfer(_from, _to, _amount);\n             return true;\n         } else {\n            return false;\n         }\n     }\n \n     function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n    }\n}",
  "bytecode": "60606040526a115eec47f6cf7e35000000600055341561001e57600080fd5b5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a115eec47f6cf7e3500000060026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b6115b9806100e26000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d3578063095ea7b31461016257806318160ddd146101bc57806323b872dd146101e5578063313ce5671461025e578063452b77571461028d57806370a08231146102e75780637475baa6146103345780638da5cb5b1461038e57806395d89b41146103e3578063a9059cbb14610472578063bb785f0e146104cc578063c6dc364014610526578063dd62ed3e14610580575b600080fd5b34156100de57600080fd5b6100e66105ec565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101275780820151818401525b60208101905061010b565b50505050905090810190601f1680156101545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016d57600080fd5b6101a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610625565b604051808215151515815260200191505060405180910390f35b34156101c757600080fd5b6101cf610718565b6040518082815260200191505060405180910390f35b34156101f057600080fd5b610244600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610722565b604051808215151515815260200191505060405180910390f35b341561026957600080fd5b610271610a2e565b604051808260ff1660ff16815260200191505060405180910390f35b341561029857600080fd5b6102e5600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610a33565b005b34156102f257600080fd5b61031e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c3f565b6040518082815260200191505060405180910390f35b341561033f57600080fd5b61038c600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610c89565b005b341561039957600080fd5b6103a1610e95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103ee57600080fd5b6103f6610ebb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104375780820151818401525b60208101905061041b565b50505050905090810190601f1680156104645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047d57600080fd5b6104b2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ef4565b604051808215151515815260200191505060405180910390f35b34156104d757600080fd5b6105246004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506110ed565b005b341561053157600080fd5b61057e6004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506112f9565b005b341561058b57600080fd5b6105d6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611505565b6040518082815260200191505060405180910390f35b6040805190810160405280600781526020017f506179426974730000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000805490505b90565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156107ef575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156107fb5750600082115b80156108865750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610a1d5781600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610a27565b60009050610a27565b5b9392505050565b601281565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9157600080fd5b600090505b8151811015610c3957680ad78ebc5ac620000060026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550680ad78ebc5ac6200000600260008484815181101515610b3357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508181815181101515610b9257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef680ad78ebc5ac62000006040518082815260200191505060405180910390a35b8080600101915050610a96565b5b5b5050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ce757600080fd5b600090505b8151811015610e8f5768056bc75e2d6310000060026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555068056bc75e2d63100000600260008484815181101515610d8957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508181815181101515610de857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef68056bc75e2d631000006040518082815260200191505060405180910390a35b8080600101915050610cec565b5b5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f505942000000000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610f455750600082115b8015610fd05750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156110dd5781600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506110e7565b600090506110e7565b5b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561114b57600080fd5b600090505b81518110156112f3576815af1d78b58c40000060026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506815af1d78b58c4000006002600084848151811015156111ed57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550818181518110151561124c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6815af1d78b58c4000006040518082815260200191505060405180910390a35b8080600101915050611150565b5b5b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561135757600080fd5b600090505b81518110156114ff57681043561a882930000060026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550681043561a88293000006002600084848151811015156113f957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550818181518110151561145857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef681043561a88293000006040518082815260200191505060405180910390a35b808060010191505061135c565b5b5b5050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b929150505600a165627a7a72305820c150b8ffb7675fc193adb8673c247c6ae3c0e38f0f6dc5c4ca431b41d6ded27a0029"
}