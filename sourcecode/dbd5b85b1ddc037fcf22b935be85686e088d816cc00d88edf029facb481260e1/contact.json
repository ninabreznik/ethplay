{
  "address": "0xb1361343464493d8a64ce67ed978acff5beb7cc8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GMBCToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-07\n*/\n\npragma solidity ^0.4.21;\n\n// File: source\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: source\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\n// File: source\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: source\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: source\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: source\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: source\\CappedMintableToken.sol\n\n/**\n * @title Mintable token with an end-of-mint mechanism and token cap\n * Based on openzeppelin-solidity MintableToken & CappedToken\n */\ncontract CappedMintableToken is StandardToken, Ownable {\n  using SafeMath for uint256;\n\n  event Mint(address indexed to, uint256 amount);\n\n  modifier canMint() {\n    require(mintEnabled);\n    _;\n  }\n\n  modifier onlyOwnerOrCrowdsale() {\n    require(msg.sender == owner || msg.sender == crowdsale);\n    _;\n  }\n\n  bool public mintEnabled;\n  bool public transferEnabled;\n  uint256 public cap;\n  address public crowdsale;\n  \n\n\tfunction setCrowdsale(address _crowdsale) public onlyOwner {\n\t\tcrowdsale = _crowdsale;\n\t}\n\n  function CappedMintableToken(uint256 _cap) public {    \n    require(_cap > 0);\n\n    mintEnabled = true;\n    transferEnabled = false;\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwnerOrCrowdsale canMint public returns (bool) {\n    require(totalSupply_.add(_amount) <= cap);\n    require(_amount > 0);\n\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  \n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(transferEnabled);\n\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(transferEnabled);\n\n    return super.transferFrom(_from, _to, _value);\n  }\n  \n}\n\n// File: source\\GMBCTokenBuyable.sol\n\ncontract GMBCTokenBuyable is CappedMintableToken {  \n  bool public payableEnabled; // payable function enabled\n  uint256 public minPurchase; // minimum purchase in wei\n\n  function () external payable {    \n    buyTokens(msg.sender);\n  }\n\n  function setPayableEnabled(bool _payableEnabled) onlyOwner external {\n    payableEnabled = _payableEnabled;\n  }\n\n  function setMinPurchase(uint256 _minPurchase) onlyOwner external {\n    minPurchase = _minPurchase;\n  }\n\n  function buyTokens(address _beneficiary) public payable {\n    require(payableEnabled);\n\n    uint256 weiAmount = msg.value;\n    require(_beneficiary != address(0));\n    require(weiAmount >= minPurchase);\n\n    // calculate token amount to be created\n    uint256 tokens = getTokenAmount(weiAmount);\n    mint(_beneficiary, tokens);\n  }\n\n  function getTokenAmount(uint256 _weiAmount) public view returns (uint256);\n\n   /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function claimEther(uint256 _weiAmount) external onlyOwner {    \n    owner.transfer(_weiAmount);\n  }\n}\n\n// File: source\\openzeppelin-solidity\\contracts\\ownership\\HasNoEther.sol\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this ether.\n * @notice Ether can still be sent to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n */\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(this.balance);\n  }\n}\n\n// File: source\\GMBCToken.sol\n\ncontract GMBCToken is GMBCTokenBuyable {\n\tusing SafeMath for uint256;\n\n\tstring public constant name = \"Gamblica Token\";\n\tstring public constant symbol = \"GMBC\";\n\tuint8 public constant decimals = 18;\n\n\tbool public finalized = false;\n\tuint8 public bonus = 0;\t\t\t\t// bonus value in % (0 - 100)\n\tuint256 public basePrice = 10000;\t// base GMBC per 1 ETH\n\n\t/**\n\t * GMBCToken\n\t * https://gamblica.com \n\t * Official Gamblica Coin (Token)\n\t */\n\tfunction GMBCToken() public \n\t\tCappedMintableToken( 600000000 * (10 ** uint256(decimals)) ) // 60%, 40% will be minted on finalize\n\t{}\n\n\t/**\n\t * Sets current bonus (%)\n\t */\n\tfunction setBonus(uint8 _bonus) onlyOwnerOrCrowdsale external {\t\t\n\t\trequire(_bonus >= 0 && _bonus <= 100);\n\t\tbonus = _bonus;\n\t}\n\n\tfunction setBasePrice(uint256 _basePrice) onlyOwner external {\n\t\trequire(_basePrice > 0);\n\t\tbasePrice = _basePrice;\n\t}\n\n\t/**\n\t * Returns token amount for wei investment\n\t */\n\tfunction getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\t\t\n\t\trequire(decimals == 18);\n\t\tuint256 gmbc = _weiAmount.mul(basePrice);\n\t\treturn gmbc.add(gmbc.mul(bonus).div(100));\n\t}\n\n\t/**\n\t\tPerforms the final stage of the token sale, \n\t\tmints additional 40% of token fund,\n\t\ttransfers minted tokens to an external fund\n\t\t(20% game fund, 10% team, 5% advisory board, 3% bounty, 2% founders)\n\t*/\n\tfunction finalize(address _fund) public onlyOwner returns (bool) {\n\t\trequire(!finalized);\t\t\n\t\trequire(_fund != address(0));\n\n\t\tuint256 amount = totalSupply_.mul(4).div(6);\t// +40% \n\n\t\ttotalSupply_ = totalSupply_.add(amount);\n    \tbalances[_fund] = balances[_fund].add(amount);\n    \temit Mint(_fund, amount);\n    \temit Transfer(address(0), _fund, amount);\n    \n\t\tmintEnabled = false;\n\t\ttransferEnabled = true;\n\t\tfinalized = true;\n\n\t\treturn true;\n\t}\n\n\n\t\n}",
  "bytecode": ""
}