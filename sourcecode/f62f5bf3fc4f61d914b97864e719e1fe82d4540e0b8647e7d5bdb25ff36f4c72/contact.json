{
  "address": "0xa9e3440d5c64e99c77410ec4b15746b835add59e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoZoo",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-04\n*/\n\npragma solidity ^0.4.21;\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address previousOwner, address newOwner);\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract StorageBase is Ownable {\n\n    function withdrawBalance() external onlyOwner returns (bool) {\n        // The owner has a method to withdraw balance from multiple contracts together,\n        // use send here to make sure even if one withdrawBalance fails the others will still work\n        bool res = msg.sender.send(address(this).balance);\n        return res;\n    }\n}\n\n// owner of ActivityStorage should be ActivityCore contract address\ncontract ActivityStorage is StorageBase {\n\n    struct Activity {\n        // accept bid or not\n        bool isPause;\n        // limit max num of monster buyable per address\n        uint16 buyLimit;\n        // price (in wei)\n        uint128 packPrice;\n        // startDate (in seconds)\n        uint64 startDate;\n        // endDate (in seconds)\n        uint64 endDate;\n        // packId => address of bid winner\n        mapping(uint16 => address) soldPackToAddress;\n        // address => number of success bid\n        mapping(address => uint16) addressBoughtCount;\n    }\n\n    // limit max activityId to 65536, big enough\n    mapping(uint16 => Activity) public activities;\n\n    function createActivity(\n        uint16 _activityId,\n        uint16 _buyLimit,\n        uint128 _packPrice,\n        uint64 _startDate,\n        uint64 _endDate\n    ) \n        external\n        onlyOwner\n    {\n        // activity should not exist and can only be initialized once\n        require(activities[_activityId].buyLimit == 0);\n\n        activities[_activityId] = Activity({\n            isPause: false,\n            buyLimit: _buyLimit,\n            packPrice: _packPrice,\n            startDate: _startDate,\n            endDate: _endDate\n        });\n    }\n\n    function sellPackToAddress(\n        uint16 _activityId, \n        uint16 _packId, \n        address buyer\n    ) \n        external \n        onlyOwner\n    {\n        Activity storage activity = activities[_activityId];\n        activity.soldPackToAddress[_packId] = buyer;\n        activity.addressBoughtCount[buyer]++;\n    }\n\n    function pauseActivity(uint16 _activityId) external onlyOwner {\n        activities[_activityId].isPause = true;\n    }\n\n    function unpauseActivity(uint16 _activityId) external onlyOwner {\n        activities[_activityId].isPause = false;\n    }\n\n    function deleteActivity(uint16 _activityId) external onlyOwner {\n        delete activities[_activityId];\n    }\n\n    function getAddressBoughtCount(uint16 _activityId, address buyer) external view returns (uint16) {\n        return activities[_activityId].addressBoughtCount[buyer];\n    }\n\n    function getBuyerAddress(uint16 _activityId, uint16 packId) external view returns (address) {\n        return activities[_activityId].soldPackToAddress[packId];\n    }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract HasNoContracts is Pausable {\n\n    function reclaimContract(address _contractAddr) external onlyOwner whenPaused {\n        Ownable contractInst = Ownable(_contractAddr);\n        contractInst.transferOwnership(owner);\n    }\n}\n\ncontract ERC721 {\n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\ncontract LogicBase is HasNoContracts {\n\n    /// The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_NFC = bytes4(0x9f40b779);\n\n    // Reference to contract tracking NFT ownership\n    ERC721 public nonFungibleContract;\n\n    // Reference to storage contract\n    StorageBase public storageContract;\n\n    function LogicBase(address _nftAddress, address _storageAddress) public {\n        // paused by default\n        paused = true;\n\n        setNFTAddress(_nftAddress);\n\n        require(_storageAddress != address(0));\n        storageContract = StorageBase(_storageAddress);\n    }\n\n    // Very dangerous action, only when new contract has been proved working\n    // Requires storageContract already transferOwnership to the new contract\n    // This method is only used to transfer the balance to owner\n    function destroy() external onlyOwner whenPaused {\n        address storageOwner = storageContract.owner();\n        // owner of storageContract must not be the current contract otherwise the storageContract will forever not accessible\n        require(storageOwner != address(this));\n        // Transfers the current balance to the owner and terminates the contract\n        selfdestruct(owner);\n    }\n\n    // Very dangerous action, only when new contract has been proved working\n    // Requires storageContract already transferOwnership to the new contract\n    // This method is only used to transfer the balance to the new contract\n    function destroyAndSendToStorageOwner() external onlyOwner whenPaused {\n        address storageOwner = storageContract.owner();\n        // owner of storageContract must not be the current contract otherwise the storageContract will forever not accessible\n        require(storageOwner != address(this));\n        // Transfers the current balance to the new owner of the storage contract and terminates the contract\n        selfdestruct(storageOwner);\n    }\n\n    // override to make sure everything is initialized before the unpause\n    function unpause() public onlyOwner whenPaused {\n        // can not unpause when the logic contract is not initialzed\n        require(nonFungibleContract != address(0));\n        require(storageContract != address(0));\n        // can not unpause when ownership of storage contract is not the current contract\n        require(storageContract.owner() == address(this));\n\n        super.unpause();\n    }\n\n    function setNFTAddress(address _nftAddress) public onlyOwner {\n        require(_nftAddress != address(0));\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_NFC));\n        nonFungibleContract = candidateContract;\n    }\n\n    // Withdraw balance to the Core Contract\n    function withdrawBalance() external returns (bool) {\n        address nftAddress = address(nonFungibleContract);\n        // either Owner or Core Contract can trigger the withdraw\n        require(msg.sender == owner || msg.sender == nftAddress);\n        // The owner has a method to withdraw balance from multiple contracts together,\n        // use send here to make sure even if one withdrawBalance fails the others will still work\n        bool res = nftAddress.send(address(this).balance);\n        return res;\n    }\n\n    function withdrawBalanceFromStorageContract() external returns (bool) {\n        address nftAddress = address(nonFungibleContract);\n        // either Owner or Core Contract can trigger the withdraw\n        require(msg.sender == owner || msg.sender == nftAddress);\n        // The owner has a method to withdraw balance from multiple contracts together,\n        // use send here to make sure even if one withdrawBalance fails the others will still work\n        bool res = storageContract.withdrawBalance();\n        return res;\n    }\n}\n\ncontract ActivityCore is LogicBase {\n\n    bool public isActivityCore = true;\n\n    ActivityStorage activityStorage;\n\n    event ActivityCreated(uint16 activityId);\n    event ActivityBidSuccess(uint16 activityId, uint16 packId, address winner);\n\n    function ActivityCore(address _nftAddress, address _storageAddress) \n        LogicBase(_nftAddress, _storageAddress) public {\n            \n        activityStorage = ActivityStorage(_storageAddress);\n    }\n\n    function createActivity(\n        uint16 _activityId,\n        uint16 _buyLimit,\n        uint128 _packPrice,\n        uint64 _startDate,\n        uint64 _endDate\n    ) \n        external\n        onlyOwner\n        whenNotPaused\n    {\n        activityStorage.createActivity(_activityId, _buyLimit, _packPrice, _startDate, _endDate);\n\n        emit ActivityCreated(_activityId);\n    }\n\n    // Very dangerous action and should be only used for testing\n    // Must pause the contract first \n    function deleteActivity(\n        uint16 _activityId\n    )\n        external \n        onlyOwner\n        whenPaused\n    {\n        activityStorage.deleteActivity(_activityId);\n    }\n\n    function getActivity(\n        uint16 _activityId\n    ) \n        external \n        view  \n        returns (\n            bool isPause,\n            uint16 buyLimit,\n            uint128 packPrice,\n            uint64 startDate,\n            uint64 endDate\n        )\n    {\n        return activityStorage.activities(_activityId);\n    }\n    \n    function bid(uint16 _activityId, uint16 _packId)\n        external\n        payable\n        whenNotPaused\n    {\n        bool isPause;\n        uint16 buyLimit;\n        uint128 packPrice;\n        uint64 startDate;\n        uint64 endDate;\n        (isPause, buyLimit, packPrice, startDate, endDate) = activityStorage.activities(_activityId);\n        // not allow to bid when activity is paused\n        require(!isPause);\n        // not allow to bid when activity is not initialized (buyLimit == 0)\n        require(buyLimit > 0);\n        // should send enough ether\n        require(msg.value >= packPrice);\n        // verify startDate & endDate\n        require(now >= startDate && now <= endDate);\n        // this pack is not sold out\n        require(activityStorage.getBuyerAddress(_activityId, _packId) == address(0));\n        // buyer not exceed buyLimit\n        require(activityStorage.getAddressBoughtCount(_activityId, msg.sender) < buyLimit);\n        // record in blockchain\n        activityStorage.sellPackToAddress(_activityId, _packId, msg.sender);\n        // emit the success event\n        emit ActivityBidSuccess(_activityId, _packId, msg.sender);\n    }\n}\n\ncontract CryptoStorage is StorageBase {\n\n    struct Monster {\n        uint32 matronId;\n        uint32 sireId;\n        uint32 siringWithId;\n        uint16 cooldownIndex;\n        uint16 generation;\n        uint64 cooldownEndBlock;\n        uint64 birthTime;\n        uint16 monsterId;\n        uint32 monsterNum;\n        bytes properties;\n    }\n\n    // ERC721 tokens\n    Monster[] internal monsters;\n\n    // total number of monster created from system instead of breeding\n    uint256 public promoCreatedCount;\n\n    // total number of monster created by system sale address\n    uint256 public systemCreatedCount;\n\n    // number of monsters in pregnant\n    uint256 public pregnantMonsters;\n    \n    // monsterId => total number\n    mapping (uint256 => uint32) public monsterCurrentNumber;\n    \n    // tokenId => owner address\n    mapping (uint256 => address) public monsterIndexToOwner;\n\n    // owner address => balance of tokens\n    mapping (address => uint256) public ownershipTokenCount;\n\n    // tokenId => approved address\n    mapping (uint256 => address) public monsterIndexToApproved;\n\n    function CryptoStorage() public {\n        // placeholder to make the first available monster to have a tokenId starts from 1\n        createMonster(0, 0, 0, 0, 0, \"\");\n    }\n\n    function createMonster(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256 _birthTime,\n        uint256 _monsterId,\n        bytes _properties\n    ) \n        public \n        onlyOwner\n        returns (uint256)\n    {\n        require(_matronId == uint256(uint32(_matronId)));\n        require(_sireId == uint256(uint32(_sireId)));\n        require(_generation == uint256(uint16(_generation)));\n        require(_birthTime == uint256(uint64(_birthTime)));\n        require(_monsterId == uint256(uint16(_monsterId)));\n\n        monsterCurrentNumber[_monsterId]++;\n\n        Monster memory monster = Monster({\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: 0,\n            generation: uint16(_generation),\n            cooldownEndBlock: 0,\n            birthTime: uint64(_birthTime),\n            monsterId: uint16(_monsterId),\n            monsterNum: monsterCurrentNumber[_monsterId],\n            properties: _properties\n        });\n        uint256 tokenId = monsters.push(monster) - 1;\n\n        // overflow check\n        require(tokenId == uint256(uint32(tokenId)));\n\n        return tokenId;\n    }\n\n    function getMonster(uint256 _tokenId)\n        external\n        view\n        returns (\n            bool isGestating,\n            bool isReady,\n            uint16 cooldownIndex,\n            uint64 nextActionAt,\n            uint32 siringWithId,\n            uint32 matronId,\n            uint32 sireId,\n            uint64 cooldownEndBlock,\n            uint16 generation,\n            uint64 birthTime,\n            uint32 monsterNum,\n            uint16 monsterId,\n            bytes properties\n        ) \n    {\n        Monster storage monster = monsters[_tokenId];\n\n        isGestating = (monster.siringWithId != 0);\n        isReady = (monster.cooldownEndBlock <= block.number);\n        cooldownIndex = monster.cooldownIndex;\n        nextActionAt = monster.cooldownEndBlock;\n        siringWithId = monster.siringWithId;\n        matronId = monster.matronId;\n        sireId = monster.sireId;\n        cooldownEndBlock = monster.cooldownEndBlock;\n        generation = monster.generation;\n        birthTime = monster.birthTime;\n        monsterNum = monster.monsterNum;\n        monsterId = monster.monsterId;\n        properties = monster.properties;\n    }\n\n    function getMonsterCount() external view returns (uint256) {\n        return monsters.length - 1;\n    }\n\n    function getMatronId(uint256 _tokenId) external view returns (uint32) {\n        return monsters[_tokenId].matronId;\n    }\n\n    function getSireId(uint256 _tokenId) external view returns (uint32) {\n        return monsters[_tokenId].sireId;\n    }\n\n    function getSiringWithId(uint256 _tokenId) external view returns (uint32) {\n        return monsters[_tokenId].siringWithId;\n    }\n    \n    function setSiringWithId(uint256 _tokenId, uint32 _siringWithId) external onlyOwner {\n        monsters[_tokenId].siringWithId = _siringWithId;\n    }\n\n    function deleteSiringWithId(uint256 _tokenId) external onlyOwner {\n        delete monsters[_tokenId].siringWithId;\n    }\n\n    function getCooldownIndex(uint256 _tokenId) external view returns (uint16) {\n        return monsters[_tokenId].cooldownIndex;\n    }\n\n    function setCooldownIndex(uint256 _tokenId) external onlyOwner {\n        monsters[_tokenId].cooldownIndex += 1;\n    }\n\n    function getGeneration(uint256 _tokenId) external view returns (uint16) {\n        return monsters[_tokenId].generation;\n    }\n\n    function getCooldownEndBlock(uint256 _tokenId) external view returns (uint64) {\n        return monsters[_tokenId].cooldownEndBlock;\n    }\n\n    function setCooldownEndBlock(uint256 _tokenId, uint64 _cooldownEndBlock) external onlyOwner {\n        monsters[_tokenId].cooldownEndBlock = _cooldownEndBlock;\n    }\n\n    function getBirthTime(uint256 _tokenId) external view returns (uint64) {\n        return monsters[_tokenId].birthTime;\n    }\n\n    function getMonsterId(uint256 _tokenId) external view returns (uint16) {\n        return monsters[_tokenId].monsterId;\n    }\n\n    function getMonsterNum(uint256 _tokenId) external view returns (uint32) {\n        return monsters[_tokenId].monsterNum;\n    }\n\n    function getProperties(uint256 _tokenId) external view returns (bytes) {\n        return monsters[_tokenId].properties;\n    }\n\n    function updateProperties(uint256 _tokenId, bytes _properties) external onlyOwner {\n        monsters[_tokenId].properties = _properties;\n    }\n    \n    function setMonsterIndexToOwner(uint256 _tokenId, address _owner) external onlyOwner {\n        monsterIndexToOwner[_tokenId] = _owner;\n    }\n\n    function increaseOwnershipTokenCount(address _owner) external onlyOwner {\n        ownershipTokenCount[_owner]++;\n    }\n\n    function decreaseOwnershipTokenCount(address _owner) external onlyOwner {\n        ownershipTokenCount[_owner]--;\n    }\n\n    function setMonsterIndexToApproved(uint256 _tokenId, address _approved) external onlyOwner {\n        monsterIndexToApproved[_tokenId] = _approved;\n    }\n    \n    function deleteMonsterIndexToApproved(uint256 _tokenId) external onlyOwner {\n        delete monsterIndexToApproved[_tokenId];\n    }\n\n    function increasePromoCreatedCount() external onlyOwner {\n        promoCreatedCount++;\n    }\n\n    function increaseSystemCreatedCount() external onlyOwner {\n        systemCreatedCount++;\n    }\n\n    function increasePregnantCounter() external onlyOwner {\n        pregnantMonsters++;\n    }\n\n    function decreasePregnantCounter() external onlyOwner {\n        pregnantMonsters--;\n    }\n}\n\ncontract ClockAuctionStorage is StorageBase {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n    }\n\n    // Map from token ID to their corresponding auction.\n    mapping (uint256 => Auction) tokenIdToAuction;\n\n    function addAuction(\n        uint256 _tokenId,\n        address _seller,\n        uint128 _startingPrice,\n        uint128 _endingPrice,\n        uint64 _duration,\n        uint64 _startedAt\n    )\n        external\n        onlyOwner\n    {\n        tokenIdToAuction[_tokenId] = Auction(\n            _seller,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            _startedAt\n        );\n    }\n\n    function removeAuction(uint256 _tokenId) public onlyOwner {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns (\n            address seller,\n            uint128 startingPrice,\n            uint128 endingPrice,\n            uint64 duration,\n            uint64 startedAt\n        )\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }\n\n    function isOnAuction(uint256 _tokenId) external view returns (bool) {\n        return (tokenIdToAuction[_tokenId].startedAt > 0);\n    }\n\n    function getSeller(uint256 _tokenId) external view returns (address) {\n        return tokenIdToAuction[_tokenId].seller;\n    }\n\n    function transfer(ERC721 _nonFungibleContract, address _receiver, uint256 _tokenId) external onlyOwner {\n        // it will throw if transfer fails\n        _nonFungibleContract.transfer(_receiver, _tokenId);\n    }\n}\n\ncontract SaleClockAuctionStorage is ClockAuctionStorage {\n    bool public isSaleClockAuctionStorage = true;\n\n    // total accumulate sold count\n    uint256 public totalSoldCount;\n\n    // last 3 sale price\n    uint256[3] public lastSoldPrices;\n\n    // current on sale auction count from system\n    uint256 public systemOnSaleCount;\n\n    // map of on sale token ids from system\n    mapping (uint256 => bool) systemOnSaleTokens;\n\n    function removeAuction(uint256 _tokenId) public onlyOwner {\n        // first remove auction from state variable\n        super.removeAuction(_tokenId);\n\n        // update system on sale record\n        if (systemOnSaleTokens[_tokenId]) {\n            delete systemOnSaleTokens[_tokenId];\n            \n            if (systemOnSaleCount > 0) {\n                systemOnSaleCount--;\n            }\n        }\n    }\n\n    function recordSystemOnSaleToken(uint256 _tokenId) external onlyOwner {\n        if (!systemOnSaleTokens[_tokenId]) {\n            systemOnSaleTokens[_tokenId] = true;\n            systemOnSaleCount++;\n        }\n    }\n\n    function recordSoldPrice(uint256 _price) external onlyOwner {\n        lastSoldPrices[totalSoldCount % 3] = _price;\n        totalSoldCount++;\n    }\n\n    function averageSoldPrice() external view returns (uint256) {\n        if (totalSoldCount == 0) return 0;\n        \n        uint256 sum = 0;\n        uint256 len = (totalSoldCount < 3 ? totalSoldCount : 3);\n        for (uint256 i = 0; i < len; i++) {\n            sum += lastSoldPrices[i];\n        }\n        return sum / len;\n    }\n}\n\ncontract ClockAuction is LogicBase {\n    \n    // Reference to contract tracking auction state variables\n    ClockAuctionStorage public clockAuctionStorage;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Minimum cut value on each auction (in WEI)\n    uint256 public minCutValue;\n\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner, address seller, uint256 sellerProceeds);\n    event AuctionCancelled(uint256 tokenId);\n\n    function ClockAuction(address _nftAddress, address _storageAddress, uint256 _cut, uint256 _minCutValue) \n        LogicBase(_nftAddress, _storageAddress) public\n    {\n        setOwnerCut(_cut);\n        setMinCutValue(_minCutValue);\n\n        clockAuctionStorage = ClockAuctionStorage(_storageAddress);\n    }\n\n    function setOwnerCut(uint256 _cut) public onlyOwner {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n    }\n\n    function setMinCutValue(uint256 _minCutValue) public onlyOwner {\n        minCutValue = _minCutValue;\n    }\n\n    function getMinPrice() public view returns (uint256) {\n        // return ownerCut > 0 ? (minCutValue / ownerCut * 10000) : 0;\n        // use minCutValue directly, when the price == minCutValue seller will get no profit\n        return minCutValue;\n    }\n\n    // Only auction from none system user need to verify the price\n    // System auction can set any price\n    function isValidPrice(uint256 _startingPrice, uint256 _endingPrice) public view returns (bool) {\n        return (_startingPrice < _endingPrice ? _startingPrice : _endingPrice) >= getMinPrice();\n    }\n\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        public\n        whenNotPaused\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        \n        // assigning ownership to this clockAuctionStorage when in auction\n        // it will throw if transfer fails\n        nonFungibleContract.transferFrom(_seller, address(clockAuctionStorage), _tokenId);\n\n        // Require that all auctions have a duration of at least one minute.\n        require(_duration >= 1 minutes);\n\n        clockAuctionStorage.addAuction(\n            _tokenId,\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n\n        emit AuctionCreated(_tokenId, _startingPrice, _endingPrice, _duration);\n    }\n\n    function cancelAuction(uint256 _tokenId) external {\n        require(clockAuctionStorage.isOnAuction(_tokenId));\n        address seller = clockAuctionStorage.getSeller(_tokenId);\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    function cancelAuctionWhenPaused(uint256 _tokenId) external whenPaused onlyOwner {\n        require(clockAuctionStorage.isOnAuction(_tokenId));\n        address seller = clockAuctionStorage.getSeller(_tokenId);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    function getAuction(uint256 _tokenId)\n        public\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        require(clockAuctionStorage.isOnAuction(_tokenId));\n        return clockAuctionStorage.getAuction(_tokenId);\n    }\n\n    function getCurrentPrice(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        require(clockAuctionStorage.isOnAuction(_tokenId));\n        return _currentPrice(_tokenId);\n    }\n\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        clockAuctionStorage.removeAuction(_tokenId);\n        clockAuctionStorage.transfer(nonFungibleContract, _seller, _tokenId);\n        emit AuctionCancelled(_tokenId);\n    }\n\n    function _bid(uint256 _tokenId, uint256 _bidAmount, address bidder) internal returns (uint256) {\n\n        require(clockAuctionStorage.isOnAuction(_tokenId));\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(_tokenId);\n        require(_bidAmount >= price);\n\n        address seller = clockAuctionStorage.getSeller(_tokenId);\n        uint256 sellerProceeds = 0;\n\n        // Remove the auction before sending the fees to the sender so we can't have a reentrancy attack\n        clockAuctionStorage.removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut, so this subtraction can't go negative\n            uint256 auctioneerCut = _computeCut(price);\n            sellerProceeds = price - auctioneerCut;\n\n            // transfer the sellerProceeds\n            seller.transfer(sellerProceeds);\n        }\n\n        // Calculate any excess funds included with the bid\n        // transfer it back to bidder.\n        // this cannot underflow.\n        uint256 bidExcess = _bidAmount - price;\n        bidder.transfer(bidExcess);\n\n        emit AuctionSuccessful(_tokenId, price, bidder, seller, sellerProceeds);\n\n        return price;\n    }\n\n    function _currentPrice(uint256 _tokenId) internal view returns (uint256) {\n\n        uint256 secondsPassed = 0;\n\n        address seller;\n        uint128 startingPrice;\n        uint128 endingPrice;\n        uint64 duration;\n        uint64 startedAt;\n        (seller, startingPrice, endingPrice, duration, startedAt) = clockAuctionStorage.getAuction(_tokenId);\n\n        if (now > startedAt) {\n            secondsPassed = now - startedAt;\n        }\n\n        return _computeCurrentPrice(\n            startingPrice,\n            endingPrice,\n            duration,\n            secondsPassed\n        );\n    }\n\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_secondsPassed >= _duration) {\n            return _endingPrice;\n        } else {\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }\n\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        uint256 cutValue = _price * ownerCut / 10000;\n        if (_price < minCutValue) return cutValue;\n        if (cutValue > minCutValue) return cutValue;\n        return minCutValue;\n    }\n}\n\ncontract SaleClockAuction is ClockAuction {\n\n    bool public isSaleClockAuction = true;\n\n    address public systemSaleAddress;\n    uint256 public systemStartingPriceMin = 20 finney;\n    uint256 public systemEndingPrice = 0;\n    uint256 public systemAuctionDuration = 1 days;\n\n    function SaleClockAuction(address _nftAddr, address _storageAddress, address _systemSaleAddress, uint256 _cut, uint256 _minCutValue) \n        ClockAuction(_nftAddr, _storageAddress, _cut, _minCutValue) public\n    {\n        require(SaleClockAuctionStorage(_storageAddress).isSaleClockAuctionStorage());\n        \n        setSystemSaleAddress(_systemSaleAddress);\n    }\n  \n    function bid(uint256 _tokenId) external payable {\n        uint256 price = _bid(_tokenId, msg.value, msg.sender);\n        \n        clockAuctionStorage.transfer(nonFungibleContract, msg.sender, _tokenId);\n        \n        SaleClockAuctionStorage(clockAuctionStorage).recordSoldPrice(price);\n    }\n\n    function createSystemAuction(uint256 _tokenId) external {\n        require(msg.sender == address(nonFungibleContract));\n\n        createAuction(\n            _tokenId,\n            computeNextSystemSalePrice(),\n            systemEndingPrice,\n            systemAuctionDuration,\n            systemSaleAddress\n        );\n\n        SaleClockAuctionStorage(clockAuctionStorage).recordSystemOnSaleToken(_tokenId);\n    }\n\n    function setSystemSaleAddress(address _systemSaleAddress) public onlyOwner {\n        require(_systemSaleAddress != address(0));\n        systemSaleAddress = _systemSaleAddress;\n    }\n\n    function setSystemStartingPriceMin(uint256 _startingPrice) external onlyOwner {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        systemStartingPriceMin = _startingPrice;\n    }\n\n    function setSystemEndingPrice(uint256 _endingPrice) external onlyOwner {\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        systemEndingPrice = _endingPrice;\n    }\n\n    function setSystemAuctionDuration(uint256 _duration) external onlyOwner {\n        require(_duration == uint256(uint64(_duration)));\n        systemAuctionDuration = _duration;\n    }\n\n    function totalSoldCount() external view returns (uint256) {\n        return SaleClockAuctionStorage(clockAuctionStorage).totalSoldCount();\n    }\n\n    function systemOnSaleCount() external view returns (uint256) {\n        return SaleClockAuctionStorage(clockAuctionStorage).systemOnSaleCount();\n    }\n\n    function averageSoldPrice() external view returns (uint256) {\n        return SaleClockAuctionStorage(clockAuctionStorage).averageSoldPrice();\n    }\n\n    function computeNextSystemSalePrice() public view returns (uint256) {\n        uint256 avePrice = SaleClockAuctionStorage(clockAuctionStorage).averageSoldPrice();\n\n        require(avePrice == uint256(uint128(avePrice)));\n\n        uint256 nextPrice = avePrice + (avePrice / 2);\n\n        if (nextPrice < systemStartingPriceMin) {\n            nextPrice = systemStartingPriceMin;\n        }\n\n        return nextPrice;\n    }\n}\n\ncontract SiringClockAuctionStorage is ClockAuctionStorage {\n    bool public isSiringClockAuctionStorage = true;\n}\n\ncontract SiringClockAuction is ClockAuction {\n\n    bool public isSiringClockAuction = true;\n\n    function SiringClockAuction(address _nftAddr, address _storageAddress, uint256 _cut, uint256 _minCutValue) \n        ClockAuction(_nftAddr, _storageAddress, _cut, _minCutValue) public\n    {\n        require(SiringClockAuctionStorage(_storageAddress).isSiringClockAuctionStorage());\n    }\n\n    function bid(uint256 _tokenId, address bidder) external payable {\n        // can only be called by CryptoZoo\n        require(msg.sender == address(nonFungibleContract));\n        // get seller before the _bid for the auction will be removed once the bid success\n        address seller = clockAuctionStorage.getSeller(_tokenId);\n        // _bid checks that token ID is valid and will throw if bid fails\n        _bid(_tokenId, msg.value, bidder);\n        // transfer the monster back to the seller, the winner will get the child\n        clockAuctionStorage.transfer(nonFungibleContract, seller, _tokenId);\n    }\n}\n\ncontract ZooAccessControl is HasNoContracts {\n\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    function setCEO(address _newCEO) public onlyCEO {\n        require(_newCEO != address(0));\n        ceoAddress = _newCEO;\n    }\n\n    function setCFO(address _newCFO) public onlyCEO {\n        require(_newCFO != address(0));\n        cfoAddress = _newCFO;\n    }\n    \n    function setCOO(address _newCOO) public onlyCEO {\n        require(_newCOO != address(0));\n        cooAddress = _newCOO;\n    }\n}\n\ncontract Zoo721 is ZooAccessControl, ERC721 {\n\n    // ERC721 Required\n    string public constant name = \"Giftomon\";\n    // ERC721 Required\n    string public constant symbol = \"GTOM\";\n\n    bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256(\"supportsInterface(bytes4)\"));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)'));\n\n    CryptoStorage public cryptoStorage;\n\n    function Zoo721(address _storageAddress) public {\n        require(_storageAddress != address(0));\n        cryptoStorage = CryptoStorage(_storageAddress);\n    }\n\n    // ERC165 Required\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    // ERC721 Required\n    function totalSupply() public view returns (uint) {\n        return cryptoStorage.getMonsterCount();\n    }\n    \n    // ERC721 Required\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return cryptoStorage.ownershipTokenCount(_owner);\n    }\n\n    // ERC721 Required\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\n        owner = cryptoStorage.monsterIndexToOwner(_tokenId);\n        require(owner != address(0));\n    }\n\n    // ERC721 Required\n    function approve(address _to, uint256 _tokenId) external whenNotPaused {\n        require(_owns(msg.sender, _tokenId));\n        _approve(_tokenId, _to);\n        emit Approval(msg.sender, _to, _tokenId);\n    }\n\n    // ERC721 Required\n    function transfer(address _to, uint256 _tokenId) external whenNotPaused {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Not allow to transfer to the contract itself except for system sale monsters\n        require(_to != address(this));\n        // You can only send your own cat.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    // ERC721 Required\n    function transferFrom(address _from, address _to, uint256 _tokenId) external whenNotPaused {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        require(_to != address(this));\n        // Check for approval and valid ownership\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }\n\n    // ERC721 Optional\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalTokens = totalSupply();\n            uint256 resultIndex = 0;\n\n            uint256 tokenId;\n\n            for (tokenId = 1; tokenId <= totalTokens; tokenId++) {\n                if (cryptoStorage.monsterIndexToOwner(tokenId) == _owner) {\n                    result[resultIndex] = tokenId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        // increase number of token owned by _to\n        cryptoStorage.increaseOwnershipTokenCount(_to);\n\n        // transfer ownership\n        cryptoStorage.setMonsterIndexToOwner(_tokenId, _to);\n\n        // new monster born does not have previous owner\n        if (_from != address(0)) {\n            // decrease number of token owned by _from\n            cryptoStorage.decreaseOwnershipTokenCount(_from);\n            // clear any previously approved ownership exchange\n            cryptoStorage.deleteMonsterIndexToApproved(_tokenId);\n        }\n        \n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return cryptoStorage.monsterIndexToOwner(_tokenId) == _claimant;\n    }\n\n    function _approve(uint256 _tokenId, address _approved) internal {\n        cryptoStorage.setMonsterIndexToApproved(_tokenId, _approved);\n    }\n\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return cryptoStorage.monsterIndexToApproved(_tokenId) == _claimant;\n    }\n}\n\ncontract CryptoZoo is Zoo721 {\n\n    uint256 public constant SYSTEM_CREATION_LIMIT = 10000;\n\n    // new monster storage fee for the coo\n    uint256 public autoBirthFee = 2 finney;\n\n    // an approximation of currently how many seconds are in between blocks.\n    uint256 public secondsPerBlock = 15;\n\n    // hatch duration in second by hatch times (start from 0)\n    // default to 1 minute if not set and minimum to 1 minute \n    // must be an integral multiple of 1 minute\n    uint32[] public hatchDurationByTimes = [uint32(1 minutes)];\n\n    // hatch duration multiple value by generation (start from 0)\n    // multiple = value / 60, 60 is the base value\n    // default to 60 if not set and minimum to 60\n    // must be an integral multiple of secondsPerBlock\n    uint32[] public hatchDurationMultiByGeneration = [uint32(60)];\n\n    // sale auctions\n    SaleClockAuction public saleAuction;\n    \n    // siring auctions\n    SiringClockAuction public siringAuction;\n\n    // activity core\n    ActivityCore public activityCore;\n\n    // events\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 matronCooldownEndBlock, uint256 sireCooldownEndBlock, uint256 breedCost);\n    event Birth(address owner, uint256 tokenId, uint256 matronId, uint256 sireId);\n\n    // Core Contract of Giftomon\n    function CryptoZoo(address _storageAddress, address _cooAddress, address _cfoAddress) Zoo721(_storageAddress) public {\n        // paused by default\n        paused = true;\n        // ceo defaults the the contract creator\n        ceoAddress = msg.sender;\n\n        setCOO(_cooAddress);\n        setCFO(_cfoAddress);\n    }\n\n    function() external payable {\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction) ||\n            msg.sender == address(activityCore) || \n            msg.sender == cooAddress\n        );\n    }\n\n    // override to allow any CLevel to pause the contract\n    function pause() public onlyCLevel whenNotPaused {\n        super.pause();\n    }\n\n    // override to make sure everything is initialized before the unpause\n    function unpause() public onlyCEO whenPaused {\n        // can not unpause when CLevel addresses is not initialized\n        require(ceoAddress != address(0));\n        require(cooAddress != address(0));\n        require(cfoAddress != address(0));\n        // can not unpause when the logic contract is not initialzed\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(activityCore != address(0));\n        require(cryptoStorage != address(0));\n        // can not unpause when ownership of storage contract is not the current contract\n        require(cryptoStorage.owner() == address(this));\n\n        super.unpause();\n    }\n\n    // Very dangerous action, only when new contract has been proved working\n    // Requires cryptoStorage already transferOwnership to the new contract\n    // This method is only used to transfer the balance (authBirthFee used for giveBirth) to ceo\n    function destroy() external onlyCEO whenPaused {\n        address storageOwner = cryptoStorage.owner();\n        // owner of cryptoStorage must not be the current contract otherwise the cryptoStorage will forever in accessable\n        require(storageOwner != address(this));\n        // Transfers the current balance to the ceo and terminates the contract\n        selfdestruct(ceoAddress);\n    }\n\n    // Very dangerous action, only when new contract has been proved working\n    // Requires cryptoStorage already transferOwnership to the new contract\n    // This method is only used to transfer the balance (authBirthFee used for giveBirth) to the new contract\n    function destroyAndSendToStorageOwner() external onlyCEO whenPaused {\n        address storageOwner = cryptoStorage.owner();\n        // owner of cryptoStorage must not be the current contract otherwise the cryptoStorage will forever in accessable\n        require(storageOwner != address(this));\n        // Transfers the current balance to the new owner of the storage contract and terminates the contract\n        selfdestruct(storageOwner);\n    }\n\n    function setSaleAuctionAddress(address _address) external onlyCEO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n        require(candidateContract.isSaleClockAuction());\n        saleAuction = candidateContract;\n    }\n\n    function setSiringAuctionAddress(address _address) external onlyCEO {\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n        require(candidateContract.isSiringClockAuction());\n        siringAuction = candidateContract;\n    }\n\n    function setActivityCoreAddress(address _address) external onlyCEO {\n        ActivityCore candidateContract = ActivityCore(_address);\n        require(candidateContract.isActivityCore());\n        activityCore = candidateContract;\n    }\n\n    function withdrawBalance() external onlyCLevel {\n        uint256 balance = address(this).balance;\n        // Subtract all the currently pregnant kittens we have, plus 1 of margin.\n        uint256 subtractFees = (cryptoStorage.pregnantMonsters() + 1) * autoBirthFee;\n\n        if (balance > subtractFees) {\n            cfoAddress.transfer(balance - subtractFees);\n        }\n    }\n\n    function withdrawBalancesToNFC() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n        activityCore.withdrawBalance();\n        cryptoStorage.withdrawBalance();\n    }\n\n    function withdrawBalancesToLogic() external onlyCLevel {\n        saleAuction.withdrawBalanceFromStorageContract();\n        siringAuction.withdrawBalanceFromStorageContract();\n        activityCore.withdrawBalanceFromStorageContract();\n    }\n\n    function setAutoBirthFee(uint256 val) external onlyCOO {\n        autoBirthFee = val;\n    }\n\n    function setAllHatchConfigs(\n        uint32[] _durationByTimes,\n        uint256 _secs,\n        uint32[] _multiByGeneration\n    )\n        external \n        onlyCLevel \n    {\n        setHatchDurationByTimes(_durationByTimes);\n        setSecondsPerBlock(_secs);\n        setHatchDurationMultiByGeneration(_multiByGeneration);\n    }\n\n    function setSecondsPerBlock(uint256 _secs) public onlyCLevel {\n        require(_secs < hatchDurationByTimes[0]);\n        secondsPerBlock = _secs;\n    }\n\n    // we must do a carefully check when set hatch duration configuration, since wrong value may break the whole cooldown logic\n    function setHatchDurationByTimes(uint32[] _durationByTimes) public onlyCLevel {\n        uint256 len = _durationByTimes.length;\n        // hatch duration should not be empty\n        require(len > 0);\n        // check overflow\n        require(len == uint256(uint16(len)));\n        \n        delete hatchDurationByTimes;\n        \n        uint32 value;\n        for (uint256 idx = 0; idx < len; idx++) {\n            value = _durationByTimes[idx];\n            \n            // duration must be larger than 1 minute, and must be an integral multiple of 1 minute\n            require(value >= 1 minutes && value % 1 minutes == 0);\n            \n            hatchDurationByTimes.push(value);\n        }\n    }\n    \n    function getHatchDurationByTimes() external view returns (uint32[]) {\n        return hatchDurationByTimes;\n    }\n\n    // we must do a carefully check when set hatch duration multi configuration, since wrong value may break the whole cooldown logic\n    function setHatchDurationMultiByGeneration(uint32[] _multiByGeneration) public onlyCLevel {\n        uint256 len = _multiByGeneration.length;\n        // multi configuration should not be empty\n        require(len > 0);\n        // check overflow\n        require(len == uint256(uint16(len)));\n        \n        delete hatchDurationMultiByGeneration;\n        \n        uint32 value;\n        for (uint256 idx = 0; idx < len; idx++) {\n            value = _multiByGeneration[idx];\n            \n            // multiple must be larger than 60, and must be an integral multiple of secondsPerBlock\n            require(value >= 60 && value % secondsPerBlock == 0);\n            \n            hatchDurationMultiByGeneration.push(value);\n        }\n    }\n\n    function getHatchDurationMultiByGeneration() external view returns (uint32[]) {\n        return hatchDurationMultiByGeneration;\n    }\n\n    function createPromoMonster(\n        uint32 _monsterId, \n        bytes _properties, \n        address _owner\n    )\n        public \n        onlyCOO \n        whenNotPaused \n    {\n        require(_owner != address(0));\n\n        _createMonster(\n            0, \n            0, \n            0, \n            uint64(now), \n            _monsterId, \n            _properties, \n            _owner\n        );\n\n        cryptoStorage.increasePromoCreatedCount();\n    }\n\n    function createPromoMonsterWithTokenId(\n        uint32 _monsterId, \n        bytes _properties, \n        address _owner, \n        uint256 _tokenId\n    ) \n        external \n        onlyCOO \n        whenNotPaused \n    {\n        require(_tokenId > 0 && cryptoStorage.getMonsterCount() + 1 == _tokenId);\n        \n        createPromoMonster(_monsterId, _properties, _owner);\n    }\n\n    function createSystemSaleAuction(\n        uint32 _monsterId, \n        bytes _properties, \n        uint16 _generation\n    )\n        external \n        onlyCOO\n        whenNotPaused\n    {\n        require(cryptoStorage.systemCreatedCount() < SYSTEM_CREATION_LIMIT);\n\n        uint256 tokenId = _createMonster(\n            0, \n            0, \n            _generation, \n            uint64(now), \n            _monsterId, \n            _properties, \n            saleAuction.systemSaleAddress()\n        );\n\n        _approve(tokenId, saleAuction);\n\n        saleAuction.createSystemAuction(tokenId);\n\n        cryptoStorage.increaseSystemCreatedCount();\n    }\n\n    function createSaleAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        require(_tokenId > 0);\n        require(_owns(msg.sender, _tokenId));\n        // the monster must not pregnant othewise the birth child may owned by the the sale auction or the buyer\n        require(!isPregnant(_tokenId));\n        require(saleAuction.isValidPrice(_startingPrice, _endingPrice));\n        _approve(_tokenId, saleAuction);\n        // Sale auction throws if inputs are invalid and approve status will be reverted\n        saleAuction.createAuction(\n            _tokenId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    function createSiringAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        require(_tokenId > 0);\n        require(_owns(msg.sender, _tokenId));\n        require(isReadyToBreed(_tokenId));\n        require(siringAuction.isValidPrice(_startingPrice, _endingPrice));\n        _approve(_tokenId, siringAuction);\n        // Siring auction throws if inputs are invalid and approve status will be reverted\n        siringAuction.createAuction(\n            _tokenId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    // breed with the monster siring on market\n    function bidOnSiringAuction(\n        uint256 _sireId,\n        uint256 _matronId\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        require(_matronId > 0);\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(isValidMatingPair(_matronId, _sireId));\n\n        // Define the current price of the auction.\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n        uint256 breedCost = currentPrice + autoBirthFee;\n        require(msg.value >= breedCost);\n\n        // Siring auction will throw if the bid fails.\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId, msg.sender);\n        _breedWith(_matronId, _sireId, breedCost);\n    }\n\n    // breed with the monster of one's own\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\n        external\n        payable\n        whenNotPaused\n    {\n        // Checks for payment.\n        require(msg.value >= autoBirthFee);\n\n        // Caller must own the matron and sire\n        require(_owns(msg.sender, _matronId));\n        require(_owns(msg.sender, _sireId));\n\n        // any monster in auction will be owned by the auction contract address,\n        // so the monster must not in auction if it's owned by the msg.sender\n\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\n        require(isReadyToBreed(_matronId));\n\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\n        require(isReadyToBreed(_sireId));\n\n        // Test that these cats are a valid mating pair.\n        require(isValidMatingPair(_matronId, _sireId));\n\n        // All checks passed, monster gets pregnant!\n        _breedWith(_matronId, _sireId, autoBirthFee);\n    }\n\n    function giveBirth(uint256 _matronId, uint256 _monsterId, uint256 _birthTime, bytes _properties)\n        external\n        whenNotPaused\n        onlyCOO\n        returns (uint256)\n    {\n        // the matron is a valid monster\n        require(cryptoStorage.getBirthTime(_matronId) != 0);\n\n        uint256 sireId = cryptoStorage.getSiringWithId(_matronId);\n        // the matron is pregnant if and only if this field is set\n        require(sireId != 0);\n\n        // no need to check cooldown of matron or sire \n        // since giveBirth can only be called by COO\n\n        // determine higher generation of the parents\n        uint16 parentGen = cryptoStorage.getGeneration(_matronId);\n        uint16 sireGen = cryptoStorage.getGeneration(sireId);\n        if (sireGen > parentGen) parentGen = sireGen;\n\n        address owner = cryptoStorage.monsterIndexToOwner(_matronId);\n        uint256 tokenId = _createMonster(\n            _matronId, \n            sireId,\n            parentGen + 1, \n            _birthTime, \n            _monsterId, \n            _properties, \n            owner\n        );\n\n        // clear pregnant related info\n        cryptoStorage.deleteSiringWithId(_matronId);\n\n        // decrease pregnant counter.\n        cryptoStorage.decreasePregnantCounter();\n\n        // send the blockchain storage fee to the coo\n        msg.sender.transfer(autoBirthFee);\n\n        return tokenId;\n    }\n\n    function computeCooldownSeconds(uint16 _hatchTimes, uint16 _generation) public view returns (uint32) {\n        require(hatchDurationByTimes.length > 0);\n        require(hatchDurationMultiByGeneration.length > 0);\n\n        uint16 hatchTimesMax = uint16(hatchDurationByTimes.length - 1);\n        uint16 hatchTimes = (_hatchTimes > hatchTimesMax ? hatchTimesMax : _hatchTimes);\n        \n        uint16 generationMax = uint16(hatchDurationMultiByGeneration.length - 1);\n        uint16 generation = (_generation > generationMax ? generationMax : _generation);\n\n        return hatchDurationByTimes[hatchTimes] * hatchDurationMultiByGeneration[generation] / 60;\n    }\n\n    function isReadyToBreed(uint256 _tokenId) public view returns (bool) {\n        // not pregnant and not in cooldown\n        return (cryptoStorage.getSiringWithId(_tokenId) == 0) && (cryptoStorage.getCooldownEndBlock(_tokenId) <= uint64(block.number));\n    }\n\n    function isPregnant(uint256 _tokenId) public view returns (bool) {\n        // A monster is pregnant if and only if this field is set\n        return cryptoStorage.getSiringWithId(_tokenId) != 0;\n    }\n\n    function isValidMatingPair(uint256 _matronId, uint256 _sireId) public view returns (bool) {\n        // can't breed with itself!\n        if (_matronId == _sireId) {\n            return false;\n        }\n        uint32 matron_of_matron = cryptoStorage.getMatronId(_matronId);\n        uint32 sire_of_matron = cryptoStorage.getSireId(_matronId);\n        uint32 matron_of_sire = cryptoStorage.getMatronId(_sireId);\n        uint32 sire_of_sire = cryptoStorage.getSireId(_sireId);\n        // can't breed with their parents.\n        if (matron_of_matron == _sireId || sire_of_matron == _sireId) return false;\n        if (matron_of_sire == _matronId || sire_of_sire == _matronId) return false;\n        // if either cat is gen zero, they can breed without siblings check\n        if (matron_of_sire == 0 || matron_of_matron == 0) return true;\n        // can't breed with full or half siblings.\n        if (matron_of_sire == matron_of_matron || matron_of_sire == sire_of_matron) return false;\n        if (sire_of_sire == matron_of_matron || sire_of_sire == sire_of_matron) return false;    \n        return true;\n    }\n\n    function _createMonster(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256 _birthTime,\n        uint256 _monsterId,\n        bytes _properties,\n        address _owner\n    )\n        internal\n        returns (uint256)\n    {\n        uint256 tokenId = cryptoStorage.createMonster(\n            _matronId,\n            _sireId,\n            _generation,\n            _birthTime,\n            _monsterId,\n            _properties\n        );\n\n        _transfer(0, _owner, tokenId);\n        \n        emit Birth(_owner, tokenId, _matronId, _sireId);\n\n        return tokenId;\n    }\n\n    function _breedWith(uint256 _matronId, uint256 _sireId, uint256 _breedCost) internal {\n        // Mark the matron as pregnant, keeping track of who the sire is.\n        cryptoStorage.setSiringWithId(_matronId, uint32(_sireId));\n\n        // Trigger the cooldown for both parents.\n        uint64 sireCooldownEndBlock = _triggerCooldown(_sireId);\n        uint64 matronCooldownEndBlock = _triggerCooldown(_matronId);\n\n        // increase pregnant counter.\n        cryptoStorage.increasePregnantCounter();\n        \n        // give birth time depends on the shorter cooldown of the two parents\n        emit Pregnant(\n            cryptoStorage.monsterIndexToOwner(_matronId),\n            _matronId,\n            _sireId,\n            matronCooldownEndBlock,\n            sireCooldownEndBlock,\n            _breedCost\n        );\n    }\n\n    // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\n    function _triggerCooldown(uint256 _tokenId) internal returns (uint64) {\n        uint32 cooldownSeconds = computeCooldownSeconds(cryptoStorage.getCooldownIndex(_tokenId), cryptoStorage.getGeneration(_tokenId));\n        uint64 cooldownEndBlock = uint64((cooldownSeconds / secondsPerBlock) + block.number);\n        cryptoStorage.setCooldownEndBlock(_tokenId, cooldownEndBlock);\n        // increate hatch times by 1\n        cryptoStorage.setCooldownIndex(_tokenId);\n        return cooldownEndBlock;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000005e2d66856a2fc7eaf843d65721e2ea20c4e8b2330000000000000000000000000761efe3e147af93b9f5c238913baf3bf241e71b000000000000000000000000d451de0f02c4e8553babda572e4582b0c5461081"
}