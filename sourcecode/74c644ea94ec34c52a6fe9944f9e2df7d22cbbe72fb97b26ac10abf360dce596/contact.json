{
  "address": "0x8d97c127236d3aef539171394212f2e43ad701c4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Hena",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-21\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts\\openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: contracts\\AccountLockableToken.sol\n\n/**\n * @title Account Lockable Token\n */\ncontract AccountLockableToken is Ownable {\n    mapping(address => bool) public lockStates;\n\n    event LockAccount(address indexed lockAccount);\n    event UnlockAccount(address indexed unlockAccount);\n\n    /**\n     * @dev Throws if called by locked account\n     */\n    modifier whenNotLocked() {\n        require(!lockStates[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Lock target account\n     * @param _target Target account to lock\n     */\n    function lockAccount(address _target) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_target != owner);\n        require(!lockStates[_target]);\n\n        lockStates[_target] = true;\n\n        emit LockAccount(_target);\n\n        return true;\n    }\n\n    /**\n     * @dev Unlock target account\n     * @param _target Target account to unlock\n     */\n    function unlockAccount(address _target) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_target != owner);\n        require(lockStates[_target]);\n\n        lockStates[_target] = false;\n\n        emit UnlockAccount(_target);\n\n        return true;\n    }\n}\n\n// File: contracts\\WithdrawableToken.sol\n\n/**\n * @title Withdrawable token\n * @dev Token that can be the withdrawal.\n */\ncontract WithdrawableToken is BasicToken, Ownable {\n    using SafeMath for uint256;\n\n    bool public withdrawingFinished = false;\n\n    event Withdraw(address _from, address _to, uint256 _value);\n    event WithdrawFinished();\n\n    modifier canWithdraw() {\n        require(!withdrawingFinished);\n        _;\n    }\n\n    modifier hasWithdrawPermission() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Withdraw the amount of tokens to onwer.\n     * @param _from address The address which owner want to withdraw tokens form.\n     * @param _value uint256 the amount of tokens to be transferred.\n     */\n    function withdraw(address _from, uint256 _value) public\n        hasWithdrawPermission\n        canWithdraw\n        returns (bool)\n    {\n        require(_value <= balances[_from]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[owner] = balances[owner].add(_value);\n\n        emit Transfer(_from, owner, _value);\n        emit Withdraw(_from, owner, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Withdraw the amount of tokens to another.\n     * @param _from address The address which owner want to withdraw tokens from.\n     * @param _to address The address which owner want to transfer to.\n     * @param _value uint256 the amount of tokens to be transferred.\n     */\n    function withdrawFrom(address _from, address _to, uint256 _value) public\n        hasWithdrawPermission\n        canWithdraw\n        returns (bool)\n    {\n        require(_value <= balances[_from]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n        emit Withdraw(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Function to stop withdrawing new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishingWithdrawing() public\n        onlyOwner\n        canWithdraw\n        returns (bool)\n    {\n        withdrawingFinished = true;\n\n        emit WithdrawFinished();\n\n        return true;\n    }\n}\n\n// File: contracts\\MilestoneLockToken.sol\n\n/**\n * @title Milestone Lock Token\n * @dev Token lock that can be the milestone policy applied.\n */\ncontract MilestoneLockToken is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n    struct Policy {\n        uint256 kickOff;\n        uint256[] periods;\n        uint8[] percentages;\n    }\n\n    struct MilestoneLock {\n        uint8[] policies;\n        uint256[] standardBalances;\n    }\n\n    uint8 constant MAX_POLICY = 100;\n    uint256 constant MAX_PERCENTAGE = 100;\n\n    mapping(uint8 => Policy) internal policies;\n    mapping(address => MilestoneLock) internal milestoneLocks;\n\n    event SetPolicyKickOff(uint8 policy, uint256 kickOff);\n    event PolicyAdded(uint8 policy);\n    event PolicyRemoved(uint8 policy);\n    event PolicyAttributeAdded(uint8 policy, uint256 period, uint8 percentage);\n    event PolicyAttributeRemoved(uint8 policy, uint256 period);\n    event PolicyAttributeModified(uint8 policy, uint256 period, uint8 percentage);\n\n    /**\n     * @dev Transfer token for a specified address when enough available unlock balance.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public\n        returns (bool)\n    {\n        require(getAvailableBalance(msg.sender) >= _value);\n\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another when enough available unlock balance.\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 the amount of tokens to be transferred.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public\n        returns (bool)\n    {\n        require(getAvailableBalance(_from) >= _value);\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Distribute the amounts of tokens to from owner's balance with the milestone policy to a policy-free user.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     * @param _policy index of milestone policy to apply.\n     */\n    function distributeWithPolicy(address _to, uint256 _value, uint8 _policy) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[owner]);\n        require(_policy < MAX_POLICY);\n        require(_checkPolicyEnabled(_policy));\n\n        balances[owner] = balances[owner].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        _setMilestoneTo(_to, _value, _policy);\n\n        emit Transfer(owner, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev add milestone policy.\n     * @param _policy index of the milestone policy you want to add.\n     * @param _periods periods of the milestone you want to add.\n     * @param _percentages unlock percentages of the milestone you want to add.\n     */\n    function addPolicy(uint8 _policy, uint256[] _periods, uint8[] _percentages) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_policy < MAX_POLICY);\n        require(!_checkPolicyEnabled(_policy));\n        require(_periods.length > 0);\n        require(_percentages.length > 0);\n        require(_periods.length == _percentages.length);\n\n        policies[_policy].periods = _periods;\n        policies[_policy].percentages = _percentages;\n\n        emit PolicyAdded(_policy);\n\n        return true;\n    }\n\n    /**\n     * @dev remove milestone policy.\n     * @param _policy index of the milestone policy you want to remove.\n     */\n    function removePolicy(uint8 _policy) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_policy < MAX_POLICY);\n\n        delete policies[_policy];\n\n        emit PolicyRemoved(_policy);\n\n        return true;\n    }\n\n    /**\n     * @dev get milestone policy information.\n     * @param _policy index of milestone policy.\n     */\n    function getPolicy(uint8 _policy) public\n        view\n        returns (uint256 kickOff, uint256[] periods, uint8[] percentages)\n    {\n        require(_policy < MAX_POLICY);\n\n        return (\n            policies[_policy].kickOff,\n            policies[_policy].periods,\n            policies[_policy].percentages\n        );\n    }\n\n    /**\n     * @dev set milestone policy's kickoff time.\n     * @param _policy index of milestone poicy.\n     * @param _time kickoff time of policy.\n     */\n    function setKickOff(uint8 _policy, uint256 _time) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_policy < MAX_POLICY);\n        require(_checkPolicyEnabled(_policy));\n\n        policies[_policy].kickOff = _time;\n\n        return true;\n    }\n\n    /**\n     * @dev add attribute to milestone policy.\n     * @param _policy index of milestone policy.\n     * @param _period period of policy attribute.\n     * @param _percentage percentage of unlocking when reaching policy.\n     */\n    function addPolicyAttribute(uint8 _policy, uint256 _period, uint8 _percentage) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_policy < MAX_POLICY);\n        require(_checkPolicyEnabled(_policy));\n\n        Policy storage policy = policies[_policy];\n\n        for (uint256 i = 0; i < policy.periods.length; i++) {\n            if (policy.periods[i] == _period) {\n                revert();\n                return false;\n            }\n        }\n\n        policy.periods.push(_period);\n        policy.percentages.push(_percentage);\n\n        emit PolicyAttributeAdded(_policy, _period, _percentage);\n\n        return true;\n    }\n\n    /**\n     * @dev remove attribute from milestone policy.\n     * @param _policy index of milestone policy attribute.\n     * @param _period period of target policy.\n     */\n    function removePolicyAttribute(uint8 _policy, uint256 _period) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_policy < MAX_POLICY);\n\n        Policy storage policy = policies[_policy];\n        \n        for (uint256 i = 0; i < policy.periods.length; i++) {\n            if (policy.periods[i] == _period) {\n                _removeElementAt256(policy.periods, i);\n                _removeElementAt8(policy.percentages, i);\n\n                emit PolicyAttributeRemoved(_policy, _period);\n\n                return true;\n            }\n        }\n\n        revert();\n\n        return false;\n    }\n\n    /**\n     * @dev modify attribute from milestone policy.\n     * @param _policy index of milestone policy.\n     * @param _period period of target policy attribute.\n     * @param _percentage percentage to modified.\n     */\n    function modifyPolicyAttribute(uint8 _policy, uint256 _period, uint8 _percentage) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_policy < MAX_POLICY);\n\n        Policy storage policy = policies[_policy];\n        for (uint256 i = 0; i < policy.periods.length; i++) {\n            if (policy.periods[i] == _period) {\n                policy.percentages[i] = _percentage;\n\n                emit PolicyAttributeModified(_policy, _period, _percentage);\n\n                return true;\n            }\n        }\n\n        revert();\n\n        return false;\n    }\n\n    /**\n     * @dev get policy's locked percentage of milestone policy from now.\n     * @param _policy index of milestone policy for calculate locked percentage.\n     */\n    function getPolicyLockedPercentage(uint8 _policy) public view\n        returns (uint256)\n    {\n        require(_policy < MAX_POLICY);\n\n        Policy storage policy = policies[_policy];\n\n        if (policy.periods.length == 0) {\n            return 0;\n        }\n        \n        if (policy.kickOff == 0 ||\n            policy.kickOff > now) {\n            return MAX_PERCENTAGE;\n        }\n\n        uint256 unlockedPercentage = 0;\n        for (uint256 i = 0; i < policy.periods.length; i++) {\n            if (policy.kickOff.add(policy.periods[i]) <= now) {\n                unlockedPercentage =\n                    unlockedPercentage.add(policy.percentages[i]);\n            }\n        }\n\n        if (unlockedPercentage > MAX_PERCENTAGE) {\n            return 0;\n        }\n\n        return MAX_PERCENTAGE.sub(unlockedPercentage);\n    }\n\n    /**\n     * @dev change account's milestone policy.\n     * @param _from address for milestone policy applyed from.\n     * @param _prevPolicy index of original milestone policy.\n     * @param _newPolicy index of milestone policy to be changed.\n     */\n    function modifyMilestoneFrom(address _from, uint8 _prevPolicy, uint8 _newPolicy) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_from != address(0));\n        require(_prevPolicy != _newPolicy);\n        require(_prevPolicy < MAX_POLICY);\n        require(_checkPolicyEnabled(_prevPolicy));\n        require(_newPolicy < MAX_POLICY);\n        require(_checkPolicyEnabled(_newPolicy));\n\n        uint256 prevPolicyIndex = _getAppliedPolicyIndex(_from, _prevPolicy);\n        require(prevPolicyIndex < MAX_POLICY);\n\n        _setMilestoneTo(_from, milestoneLocks[_from].standardBalances[prevPolicyIndex], _newPolicy);\n\n        milestoneLocks[_from].standardBalances[prevPolicyIndex] = 0;\n\n        return true;\n    }\n\n    /**\n     * @dev remove milestone policy from account.\n     * @param _from address for applied milestone policy removes from.\n     * @param _policy index of milestone policy remove. \n     */\n    function removeMilestoneFrom(address _from, uint8 _policy) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_from != address(0));\n        require(_policy < MAX_POLICY);\n\n        uint256 policyIndex = _getAppliedPolicyIndex(_from, _policy);\n        require(policyIndex < MAX_POLICY);\n\n        milestoneLocks[_from].standardBalances[policyIndex] = 0;\n\n        return true;\n    }\n\n    /**\n     * @dev get accounts milestone policy state information.\n     * @param _account address for milestone policy applied.\n     */\n    function getUserMilestone(address _account) public\n        view\n        returns (uint8[] accountPolicies, uint256[] standardBalances)\n    {\n        return (\n            milestoneLocks[_account].policies,\n            milestoneLocks[_account].standardBalances\n        );\n    }\n\n    /**\n     * @dev available unlock balance.\n     * @param _account address for available unlock balance.\n     */\n    function getAvailableBalance(address _account) public\n        view\n        returns (uint256)\n    {\n        return balances[_account].sub(getTotalLockedBalance(_account));\n    }\n\n    /**\n     * @dev calcuate locked balance of milestone policy from now.\n     * @param _account address for lock balance.\n     * @param _policy index of applied milestone policy.\n     */\n    function getLockedBalance(address _account, uint8 _policy) public\n        view\n        returns (uint256)\n    {\n        require(_policy < MAX_POLICY);\n\n        uint256 policyIndex = _getAppliedPolicyIndex(_account, _policy);\n        if (policyIndex >= MAX_POLICY) {\n            return 0;\n        }\n\n        MilestoneLock storage milestoneLock = milestoneLocks[_account];\n        if (milestoneLock.standardBalances[policyIndex] == 0) {\n            return 0;\n        }\n\n        uint256 lockedPercentage =\n            getPolicyLockedPercentage(milestoneLock.policies[policyIndex]);\n        return milestoneLock.standardBalances[policyIndex].div(MAX_PERCENTAGE).mul(lockedPercentage);\n    }\n\n    /**\n     * @dev calcuate locked balance of milestone policy from now.\n     * @param _account address for lock balance.\n     */\n    function getTotalLockedBalance(address _account) public\n        view\n        returns (uint256)\n    {\n        MilestoneLock storage milestoneLock = milestoneLocks[_account];\n\n        uint256 totalLockedBalance = 0;\n        for (uint256 i = 0; i < milestoneLock.policies.length; i++) {\n            totalLockedBalance = totalLockedBalance.add(\n                getLockedBalance(_account, milestoneLock.policies[i])\n            );\n        }\n\n        return totalLockedBalance;\n    }\n\n    /**\n     * @dev check for policy is enabled\n     * @param _policy index of milestone policy.\n     */\n    function _checkPolicyEnabled(uint8 _policy) internal\n        view\n        returns (bool)\n    {\n        return (policies[_policy].periods.length > 0);\n    }\n\n    /**\n     * @dev get milestone policy index applied to a user.\n     * @param _to address The address which you want get to.\n     * @param _policy index of milestone policy applied.\n     */\n    function _getAppliedPolicyIndex(address _to, uint8 _policy) internal\n        view\n        returns (uint8)\n    {\n        require(_policy < MAX_POLICY);\n\n        MilestoneLock storage milestoneLock = milestoneLocks[_to];\n        for (uint8 i = 0; i < milestoneLock.policies.length; i++) {\n            if (milestoneLock.policies[i] == _policy) {\n                return i;\n            }\n        }\n\n        return MAX_POLICY;\n    }\n\n    /**\n     * @dev set milestone policy applies to a user.\n     * @param _to address The address which \n     * @param _value The amount to apply\n     * @param _policy index of milestone policy to apply.\n     */\n    function _setMilestoneTo(address _to, uint256 _value, uint8 _policy) internal\n    {\n        uint8 policyIndex = _getAppliedPolicyIndex(_to, _policy);\n        if (policyIndex < MAX_POLICY) {\n            milestoneLocks[_to].standardBalances[policyIndex] = \n                milestoneLocks[_to].standardBalances[policyIndex].add(_value);\n        } else {\n            milestoneLocks[_to].policies.push(_policy);\n            milestoneLocks[_to].standardBalances.push(_value);\n        }\n    }\n\n    /**\n     * @dev utility for uint256 array\n     * @param _array target array\n     * @param _index array index to remove\n     */\n    function _removeElementAt256(uint256[] storage _array, uint256 _index) internal\n        returns (bool)\n    {\n        if (_array.length <= _index) {\n            return false;\n        }\n\n        for (uint256 i = _index; i < _array.length - 1; i++) {\n            _array[i] = _array[i + 1];\n        }\n\n        delete _array[_array.length - 1];\n        _array.length--;\n\n        return true;\n    }\n\n    /**\n     * @dev utility for uint8 array\n     * @param _array target array\n     * @param _index array index to remove\n     */\n    function _removeElementAt8(uint8[] storage _array, uint256 _index) internal\n        returns (bool)\n    {\n        if (_array.length <= _index) {\n            return false;\n        }\n\n        for (uint256 i = _index; i < _array.length - 1; i++) {\n            _array[i] = _array[i + 1];\n        }\n\n        delete _array[_array.length - 1];\n        _array.length--;\n\n        return true;\n    }\n}\n\n// File: contracts\\Hena.sol\n\n/**\n * @title Hena token\n */\ncontract Hena is\n    Pausable,\n    MintableToken,\n    BurnableToken,\n    AccountLockableToken,\n    WithdrawableToken,\n    MilestoneLockToken\n{\n    uint256 constant MAX_SUFFLY = 1000000000;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    constructor() public\n    {\n        name = \"Hena\";\n        symbol = \"HENA\";\n        decimals = 18;\n        totalSupply_ = MAX_SUFFLY * (10 ** uint(decimals));\n\n        balances[owner] = totalSupply_;\n\n        emit Transfer(address(0), owner, totalSupply_);\n    }\n\n    function() public\n    {\n        revert();\n    }\n\n    /**\n     * @dev Transfer token for a specified address when if not paused and not locked account\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public\n        whenNotPaused\n        whenNotLocked\n        returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to anther when if not paused and not locked account\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 the amount of tokens to be transferred.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public\n        whenNotPaused\n        whenNotLocked\n        returns (bool)\n    {\n        require(!lockStates[_from]);\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n       when if not paused and not locked account\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public\n        whenNotPaused\n        whenNotLocked\n        returns (bool)\n    {\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender when if not paused and not locked account\n     * @param _spender address which will spend the funds.\n     * @param _addedValue amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public\n        whenNotPaused\n        whenNotLocked\n        returns (bool)\n    {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * @param _spender address which will spend the funds.\n     * @param _subtractedValue amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public\n        whenNotPaused\n        whenNotLocked\n        returns (bool)\n    {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    /**\n     * @dev Distribute the amount of tokens to owner's balance.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function distribute(address _to, uint256 _value) public\n        onlyOwner\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[owner]);\n\n        balances[owner] = balances[owner].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(owner, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens by owner.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public\n        onlyOwner\n    {\n        super.burn(_value);\n    }\n\n    /**\n     * @dev batch to the policy to account's available balance.\n     * @param _policy index of milestone policy to apply.\n     * @param _addresses The addresses to apply.\n     */\n    function batchToApplyMilestone(uint8 _policy, address[] _addresses) public\n        onlyOwner\n        returns (bool[])\n    {\n        require(_policy < MAX_POLICY);\n        require(_checkPolicyEnabled(_policy));\n        require(_addresses.length > 0);\n\n        bool[] memory results = new bool[](_addresses.length);\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            results[i] = false;\n            if (_addresses[i] != address(0)) {\n                uint256 availableBalance = getAvailableBalance(_addresses[i]);\n                results[i] = (availableBalance > 0);\n                if (results[i]) {\n                    _setMilestoneTo(_addresses[i], availableBalance, _policy);\n                }\n            }\n        }\n\n        return results;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"addPolicyAttribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"getPolicy\",\"outputs\":[{\"name\":\"kickOff\",\"type\":\"uint256\"},{\"name\":\"periods\",\"type\":\"uint256[]\"},{\"name\":\"percentages\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"removeMilestoneFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserMilestone\",\"outputs\":[{\"name\":\"accountPolicies\",\"type\":\"uint8[]\"},{\"name\":\"standardBalances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"getPolicyLockedPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockStates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"lockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishingWithdrawing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_periods\",\"type\":\"uint256[]\"},{\"name\":\"_percentages\",\"type\":\"uint8[]\"}],\"name\":\"addPolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchToApplyMilestone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"distributeWithPolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setKickOff\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"removePolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unlockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_prevPolicy\",\"type\":\"uint8\"},{\"name\":\"_newPolicy\",\"type\":\"uint8\"}],\"name\":\"modifyMilestoneFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"removePolicyAttribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"modifyPolicyAttribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"kickOff\",\"type\":\"uint256\"}],\"name\":\"SetPolicyKickOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"}],\"name\":\"PolicyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"}],\"name\":\"PolicyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"PolicyAttributeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"PolicyAttributeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"PolicyAttributeModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockAccount\",\"type\":\"address\"}],\"name\":\"LockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unlockAccount\",\"type\":\"address\"}],\"name\":\"UnlockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a61ffff02191690556005805460ff191690553480156200002c57600080fd5b5060038054600160a060020a031916331790556040805180820190915260048082527f48656e6100000000000000000000000000000000000000000000000000000000602090920191825262000085916008916200014f565b506040805180820190915260048082527f48454e41000000000000000000000000000000000000000000000000000000006020909201918252620000cc916009916200014f565b50600a8054601260ff199091161780825560ff16900a633b9aca0002600181905560038054600160a060020a03908116600090815260208181526040808320869055935484519586529351939092169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3620001f4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019257805160ff1916838001178555620001c2565b82800160010185558215620001c2579182015b82811115620001c2578251825591602001919060010190620001a5565b50620001d0929150620001d4565b5090565b620001f191905b80821115620001d05760008155600101620001db565b90565b61302380620002046000396000f3006080604052600436106102245763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630220f662811461023657806304f08b551461026f57806305d2035b1461032a57806306fdde031461033f578063095ea7b3146103c95780630a7fb746146103ed5780630bf7fb571461041457806318160ddd146104ce5780631cc70934146104f5578063215a58c21461051057806323b872dd14610525578063313ce5671461054f57806337580f901461057a5780633f4ba83a1461059b57806340c10f19146105b257806342966c68146105d657806347a64f44146105ee578063576709a21461060f5780635c975abb1461062457806366188463146106395780636781cc041461065d5780636c24a76f146106f357806370a08231146107145780637139863714610735578063715018a6146107e25780637c75c1b4146107f75780637d64bcb4146108215780637f0ed037146108365780638456cb59146108545780638da5cb5b146108695780638db9c13c1461089a578063905295e3146108b55780639555a942146108d657806395d89b4114610900578063a9059cbb14610915578063b422375714610939578063b4ed8bf814610966578063d105350b14610984578063d73dd623146109ab578063dd62ed3e146109cf578063f1001f8c146109f6578063f2fde38b14610a17578063f3fef3a314610a38578063f85ef43b14610a5c578063fb93210814610a81575b34801561023057600080fd5b50600080fd5b34801561024257600080fd5b5061025b60ff6004358116906024359060443516610aa5565b604080519115158252519081900360200190f35b34801561027b57600080fd5b5061028a60ff60043516610bd5565b604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102d45781810151838201526020016102bc565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156103135781810151838201526020016102fb565b505050509050019550505050505060405180910390f35b34801561033657600080fd5b5061025b610cd8565b34801561034b57600080fd5b50610354610cfa565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038e578181015183820152602001610376565b50505050905090810190601f1680156103bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d557600080fd5b5061025b600160a060020a0360043516602435610d88565b3480156103f957600080fd5b5061025b600160a060020a036004351660ff60243516610dd2565b34801561042057600080fd5b50610435600160a060020a0360043516610e6e565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610479578181015183820152602001610461565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104b85781810151838201526020016104a0565b5050505090500194505050505060405180910390f35b3480156104da57600080fd5b506104e3610f56565b60408051918252519081900360200190f35b34801561050157600080fd5b506104e360ff60043516610f5d565b34801561051c57600080fd5b5061025b611070565b34801561053157600080fd5b5061025b600160a060020a0360043581169060243516604435611079565b34801561055b57600080fd5b506105646110e9565b6040805160ff9092168252519081900360200190f35b34801561058657600080fd5b5061025b600160a060020a03600435166110f2565b3480156105a757600080fd5b506105b0611107565b005b3480156105be57600080fd5b5061025b600160a060020a036004351660243561117f565b3480156105e257600080fd5b506105b0600435611289565b3480156105fa57600080fd5b5061025b600160a060020a03600435166112ac565b34801561061b57600080fd5b5061025b611358565b34801561063057600080fd5b5061025b6113be565b34801561064557600080fd5b5061025b600160a060020a03600435166024356113ce565b34801561066957600080fd5b5060408051602060046024803582810135848102808701860190975280865261025b96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061140f9650505050505050565b3480156106ff57600080fd5b506104e3600160a060020a036004351661150a565b34801561072057600080fd5b506104e3600160a060020a036004351661153d565b34801561074157600080fd5b5060408051602060046024803582810135848102808701860190975280865261079296843560ff16963696604495919490910192918291850190849080828437509497506115589650505050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156107ce5781810151838201526020016107b6565b505050509050019250505060405180910390f35b3480156107ee57600080fd5b506105b06116c9565b34801561080357600080fd5b5061025b600160a060020a036004351660243560ff60443516611737565b34801561082d57600080fd5b5061025b611875565b34801561084257600080fd5b5061025b60ff6004351660243561191e565b34801561086057600080fd5b506105b0611977565b34801561087557600080fd5b5061087e6119f4565b60408051600160a060020a039092168252519081900360200190f35b3480156108a657600080fd5b5061025b60ff60043516611a03565b3480156108c157600080fd5b5061025b600160a060020a0360043516611a9e565b3480156108e257600080fd5b5061025b600160a060020a0360043581169060243516604435611b48565b34801561090c57600080fd5b50610354611ca1565b34801561092157600080fd5b5061025b600160a060020a0360043516602435611cfc565b34801561094557600080fd5b5061025b600160a060020a036004351660ff60243581169060443516611d3d565b34801561097257600080fd5b5061025b60ff60043516602435611e61565b34801561099057600080fd5b506104e3600160a060020a036004351660ff60243516611f4c565b3480156109b757600080fd5b5061025b600160a060020a036004351660243561204b565b3480156109db57600080fd5b506104e3600160a060020a036004358116906024351661208c565b348015610a0257600080fd5b506104e3600160a060020a03600435166120b7565b348015610a2357600080fd5b506105b0600160a060020a0360043516612137565b348015610a4457600080fd5b5061025b600160a060020a0360043516602435612157565b348015610a6857600080fd5b5061025b60ff60043581169060243590604435166122a8565b348015610a8d57600080fd5b5061025b600160a060020a03600435166024356123ad565b60035460009081908190600160a060020a03163314610ac357600080fd5b606460ff871610610ad357600080fd5b610adc866124b4565b1515610ae757600080fd5b505060ff84166000908152600660205260408120905b6001820154811015610b3957848260010182815481101515610b1b57fe5b90600052602060002001541415610b3157600080fd5b600101610afd565b600182810180548083018255600091825260208083209091018890556002850180549384018155825290819020818304018054601f9093166101000a60ff818102199094168885169182021790915560408051938a16845291830188905282820152517fa3ded8e76aad13e8fa47bdc55ef6792b175d7c2fd1965fd73a268c54a2742a11916060908290030190a1600192505b50509392505050565b6000606080606460ff851610610bea57600080fd5b60ff841660009081526006602090815260409182902080546001820180548551818602810186019096528086529194909360029093019290918491830182828015610c5457602002820191906000526020600020905b815481526020019060010190808311610c40575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610cc457602002820191906000526020600020906000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610c955790505b505050505090509250925092509193909250565b6003547501000000000000000000000000000000000000000000900460ff1681565b6008805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d805780601f10610d5557610100808354040283529160200191610d80565b820191906000526020600020905b815481529060010190602001808311610d6357829003601f168201915b505050505081565b60035460009060a060020a900460ff1615610da257600080fd5b3360009081526004602052604090205460ff1615610dbf57600080fd5b610dc983836124cd565b90505b92915050565b6003546000908190600160a060020a03163314610dee57600080fd5b600160a060020a0384161515610e0357600080fd5b606460ff841610610e1357600080fd5b610e1d8484612533565b60ff16905060648110610e2f57600080fd5b600160a060020a0384166000908152600760205260408120600101805483908110610e5657fe5b600091825260209091200155600191505b5092915050565b600160a060020a0381166000908152600760209081526040918290208054835181840281018401909452808452606093849360018401928491830182828015610ef457602002820191906000526020600020906000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610ec55790505b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610f4657602002820191906000526020600020905b815481526020019060010190808311610f32575b5050505050905091509150915091565b6001545b90565b6000808080606460ff861610610f7257600080fd5b60ff8516600090815260066020526040902060018101549093501515610f9b5760009350611068565b82541580610fa95750825442105b15610fb75760649350611068565b5060009050805b60018301548110156110425742610ff98460010183815481101515610fdf57fe5b60009182526020909120015485549063ffffffff6125c516565b1161103a57611037836002018281548110151561101257fe5b6000918252602091829020918104909101548491601f166101000a900460ff166125c5565b91505b600101610fbe565b60648211156110545760009350611068565b61106560648363ffffffff6125d216565b93505b505050919050565b60055460ff1681565b60035460009060a060020a900460ff161561109357600080fd5b3360009081526004602052604090205460ff16156110b057600080fd5b600160a060020a03841660009081526004602052604090205460ff16156110d657600080fd5b6110e18484846125e4565b949350505050565b600a5460ff1681565b60046020526000908152604090205460ff1681565b600354600160a060020a0316331461111e57600080fd5b60035460a060020a900460ff16151561113657600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600354600090600160a060020a0316331461119957600080fd5b6003547501000000000000000000000000000000000000000000900460ff16156111c257600080fd5b6001546111d5908363ffffffff6125c516565b600155600160a060020a038316600090815260208190526040902054611201908363ffffffff6125c516565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020612fd88339815191529181900360200190a350600192915050565b600354600160a060020a031633146112a057600080fd5b6112a981612606565b50565b600354600090600160a060020a031633146112c657600080fd5b600354600160a060020a03838116911614156112e157600080fd5b600160a060020a03821660009081526004602052604090205460ff161561130757600080fd5b600160a060020a038216600081815260046020526040808220805460ff19166001179055517f2e42b012fe114d62bddb874b8e25a0e9053bdc64cd62e48ba623efe99742817e9190a2506001919050565b600354600090600160a060020a0316331461137257600080fd5b60055460ff161561138257600080fd5b6005805460ff191660011790556040517fa3296d3334f8dcdd01c32caa6b1a7edf455364495877a7afb6b2f4a7a58d397990600090a150600190565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff16156113e857600080fd5b3360009081526004602052604090205460ff161561140557600080fd5b610dc98383612610565b600354600090600160a060020a0316331461142957600080fd5b606460ff85161061143957600080fd5b611442846124b4565b1561144c57600080fd5b825160001061145a57600080fd5b815160001061146857600080fd5b815183511461147657600080fd5b60ff84166000908152600660209081526040909120845161149f92600190920191860190612e16565b5060ff8416600090815260066020908152604090912083516114c992600290920191850190612e61565b506040805160ff8616815290517f1eb3c3c18a0f398cdba1d709f9a2a462af8f63b7c00c90cb2d5d996e60b5acab9181900360200190a15060019392505050565b6000610dcc611518836120b7565b600160a060020a0384166000908152602081905260409020549063ffffffff6125d216565b600160a060020a031660009081526020819052604090205490565b60035460609081906000908190600160a060020a0316331461157957600080fd5b606460ff87161061158957600080fd5b611592866124b4565b151561159d57600080fd5b84516000106115ab57600080fd5b84516040519080825280602002602001820160405280156115d6578160200160208202803883390190505b509250600091505b84518210156116bc57600083838151811015156115f757fe5b911515602092830290910190910152845160009086908490811061161757fe5b60209081029091010151600160a060020a0316146116b15761164f858381518110151561164057fe5b9060200190602002015161150a565b905060008111838381518110151561166357fe5b911515602092830290910190910152825183908390811061168057fe5b90602001906020020151156116b1576116b185838151811015156116a057fe5b9060200190602002015182886126ff565b6001909101906115de565b8293505b50505092915050565b600354600160a060020a031633146116e057600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a0316331461175157600080fd5b600160a060020a038416151561176657600080fd5b600354600160a060020a031660009081526020819052604090205483111561178d57600080fd5b606460ff83161061179d57600080fd5b6117a6826124b4565b15156117b157600080fd5b600354600160a060020a03166000908152602081905260409020546117dc908463ffffffff6125d216565b600354600160a060020a039081166000908152602081905260408082209390935590861681522054611814908463ffffffff6125c516565b600160a060020a0385166000908152602081905260409020556118388484846126ff565b600354604080518581529051600160a060020a03808816931691600080516020612fd8833981519152919081900360200190a35060019392505050565b600354600090600160a060020a0316331461188f57600080fd5b6003547501000000000000000000000000000000000000000000900460ff16156118b857600080fd5b6003805475ff000000000000000000000000000000000000000000191675010000000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600090600160a060020a0316331461193857600080fd5b606460ff84161061194857600080fd5b611951836124b4565b151561195c57600080fd5b5060ff91909116600090815260066020526040902055600190565b600354600160a060020a0316331461198e57600080fd5b60035460a060020a900460ff16156119a557600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b600354600090600160a060020a03163314611a1d57600080fd5b606460ff831610611a2d57600080fd5b60ff8216600090815260066020526040812081815590611a506001830182612f03565b611a5e600283016000612f21565b50506040805160ff8416815290517f23c2d4a49f5ea8d4ecf0d7d74a9c20cfd7b90c2d620cebb61f44fe20548f9e389181900360200190a1506001919050565b600354600090600160a060020a03163314611ab857600080fd5b600354600160a060020a0383811691161415611ad357600080fd5b600160a060020a03821660009081526004602052604090205460ff161515611afa57600080fd5b600160a060020a038216600081815260046020526040808220805460ff19169055517fb9c97a444794ab1ae6b17546c4103860c32e39862de6be9887a683bd1c897c949190a2506001919050565b600354600090600160a060020a03163314611b6257600080fd5b60055460ff1615611b7257600080fd5b600160a060020a038416600090815260208190526040902054821115611b9757600080fd5b600160a060020a0383161515611bac57600080fd5b600160a060020a038416600090815260208190526040902054611bd5908363ffffffff6125d216565b600160a060020a038086166000908152602081905260408082209390935590851681522054611c0a908363ffffffff6125c516565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919392881692600080516020612fd883398151915292918290030190a360408051600160a060020a0380871682528516602082015280820184905290517f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9181900360600190a15060019392505050565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d805780601f10610d5557610100808354040283529160200191610d80565b60035460009060a060020a900460ff1615611d1657600080fd5b3360009081526004602052604090205460ff1615611d3357600080fd5b610dc98383612801565b6003546000908190600160a060020a03163314611d5957600080fd5b600160a060020a0385161515611d6e57600080fd5b60ff8481169084161415611d8157600080fd5b606460ff851610611d9157600080fd5b611d9a846124b4565b1515611da557600080fd5b606460ff841610611db557600080fd5b611dbe836124b4565b1515611dc957600080fd5b611dd38585612533565b60ff16905060648110611de557600080fd5b600160a060020a03851660009081526007602052604090206001018054611e2391879184908110611e1257fe5b9060005260206000200154856126ff565b600160a060020a0385166000908152600760205260408120600101805483908110611e4a57fe5b600091825260209091200155506001949350505050565b60035460009081908190600160a060020a03163314611e7f57600080fd5b606460ff861610611e8f57600080fd5b505060ff83166000908152600660205260408120905b6001820154811015611f3f57838260010182815481101515611ec357fe5b90600052602060002001541415611f3757611ee18260010182612822565b50611eef82600201826128be565b506040805160ff871681526020810186905281517fbc3aedc2473e29de7e195dedc40afb7b2e49384c657be863787a7fbcdb9d0251929181900390910190a160019250611f44565b600101611ea5565b600080fd5b505092915050565b6000808080606460ff861610611f6157600080fd5b611f6b8686612533565b60ff16925060648310611f8157600093506116c0565b600160a060020a03861660009081526007602052604090206001810180549193509084908110611fad57fe5b906000526020600020015460001415611fc957600093506116c0565b815461200090839085908110611fdb57fe5b90600052602060002090602091828204019190069054906101000a900460ff16610f5d565b9050612041816120356064856001018781548110151561201c57fe5b90600052602060002001546129a290919063ffffffff16565b9063ffffffff6129b716565b9695505050505050565b60035460009060a060020a900460ff161561206557600080fd5b3360009081526004602052604090205460ff161561208257600080fd5b610dc983836129e0565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600160a060020a038116600090815260076020526040812081805b825481101561212f576121256121188685600001848154811015156120f357fe5b90600052602060002090602091828204019190069054906101000a900460ff16611f4c565b839063ffffffff6125c516565b91506001016120d2565b509392505050565b600354600160a060020a0316331461214e57600080fd5b6112a981612a79565b600354600090600160a060020a0316331461217157600080fd5b60055460ff161561218157600080fd5b600160a060020a0383166000908152602081905260409020548211156121a657600080fd5b600160a060020a0383166000908152602081905260409020546121cf908363ffffffff6125d216565b600160a060020a038085166000908152602081905260408082209390935560035490911681522054612207908363ffffffff6125c516565b60038054600160a060020a0390811660009081526020818152604091829020949094559154825186815292519082169391871692600080516020612fd883398151915292908290030190a360035460408051600160a060020a0380871682529092166020830152818101849052517f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9181900360600190a150600192915050565b60035460009081908190600160a060020a031633146122c657600080fd5b606460ff8716106122d657600080fd5b505060ff84166000908152600660205260408120905b6001820154811015611f3f5784826001018281548110151561230a57fe5b906000526020600020015414156123a55783826002018281548110151561232d57fe5b600091825260209182902082820401805460ff948516601f9093166101000a92830292850219169190911790556040805189841681529182018890529186168183015290517f5205cac358b9652030706465e9d31ba7211ad4c5cc089dfea3c7b3d90eb7418c9181900360600190a160019250610bcc565b6001016122ec565b600354600090600160a060020a031633146123c757600080fd5b600160a060020a03831615156123dc57600080fd5b600354600160a060020a031660009081526020819052604090205482111561240357600080fd5b600354600160a060020a031660009081526020819052604090205461242e908363ffffffff6125d216565b600354600160a060020a039081166000908152602081905260408082209390935590851681522054612466908363ffffffff6125c516565b600160a060020a038085166000818152602081815260409182902094909455600354815187815291519294931692600080516020612fd883398151915292918290030190a350600192915050565b60ff166000908152600660205260408120600101541190565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60008080606460ff85161061254757600080fd5b5050600160a060020a0383166000908152600760205260408120905b815460ff821610156125ba57815460ff808616918491841690811061258457fe5b60009182526020918290209181049091015460ff601f9092166101000a90041614156125b257809250611f44565b600101612563565b506064949350505050565b81810182811015610dcc57fe5b6000828211156125de57fe5b50900390565b6000816125f08561150a565b10156125fb57600080fd5b6110e1848484612af7565b6112a93382612c5a565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061266457336000908152600260209081526040808320600160a060020a0388168452909152812055612699565b612674818463ffffffff6125d216565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600061270b8483612533565b9050606460ff8216101561279d57600160a060020a0384166000908152600760205260409020600101805461276291859160ff851690811061274957fe5b90600052602060002001546125c590919063ffffffff16565b600160a060020a0385166000908152600760205260409020600101805460ff841690811061278c57fe5b6000918252602090912001556127fb565b600160a060020a0384166000908152600760209081526040822080546001818101835582855283852084830401805460ff808a16601f9095166101000a94850294021916929092179091559081018054918201815583529120018390555b50505050565b60008161280d3361150a565b101561281857600080fd5b610dc98383612d49565b8154600090819083106128385760009150610e67565b50815b83546000190181101561288657838160010181548110151561285957fe5b9060005260206000200154848281548110151561287257fe5b60009182526020909120015560010161283b565b83548490600019810190811061289857fe5b600091825260208220015583546128b3856000198301612f46565b506001949350505050565b8154600090819083106128d45760009150610e67565b50815b83546000190181101561295a5783816001018154811015156128f557fe5b90600052602060002090602091828204019190069054906101000a900460ff16848281548110151561292357fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555080806001019150506128d7565b83548490600019810190811061296c57fe5b90600052602060002090602091828204019190066101000a81549060ff0219169055838054809190600190036128b39190612f6f565b600081838115156129af57fe5b049392505050565b60008215156129c857506000610dcc565b508181028183828115156129d857fe5b0414610dcc57fe5b336000908152600260209081526040808320600160a060020a0386168452909152812054612a14908363ffffffff6125c516565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a0381161515612a8e57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038316600090815260208190526040812054821115612b1c57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115612b4c57600080fd5b600160a060020a0383161515612b6157600080fd5b600160a060020a038416600090815260208190526040902054612b8a908363ffffffff6125d216565b600160a060020a038086166000908152602081905260408082209390935590851681522054612bbf908363ffffffff6125c516565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054612c01908363ffffffff6125d216565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020612fd8833981519152929181900390910190a35060019392505050565b600160a060020a038216600090815260208190526040902054811115612c7f57600080fd5b600160a060020a038216600090815260208190526040902054612ca8908263ffffffff6125d216565b600160a060020a038316600090815260208190526040902055600154612cd4908263ffffffff6125d216565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020612fd88339815191529181900360200190a35050565b33600090815260208190526040812054821115612d6557600080fd5b600160a060020a0383161515612d7a57600080fd5b33600090815260208190526040902054612d9a908363ffffffff6125d216565b3360009081526020819052604080822092909255600160a060020a03851681522054612dcc908363ffffffff6125c516565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020612fd88339815191529281900390910190a350600192915050565b828054828255906000526020600020908101928215612e51579160200282015b82811115612e51578251825591602001919060010190612e36565b50612e5d929150612f9f565b5090565b82805482825590600052602060002090601f01602090048101928215612ef75791602002820160005b83821115612ec857835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612e8a565b8015612ef55782816101000a81549060ff0219169055600101602081600001049283019260010302612ec8565b505b50612e5d929150612fb9565b50805460008255906000526020600020908101906112a99190612f9f565b50805460008255601f0160209004906000526020600020908101906112a99190612f9f565b815481835581811115612f6a57600083815260209020612f6a918101908301612f9f565b505050565b815481835581811115612f6a57601f016020900481601f01602090048360005260206000209182019101612f6a91905b610f5a91905b80821115612e5d5760008155600101612fa5565b610f5a91905b80821115612e5d57805460ff19168155600101612fbf5600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582074d296e2ccbb612fb0e53d3665913ba82cb6b17603d911bbc7bfd85e5f60ce6f0029"
}