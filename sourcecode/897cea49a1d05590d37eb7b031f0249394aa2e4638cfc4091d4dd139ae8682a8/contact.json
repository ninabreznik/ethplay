{
  "address": "0x53e862eb691e9fd739084e42edc5035a38e40337",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PaymentDistributor",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-11\n*/\n\npragma solidity 0.5.3;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title PaymentDistributor\n * @dev distributes all the received funds between project wallets and team members. \n */\ncontract PaymentDistributor is Ownable {\n    using SafeMath for uint256;\n\n    event PaymentReleased(address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    // timestamp when fund backup release is enabled\n    uint256 private _backupReleaseTime;\n\n    uint256 private _totalReleased;\n    mapping(address => uint256) private _released;\n\n    uint256 private constant step1Fund = uint256(5000) * 10 ** 18;\n\n    address payable private _beneficiary0;\n    address payable private _beneficiary1;\n    address payable private _beneficiary2;\n    address payable private _beneficiary3;\n    address payable private _beneficiary4;\n    address payable private _beneficiaryBackup;\n\n    /**\n     * @dev Constructor\n     */\n    constructor (address payable beneficiary0, address payable beneficiary1, address payable beneficiary2, address payable beneficiary3, address payable beneficiary4, address payable beneficiaryBackup, uint256 backupReleaseTime) public {\n        _beneficiary0 = beneficiary0;\n        _beneficiary1 = beneficiary1;\n        _beneficiary2 = beneficiary2;\n        _beneficiary3 = beneficiary3;\n        _beneficiary4 = beneficiary4;\n        _beneficiaryBackup = beneficiaryBackup;\n        _backupReleaseTime = backupReleaseTime;\n    }\n\n    /**\n     * @dev payable fallback\n     */\n    function () external payable {\n        emit PaymentReceived(msg.sender, msg.value);\n    }\n\n    /**\n     * @return the total amount already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @return the amount already released to an account.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @return the beneficiary0 of the Payments.\n     */\n    function beneficiary0() public view returns (address) {\n        return _beneficiary0;\n    }\n\n    /**\n     * @return the beneficiary1 of the Payments.\n     */\n    function beneficiary1() public view returns (address) {\n        return _beneficiary1;\n    }\n\n    /**\n     * @return the beneficiary2 of the Payments.\n     */\n    function beneficiary2() public view returns (address) {\n        return _beneficiary2;\n    }\n\n    /**\n     * @return the beneficiary3 of the Payments.\n     */\n    function beneficiary3() public view returns (address) {\n        return _beneficiary3;\n    }\n\n    /**\n     * @return the beneficiary4 of the Payments.\n     */\n    function beneficiary4() public view returns (address) {\n        return _beneficiary4;\n    }\n\n    /**\n     * @return the beneficiaryBackup of Payments.\n     */\n    function beneficiaryBackup() public view returns (address) {\n        return _beneficiaryBackup;\n    }\n\n    /**\n     * @return the time when Payments are released to the beneficiaryBackup wallet.\n     */\n    function backupReleaseTime() public view returns (uint256) {\n        return _backupReleaseTime;\n    }\n\n    /**\n     * @dev send to one of the beneficiarys' addresses.\n     * @param account Whose the fund will be send to.\n     * @param amount Value in wei to be sent\n     */\n    function sendToAccount(address payable account, uint256 amount) internal {\n        require(amount > 0, 'The amount must be greater than zero.');\n\n        _released[account] = _released[account].add(amount);\n        _totalReleased = _totalReleased.add(amount);\n\n        account.transfer(amount);\n        emit PaymentReleased(account, amount);\n    }\n\n    /**\n     * @dev distributes the amount between team's wallets \n     * which are created for different purposes.\n     * @param amount Value in wei to send to the wallets.\n     */\n    function release(uint256 amount) onlyOwner public{\n        require(address(this).balance >= amount, 'Balance must be greater than or equal to the amount.');\n        uint256 _value = amount;\n        if (_released[_beneficiary0] < step1Fund) {\n            if (_released[_beneficiary0].add(_value) > step1Fund){\n                uint256 _remainValue = step1Fund.sub(_released[_beneficiary0]);\n                _value = _value.sub(_remainValue);\n                sendToAccount(_beneficiary0, _remainValue);\n            }\n            else {\n                sendToAccount(_beneficiary0, _value);\n                _value = 0;\n            }\n        }\n\n        if (_value > 0) {\n            uint256 _value1 = _value.mul(10).div(100);          //10%\n            uint256 _value2 = _value.mul(7020).div(10000);      //70.2%\n            uint256 _value3 = _value.mul(1080).div(10000);      //10.8%\n            uint256 _value4 = _value.mul(9).div(100);           //9%\n            sendToAccount(_beneficiary1, _value1);\n            sendToAccount(_beneficiary2, _value2);\n            sendToAccount(_beneficiary3, _value3);\n            sendToAccount(_beneficiary4, _value4);\n        }\n    }    \n\n    /**\n     * @dev transfer the amount to the beneficiaryBackup wallet\n     * which are created for different purposes.\n     * @param amount Value in wei to send to the backup wallet.\n     */\n    function releaseBackup(uint256 amount) onlyOwner public{\n        require(address(this).balance >= amount, 'Balance must be greater than or equal to the amount.');\n        require(block.timestamp >= backupReleaseTime(), 'The transfer is possible only 2 months after the ICO.');\n        sendToAccount(_beneficiaryBackup, amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryBackup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backupReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary0\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseBackup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiary0\",\"type\":\"address\"},{\"name\":\"beneficiary1\",\"type\":\"address\"},{\"name\":\"beneficiary2\",\"type\":\"address\"},{\"name\":\"beneficiary3\",\"type\":\"address\"},{\"name\":\"beneficiary4\",\"type\":\"address\"},{\"name\":\"beneficiaryBackup\",\"type\":\"address\"},{\"name\":\"backupReleaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160e08061146c833981018060405260e081101561003057600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a386600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060018190555050505050505050611190806102dc6000396000f3fe608060405260043610610105576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100a7578063c0952b1911610076578063c0952b191461048d578063e33b7de3146104c8578063f2fde38b146104f3578063f3f2f0bc1461054457610105565b80638da5cb5b1461034b5780638f32d59b146103a25780639852595c146103d1578063a07f5f841461043657610105565b806337bdc99b116100e357806337bdc99b1461024b5780634f52ccfa1461028657806368e91bba146102dd578063715018a61461033457610105565b806302f50933146101725780631af49a3c146101c957806326880a1f14610220575b7f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b34801561017e57600080fd5b5061018761059b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101d557600080fd5b506101de6105c5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022c57600080fd5b506102356105ef565b6040518082815260200191505060405180910390f35b34801561025757600080fd5b506102846004803603602081101561026e57600080fd5b81019080803590602001909291905050506105f9565b005b34801561029257600080fd5b5061029b6109ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e957600080fd5b506102f2610a18565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034057600080fd5b50610349610a42565b005b34801561035757600080fd5b50610360610b14565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ae57600080fd5b506103b7610b3d565b604051808215151515815260200191505060405180910390f35b3480156103dd57600080fd5b50610420600480360360208110156103f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b94565b6040518082815260200191505060405180910390f35b34801561044257600080fd5b5061044b610bdd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049957600080fd5b506104c6600480360360208110156104b057600080fd5b8101908080359060200190929190505050610c07565b005b3480156104d457600080fd5b506104dd610d1d565b6040518082815260200191505060405180910390f35b3480156104ff57600080fd5b506105426004803603602081101561051657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d27565b005b34801561055057600080fd5b50610559610d46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600154905090565b610601610b3d565b151561060c57600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311015151561067e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806110fc6034913960400191505060405180910390fd5b6000819050670de0b6b3a76400006113880260036000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561087c57670de0b6b3a7640000611388026107798260036000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d7090919063ffffffff16565b111561084a57600061080160036000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a764000061138802610d9190919063ffffffff16565b90506108168183610d9190919063ffffffff16565b9150610844600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610db3565b5061087b565b610876600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610db3565b600090505b5b60008111156109ea5760006108ae60646108a0600a85610f7490919063ffffffff16565b610fb290919063ffffffff16565b905060006108db6127106108cd611b6c86610f7490919063ffffffff16565b610fb290919063ffffffff16565b905060006109086127106108fa61043887610f7490919063ffffffff16565b610fb290919063ffffffff16565b905060006109336064610925600988610f7490919063ffffffff16565b610fb290919063ffffffff16565b9050610961600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685610db3565b61098d600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610db3565b6109b9600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610db3565b6109e5600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610db3565b505050505b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a4a610b3d565b1515610a5557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c0f610b3d565b1515610c1a57600080fd5b803073ffffffffffffffffffffffffffffffffffffffff163110151515610c8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806110fc6034913960400191505060405180910390fd5b610c946105ef565b4210151515610cee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806111306035913960400191505060405180910390fd5b610d1a600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610db3565b50565b6000600254905090565b610d2f610b3d565b1515610d3a57600080fd5b610d4381610fdc565b50565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808284019050838110151515610d8757600080fd5b8091505092915050565b6000828211151515610da257600080fd5b600082840390508091505092915050565b600081111515610e0e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806110d76025913960400191505060405180910390fd5b610e6081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d7090919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610eb881600254610d7090919063ffffffff16565b6002819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610f04573d6000803e3d6000fd5b507fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600080831415610f875760009050610fac565b60008284029050828482811515610f9a57fe5b04141515610fa757600080fd5b809150505b92915050565b60008082111515610fc257600080fd5b60008284811515610fcf57fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561101857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe54686520616d6f756e74206d7573742062652067726561746572207468616e207a65726f2e42616c616e6365206d7573742062652067726561746572207468616e206f7220657175616c20746f2074686520616d6f756e742e546865207472616e7366657220697320706f737369626c65206f6e6c792032206d6f6e746873206166746572207468652049434f2ea165627a7a7230582014f90da7375e48cf9ca7f6bbd1b1320311ac1b053794cb17182d49262c03b00a0029000000000000000000000000a75103587dce7a3ce4448d77dd975da2a260ae120000000000000000000000005a92bdd76dde288a92e385fc153fdf70790faa4d0000000000000000000000004d90517ad43e8b7bd90b55c6e7e4b2292162607b0000000000000000000000001102934cd05901fdc9a98265d30df902ad7d78e1000000000000000000000000d5f7ce66673f74d1a136d29ccd111000fded70b30000000000000000000000003f516fcabca486fc76e9a4c22b5b7b90da0a7aa0000000000000000000000000000000000000000000000000000000005d1a11e0",
  "constructorArguments": "000000000000000000000000a75103587dce7a3ce4448d77dd975da2a260ae120000000000000000000000005a92bdd76dde288a92e385fc153fdf70790faa4d0000000000000000000000004d90517ad43e8b7bd90b55c6e7e4b2292162607b0000000000000000000000001102934cd05901fdc9a98265d30df902ad7d78e1000000000000000000000000d5f7ce66673f74d1a136d29ccd111000fded70b30000000000000000000000003f516fcabca486fc76e9a4c22b5b7b90da0a7aa0000000000000000000000000000000000000000000000000000000005d1a11e0"
}