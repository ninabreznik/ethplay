{
  "address": "0xe265cd62c7cb8f20f31789f7f12edb850caca294",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SomeController",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-06\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ApproveAndCallReceiver {\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) public;\n}\n\ncontract Controlled {\n    modifier onlyController { \n        require(msg.sender == controller); \n        _; \n    }\n\n    address public controller;\n\n    constructor() public {\n      controller = msg.sender;\n    }\n\n    function changeController(address _newController) onlyController public {\n        controller = _newController;\n    }\n}\n\ncontract TokenAbout is Controlled {\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n\n    function isContract(address _addr) constant internal returns (bool) {\n        if (_addr == 0) {\n            return false;\n        }\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n\n    function claimTokens(address[] tokens) onlyController public {\n        require(tokens.length <= 100, \"tokens.length too long\");\n        address _token;\n        uint256 balance;\n        ERC20Token token;\n        for(uint256 i; i<tokens.length; i++){\n            _token = tokens[i];\n            if (_token == 0x0) {\n                balance = address(this).balance;\n                if(balance > 0){\n                    msg.sender.transfer(balance);\n                }\n            }else{\n                token = ERC20Token(_token);\n                balance = token.balanceOf(address(this));\n                token.transfer(msg.sender, balance);\n                emit ClaimedTokens(_token, msg.sender, balance);\n            }\n        }\n    }\n}\n\ncontract TokenController {\n    function proxyPayment(address _owner) payable public returns(bool);\n    function onTransfer(address _from, address _to, uint _amount) public view returns(bool);\n    function onApprove(address _owner, address _spender, uint _amount) public view returns(bool);\n}\n\ncontract ERC20Token {\n    uint256 public totalSupply;\n    mapping (address => uint256) public balanceOf;\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract TokenI is ERC20Token, Controlled {\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    function approveAndCall( address _spender, uint256 _amount, bytes _extraData) public returns (bool success);\n    function generateTokens(address _owner, uint _amount) public returns (bool);\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\n    function enableTransfers(bool _transfersEnabled) public;\n}\n\ncontract Token is TokenI, TokenAbout {\n    using SafeMath for uint256;\n    address public owner;\n    string public techProvider = \"WeYii Tech(https://weyii.co)\";\n\n    mapping (uint8 => uint256[]) public freezeOf; //所有数额，地址与数额合并为uint256，位运算拆分。\n    uint8  currUnlockStep; //当前解锁step\n    uint256 currUnlockSeq; //当前解锁step 内的游标\n\n    mapping (uint8 => bool) public stepUnlockInfo; //所有锁仓，key 使用序号向上增加，value,是否已解锁。\n    mapping (address => uint256) public freezeOfUser; //用户所有锁仓，方便用户查询自己锁仓余额\n    mapping (uint8 => uint256) public stepLockend; //key:锁仓step，value：解锁时\n\n    bool public transfersEnabled = true;\n\n    event Burn(address indexed from, uint256 value);\n    event Freeze(address indexed from, uint256 value);\n    event Unfreeze(address indexed from, uint256 value);\n\n    constructor(uint256 initialSupply, string tokenName, string tokenSymbol, address initialOwner) public {\n        name = tokenName;\n        symbol = tokenSymbol;\n        owner = initialOwner;\n        totalSupply = initialSupply*uint256(10)**decimals;\n        balanceOf[owner] = totalSupply;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier ownerOrController(){\n        require(msg.sender == owner || msg.sender == controller);\n        _;\n    }\n\n    modifier transable(){\n        require(transfersEnabled);\n        _;\n    }\n\n    modifier ownerOrUser(address user){\n        require(msg.sender == owner || msg.sender == user);\n        _;\n    }\n\n    modifier userOrController(address user){\n        require(msg.sender == user || msg.sender == owner || msg.sender == controller);\n        _;\n    }\n\n    modifier realUser(address user){\n        require(user != 0x0);\n        _;\n    }\n\n    modifier moreThanZero(uint256 _value){\n        require(_value > 0);\n        _;\n    }\n\n    modifier userEnough(address _user, uint256 _amount) {\n        require(balanceOf[_user] >= _amount);\n        _;\n    }\n\n    function addLockStep(uint8 _step, uint _endTime) onlyController external returns(bool) {\n        stepLockend[_step] = _endTime;\n    }\n\n    function transfer(address _to, uint256 _value) realUser(_to) moreThanZero(_value) transable public returns (bool) {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                     // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add the same to the recipient\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) transable public returns (bool success) {\n        require(_value == 0 || (allowance[msg.sender][_spender] == 0));\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function unApprove(address _spender, uint256 _value) moreThanZero(_value) transable public returns (bool success) {\n        require(_value == 0 || (allowance[msg.sender][_spender] == 0));\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].sub(_value);\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) transable public returns (bool success) {\n        require(approve(_spender, _amount));\n        ApproveAndCallReceiver(_spender).receiveApproval(msg.sender, _amount, this, _extraData);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) realUser(_from) realUser(_to) moreThanZero(_value) transable public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function transferMulti(address[] _to, uint256[] _value) transable public returns (bool success, uint256 amount){\n        require(_to.length == _value.length && _to.length <= 300, \"transfer once should be less than 300, or will be slow\");\n        uint256 balanceOfSender = balanceOf[msg.sender];\n        uint256 len = _to.length;\n        for(uint256 j; j<len; j++){\n            require(_value[j] <= balanceOfSender); //limit transfer value\n            amount = amount.add(_value[j]);\n        }\n        require(balanceOfSender > amount ); //check enough and not overflow\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n        address _toI;\n        uint256 _valueI;\n        for(uint256 i; i<len; i++){\n            _toI = _to[i];\n            _valueI = _value[i];\n            balanceOf[_toI] = balanceOf[_toI].add(_valueI);\n            emit Transfer(msg.sender, _toI, _valueI);\n        }\n        return (true, amount);\n    }\n    \n    function transferMultiSameValue(address[] _to, uint256 _value) transable public returns (bool){\n        require(_to.length <= 300, \"transfer once should be less than 300, or will be slow\");\n        uint256 len = _to.length;\n        uint256 amount = _value.mul(len);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n        address _toI;\n        for(uint256 i; i<len; i++){\n            _toI = _to[i];\n            balanceOf[_toI] = balanceOf[_toI].add(_value);\n            emit Transfer(msg.sender, _toI, _value);\n        }\n        return true;\n    }\n\n    function freeze(address _user, uint256[] _value, uint8[] _step) onlyController public returns (bool success) {\n        require(_value.length == _step.length, \"length of value and step must be equal\");\n        require(_value.length <= 100, \"lock step should less or equal than 100\");\n        uint256 amount; //冻结总额\n        for(uint i; i<_value.length; i++){\n            amount = amount.add(_value[i]);\n        }\n        require(balanceOf[_user] >= amount, \"balance of user must bigger or equal than amount of all steps\");\n        balanceOf[_user] -= amount;\n        freezeOfUser[_user] += amount;\n        uint256 _valueI;\n        uint8 _stepI;\n        for(i=0; i<_value.length; i++){\n            _valueI = _value[i];\n            _stepI = _step[i];\n            freezeOf[_stepI].push(uint256(_user)<<96|_valueI);\n        }\n        emit Freeze(_user, amount);\n        return true;\n    }\n\n    function unFreeze(uint8 _step) onlyController public returns (bool unlockOver) {\n        require(stepLockend[_step]<now && (currUnlockStep==_step || currUnlockSeq==uint256(0)));\n        require(stepUnlockInfo[_step]==false);\n        uint256[] memory currArr = freezeOf[_step];\n        currUnlockStep = _step;\n        if(currUnlockSeq==uint256(0)){\n            currUnlockSeq = currArr.length;\n        }\n        uint256 start = ((currUnlockSeq>99)?(currUnlockSeq-99): 0);\n\n        uint256 userLockInfo;\n        uint256 _amount;\n        address userAddress;\n        for(uint256 end = currUnlockSeq; end>start; end--){\n            userLockInfo = freezeOf[_step][end-1];\n            _amount = userLockInfo&0xFFFFFFFFFFFFFFFFFFFFFFFF;\n            userAddress = address(userLockInfo>>96);\n            balanceOf[userAddress] += _amount;\n            freezeOfUser[userAddress] = freezeOfUser[userAddress].sub(_amount);\n            emit Unfreeze(userAddress, _amount);\n        }\n        if(start==0){\n            stepUnlockInfo[_step] = true;\n            currUnlockSeq = 0;\n        }else{\n            currUnlockSeq = start;\n        }\n        return true;\n    }\n    \n    function() payable public {\n        require(isContract(controller), \"controller is not a contract\");\n        bool proxyPayment = TokenController(controller).proxyPayment.value(msg.value)(msg.sender);\n        require(proxyPayment);\n    }\n\n    function generateTokens(address _user, uint _amount) onlyController userEnough(owner, _amount) public returns (bool) {\n        balanceOf[_user] += _amount;\n        balanceOf[owner] -= _amount;\n        emit Transfer(0, _user, _amount);\n        return true;\n    }\n\n    function destroyTokens(address _user, uint _amount) onlyController userEnough(_user, _amount) public returns (bool) {\n        require(balanceOf[_user] >= _amount);\n        balanceOf[owner] += _amount;\n        balanceOf[_user] -= _amount;\n        emit Transfer(_user, 0, _amount);\n        emit Burn(_user, _amount);\n        return true;\n    }\n\n    function changeOwner(address newOwner) onlyOwner public returns (bool) {\n        balanceOf[newOwner] = balanceOf[owner];\n        balanceOf[owner] = 0;\n        owner = newOwner;\n        return true;\n    }\n\n    function enableTransfers(bool _transfersEnabled) onlyController public {\n        transfersEnabled = _transfersEnabled;\n    }\n}\n\ncontract SomeController is Controlled {\n\n    using SafeMath for uint256;\n\n    bool public paused;\n\n    //uint256 public startFundingTime;\n    //uint256 public endFundingTime;\n\n    uint256 public softCap; //软顶\n    uint256 public hardCap = 5000*10**18; //硬顶\n    \n    uint256 public minFunding = 10*10**18;  //最低起投额\n    //uint256 public maximumFunding; //最高投资额\n    uint256 public tokensPerEther1 = 128000; //比例\n    uint256 public tokensPerEther2 = 91500; //比例\n\n\n    uint256 public totalCollected;\n    Token public tokenContract;\n    bool public finalized = false;\n    bool public allowChange = true;\n    address private vaultAddress;\n\n    bool private initialed = false;\n\n    event Payment(address indexed _sender, uint256 _ethAmount, uint256 _tokenAmount);\n    event Info256(string name, uint256 msg);\n    event LastFund(uint256 funding, uint256 backValue);\n\n    constructor(address tokenAddr) public {\n        tokenContract = Token(tokenAddr);\n    }\n\n    function setLockStep(uint8[] steps, uint[] times) onlyController public {\n        require(steps.length == times.length, \"params length different\");\n        for(uint i; i<steps.length; i++){\n            tokenContract.addLockStep(steps[i], times[i]);\n        }\n    }\n\n    /**\n    * @notice Notifies the controller about a transfer, for this PreTokenSale all transfers are allowed by default and no extra notifications are needed\n    * @param _from The origin of the transfer\n    * @param _to The destination of the transfer\n    * @param _amount The amount of the transfer\n    * @return False if the controller does not authorize the transfer\n    */\n    function onTransfer(address _from, address _to, uint _amount) public view returns(bool){\n        if ( _from == vaultAddress) {\n            return true;\n        }\n        _to;\n        _amount;\n        return false;\n    }\n\n    /**\n     * @notice Notifies the controller about an approval, for this PreTokenSale all\n     * approvals are allowed by default and no extra notifications are needed\n     * @param _owner The address that calls `approve()`\n     * @param _spender The spender in the `approve()` call\n     * @param _amount The amount in the `approve()` call\n     * @return False if the controller does not authorize the approval\n     */\n    function onApprove(address _owner, address _spender, uint _amount) public view returns(bool){\n        if ( _owner == vaultAddress ) {\n            return true;\n        }\n        _spender;\n        _amount;\n        return false;\n    }\n\n    /// @dev `doPayment()` is an internal function that sends the ether that this\n    ///  contract receives to the `vault` and creates tokens in the address of the\n    ///  `_owner` assuming the PreTokenSale is still accepting funds\n    /// @param _owner The address that will hold the newly created tokens\n\n    function fixFunding(address[] _owner, uint256[] _value, uint8[] _steps, uint8[] _percents) onlyController public {\n        require(_owner.length == _value.length, \"length of address is different with value\");\n        require(_steps.length == _percents.length, \"length of steps is different with percents\");\n        address ownerNow;\n        uint256 valueNow;\n        for(uint i=0; i<_owner.length; i++){\n            ownerNow = _owner[i];\n            valueNow = _value[i];\n            require(tokenContract.generateTokens(ownerNow, valueNow), \"generateTokens executed error\");\n            //按需冻结投资人资金\n            //freezeAccount(_owner, tokenValue1, tokenValue2);\n            uint256[] memory valueArr = new uint256[](_steps.length);\n            //内层循环必须初始化值，不然第二次执行时，不再初始化，导致值错误而不进入循环体\n            for(uint j=0; j<_steps.length; j++){\n                valueArr[j] = valueNow*_percents[j]/100;\n            }\n            tokenContract.freeze(ownerNow, valueArr, _steps);\n        }\n    }\n\n    function changeTokenController(address _newController) onlyController public {\n        tokenContract.changeController(_newController);\n    }\n\n    /**\n     * 修改所控 Token 合约\n     */\n    function changeToken(address _newToken) onlyController public {\n        tokenContract = Token(_newToken);\n    }\n\n    function changeVault(address _newVaultAddress) onlyController public {\n        vaultAddress = _newVaultAddress;\n    }\n\n    /// @notice Pauses the contribution if there is any issue\n    function pauseContribution() onlyController public {\n        paused = true;\n    }\n\n    /// @notice Resumes the contribution\n    function resumeContribution() onlyController public {\n        paused = false;\n    }\n\n    modifier notPaused() {\n        require(!paused);\n        _;\n    }\n\n    // /**\n    //  * 修改Token兑换比率\n    //  */\n    // function changeTokensPerEther(uint256 _newRate) onlyController public {\n    //    require(transfersEnabled==false);\n    //    require(_newRate>0);\n    //    tokensPerEther = _newRate;\n    //    transfersEnabled = true;\n    // }\n\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns (bool) {\n        if (_addr == 0) {\n            return false;\n        }\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n\n    function claimTokens(address[] tokens) onlyController public {\n        address _token;\n        uint256 balance;\n        for(uint256 i; i<tokens.length; i++){\n            _token = tokens[i];\n            if (_token == 0x0) {\n                balance = address(this).balance;\n                if(balance > 0){\n                    msg.sender.transfer(balance);\n                }\n            }else{\n                ERC20Token token = ERC20Token(_token);\n                balance = token.balanceOf(address(this));\n                token.transfer(msg.sender, balance);\n                emit ClaimedTokens(_token, msg.sender, balance);\n            }\n        }\n    }\n\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVaultAddress\",\"type\":\"address\"}],\"name\":\"changeVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_steps\",\"type\":\"uint8[]\"},{\"name\":\"_percents\",\"type\":\"uint8[]\"}],\"name\":\"fixFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowChange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeTokenController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"steps\",\"type\":\"uint8[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"}],\"name\":\"setLockStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"msg\",\"type\":\"uint256\"}],\"name\":\"Info256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"funding\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"backValue\",\"type\":\"uint256\"}],\"name\":\"LastFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000f67118fe68ff5fd1460820c49c6cd5ff1d5d74eb"
}