{
  "address": "0x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Raiden Token",
  "contractName": "RaidenToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-18\n*/\n\npragma solidity ^0.4.17;\n\n/// @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens.\ncontract ERC223ReceivingContract {\n\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\n    /// @param _from Transaction initiator, analogue of msg.sender\n    /// @param _value Number of tokens to transfer.\n    /// @param _data Data containig a function signature and/or parameters\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n}\n\ncontract Token {\n    /*\n     * Implements ERC 20 standard.\n     * https://github.com/ethereum/EIPs/blob/f90864a3d2b2b45c4decf95efd26b3f0c276051a/EIPS/eip-20-token-standard.md\n     * https://github.com/ethereum/EIPs/issues/20\n     *\n     *  Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\n     *  https://github.com/ethereum/EIPs/issues/223\n     */\n\n    /*\n     * This is a slight change to the ERC20 base standard.\n     * function totalSupply() constant returns (uint256 supply);\n     * is replaced with:\n     * uint256 public totalSupply;\n     * This automatically creates a getter function for the totalSupply.\n     * This is moved to the base contract since public getter functions are not\n     * currently recognised as an implementation of the matching abstract\n     * function by the compiler.\n     */\n    uint256 public totalSupply;\n\n    /*\n     * ERC 20\n     */\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    /*\n     * ERC 223\n     */\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n\n    /*\n     * Events\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // There is no ERC223 compatible Transfer event, with `_data` included.\n}\n\n\n/// @title Standard token contract - Standard token implementation.\ncontract StandardToken is Token {\n\n    /*\n     * Data structures\n     */\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /*\n     * Public functions\n     */\n    /// @notice Send `_value` tokens to `_to` from `msg.sender`.\n    /// @dev Transfers sender's tokens to a given address. Returns success.\n    /// @param _to Address of token receiver.\n    /// @param _value Number of tokens to transfer.\n    /// @return Returns success of function call.\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != 0x0);\n        require(_to != address(this));\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /// @notice Send `_value` tokens to `_to` from `msg.sender` and trigger\n    /// tokenFallback if sender is a contract.\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\n    /// @param _to Address of token receiver.\n    /// @param _value Number of tokens to transfer.\n    /// @param _data Data to be sent to tokenFallback\n    /// @return Returns success of function call.\n    function transfer(\n        address _to,\n        uint256 _value,\n        bytes _data)\n        public\n        returns (bool)\n    {\n        require(transfer(_to, _value));\n\n        uint codeLength;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly.\n            codeLength := extcodesize(_to)\n        }\n\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        return true;\n    }\n\n    /// @notice Transfer `_value` tokens from `_from` to `_to` if `msg.sender` is allowed.\n    /// @dev Allows for an approved third party to transfer tokens from one\n    /// address to another. Returns success.\n    /// @param _from Address from where tokens are withdrawn.\n    /// @param _to Address to where tokens are sent.\n    /// @param _value Number of tokens to transfer.\n    /// @return Returns success of function call.\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool)\n    {\n        require(_from != 0x0);\n        require(_to != 0x0);\n        require(_to != address(this));\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /// @notice Allows `_spender` to transfer `_value` tokens from `msg.sender` to any address.\n    /// @dev Sets approved amount of tokens for spender. Returns success.\n    /// @param _spender Address of allowed account.\n    /// @param _value Number of approved tokens.\n    /// @return Returns success of function call.\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_spender != 0x0);\n\n        // To change the approve amount you first have to reduce the addresses`\n        // allowance to zero by calling `approve(_spender, 0)` if it is not\n        // already 0 to mitigate the race condition described here:\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /*\n     * Read functions\n     */\n    /// @dev Returns number of allowed tokens that a spender can transfer on\n    /// behalf of a token owner.\n    /// @param _owner Address of token owner.\n    /// @param _spender Address of token spender.\n    /// @return Returns remaining allowance for spender.\n    function allowance(address _owner, address _spender)\n        constant\n        public\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /// @dev Returns number of tokens owned by the given address.\n    /// @param _owner Address of token owner.\n    /// @return Returns balance of owner.\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n}\n\n\n/// @title Raiden Token\ncontract RaidenToken is StandardToken {\n\n    /*\n     *  Terminology:\n     *  1 token unit = Rei\n     *  1 token = RDN = Rei * multiplier\n     *  multiplier set from token's number of decimals (i.e. 10 ** decimals)\n     */\n\n    /*\n     *  Token metadata\n     */\n    string constant public name = \"Raiden Token\";\n    string constant public symbol = \"RDN\";\n    uint8 constant public decimals = 18;\n    uint constant multiplier = 10 ** uint(decimals);\n\n    event Deployed(uint indexed _total_supply);\n    event Burnt(\n        address indexed _receiver,\n        uint indexed _num,\n        uint indexed _total_supply\n    );\n\n    /*\n     *  Public functions\n     */\n    /// @dev Contract constructor function sets dutch auction contract address\n    /// and assigns all tokens to dutch auction.\n    /// @param auction_address Address of dutch auction contract.\n    /// @param wallet_address Address of wallet.\n    /// @param initial_supply Number of initially provided token units (Rei).\n    function RaidenToken(\n        address auction_address,\n        address wallet_address,\n        uint initial_supply)\n        public\n    {\n        // Auction address should not be null.\n        require(auction_address != 0x0);\n        require(wallet_address != 0x0);\n\n        // Initial supply is in Rei\n        require(initial_supply > multiplier);\n\n        // Total supply of Rei at deployment\n        totalSupply = initial_supply;\n\n        balances[auction_address] = initial_supply / 2;\n        balances[wallet_address] = initial_supply / 2;\n\n        Transfer(0x0, auction_address, balances[auction_address]);\n        Transfer(0x0, wallet_address, balances[wallet_address]);\n\n        Deployed(totalSupply);\n\n        assert(totalSupply == balances[auction_address] + balances[wallet_address]);\n    }\n\n    /// @notice Allows `msg.sender` to simply destroy `num` token units (Rei). This means the total\n    /// token supply will decrease.\n    /// @dev Allows to destroy token units (Rei).\n    /// @param num Number of token units (Rei) to burn.\n    function burn(uint num) public {\n        require(num > 0);\n        require(balances[msg.sender] >= num);\n        require(totalSupply >= num);\n\n        uint pre_balance = balances[msg.sender];\n\n        balances[msg.sender] -= num;\n        totalSupply -= num;\n        Burnt(msg.sender, num, totalSupply);\n        Transfer(msg.sender, 0x0, num);\n\n        assert(balances[msg.sender] == pre_balance - num);\n    }\n\n}\n\n\n/// @title Dutch auction contract - distribution of a fixed number of tokens using an auction.\n/// The contract code is inspired by the Gnosis auction contract. Main difference is that the\n/// auction ends if a fixed number of tokens was sold.\ncontract DutchAuction {\n    /*\n     * Auction for the RDN Token.\n     *\n     * Terminology:\n     * 1 token unit = Rei\n     * 1 token = RDN = Rei * token_multiplier\n     * token_multiplier set from token's number of decimals (i.e. 10 ** decimals)\n     */\n\n    // Wait 7 days after the end of the auction, before anyone can claim tokens\n    uint constant public token_claim_waiting_period = 7 days;\n\n    // Bid value over which the address has to be whitelisted\n    // At deployment moment, less than 1k$\n    uint constant public bid_threshold = 2.5 ether;\n\n    /*\n     * Storage\n     */\n\n    RaidenToken public token;\n    address public owner_address;\n    address public wallet_address;\n    address public whitelister_address;\n\n    // Price decay function parameters to be changed depending on the desired outcome\n\n    // Starting price in WEI; e.g. 2 * 10 ** 18\n    uint public price_start;\n\n    // Divisor constant; e.g. 524880000\n    uint public price_constant;\n\n    // Divisor exponent; e.g. 3\n    uint32 public price_exponent;\n\n    // For calculating elapsed time for price\n    uint public start_time;\n    uint public end_time;\n    uint public start_block;\n\n    // Keep track of all ETH received in the bids\n    uint public received_wei;\n\n    // Keep track of cumulative ETH funds for which the tokens have been claimed\n    uint public funds_claimed;\n\n    uint public token_multiplier;\n\n    // Total number of Rei (RDN * token_multiplier) that will be auctioned\n    uint public num_tokens_auctioned;\n\n    // Wei per RDN (Rei * token_multiplier)\n    uint public final_price;\n\n    // Bidder address => bid value\n    mapping (address => uint) public bids;\n\n    // Whitelist for addresses that want to bid more than bid_threshold\n    mapping (address => bool) public whitelist;\n\n    Stages public stage;\n\n    /*\n     * Enums\n     */\n    enum Stages {\n        AuctionDeployed,\n        AuctionSetUp,\n        AuctionStarted,\n        AuctionEnded,\n        TokensDistributed\n    }\n\n    /*\n     * Modifiers\n     */\n    modifier atStage(Stages _stage) {\n        require(stage == _stage);\n        _;\n    }\n\n    modifier isOwner() {\n        require(msg.sender == owner_address);\n        _;\n    }\n\n    modifier isWhitelister() {\n        require(msg.sender == whitelister_address);\n        _;\n    }\n\n    /*\n     * Events\n     */\n\n    event Deployed(\n        uint indexed _price_start,\n        uint indexed _price_constant,\n        uint32 indexed _price_exponent\n    );\n    event Setup();\n    event AuctionStarted(uint indexed _start_time, uint indexed _block_number);\n    event BidSubmission(\n        address indexed _sender,\n        uint _amount,\n        uint _missing_funds\n    );\n    event ClaimedTokens(address indexed _recipient, uint _sent_amount);\n    event AuctionEnded(uint _final_price);\n    event TokensDistributed();\n\n    /*\n     * Public functions\n     */\n\n    /// @dev Contract constructor function sets the starting price, divisor constant and\n    /// divisor exponent for calculating the Dutch Auction price.\n    /// @param _wallet_address Wallet address to which all contributed ETH will be forwarded.\n    /// @param _price_start High price in WEI at which the auction starts.\n    /// @param _price_constant Auction price divisor constant.\n    /// @param _price_exponent Auction price divisor exponent.\n    function DutchAuction(\n        address _wallet_address,\n        address _whitelister_address,\n        uint _price_start,\n        uint _price_constant,\n        uint32 _price_exponent)\n        public\n    {\n        require(_wallet_address != 0x0);\n        require(_whitelister_address != 0x0);\n        wallet_address = _wallet_address;\n        whitelister_address = _whitelister_address;\n\n        owner_address = msg.sender;\n        stage = Stages.AuctionDeployed;\n        changeSettings(_price_start, _price_constant, _price_exponent);\n        Deployed(_price_start, _price_constant, _price_exponent);\n    }\n\n    /// @dev Fallback function for the contract, which calls bid() if the auction has started.\n    function () public payable atStage(Stages.AuctionStarted) {\n        bid();\n    }\n\n    /// @notice Set `_token_address` as the token address to be used in the auction.\n    /// @dev Setup function sets external contracts addresses.\n    /// @param _token_address Token address.\n    function setup(address _token_address) public isOwner atStage(Stages.AuctionDeployed) {\n        require(_token_address != 0x0);\n        token = RaidenToken(_token_address);\n\n        // Get number of Rei (RDN * token_multiplier) to be auctioned from token auction balance\n        num_tokens_auctioned = token.balanceOf(address(this));\n\n        // Set the number of the token multiplier for its decimals\n        token_multiplier = 10 ** uint(token.decimals());\n\n        stage = Stages.AuctionSetUp;\n        Setup();\n    }\n\n    /// @notice Set `_price_start`, `_price_constant` and `_price_exponent` as\n    /// the new starting price, price divisor constant and price divisor exponent.\n    /// @dev Changes auction price function parameters before auction is started.\n    /// @param _price_start Updated start price.\n    /// @param _price_constant Updated price divisor constant.\n    /// @param _price_exponent Updated price divisor exponent.\n    function changeSettings(\n        uint _price_start,\n        uint _price_constant,\n        uint32 _price_exponent)\n        internal\n    {\n        require(stage == Stages.AuctionDeployed || stage == Stages.AuctionSetUp);\n        require(_price_start > 0);\n        require(_price_constant > 0);\n\n        price_start = _price_start;\n        price_constant = _price_constant;\n        price_exponent = _price_exponent;\n    }\n\n    /// @notice Adds account addresses to whitelist.\n    /// @dev Adds account addresses to whitelist.\n    /// @param _bidder_addresses Array of addresses.\n    function addToWhitelist(address[] _bidder_addresses) public isWhitelister {\n        for (uint32 i = 0; i < _bidder_addresses.length; i++) {\n            whitelist[_bidder_addresses[i]] = true;\n        }\n    }\n\n    /// @notice Removes account addresses from whitelist.\n    /// @dev Removes account addresses from whitelist.\n    /// @param _bidder_addresses Array of addresses.\n    function removeFromWhitelist(address[] _bidder_addresses) public isWhitelister {\n        for (uint32 i = 0; i < _bidder_addresses.length; i++) {\n            whitelist[_bidder_addresses[i]] = false;\n        }\n    }\n\n    /// @notice Start the auction.\n    /// @dev Starts auction and sets start_time.\n    function startAuction() public isOwner atStage(Stages.AuctionSetUp) {\n        stage = Stages.AuctionStarted;\n        start_time = now;\n        start_block = block.number;\n        AuctionStarted(start_time, start_block);\n    }\n\n    /// @notice Finalize the auction - sets the final RDN token price and changes the auction\n    /// stage after no bids are allowed anymore.\n    /// @dev Finalize auction and set the final RDN token price.\n    function finalizeAuction() public atStage(Stages.AuctionStarted)\n    {\n        // Missing funds should be 0 at this point\n        uint missing_funds = missingFundsToEndAuction();\n        require(missing_funds == 0);\n\n        // Calculate the final price = WEI / RDN = WEI / (Rei / token_multiplier)\n        // Reminder: num_tokens_auctioned is the number of Rei (RDN * token_multiplier) that are auctioned\n        final_price = token_multiplier * received_wei / num_tokens_auctioned;\n\n        end_time = now;\n        stage = Stages.AuctionEnded;\n        AuctionEnded(final_price);\n\n        assert(final_price > 0);\n    }\n\n    /// --------------------------------- Auction Functions ------------------\n\n\n    /// @notice Send `msg.value` WEI to the auction from the `msg.sender` account.\n    /// @dev Allows to send a bid to the auction.\n    function bid()\n        public\n        payable\n        atStage(Stages.AuctionStarted)\n    {\n        require(msg.value > 0);\n        require(bids[msg.sender] + msg.value <= bid_threshold || whitelist[msg.sender]);\n        assert(bids[msg.sender] + msg.value >= msg.value);\n\n        // Missing funds without the current bid value\n        uint missing_funds = missingFundsToEndAuction();\n\n        // We require bid values to be less than the funds missing to end the auction\n        // at the current price.\n        require(msg.value <= missing_funds);\n\n        bids[msg.sender] += msg.value;\n        received_wei += msg.value;\n\n        // Send bid amount to wallet\n        wallet_address.transfer(msg.value);\n\n        BidSubmission(msg.sender, msg.value, missing_funds);\n\n        assert(received_wei >= msg.value);\n    }\n\n    /// @notice Claim auction tokens for `msg.sender` after the auction has ended.\n    /// @dev Claims tokens for `msg.sender` after auction. To be used if tokens can\n    /// be claimed by beneficiaries, individually.\n    function claimTokens() public atStage(Stages.AuctionEnded) returns (bool) {\n        return proxyClaimTokens(msg.sender);\n    }\n\n    /// @notice Claim auction tokens for `receiver_address` after the auction has ended.\n    /// @dev Claims tokens for `receiver_address` after auction has ended.\n    /// @param receiver_address Tokens will be assigned to this address if eligible.\n    function proxyClaimTokens(address receiver_address)\n        public\n        atStage(Stages.AuctionEnded)\n        returns (bool)\n    {\n        // Waiting period after the end of the auction, before anyone can claim tokens\n        // Ensures enough time to check if auction was finalized correctly\n        // before users start transacting tokens\n        require(now > end_time + token_claim_waiting_period);\n        require(receiver_address != 0x0);\n\n        if (bids[receiver_address] == 0) {\n            return false;\n        }\n\n        // Number of Rei = bid_wei / Rei = bid_wei / (wei_per_RDN * token_multiplier)\n        uint num = (token_multiplier * bids[receiver_address]) / final_price;\n\n        // Due to final_price floor rounding, the number of assigned tokens may be higher\n        // than expected. Therefore, the number of remaining unassigned auction tokens\n        // may be smaller than the number of tokens needed for the last claimTokens call\n        uint auction_tokens_balance = token.balanceOf(address(this));\n        if (num > auction_tokens_balance) {\n            num = auction_tokens_balance;\n        }\n\n        // Update the total amount of funds for which tokens have been claimed\n        funds_claimed += bids[receiver_address];\n\n        // Set receiver bid to 0 before assigning tokens\n        bids[receiver_address] = 0;\n\n        require(token.transfer(receiver_address, num));\n\n        ClaimedTokens(receiver_address, num);\n\n        // After the last tokens are claimed, we change the auction stage\n        // Due to the above logic, rounding errors will not be an issue\n        if (funds_claimed == received_wei) {\n            stage = Stages.TokensDistributed;\n            TokensDistributed();\n        }\n\n        assert(token.balanceOf(receiver_address) >= num);\n        assert(bids[receiver_address] == 0);\n        return true;\n    }\n\n    /// @notice Get the RDN price in WEI during the auction, at the time of\n    /// calling this function. Returns `0` if auction has ended.\n    /// Returns `price_start` before auction has started.\n    /// @dev Calculates the current RDN token price in WEI.\n    /// @return Returns WEI per RDN (token_multiplier * Rei).\n    function price() public constant returns (uint) {\n        if (stage == Stages.AuctionEnded ||\n            stage == Stages.TokensDistributed) {\n            return 0;\n        }\n        return calcTokenPrice();\n    }\n\n    /// @notice Get the missing funds needed to end the auction,\n    /// calculated at the current RDN price in WEI.\n    /// @dev The missing funds amount necessary to end the auction at the current RDN price in WEI.\n    /// @return Returns the missing funds amount in WEI.\n    function missingFundsToEndAuction() constant public returns (uint) {\n\n        // num_tokens_auctioned = total number of Rei (RDN * token_multiplier) that is auctioned\n        uint required_wei_at_price = num_tokens_auctioned * price() / token_multiplier;\n        if (required_wei_at_price <= received_wei) {\n            return 0;\n        }\n\n        // assert(required_wei_at_price - received_wei > 0);\n        return required_wei_at_price - received_wei;\n    }\n\n    /*\n     *  Private functions\n     */\n\n    /// @dev Calculates the token price (WEI / RDN) at the current timestamp\n    /// during the auction; elapsed time = 0 before auction starts.\n    /// Based on the provided parameters, the price does not change in the first\n    /// `price_constant^(1/price_exponent)` seconds due to rounding.\n    /// Rounding in `decay_rate` also produces values that increase instead of decrease\n    /// in the beginning; these spikes decrease over time and are noticeable\n    /// only in first hours. This should be calculated before usage.\n    /// @return Returns the token price - Wei per RDN.\n    function calcTokenPrice() constant private returns (uint) {\n        uint elapsed;\n        if (stage == Stages.AuctionStarted) {\n            elapsed = now - start_time;\n        }\n\n        uint decay_rate = elapsed ** price_exponent / price_constant;\n        return price_start * (1 + elapsed) / (1 + elapsed + decay_rate);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"auction_address\",\"type\":\"address\"},{\"name\":\"wallet_address\",\"type\":\"address\"},{\"name\":\"initial_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_total_supply\",\"type\":\"uint256\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_num\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_total_supply\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b60405160608061143e8339810160405280805190602001909190805190602001909190805190602001909190505060008373ffffffffffffffffffffffffffffffffffffffff161415151561006357600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff161415151561008957600080fd5b601260ff16600a0a8111151561009e57600080fd5b806000819055506002818115156100b157fe5b04600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060028181151561010157fe5b04600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36000547fb94ae47ec9f4248692e2ecf9740b67ab493f3dcc8452bedc7d9cd911c28d1ca560405160405180910390a2600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540160005414151561031f57fe5b50505061110d806103316000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b2578063095ea7b31461014057806318160ddd1461019a57806323b872dd146101c3578063313ce5671461023c57806342966c681461026b57806370a082311461028e57806395d89b41146102db578063a9059cbb14610369578063be45fd62146103c3578063dd62ed3e14610460575b600080fd5b34156100bd57600080fd5b6100c56104cc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101055780820151818401526020810190506100ea565b50505050905090810190601f1680156101325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014b57600080fd5b610180600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610505565b604051808215151515815260200191505060405180910390f35b34156101a557600080fd5b6101ad6106b2565b6040518082815260200191505060405180910390f35b34156101ce57600080fd5b610222600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106b8565b604051808215151515815260200191505060405180910390f35b341561024757600080fd5b61024f610a3c565b604051808260ff1660ff16815260200191505060405180910390f35b341561027657600080fd5b61028c6004808035906020019091905050610a41565b005b341561029957600080fd5b6102c5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c35565b6040518082815260200191505060405180910390f35b34156102e657600080fd5b6102ee610c7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032e578082015181840152602081019050610313565b50505050905090810190601f16801561035b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037457600080fd5b6103a9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cb7565b604051808215151515815260200191505060405180910390f35b34156103ce57600080fd5b610446600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610eff565b604051808215151515815260200191505060405180910390f35b341561046b57600080fd5b6104b6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061105a565b6040518082815260200191505060405180910390f35b6040805190810160405280600c81526020017f52616964656e20546f6b656e000000000000000000000000000000000000000081525081565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561052c57600080fd5b60008214806105b757506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156105c257600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000808473ffffffffffffffffffffffffffffffffffffffff16141515156106df57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561070557600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561074057600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561078e57600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561081957600080fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156108a857600080fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b60008082111515610a5157600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a9f57600080fd5b8160005410151515610ab057600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808282540392505081905550600054823373ffffffffffffffffffffffffffffffffffffffff167f0f7742877f0f24e648fdf2c46a85dfa3fd07291c0f0c3fcf3e8c6011749e569860405160405180910390a460003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3818103600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610c3157fe5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f52444e000000000000000000000000000000000000000000000000000000000081525081565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610cde57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d1957600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d6757600080fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610df657600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000806000610f0e8686610cb7565b1515610f1957600080fd5b853b9150600082111561104d578590508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3387876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610feb578082015181840152602081019050610fd0565b50505050905090810190601f1680156110185780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561103857600080fd5b6102c65a03f1151561104957600080fd5b5050505b6001925050509392505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a7230582051e36fe02c0a5b63e4b6ede92505e12f7042ac77a16469c8c2e2928d1c00b7350029000000000000000000000000b5e5585d0057501c91c48094029a6f4fb10b5a0100000000000000000000000000c7122633a4ef0bc72f7d02456ee2b11e97561e00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
  "constructorArguments": "000000000000000000000000b5e5585d0057501c91c48094029a6f4fb10b5a0100000000000000000000000000c7122633a4ef0bc72f7d02456ee2b11e97561e00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000"
}