{
  "address": "0xbdda280ee7bccc68f3be60a369b6b1eaee02493c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitoxToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-29\n*/\n\npragma solidity 0.4.24;\n\n// File: contracts/commons/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: contracts/base/BaseExchangeableTokenInterface.sol\n\ninterface BaseExchangeableTokenInterface {\n\n    // Sender interface must have:\n    // mapping(address => uint) private exchangedWith;\n    // mapping(address => uint) private exchangedBy;\n\n    // Receiver interface must have:\n    // mapping(address => uint) private exchangesReceived;\n\n    /// @dev Fired if token exchange complete\n    event Exchange(address _from, address _targetContract, uint _amount);\n\n    /// @dev Fired if token exchange and spent complete\n    event ExchangeSpent(address _from, address _targetContract, address _to, uint _amount);\n\n    // Sender interface\n    function exchangeToken(address _targetContract, uint _amount) external returns (bool success, uint creditedAmount);\n\n    function exchangeAndSpend(address _targetContract, uint _amount, address _to) external returns (bool success);\n\n    function __exchangerCallback(address _targetContract, address _exchanger, uint _amount) external returns (bool success);\n\n    // Receiver interface\n    function __targetExchangeCallback(uint _amount) external returns (bool success);\n\n    function __targetExchangeAndSpendCallback(address _to, uint _amount) external returns (bool success);\n}\n\n// File: contracts/flavours/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// File: contracts/flavours/Lockable.sol\n\n/**\n * @title Lockable\n * @dev Base contract which allows children to\n *      implement main operations locking mechanism.\n */\ncontract Lockable is Ownable {\n    event Lock();\n    event Unlock();\n\n    bool public locked = false;\n\n    /**\n     * @dev Modifier to make a function callable\n    *       only when the contract is not locked.\n     */\n    modifier whenNotLocked() {\n        require(!locked);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable\n     *      only when the contract is locked.\n     */\n    modifier whenLocked() {\n        require(locked);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to lock, triggers locked state\n     */\n    function lock() public onlyOwner whenNotLocked {\n        locked = true;\n        emit Lock();\n    }\n\n    /**\n     * @dev called by the owner\n     *      to unlock, returns to unlocked state\n     */\n    function unlock() public onlyOwner whenLocked {\n        locked = false;\n        emit Unlock();\n    }\n}\n\n// File: contracts/base/BaseFixedERC20Token.sol\n\ncontract BaseFixedERC20Token is Lockable {\n    using SafeMath for uint;\n\n    /// @dev ERC20 Total supply\n    uint public totalSupply;\n\n    mapping(address => uint) public balances;\n\n    mapping(address => mapping(address => uint)) private allowed;\n\n    /// @dev Fired if token is transferred according to ERC20 spec\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    /// @dev Fired if token withdrawal is approved according to ERC20 spec\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param owner_ The address to query the the balance of\n     * @return An uint representing the amount owned by the passed address\n     */\n    function balanceOf(address owner_) public view returns (uint balance) {\n        return balances[owner_];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param to_ The address to transfer to.\n     * @param value_ The amount to be transferred.\n     */\n    function transfer(address to_, uint value_) public whenNotLocked returns (bool) {\n        require(to_ != address(0) && value_ <= balances[msg.sender]);\n        // SafeMath.sub will throw an exception if there is not enough balance\n        balances[msg.sender] = balances[msg.sender].sub(value_);\n        balances[to_] = balances[to_].add(value_);\n        emit Transfer(msg.sender, to_, value_);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from_ address The address which you want to send tokens from\n     * @param to_ address The address which you want to transfer to\n     * @param value_ uint the amount of tokens to be transferred\n     */\n    function transferFrom(address from_, address to_, uint value_) public whenNotLocked returns (bool) {\n        require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\n        balances[from_] = balances[from_].sub(value_);\n        balances[to_] = balances[to_].add(value_);\n        allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\n        emit Transfer(from_, to_, value_);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering\n     *\n     * To change the approve amount you first have to reduce the addresses\n     * allowance to zero by calling `approve(spender_, 0)` if it is not\n     * already 0 to mitigate the race condition described in:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @param spender_ The address which will spend the funds.\n     * @param value_ The amount of tokens to be spent.\n     */\n    function approve(address spender_, uint value_) public whenNotLocked returns (bool) {\n        if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\n            revert();\n        }\n        allowed[msg.sender][spender_] = value_;\n        emit Approval(msg.sender, spender_, value_);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     * @param owner_ address The address which owns the funds\n     * @param spender_ address The address which will spend the funds\n     * @return A uint specifying the amount of tokens still available for the spender\n     */\n    function allowance(address owner_, address spender_) public view returns (uint) {\n        return allowed[owner_][spender_];\n    }\n}\n\n// File: contracts/base/BaseTokenExchangeInterface.sol\n\ninterface BaseTokenExchangeInterface {\n    // Token exchange service contract must have:\n    // address[] private registeredTokens;\n\n    /// @dev Fired if token exchange complete\n    event Exchange(address _from, address _by, uint _value, address _target);\n\n    /// @dev Fired if token exchange and spent complete\n    event ExchangeAndSpent(address _from, address _by, uint _value, address _target, address _to);\n\n    function registerToken(address _token) external returns (bool success);\n\n    function exchangeToken(address _targetContract, uint _amount) external returns (bool success, uint creditedAmount);\n\n    function exchangeAndSpend(address _targetContract, uint _amount, address _to) external returns (bool success);\n}\n\n// File: contracts/base/BaseExchangeableToken.sol\n\n/**\n * @dev ERC20 and EIP-823 (exchangeable) compliant token.\n */\ncontract BaseExchangeableToken is BaseExchangeableTokenInterface, BaseFixedERC20Token {\n    using SafeMath for uint;\n\n    BaseTokenExchangeInterface public exchange;\n\n    /// @dev Fired if token is change exchange. (extends EIP-823)\n    event ExchangeChanged(address _exchange);\n\n    /**\n     * @dev Modifier to make a function callable\n     *      only when the exchange contract is set.\n     */\n    modifier whenConfigured() {\n        require(exchange != address(0));\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable\n     *      only by exchange contract\n     */\n    modifier onlyExchange() {\n        require(msg.sender == address(exchange));\n        _;\n    }\n\n    // Sender interface\n    /// @dev number of tokens exchanged to another tokens for each token address\n    mapping(address => uint) private exchangedWith;\n\n    /// @dev number of tokens exchanged to another tokens for each user address\n    mapping(address => uint) private exchangedBy;\n\n    // Receiver interface\n    /// @dev number of tokens exchanged from another tokens for each token address\n    mapping(address => uint) private exchangesReceived;\n\n    /// @dev change exchange for this token. (extends EIP-823)\n    function changeExchange(address _exchange) public onlyOwner {\n        require(_exchange != address(0));\n        exchange = BaseTokenExchangeInterface(_exchange);\n        emit ExchangeChanged(_exchange);\n    }\n\n    // Sender interface\n    /**\n     * @dev exchange amount of this token to target token\n     * @param _targetContract target token contract\n     * @param _amount amount of tokens to exchange\n     * @return (true, creditedAmount) on success.\n     *          (false, 0) on:\n     *              nothing =)\n     *          revert on:\n     *              exchangeToken in exchange contract return (false, 0)\n     *              exchange address is not configured\n     *              balance of tokens less then amount to exchange\n     */\n    function exchangeToken(address _targetContract, uint _amount) public whenConfigured returns (bool success, uint creditedAmount) {\n        require(_targetContract != address(0) && _amount <= balances[msg.sender]);\n        (success, creditedAmount) = exchange.exchangeToken(_targetContract, _amount);\n        if (!success) {\n            revert();\n        }\n        emit Exchange(msg.sender, _targetContract, _amount);\n        return (success, creditedAmount);\n    }\n\n    /**\n     * @dev exchange amount of this token to target token and transfer to specified address\n     * @param _targetContract target token contract\n     * @param _amount amount of tokens to exchange\n     * @param _to address for transferring exchanged tokens\n     * @return true on success.\n     *          false on:\n     *              nothing =)\n     *          revert on:\n     *              exchangeTokenAndSpend in exchange contract return false\n     *              exchange address is not configured\n     *              balance of tokens less then amount to exchange\n     */\n    function exchangeAndSpend(address _targetContract, uint _amount, address _to) public whenConfigured returns (bool success) {\n        require(_targetContract != address(0) && _to != address(0) && _amount <= balances[msg.sender]);\n        success = exchange.exchangeAndSpend(_targetContract, _amount, _to);\n        if (!success) {\n            revert();\n        }\n        emit ExchangeSpent(msg.sender, _targetContract, _to, _amount);\n        return success;\n    }\n\n    /**\n     * @dev send amount of this token to exchange. Must be called only from exchange contract\n     * @param _targetContract target token contract\n     * @param _exchanger address of user, who exchange tokens\n     * @param _amount amount of tokens to exchange\n     * @return true on success.\n     *          false on:\n     *              balance of tokens less then amount to exchange\n     *          revert on:\n     *              exchange address is not configured\n     *              called not by configured exchange address\n     */\n    function __exchangerCallback(address _targetContract, address _exchanger, uint _amount) public whenConfigured onlyExchange returns (bool success) {\n        require(_targetContract != address(0));\n        if (_amount > balances[_exchanger]) {\n            return false;\n        }\n        balances[_exchanger] = balances[_exchanger].sub(_amount);\n        exchangedWith[_targetContract] = exchangedWith[_targetContract].add(_amount);\n        exchangedBy[_exchanger] = exchangedBy[_exchanger].add(_amount);\n        return true;\n    }\n\n    // Receiver interface\n    /**\n     * @dev receive amount of tokens from exchange. Must be called only from exchange contract\n     * @param _amount amount of tokens to receive\n     * @return true on success.\n     *          false on:\n     *              nothing =)\n     *          revert on:\n     *              exchange address is not configured\n     *              called not by configured exchange address\n     */\n    function __targetExchangeCallback(uint _amount) public whenConfigured onlyExchange returns (bool success) {\n        balances[tx.origin] = balances[tx.origin].add(_amount);\n        exchangesReceived[tx.origin] = exchangesReceived[tx.origin].add(_amount);\n        emit Exchange(tx.origin, this, _amount);\n        return true;\n    }\n\n    /**\n     * @dev receive amount of tokens from exchange and transfer to specified address. Must be called only from exchange contract\n     * @param _amount amount of tokens to receive\n     * @param _to address for transferring exchanged tokens\n     * @return true on success.\n     *          false on:\n     *              nothing =)\n     *          revert on:\n     *              exchange address is not configured\n     *              called not by configured exchange address\n     */\n    function __targetExchangeAndSpendCallback(address _to, uint _amount) public whenConfigured onlyExchange returns (bool success) {\n        balances[_to] = balances[_to].add(_amount);\n        exchangesReceived[_to] = exchangesReceived[_to].add(_amount);\n        emit ExchangeSpent(tx.origin, this, _to, _amount);\n        return true;\n    }\n}\n\n// File: contracts/BitoxToken.sol\n\n/**\n * @title Bitox token contract.\n */\ncontract BitoxToken is BaseExchangeableToken {\n    using SafeMath for uint;\n\n    string public constant name = \"BitoxTokens\";\n\n    string public constant symbol = \"BITOX\";\n\n    uint8 public constant decimals = 18;\n\n    uint internal constant ONE_TOKEN = 1e18;\n\n    constructor(uint totalSupplyTokens_) public {\n        locked = false;\n        totalSupply = totalSupplyTokens_ * ONE_TOKEN;\n        address creator = msg.sender;\n        balances[creator] = totalSupply;\n\n        emit Transfer(0, this, totalSupply);\n        emit Transfer(this, creator, balances[creator]);\n    }\n\n    // Disable direct payments\n    function() external payable {\n        revert();\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"changeExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"__targetExchangeAndSpendCallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetContract\",\"type\":\"address\"},{\"name\":\"_exchanger\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"__exchangerCallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetContract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"exchangeAndSpend\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"__targetExchangeCallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetContract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exchangeToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"creditedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupplyTokens_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"ExchangeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_targetContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_targetContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeSpent\",\"type\":\"event\"}]",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b5060405160208061128b83398101604081815291516000805433600160a060020a0319909116811760a060020a60ff0219168255670de0b6b3a76400008302600181905581835260026020908152868420829055908552945192949093309360008051602061126b833981519152929181900390910190a3600160a060020a0381166000818152600260209081526040918290205482519081529151309260008051602061126b83398151915292908290030190a35050611185806100e66000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461012c578063095ea7b3146101b657806318160ddd146101ee57806323b872dd1461021557806327e235e31461023f578063313ce567146102605780633c3bdb7a1461028b5780635a63feb8146102ae57806370a08231146102d25780638da5cb5b146102f35780638eddc3061461032457806395d89b411461034e578063a69df4b514610363578063a9059cbb14610378578063b65b3f801461039c578063b8b690e7146103c7578063cf309012146103df578063cf3cb33f146103f4578063d2f7265a14610433578063dd62ed3e14610448578063f2fde38b1461046f578063f83d08ba14610490575b600080fd5b34801561013857600080fd5b506101416104a5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017b578181015183820152602001610163565b50505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c257600080fd5b506101da600160a060020a03600435166024356104dc565b604080519115158252519081900360200190f35b3480156101fa57600080fd5b506102036105a7565b60408051918252519081900360200190f35b34801561022157600080fd5b506101da600160a060020a03600435811690602435166044356105ad565b34801561024b57600080fd5b50610203600160a060020a036004351661074e565b34801561026c57600080fd5b50610275610760565b6040805160ff9092168252519081900360200190f35b34801561029757600080fd5b506102ac600160a060020a0360043516610765565b005b3480156102ba57600080fd5b506101da600160a060020a03600435166024356107f2565b3480156102de57600080fd5b50610203600160a060020a03600435166108f0565b3480156102ff57600080fd5b5061030861090b565b60408051600160a060020a039092168252519081900360200190f35b34801561033057600080fd5b506101da600160a060020a036004358116906024351660443561091a565b34801561035a57600080fd5b50610141610a4c565b34801561036f57600080fd5b506102ac610a83565b34801561038457600080fd5b506101da600160a060020a0360043516602435610b0a565b3480156103a857600080fd5b506101da600160a060020a036004358116906024359060443516610c15565b3480156103d357600080fd5b506101da600435610d81565b3480156103eb57600080fd5b506101da610e5c565b34801561040057600080fd5b50610418600160a060020a0360043516602435610e7d565b60408051921515835260208301919091528051918290030190f35b34801561043f57600080fd5b50610308610fcd565b34801561045457600080fd5b50610203600160a060020a0360043581169060243516610fdc565b34801561047b57600080fd5b506102ac600160a060020a0360043516611007565b34801561049c57600080fd5b506102ac61109b565b60408051808201909152600b81527f4269746f78546f6b656e73000000000000000000000000000000000000000000602082015281565b6000805474010000000000000000000000000000000000000000900460ff161561050557600080fd5b81158015906105365750336000908152600360209081526040808320600160a060020a038716845290915290205415155b1561054057600080fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015481565b6000805474010000000000000000000000000000000000000000900460ff16156105d657600080fd5b600160a060020a038316158015906106065750600160a060020a0384166000908152600260205260409020548211155b80156106355750600160a060020a03841660009081526003602090815260408083203384529091529020548211155b151561064057600080fd5b600160a060020a038416600090815260026020526040902054610669908363ffffffff61113816565b600160a060020a03808616600090815260026020526040808220939093559085168152205461069e908363ffffffff61114a16565b600160a060020a0380851660009081526002602090815260408083209490945591871681526003825282812033825290915220546106e2908363ffffffff61113816565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b9392505050565b60026020526000908152604090205481565b601281565b600054600160a060020a0316331461077c57600080fd5b600160a060020a038116151561079157600080fd5b60048054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f39870277935708b88965de17b0c29d3c1ad93a200dce569fc56702229432973e9181900360200190a150565b600454600090600160a060020a0316151561080c57600080fd5b600454600160a060020a0316331461082357600080fd5b600160a060020a03831660009081526002602052604090205461084c908363ffffffff61114a16565b600160a060020a038416600090815260026020908152604080832093909355600790522054610881908363ffffffff61114a16565b600160a060020a03841660008181526007602090815260409182902093909355805132815230938101939093528281019190915260608201849052517f94f894fc21b0710283384cff4d54c5cc2019e3d79fb872674e8641ed36487cbf9181900360800190a150600192915050565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031681565b600454600090600160a060020a0316151561093457600080fd5b600454600160a060020a0316331461094b57600080fd5b600160a060020a038416151561096057600080fd5b600160a060020a03831660009081526002602052604090205482111561098857506000610747565b600160a060020a0383166000908152600260205260409020546109b1908363ffffffff61113816565b600160a060020a038085166000908152600260209081526040808320949094559187168152600590915220546109ed908363ffffffff61114a16565b600160a060020a03808616600090815260056020908152604080832094909455918616815260069091522054610a29908363ffffffff61114a16565b600160a060020a0384166000908152600660205260409020555060019392505050565b60408051808201909152600581527f4249544f58000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a03163314610a9a57600080fd5b60005474010000000000000000000000000000000000000000900460ff161515610ac357600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e9190a1565b6000805474010000000000000000000000000000000000000000900460ff1615610b3357600080fd5b600160a060020a03831615801590610b5a5750336000908152600260205260409020548211155b1515610b6557600080fd5b33600090815260026020526040902054610b85908363ffffffff61113816565b3360009081526002602052604080822092909255600160a060020a03851681522054610bb7908363ffffffff61114a16565b600160a060020a0384166000818152600260209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600454600090600160a060020a03161515610c2f57600080fd5b600160a060020a03841615801590610c4f5750600160a060020a03821615155b8015610c6a5750336000908152600260205260409020548311155b1515610c7557600080fd5b60048054604080517fb65b3f80000000000000000000000000000000000000000000000000000000008152600160a060020a03888116948201949094526024810187905285841660448201529051929091169163b65b3f80916064808201926020929091908290030181600087803b158015610cf057600080fd5b505af1158015610d04573d6000803e3d6000fd5b505050506040513d6020811015610d1a57600080fd5b50519050801515610d2a57600080fd5b60408051338152600160a060020a0380871660208301528416818301526060810185905290517f94f894fc21b0710283384cff4d54c5cc2019e3d79fb872674e8641ed36487cbf9181900360800190a19392505050565b600454600090600160a060020a03161515610d9b57600080fd5b600454600160a060020a03163314610db257600080fd5b32600090815260026020526040902054610dd2908363ffffffff61114a16565b32600090815260026020908152604080832093909355600790522054610dfe908363ffffffff61114a16565b32600081815260076020908152604091829020939093558051918252309282019290925280820184905290517f477b65cf658c5207a9d60bb5ebe4f60a504af024949bdffa6efc396d01ced3f69181900360600190a1506001919050565b60005474010000000000000000000000000000000000000000900460ff1681565b6004546000908190600160a060020a03161515610e9957600080fd5b600160a060020a03841615801590610ec05750336000908152600260205260409020548311155b1515610ecb57600080fd5b60048054604080517fcf3cb33f000000000000000000000000000000000000000000000000000000008152600160a060020a0388811694820194909452602481018790528151939092169263cf3cb33f9260448082019392918290030181600087803b158015610f3a57600080fd5b505af1158015610f4e573d6000803e3d6000fd5b505050506040513d6040811015610f6457600080fd5b5080516020909101519092509050811515610f7e57600080fd5b60408051338152600160a060020a038616602082015280820185905290517f477b65cf658c5207a9d60bb5ebe4f60a504af024949bdffa6efc396d01ced3f69181900360600190a19250929050565b600454600160a060020a031681565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a0316331461101e57600080fd5b600160a060020a038116151561103357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146110b257600080fd5b60005474010000000000000000000000000000000000000000900460ff16156110da57600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f46620e39f4e119bf05f13544f8ef38338fc06c17f6b731c7f95bee356572db969190a1565b60008282111561114457fe5b50900390565b60008282018381101561074757fe00a165627a7a72305820c987c971703fdb0670a9f74d0f213e25e58d20ff738e816290c7234688c620310029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef000000000000000000000000000000000000000000000000000000003b9aca00",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00"
}