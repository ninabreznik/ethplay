{
  "address": "0xb81f26d105bf46c0d956bebdd0cc89d34aa94053",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AKCCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-19\n*/\n\npragma solidity ^0.4.19;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract ERC20Events {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\ncontract ERC20 is ERC20Events {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address guy) public view returns (uint);\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public returns (bool);\n}\n\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\ncontract DSStop is DSNote, DSAuth {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped);\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n\n    constructor(uint supply) public {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _supply;\n    }\n    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) public view returns (uint) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n}\n\ncontract DSToken is DSTokenBase(0), DSStop {\n\n    bytes32  public  symbol;\n    uint256  public  decimals = 18; // standard token precision. override to customize\n\n    constructor(bytes32 symbol_) public {\n        symbol = symbol_;\n    }\n\n    event Mint(address indexed guy, uint wad);\n    event Burn(address indexed guy, uint wad);\n\n    function approve(address guy) public stoppable returns (bool) {\n        return super.approve(guy, uint(-1));\n    }\n\n    function approve(address guy, uint wad) public stoppable returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        stoppable\n        returns (bool)\n    {\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function push(address dst, uint wad) public {\n        transferFrom(msg.sender, dst, wad);\n    }\n    function pull(address src, uint wad) public {\n        transferFrom(src, msg.sender, wad);\n    }\n    function move(address src, address dst, uint wad) public {\n        transferFrom(src, dst, wad);\n    }\n\n    function mint(uint wad) public {\n        mint(msg.sender, wad);\n    }\n    function burn(uint wad) public {\n        burn(msg.sender, wad);\n    }\n    function mint(address guy, uint wad) public auth stoppable {\n        _balances[guy] = add(_balances[guy], wad);\n        _supply = add(_supply, wad);\n        emit Mint(guy, wad);\n    }\n    function burn(address guy, uint wad) public auth stoppable {\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n        }\n\n        _balances[guy] = sub(_balances[guy], wad);\n        _supply = sub(_supply, wad);\n        emit Burn(guy, wad);\n    }\n\n    // Optional token name\n    bytes32   public  name = \"\";\n\n    function setName(bytes32 name_) public auth {\n        name = name_;\n    }\n}\n\ncontract ERC223ReceivingContract {\n\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\n    /// @param _from Transaction initiator, analogue of msg.sender\n    /// @param _value Number of tokens to transfer.\n    /// @param _data Data containig a function signature and/or parameters\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n\n\n    /// @dev For ERC20 backward compatibility, same with above tokenFallback but without data.\n    /// The function execution could fail, but do not influence the token transfer.\n    /// @param _from Transaction initiator, analogue of msg.sender\n    /// @param _value Number of tokens to transfer.\n    //  function tokenFallback(address _from, uint256 _value) public;\n}\n\n\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) payable public returns (bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns (bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public returns (bool);\n}\n\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { if (msg.sender != controller) revert(); _; }\n\n    address public controller;\n\n    constructor() { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController {\n        controller = _newController;\n    }\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n}\n\ncontract ERC223 {\n    function transfer(address to, uint amount, bytes data) public returns (bool ok);\n\n    function transferFrom(address from, address to, uint256 amount, bytes data) public returns (bool ok);\n\n    function transfer(address to, uint amount, bytes data, string custom_fallback) public returns (bool ok);\n\n    function transferFrom(address from, address to, uint256 amount, bytes data, string custom_fallback) public returns (bool ok);\n\n    event ERC223Transfer(address indexed from, address indexed to, uint amount, bytes data);\n\n    event ReceivingContractTokenFallbackFailed(address indexed from, address indexed to, uint amount);\n}\n\ncontract AKC is DSToken(\"AKC\"), ERC223, Controlled {\n\n    constructor() {\n        setName(\"ARTWOOK Coin\");\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) public returns (bool success) {\n        // Alerts the token controller of the transfer\n        if (isContract(controller)) {\n            if (!TokenController(controller).onTransfer(_from, _to, _amount))\n               revert();\n        }\n\n        success = super.transferFrom(_from, _to, _amount);\n\n        if (success && isContract(_to))\n        {\n            // ERC20 backward compatiability\n            if(!_to.call(bytes4(keccak256(\"tokenFallback(address,uint256)\")), _from, _amount)) {\n                // do nothing when error in call in case that the _to contract is not inherited from ERC223ReceivingContract\n                // revert();\n                // bytes memory empty;\n\n                emit ReceivingContractTokenFallbackFailed(_from, _to, _amount);\n\n                // Even the fallback failed if there is such one, the transfer will not be revert since \"revert()\" is not called.\n            }\n        }\n    }\n\n    /*\n     * ERC 223\n     * Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\n     */\n    function transferFrom(address _from, address _to, uint256 _amount, bytes _data)\n        public\n        returns (bool success)\n    {\n        // Alerts the token controller of the transfer\n        if (isContract(controller)) {\n            if (!TokenController(controller).onTransfer(_from, _to, _amount))\n               revert();\n        }\n\n        require(super.transferFrom(_from, _to, _amount));\n\n        if (isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(_from, _amount, _data);\n        }\n\n        emit ERC223Transfer(_from, _to, _amount, _data);\n\n        return true;\n    }\n\n    /*\n     * ERC 223\n     * Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\n     * https://github.com/ethereum/EIPs/issues/223\n     * function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n     */\n    /// @notice Send `_value` tokens to `_to` from `msg.sender` and trigger\n    /// tokenFallback if sender is a contract.\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\n    /// @param _to Address of token receiver.\n    /// @param _amount Number of tokens to transfer.\n    /// @param _data Data to be sent to tokenFallback\n    /// @return Returns success of function call.\n    function transfer(\n        address _to,\n        uint256 _amount,\n        bytes _data)\n        public\n        returns (bool success)\n    {\n        return transferFrom(msg.sender, _to, _amount, _data);\n    }\n\n    /*\n     * ERC 223\n     * Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\n     */\n    function transferFrom(address _from, address _to, uint256 _amount, bytes _data, string _custom_fallback)\n        public\n        returns (bool success)\n    {\n        // Alerts the token controller of the transfer\n        if (isContract(controller)) {\n            if (!TokenController(controller).onTransfer(_from, _to, _amount))\n               revert();\n        }\n\n        require(super.transferFrom(_from, _to, _amount));\n\n        if (isContract(_to)) {\n            if(_to == address(this)) revert();\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.call.value(0)(bytes4(keccak256(_custom_fallback)), _from, _amount, _data);\n        }\n\n        emit ERC223Transfer(_from, _to, _amount, _data);\n\n        return true;\n    }\n\n    /*\n     * ERC 223\n     * Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\n     */\n    function transfer(\n        address _to,\n        uint _amount,\n        bytes _data,\n        string _custom_fallback)\n        public\n        returns (bool success)\n    {\n        return transferFrom(msg.sender, _to, _amount, _data, _custom_fallback);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            if (!TokenController(controller).onApprove(msg.sender, _spender, _amount))\n                revert();\n        }\n\n        return super.approve(_spender, _amount);\n    }\n\n    function mint(address _guy, uint _wad) auth stoppable {\n        super.mint(_guy, _wad);\n\n        Transfer(0, _guy, _wad);\n    }\n    function burn(address _guy, uint _wad) auth stoppable {\n        super.burn(_guy, _wad);\n\n        Transfer(_guy, 0, _wad);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) returns (bool success) {\n        if (!approve(_spender, _amount)) revert();\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function ()  payable {\n        if (isContract(controller)) {\n            if (! TokenController(controller).proxyPayment.value(msg.value)(msg.sender))\n                revert();\n        } else {\n            revert();\n        }\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) onlyController {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        ERC20 token = ERC20(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        emit ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error.\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address that transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n    emit OwnershipTransferred(owner, newOwner);\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Assign a paused status to contract to pause and continue later.\n *\n */\ncontract Pausable is Ownable {\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n\n    /**\n     * @dev Throws if paused is true.\n     */\n    modifier whenNotPaused() { require(!paused); _; }\n\n    /**\n     * @dev Throws if paused is false.\n     */\n    modifier whenPaused() { require(paused); _; }\n\n    /**\n     * @dev Set paused to true.\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev Set paused to false.\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n/**\n * @title Withdrawable\n * @dev Allow contract owner to withdrow Ether or ERC20 token from contract.\n *\n */\ncontract Withdrawable is Ownable {\n    /**\n    * @dev withdraw Ether from contract\n    * @param _to The address transfer Ether to.\n    * @param _value The amount to be transferred.\n    */\n    function withdrawEther(address _to, uint _value) onlyOwner public returns(bool) {\n        require(_to != address(0));\n        require(address(this).balance >= _value);\n\n        _to.transfer(_value);\n\n        return true;\n    }\n\n    /**\n    * @dev withdraw ERC20 token from contract\n    * @param _token ERC20 token contract address.\n    * @param _to The address transfer Token to.\n    * @param _value The amount to be transferred.\n    */\n    function withdrawTokens(ERC20 _token, address _to, uint _value) onlyOwner public returns(bool) {\n        require(_to != address(0));\n\n        return _token.transfer(_to, _value);\n    }\n}\n\n/**\n * @title ArtwookCoinCrowdsale\n * @dev AKC token sale contract.\n */\ncontract AKCCrowdsale is Pausable, Withdrawable {\n  using SafeMath for uint;\n\n  struct Step {\n      uint priceTokenWei;\n      uint minInvestEth;\n      uint timestamp;\n      uint tokensSold;\n      uint collectedWei;\n\n  }\n  AKC public token;\n  address public beneficiary;\n\n  Step[] public steps;\n  uint8 public currentStep = 0;\n  uint public totalTokensSold = 0;\n  uint public totalCollectedWei = 0;\n  bool public crowdsaleClosed = false;\n  uint public totalTokensForSale = 0;\n\n  event Purchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n  event NextStep(uint8 step);\n  event CrowdsaleClose();\n\n  /**\n  * @dev Initialize the crowdsale conditions.\n  * @param akctoken AKC token contract address.\n  */\n  function AKCCrowdsale(AKC akctoken, uint phase1, uint phase2, uint phase3, uint phase4, address multiSigWallet) public {\n      require(token==address(0));\n      /* token = new AKC(); */\n      token = akctoken;\n      beneficiary = multiSigWallet;\n      // crowdsale only sale 4.5% of totalSupply\n      totalTokensForSale = 9000000 ether;\n      uint oneEther = 1 ether;\n      /**\n      * Crowdsale is conducted in three phases. Token exchange rate is 1Ether:3000AKC\n      * The crowdsale starts on July 20, 2018.\n      * 2018/07/20 - 2018/07/29   15% off on AKC token exchange rate.\n      * 2018/07/30 - 2018/08/08   10% off on AKC token exchange rate.\n      * 2018/08/09 - 2018/08/18   5% off on AKC token exchange rate.\n      * 2018/08/19 - 2018/08/30   Original exchange rate.\n      */\n      steps.push(Step(oneEther.div(3450), 1 ether, phase1, 0, 0));\n      steps.push(Step(oneEther.div(3300), 1 ether, phase2, 0, 0));\n      steps.push(Step(oneEther.div(3150), 1 ether, phase3, 0, 0));\n      steps.push(Step(oneEther.div(3000), 1 ether, phase4, 0, 0));\n  }\n\n  /**\n  * @dev Fallback function that will delegate the request to purchase().\n  */\n  function() external payable  {\n      purchase(msg.sender);\n  }\n\n  /**\n  * @dev purchase AKC\n  * @param sender The address to receive AKC.\n  */\n  function purchase(address sender) whenNotPaused payable public {\n      require(!crowdsaleClosed);\n      require(now>steps[0].timestamp);\n      /* Update the step based on the current time. */\n      if (now > steps[1].timestamp && currentStep < 1){\n        currentStep = 1;\n        emit NextStep(currentStep);\n      }\n      if (now > steps[2].timestamp && currentStep < 2){\n        currentStep = 2;\n        emit NextStep(currentStep);\n      }\n      if (now > steps[3].timestamp && currentStep < 3){\n        currentStep = 3;\n        emit NextStep(currentStep);\n      }\n      /* Step memory step = steps[currentStep]; */\n\n      require(msg.value >= steps[currentStep].minInvestEth);\n      require(totalTokensSold < totalTokensForSale);\n\n      uint sum = msg.value;\n      uint amount = sum.div(steps[currentStep].priceTokenWei).mul(1 ether);\n      uint retSum = 0;\n\n      /* Calculate excess Ether */\n      if(totalTokensSold.add(amount) > totalTokensForSale) {\n          uint retAmount = totalTokensSold.add(amount).sub(totalTokensForSale);\n          retSum = retAmount.mul(steps[currentStep].priceTokenWei).div(1 ether);\n          amount = amount.sub(retAmount);\n          sum = sum.sub(retSum);\n      }\n\n      /* Record purchase info */\n      totalTokensSold = totalTokensSold.add(amount);\n      totalCollectedWei = totalCollectedWei.add(sum);\n      steps[currentStep].tokensSold = steps[currentStep].tokensSold.add(amount);\n      steps[currentStep].collectedWei = steps[currentStep].collectedWei.add(sum);\n\n      /* Mint and Send AKC */\n      /* token.mint(sender, amount); */\n      token.transfer(sender, amount);\n\n      /* Return the excess Ether */\n      if(retSum > 0) {\n          sender.transfer(retSum);\n      }\n\n      beneficiary.transfer(address(this).balance);\n      emit Purchase(sender, amount, sum);\n  }\n\n  /**\n  * @dev close crowdsale.\n  */\n  function closeCrowdsale() onlyOwner public {\n      require(!crowdsaleClosed);\n      /* Transfer the Ether from the contract to the beneficiary's address.*/\n      beneficiary.transfer(address(this).balance);\n      /* Transfer the AKC from the contract to the beneficiary's address.*/\n      token.transfer(beneficiary, token.balanceOf(address(this)));\n      crowdsaleClosed = true;\n      emit CrowdsaleClose();\n  }\n}",
  "bytecode": "60806040526000805460a060020a60ff02191681556004805460ff199081169091556005829055600682905560078054909116905560085534801561004357600080fd5b5060405160c080620011cc83398101604090815281516020830151918301516060840151608085015160a09095015160008054600160a060020a0319163317815560015494969394929392600160a060020a0316156100a157600080fd5b5060018054600160a060020a03808916600160a060020a03199283161790925560028054928416929091169190911790556a0771d2fa45345aa90000006008556040805160a08101909152670de0b6b3a7640000906003908061011384610d7a640100000000610da361036782021704565b8152670de0b6b3a764000060208083019190915260408083018b90526000606080850182905260809485018290528654600181810189559783529184902086516005909302019182559285015195810195909555838101516002860155908301516003808601919091559290910151600490930192909255815160a0810190925290806101af84610ce4640100000000610da361036782021704565b8152670de0b6b3a764000060208083019190915260408083018a90526000606080850182905260809485018290528654600181810189559783529184902086516005909302019182559285015195810195909555838101516002860155908301516003808601919091559290910151600490930192909255815160a08101909252908061024b84610c4e640100000000610da361036782021704565b8152670de0b6b3a764000060208083019190915260408083018990526000606080850182905260809485018290528654600181810189559783529184902086516005909302019182559285015195810195909555838101516002860155908301516003808601919091559290910151600490930192909255815160a0810190925290806102e784610bb8640100000000610da361036782021704565b8152670de0b6b3a76400006020808301919091526040808301979097526000606080840182905260809384018290528554600181810188559683529183902085516005909302019182559184015194810194909455958201516002840155948101516003830155909301516004909301929092555061037e945050505050565b600080828481151561037557fe5b04949350505050565b610e3e806200038e6000396000f3006080604052600436106100d75763ffffffff60e060020a60003504166325b31a9781146100e257806338af3eed146100f65780633f4ba83a14610127578063522f68151461013c5780635bc34f71146101745780635c975abb1461019f5780635e35359e146101b457806360219c7b146101de57806363b20117146102055780637217e0b91461021a5780638456cb591461025d5780638da5cb5b14610272578063983c0a0114610287578063c51d16b61461029c578063ccb07cef146102b1578063f2fde38b146102c6578063fc0c546a146102e7575b6100e0336102fc565b005b6100e0600160a060020a03600435166102fc565b34801561010257600080fd5b5061010b61089a565b60408051600160a060020a039092168252519081900360200190f35b34801561013357600080fd5b506100e06108a9565b34801561014857600080fd5b50610160600160a060020a036004351660243561091f565b604080519115158252519081900360200190f35b34801561018057600080fd5b5061018961099a565b6040805160ff9092168252519081900360200190f35b3480156101ab57600080fd5b506101606109a3565b3480156101c057600080fd5b50610160600160a060020a03600435811690602435166044356109b3565b3480156101ea57600080fd5b506101f3610a77565b60408051918252519081900360200190f35b34801561021157600080fd5b506101f3610a7d565b34801561022657600080fd5b50610232600435610a83565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561026957600080fd5b506100e0610ac2565b34801561027e57600080fd5b5061010b610b3d565b34801561029357600080fd5b506100e0610b4c565b3480156102a857600080fd5b506101f3610cfe565b3480156102bd57600080fd5b50610160610d04565b3480156102d257600080fd5b506100e0600160a060020a0360043516610d0d565b3480156102f357600080fd5b5061010b610d94565b6000805481908190819060a060020a900460ff161561031a57600080fd5b60075460ff161561032a57600080fd5b60038054600090811061033957fe5b9060005260206000209060050201600201544211151561035857600080fd5b60038054600190811061036757fe5b9060005260206000209060050201600201544211801561038e5750600454600160ff909116105b156103da576004805460ff1916600117908190556040805160ff929092168252517f4d3cfbcd7da61e25bfda6ef2a73e71b189eb3a19824d4b3dda53e85d307a50059181900360200190a15b6003805460029081106103e957fe5b906000526020600020906005020160020154421180156104105750600454600260ff909116105b1561045c576004805460ff1916600217908190556040805160ff929092168252517f4d3cfbcd7da61e25bfda6ef2a73e71b189eb3a19824d4b3dda53e85d307a50059181900360200190a15b600380548190811061046a57fe5b906000526020600020906005020160020154421180156104915750600454600360ff909116105b156104dd576004805460ff1916600317908190556040805160ff929092168252517f4d3cfbcd7da61e25bfda6ef2a73e71b189eb3a19824d4b3dda53e85d307a50059181900360200190a15b60045460038054909160ff169081106104f257fe5b906000526020600020906005020160010154341015151561051257600080fd5b6008546005541061052257600080fd5b6004546003805434965061057692670de0b6b3a76400009261056a92909160ff1690811061054c57fe5b6000918252602090912060059091020154879063ffffffff610da316565b9063ffffffff610dbf16565b92506000915060085461059484600554610df190919063ffffffff16565b111561063d576105c16008546105b585600554610df190919063ffffffff16565b9063ffffffff610e0016565b6004546003805492935061061692670de0b6b3a76400009261060a929160ff9091169081106105ec57fe5b6000918252602090912060059091020154849063ffffffff610dbf16565b9063ffffffff610da316565b9150610628838263ffffffff610e0016565b925061063a848363ffffffff610e0016565b93505b600554610650908463ffffffff610df116565b600555600654610666908563ffffffff610df116565b600655600454600380546106a59286929160ff90911690811061068557fe5b906000526020600020906005020160030154610df190919063ffffffff16565b60045460038054909160ff169081106106ba57fe5b600091825260209091206003600590920201810191909155600454815461070d928792909160ff9091169081106106ed57fe5b906000526020600020906005020160040154610df190919063ffffffff16565b60045460038054909160ff1690811061072257fe5b600091825260208083206004600590930201820193909355600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038b811694820194909452602481018990529051929091169363a9059cbb9360448084019492938390030190829087803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b505050506040513d60208110156107d257600080fd5b5050600082111561081557604051600160a060020a0386169083156108fc029084906000818181858888f19350505050158015610813573d6000803e3d6000fd5b505b600254604051600160a060020a0390911690303180156108fc02916000818181858888f1935050505015801561084f573d6000803e3d6000fd5b5060408051848152602081018690528151600160a060020a038816927f12cb4648cf3058b17ceeb33e579f8b0bc269fe0843f3900b8e24b6c54871703c928290030190a25050505050565b600254600160a060020a031681565b600054600160a060020a031633146108c057600080fd5b60005460a060020a900460ff1615156108d857600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60008054600160a060020a0316331461093757600080fd5b600160a060020a038316151561094c57600080fd5b303182111561095a57600080fd5b604051600160a060020a0384169083156108fc029084906000818181858888f19350505050158015610990573d6000803e3d6000fd5b5060019392505050565b60045460ff1681565b60005460a060020a900460ff1681565b60008054600160a060020a031633146109cb57600080fd5b600160a060020a03831615156109e057600080fd5b83600160a060020a031663a9059cbb84846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b505050506040513d6020811015610a6d57600080fd5b5051949350505050565b60085481565b60055481565b6003805482908110610a9157fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909185565b600054600160a060020a03163314610ad957600080fd5b60005460a060020a900460ff1615610af057600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b600054600160a060020a03163314610b6357600080fd5b60075460ff1615610b7357600080fd5b600254604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610bad573d6000803e3d6000fd5b50600154600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039384169363a9059cbb93169184916370a08231916024808201926020929091908290030181600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b505050506040513d6020811015610c4b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b505050506040513d6020811015610cc457600080fd5b50506007805460ff191660011790556040517f587261db95996a4ec51ca62d662d1f046a5e62831eb4ae0b8cd974da5673fbf090600090a1565b60065481565b60075460ff1681565b600054600160a060020a03163314610d2457600080fd5b600160a060020a0381161515610d3957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691821780845560405192939116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b600154600160a060020a031681565b6000808284811515610db157fe5b0490508091505b5092915050565b600080831515610dd25760009150610db8565b50828202828482811515610de257fe5b0414610dea57fe5b9392505050565b600082820183811015610dea57fe5b600082821115610e0c57fe5b509003905600a165627a7a723058206d480ff429ad4c88f726ddc37eda407d01998756bd0a927689486c59c3f7204100290000000000000000000000001ca43a170bad619322e6f54d46b57e504db663aa000000000000000000000000000000000000000000000000000000005b512600000000000000000000000000000000000000000000000000000000005b5e5500000000000000000000000000000000000000000000000000000000005b6b8400000000000000000000000000000000000000000000000000000000005b78b3000000000000000000000000007a8e60416dac9b84e59cae2184ee32b507f3095f",
  "constructorArguments": "0000000000000000000000001ca43a170bad619322e6f54d46b57e504db663aa000000000000000000000000000000000000000000000000000000005b512600000000000000000000000000000000000000000000000000000000005b5e5500000000000000000000000000000000000000000000000000000000005b6b8400000000000000000000000000000000000000000000000000000000005b78b3000000000000000000000000007a8e60416dac9b84e59cae2184ee32b507f3095f"
}