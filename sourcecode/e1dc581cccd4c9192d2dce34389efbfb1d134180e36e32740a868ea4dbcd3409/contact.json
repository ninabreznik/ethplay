{
  "address": "0x9a3deebedb5a6f7abec622a0ffe928fbddd6dc2d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Vesting",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.5.0;\n\n\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract CommunityVesting is Ownable {\n    using SafeMath for uint256;\n\n    mapping (address => Holding) public holdings;\n\n    uint256 constant public MinimumHoldingPeriod = 90 days;\n    uint256 constant public Interval = 90 days;\n    uint256 constant public MaximumHoldingPeriod = 360 days;\n\n    uint256 constant public CommunityCap = 14300000 ether; // 14.3 million tokens\n\n    uint256 public totalCommunityTokensCommitted;\n\n    struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n    }\n\n    event CommunityVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\n    event CommunityVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\n\n    function claimTokens(address beneficiary)\n        external\n        onlyOwner\n        returns (uint256 tokensToClaim)\n    {\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n        uint256 startTime = holdings[beneficiary].startTime;\n        require(tokensRemaining > 0, \"All tokens claimed\");\n\n        require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\n\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n\n            tokensToClaim = tokensRemaining;\n            delete holdings[beneficiary];\n\n        } else {\n\n            uint256 percentage = calculatePercentageToRelease(startTime);\n\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n            tokensRemaining = tokensNotToClaim;\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\n\n        }\n    }\n\n    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\n        // how many 90 day periods have passed\n        uint periodsPassed = ((now.sub(_startTime)).div(Interval));\n        percentage = periodsPassed.mul(25); // 25% to be released every 90 days\n    }\n\n    function initializeVesting(\n        address _beneficiary,\n        uint256 _tokens,\n        uint256 _startTime\n    )\n        external\n        onlyOwner\n    {\n        totalCommunityTokensCommitted = totalCommunityTokensCommitted.add(_tokens);\n        require(totalCommunityTokensCommitted <= CommunityCap);\n\n        if (holdings[_beneficiary].tokensCommitted != 0) {\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n\n            emit CommunityVestingUpdated(\n                _beneficiary,\n                holdings[_beneficiary].tokensRemaining,\n                holdings[_beneficiary].startTime\n            );\n\n        } else {\n            holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime\n            );\n\n            emit CommunityVestingInitialized(_beneficiary, _tokens, _startTime);\n        }\n    }\n}\n\n\n\ncontract EcosystemVesting is Ownable {\n    using SafeMath for uint256;\n\n    mapping (address => Holding) public holdings;\n\n    uint256 constant public Interval = 90 days;\n    uint256 constant public MaximumHoldingPeriod = 630 days;\n\n    uint256 constant public EcosystemCap = 54100000 ether; // 54.1 million tokens\n\n    uint256 public totalEcosystemTokensCommitted;\n\n    struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n    }\n\n    event EcosystemVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\n    event EcosystemVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\n\n    function claimTokens(address beneficiary)\n        external\n        onlyOwner\n        returns (uint256 tokensToClaim)\n    {\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n        uint256 startTime = holdings[beneficiary].startTime;\n        require(tokensRemaining > 0, \"All tokens claimed\");\n\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n\n            tokensToClaim = tokensRemaining;\n            delete holdings[beneficiary];\n\n        } else {\n\n            uint256 permill = calculatePermillToRelease(startTime);\n\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(1000 - permill)).div(1000);\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n            tokensRemaining = tokensNotToClaim;\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\n\n        }\n    }\n\n    function calculatePermillToRelease(uint256 _startTime) internal view returns (uint256 permill) {\n        // how many 90 day periods have passed\n        uint periodsPassed = ((now.sub(_startTime)).div(Interval)).add(1);\n        permill = periodsPassed.mul(125); // 125 per thousand to be released every 90 days\n    }\n\n    function initializeVesting(\n        address _beneficiary,\n        uint256 _tokens,\n        uint256 _startTime\n    )\n        external\n        onlyOwner\n    {\n        totalEcosystemTokensCommitted = totalEcosystemTokensCommitted.add(_tokens);\n        require(totalEcosystemTokensCommitted <= EcosystemCap);\n\n        if (holdings[_beneficiary].tokensCommitted != 0) {\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n\n            emit EcosystemVestingUpdated(\n                _beneficiary,\n                holdings[_beneficiary].tokensRemaining,\n                holdings[_beneficiary].startTime\n            );\n\n        } else {\n            holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime\n            );\n\n            emit EcosystemVestingInitialized(_beneficiary, _tokens, _startTime);\n        }\n    }\n}\n\n\n\ncontract SeedPrivateAdvisorVesting is Ownable {\n    using SafeMath for uint256;\n\n    enum User { Public, Seed, Private, Advisor }\n\n    mapping (address => Holding) public holdings;\n\n    uint256 constant public MinimumHoldingPeriod = 90 days;\n    uint256 constant public Interval = 30 days;\n    uint256 constant public MaximumHoldingPeriod = 180 days;\n\n    uint256 constant public SeedCap = 28000000 ether; // 28 million tokens\n    uint256 constant public PrivateCap = 9000000 ether; // 9 million tokens\n    uint256 constant public AdvisorCap = 7400000 ether; // 7.4 million tokens\n\n    uint256 public totalSeedTokensCommitted;\n    uint256 public totalPrivateTokensCommitted;\n    uint256 public totalAdvisorTokensCommitted;\n\n    struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n        User user;\n    }\n\n    event VestingInitialized(address _to, uint256 _tokens, uint256 _startTime, User user);\n    event VestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime, User user);\n\n    function claimTokens(address beneficiary)\n        external\n        onlyOwner\n        returns (uint256 tokensToClaim)\n    {\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n        uint256 startTime = holdings[beneficiary].startTime;\n        require(tokensRemaining > 0, \"All tokens claimed\");\n\n        require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\n\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n\n            tokensToClaim = tokensRemaining;\n            delete holdings[beneficiary];\n\n        } else {\n\n            uint256 percentage = calculatePercentageToRelease(startTime);\n\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n            tokensRemaining = tokensNotToClaim;\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\n\n        }\n    }\n\n    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\n        // how many 30 day periods have passed\n        uint periodsPassed = ((now.sub(_startTime.add(MinimumHoldingPeriod))).div(Interval)).add(1);\n        percentage = periodsPassed.mul(25); // 25% to be released every 30 days\n    }\n\n    function initializeVesting(\n        address _beneficiary,\n        uint256 _tokens,\n        uint256 _startTime,\n        uint8 user\n    )\n        external\n        onlyOwner\n    {\n        User _user;\n        if (user == uint8(User.Seed)) {\n            _user = User.Seed;\n            totalSeedTokensCommitted = totalSeedTokensCommitted.add(_tokens);\n            require(totalSeedTokensCommitted <= SeedCap);\n        } else if (user == uint8(User.Private)) {\n            _user = User.Private;\n            totalPrivateTokensCommitted = totalPrivateTokensCommitted.add(_tokens);\n            require(totalPrivateTokensCommitted <= PrivateCap);\n        } else if (user == uint8(User.Advisor)) {\n            _user = User.Advisor;\n            totalAdvisorTokensCommitted = totalAdvisorTokensCommitted.add(_tokens);\n            require(totalAdvisorTokensCommitted <= AdvisorCap);\n        } else {\n            revert( \"incorrect category, not eligible for vesting\" );\n        }\n\n        if (holdings[_beneficiary].tokensCommitted != 0) {\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n\n            emit VestingUpdated(\n                _beneficiary,\n                holdings[_beneficiary].tokensRemaining,\n                holdings[_beneficiary].startTime,\n                holdings[_beneficiary].user\n            );\n\n        } else {\n            holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime,\n                _user\n            );\n\n            emit VestingInitialized(_beneficiary, _tokens, _startTime, _user);\n        }\n    }\n}\n\n\ncontract TeamVesting is Ownable {\n    using SafeMath for uint256;\n\n    mapping (address => Holding) public holdings;\n\n    uint256 constant public MinimumHoldingPeriod = 180 days;\n    uint256 constant public Interval = 180 days;\n    uint256 constant public MaximumHoldingPeriod = 720 days;\n\n    uint256 constant public TeamCap = 12200000 ether; // 12.2 million tokens\n\n    uint256 public totalTeamTokensCommitted;\n\n    struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n    }\n\n    event TeamVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\n    event TeamVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\n\n    function claimTokens(address beneficiary)\n        external\n        onlyOwner\n        returns (uint256 tokensToClaim)\n    {\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n        uint256 startTime = holdings[beneficiary].startTime;\n        require(tokensRemaining > 0, \"All tokens claimed\");\n\n        require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\n\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n\n            tokensToClaim = tokensRemaining;\n            delete holdings[beneficiary];\n\n        } else {\n\n            uint256 percentage = calculatePercentageToRelease(startTime);\n\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n            tokensRemaining = tokensNotToClaim;\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\n\n        }\n    }\n\n    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\n        // how many 180 day periods have passed\n        uint periodsPassed = ((now.sub(_startTime)).div(Interval));\n        percentage = periodsPassed.mul(25); // 25% to be released every 180 days\n    }\n\n    function initializeVesting(\n        address _beneficiary,\n        uint256 _tokens,\n        uint256 _startTime\n    )\n        external\n        onlyOwner\n    {\n        totalTeamTokensCommitted = totalTeamTokensCommitted.add(_tokens);\n        require(totalTeamTokensCommitted <= TeamCap);\n\n        if (holdings[_beneficiary].tokensCommitted != 0) {\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n\n            emit TeamVestingUpdated(\n                _beneficiary,\n                holdings[_beneficiary].tokensRemaining,\n                holdings[_beneficiary].startTime\n            );\n\n        } else {\n            holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime\n            );\n\n            emit TeamVestingInitialized(_beneficiary, _tokens, _startTime);\n        }\n    }\n}\n\n\n\ninterface TokenInterface {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract Vesting is Ownable {\n    using SafeMath for uint256;\n\n    enum VestingUser { Public, Seed, Private, Advisor, Team, Community, Ecosystem }\n\n    TokenInterface public token;\n    CommunityVesting public communityVesting;\n    TeamVesting public teamVesting;\n    EcosystemVesting public ecosystemVesting;\n    SeedPrivateAdvisorVesting public seedPrivateAdvisorVesting;\n    mapping (address => VestingUser) public userCategory;\n    uint256 public totalAllocated;\n\n    event TokensReleased(address _to, uint256 _tokensReleased, VestingUser user);\n\n    constructor(address _token) public {\n        //require(_token != 0x0, \"Invalid address\");\n        token = TokenInterface(_token);\n        communityVesting = new CommunityVesting();\n        teamVesting = new TeamVesting();\n        ecosystemVesting = new EcosystemVesting();\n        seedPrivateAdvisorVesting = new SeedPrivateAdvisorVesting();\n    }\n\n    function claimTokens() external {\n        uint8 category = uint8(userCategory[msg.sender]);\n\n        uint256 tokensToClaim;\n\n        if (category == 1 || category == 2 || category == 3) {\n            tokensToClaim = seedPrivateAdvisorVesting.claimTokens(msg.sender);\n        } else if (category == 4) {\n            tokensToClaim = teamVesting.claimTokens(msg.sender);\n        } else if (category == 5) {\n            tokensToClaim = communityVesting.claimTokens(msg.sender);\n        } else if (category == 6){\n            tokensToClaim = ecosystemVesting.claimTokens(msg.sender);\n        } else {\n            revert( \"incorrect category, maybe unknown user\" );\n        }\n\n        totalAllocated = totalAllocated.sub(tokensToClaim);\n        require(token.transfer(msg.sender, tokensToClaim), \"Insufficient balance in vesting contract\");\n        emit TokensReleased(msg.sender, tokensToClaim, userCategory[msg.sender]);\n    }\n\n    function initializeVesting(\n        address _beneficiary,\n        uint256 _tokens,\n        uint256 _startTime,\n        VestingUser user\n    )\n        external\n        onlyOwner\n    {\n        uint8 category = uint8(user);\n        require(category != 0, \"Not eligible for vesting\");\n\n        require( uint8(userCategory[_beneficiary]) == 0 || userCategory[_beneficiary] == user, \"cannot change user category\" );\n        userCategory[_beneficiary] = user;\n        totalAllocated = totalAllocated.add(_tokens);\n\n        if (category == 1 || category == 2 || category == 3) {\n            seedPrivateAdvisorVesting.initializeVesting(_beneficiary, _tokens, _startTime, category);\n        } else if (category == 4) {\n            teamVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n        } else if (category == 5) {\n            communityVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n        } else if (category == 6){\n            ecosystemVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n        } else {\n            revert( \"incorrect category, not eligible for vesting\" );\n        }\n    }\n\n    function claimUnallocated( address _sendTo) external onlyOwner{\n        uint256 allTokens = token.balanceOf(address(this));\n        token.transfer(_sendTo, allTokens);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"seedPrivateAdvisorVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"}],\"name\":\"claimUnallocated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"uint8\"}],\"name\":\"initializeVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokensReleased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"uint8\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062005bfb833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200014b620002e8565b604051809103906000f08015801562000168573d6000803e3d6000fd5b50600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001b3620002f9565b604051809103906000f080158015620001d0573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200021b6200030a565b604051809103906000f08015801562000238573d6000803e3d6000fd5b50600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002836200031b565b604051809103906000f080158015620002a0573d6000803e3d6000fd5b50600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200032c565b604051610f1c8062001ca983390190565b604051610f1c8062002bc583390190565b604051610e688062003ae183390190565b6040516112b2806200494983390190565b61196d806200033c6000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d519ae3146100d55780632a7a3ac71461012c5780632b9a27461461017d5780634460a2ca146101d457806345f7f2491461024657806348c54b9d14610271578063619f3d6c14610288578063715018a6146102df57806373172488146102f65780638da5cb5b146103695780638f32d59b146103c0578063cea290c2146103ef578063f2fde38b14610446578063fc0c546a14610497575b600080fd5b3480156100e157600080fd5b506100ea6104ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013857600080fd5b5061017b6004803603602081101561014f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610514565b005b34801561018957600080fd5b50610192610726565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101e057600080fd5b50610244600480360360808110156101f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803560ff16906020019092919050505061074c565b005b34801561025257600080fd5b5061025b610e44565b6040518082815260200191505060405180910390f35b34801561027d57600080fd5b50610286610e4a565b005b34801561029457600080fd5b5061029d61160d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102eb57600080fd5b506102f4611633565b005b34801561030257600080fd5b506103456004803603602081101561031957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611705565b6040518082600681111561035557fe5b60ff16815260200191505060405180910390f35b34801561037557600080fd5b5061037e611725565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103cc57600080fd5b506103d561174e565b604051808215151515815260200191505060405180910390f35b3480156103fb57600080fd5b506104046117a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045257600080fd5b506104956004803603602081101561046957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117cb565b005b3480156104a357600080fd5b506104ac6117ea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61051c61174e565b151561052757600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105e457600080fd5b505afa1580156105f8573d6000803e3d6000fd5b505050506040513d602081101561060e57600080fd5b81019080805190602001909291905050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156106e657600080fd5b505af11580156106fa573d6000803e3d6000fd5b505050506040513d602081101561071057600080fd5b8101908080519060200190929190505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61075461174e565b151561075f57600080fd5b600081600681111561076d57fe5b905060008160ff16141515156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4e6f7420656c696769626c6520666f722076657374696e67000000000000000081525060200191505060405180910390fd5b6000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600681111561084557fe5b60ff1614806108b5575081600681111561085b57fe5b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660068111156108b357fe5b145b1515610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f63616e6e6f74206368616e676520757365722063617465676f7279000000000081525060200191505060405180910390fd5b81600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600681111561098457fe5b021790555061099e8460075461181090919063ffffffff16565b60078190555060018160ff1614806109b9575060028160ff16145b806109c7575060038160ff16145b15610ac457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634460a2ca868686856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018260ff1660ff168152602001945050505050600060405180830381600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b50505050610e3d565b60048160ff161415610bba57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348cdb4518686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b50505050610e3c565b60058160ff161415610cb057600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348cdb4518686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50505050610e3b565b60068160ff161415610da657600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348cdb4518686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015610d8957600080fd5b505af1158015610d9d573d6000803e3d6000fd5b50505050610e3a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f696e636f72726563742063617465676f72792c206e6f7420656c696769626c6581526020017f20666f722076657374696e67000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b5b5b5050505050565b60075481565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166006811115610ea457fe5b9050600060018260ff161480610ebd575060028260ff16145b80610ecb575060038260ff16145b15610fcf57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df8de3e7336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610f8d57600080fd5b505af1158015610fa1573d6000803e3d6000fd5b505050506040513d6020811015610fb757600080fd5b81019080805190602001909291905050509050611387565b60048260ff1614156110da57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df8de3e7336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561109857600080fd5b505af11580156110ac573d6000803e3d6000fd5b505050506040513d60208110156110c257600080fd5b81019080805190602001909291905050509050611386565b60058260ff1614156111e557600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df8de3e7336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b505050506040513d60208110156111cd57600080fd5b81019080805190602001909291905050509050611385565b60068260ff1614156112f057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df8de3e7336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156112ae57600080fd5b505af11580156112c2573d6000803e3d6000fd5b505050506040513d60208110156112d857600080fd5b81019080805190602001909291905050509050611384565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f696e636f72726563742063617465676f72792c206d6179626520756e6b6e6f7781526020017f6e2075736572000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b5b5b61139c8160075461182e90919063ffffffff16565b600781905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561146757600080fd5b505af115801561147b573d6000803e3d6000fd5b505050506040513d602081101561149157600080fd5b8101908080519060200190929190505050151561153c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f496e73756666696369656e742062616c616e636520696e2076657374696e672081526020017f636f6e747261637400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b7fcbb1181b5db1a2aa8fe79019e57e3650ef4de1a642a0fbf1a9d5e8f8c1e434063382600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260068111156115f457fe5b60ff168152602001935050505060405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61163b61174e565b151561164657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60066020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117d361174e565b15156117de57600080fd5b6117e781611847565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015151561182457fe5b8091505092915050565b600082821115151561183c57fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561188357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a7230582062b595cc819f77cb23ebc343ef447757cb1ddfb665ba86a024d107b6dafd5cd700296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610e4d806100cf6000396000f3fe6080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311be2d68146100bf5780632b2ab780146100ea5780632e5b90a41461011557806348cdb451146101405780636458bbe1146101a5578063715018a6146101d05780638da5cb5b146101e75780638f32d59b1461023e578063dd3ced631461026d578063df8de3e7146102e0578063f2fde38b14610345578063f37e7c3214610396575b600080fd5b3480156100cb57600080fd5b506100d46103c1565b6040518082815260200191505060405180910390f35b3480156100f657600080fd5b506100ff6103c9565b6040518082815260200191505060405180910390f35b34801561012157600080fd5b5061012a6103d0565b6040518082815260200191505060405180910390f35b34801561014c57600080fd5b506101a36004803603606081101561016357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506103d6565b005b3480156101b157600080fd5b506101ba610793565b6040518082815260200191505060405180910390f35b3480156101dc57600080fd5b506101e561079a565b005b3480156101f357600080fd5b506101fc61086c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024a57600080fd5b50610253610895565b604051808215151515815260200191505060405180910390f35b34801561027957600080fd5b506102bc6004803603602081101561029057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108ec565b60405180848152602001838152602001828152602001935050505060405180910390f35b3480156102ec57600080fd5b5061032f6004803603602081101561030357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610916565b6040518082815260200191505060405180910390f35b34801561035157600080fd5b506103946004803603602081101561036857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c23565b005b3480156103a257600080fd5b506103ab610c42565b6040518082815260200191505060405180910390f35b6301da9c0081565b6276a70081565b60025481565b6103de610895565b15156103e957600080fd5b6103fe82600254610c5190919063ffffffff16565b6002819055506a0bd4248da6d8dfb18000006002541115151561042057600080fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414151561069e576104c182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610c5190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061055c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610c5190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f82e9cb7b60cb8bedb8ef33ce55464461c4f141db1f86d260f5f0ea00a91e7fe483600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a161078e565b60606040519081016040528083815260200183815260200182815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050507f4985b1d621bc764334e686235bbd611210b71bd5e0c22f64d768315178ba2360838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b505050565b6276a70081565b6107a2610895565b15156107ad57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60016020528060005260406000206000915090508060000154908060010154908060020154905083565b6000610920610895565b151561092b57600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050600082111515610a31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f416c6c20746f6b656e7320636c61696d6564000000000000000000000000000081525060200191505060405180910390fd5b6276a700610a488242610c6f90919063ffffffff16565b111515610abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436c61696d696e6720706572696f64206e6f742073746172746564207965740081525060200191505060405180910390fd5b6301da9c00610ad58242610c6f90919063ffffffff16565b101515610b3e57819250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090555050610c1c565b6000610b4982610c88565b90506000610bb86064610baa84606403600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610cd190919063ffffffff16565b610d0c90919063ffffffff16565b9050610bcd8185610c6f90919063ffffffff16565b945080935083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505b5050919050565b610c2b610895565b1515610c3657600080fd5b610c3f81610d27565b50565b6a0bd4248da6d8dfb180000081565b6000808284019050838110151515610c6557fe5b8091505092915050565b6000828211151515610c7d57fe5b818303905092915050565b600080610cb36276a700610ca58542610c6f90919063ffffffff16565b610d0c90919063ffffffff16565b9050610cc9601982610cd190919063ffffffff16565b915050919050565b600080831415610ce45760009050610d06565b60008284029050828482811515610cf757fe5b04141515610d0157fe5b809150505b92915050565b6000808284811515610d1a57fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d6357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a72305820218c2481a42ef3accba8a0650cbf7005c7bb62fc599a4ed6773fd6fa88ff785d00296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610e4d806100cf6000396000f3fe6080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311be2d68146100bf5780632b2ab780146100ea57806348cdb451146101155780636458bbe11461017a578063715018a6146101a55780638da5cb5b146101bc5780638f32d59b14610213578063a961ea0b14610242578063dd3ced631461026d578063df8de3e7146102e0578063f2fde38b14610345578063f9ba474414610396575b600080fd5b3480156100cb57600080fd5b506100d46103c1565b6040518082815260200191505060405180910390f35b3480156100f657600080fd5b506100ff6103c9565b6040518082815260200191505060405180910390f35b34801561012157600080fd5b506101786004803603606081101561013857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506103d0565b005b34801561018657600080fd5b5061018f61078d565b6040518082815260200191505060405180910390f35b3480156101b157600080fd5b506101ba610794565b005b3480156101c857600080fd5b506101d1610866565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021f57600080fd5b5061022861088f565b604051808215151515815260200191505060405180910390f35b34801561024e57600080fd5b506102576108e6565b6040518082815260200191505060405180910390f35b34801561027957600080fd5b506102bc6004803603602081101561029057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108ec565b60405180848152602001838152602001828152602001935050505060405180910390f35b3480156102ec57600080fd5b5061032f6004803603602081101561030357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610916565b6040518082815260200191505060405180910390f35b34801561035157600080fd5b506103946004803603602081101561036857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c23565b005b3480156103a257600080fd5b506103ab610c42565b6040518082815260200191505060405180910390f35b6303b5380081565b62ed4e0081565b6103d861088f565b15156103e357600080fd5b6103f882600254610c5190919063ffffffff16565b6002819055506a0a177353415db9790000006002541115151561041a57600080fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154141515610698576104bb82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610c5190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061055682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610c5190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f79004430f5598b6c3a6c4decca3dba9d9fdc4504260b3b281b61d7a325592f7683600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1610788565b60606040519081016040528083815260200183815260200182815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050507f80db00acf8448e72535d3790f5ec7a3b55a9560521244bbb7004a7d67d0d795b838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b505050565b62ed4e0081565b61079c61088f565b15156107a757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60025481565b60016020528060005260406000206000915090508060000154908060010154908060020154905083565b600061092061088f565b151561092b57600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050600082111515610a31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f416c6c20746f6b656e7320636c61696d6564000000000000000000000000000081525060200191505060405180910390fd5b62ed4e00610a488242610c6f90919063ffffffff16565b111515610abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436c61696d696e6720706572696f64206e6f742073746172746564207965740081525060200191505060405180910390fd5b6303b53800610ad58242610c6f90919063ffffffff16565b101515610b3e57819250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090555050610c1c565b6000610b4982610c88565b90506000610bb86064610baa84606403600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610cd190919063ffffffff16565b610d0c90919063ffffffff16565b9050610bcd8185610c6f90919063ffffffff16565b945080935083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505b5050919050565b610c2b61088f565b1515610c3657600080fd5b610c3f81610d27565b50565b6a0a177353415db97900000081565b6000808284019050838110151515610c6557fe5b8091505092915050565b6000828211151515610c7d57fe5b818303905092915050565b600080610cb362ed4e00610ca58542610c6f90919063ffffffff16565b610d0c90919063ffffffff16565b9050610cc9601982610cd190919063ffffffff16565b915050919050565b600080831415610ce45760009050610d06565b60008284029050828482811515610cf757fe5b04141515610d0157fe5b809150505b92915050565b6000808284811515610d1a57fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d6357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a723058208dba740d67acf2b7badaf0c254ec8afa969b50418c8db83ee66d159dd60d3f8000296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610d99806100cf6000396000f3fe6080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311be2d68146100b4578063165e3250146100df578063297855a81461010a5780632b2ab7801461013557806348cdb45114610160578063715018a6146101c55780638da5cb5b146101dc5780638f32d59b14610233578063dd3ced6314610262578063df8de3e7146102d5578063f2fde38b1461033a575b600080fd5b3480156100c057600080fd5b506100c961038b565b6040518082815260200191505060405180910390f35b3480156100eb57600080fd5b506100f4610393565b6040518082815260200191505060405180910390f35b34801561011657600080fd5b5061011f610399565b6040518082815260200191505060405180910390f35b34801561014157600080fd5b5061014a6103a8565b6040518082815260200191505060405180910390f35b34801561016c57600080fd5b506101c36004803603606081101561018357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506103af565b005b3480156101d157600080fd5b506101da61076c565b005b3480156101e857600080fd5b506101f161083e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023f57600080fd5b50610248610867565b604051808215151515815260200191505060405180910390f35b34801561026e57600080fd5b506102b16004803603602081101561028557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108be565b60405180848152602001838152602001828152602001935050505060405180910390f35b3480156102e157600080fd5b50610324600480360360208110156102f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108e8565b6040518082815260200191505060405180910390f35b34801561034657600080fd5b506103896004803603602081101561035d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b6b565b005b63033e910081565b60025481565b6a2cc01ee0671b6aec80000081565b6276a70081565b6103b7610867565b15156103c257600080fd5b6103d782600254610b8a90919063ffffffff16565b6002819055506a2cc01ee0671b6aec800000600254111515156103f957600080fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541415156106775761049a82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610b8a90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061053582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610b8a90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f7de2c67df24adbe7bcc318c2a9474247889d37c1b67c68932f0d5ff7101bf69783600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1610767565b60606040519081016040528083815260200183815260200182815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050507f5c209a1ca10f840f261d548a332e2ec343d1888bc4dc6ccd8cf1ef62073543f8838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b505050565b610774610867565b151561077f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60016020528060005260406000206000915090508060000154908060010154908060020154905083565b60006108f2610867565b15156108fd57600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050600082111515610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f416c6c20746f6b656e7320636c61696d6564000000000000000000000000000081525060200191505060405180910390fd5b63033e9100610a1b8242610ba890919063ffffffff16565b101515610a8457819250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090555050610b64565b6000610a8f82610bc1565b90506000610b006103e8610af2846103e803600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610c1d90919063ffffffff16565b610c5890919063ffffffff16565b9050610b158185610ba890919063ffffffff16565b945080935083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505b5050919050565b610b73610867565b1515610b7e57600080fd5b610b8781610c73565b50565b6000808284019050838110151515610b9e57fe5b8091505092915050565b6000828211151515610bb657fe5b818303905092915050565b600080610bff6001610bf16276a700610be38742610ba890919063ffffffff16565b610c5890919063ffffffff16565b610b8a90919063ffffffff16565b9050610c15607d82610c1d90919063ffffffff16565b915050919050565b600080831415610c305760009050610c52565b60008284029050828482811515610c4357fe5b04141515610c4d57fe5b809150505b92915050565b6000808284811515610c6657fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610caf57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a723058204cf18bca5eb7db04c959697f8cfff4cbb347b066bd05dc523a48a631c14f14b500296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36111e3806100cf6000396000f3fe6080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311be2d68146100eb5780632701d7ea146101165780632b2ab780146101415780634460a2ca1461016c5780635218625f146101de5780636458bbe11461020957806366f2772614610234578063715018a61461025f5780637593073c146102765780638212e29b146102a15780638da5cb5b146102cc5780638f32d59b14610323578063d16c352a14610352578063dd3ced631461037d578063df8de3e714610405578063f2fde38b1461046a575b600080fd5b3480156100f757600080fd5b506101006104bb565b6040518082815260200191505060405180910390f35b34801561012257600080fd5b5061012b6104c2565b6040518082815260200191505060405180910390f35b34801561014d57600080fd5b506101566104c8565b6040518082815260200191505060405180910390f35b34801561017857600080fd5b506101dc6004803603608081101561018f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803560ff1690602001909291905050506104cf565b005b3480156101ea57600080fd5b506101f3610ab1565b6040518082815260200191505060405180910390f35b34801561021557600080fd5b5061021e610ab7565b6040518082815260200191505060405180910390f35b34801561024057600080fd5b50610249610abe565b6040518082815260200191505060405180910390f35b34801561026b57600080fd5b50610274610acd565b005b34801561028257600080fd5b5061028b610b9f565b6040518082815260200191505060405180910390f35b3480156102ad57600080fd5b506102b6610bae565b6040518082815260200191505060405180910390f35b3480156102d857600080fd5b506102e1610bb4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032f57600080fd5b50610338610bdd565b604051808215151515815260200191505060405180910390f35b34801561035e57600080fd5b50610367610c34565b6040518082815260200191505060405180910390f35b34801561038957600080fd5b506103cc600480360360208110156103a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c43565b604051808581526020018481526020018381526020018260038111156103ee57fe5b60ff16815260200194505050505060405180910390f35b34801561041157600080fd5b506104546004803603602081101561042857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c80565b6040518082815260200191505060405180910390f35b34801561047657600080fd5b506104b96004803603602081101561048d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fa0565b005b62ed4e0081565b60045481565b62278d0081565b6104d7610bdd565b15156104e257600080fd5b6000600160038111156104f157fe5b60ff168260ff16141561053e576001905061051784600254610fbf90919063ffffffff16565b6002819055506a17293b0a9e69fd9c0000006002541115151561053957600080fd5b610687565b6002600381111561054b57fe5b60ff168260ff161415610598576002905061057184600354610fbf90919063ffffffff16565b6003819055506a0771d2fa45345aa90000006003541115151561059357600080fd5b610686565b6003808111156105a457fe5b60ff168260ff1614156105f157600390506105ca84600454610fbf90919063ffffffff16565b6004819055506a061f02cdc71fab41000000600454111515156105ec57600080fd5b610685565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f696e636f72726563742063617465676f72792c206e6f7420656c696769626c6581526020017f20666f722076657374696e67000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414151561096a5761072884600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610fbf90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506107c384600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610fbf90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f1064cc64a54335cc4b519000b648280b7251b9fb41ead77b1600ae8d6f32e9df85600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182600381111561094f57fe5b60ff16815260200194505050505060405180910390a1610aaa565b60806040519081016040528085815260200185815260200184815260200182600381111561099457fe5b815250600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690836003811115610a1857fe5b02179055509050507f3694752aa0a9706ce279f2ec69e649161c206050ffd8cf7c259fc7490d80ceed85858584604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001826003811115610a9357fe5b60ff16815260200194505050505060405180910390a15b5050505050565b60025481565b6276a70081565b6a17293b0a9e69fd9c00000081565b610ad5610bdd565b1515610ae057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6a061f02cdc71fab4100000081565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6a0771d2fa45345aa900000081565b60016020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900460ff16905084565b6000610c8a610bdd565b1515610c9557600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050600082111515610d9b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f416c6c20746f6b656e7320636c61696d6564000000000000000000000000000081525060200191505060405180910390fd5b6276a700610db28242610fdd90919063ffffffff16565b111515610e27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436c61696d696e6720706572696f64206e6f742073746172746564207965740081525060200191505060405180910390fd5b62ed4e00610e3e8242610fdd90919063ffffffff16565b101515610ebb57819250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff02191690555050610f99565b6000610ec682610ff6565b90506000610f356064610f2784606403600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461106790919063ffffffff16565b6110a290919063ffffffff16565b9050610f4a8185610fdd90919063ffffffff16565b945080935083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505b5050919050565b610fa8610bdd565b1515610fb357600080fd5b610fbc816110bd565b50565b6000808284019050838110151515610fd357fe5b8091505092915050565b6000828211151515610feb57fe5b818303905092915050565b600080611049600161103b62278d0061102d61101e6276a70089610fbf90919063ffffffff16565b42610fdd90919063ffffffff16565b6110a290919063ffffffff16565b610fbf90919063ffffffff16565b905061105f60198261106790919063ffffffff16565b915050919050565b60008083141561107a576000905061109c565b6000828402905082848281151561108d57fe5b0414151561109757fe5b809150505b92915050565b60008082848115156110b057fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156110f957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a72305820f13726afa639b5df4d22b1f421e420f9e3104877ef0a5a65f39de6e8e22e93850029000000000000000000000000763fa6806e1acf68130d2d0f0df754c93cc546b2",
  "constructorArguments": "000000000000000000000000763fa6806e1acf68130d2d0f0df754c93cc546b2"
}