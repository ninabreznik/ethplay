{
  "address": "0x8ad6739649f1fbf079882c14d27862d5c2206660",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-07\n*/\n\npragma solidity ^0.4.24;  \n////////////////////////////////////////////////////////////////////////////////\nlibrary     SafeMath\n{\n    //--------------------------------------------------------------------------\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        if (a == 0)     return 0;\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    //--------------------------------------------------------------------------\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        return a/b;\n    }\n    //--------------------------------------------------------------------------\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n    //--------------------------------------------------------------------------\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract    ERC20 \n{\n    using SafeMath  for uint256;\n    \n    //----- VARIABLES\n\n    address public              owner;          // Owner of this contract\n    address public              admin;          // The one who is allowed to do changes \n\n    mapping(address => uint256)                         balances;       // Maintain balance in a mapping\n    mapping(address => mapping (address => uint256))    allowances;     // Allowances index-1 = Owner account   index-2 = spender account\n\n    //------ TOKEN SPECIFICATION\n\n    string  public  constant    name       = \"IOU Loyalty Exchange Token\";\n    string  public  constant    symbol     = \"IOUX\";\n    uint256 public  constant    decimals   = 18;      // Handle the coin as FIAT (2 decimals). ETH Handles 18 decimal places\n    uint256 public  constant    initSupply       = 800000000 * 10**decimals;        // 10**18 max\n    uint256 public  constant    supplyReserveVal = 600000000 * 10**decimals;          // if quantity => the ##MACRO## addrs \"* 10**decimals\" \n\n    //-----\n\n    uint256 public              totalSupply;\n    uint256 public              icoSalesSupply   = 0;                   // Needed when burning tokens\n    uint256 public              icoReserveSupply = 0;\n    uint256 public              softCap = 10000000  * 10**decimals;\n    uint256 public              hardCap = 500000000 * 10**decimals;\n\n    //---------------------------------------------------- smartcontract control\n\n    uint256 public              icoDeadLine = 1545177600;     // 2018-12-19 00:00 (GMT+0)\n\n    bool    public              isIcoPaused            = false; \n    bool    public              isStoppingIcoOnHardCap = false;\n\n    //--------------------------------------------------------------------------\n\n    modifier duringIcoOnlyTheOwner()  // if not during the ico : everyone is allowed at anytime\n    { \n        require( now>icoDeadLine || msg.sender==owner );\n        _;\n    }\n\n    modifier icoFinished()          { require(now > icoDeadLine);           _; }\n    modifier icoNotFinished()       { require(now <= icoDeadLine);          _; }\n    modifier icoNotPaused()         { require(isIcoPaused==false);          _; }\n    modifier icoPaused()            { require(isIcoPaused==true);           _; }\n    modifier onlyOwner()            { require(msg.sender==owner);           _; }\n    modifier onlyAdmin()            { require(msg.sender==admin);           _; }\n\n    //----- EVENTS\n\n    event Transfer(address indexed fromAddr, address indexed toAddr,   uint256 amount);\n    event Approval(address indexed _owner,   address indexed _spender, uint256 amount);\n\n            //---- extra EVENTS\n\n    event EventOn_AdminUserChanged(   address oldAdmin,       address newAdmin);\n    event EventOn_OwnershipTransfered(address oldOwner,       address newOwner);\n    event EventOn_AdminUserChange(    address oldAdmin,       address newAdmin);\n    event EventOn_IcoDeadlineChanged( uint256 oldIcoDeadLine, uint256 newIcoDeadline);\n    event EventOn_HardcapChanged(     uint256 hardCap,        uint256 newHardCap);\n    event EventOn_IcoIsNowPaused(       uint8 newPauseStatus);\n    event EventOn_IcoHasRestarted(      uint8 newPauseStatus);\n\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    constructor()   public \n    {\n        owner       = msg.sender;\n        admin       = owner;\n\n        isIcoPaused = false;\n        //-----\n\n        balances[owner] = initSupply;   // send the tokens to the owner\n        totalSupply     = initSupply;\n        icoSalesSupply  = totalSupply;   \n\n        //----- Handling if there is a special maximum amount of tokens to spend during the ICO or not\n\n        icoSalesSupply   = totalSupply.sub(supplyReserveVal);\n        icoReserveSupply = totalSupply.sub(icoSalesSupply);\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //----- ERC20 FUNCTIONS\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function balanceOf(address walletAddress) public constant returns (uint256 balance) \n    {\n        return balances[walletAddress];\n    }\n    //--------------------------------------------------------------------------\n    function transfer(address toAddr, uint256 amountInWei)  public   duringIcoOnlyTheOwner   returns (bool)     // don't icoNotPaused here. It's a logic issue. \n    {\n        require(toAddr!=0x0 && toAddr!=msg.sender && amountInWei>0);     // Prevent transfer to 0x0 address and to self, amount must be >0\n\n        uint256 availableTokens = balances[msg.sender];\n\n        //----- Checking Token reserve first : if during ICO    \n\n        if (msg.sender==owner && now <= icoDeadLine)                    // ICO Reserve Supply checking: Don't touch the RESERVE of tokens when owner is selling\n        {\n            assert(amountInWei<=availableTokens);\n\n            uint256 balanceAfterTransfer = availableTokens.sub(amountInWei);      \n\n            assert(balanceAfterTransfer >= icoReserveSupply);           // We try to sell more than allowed during an ICO\n        }\n\n        //-----\n\n        balances[msg.sender] = balances[msg.sender].sub(amountInWei);\n        balances[toAddr]     = balances[toAddr].add(amountInWei);\n\n        emit Transfer(msg.sender, toAddr, amountInWei);\n\n        return true;\n    }\n    //--------------------------------------------------------------------------\n    function allowance(address walletAddress, address spender) public constant returns (uint remaining)\n    {\n        return allowances[walletAddress][spender];\n    }\n    //--------------------------------------------------------------------------\n    function transferFrom(address fromAddr, address toAddr, uint256 amountInWei)  public  returns (bool) \n    {\n        if (amountInWei <= 0)                                   return false;\n        if (allowances[fromAddr][msg.sender] < amountInWei)     return false;\n        if (balances[fromAddr] < amountInWei)                   return false;\n\n        balances[fromAddr]               = balances[fromAddr].sub(amountInWei);\n        balances[toAddr]                 = balances[toAddr].add(amountInWei);\n        allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei);\n\n        emit Transfer(fromAddr, toAddr, amountInWei);\n        return true;\n    }\n    //--------------------------------------------------------------------------\n    function approve(address spender, uint256 amountInWei) public returns (bool) \n    {\n        require((amountInWei == 0) || (allowances[msg.sender][spender] == 0));\n        allowances[msg.sender][spender] = amountInWei;\n        emit Approval(msg.sender, spender, amountInWei);\n\n        return true;\n    }\n    //--------------------------------------------------------------------------\n    function() public                       \n    {\n        assert(true == false);      // If Ether is sent to this address, don't handle it -> send it back.\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function transferOwnership(address newOwner) public onlyOwner               // @param newOwner The address to transfer ownership to.\n    {\n        require(newOwner != address(0));\n\n        emit EventOn_OwnershipTransfered(owner, newOwner);\n        owner = newOwner;\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function    changeAdminUser(address newAdminAddress) public onlyOwner\n    {\n        require(newAdminAddress!=0x0);\n\n        emit EventOn_AdminUserChange(admin, newAdminAddress);\n        admin = newAdminAddress;\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function    changeIcoDeadLine(uint256 newIcoDeadline) public onlyAdmin\n    {\n        require(newIcoDeadline!=0);\n\n        emit EventOn_IcoDeadlineChanged(icoDeadLine, newIcoDeadline);\n        icoDeadLine = newIcoDeadline;\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function    changeHardCap(uint256 newHardCap) public onlyAdmin\n    {\n        require(newHardCap!=0);\n\n        emit EventOn_HardcapChanged(hardCap, newHardCap);\n        hardCap = newHardCap;\n    }\n    //--------------------------------------------------------------------------\n    function    isHardcapReached()  public view returns(bool)\n    {\n        return (isStoppingIcoOnHardCap && initSupply-balances[owner] > hardCap);\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function    pauseICO()  public onlyAdmin\n    {\n        isIcoPaused = true;\n        emit EventOn_IcoIsNowPaused(1);\n    }\n    //--------------------------------------------------------------------------\n    function    unpauseICO()  public onlyAdmin\n    {\n        isIcoPaused = false;\n        emit EventOn_IcoHasRestarted(0);\n    }\n    //--------------------------------------------------------------------------\n    function    isPausedICO() public view     returns(bool)\n    {\n        return (isIcoPaused) ? true : false;\n    }\n    /*--------------------------------------------------------------------------\n    //\n    // When ICO is closed, send the remaining (unsold) tokens to address 0x0\n    // So no one will be able to use it anymore... \n    // Anyone can check address 0x0, so to proove unsold tokens belong to no one anymore\n    //\n    //--------------------------------------------------------------------------*/\n    function destroyRemainingTokens() public onlyAdmin icoFinished icoNotPaused  returns(uint)\n    {\n        require(msg.sender==owner && now>icoDeadLine);\n\n        address   toAddr = 0x0000000000000000000000000000000000000000;\n\n        uint256   amountToBurn = balances[owner];\n\n        if (amountToBurn > icoReserveSupply)\n        {\n            amountToBurn = amountToBurn.sub(icoReserveSupply);\n        }\n\n        balances[owner]  = balances[owner].sub(amountToBurn);\n        balances[toAddr] = balances[toAddr].add(amountToBurn);\n\n        emit Transfer(msg.sender, toAddr, amountToBurn);\n        //Transfer(msg.sender, toAddr, amountToBurn);\n\n        return 1;\n    }        \n\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract    Token  is  ERC20\n{\n    using SafeMath  for uint256;\n\n    //-------------------------------------------------------------------------- Constructor\n    constructor()   public \n    {\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n}",
  "bytecode": "6080604052600060058190556006556a084595161401484a0000006007556b019d971e4fe8401e74000000600855635c198a00600955600a805461ffff1916905534801561004c57600080fd5b506000805433600160a060020a03199182161780835560018054600160a060020a03909216919092168117909155600a805460ff1916905581526002602052604090206b0295be96e64066972000000090819055600481905560058190556100cd906b01f04ef12cb04cf1580000006401000000006100f38102610e451704565b60058190556004546100eb91640100000000610e456100f382021704565b600655610105565b6000828211156100ff57fe5b50900390565b610e92806101146000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610185578063095ea7b31461020f57806309f64d2e1461024757806318160ddd1461025c57806323b872dd1461028357806324f32f82146102ad578063313ce567146102c557806333c77a6d146102da57806333d63869146102ef578063359cc28e146103045780634d986c8f1461031c57806363d177e61461033157806364c487ef146103465780636d6433081461035b57806370a0823114610370578063793a2cd11461039157806387f40ba4146103a65780638da5cb5b146103bb578063906a26e0146103ec57806395d89b411461040157806397d63f9314610416578063a9059cbb1461042b578063c97a06ce1461044f578063dd62ed3e14610464578063e20697341461048b578063f2fde38b146104a0578063f672e4d8146104c1578063f851a440146104e2578063fb86a404146104f7575b34801561018057600080fd5b50fe5b005b34801561019157600080fd5b5061019a61050c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d45781810151838201526020016101bc565b50505050905090810190601f1680156102015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021b57600080fd5b50610233600160a060020a0360043516602435610543565b604080519115158252519081900360200190f35b34801561025357600080fd5b506102336105e5565b34801561026857600080fd5b506102716105ee565b60408051918252519081900360200190f35b34801561028f57600080fd5b50610233600160a060020a03600435811690602435166044356105f4565b3480156102b957600080fd5b5061018360043561076e565b3480156102d157600080fd5b506102716107d3565b3480156102e657600080fd5b506101836107d8565b3480156102fb57600080fd5b50610271610833565b34801561031057600080fd5b50610183600435610839565b34801561032857600080fd5b5061027161089e565b34801561033d57600080fd5b506101836108a4565b34801561035257600080fd5b506102336108fb565b34801561036757600080fd5b50610271610909565b34801561037c57600080fd5b50610271600160a060020a036004351661090f565b34801561039d57600080fd5b5061023361092a565b3480156103b257600080fd5b50610271610946565b3480156103c757600080fd5b506103d0610956565b60408051600160a060020a039092168252519081900360200190f35b3480156103f857600080fd5b50610271610965565b34801561040d57600080fd5b5061019a61096b565b34801561042257600080fd5b506102716109a2565b34801561043757600080fd5b50610233600160a060020a03600435166024356109b2565b34801561045b57600080fd5b50610233610b21565b34801561047057600080fd5b50610271600160a060020a0360043581169060243516610b65565b34801561049757600080fd5b50610271610b90565b3480156104ac57600080fd5b50610183600160a060020a0360043516610cea565b3480156104cd57600080fd5b50610183600160a060020a0360043516610d8d565b3480156104ee57600080fd5b506103d0610e30565b34801561050357600080fd5b50610271610e3f565b60408051808201909152601a81527f494f55204c6f79616c74792045786368616e676520546f6b656e000000000000602082015281565b60008115806105735750336000908152600360209081526040808320600160a060020a0387168452909152902054155b151561057e57600080fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600a5460ff1681565b60045481565b600080821161060557506000610767565b600160a060020a038416600090815260036020908152604080832033845290915290205482111561063857506000610767565b600160a060020a03841660009081526002602052604090205482111561066057506000610767565b600160a060020a038416600090815260026020526040902054610689908363ffffffff610e4516565b600160a060020a0380861660009081526002602052604080822093909355908516815220546106be908363ffffffff610e5716565b600160a060020a038085166000908152600260209081526040808320949094559187168152600382528281203382529091522054610702908363ffffffff610e4516565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b9392505050565b600154600160a060020a0316331461078557600080fd5b80151561079157600080fd5b600854604080519182526020820183905280517f6ee49615d54e17d83dbe3196e960e404ad92ccbd48d404edcf8cd397de4efca59281900390910190a1600855565b601281565b600154600160a060020a031633146107ef57600080fd5b600a805460ff1916600190811790915560408051918252517ff99129edac1814b2e6e14d04304b5f0078e35599a6f6c314ead465a9b8fb0a309181900360200190a1565b60065481565b600154600160a060020a0316331461085057600080fd5b80151561085c57600080fd5b600954604080519182526020820183905280517f97542bd1f50ebab075febca0314beac73846776f35362e9f0bec9a0e804a8fa29281900390910190a1600955565b60055481565b600154600160a060020a031633146108bb57600080fd5b600a805460ff19169055604080516000815290517fa92762f642016de4da50847072d9d122a639a8f7f67c6e051d0a7e8d3fc8fa949181900360200190a1565b600a54610100900460ff1681565b60095481565b600160a060020a031660009081526002602052604090205490565b600a5460009060ff1661093e576000610941565b60015b905090565b6b01f04ef12cb04cf15800000081565b600054600160a060020a031681565b60075481565b60408051808201909152600481527f494f555800000000000000000000000000000000000000000000000000000000602082015281565b6b0295be96e64066972000000081565b60008060006009544211806109d15750600054600160a060020a031633145b15156109dc57600080fd5b600160a060020a038516158015906109fd5750600160a060020a0385163314155b8015610a095750600084115b1515610a1457600080fd5b336000818152600260205260408120549054909350600160a060020a0316148015610a4157506009544211155b15610a6f5781841115610a5057fe5b610a60828563ffffffff610e4516565b600654909150811015610a6f57fe5b33600090815260026020526040902054610a8f908563ffffffff610e4516565b3360009081526002602052604080822092909255600160a060020a03871681522054610ac1908563ffffffff610e5716565b600160a060020a0386166000818152600260209081526040918290209390935580518781529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001949350505050565b600a54600090610100900460ff16801561094157505060085460008054600160a060020a03168152600260205260409020546b0295be96e640669720000000031190565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60015460009081908190600160a060020a03163314610bae57600080fd5b6009544211610bbc57600080fd5b600a5460ff1615610bcc57600080fd5b600054600160a060020a031633148015610be7575060095442115b1515610bf257600080fd5b505060008054600160a060020a0316815260026020526040812054600654811115610c2e57600654610c2b90829063ffffffff610e4516565b90505b60008054600160a060020a0316815260026020526040902054610c57908263ffffffff610e4516565b60008054600160a060020a0390811682526002602052604080832093909355841681522054610c8c908263ffffffff610e5716565b600160a060020a0383166000818152600260209081526040918290209390935580518481529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a360019250505090565b600054600160a060020a03163314610d0157600080fd5b600160a060020a0381161515610d1657600080fd5b60005460408051600160a060020a039283168152918316602083015280517fb3f0885880dcbaf27d55d24795fcd4ae6d8babcc5b847f32d03f42001317f7cf9281900390910190a16000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610da457600080fd5b600160a060020a0381161515610db957600080fd5b60015460408051600160a060020a039283168152918316602083015280517f4ad495044505ffc34719636e81dea9aa82ed9971f74573e5b7a34e1e8be99cbd9281900390910190a16001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a031681565b60085481565b600082821115610e5157fe5b50900390565b60008282018381101561076757fe00a165627a7a72305820e6cb762b135956aa994b6dff1eaa20c8e4983472a812ec8555d31a420e1a23eb0029"
}