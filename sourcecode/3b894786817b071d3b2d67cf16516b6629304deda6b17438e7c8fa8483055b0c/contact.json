{
  "address": "0xe2f45f1660dc99daf3bd06f637ab1e4debc15bde",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SggCoin",
  "contractName": "SggCoin",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-10\n*/\n\npragma solidity ^0.4.11;\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\ncontract Ownable {\n    address public owner;\n\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\ncontract Pausable is Ownable {\n  bool public stopped;\n\n  modifier stopInEmergency {\n    if (stopped) {\n      throw;\n    }\n    _;\n  }\n  modifier onlyInEmergency {\n    if (!stopped) {\n      throw;\n    }\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function emergencyStop() external onlyOwner {\n    stopped = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function release() external onlyOwner onlyInEmergency {\n    stopped = false;\n  }\n\n}\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\ncontract PullPayment {\n\n  using SafeMath for uint;\n\n  mapping(address => uint) public payments;\n\n  event LogRefundETH(address to, uint value);\n\n\n  /**\n  *  Store sent amount as credit to be pulled, called by payer\n  **/\n  function asyncSend(address dest, uint amount) internal {\n    payments[dest] = payments[dest].add(amount);\n  }\n\n  // withdraw accumulated balance, called by payee\n  function withdrawPayments() {\n    address payee = msg.sender;\n    uint payment = payments[payee];\n\n    if (payment == 0) {\n      throw;\n    }\n\n    if (this.balance < payment) {\n      throw;\n    }\n\n    payments[payee] = 0;\n\n    if (!payee.send(payment)) {\n      throw;\n    }\n    LogRefundETH(payee,payment);\n  }\n}\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  /*\n   * Fix for the ERC20 short address attack\n  */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\ncontract StandardToken is BasicToken, ERC20 {\n  mapping (address => mapping (address => uint)) allowed;\n\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n  function approve(address _spender, uint _value) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\ncontract SggCoin is StandardToken, Ownable {\n  string public constant name = \"SggCoin\";\n  string public constant symbol = \"SGG\";\n  uint public constant decimals = 6;\n\n\n  // Constructor\n  function SggCoin() {\n      totalSupply = 1000000000000000;     // one billion\n      balances[msg.sender] = totalSupply; // Send all tokens to owner\n  }\n\n  /**\n   *  Burn away the specified amount of SggCoin tokens\n   */\n  function burn(uint _value) onlyOwner returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Transfer(msg.sender, 0x0, _value);\n    return true;\n  }\n\n}\n/*\n  Crowdsale Smart Contract for the StuffGoGo Project\n  Created and deployed by DAAPPS company\n  This smart contract collects ETH, and in return emits SggCoin tokens to the backers\n*/\ncontract Crowdsale is Pausable, PullPayment {\n\n    using SafeMath for uint;\n\n  \tstruct Backer {\n\t\tuint weiReceived; // Amount of Ether given\n\t\tuint coinSent;\n\t}\n\n\t/*\n\t* Constants\n\t*/\n\tuint public constant MIN_CAP = 5000000000;           // min: 5,000 SggCoins = 1 eth\n\tuint public constant MAX_CAP = 500000000000000;      // max: 500,000,000 SggCoins = 100000 eth\n\tuint public constant MIN_INVEST_ETHER = 100 finney;  // 0.1 eth\n\tuint private constant CROWDSALE_PERIOD = 28 days;    // 4 weeks\n\tuint public constant COIN_PER_ETHER = 5000000000;    // 5,000 SggCoins/ETH\n\n\n\t/*\n\t* Variables\n\t*/\n\t/* SggCoin contract reference */\n\tSggCoin public coin;\n    /* Multisig contract that will receive the Ether */\n\taddress public multisigEther;\n\t/* Number of Ether received */\n\tuint public etherReceived;\n\t/* Number of SggCoins sent to Ether contributors */\n\tuint public coinSentToEther;\n\t/* Crowdsale start time */\n\tuint public startTime;\n\t/* Crowdsale end time */\n\tuint public endTime;\n \t/* Is crowdsale still on going */\n\tbool public crowdsaleClosed;\n\n\t/* Backers Ether indexed by their Ethereum address */\n\tmapping(address => Backer) public backers;\n\n\n\t/*\n\t* Modifiers\n\t*/\n\tmodifier minCapNotReached() {\n\t\tif ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\n\t\t_;\n\t}\n\n\tmodifier respectTimeFrame() {\n\t\tif ((now < startTime) || (now > endTime )) throw;\n\t\t_;\n\t}\n\n\t/*\n\t * Event\n\t*/\n\tevent LogReceivedETH(address addr, uint value);\n\tevent LogCoinsEmited(address indexed from, uint amount);\n\n\t/*\n\t * Constructor\n\t*/\n\tfunction Crowdsale(address _SggCoinAddress, address _to) {\n\t\tcoin = SggCoin(_SggCoinAddress);\n\t\tmultisigEther = _to;\n\t}\n\n\t/*\n\t * The fallback function corresponds to a donation in ETH\n\t */\n\tfunction() stopInEmergency respectTimeFrame payable {\n\t\treceiveETH(msg.sender);\n\t}\n\n\t/*\n\t * To call to start the crowdsale\n\t */\n\tfunction start() onlyOwner {\n\t\tif (startTime != 0) throw; // Crowdsale was already started\n\n\t\tstartTime = now ;\n\t\tendTime =  now + CROWDSALE_PERIOD;\n\t}\n\n\t/*\n\t *\tReceives a donation in Ether\n\t*/\n\tfunction receiveETH(address beneficiary) internal {\n\t\tif (msg.value < MIN_INVEST_ETHER) throw; // Don't accept funding under a predefined threshold\n\n\t\tuint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of SggCoin to send\n\t\tif (coinToSend.add(coinSentToEther) > MAX_CAP) throw;\n\n\t\tBacker backer = backers[beneficiary];\n\t\tcoin.transfer(beneficiary, coinToSend); // Transfer SggCoins right now\n\n\t\tbacker.coinSent = backer.coinSent.add(coinToSend);\n\t\tbacker.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer\n\n\t\tetherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\n\t\tcoinSentToEther = coinSentToEther.add(coinToSend);\n\n\t\t// Send events\n\t\tLogCoinsEmited(msg.sender ,coinToSend);\n\t\tLogReceivedETH(beneficiary, etherReceived);\n\t}\n\n\n\t/*\n\t *Compute the SggCoin bonus according to the investment period\n\t */\n\tfunction bonus(uint amount) internal constant returns (uint) {\n\t\tif (now < startTime.add(2 days)) return amount.add(amount.div(5));   // bonus 20%\n\t\treturn amount;\n\t}\n\n\t/*\n\t * Finalize the crowdsale, should be called after the refund period\n\t*/\n\tfunction finalize() onlyOwner public {\n\n\t\tif (now < endTime) { // Cannot finalise before CROWDSALE_PERIOD or before selling all coins\n\t\t\tif (coinSentToEther == MAX_CAP) {\n\t\t\t} else {\n\t\t\t\tthrow;\n\t\t\t}\n\t\t}\n\n\t\tif (coinSentToEther < MIN_CAP && now < endTime + 15 days) throw; // If MIN_CAP is not reached donors have 15days to get refund before we can finalise\n\n\t\tif (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\n\n\t\tuint remains = coin.balanceOf(this);\n\t\tif (remains > 0) { // Burn the rest of SggCoins\n\t\t\tif (!coin.burn(remains)) throw ;\n\t\t}\n\t\tcrowdsaleClosed = true;\n\t}\n\n\t/*\n\t* Failsafe drain\n\t*/\n\tfunction drain() onlyOwner {\n\t\tif (!owner.send(this.balance)) throw;\n\t}\n\n\t/**\n\t * Allow to change the team multisig address in the case of emergency.\n\t */\n\tfunction setMultisig(address addr) onlyOwner public {\n\t\tif (addr == address(0)) throw;\n\t\tmultisigEther = addr;\n\t}\n\n\t/**\n\t * Manually back SggCoin owner address.\n\t */\n\tfunction backSggCoinOwner() onlyOwner public {\n\t\tcoin.transferOwnership(owner);\n\t}\n\n\t/**\n\t * Transfer remains to owner in case if impossible to do min invest\n\t */\n\tfunction getRemainCoins() onlyOwner public {\n\t\tvar remains = MAX_CAP - coinSentToEther;\n\t\tuint minCoinsToSell = bonus(MIN_INVEST_ETHER.mul(COIN_PER_ETHER) / (1 ether));\n\n\t\tif(remains > minCoinsToSell) throw;\n\n\t\tBacker backer = backers[owner];\n\t\tcoin.transfer(owner, remains); // Transfer SggCoins right now\n\n\t\tbacker.coinSent = backer.coinSent.add(remains);\n\n\t\tcoinSentToEther = coinSentToEther.add(remains);\n\n\t\t// Send events\n\t\tLogCoinsEmited(this ,remains);\n\t\tLogReceivedETH(owner, etherReceived);\n\t}\n\n\n\t/*\n  \t * When MIN_CAP is not reach:\n  \t * 1) backer call the \"approve\" function of the SggCoin token contract with the amount of all SggCoins they got in order to be refund\n  \t * 2) backer call the \"refund\" function of the Crowdsale contract with the same amount of SggCoins\n   \t * 3) backer call the \"withdrawPayments\" function of the Crowdsale contract to get a refund in ETH\n   \t */\n\tfunction refund(uint _value) minCapNotReached public {\n\n\t\tif (_value != backers[msg.sender].coinSent) throw; // compare value from backer balance\n\n\t\tcoin.transferFrom(msg.sender, address(this), _value); // get the token back to the crowdsale contract\n\n\t\tif (!coin.burn(_value)) throw ; // token sent for refund are burnt\n\n\t\tuint ETHToSend = backers[msg.sender].weiReceived;\n\t\tbackers[msg.sender].weiReceived=0;\n\n\t\tif (ETHToSend > 0) {\n\t\t\tasyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\n\t\t}\n\t}\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b66038d7ea4c680006000818155600160a060020a0333168152600160205260409020555b5b61085f806100616000396000f300606060405236156100b75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100bc578063095ea7b31461014757806318160ddd1461016b57806323b872dd14610190578063313ce567146101ba57806342966c68146101df57806370a08231146102095780638da5cb5b1461023a57806395d89b4114610269578063a9059cbb146102f4578063dd62ed3e14610318578063f2fde38b1461034f575b600080fd5b34156100c757600080fd5b6100cf610370565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610169600160a060020a03600435166024356103a7565b005b341561017657600080fd5b61017e610449565b60405190815260200160405180910390f35b341561019b57600080fd5b610169600160a060020a036004358116906024351660443561044f565b005b34156101c557600080fd5b61017e610572565b60405190815260200160405180910390f35b34156101ea57600080fd5b6101f5600435610577565b604051901515815260200160405180910390f35b341561021457600080fd5b61017e600160a060020a0360043516610637565b60405190815260200160405180910390f35b341561024557600080fd5b61024d610656565b604051600160a060020a03909116815260200160405180910390f35b341561027457600080fd5b6100cf610665565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ff57600080fd5b610169600160a060020a036004351660243561069c565b005b341561032357600080fd5b61017e600160a060020a0360043581169060243516610769565b60405190815260200160405180910390f35b341561035a57600080fd5b610169600160a060020a0360043516610796565b005b60408051908101604052600781527f536767436f696e00000000000000000000000000000000000000000000000000602082015281565b80158015906103da5750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b156103e457600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35b5050565b60005481565b60006060606436101561046157600080fd5b600160a060020a0380861660009081526002602090815260408083203385168452825280832054938816835260019091529020549092506104a8908463ffffffff6107ee16565b600160a060020a0380861660009081526001602052604080822093909355908716815220546104dd908463ffffffff61080a16565b600160a060020a038616600090815260016020526040902055610506828463ffffffff61080a16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b5b5050505050565b600681565b60035460009033600160a060020a0390811691161461059557600080fd5b600160a060020a0333166000908152600160205260409020546105be908363ffffffff61080a16565b600160a060020a033316600090815260016020526040812091909155546105eb908363ffffffff61080a16565b6000908155600160a060020a0333167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b919050565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60408051908101604052600381527f5347470000000000000000000000000000000000000000000000000000000000602082015281565b604060443610156106ac57600080fd5b600160a060020a0333166000908152600160205260409020546106d5908363ffffffff61080a16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461070a908363ffffffff6107ee16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35b5b505050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146107b157600080fd5b600160a060020a038116156107e9576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b60008282016107ff84821015610823565b8091505b5092915050565b600061081883831115610823565b508082035b92915050565b8015156107e957600080fd5b5b505600a165627a7a7230582038c8c3d7c70ff23f8cc842b742ab6061fd2f63f6f8af375c2d06076a3dab86680029"
}