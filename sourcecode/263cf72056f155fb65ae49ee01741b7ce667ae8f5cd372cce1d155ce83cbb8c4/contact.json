{
  "address": "0x656038e97cee7c095673f7b9fad695b323a6f098",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WheelOf0xBitcoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-08\n*/\n\npragma solidity ^0.4.24;\n\n/**\n__          ___               _          __    ___       ____  _ _            _\n\\ \\        / / |             | |        / _|  / _ \\     |  _ \\(_) |          (_)\n \\ \\  /\\  / /| |__   ___  ___| |   ___ | |_  | | | |_  _| |_) |_| |_ ___ ___  _ _ __\n  \\ \\/  \\/ / | '_ \\ / _ \\/ _ \\ |  / _ \\|  _| | | | \\ \\/ /  _ <| | __/ __/ _ \\| | '_ \\\n   \\  /\\  /  | | | |  __/  __/ | | (_) | |   | |_| |>  <| |_) | | || (_| (_) | | | | |\n    \\/  \\/   |_| |_|\\___|\\___|_|  \\___/|_|    \\___//_/\\_\\____/|_|\\__\\___\\___/|_|_| |_|\n\n                                  `.-::::::::::::-.`\n                           .:::+:-.`            `.-:+:::.\n                      `::::.   `-                  -`   .:::-`\n                   .:::`        :         J        :        `:::.\n                `:/-            `-        A       -`            -/:`\n              ./:`               :        C      `:               `:/.\n            .+:                   :       K      :                  `:+.\n          `/-`..`                 -`      P     `-                 `..`-/`\n         :/`    ..`                :      O     :                `..    `/:\n       `+.        ..`              -`     T    `-              `..        .+`\n      .+`           ..`             :          :             `..           `+.\n     -+               ..`           -.        ..           `..               +-\n    .+                 `..`          :        :          `..                  +.\n   `o                    `..`        ..      ..        `..`                    o`\n   o`                      `..`     `./------/.`     `..`                      `o\n  -+``                       `..``-::.````````.::-``..`                       ``+-\n  s```....````                 `+:.  ..------..  .:+`                 ````....```o\n .+       ````...````         .+. `--``      ``--` .+.         ````...````       +.\n +.              ````....`````+` .:`            `:. `o`````....````              ./\n o                       ````s` `/                /` `s````                       o\n s                           s  /`                .:  s                           s\n s                           s  /`       0xB      `/  s                           s\n s                        ```s` `/                /` `s```                        o\n +.               ````....```.+  .:`            `:.  +.```....````               .+\n ./        ```....````        -/` `--`        `--` `/.        ````....```        +.\n  s````....```                 .+:` `.--------.` `:+.                 ```....````s\n  :/```                       ..`.::-.``    ``.-::.`..                       ```/:\n   o`                       ..`     `-/-::::-/-`     `..                       `o\n   `o                     ..`        ..      ..        `..                     o`\n    -/                  ..`          :        :          `..                  /-\n     -/               ..`           ..        ..           `..               /-\n      -+`           ..`             :          :             `-.           `+-\n       .+.        .-`              -`          ..              `-.        .+.\n         /:     .-`                :            :                `-.    `:/\n          ./- .-`                 -`            `-                 `-. -/.\n            -+-                   :              :                   :+-\n              -/-`               -`              `-               `-/-\n                .:/.             :                :             ./:.\n                   -:/-         :                  :         -/:-\n                      .:::-`   `-                  -`   `-:::.\n                          `-:::+-.`              `.:+:::-`\n                                `.-::::::::::::::-.`\n\n---Design---\nJörmungandr\n\n---Contract and Frontend---\nMr Fahrenheit\nJörmungandr\n\n---0xBitcoin Specialist---\nMr Fahrenheit\n\n---Contract Auditor---\n8 ฿ł₮ ₮Ɽł₱\n\n---Contract Advisors---\nEtherguy\nNorsefire\n\n**/\n\ncontract ERC20Interface\n{\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract WheelOf0xBitcoin {\n    using SafeMath for uint;\n\n    //  Modifiers\n\n    modifier nonContract() {                // contracts pls go\n        require(tx.origin == msg.sender);\n        _;\n    }\n\n    modifier gameActive() {\n        require(gamePaused == false);\n        _;\n    }\n\n    modifier onlyAdmin(){\n        require(msg.sender == admin);\n        _;\n    }\n\n    // Events\n\n    event onDeposit(\n        address indexed customerAddress,\n        uint256 tokensIn,\n        uint256 contractBal,\n        uint256 devFee,\n        uint timestamp\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 tokensOut,\n        uint256 contractBal,\n        uint timestamp\n    );\n\n    event spinResult(\n        address indexed customerAddress,\n        uint256 wheelNumber,\n        uint256 outcome,\n        uint256 tokensSpent,\n        uint256 tokensReturned,\n        uint256 userBalance,\n        uint timestamp\n    );\n\n    uint256 _seed;\n    address admin;\n    bool public gamePaused = false;\n    uint256 minBet = 100000000;\n    uint256 maxBet = 500000000000;\n    uint256 devFeeBalance = 0;\n\n    uint8[10] brackets = [1,3,6,12,24,40,56,68,76,80];\n\n    struct playerSpin {\n        uint256 betAmount;\n        uint48 blockNum;\n    }\n\n    mapping(address => playerSpin) public playerSpins;\n    mapping(address => uint256) internal personalFactorLedger_;\n    mapping(address => uint256) internal balanceLedger_;\n\n    uint256 internal globalFactor = 10e21;\n    uint256 constant internal constantFactor = 10e21 * 10e21;\n    address public tokenAddress = 0xB6eD7644C69416d67B522e20bC294A9a9B405B31;\n\n    constructor()\n        public\n    {\n        admin = msg.sender;\n    }\n\n\n    function getBalance()\n        public\n        view\n        returns (uint256)\n    {\n        return ERC20Interface(tokenAddress).balanceOf(this);\n    }\n\n\n    //deposit needs approval from token contract\n    function deposit(address _customerAddress, uint256 amount)\n        public\n        gameActive\n    {\n        require(tx.origin == _customerAddress);\n        require(amount >= (minBet * 2));\n        require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, this, amount), \"token transfer failed\");\n        // Add 4% fee of the buy to devFeeBalance\n        uint256 devFee = amount / 33;\n        devFeeBalance = devFeeBalance.add(devFee);\n        // Adjust ledgers while taking the dev fee into account\n        balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).add(amount).sub(devFee);\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n\n        emit onDeposit(_customerAddress, amount, getBalance(), devFee, now);\n    }\n\n\n    function receiveApproval(address receiveFrom, uint256 amount, address tknaddr, bytes data)\n      public\n    {\n        if (uint(data[0]) == 0) {\n          deposit(receiveFrom, amount);\n        } else {\n          depositAndSpin(receiveFrom, amount);\n        }\n    }\n\n\n    //withdraw from contract\n    function withdraw(uint256 amount)\n      public\n    {\n        address _customerAddress = msg.sender;\n        require(amount <= tokenBalanceOf(_customerAddress));\n        require(amount > 0);\n        if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))\n            revert();\n        balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).sub(amount);\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n        emit onWithdraw(_customerAddress, amount, getBalance(), now);\n    }\n\n\n    function withdrawAll()\n        public\n    {\n        address _customerAddress = msg.sender;\n        // Set the sell amount to the user's full balance, don't sell if empty\n        uint256 amount = tokenBalanceOf(_customerAddress);\n        require(amount > 0);\n        // Transfer balance and update user ledgers\n        if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))\n            revert();\n        balanceLedger_[_customerAddress] = 0;\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n        emit onWithdraw(_customerAddress, amount, getBalance(), now);\n    }\n\n\n    function tokenBalanceOf(address _customerAddress)\n        public\n        view\n        returns (uint256)\n    {\n        // Balance ledger * personal factor * globalFactor / constantFactor\n        return balanceLedger_[_customerAddress].mul(personalFactorLedger_[_customerAddress]).mul(globalFactor) / constantFactor;\n    }\n\n\n    function spinTokens(uint256 betAmount)\n        public\n        nonContract\n        gameActive\n    {\n        address _customerAddress = msg.sender;\n        // User must have enough eth\n        require(tokenBalanceOf(_customerAddress) >= betAmount);\n        // User must bet at least the minimum\n        require(betAmount >= minBet);\n        // If the user bets more than maximum...they just bet the maximum\n        if (betAmount > maxBet){\n            betAmount = maxBet;\n        }\n        // User cannot bet more than 10% of available pool\n        if (betAmount > betPool(_customerAddress)/10) {\n            betAmount = betPool(_customerAddress)/10;\n        }\n        // Execute the bet and return the outcome\n        startSpin(betAmount, _customerAddress);\n    }\n\n\n    function spinAll()\n        public\n        nonContract\n        gameActive\n    {\n        address _customerAddress = msg.sender;\n        // set the bet amount to the user's full balance\n        uint256 betAmount = tokenBalanceOf(_customerAddress);\n        // User cannot bet more than 10% of available pool\n        if (betAmount > betPool(_customerAddress)/10) {\n            betAmount = betPool(_customerAddress)/10;\n        }\n        // User must bet more than the minimum\n        require(betAmount >= minBet);\n        // If the user bets more than maximum...they just bet the maximum\n        if (betAmount >= maxBet){\n            betAmount = maxBet;\n        }\n        // Execute the bet and return the outcome\n        startSpin(betAmount, _customerAddress);\n    }\n\n\n    //deposit needs approval from token contract\n    function depositAndSpin(address _customerAddress, uint256 betAmount)\n        public\n        gameActive\n    {\n        require(tx.origin == _customerAddress);\n        require(betAmount >= (minBet * 2));\n        require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, this, betAmount), \"token transfer failed\");\n        // Add 4% fee of the buy to devFeeBalance\n        uint256 devFee = betAmount / 33;\n        devFeeBalance = devFeeBalance.add(devFee);\n        // Adjust ledgers while taking the dev fee into account\n        balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).add(betAmount).sub(devFee);\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n\n        emit onDeposit(_customerAddress, betAmount, getBalance(), devFee, now);\n\n        betAmount = betAmount.sub(devFee);\n        // If the user bets more than maximum...they just bet the maximum\n        if (betAmount >= maxBet){\n            betAmount = maxBet;\n        }\n        // User cannot bet more than 10% of available pool\n        if (betAmount > betPool(_customerAddress)/10) {\n            betAmount = betPool(_customerAddress)/10;\n        }\n        // Execute the bet while taking the dev fee into account, and return the outcome\n        startSpin(betAmount, _customerAddress);\n    }\n\n\n    function betPool(address _customerAddress)\n        public\n        view\n        returns (uint256)\n    {\n        // Balance of contract, minus eth balance of user and accrued dev fees\n        return getBalance().sub(tokenBalanceOf(_customerAddress)).sub(devFeeBalance);\n    }\n\n    /*\n        panicButton and refundUser are here incase of an emergency, or launch of a new contract\n        The game will be frozen, and all token holders will be refunded\n    */\n\n    function panicButton(bool newStatus)\n        public\n        onlyAdmin\n    {\n        gamePaused = newStatus;\n    }\n\n\n    function refundUser(address _customerAddress)\n        public\n        onlyAdmin\n    {\n        uint256 withdrawAmount = tokenBalanceOf(_customerAddress);\n        if(!ERC20Interface(tokenAddress).transfer(_customerAddress, withdrawAmount))\n            revert();\n        balanceLedger_[_customerAddress] = 0;\n\t      personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n        emit onWithdraw(_customerAddress, withdrawAmount, getBalance(), now);\n    }\n\n\n    function updateMinBet(uint256 newMin)\n        public\n        onlyAdmin\n    {\n        require(newMin > 0);\n        minBet = newMin;\n    }\n\n\n    function updateMaxBet(uint256 newMax)\n        public\n        onlyAdmin\n    {\n        require(newMax > 0);\n        maxBet = newMax;\n    }\n\n\n    function getDevBalance()\n        public\n        view\n        returns (uint256)\n    {\n        return devFeeBalance;\n    }\n\n\n    function withdrawDevFees()\n        public\n    {\n        address fahrenheit = 0x7e7e2bf7EdC52322ee1D251432c248693eCd9E0f;\n        address jormun = 0xf14BE3662FE4c9215c27698166759Db6967De94f;\n        uint256 initDevBal = devFeeBalance;\n        if(!ERC20Interface(tokenAddress).transfer(fahrenheit, devFeeBalance/2))\n          revert();\n        if(!ERC20Interface(tokenAddress).transfer(jormun, devFeeBalance/2))\n          revert();\n        devFeeBalance = devFeeBalance.sub(initDevBal/2);\n        devFeeBalance = devFeeBalance.sub(initDevBal/2);\n    }\n\n\n    function finishSpin(address _customerAddress)\n        public\n        returns (uint256)\n    {\n        return _finishSpin(_customerAddress);\n    }\n\n\n    // Internal Functions\n\n\n    function startSpin(uint256 betAmount, address _customerAddress)\n        internal\n    {\n        playerSpin memory spin = playerSpins[_customerAddress];\n        require(block.number != spin.blockNum);\n\n        if (spin.blockNum != 0) {\n            _finishSpin(_customerAddress);\n        }\n        lose(_customerAddress, betAmount);\n        playerSpins[_customerAddress] = playerSpin(uint256(betAmount), uint48(block.number));\n    }\n\n\n    function _finishSpin(address _customerAddress)\n        internal\n        returns (uint256 resultNum)\n    {\n        playerSpin memory spin = playerSpins[_customerAddress];\n        require(block.number != spin.blockNum);\n\n        uint result;\n        if (block.number - spin.blockNum > 255) {\n            resultNum = 80;\n            result = 9; // timed out :(\n            return resultNum;\n        } else {\n            resultNum = random(80, spin.blockNum, _customerAddress);\n            result = determinePrize(resultNum);\n        }\n\n        uint256 betAmount = spin.betAmount;\n        uint256 returnedAmount;\n\n        if (result < 5)                                             // < 5 = WIN\n        {\n            uint256 wonAmount;\n            if (result == 0){                                       // Grand Jackpot\n                wonAmount = betAmount.mul(9) / 10;                  // +90% of original bet\n            } else if (result == 1){                                // Jackpot\n                wonAmount = betAmount.mul(8) / 10;                  // +80% of original bet\n            } else if (result == 2){                                // Grand Prize\n                wonAmount = betAmount.mul(7) / 10;                  // +70% of original bet\n            } else if (result == 3){                                // Major Prize\n                wonAmount = betAmount.mul(6) / 10;                  // +60% of original bet\n            } else if (result == 4){                                // Minor Prize\n                wonAmount = betAmount.mul(3) / 10;                  // +30% of original bet\n            }\n            returnedAmount = betAmount.add(wonAmount);\n        } else if (result == 5){                                    // 5 = Refund\n            returnedAmount = betAmount;\n        } else {                                                    // > 5 = LOSE\n            uint256 lostAmount;\n            if (result == 6){                                \t    // Minor Loss\n                lostAmount = betAmount / 10;                        // -10% of original bet\n            } else if (result == 7){                                // Major Loss\n                lostAmount = betAmount / 4;                         // -25% of original bet\n            } else if (result == 8){                                // Grand Loss\n                lostAmount = betAmount / 2;                     \t// -50% of original bet\n            } else if (result == 9){                                // Total Loss\n                lostAmount = betAmount;                             // -100% of original bet\n            }\n            returnedAmount = betAmount.sub(lostAmount);\n        }\n        if (returnedAmount > 0) {\n            win(_customerAddress, returnedAmount);                  // Give user their tokens\n        }\n        uint256 newBal = tokenBalanceOf(_customerAddress);\n        emit spinResult(_customerAddress, resultNum, result, betAmount, returnedAmount, newBal, now);\n\n        playerSpins[_customerAddress] = playerSpin(uint256(0), uint48(0));\n\n        return resultNum;\n    }\n\n\n    function maxRandom(uint blockn, address entropy)\n        internal\n        returns (uint256 randomNumber)\n    {\n        return uint256(keccak256(\n            abi.encodePacked(\n              blockhash(blockn),\n              entropy)\n        ));\n    }\n\n\n    function random(uint256 upper, uint256 blockn, address entropy)\n        internal\n        returns (uint256 randomNumber)\n    {\n        return maxRandom(blockn, entropy) % upper + 1;\n    }\n\n\n    function determinePrize(uint256 result)\n        internal\n        returns (uint256 resultNum)\n    {\n        // Loop until the result bracket is determined\n        for (uint8 i=0;i<=9;i++){\n            if (result <= brackets[i]){\n                return i;\n            }\n        }\n    }\n\n\n    function lose(address _customerAddress, uint256 lostAmount)\n        internal\n    {\n        uint256 customerBal = tokenBalanceOf(_customerAddress);\n        // Increase amount of eth everyone else owns\n        uint256 globalIncrease = globalFactor.mul(lostAmount) / betPool(_customerAddress);\n        globalFactor = globalFactor.add(globalIncrease);\n        // Update user ledgers\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n        // User can't lose more than they have\n        if (lostAmount > customerBal){\n            lostAmount = customerBal;\n        }\n        balanceLedger_[_customerAddress] = customerBal.sub(lostAmount);\n    }\n\n\n    function win(address _customerAddress, uint256 wonAmount)\n        internal\n    {\n        uint256 customerBal = tokenBalanceOf(_customerAddress);\n        // Decrease amount of eth everyone else owns\n        uint256 globalDecrease = globalFactor.mul(wonAmount) / betPool(_customerAddress);\n        globalFactor = globalFactor.sub(globalDecrease);\n        // Update user ledgers\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n        balanceLedger_[_customerAddress] = customerBal.add(wonAmount);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n          return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "6001805460a060020a60ff02191681556305f5e10060025564746a528800600390815560006004556101c0604052608091825260a052600660c052600c60e052601861010052602861012052603861014052604461016052604c6101805260506101a0526200007390600590600a620000ce565b5069021e19e0c9bab2400000600955600a8054600160a060020a03191673b6ed7644c69416d67b522e20bc294a9a9b405b31179055348015620000b557600080fd5b5060018054600160a060020a031916331790556200018c565b600183019183908215620001565791602002820160005b838211156200012557835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302620000e5565b8015620001545782816101000a81549060ff021916905560010160208160000104928301926001030262000125565b505b506200016492915062000168565b5090565b6200018991905b808211156200016457805460ff191681556001016200016f565b90565b611762806200019c6000396000f3006080604052600436106101115763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b4438e581146101165780630da590d41461012d57806312065fe0146101425780631fc9cee8146101695780632e1a7d4d146101aa57806337f03888146101c257806347e7ef24146101dc578063595e615f146102005780636c7131a61461022157806372b38ab914610242578063853828b6146102635780638f4ffcb1146102785780639d76ea58146102e8578063a4eb6ca214610319578063a55cd51c1461033d578063bb6e53ce14610355578063bee14b3d1461036d578063c3de1ab914610382578063e42c08f2146103ab578063f7cf0aa1146103cc575b600080fd5b34801561012257600080fd5b5061012b6103e4565b005b34801561013957600080fd5b5061012b610477565b34801561014e57600080fd5b506101576105fa565b60408051918252519081900360200190f35b34801561017557600080fd5b5061018a600160a060020a0360043516610690565b6040805192835265ffffffffffff90911660208301528051918290030190f35b3480156101b657600080fd5b5061012b6004356106b1565b3480156101ce57600080fd5b5061012b6004351515610821565b3480156101e857600080fd5b5061012b600160a060020a0360043516602435610867565b34801561020c57600080fd5b50610157600160a060020a0360043516610a9a565b34801561022d57600080fd5b50610157600160a060020a0360043516610abc565b34801561024e57600080fd5b5061012b600160a060020a0360043516610ac7565b34801561026f57600080fd5b5061012b610bfe565b34801561028457600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261012b94600160a060020a03813581169560248035966044359093169536956084949201918190840183828082843750949750610c729650505050505050565b3480156102f457600080fd5b506102fd610cd3565b60408051600160a060020a039092168252519081900360200190f35b34801561032557600080fd5b5061012b600160a060020a0360043516602435610ce2565b34801561034957600080fd5b5061012b600435610f69565b34801561036157600080fd5b5061012b600435610f92565b34801561037957600080fd5b5061015761102b565b34801561038e57600080fd5b50610397611031565b604080519115158252519081900360200190f35b3480156103b757600080fd5b50610157600160a060020a0360043516611041565b3480156103d857600080fd5b5061012b6004356110af565b6000803233146103f357600080fd5b60015460a060020a900460ff161561040a57600080fd5b33915061041682611041565b9050600a61042383610a9a565b81151561042c57fe5b0481111561044c57600a61043f83610a9a565b81151561044857fe5b0490505b60025481101561045b57600080fd5b600354811061046957506003545b61047381836110d8565b5050565b60048054600a546040805160e060020a63a9059cbb028152737e7e2bf7edc52322ee1d251432c248693ecd9e0f948101859052600284046024820152905173f14be3662fe4c9215c27698166759db6967de94f9392600160a060020a03169163a9059cbb9160448083019260209291908290030181600087803b1580156104fd57600080fd5b505af1158015610511573d6000803e3d6000fd5b505050506040513d602081101561052757600080fd5b5051151561053457600080fd5b600a54600480546040805160e060020a63a9059cbb028152600160a060020a03878116948201949094526002909204602483015251919092169163a9059cbb9160448083019260209291908290030181600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b505050506040513d60208110156105bf57600080fd5b505115156105cc57600080fd5b6105e46002825b60045491900463ffffffff6111a916565b6004556105f26002826105d3565b600455505050565b600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561065f57600080fd5b505af1158015610673573d6000803e3d6000fd5b505050506040513d602081101561068957600080fd5b5051905090565b6006602052600090815260409020805460019091015465ffffffffffff1682565b336106bb81611041565b8211156106c757600080fd5b600082116106d457600080fd5b600a546040805160e060020a63a9059cbb028152600160a060020a038481166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561072d57600080fd5b505af1158015610741573d6000803e3d6000fd5b505050506040513d602081101561075757600080fd5b5051151561076457600080fd5b61077d8261077183611041565b9063ffffffff6111a916565b600160a060020a03821660009081526008602052604090205560095472047bf19673df52e37f2410011d1000000000008115156107b657fe5b600160a060020a0383166000818152600760205260409020929091049091557f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70836107ff6105fa565b6040805192835260208301919091524282820152519081900360600190a25050565b600154600160a060020a0316331461083857600080fd5b6001805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b60015460009060a060020a900460ff161561088157600080fd5b32600160a060020a0384161461089657600080fd5b60028054028210156108a757600080fd5b600a54604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015230602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561091c57600080fd5b505af1158015610930573d6000803e3d6000fd5b505050506040513d602081101561094657600080fd5b505115156109b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f6b656e207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b5060045460218204906109ce908263ffffffff6111bb16565b6004556109ee81610771846109e287611041565b9063ffffffff6111bb16565b600160a060020a03841660009081526008602052604090205560095472047bf19673df52e37f2410011d100000000000811515610a2757fe5b600160a060020a0385166000818152600760205260409020929091049091557fa26ec6b15e753f8f448b8db8686a628872f78438cfe0d7040300f5c893f15c9383610a706105fa565b604080519283526020830191909152818101859052426060830152519081900360800190a2505050565b6000610ab6600454610771610aae85611041565b6107716105fa565b92915050565b6000610ab6826111c8565b600154600090600160a060020a03163314610ae157600080fd5b610aea82611041565b600a546040805160e060020a63a9059cbb028152600160a060020a03868116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b158015610b4557600080fd5b505af1158015610b59573d6000803e3d6000fd5b505050506040513d6020811015610b6f57600080fd5b50511515610b7c57600080fd5b600160a060020a03821660009081526008602052604081205560095472047bf19673df52e37f2410011d100000000000811515610bb557fe5b600160a060020a0384166000818152600760205260409020929091049091557f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70826107ff6105fa565b336000610c0a82611041565b905060008111610c1957600080fd5b600a546040805160e060020a63a9059cbb028152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610b4557600080fd5b806000815181101515610c8157fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102041515610cc357610cbe8484610867565b610ccd565b610ccd8484610ce2565b50505050565b600a54600160a060020a031681565b60015460009060a060020a900460ff1615610cfc57600080fd5b32600160a060020a03841614610d1157600080fd5b6002805402821015610d2257600080fd5b600a54604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015230602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b505050506040513d6020811015610dc157600080fd5b50511515610e3057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f6b656e207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b506004546021820490610e49908263ffffffff6111bb16565b600455610e5d81610771846109e287611041565b600160a060020a03841660009081526008602052604090205560095472047bf19673df52e37f2410011d100000000000811515610e9657fe5b600160a060020a0385166000818152600760205260409020929091049091557fa26ec6b15e753f8f448b8db8686a628872f78438cfe0d7040300f5c893f15c9383610edf6105fa565b604080519283526020830191909152818101859052426060830152519081900360800190a2610f14828263ffffffff6111a916565b6003549092508210610f265760035491505b600a610f3184610a9a565b811515610f3a57fe5b04821115610f5a57600a610f4d84610a9a565b811515610f5657fe5b0491505b610f6482846110d8565b505050565b600154600160a060020a03163314610f8057600080fd5b60008111610f8d57600080fd5b600355565b6000323314610fa057600080fd5b60015460a060020a900460ff1615610fb757600080fd5b503381610fc382611041565b1015610fce57600080fd5b600254821015610fdd57600080fd5b600354821115610fed5760035491505b600a610ff882610a9a565b81151561100157fe5b0482111561102157600a61101482610a9a565b81151561101d57fe5b0491505b61047382826110d8565b60045490565b60015460a060020a900460ff1681565b600954600160a060020a0382166000908152600760209081526040808320546008909252822054919272047bf19673df52e37f2410011d1000000000009261109f92611093919063ffffffff61147c16565b9063ffffffff61147c16565b8115156110a857fe5b0492915050565b600154600160a060020a031633146110c657600080fd5b600081116110d357600080fd5b600255565b6110e061171f565b50600160a060020a0381166000908152600660209081526040918290208251808401909352805483526001015465ffffffffffff1690820181905243141561112757600080fd5b602081015165ffffffffffff161561114457611142826111c8565b505b61114e82846114a5565b5060408051808201825292835265ffffffffffff4381166020808601918252600160a060020a0390941660009081526006909452919092209251835551600190920180549290911665ffffffffffff19909216919091179055565b6000828211156111b557fe5b50900390565b81810182811015610ab657fe5b60006111d261171f565b50600160a060020a03821660009081526006602090815260408083208151808301909252805482526001015465ffffffffffff1691810182905291908190819081908190819043141561122457600080fd5b60ff876020015165ffffffffffff1643031115611248576050975060099550611470565b6112606050886020015165ffffffffffff168b61156d565b975061126b88611590565b9550865194506005861015611339578515156112a557600a61129486600963ffffffff61147c16565b81151561129d57fe5b049250611322565b85600114156112c157600a61129486600863ffffffff61147c16565b85600214156112dd57600a61129486600763ffffffff61147c16565b85600314156112f957600a61129486600663ffffffff61147c16565b856004141561132257600a61131586600363ffffffff61147c16565b81151561131e57fe5b0492505b611332858463ffffffff6111bb16565b93506113a1565b856005141561134a578493506113a1565b856006141561135f57600a855b04915061138e565b856007141561137057600485611357565b856008141561138157600285611357565b856009141561138e578491505b61139e858363ffffffff6111a916565b93505b60008411156113b4576113b489856115e4565b6113bd89611041565b604080518a81526020810189905280820188905260608101879052608081018390524260a08201529051919250600160a060020a038b16917f6cc39dee30f676f4f51573724b90d7dbde8804203dee6bec77859ed572300af29181900360c00190a260408051808201825260008082526020808301828152600160a060020a038e16835260069091529290209051815590516001909101805465ffffffffffff191665ffffffffffff9092169190911790555b50505050505050919050565b600082151561148d57506000610ab6565b5081810281838281151561149d57fe5b0414610ab657fe5b6000806114b184611041565b91506114bc84610a9a565b6009546114cf908563ffffffff61147c16565b8115156114d857fe5b0490506114f0816009546111bb90919063ffffffff16565b600981905572047bf19673df52e37f2410011d10000000000081151561151257fe5b600160a060020a038616600090815260076020526040902091900490558183111561153b578192505b61154b828463ffffffff6111a916565b600160a060020a03909416600090815260086020526040902093909355505050565b60008361157a848461167e565b81151561158357fe5b0660010190509392505050565b6000805b600960ff8216116115de57600560ff8216600a81106115af57fe5b602081049091015460ff601f9092166101000a90041683116115d6578060ff1691506115de565b600101611594565b50919050565b6000806115f084611041565b91506115fb84610a9a565b60095461160e908563ffffffff61147c16565b81151561161757fe5b04905061162f816009546111a990919063ffffffff16565b600981905572047bf19673df52e37f2410011d10000000000081151561165157fe5b600160a060020a0386166000908152600760205260409020919004905561154b828463ffffffff6111bb16565b6040805183406020808301919091526c01000000000000000000000000600160a060020a0385160282840152825160348184030181526054909201928390528151600093918291908401908083835b602083106116ec5780518252601f1990920191602091820191016116cd565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b6040805180820190915260008082526020820152905600a165627a7a72305820341824aae28337cc9392565719793f90019c8854951fca60b2d1d8149364b5d00029"
}