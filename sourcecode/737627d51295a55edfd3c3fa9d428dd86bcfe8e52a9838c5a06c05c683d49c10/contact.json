{
  "address": "0x04abeda201850ac0124161f037efd70c74ddc74c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "NestChain Token",
  "contractName": "IBNEST",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "byzantium",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity ^0.5.1;\n\nlibrary IterableMapping {\n  struct itmap\n  {\n    mapping(address => IndexValue) data;\n    KeyFlag[] keys;\n    uint size;\n  }\n  struct IndexValue { uint keyIndex; uint value; }\n  struct KeyFlag { address key; bool deleted; }\n  function insert(itmap storage self, address key, uint value) public returns (bool replaced)\n  {\n    uint keyIndex = self.data[key].keyIndex;\n    self.data[key].value = value;\n    if (keyIndex > 0)\n      return true;\n    else\n    {\n      keyIndex = self.keys.length++;\n      self.data[key].keyIndex = keyIndex + 1;\n      self.keys[keyIndex].key = key;\n      self.size++;\n      return false;\n    }\n  }\n  function remove(itmap storage self, address key) public returns (bool success)\n  {\n    uint keyIndex = self.data[key].keyIndex;\n    if (keyIndex == 0)\n      return false;\n    delete self.data[key];\n    self.keys[keyIndex - 1].deleted = true;\n    self.size --;\n  }\n  function contains(itmap storage self, address key) public view returns (bool)\n  {\n    return self.data[key].keyIndex > 0;\n  }\n  function iterate_start(itmap storage self) public view returns (uint keyIndex)\n  {\n    return iterate_next(self, uint(-1));\n  }\n  function iterate_valid(itmap storage self, uint keyIndex) public view returns (bool)\n  {\n    return keyIndex < self.keys.length;\n  }\n  function iterate_next(itmap storage self, uint keyIndex) public view returns (uint r_keyIndex)\n  {\n    keyIndex++;\n    while (keyIndex < self.keys.length && self.keys[keyIndex].deleted)\n      keyIndex++;\n    return keyIndex;\n  }\n  function iterate_get(itmap storage self, uint keyIndex) public view returns (address key, uint value)\n  {\n    key = self.keys[keyIndex].key;\n    value = self.data[key].value;\n  }\n  function iterate_getValue(itmap storage self, address key) public view returns (uint value) {\n      return self.data[key].value;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = _a / _b;\n    assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  IterableMapping.itmap balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n      \n    require(_value <= IterableMapping.iterate_getValue(balances, msg.sender));\n    require(_to != address(0));\n    \n    IterableMapping.insert(balances, msg.sender, IterableMapping.iterate_getValue(balances, msg.sender).sub(_value));\n    IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value));\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n      return IterableMapping.iterate_getValue(balances, _owner);\n  }\n\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n      \n    require(_value <= IterableMapping.iterate_getValue(balances, _from));\n\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    IterableMapping.insert(balances, _from, IterableMapping.iterate_getValue(balances, _from).sub(_value));\n    IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value));\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract IBNEST is StandardToken {\n    \n    string public name = \"NEST\";\n    string public symbol = \"NEST\";\n    uint8 public decimals = 18;\n    uint256 public INITIAL_SUPPLY = 10000000000 ether;\n\n    constructor () public {\n    \ttotalSupply_ = INITIAL_SUPPLY;\n    \tIterableMapping.insert(balances, tx.origin, INITIAL_SUPPLY);\n    }\n    \n    function balancesStart() public view returns(uint256) {\n        return IterableMapping.iterate_start(balances);\n    }\n    \n    function balancesGetBool(uint256 num) public view returns(bool){\n        return IterableMapping.iterate_valid(balances, num);\n    }\n    \n    function balancesGetNext(uint256 num) public view returns(uint256) {\n        return IterableMapping.iterate_next(balances, num);\n    }\n    \n    function balancesGetValue(uint256 num) public view returns(address, uint256) {\n        address key;                           \n        uint256 value;                         \n        (key, value) = IterableMapping.iterate_get(balances, num);\n        return (key, value);\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"balancesGetValue\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancesStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"balancesGetNext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"balancesGetBool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600460808190527f4e4553540000000000000000000000000000000000000000000000000000000060a090815262000040916005919062000169565b506040805180820190915260048082527f4e455354000000000000000000000000000000000000000000000000000000006020909201918252620000879160069162000169565b506007805460ff191660121790556b204fce5e3e25026110000000600855348015620000b257600080fd5b506008546003819055604080517fab517b4f000000000000000000000000000000000000000000000000000000008152600060048201523260248201526044810192909252517303c513ffbdbda34b4a66b3052fa5e0e6606e531b9163ab517b4f916064808301926020929190829003018186803b1580156200013457600080fd5b505af415801562000149573d6000803e3d6000fd5b505050506040513d60208110156200016057600080fd5b506200020e9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ac57805160ff1916838001178555620001dc565b82800160010185558215620001dc579182015b82811115620001dc578251825591602001919060010190620001bf565b50620001ea929150620001ee565b5090565b6200020b91905b80821115620001ea5760008155600101620001f5565b90565b61110e806200021e6000396000f3fe6080604052600436106100c65760e060020a600035046306fdde0381146100cb578063095ea7b31461015557806318160ddd146101a257806323b872dd146101c95780632ff2e9dc1461020c578063313ce56714610221578063661884631461024c57806370a08231146102855780637e0c5747146102b857806395d89b4114610305578063a9059cbb1461031a578063b8ba5c2014610353578063cf2adac814610368578063d1505c5d14610392578063d73dd623146103bc578063dd62ed3e146103f5575b600080fd5b3480156100d757600080fd5b506100e0610430565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561011a578181015183820152602001610102565b50505050905090810190601f1680156101475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016157600080fd5b5061018e6004803603604081101561017857600080fd5b50600160a060020a0381351690602001356104be565b604080519115158252519081900360200190f35b3480156101ae57600080fd5b506101b7610524565b60408051918252519081900360200190f35b3480156101d557600080fd5b5061018e600480360360608110156101ec57600080fd5b50600160a060020a0381358116916020810135909116906040013561052a565b34801561021857600080fd5b506101b7610929565b34801561022d57600080fd5b5061023661092f565b6040805160ff9092168252519081900360200190f35b34801561025857600080fd5b5061018e6004803603604081101561026f57600080fd5b50600160a060020a038135169060200135610938565b34801561029157600080fd5b506101b7600480360360208110156102a857600080fd5b5035600160a060020a0316610a27565b3480156102c457600080fd5b506102e2600480360360208110156102db57600080fd5b5035610abf565b60408051600160a060020a03909316835260208301919091528051918290030190f35b34801561031157600080fd5b506100e0610b5e565b34801561032657600080fd5b5061018e6004803603604081101561033d57600080fd5b50600160a060020a038135169060200135610bb9565b34801561035f57600080fd5b506101b7610eb9565b34801561037457600080fd5b506101b76004803603602081101561038b57600080fd5b5035610f3f565b34801561039e57600080fd5b5061018e600480360360208110156103b557600080fd5b5035610f9c565b3480156103c857600080fd5b5061018e600480360360408110156103df57600080fd5b50600160a060020a038135169060200135610ff9565b34801561040157600080fd5b506101b76004803603604081101561041857600080fd5b50600160a060020a0381358116916020013516611092565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104b65780601f1061048b576101008083540402835291602001916104b6565b820191906000526020600020905b81548152906001019060200180831161049957829003601f168201915b505050505081565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035490565b6040805160e160020a63262f0e57028152600060048201819052600160a060020a038616602483015291517303c513ffbdbda34b4a66b3052fa5e0e6606e531b91634c5e1cae916044808301926020929190829003018186803b15801561059057600080fd5b505af41580156105a4573d6000803e3d6000fd5b505050506040513d60208110156105ba57600080fd5b50518211156105c857600080fd5b600160a060020a03841660009081526004602090815260408083203384529091529020548211156105f857600080fd5b600160a060020a038316151561060d57600080fd5b7303c513ffbdbda34b4a66b3052fa5e0e6606e531b63ab517b4f6000866106d3867303c513ffbdbda34b4a66b3052fa5e0e6606e531b634c5e1cae60008c6040518363ffffffff1660e060020a0281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561069b57600080fd5b505af41580156106af573d6000803e3d6000fd5b505050506040513d60208110156106c557600080fd5b50519063ffffffff6110bd16565b6040518463ffffffff1660e060020a0281526004018084815260200183600160a060020a0316600160a060020a03168152602001828152602001935050505060206040518083038186803b15801561072a57600080fd5b505af415801561073e573d6000803e3d6000fd5b505050506040513d602081101561075457600080fd5b50506040805160e160020a63262f0e57028152600060048201819052600160a060020a038616602483015291517303c513ffbdbda34b4a66b3052fa5e0e6606e531b9263ab517b4f92909187916108079188918791634c5e1cae91604480820192602092909190829003018186803b1580156107cf57600080fd5b505af41580156107e3573d6000803e3d6000fd5b505050506040513d60208110156107f957600080fd5b50519063ffffffff6110cf16565b6040518463ffffffff1660e060020a0281526004018084815260200183600160a060020a0316600160a060020a03168152602001828152602001935050505060206040518083038186803b15801561085e57600080fd5b505af4158015610872573d6000803e3d6000fd5b505050506040513d602081101561088857600080fd5b5050600160a060020a03841660009081526004602090815260408083203384529091529020546108be908363ffffffff6110bd16565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60085481565b60075460ff1681565b336000908152600460209081526040808320600160a060020a038616845290915281205480831061098c57336000908152600460209081526040808320600160a060020a03881684529091528120556109c1565b61099c818463ffffffff6110bd16565b336000908152600460209081526040808320600160a060020a03891684529091529020555b336000818152600460209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6040805160e160020a63262f0e57028152600060048201819052600160a060020a038416602483015291517303c513ffbdbda34b4a66b3052fa5e0e6606e531b91634c5e1cae916044808301926020929190829003018186803b158015610a8d57600080fd5b505af4158015610aa1573d6000803e3d6000fd5b505050506040513d6020811015610ab757600080fd5b505192915050565b6000806000807303c513ffbdbda34b4a66b3052fa5e0e6606e531b6375a3e8e86000876040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050604080518083038186803b158015610b1f57600080fd5b505af4158015610b33573d6000803e3d6000fd5b505050506040513d6040811015610b4957600080fd5b50805160209091015190945092505050915091565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104b65780601f1061048b576101008083540402835291602001916104b6565b6040805160e160020a63262f0e5702815260006004820181905233602483015291517303c513ffbdbda34b4a66b3052fa5e0e6606e531b91634c5e1cae916044808301926020929190829003018186803b158015610c1657600080fd5b505af4158015610c2a573d6000803e3d6000fd5b505050506040513d6020811015610c4057600080fd5b5051821115610c4e57600080fd5b600160a060020a0383161515610c6357600080fd5b7303c513ffbdbda34b4a66b3052fa5e0e6606e531b63ab517b4f600033610cf1867303c513ffbdbda34b4a66b3052fa5e0e6606e531b634c5e1cae6000336040518363ffffffff1660e060020a0281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561069b57600080fd5b6040518463ffffffff1660e060020a0281526004018084815260200183600160a060020a0316600160a060020a03168152602001828152602001935050505060206040518083038186803b158015610d4857600080fd5b505af4158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b50506040805160e160020a63262f0e57028152600060048201819052600160a060020a038616602483015291517303c513ffbdbda34b4a66b3052fa5e0e6606e531b9263ab517b4f9290918791610ded9188918791634c5e1cae91604480820192602092909190829003018186803b1580156107cf57600080fd5b6040518463ffffffff1660e060020a0281526004018084815260200183600160a060020a0316600160a060020a03168152602001828152602001935050505060206040518083038186803b158015610e4457600080fd5b505af4158015610e58573d6000803e3d6000fd5b505050506040513d6020811015610e6e57600080fd5b5050604080518381529051600160a060020a0385169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b60007303c513ffbdbda34b4a66b3052fa5e0e6606e531b63a21ab71660006040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015610f0e57600080fd5b505af4158015610f22573d6000803e3d6000fd5b505050506040513d6020811015610f3857600080fd5b5051905090565b60007303c513ffbdbda34b4a66b3052fa5e0e6606e531b6388d044376000846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015610a8d57600080fd5b60007303c513ffbdbda34b4a66b3052fa5e0e6606e531b63c8fccc696000846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015610a8d57600080fd5b336000908152600460209081526040808320600160a060020a038616845290915281205461102d908363ffffffff6110cf16565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b6000828211156110c957fe5b50900390565b818101828110156110dc57fe5b9291505056fea165627a7a72305820caf1607933189193333093ae5321813a10ebc423ab81622940e9de7df6f4547b0029"
}