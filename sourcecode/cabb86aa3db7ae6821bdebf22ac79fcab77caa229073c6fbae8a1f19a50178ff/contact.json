{
  "address": "0x66ffaace6abfc6916b105eb79774bcd5402fcbb2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DBE",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-13\n*/\n\npragma solidity ^0.5.5;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n}\ncontract DBE is SafeMath{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\taddress payable public owner;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n\tmapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor (\n        uint256 initialSupply,\n        string memory tokenName,\n        uint8 decimalUnits,\n        string memory tokenSymbol\n        ) public{\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n\t\towner = msg.sender;\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) public\n    returns (bool success){\n        require (_to != address(0x0));                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (_value > 0) ; \n        require (balanceOf[msg.sender] >= _value) ;           // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]) ; // Check for overflows\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n        return true;\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n\t\trequire(_value > 0) ; \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n       \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success) {\n        require (_to != address(0x0)) ;                                // Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (_value > 0) ; \n        require (balanceOf[_from] >= _value) ;                 // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]) ;  // Check for overflows\n        require (_value <= allowance[_from][msg.sender]) ;     // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value)public returns (bool success) {\n        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough\n\t\trequire (_value > 0) ; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction freeze(uint256 _value)public returns (bool success) {\n        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough\n\t\trequire (_value > 0) ; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n        emit Freeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction unfreeze(uint256 _value)public returns (bool success) {\n        require (freezeOf[msg.sender] >= _value) ;            // Check if the sender has enough\n\t\trequire (_value > 0) ; \n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n        emit Unfreeze(msg.sender, _value);\n        return true;\n    }\n\t\n\t// transfer balance to owner\n\tfunction withdrawEther(uint256 amount) public {\n\t\trequire(msg.sender == owner);\n\t\towner.transfer(amount);\n\t}\n\t\n\t// can accept ether\n\tfunction() external payable  {\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405162000d1938038062000d19833981018060405260808110156200003757600080fd5b8151602083018051919392830192916401000000008111156200005957600080fd5b820160208101848111156200006d57600080fd5b81516401000000008111828201871017156200008857600080fd5b50506020820151604090920180519194929391640100000000811115620000ae57600080fd5b82016020810184811115620000c257600080fd5b8151640100000000811182820187101715620000dd57600080fd5b50503360009081526005602090815260408220899055600389905587519295506200010f945090925086019062000156565b5080516200012590600190602084019062000156565b50506002805460ff90921660ff199092169190911790555050600480546001600160a01b03191633179055620001fb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019957805160ff1916838001178555620001c9565b82800160010185558215620001c9579182015b82811115620001c9578251825591602001919060010190620001ac565b50620001d7929150620001db565b5090565b620001f891905b80821115620001d75760008155600101620001e2565b90565b610b0e806200020b6000396000f3fe6080604052600436106100e85760003560e01c80636623fc461161008a578063a9059cbb11610059578063a9059cbb1461034d578063cd4217c114610386578063d7a78db8146103b9578063dd62ed3e146103e3576100e8565b80636623fc46146102aa57806370a08231146102d45780638da5cb5b1461030757806395d89b4114610338576100e8565b806323b872dd116100c657806323b872dd146101e8578063313ce5671461022b5780633bed33ce1461025657806342966c6814610280576100e8565b806306fdde03146100ea578063095ea7b31461017457806318160ddd146101c1575b005b3480156100f657600080fd5b506100ff61041e565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b506101ad6004803603604081101561019757600080fd5b506001600160a01b0381351690602001356104ac565b604080519115158252519081900360200190f35b3480156101cd57600080fd5b506101d66104e8565b60408051918252519081900360200190f35b3480156101f457600080fd5b506101ad6004803603606081101561020b57600080fd5b506001600160a01b038135811691602081013590911690604001356104ee565b34801561023757600080fd5b50610240610688565b6040805160ff9092168252519081900360200190f35b34801561026257600080fd5b506100e86004803603602081101561027957600080fd5b5035610691565b34801561028c57600080fd5b506101ad600480360360208110156102a357600080fd5b50356106e6565b3480156102b657600080fd5b506101ad600480360360208110156102cd57600080fd5b5035610786565b3480156102e057600080fd5b506101d6600480360360208110156102f757600080fd5b50356001600160a01b031661083f565b34801561031357600080fd5b5061031c610851565b604080516001600160a01b039092168252519081900360200190f35b34801561034457600080fd5b506100ff610860565b34801561035957600080fd5b506101ad6004803603604081101561037057600080fd5b506001600160a01b0381351690602001356108ba565b34801561039257600080fd5b506101d6600480360360208110156103a957600080fd5b50356001600160a01b03166109c4565b3480156103c557600080fd5b506101ad600480360360208110156103dc57600080fd5b50356109d6565b3480156103ef57600080fd5b506101d66004803603604081101561040657600080fd5b506001600160a01b0381358116916020013516610a8f565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a45780601f10610479576101008083540402835291602001916104a4565b820191906000526020600020905b81548152906001019060200180831161048757829003601f168201915b505050505081565b60008115156104ba57600080fd5b503360009081526007602090815260408083206001600160a01b039590951683529390529190912055600190565b60035481565b60006001600160a01b038316151561050557600080fd5b81151561051157600080fd5b6001600160a01b03841660009081526005602052604090205482111561053657600080fd5b6001600160a01b038316600090815260056020526040902054828101101561055d57600080fd5b6001600160a01b038416600090815260076020908152604080832033845290915290205482111561058d57600080fd5b6001600160a01b0384166000908152600560205260409020546105b09083610aac565b6001600160a01b0380861660009081526005602052604080822093909355908516815220546105df9083610abe565b6001600160a01b03808516600090815260056020908152604080832094909455918716815260078252828120338252909152205461061d9083610aac565b6001600160a01b03808616600081815260076020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60025460ff1681565b6004546001600160a01b031633146106a857600080fd5b6004546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156106e2573d6000803e3d6000fd5b5050565b3360009081526005602052604081205482111561070257600080fd5b81151561070e57600080fd5b336000908152600560205260409020546107289083610aac565b336000908152600560205260409020556003546107459083610aac565b60035560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b336000908152600660205260408120548211156107a257600080fd5b8115156107ae57600080fd5b336000908152600660205260409020546107c89083610aac565b336000908152600660209081526040808320939093556005905220546107ee9083610abe565b33600081815260056020908152604091829020939093558051858152905191927f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f92918290030190a2506001919050565b60056020526000908152604090205481565b6004546001600160a01b031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a45780601f10610479576101008083540402835291602001916104a4565b60006001600160a01b03831615156108d157600080fd5b8115156108dd57600080fd5b336000908152600560205260409020548211156108f957600080fd5b6001600160a01b038316600090815260056020526040902054828101101561092057600080fd5b3360009081526005602052604090205461093a9083610aac565b33600090815260056020526040808220929092556001600160a01b038516815220546109669083610abe565b6001600160a01b0384166000818152600560209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60066020526000908152604090205481565b336000908152600560205260408120548211156109f257600080fd5b8115156109fe57600080fd5b33600090815260056020526040902054610a189083610aac565b33600090815260056020908152604080832093909355600690522054610a3e9083610abe565b33600081815260066020908152604091829020939093558051858152905191927ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e092918290030190a2506001919050565b600760209081526000928352604080842090915290825290205481565b600082821115610ab857fe5b50900390565b6000828201838110801590610ad35750828110155b1515610adb57fe5b939250505056fea165627a7a72305820f9d717bbb1f80fed9029b401fcb49d47445a74cc08b8f9b595159274f8f0217200290000000000000000000000000000000000000000180de64b9660b7a5754800000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000011446973747269627574656420456172746800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034442450000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000180de64b9660b7a5754800000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000011446973747269627574656420456172746800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034442450000000000000000000000000000000000000000000000000000000000"
}