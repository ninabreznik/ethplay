{
  "address": "0x144c7c154fd9952217ac98d06f9bf9fce64d1fd7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DIGC",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-10\n*/\n\npragma solidity ^0.4.23;\n// sol token\n// \n// Rui-Shan Lu Team\n// Lursun <[emailÂ protected]>\n// reference https://ethereum.org/token\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract TokenERC20 is owned {\n    mapping (address => bool ) public freeAccount;\n    bool public locked = true;\n    address public deployer;\n    // Public variables of the token\n    string public name =\"DigminerCoin\";\n    string public symbol = \"DIGC\";\n    uint8 public decimals = 4;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n    \n    \n    \n    modifier m_locked {\n        require(!locked || freeAccount[msg.sender]);\n        _;\n    }\n\n    function changeLocked() onlyOwner public {\n        locked = false;\n    }\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20() public {\n        deployer = msg.sender;\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) m_locked public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowance[_from][msg.sender] >= _value);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) m_locked public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is TokenERC20 {\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken() TokenERC20() public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require(balanceOf[_from] >= _value);               // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    // function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n    //     uint tempSupply = totalSupply;\n    //     balanceOf[target] += mintedAmount;\n    //     totalSupply += mintedAmount;\n    //     require(totalSupply >= tempSupply);\n    //     Transfer(0, this, mintedAmount);\n    //     Transfer(this, target, mintedAmount);\n    // }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function () payable public {\n        require(false);\n    }\n\n}\n\ncontract DIGC is MyAdvancedToken {\n    mapping(address => uint) public lockdate;\n    mapping(address => uint) public lockTokenBalance;\n\n    event LockToken(address account, uint amount, uint unixtime);\n\n    function DIGC(address[] targets, uint[] initBalances) MyAdvancedToken() public {\n        require(targets.length == initBalances.length);\n        uint _totalSupply = 0;\n        for(uint i = 0;i < targets.length; i++) {\n            freeAccount[targets[i]] = true;\n            balanceOf[targets[i]] = initBalances[i];\n            _totalSupply += initBalances[i];\n        }\n        totalSupply = _totalSupply;\n    }\n    function getLockBalance(address account) internal returns(uint) {\n        if(now >= lockdate[account]) {\n            lockdate[account] = 0;\n            lockTokenBalance[account] = 0;\n        }\n        return lockTokenBalance[account];\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        uint usableBalance = balanceOf[_from] - getLockBalance(_from);\n        require(balanceOf[_from] >= usableBalance);\n        require(_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\n        require(usableBalance >= _value);                   // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n\n    function lockTokenToDate(address account, uint amount, uint unixtime) onlyOwner public {\n        require(unixtime >= lockdate[account]);\n        require(unixtime >= now);\n        if(balanceOf[account] >= amount) {\n            lockdate[account] = unixtime;\n            lockTokenBalance[account] = amount;\n            emit LockToken(account, amount, unixtime);\n        }\n    }\n\n    function lockTokenDays(address account, uint amount, uint _days) public {\n        uint unixtime = _days * 1 days + now;\n        lockTokenToDate(account, amount, unixtime);\n    }\n\n     /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\n        uint usableBalance = balanceOf[msg.sender] - getLockBalance(msg.sender);\n        require(balanceOf[msg.sender] >= usableBalance);\n        require(usableBalance >= _value);           // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000043532b185d769324404d1e7c6fea84d700b91140000000000000000000000000641bf8ce031be267ec536120a72aed97ea84b17700000000000000000000000071abbaecabcecc4e5583fb802a24f2b0b453e94f0000000000000000000000000a5149b07500a0c3506a686302116c3baa3fb24b000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000145f680b0000000000000000000000000000000000000000000000000000000004f299448000000000000000000000000000000000000000000000000000000002e90edd0000000000000000000000000000000000000000000000000000000000df8475800"
}