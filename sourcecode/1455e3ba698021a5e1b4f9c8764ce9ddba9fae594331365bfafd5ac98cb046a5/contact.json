{
  "address": "0x63a389435f370f8aec9ddb179483bdf16d189d1c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fusion",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-28\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/openzeppelin-solidity/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: contracts/openzeppelin-solidity/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/openzeppelin-solidity/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts/openzeppelin-solidity/introspection/SupportsInterfaceWithLookup.sol\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: contracts/openzeppelin-solidity/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/ERC721TokenWithData.sol\n\n// import \"./ERC721SlimTokenArray.sol\";\n\n\n\n// an ERC721 token with additional data storage,\ncontract ERC721TokenWithData is ERC721Token(\"CryptoAssaultUnit\", \"CAU\"), Ownable {\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n\tfunction isApprovedOrOwner(\n\t\taddress _spender,\n\t\tuint256 _tokenId\n\t)\n\t\tinternal\n\t\tview\n\t\treturns (bool)\n\t{\n\t\taddress owner = ownerOf(_tokenId);\n\t\t// Disable solium check because of\n\t\t// https://github.com/duaraghav8/Solium/issues/175\n\t\t// solium-disable-next-line operator-whitespace\n\t\treturn (\n\t\t\t_spender == owner ||\n\t\t\tapprovedContractAddresses[_spender] ||\n\t\t\tgetApproved(_tokenId) == _spender ||\n\t\t\tisApprovedForAll(owner, _spender)\n\t\t);\n\t}\n\n\tmapping (address => bool) internal approvedContractAddresses;\n\tbool approvedContractsFinalized = false;\n\n\t/**\n\t* @notice Approve a contract address for minting tokens and transferring tokens, when approved by the owner\n\t* @param contractAddress The address that will be approved\n\t*/\n\tfunction addApprovedContractAddress(address contractAddress) public onlyOwner\n\t{\n\t\trequire(!approvedContractsFinalized);\n\t\tapprovedContractAddresses[contractAddress] = true;\n\t}\n\n\t/**\n\t* @notice Unapprove a contract address for minting tokens and transferring tokens\n\t* @param contractAddress The address that will be unapproved\n\t*/\n\tfunction removeApprovedContractAddress(address contractAddress) public onlyOwner\n\t{\n\t\trequire(!approvedContractsFinalized);\n\t\tapprovedContractAddresses[contractAddress] = false;\n\t}\n\n\t/**\n\t* @notice Finalize the contract so it will be forever impossible to change the approved contracts list\n\t*/\n\tfunction finalizeApprovedContracts() public onlyOwner {\n\t\tapprovedContractsFinalized = true;\n\t}\n\n\tmapping(uint256 => mapping(uint256 => uint256)) data;\n\n\tfunction getData(uint256 _tokenId, uint256 _index) public view returns (uint256) {\n\t\treturn data[_index][_tokenId];\n\t}\n\n\tfunction getData3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _index) public view returns (uint256, uint256, uint256) {\n\t\treturn (\n\t\t\tdata[_index][_tokenId1],\n\t\t\tdata[_index][_tokenId2],\n\t\t\tdata[_index][_tokenId3]\n\t\t);\n\t}\n\t\n\tfunction getDataAndOwner3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _index) public view returns (uint256, uint256, uint256, address, address, address) {\n\t\treturn (\n\t\t\tdata[_index][_tokenId1],\n\t\t\tdata[_index][_tokenId2],\n\t\t\tdata[_index][_tokenId3],\n\t\t\townerOf(_tokenId1),\n\t\t\townerOf(_tokenId2),\n\t\t\townerOf(_tokenId3)\n\t\t);\n\t}\n\t\n\tfunction _setData(uint256 _tokenId, uint256 _index, uint256 _data) internal {\n\t\t\n\t\tdata[_index][_tokenId] = _data;\n\t}\n\n\tfunction setData(uint256 _tokenId, uint256 _index, uint256 _data) public {\n\t\t\n\t\trequire(approvedContractAddresses[msg.sender], \"not an approved sender\");\n\t\tdata[_index][_tokenId] = _data;\n\t}\n\n\t/**\n\t* @notice Gets the list of tokens owned by a given address\n\t* @param _owner address to query the tokens of\n\t* @return uint256[] representing the list of tokens owned by the passed address\n\t*/\n\tfunction tokensOfWithData(address _owner, uint256 _index) public view returns (uint256[], uint256[]) {\n\t\tuint256[] memory tokensList = ownedTokens[_owner];\n\t\tuint256[] memory dataList = new uint256[](tokensList.length);\n\t\tfor (uint i=0; i<tokensList.length; i++) {\n\t\t\tdataList[i] = data[_index][tokensList[i]];\n\t\t}\n\t\treturn (tokensList, dataList);\n\t}\n\n\t// The tokenId of the next minted token. It auto-increments.\n\tuint256 nextTokenId = 1;\n\n\tfunction getNextTokenId() public view returns (uint256) {\n\t\treturn nextTokenId;\n\t}\n\n\t/**\n\t* @notice Mint token function\n\t* @param _to The address that will own the minted token\n\t*/\n\tfunction mintAndSetData(address _to, uint256 _data) public returns (uint256) {\n\n\t\trequire(approvedContractAddresses[msg.sender], \"not an approved sender\");\n\n\t\tuint256 tokenId = nextTokenId;\n\t\tnextTokenId++;\n\t\t_mint(_to, tokenId);\n\t\t_setData(tokenId, 0, _data);\n\n\t\treturn tokenId;\n\t}\n\n\tfunction burn(uint256 _tokenId) public {\n\t\trequire(\n\t\t\tapprovedContractAddresses[msg.sender] ||\n\t\t\tmsg.sender == owner, \"burner not approved\"\n\t\t);\n\n\t\t_burn(ownerOf(_tokenId), _tokenId);\n\t}\n\t\n\tfunction burn3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) public {\n\t\trequire(\n\t\t\tapprovedContractAddresses[msg.sender] ||\n\t\t\tmsg.sender == owner, \"burner not approved\"\n\t\t);\n\n\t\t_burn(ownerOf(_tokenId1), _tokenId1);\n\t\t_burn(ownerOf(_tokenId2), _tokenId2);\n\t\t_burn(ownerOf(_tokenId3), _tokenId3);\n\t}\n}\n\n// File: contracts/strings/Strings.sol\n\nlibrary Strings {\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n// File: contracts/Token.sol\n\ncontract Token is ERC721TokenWithData {\n\n\tstring metadataUrlPrefix = \"https://metadata.cryptoassault.io/unit/\";\n\n\t/**\n\t* @dev Returns an URI for a given token ID\n\t* Throws if the token ID does not exist. May return an empty string.\n\t* @param _tokenId uint256 ID of the token to query\n\t*/\n\tfunction tokenURI(uint256 _tokenId) public view returns (string) {\n\t\trequire(exists(_tokenId));\n\t\treturn Strings.strConcat(metadataUrlPrefix, Strings.uint2str(_tokenId));\n\t}\n\n\tfunction setMetadataUrlPrefix(string _metadataUrlPrefix) public onlyOwner\n\t{\n\t\tmetadataUrlPrefix = _metadataUrlPrefix;\n\t}\n}\n\n// File: contracts/openzeppelin-solidity/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts/Fusion.sol\n\ncontract Fusion is Pausable {\n\n\tevent Fused(uint32 unit1, uint32 unit2, uint32 unit3, uint256 price);\n\tevent FinishedFusing(uint32 unit1, uint32 unit2, uint32 unit3, uint32 newUnit);\n\n\tToken token;\n\n\tfunction setTokenContractAddress(address newAddress) onlyOwner public {\n\t\ttoken = Token(newAddress);\n\t}\n\n\tstruct WaitingToFuse {\n\t\taddress owner;\n\t\tuint32 unit1;\n\t\tuint32 unit2;\n\t\tuint32 unit3;\n\t\tuint48 fusedOnBlockNumber;\n\t\t//TODO: maybe fit into 256 bits\n\t}\n\tmapping (uint256 => WaitingToFuse) waitingToFuse; // This is a LIFO stack.\n\n\tuint64 waitingToFuseNum = 0;\n\tuint64 waitingToFuseFirstIndex = 0;\n\tuint64 fuseNonce = 1;\n\n\tuint256 fusePrice = 0.005 ether;\n\n\tfunction withdrawBalance() onlyOwner public {\n\t\towner.transfer(address(this).balance);\n\t}\n\n\tfunction setFusePrice(uint256 price) public onlyOwner {\n\t\tfusePrice = price;\n\t}\n\n\tfunction pushFuse(uint32 unit1, uint32 unit2, uint32 unit3) private {\n\n\t\twaitingToFuse[waitingToFuseFirstIndex + waitingToFuseNum] = WaitingToFuse(msg.sender, unit1, unit2, unit3, uint48(block.number));\n\t\twaitingToFuseNum = waitingToFuseNum + 1;\n\t}\n\n\tfunction popFuse() private {\n\n\t\trequire(waitingToFuseNum > 0, \"trying to popFuse() an empty stack\");\n\t\twaitingToFuseNum = waitingToFuseNum - 1;\n\t\tif (waitingToFuseNum == 0) {\n\t\t\twaitingToFuseFirstIndex = 0;\n\t\t} else {\n\t\t\twaitingToFuseFirstIndex++;\n\t\t}\n\t}\n\n\tfunction peekFuse() private view returns (WaitingToFuse) {\n\n\t\treturn waitingToFuse[waitingToFuseFirstIndex];\n\t}\n\n\tfunction fuse(uint32 unit1, uint32 unit2, uint32 unit3) external payable whenNotPaused {\n\n\t\trequire(msg.value == fusePrice, \"Price doesnt match the amount payed\");\n\n\t\taddress owner1;\n\t\taddress owner2;\n\t\taddress owner3;\n\t\tuint256 data1;\n\t\tuint256 data2;\n\t\tuint256 data3;\n\t\t(data1, data2, data3, owner1, owner2, owner3) = token.getDataAndOwner3(unit1, unit2, unit3, 0);\n\n\t\trequire(msg.sender == owner1, \"not the owner\");\n\t\trequire(msg.sender == owner2, \"not the owner\");\n\t\trequire(msg.sender == owner3, \"not the owner\");\n\n\t\tuint256 category1 = ((data1 >> 248) & 0xff) / 6;\n\t\tuint256 category2 = ((data2 >> 248) & 0xff) / 6;\n\t\tuint256 category3 = ((data3 >> 248) & 0xff) / 6;\n\t\trequire(\n\t\t\tcategory1 == category2 &&\n\t\t\tcategory1 == category3,\n\t\t\t\"categories don't match\"\n\t\t);\n\n\t\tuint256 tier1 = (data1 >> 244) & 0x0f;\n\t\t// uint256 tier2 = (data2 >> 244) & 0x0f;\n\t\t// uint256 tier3 = (data3 >> 244) & 0x0f;\n\t\trequire(\n\t\t\t(tier1 == (data2 >> 244) & 0x0f) &&\n\t\t\t(tier1 == (data3 >> 244) & 0x0f),\n\t\t\t\"tiers don't match\"\n\t\t);\n\t\trequire (tier1 <= 2, \"4 is the maximum tier\");\n\n\t\t// burn the tokens.\n\t\t// their data will still be used though.\n\t\ttoken.burn3(unit1, unit2, unit3);\n\n\t\tpushFuse(unit1, unit2, unit3);\n\n\t\temit Fused(unit1, unit2, unit3, fusePrice);\n\t}\n\n\tfunction getProjectedBlockHash(uint256 blockNumber) internal view returns (uint256) {\n\n\t\tuint256 blockToHash = blockNumber;\n\t\tuint256 blocksAgo = block.number - blockToHash;\n\t\tblockToHash += ((blocksAgo-1) / 256) * 256;\n\t\treturn uint256(blockhash(blockToHash));\n\t}\n\n\tfunction fusionsNeeded() external view returns (uint256) {\n\n\t\treturn waitingToFuseNum;\n\t}\n\n\tfunction getRandomRarity(uint256 data1, uint256 data2, uint256 data3, uint16 rarityRand) internal pure returns (uint256, uint256) {\n\n\t\tuint256 rarityPattern = 0;\n\t\trarityPattern += 1 << (((data1 >> 216) & 0x0f) * 4);\n\t\trarityPattern += 1 << (((data2 >> 216) & 0x0f) * 4);\n\t\trarityPattern += 1 << (((data3 >> 216) & 0x0f) * 4);\n\n\t\tint256 rarity;\n\t\tint256 lowestParentRarity;\n\n\t\tif (rarityPattern == 0x0003) {\n\t\t\trarity = 0;\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x0030) {\n\t\t\trarity = 1;\n\t\t\tlowestParentRarity = 1;\n\t\t}\n\t\telse if (rarityPattern == 0x0300) {\n\t\t\trarity = 2;\n\t\t\tlowestParentRarity = 2;\n\t\t}\n\t\telse if (rarityPattern == 0x3000) {\n\t\t\trarity = 3;\n\t\t\tlowestParentRarity = 3;\n\t\t}\n\t\telse if (rarityPattern == 0x0111) {\n\t\t\trarity = (rarityRand < 21845) ? 0 : ((rarityRand < 43691) ? 1 : 2);\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x1110) {\n\t\t\trarity = (rarityRand < 21845) ? 1 : ((rarityRand < 43691) ? 2 : 3);\n\t\t\tlowestParentRarity = 1;\n\t\t}\n\t\telse if (rarityPattern == 0x1011) {\n\t\t\trarity = (rarityRand < 10923) ? 0 : ((rarityRand < 36409) ? 1 : ((rarityRand < 54613) ? 2 : 3));\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x1101) {\n\t\t\trarity = (rarityRand < 10923) ? 0 : ((rarityRand < 29127) ? 1 : ((rarityRand < 54613) ? 2 : 3));\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x2001) {\n\t\t\trarity = (rarityRand < 10923) ? 0 : ((rarityRand < 25486) ? 1 : ((rarityRand < 43691) ? 2 : 3));\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x1002) {\n\t\t\trarity = (rarityRand < 21845) ? 0 : ((rarityRand < 40050) ? 1 : ((rarityRand < 54613) ? 2 : 3));\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x2010) {\n\t\t\trarity = (rarityRand < 14564) ? 1 : ((rarityRand < 36409) ? 2 : 3);\n\t\t\tlowestParentRarity = 1;\n\t\t}\n\t\telse if (rarityPattern == 0x0201) {\n\t\t\trarity = (rarityRand < 14564) ? 0 : ((rarityRand < 36409) ? 1 : 2);\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x0102) {\n\t\t\trarity = (rarityRand < 29127) ? 0 : ((rarityRand < 50972) ? 1 : 2);\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x1020) {\n\t\t\trarity = (rarityRand < 29127) ? 1 : ((rarityRand < 50972) ? 2 : 3);\n\t\t\tlowestParentRarity = 1;\n\t\t}\n\t\telse if (rarityPattern == 0x0012) {\n\t\t\trarity = (rarityRand < 43691) ? 0 : 1;\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x0021) {\n\t\t\trarity = (rarityRand < 43691) ? 1 : 0;\n\t\t\tlowestParentRarity = 0;\n\t\t}\n\t\telse if (rarityPattern == 0x0120) {\n\t\t\trarity = (rarityRand < 43691) ? 1 : 2;\n\t\t\tlowestParentRarity = 1;\n\t\t}\n\t\telse if (rarityPattern == 0x0210) {\n\t\t\trarity = (rarityRand < 43691) ? 2 : 1;\n\t\t\tlowestParentRarity = 1;\n\t\t}\n\t\telse if (rarityPattern == 0x1200) {\n\t\t\trarity = (rarityRand < 43691) ? 2 : 3;\n\t\t\tlowestParentRarity = 2;\n\t\t}\n\t\telse if (rarityPattern == 0x2100) {\n\t\t\trarity = (rarityRand < 43691) ? 3 : 2;\n\t\t\tlowestParentRarity = 2;\n\t\t}\n\t\telse {\n\t\t\trequire(false, \"invalid rarity pattern\");//TODO: remove this\n\t\t\trarity = 0;\n\t\t}\n\n\t\t// Apply the penalty for when the child rarity is higher than the lowest parent rarity:\n\t\t// child is 3 rarities higher: 0.85\n\t\t// child is 2 rarities higher: 0.89\n\t\t// child is 1 rarity higher: 0.95\n\t\tint256 rarityDifference = rarity - lowestParentRarity;\n\t\tuint256 penalty;\n\t\tif (rarityDifference == 3) {\n\t\t\tpenalty = 55705;\n\t\t} \n\t\telse if (rarityDifference == 2) {\n\t\t\tpenalty = 58327;\n\t\t} \n\t\telse if (rarityDifference == 1) {\n\t\t\tpenalty = 62259;\n\t\t} \n\t\telse {\n\t\t\tpenalty = 65536;\n\t\t} \n\n\t\treturn (uint256(rarity), penalty);\n\t}\n\n\tfunction getOldestBirthTimestamp(uint256 data1, uint256 data2, uint256 data3) internal pure returns (uint256)\n\t{\n\t\tuint256 oldestBirthTimestamp = ((data1 >> 220) & 0xffffff);\n\t\tuint256 birthTimestamp2 = ((data2 >> 220) & 0xffffff);\n\t\tuint256 birthTimestamp3 = ((data3 >> 220) & 0xffffff);\n\t\tif (birthTimestamp2 < oldestBirthTimestamp) oldestBirthTimestamp = birthTimestamp2;\n\t\tif (birthTimestamp3 < oldestBirthTimestamp) oldestBirthTimestamp = birthTimestamp3;\n\t\treturn oldestBirthTimestamp;\n\t}\n\n\tfunction finishFusion() external whenNotPaused {\n\n\t\trequire(waitingToFuseNum > 0, \"nothing to fuse\");\n\n\t\tWaitingToFuse memory w = peekFuse();\n\t\t\n\t\t// can't fuse on the same block. its block hash would be unknown.\n\t\trequire(w.fusedOnBlockNumber < block.number, \"Can't fuse on the same block.\");\n\n\t\tuint256 rand = uint256(keccak256(abi.encodePacked(getProjectedBlockHash(w.fusedOnBlockNumber))));\n\n\t\tuint256 data1;\n\t\tuint256 data2;\n\t\tuint256 data3;\n\t\t(data1, data2, data3) = token.getData3(w.unit1, w.unit2, w.unit3, 0);\n\n\t\tuint256 data = 0;\n\t\tdata |= ((data1 >> 248) & 0xff) << 248; // type\n\t\tdata |= (((data1 >> 244) & 0x0f) + 1) << 244; // tier\n\n\n\t\t// uint256 oldestBirthTimestamp = getOldestBirthTimestamp(data1, data2, data3);\n\n\t\t// Get the oldest birthday\n\t\t// uint256 oldestBirthTimestamp = ((data1 >> 220) & 0xffffff);\n\t\t// if (((data2 >> 220) & 0xffffff) < oldestBirthTimestamp) oldestBirthTimestamp = ((data2 >> 220) & 0xffffff);\n\t\t// if (((data3 >> 220) & 0xffffff) < oldestBirthTimestamp) oldestBirthTimestamp = ((data3 >> 220) & 0xffffff);\n\t\tdata |= getOldestBirthTimestamp(data1, data2, data3) << 220;\n\n\t\t(uint256 rarity, uint256 penalty) = getRandomRarity(data1, data2, data3, uint16(rand));\n\t\trand >>= 16;\n\n\t\tdata |= rarity << 216;\n\n\t\tdata |= ((data1 >> 208) & 0xff) << 208; // sku\n\n\t\t// Apply the penalty for fusing non-matching types:\n\t\t// 1 matching: 0.93\n\t\t// 0 matching: 0.88\n\t\tuint256 numMatchingTypes = 0;\n\t\tif ((((data1 >> 248) & 0xff) << 248) == (((data2 >> 248) & 0xff) << 248)) numMatchingTypes++;\n\t\tif ((((data1 >> 248) & 0xff) << 248) == (((data3 >> 248) & 0xff) << 248)) numMatchingTypes++;\n\t\tif (numMatchingTypes == 1)\n\t\t{\n\t\t\tpenalty = (penalty * 60948) / 65536; // *= 0.93\n\t\t}\n\t\telse if (numMatchingTypes == 0)\n\t\t{\n\t\t\tpenalty = (penalty * 57671) / 65536; // *= 0.88\n\t\t}\n\n\t\t// generate child stats\n\t\tfor (uint256 i=0; i<18; i++) {\n\t\t\tdata |= (((\n\t\t\t\t\t((data1 >> (200-i*8)) & 0xff) +\n\t\t\t\t\t((data2 >> (200-i*8)) & 0xff) +\n\t\t\t\t\t((data3 >> (200-i*8)) & 0xff)\n\t\t\t\t) * penalty // the penalty from mismatched types/rarities\n\t\t\t\t   * (63488 + (rand&0x3ff)) // a random penalty from 97% to 100%\n\t\t\t) / 0x300000000) << (200-i*8);\n\t\t\trand >>= 10;\n\t\t}\n\n\n\t\t// TODO: maybe re-use the unit1 token as the new fused unit, to save gas\n\t\tuint32 newUnit = uint32(token.mintAndSetData(w.owner, data));\n\n\t\tpopFuse();\n\n\t\temit FinishedFusing(w.unit1, w.unit2, w.unit3, newUnit);\n\t}\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setFusePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unit1\",\"type\":\"uint32\"},{\"name\":\"unit2\",\"type\":\"uint32\"},{\"name\":\"unit3\",\"type\":\"uint32\"}],\"name\":\"fuse\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fusionsNeeded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishFusion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"unit1\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"unit2\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"unit3\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Fused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"unit1\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"unit2\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"unit3\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"newUnit\",\"type\":\"uint32\"}],\"name\":\"FinishedFusing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000805460038054600160c060020a0319167001000000000000000000000000000000001790556611c37937e08000600455600160a860020a03191633179055611792806100536000396000f3006080604052600436106100a05763ffffffff60e060020a6000350416633f4ba83a81146100a55780635c975abb146100bc5780635faa6b23146100e55780635fd8c710146100fd5780636040e91814610112578063715018a61461012f5780638456cb59146101445780638b289879146101595780638da5cb5b14610180578063b23d4854146101b1578063d26920cf146101d2578063f2fde38b146101e7575b600080fd5b3480156100b157600080fd5b506100ba610208565b005b3480156100c857600080fd5b506100d161027e565b604080519115158252519081900360200190f35b3480156100f157600080fd5b506100ba60043561028e565b34801561010957600080fd5b506100ba6102aa565b6100ba63ffffffff600435811690602435811690604435166102ff565b34801561013b57600080fd5b506100ba610838565b34801561015057600080fd5b506100ba6108a4565b34801561016557600080fd5b5061016e61091f565b60408051918252519081900360200190f35b34801561018c57600080fd5b5061019561092f565b60408051600160a060020a039092168252519081900360200190f35b3480156101bd57600080fd5b506100ba600160a060020a036004351661093e565b3480156101de57600080fd5b506100ba610984565b3480156101f357600080fd5b506100ba600160a060020a0360043516610ea6565b600054600160a060020a0316331461021f57600080fd5b60005460a060020a900460ff16151561023757600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60005460a060020a900460ff1681565b600054600160a060020a031633146102a557600080fd5b600455565b600054600160a060020a031633146102c157600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f193505050501580156102fc573d6000803e3d6000fd5b50565b600080600080600080600080600080600060149054906101000a900460ff1615151561032a57600080fd5b60045434146103a9576040805160e560020a62461bcd02815260206004820152602360248201527f507269636520646f65736e74206d617463682074686520616d6f756e7420706160448201527f7965640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160009054906101000a9004600160a060020a0316600160a060020a0316632a0deab48e8e8e60006040518563ffffffff1660e060020a028152600401808563ffffffff1681526020018463ffffffff1681526020018363ffffffff16815260200182815260200194505050505060c060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b505050506040513d60c081101561045c57600080fd5b508051602082015160408301516060840151608085015160a090950151909e50939c50929a509098509650945033600160a060020a038b16146104e9576040805160e560020a62461bcd02815260206004820152600d60248201527f6e6f7420746865206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b33600160a060020a038a1614610549576040805160e560020a62461bcd02815260206004820152600d60248201527f6e6f7420746865206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b33600160a060020a038916146105a9576040805160e560020a62461bcd02815260206004820152600d60248201527f6e6f7420746865206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600660ff60f860020a890416049350600660ff60f860020a880416049250600660ff60f860020a87041604915082841480156105e457508184145b151561063a576040805160e560020a62461bcd02815260206004820152601660248201527f63617465676f7269657320646f6e2774206d6174636800000000000000000000604482015290519081900360640190fd5b50600f60f460020a80880482169190870416811480156106625750600f60f460020a86041681145b15156106b8576040805160e560020a62461bcd02815260206004820152601160248201527f746965727320646f6e2774206d61746368000000000000000000000000000000604482015290519081900360640190fd5b6002811115610711576040805160e560020a62461bcd02815260206004820152601560248201527f3420697320746865206d6178696d756d20746965720000000000000000000000604482015290519081900360640190fd5b600160009054906101000a9004600160a060020a0316600160a060020a0316639d248e088e8e8e6040518463ffffffff1660e060020a028152600401808463ffffffff1681526020018363ffffffff1681526020018263ffffffff1681526020019350505050600060405180830381600087803b15801561079157600080fd5b505af11580156107a5573d6000803e3d6000fd5b505050506107b48d8d8d610ec6565b7fe33e955549546adee4b93a8eccb1f9b2b0192b7d7539481fd55cced9657664d78d8d8d600454604051808563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff16815260200182815260200194505050505060405180910390a150505050505050505050505050565b600054600160a060020a0316331461084f57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146108bb57600080fd5b60005460a060020a900460ff16156108d257600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b60035467ffffffffffffffff1690565b600054600160a060020a031681565b600054600160a060020a0316331461095557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61098c611738565b600080600080600080600080600080600060149054906101000a900460ff161515156109b757600080fd5b600354600067ffffffffffffffff90911611610a1d576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f7468696e6720746f20667573650000000000000000000000000000000000604482015290519081900360640190fd5b610a25611045565b9a50438b6080015165ffffffffffff16101515610a8c576040805160e560020a62461bcd02815260206004820152601d60248201527f43616e27742066757365206f6e207468652073616d6520626c6f636b2e000000604482015290519081900360640190fd5b610aa18b6080015165ffffffffffff166110ee565b604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310610aef5780518252601f199092019160209182019101610ad0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190049950600160009054906101000a9004600160a060020a0316600160a060020a03166397306c278c602001518d604001518e6060015160006040518563ffffffff1660e060020a028152600401808563ffffffff1681526020018463ffffffff1681526020018363ffffffff168152602001828152602001945050505050606060405180830381600087803b158015610bb757600080fd5b505af1158015610bcb573d6000803e3d6000fd5b505050506040513d6060811015610be157600080fd5b5080516020820151604090920151909a50909850965060f860020a808a0460ff160260f460020a808b04600f166001010217955060dc610c228a8a8a611102565b9060020a0286179550610c378989898d611157565b62010000909b049a60ff7a010000000000000000000000000000000000000000000000000000808d048216027b01000000000000000000000000000000000000000000000000000000840299909917989098179791965094506000935060f860020a808b0482168102818b04909216021415610cb4576001909201915b60f860020a808a0460ff9081168202828a04919091169091021415610cda576001909201915b8260011415610cf4576201000061ee148502049350610d08565b821515610d08576201000061e14785020493505b600091505b6012821015610d67576008820260c803640300000000600282900a808c0460ff908116828d04821601918b041601860261f8006103ff8e160102610400909c049b60029290920a9104029590951794600190910190610d0d565b6001548b51604080517f6b3559e1000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018a905290519190921691636b3559e19160448083019260209291908290030181600087803b158015610dd857600080fd5b505af1158015610dec573d6000803e3d6000fd5b505050506040513d6020811015610e0257600080fd5b50519050610e0e6115a4565b7f5f35a68372238cec24e46cdac2c0a92c09ef335507a551c86e345128ee18af0a8b602001518c604001518d6060015184604051808563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff16815260200194505050505060405180910390a15050505050505050505050565b600054600160a060020a03163314610ebd57600080fd5b6102fc816116bb565b6040805160a08101825233815263ffffffff94851660208083019182529486168284019081529386166060830190815265ffffffffffff438116608085019081526003805468010000000000000000810467ffffffffffffffff90811691811691909101811660009081526002909a5296909820945185549451975193518a1660e060020a027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff948b167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff99909b1660a060020a0277ffffffff000000000000000000000000000000000000000019600160a060020a039390931673ffffffffffffffffffffffffffffffffffffffff199097169690961791909116949094179690961697909717161781559151600192830180549190951665ffffffffffff1990911617909355815480841690910190921667ffffffffffffffff19909216919091179055565b61104d611738565b5060035467ffffffffffffffff6801000000000000000090910416600090815260026020908152604091829020825160a0810184528154600160a060020a038116825263ffffffff60a060020a82048116948301949094527801000000000000000000000000000000000000000000000000810484169482019490945260e060020a90930490911660608301526001015465ffffffffffff16608082015290565b610100600019438390030181900402014090565b600062ffffff7b1000000000000000000000000000000000000000000000000000000080860482169181860481169185041682821015611140578192505b8281101561114c578092505b509095945050505050565b6000807b01000000000000000000000000000000000000000000000000000000808704600f9081166004908102600290810a848a0484168302820a019388049290921602900a018180808060038514156111b8576000935060009250611552565b84603014156111ce576001935060019250611552565b8461030014156111e5576002935060029250611552565b8461300014156111fc576003935060039250611552565b846101111415611240576155558861ffff161061122f5761aaab8861ffff161061122757600261122a565b60015b611232565b60005b60ff16935060009250611552565b846111101415611284576155558861ffff16106112735761aaab8861ffff161061126b57600361126e565b60025b611276565b60015b60ff16935060019250611552565b8461101114156112c457612aab8861ffff161061122f57618e398861ffff16106112275761d5558861ffff16106112bc5760036112bf565b60025b61122a565b8461110114156112fc57612aab8861ffff161061122f576171c78861ffff16106112275761d5558861ffff16106112bc5760036112bf565b84612001141561133457612aab8861ffff161061122f5761638e8861ffff16106112275761aaab8861ffff16106112bc5760036112bf565b84611002141561136c576155558861ffff161061122f57619c728861ffff16106112275761d5558861ffff16106112bc5760036112bf565b846120101415611397576138e48861ffff161061127357618e398861ffff161061126b57600361126e565b8461020114156113c2576138e48861ffff161061122f57618e398861ffff161061122757600261122a565b8461010214156113ed576171c78861ffff161061122f5761c71c8861ffff161061122757600261122a565b846110201415611418576171c78861ffff16106112735761c71c8861ffff161061126b57600361126e565b84601214156114355761aaab8861ffff161061122f576001611232565b846021141561145f5761aaab8861ffff1610611452576000611232565b6001935060009250611552565b84610120141561147d5761aaab8861ffff1610611273576002611276565b8461021014156114a85761aaab8861ffff161061149b576001611276565b6002935060019250611552565b8461120014156114d75761aaab8861ffff16106114c65760036114c9565b60025b60ff16935060029250611552565b8461210014156115025761aaab8861ffff16106114f55760026114c9565b6003935060029250611552565b6040805160e560020a62461bcd02815260206004820152601660248201527f696e76616c696420726172697479207061747465726e00000000000000000000604482015290519081900360640190fd5b82840391508160031415611569575061d999611593565b816002141561157b575061e3d7611593565b816001141561158d575061f333611593565b50620100005b929a92995091975050505050505050565b600354600067ffffffffffffffff90911611611630576040805160e560020a62461bcd02815260206004820152602260248201527f747279696e6720746f20706f7046757365282920616e20656d7074792073746160448201527f636b000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6003805467ffffffffffffffff19811667ffffffffffffffff918216600019018216179182905516151561167c57600380546fffffffffffffffff0000000000000000191690556116b9565b60038054600167ffffffffffffffff6801000000000000000080840482169290920116026fffffffffffffffff0000000000000000199091161790555b565b600160a060020a03811615156116d057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a165627a7a72305820486c90195f2979389a78a2a404b2db9e435cd5ce41911504211c1a5463a0cd910029"
}