{
  "address": "0x990e081a7b7d3ccba26a2f49746a68cc4ff73280",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KStarCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-23\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20Basic\n * dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Basic token\n * dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0), \"Recipient address is zero address(0). Check the address again.\");\n        require(_value <= balances[msg.sender], \"The balance of account is insufficient.\");\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n    public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool)\n    {\n        require(_to != address(0), \"Recipient address is zero address(0). Check the address again.\");\n        require(_value <= balances[_from], \"The balance of account is insufficient.\");\n        require(_value <= allowed[_from][msg.sender], \"Insufficient tokens approved from account owner.\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n    public\n    returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n    public\n    returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n    /**\n     * Returns whether the target address is a contract\n     * dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param addr address to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n}\n\n/**\n * @title MultiOwnable\n * dev\n */\ncontract MultiOwnable {\n    using SafeMath for uint256;\n\n    address public root; // 혹시 몰라 준비해둔 superOwner 의 백업. 하드웨어 월렛 주소로 세팅할 예정.\n    address public superOwner;\n    mapping (address => bool) public owners;\n    address[] public ownerList;\n\n    // for changeSuperOwnerByDAO\n    // mapping(address => mapping (address => bool)) public preSuperOwnerMap;\n    mapping(address => address) public candidateSuperOwnerMap;\n\n\n    event ChangedRoot(address newRoot);\n    event ChangedSuperOwner(address newSuperOwner);\n    event AddedNewOwner(address newOwner);\n    event DeletedOwner(address deletedOwner);\n\n    constructor() public {\n        root = msg.sender;\n        superOwner = msg.sender;\n        owners[root] = true;\n\n        ownerList.push(msg.sender);\n\n    }\n\n    modifier onlyRoot() {\n        require(msg.sender == root, \"Root privilege is required.\");\n        _;\n    }\n\n    modifier onlySuperOwner() {\n        require(msg.sender == superOwner, \"SuperOwner priviledge is required.\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(owners[msg.sender], \"Owner priviledge is required.\");\n        _;\n    }\n\n    /**\n     * dev root 교체 (root 는 root 와 superOwner 를 교체할 수 있는 권리가 있다.)\n     * dev 기존 루트가 관리자에서 지워지지 않고, 새 루트가 자동으로 관리자에 등록되지 않음을 유의!\n     */\n    function changeRoot(address newRoot) onlyRoot public returns (bool) {\n        require(newRoot != address(0), \"This address to be set is zero address(0). Check the input address.\");\n\n        root = newRoot;\n\n        emit ChangedRoot(newRoot);\n        return true;\n    }\n\n    /**\n     * dev superOwner 교체 (root 는 root 와 superOwner 를 교체할 수 있는 권리가 있다.)\n     * dev 기존 superOwner 가 관리자에서 지워지지 않고, 새 superOwner 가 자동으로 관리자에 등록되지 않음을 유의!\n     */\n    function changeSuperOwner(address newSuperOwner) onlyRoot public returns (bool) {\n        require(newSuperOwner != address(0), \"This address to be set is zero address(0). Check the input address.\");\n\n        superOwner = newSuperOwner;\n\n        emit ChangedSuperOwner(newSuperOwner);\n        return true;\n    }\n\n    /**\n     * dev owner 들의 1/2 초과가 합의하면 superOwner 를 교체할 수 있다.\n     */\n    function changeSuperOwnerByDAO(address newSuperOwner) onlyOwner public returns (bool) {\n        require(newSuperOwner != address(0), \"This address to be set is zero address(0). Check the input address.\");\n        require(newSuperOwner != candidateSuperOwnerMap[msg.sender], \"You have already voted for this account.\");\n\n        candidateSuperOwnerMap[msg.sender] = newSuperOwner;\n\n        uint8 votingNumForSuperOwner = 0;\n        uint8 i = 0;\n\n        for (i = 0; i < ownerList.length; i++) {\n            if (candidateSuperOwnerMap[ownerList[i]] == newSuperOwner)\n                votingNumForSuperOwner++;\n        }\n\n        if (votingNumForSuperOwner > ownerList.length / 2) { // 과반수 이상이면 DAO 성립 => superOwner 교체\n            superOwner = newSuperOwner;\n\n            // 초기화\n            for (i = 0; i < ownerList.length; i++) {\n                delete candidateSuperOwnerMap[ownerList[i]];\n            }\n\n            emit ChangedSuperOwner(newSuperOwner);\n        }\n\n        return true;\n    }\n\n    function newOwner(address owner) onlySuperOwner public returns (bool) {\n        require(owner != address(0), \"This address to be set is zero address(0). Check the input address.\");\n        require(!owners[owner], \"This address is already registered.\");\n\n        owners[owner] = true;\n        ownerList.push(owner);\n\n        emit AddedNewOwner(owner);\n        return true;\n    }\n\n    function deleteOwner(address owner) onlySuperOwner public returns (bool) {\n        require(owners[owner], \"This input address is not a super owner.\");\n        delete owners[owner];\n\n        for (uint256 i = 0; i < ownerList.length; i++) {\n            if (ownerList[i] == owner) {\n                ownerList[i] = ownerList[ownerList.length.sub(1)];\n                ownerList.length = ownerList.length.sub(1);\n                break;\n            }\n        }\n\n        emit DeletedOwner(owner);\n        return true;\n    }\n}\n\n/**\n * @title Lockable token\n */\ncontract LockableToken is StandardToken, MultiOwnable {\n    bool public locked = true;\n    uint256 public constant LOCK_MAX = uint256(-1);\n\n    /**\n     * dev 락 상태에서도 거래 가능한 언락 계정\n     */\n    mapping(address => bool) public unlockAddrs;\n\n    /**\n     * dev 계정 별로 lock value 만큼 잔고가 잠김\n     * dev - 값이 0 일 때 : 잔고가 0 이어도 되므로 제한이 없는 것임.\n     * dev - 값이 LOCK_MAX 일 때 : 잔고가 uint256 의 최대값이므로 아예 잠긴 것임.\n     */\n    mapping(address => uint256) public lockValues;\n\n    event Locked(bool locked, string note);\n    event LockedTo(address indexed addr, bool locked, string note);\n    event SetLockValue(address indexed addr, uint256 value, string note);\n\n    constructor() public {\n        unlockTo(msg.sender,  \"\");\n    }\n\n    modifier checkUnlock (address addr, uint256 value) {\n        require(!locked || unlockAddrs[addr], \"The account is currently locked.\");\n        require(balances[addr].sub(value) >= lockValues[addr], \"Transferable limit exceeded. Check the status of the lock value.\");\n        _;\n    }\n\n    function lock(string note) onlyOwner public {\n        locked = true;\n        emit Locked(locked, note);\n    }\n\n    function unlock(string note) onlyOwner public {\n        locked = false;\n        emit Locked(locked, note);\n    }\n\n    function lockTo(address addr, string note) onlyOwner public {\n        setLockValue(addr, LOCK_MAX, note);\n        unlockAddrs[addr] = false;\n\n        emit LockedTo(addr, true, note);\n    }\n\n    function unlockTo(address addr, string note) onlyOwner public {\n        if (lockValues[addr] == LOCK_MAX)\n            setLockValue(addr, 0, note);\n        unlockAddrs[addr] = true;\n\n        emit LockedTo(addr, false, note);\n    }\n\n    function setLockValue(address addr, uint256 value, string note) onlyOwner public {\n        lockValues[addr] = value;\n        emit SetLockValue(addr, value, note);\n    }\n\n    /**\n     * dev 이체 가능 금액을 조회한다.\n     */\n    function getMyUnlockValue() public view returns (uint256) {\n        address addr = msg.sender;\n        if ((!locked || unlockAddrs[addr]) && balances[addr] > lockValues[addr])\n            return balances[addr].sub(lockValues[addr]);\n        else\n            return 0;\n    }\n\n    function transfer(address to, uint256 value) checkUnlock(msg.sender, value) public returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) checkUnlock(from, value) public returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n}\n\n/**\n * @title DelayLockableToken\n * dev 보안 차원에서 본인 계좌 잔고에 lock 을 걸 수 있다. 잔고 제한 기준을 낮추면 적용되기까지 12시간을 기다려야 한다.\n */\ncontract DelayLockableToken is LockableToken {\n    mapping(address => uint256) public delayLockValues;\n    mapping(address => uint256) public delayLockBeforeValues;\n    mapping(address => uint256) public delayLockTimes;\n\n    event SetDelayLockValue(address indexed addr, uint256 value, uint256 time);\n\n    modifier checkDelayUnlock (address addr, uint256 value) {\n        if (delayLockTimes[msg.sender] <= now) {\n            require (balances[addr].sub(value) >= delayLockValues[addr], \"Transferable limit exceeded. Change the balance lock value first and then use it\");\n        } else {\n            require (balances[addr].sub(value) >= delayLockBeforeValues[addr], \"Transferable limit exceeded. Please note that the residual lock value has changed and it will take 12 hours to apply.\");\n        }\n        _;\n    }\n\n    /**\n     * dev 자신의 계좌에 잔고 제한을 건다. 더 크게 걸 땐 바로 적용되고, 더 작게 걸 땐 12시간 이후에 변경된다.\n     */\n    function delayLock(uint256 value) public returns (bool) {\n        require (value <= balances[msg.sender], \"Your balance is insufficient.\");\n\n        if (value >= delayLockValues[msg.sender])\n            delayLockTimes[msg.sender] = now;\n        else {\n            require (delayLockTimes[msg.sender] <= now, \"The remaining money in the account cannot be unlocked continuously. You cannot renew until 12 hours after the first run.\");\n            delayLockTimes[msg.sender] = now + 12 hours;\n            delayLockBeforeValues[msg.sender] = delayLockValues[msg.sender];\n        }\n\n        delayLockValues[msg.sender] = value;\n\n        emit SetDelayLockValue(msg.sender, value, delayLockTimes[msg.sender]);\n        return true;\n    }\n\n    /**\n     * dev 자신의 계좌의 잔고 제한을 푼다.\n     */\n    function delayUnlock() public returns (bool) {\n        return delayLock(0);\n    }\n\n    /**\n     * dev 이체 가능 금액을 조회한다.\n     */\n    function getMyUnlockValue() public view returns (uint256) {\n        uint256 myUnlockValue;\n        address addr = msg.sender;\n        if (delayLockTimes[addr] <= now) {\n            myUnlockValue = balances[addr].sub(delayLockValues[addr]);\n        } else {\n            myUnlockValue = balances[addr].sub(delayLockBeforeValues[addr]);\n        }\n        \n        uint256 superUnlockValue = super.getMyUnlockValue();\n\n        if (myUnlockValue > superUnlockValue)\n            return superUnlockValue;\n        else\n            return myUnlockValue;\n    }    \n\n    function transfer(address to, uint256 value) checkDelayUnlock(msg.sender, value) public returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) checkDelayUnlock(from, value) public returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n}\n\n/**\n * @title KSCBaseToken\n * dev 트랜잭션 실행 시 메모를 남길 수 있도록 하였음.\n */\ncontract KSCBaseToken is DelayLockableToken {\n    event KSCTransfer(address indexed from, address indexed to, uint256 value, string note);\n    event KSCTransferFrom(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\n    event KSCApproval(address indexed owner, address indexed spender, uint256 value, string note);\n\n    event KSCMintTo(address indexed controller, address indexed to, uint256 amount, string note);\n    event KSCBurnFrom(address indexed controller, address indexed from, uint256 value, string note);\n\n    event KSCBurnWhenMoveToMainnet(address indexed controller, address indexed from, uint256 value, string note);\n\n    event KSCSell(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\n    event KSCSellByOtherCoin(address indexed owner, address indexed spender, address indexed to, uint256 value,  uint256 processIdHash, uint256 userIdHash, string note);\n\n    event KSCTransferToTeam(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\n    event KSCTransferToPartner(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\n\n    event KSCTransferToEcosystem(address indexed owner, address indexed spender, address indexed to, uint256 value, uint256 processIdHash, uint256 userIdHash, string note);\n    event KSCTransferToBounty(address indexed owner, address indexed spender, address indexed to, uint256 value, uint256 processIdHash, uint256 userIdHash, string note);\n\n    // ERC20 함수들을 오버라이딩하여 super 로 올라가지 않고 무조건 ksc~ 함수로 지나가게 한다.\n    function transfer(address to, uint256 value) public returns (bool ret) {\n        return kscTransfer(to, value, \"\");\n    }\n\n    function kscTransfer(address to, uint256 value, string note) public returns (bool ret) {\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\n\n        ret = super.transfer(to, value);\n        emit KSCTransfer(msg.sender, to, value, note);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        return kscTransferFrom(from, to, value, \"\");\n    }\n\n    function kscTransferFrom(address from, address to, uint256 value, string note) public returns (bool ret) {\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\n\n        ret = super.transferFrom(from, to, value);\n        emit KSCTransferFrom(from, msg.sender, to, value, note);\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        return kscApprove(spender, value, \"\");\n    }\n\n    function kscApprove(address spender, uint256 value, string note) public returns (bool ret) {\n        ret = super.approve(spender, value);\n        emit KSCApproval(msg.sender, spender, value, note);\n    }\n\n    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\n        return kscIncreaseApproval(spender, addedValue, \"\");\n    }\n\n    function kscIncreaseApproval(address spender, uint256 addedValue, string note) public returns (bool ret) {\n        ret = super.increaseApproval(spender, addedValue);\n        emit KSCApproval(msg.sender, spender, allowed[msg.sender][spender], note);\n    }\n\n    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\n        return kscDecreaseApproval(spender, subtractedValue, \"\");\n    }\n\n    function kscDecreaseApproval(address spender, uint256 subtractedValue, string note) public returns (bool ret) {\n        ret = super.decreaseApproval(spender, subtractedValue);\n        emit KSCApproval(msg.sender, spender, allowed[msg.sender][spender], note);\n    }\n\n    /**\n     * dev 신규 화폐 발행. 반드시 이유를 메모로 남겨라.\n     */\n    function mintTo(address to, uint256 amount) internal returns (bool) {\n        require(to != address(0x0), \"This address to be set is zero address(0). Check the input address.\");\n\n        totalSupply_ = totalSupply_.add(amount);\n        balances[to] = balances[to].add(amount);\n\n        emit Transfer(address(0), to, amount);\n        return true;\n    }\n\n    function kscMintTo(address to, uint256 amount, string note) onlyOwner public returns (bool ret) {\n        ret = mintTo(to, amount);\n        emit KSCMintTo(msg.sender, to, amount, note);\n    }\n\n    /**\n     * dev 화폐 소각. 반드시 이유를 메모로 남겨라.\n     */\n    function burnFrom(address from, uint256 value) internal returns (bool) {\n        require(value <= balances[from], \"Your balance is insufficient.\");\n\n        balances[from] = balances[from].sub(value);\n        totalSupply_ = totalSupply_.sub(value);\n\n        emit Transfer(from, address(0), value);\n        return true;\n    }\n\n    function kscBurnFrom(address from, uint256 value, string note) onlyOwner public returns (bool ret) {\n        ret = burnFrom(from, value);\n        emit KSCBurnFrom(msg.sender, from, value, note);\n    }\n\n    /**\n     * dev 메인넷으로 이동하며 화폐 소각.\n     */\n    function kscBurnWhenMoveToMainnet(address burner, uint256 value, string note) onlyOwner public returns (bool ret) {\n        ret = burnFrom(burner, value);\n        emit KSCBurnWhenMoveToMainnet(msg.sender, burner, value, note);\n    }\n\n    function kscBatchBurnWhenMoveToMainnet(address[] burners, uint256[] values, string note) onlyOwner public returns (bool ret) {\n        uint256 length = burners.length;\n        require(length == values.length, \"The size of \\'burners\\' and \\'values\\' array is different.\");\n\n        ret = true;\n        for (uint256 i = 0; i < length; i++) {\n            ret = ret && kscBurnWhenMoveToMainnet(burners[i], values[i], note);\n        }\n    }\n\n    /**\n     * dev 이더로 KSC 를 구입하는 경우\n     */\n    function kscSell(\n        address from,\n        address to,\n        uint256 value,\n        string note\n    ) onlyOwner public returns (bool ret) {\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\n\n        ret = super.transferFrom(from, to, value);\n        emit KSCSell(from, msg.sender, to, value, note);\n    }\n\n    /**\n     * dev 비트코인 등의 다른 코인으로 KSC 를 구입하는 경우\n     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\n     */\n    function kscBatchSellByOtherCoin(\n        address from,\n        address[] to,\n        uint256[] values,\n        uint256 processIdHash,\n        uint256[] userIdHash,\n        string note\n    ) onlyOwner public returns (bool ret) {\n        uint256 length = to.length;\n        require(length == values.length, \"The size of \\'to\\' and \\'values\\' array is different.\");\n        require(length == userIdHash.length, \"The size of \\'to\\' and \\'userIdHash\\' array is different.\");\n\n        ret = true;\n        for (uint256 i = 0; i < length; i++) {\n            require(to[i] != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\n\n            ret = ret && super.transferFrom(from, to[i], values[i]);\n            emit KSCSellByOtherCoin(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\n        }\n    }\n\n    /**\n     * dev 팀에게 전송하는 경우\n     */\n    function kscTransferToTeam(\n        address from,\n        address to,\n        uint256 value,\n        string note\n    ) onlyOwner public returns (bool ret) {\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\n\n        ret = super.transferFrom(from, to, value);\n        emit KSCTransferToTeam(from, msg.sender, to, value, note);\n    }\n\n    /**\n     * dev 파트너 및 어드바이저에게 전송하는 경우\n     */\n    function kscTransferToPartner(\n        address from,\n        address to,\n        uint256 value,\n        string note\n    ) onlyOwner public returns (bool ret) {\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\n\n        ret = super.transferFrom(from, to, value);\n        emit KSCTransferToPartner(from, msg.sender, to, value, note);\n    }\n\n    /**\n     * dev 에코시스템(커뮤니티 활동을 통한 보상 등)으로 KSC 지급\n     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\n     */\n    function kscBatchTransferToEcosystem(\n        address from, address[] to,\n        uint256[] values,\n        uint256 processIdHash,\n        uint256[] userIdHash,\n        string note\n    ) onlyOwner public returns (bool ret) {\n        uint256 length = to.length;\n        require(length == values.length, \"The size of \\'to\\' and \\'values\\' array is different.\");\n        require(length == userIdHash.length, \"The size of \\'to\\' and \\'userIdHash\\' array is different.\");\n\n        ret = true;\n        for (uint256 i = 0; i < length; i++) {\n            require(to[i] != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\n\n            ret = ret && super.transferFrom(from, to[i], values[i]);\n            emit KSCTransferToEcosystem(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\n        }\n    }\n\n    /**\n     * dev 바운티 참여자에게 KSC 지급\n     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\n     */\n    function kscBatchTransferToBounty(\n        address from,\n        address[] to,\n        uint256[] values,\n        uint256 processIdHash,\n        uint256[] userIdHash,\n        string note\n    ) onlyOwner public returns (bool ret) {\n        uint256 length = to.length;\n        require(to.length == values.length, \"The size of \\'to\\' and \\'values\\' array is different.\");\n\n        ret = true;\n        for (uint256 i = 0; i < length; i++) {\n            require(to[i] != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\n\n            ret = ret && super.transferFrom(from, to[i], values[i]);\n            emit KSCTransferToBounty(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\n        }\n    }\n\n    function destroy() onlyRoot public {\n        selfdestruct(root);\n    }\n}\n\n/**\n * @title KStarCoin\n */\ncontract KStarCoin is KSCBaseToken {\n    using AddressUtils for address;\n\n    event TransferedToKSCDapp(\n        address indexed owner,\n        address indexed spender,\n        address indexed to, uint256 value, KSCReceiver.KSCReceiveType receiveType);\n\n    string public constant name = \"KStarCoin\";\n    string public constant symbol = \"KSC\";\n    uint8 public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 1e9 * (10 ** uint256(decimals));\n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n    function kscTransfer(address to, uint256 value, string note) public returns (bool ret) {\n        ret = super.kscTransfer(to, value, note);\n        postTransfer(msg.sender, msg.sender, to, value, KSCReceiver.KSCReceiveType.KSC_TRANSFER);\n    }\n\n    function kscTransferFrom(address from, address to, uint256 value, string note) public returns (bool ret) {\n        ret = super.kscTransferFrom(from, to, value, note);\n        postTransfer(from, msg.sender, to, value, KSCReceiver.KSCReceiveType.KSC_TRANSFER);\n    }\n\n    function postTransfer(address owner, address spender, address to, uint256 value, KSCReceiver.KSCReceiveType receiveType) internal returns (bool) {\n        if (to.isContract()) {\n            bool callOk = address(to).call(bytes4(keccak256(\"onKSCReceived(address,address,uint256,uint8)\")), owner, spender, value, receiveType);\n            if (callOk) {\n                emit TransferedToKSCDapp(owner, spender, to, value, receiveType);\n            }\n        }\n\n        return true;\n    }\n\n    function kscMintTo(address to, uint256 amount, string note) onlyOwner public returns (bool ret) {\n        ret = super.kscMintTo(to, amount, note);\n        postTransfer(0x0, msg.sender, to, amount, KSCReceiver.KSCReceiveType.KSC_MINT);\n    }\n\n    function kscBurnFrom(address from, uint256 value, string note) onlyOwner public returns (bool ret) {\n        ret = super.kscBurnFrom(from, value, note);\n        postTransfer(0x0, msg.sender, from, value, KSCReceiver.KSCReceiveType.KSC_BURN);\n    }\n}\n\n\n/**\n * @title KStarCoin Receiver\n */\ncontract KSCReceiver {\n    enum KSCReceiveType { KSC_TRANSFER, KSC_MINT, KSC_BURN }\n    function onKSCReceived(address owner, address spender, uint256 value, KSCReceiveType receiveType) public returns (bool);\n}\n\n/**\n * @title KSCDappSample\n */\ncontract KSCDappSample is KSCReceiver {\n    event LogOnReceiveKSC(string message, address indexed owner, address indexed spender, uint256 value, KSCReceiveType receiveType);\n\n    function onKSCReceived(address owner, address spender, uint256 value, KSCReceiveType receiveType) public returns (bool) {\n        emit LogOnReceiveKSC(\"I receive KstarCoin.\", owner, spender, value, receiveType);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"unlockTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"changeSuperOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burners\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBatchBurnWhenMoveToMainnet\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscIncreaseApproval\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscTransferToTeam\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscApprove\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"name\":\"userIdHash\",\"type\":\"uint256[]\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBatchTransferToEcosystem\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayLockBeforeValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRoot\",\"type\":\"address\"}],\"name\":\"changeRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyUnlockValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscTransferToPartner\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"candidateSuperOwnerMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"lockTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBurnWhenMoveToMainnet\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscTransfer\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"changeSuperOwnerByDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayLockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscDecreaseApproval\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBurnFrom\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delayUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscTransferFrom\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscSell\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"setLockValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"name\":\"userIdHash\",\"type\":\"uint256[]\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBatchSellByOtherCoin\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"name\":\"userIdHash\",\"type\":\"uint256[]\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBatchTransferToBounty\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscMintTo\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"delayLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayLockValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiveType\",\"type\":\"uint8\"}],\"name\":\"TransferedToKSCDapp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCMintTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCBurnFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCBurnWhenMoveToMainnet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCSellByOtherCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferToTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferToPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferToEcosystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferToBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetDelayLockValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"locked\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"LockedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"SetLockValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRoot\",\"type\":\"address\"}],\"name\":\"ChangedRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"ChangedSuperOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AddedNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deletedOwner\",\"type\":\"address\"}],\"name\":\"DeletedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526008805460ff191660011790553480156200001e57600080fd5b506003805433600160a060020a031991821681179283905560048054831682179055600160a060020a039092166000908152600560209081526040808320805460ff1916600190811790915560068054918201815584527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018054909416851790935582519081019092528152620000c091906401000000006200011f810204565b6b033b2e3c9fd0803ce8000000600181905533600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3620003ea565b3360009081526005602052604090205460ff161515620001a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65722070726976696c656467652069732072657175697265642e000000604482015290519081900360640190fd5b600160a060020a0382166000908152600a60205260409020546000191415620001da57620001da82600083640100000000620002a3810204565b600160a060020a0382166000818152600960209081526040808320805460ff19166001179055805183815280830182815286519282019290925285517f4bf46282901af80a4309ce07c36d841184ce98297f8735f7769d169497ac7a4c94938793916060840191850190808383895b838110156200026357818101518382015260200162000249565b50505050905090810190601f168015620002915780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25050565b3360009081526005602052604090205460ff1615156200032457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65722070726976696c656467652069732072657175697265642e000000604482015290519081900360640190fd5b600160a060020a0383166000818152600a60209081526040808320869055805186815280830182815286519282019290925285517fb19425af6288c6bb0d88f64d6d1cfe5eb7e2d31ee92f1012798df97a9b6b011a9488948894926060850192918601918190849084905b83811015620003a95781810151838201526020016200038f565b50505050905090810190601f168015620003d75780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2505050565b614eaa80620003fa6000396000f3006080604052600436106102625763ffffffff60e060020a6000350416623078b08114610267578063022914a7146102d057806306fdde0314610305578063095ea7b31461038f5780631044c66b146103b357806318160ddd146103d457806319c46f51146103fb5780631b354a30146104c757806322da21661461053057806323b872dd1461059f5780632966e97b146105c95780632ff2e9dc14610632578063313ce5671461064757806331b9d81d14610672578063320a98fd1461078c578063325c8df0146107e55780633d8731ac146108065780634a7902d21461081b5780634aa678c31461083c578063505450d4146108515780635288606e1461087257806360bbb7b8146108e1578063661884631461091e5780636bd5e26a1461094257806370a08231146109a95780637c39759b146109ca578063803cc0d014610a3357806383197ef014610a9c5780638595245414610ab157806387dcd2b614610ad25780638bde695f14610ae75780638dfb263614610b0857806395d89b4114610b29578063a9059cbb14610b3e578063a96ce7aa14610b62578063b31c5c6414610bbb578063bebb7e6014610c24578063c1ce497b14610c8d578063c79ba27d14610ca2578063c926aae614610d11578063cb619a3314610d80578063cd5c4c7014610da1578063cf30901214610dc2578063d712800f14610dd7578063d73dd62314610e40578063dd62ed3e14610e64578063def79ab514610e8b578063df2a6e4f14610ea3578063e156799714610fbd578063e32381b6146110d7578063ebf0c71714611140578063f63d291214611155578063f7631f3f1461116d575b600080fd5b34801561027357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102ce958335600160a060020a031695369560449491939091019190819084018382808284375094975061118e9650505050505050565b005b3480156102dc57600080fd5b506102f1600160a060020a03600435166112d9565b604080519115158252519081900360200190f35b34801561031157600080fd5b5061031a6112ee565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035457818101518382015260200161033c565b50505050905090810190601f1680156103815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039b57600080fd5b506102f1600160a060020a0360043516602435611325565b3480156103bf57600080fd5b506102f1600160a060020a0360043516611349565b3480156103e057600080fd5b506103e9611478565b60408051918252519081900360200190f35b34801561040757600080fd5b50604080516020600480358082013583810280860185019096528085526102f195369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061147f9650505050505050565b3480156104d357600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f1948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506115c19650505050505050565b34801561053c57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102f194600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506116a09650505050505050565b3480156105ab57600080fd5b506102f1600160a060020a0360043581169060243516604435611842565b3480156105d557600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f1948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506118689650505050505050565b34801561063e57600080fd5b506103e96118ef565b34801561065357600080fd5b5061065c6118ff565b6040805160ff9092168252519081900360200190f35b34801561067e57600080fd5b506040805160206004602480358281013584810280870186019097528086526102f1968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506119049650505050505050565b34801561079857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ce943694929360249392840191908190840183828082843750949750611c6a9650505050505050565b3480156107f157600080fd5b506103e9600160a060020a0360043516611d7f565b34801561081257600080fd5b506103e9611d91565b34801561082757600080fd5b506102f1600160a060020a0360043516611d97565b34801561084857600080fd5b506103e9611ec6565b34801561085d57600080fd5b506102f1600160a060020a0360043516611f76565b34801561087e57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102f194600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750611f8b9650505050505050565b3480156108ed57600080fd5b50610902600160a060020a03600435166120e9565b60408051600160a060020a039092168252519081900360200190f35b34801561092a57600080fd5b506102f1600160a060020a0360043516602435612104565b34801561094e57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102ce958335600160a060020a03169536956044949193909101919081908401838280828437509497506121219650505050505050565b3480156109b557600080fd5b506103e9600160a060020a036004351661220f565b3480156109d657600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f1948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061222a9650505050505050565b348015610a3f57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f1948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506123069650505050505050565b348015610aa857600080fd5b506102ce61232b565b348015610abd57600080fd5b506102f1600160a060020a036004351661239b565b348015610ade57600080fd5b506109026125d0565b348015610af357600080fd5b506102f1600160a060020a03600435166125df565b348015610b1457600080fd5b506103e9600160a060020a03600435166128b1565b348015610b3557600080fd5b5061031a6128c3565b348015610b4a57600080fd5b506102f1600160a060020a03600435166024356128fa565b348015610b6e57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ce9436949293602493928401919081908401838280828437509497506129179650505050505050565b348015610bc757600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f1948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506129e29650505050505050565b348015610c3057600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f1948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506129ee9650505050505050565b348015610c9957600080fd5b506102f1612a61565b348015610cae57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102f194600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750612a729650505050505050565b348015610d1d57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102f194600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750612a999650505050505050565b348015610d8c57600080fd5b506103e9600160a060020a0360043516612bf7565b348015610dad57600080fd5b506102f1600160a060020a0360043516612c09565b348015610dce57600080fd5b506102f1612e68565b348015610de357600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102ce948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750612e719650505050505050565b348015610e4c57600080fd5b506102f1600160a060020a0360043516602435612f8b565b348015610e7057600080fd5b506103e9600160a060020a0360043581169060243516612fa8565b348015610e9757600080fd5b50610902600435612fd3565b348015610eaf57600080fd5b506040805160206004602480358281013584810280870186019097528086526102f1968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612ffb9650505050505050565b348015610fc957600080fd5b506040805160206004602480358281013584810280870186019097528086526102f1968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061332e9650505050505050565b3480156110e357600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102f1948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506135e39650505050505050565b34801561114c57600080fd5b50610902613656565b34801561116157600080fd5b506102f1600435613665565b34801561117957600080fd5b506103e9600160a060020a0360043516613859565b3360009081526005602052604090205460ff1615156111e5576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b600160a060020a0382166000908152600a602052604090205460001914156112135761121382600083612e71565b600160a060020a0382166000818152600960209081526040808320805460ff19166001179055805183815280830182815286519282019290925285517f4bf46282901af80a4309ce07c36d841184ce98297f8735f7769d169497ac7a4c94938793916060840191850190808383895b8381101561129a578181015183820152602001611282565b50505050905090810190601f1680156112c75780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25050565b60056020526000908152604090205460ff1681565b60408051808201909152600981527f4b53746172436f696e0000000000000000000000000000000000000000000000602082015281565b600061134283836020604051908101604052806000815250611868565b9392505050565b600354600090600160a060020a031633146113ae576040805160e560020a62461bcd02815260206004820152601b60248201527f526f6f742070726976696c6567652069732072657175697265642e0000000000604482015290519081900360640190fd5b600160a060020a038216151561141f576040805160e560020a62461bcd0281526020600482015260436024820152600080516020614dbf8339815191526044820152600080516020614e5f833981519152606482015260e960020a6239b99702608482015290519081900360a40190fd5b60048054600160a060020a038416600160a060020a0319909116811790915560408051918252517f94b17f1a4844062cbed00809347b0f8149fc88c5a3ea720c7aed42c559eed46d9181900360200190a1506001919050565b6001545b90565b336000908152600560205260408120548190819060ff1615156114da576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b85518551909250821461155d576040805160e560020a62461bcd02815260206004820152603660248201527f5468652073697a65206f6620276275726e6572732720616e64202776616c756560448201527f732720617272617920697320646966666572656e742e00000000000000000000606482015290519081900360840190fd5b506001915060005b818110156115b8578280156115ae57506115ae868281518110151561158657fe5b90602001906020020151868381518110151561159e57fe5b906020019060200201518661222a565b9250600101611565565b50509392505050565b60006115cd848461386b565b336000818152600260209081526040808320600160a060020a038a168085529083528184205482518181528085018481528a5194820194909452895197985091967f11df11f09b0ba23e705e16af1b61809e2b4b2e31147065fadab4e556030075169591948a9492606085019291860191908190849084905b8381101561165e578181015183820152602001611646565b50505050905090810190601f16801561168b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a39392505050565b3360009081526005602052604081205460ff1615156116f7576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b600160a060020a03841630141561176e576040805160e560020a62461bcd02815260206004820152605f6024820152600080516020614ddf8339815191526044820152600080516020614dff8339815191526064820152600080516020614d9f833981519152608482015290519081900360a40190fd5b611779858585613904565b905083600160a060020a031633600160a060020a031686600160a060020a03167faeef32f569c4d2b700d8acc51d15d5c61d856554ec3420f7889278e7fed468cf86866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117ff5781810151838201526020016117e7565b50505050905090810190601f16801561182c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a4949350505050565b60006118608484846020604051908101604052806000815250612a72565b949350505050565b60006118748484613b0a565b905083600160a060020a031633600160a060020a03167f11df11f09b0ba23e705e16af1b61809e2b4b2e31147065fadab4e5560300751685856040518083815260200180602001828103825283818151815260200191508051906020019080838360008381101561165e578181015183820152602001611646565b6b033b2e3c9fd0803ce800000081565b601281565b336000908152600560205260408120548190819060ff16151561195f576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b8751875190925082146119e2576040805160e560020a62461bcd02815260206004820152603160248201527f5468652073697a65206f662027746f2720616e64202776616c7565732720617260448201527f72617920697320646966666572656e742e000000000000000000000000000000606482015290519081900360840190fd5b84518214611a60576040805160e560020a62461bcd02815260206004820152603560248201527f5468652073697a65206f662027746f2720616e6420277573657249644861736860448201527f2720617272617920697320646966666572656e742e0000000000000000000000606482015290519081900360840190fd5b506001915060005b81811015611c5e5787513090899083908110611a8057fe5b60209081029091010151600160a060020a03161415611aff576040805160e560020a62461bcd02815260206004820152605f6024820152600080516020614ddf8339815191526044820152600080516020614dff8339815191526064820152600080516020614d9f833981519152608482015290519081900360a40190fd5b828015611b405750611b40898983815181101515611b1957fe5b906020019060200201518984815181101515611b3157fe5b90602001906020020151613904565b92508781815181101515611b5057fe5b90602001906020020151600160a060020a031633600160a060020a03168a600160a060020a03167fc5ff608abdc758e0b8038104f3fbbd2301f5b9261eea7963297c2d6471160e668a85815181101515611ba657fe5b906020019060200201518a8a87815181101515611bbf57fe5b906020019060200201518a6040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c19578181015183820152602001611c01565b50505050905090810190601f168015611c465780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4600101611a68565b50509695505050505050565b3360009081526005602052604090205460ff161515611cc1576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b6008805460ff1916600117908190556040805160ff929092168015158352602080840183815285519385019390935284517fc1086893b0a3f1d991fd25e26cd28cad11de174842b04a55cc2423ed178e43829492938693929091606084019185019080838360005b83811015611d41578181015183820152602001611d29565b50505050905090810190601f168015611d6e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b600c6020526000908152604090205481565b60001981565b600354600090600160a060020a03163314611dfc576040805160e560020a62461bcd02815260206004820152601b60248201527f526f6f742070726976696c6567652069732072657175697265642e0000000000604482015290519081900360640190fd5b600160a060020a0382161515611e6d576040805160e560020a62461bcd0281526020600482015260436024820152600080516020614dbf8339815191526044820152600080516020614e5f833981519152606482015260e960020a6239b99702608482015290519081900360a40190fd5b60038054600160a060020a038416600160a060020a0319909116811790915560408051918252517f43ddeae7116ae634a7d05c2d1c588bca11b7bbc8cb96fbb2cb9c5b1afdf9ce129181900360200190a1506001919050565b336000818152600d60205260408120549091829182904210611f1c57600160a060020a0382166000908152600b60209081526040808320549183905290912054611f159163ffffffff613b7016565b9250611f52565b600160a060020a0382166000908152600c60209081526040808320549183905290912054611f4f9163ffffffff613b7016565b92505b611f5a613b82565b905080831115611f6c57809350611f70565b8293505b50505090565b60096020526000908152604090205460ff1681565b3360009081526005602052604081205460ff161515611fe2576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b600160a060020a038416301415612059576040805160e560020a62461bcd02815260206004820152605f6024820152600080516020614ddf8339815191526044820152600080516020614dff8339815191526064820152600080516020614d9f833981519152608482015290519081900360a40190fd5b612064858585613904565b905083600160a060020a031633600160a060020a031686600160a060020a03167ffe6d65dd5249c3a7684e855384a75ecc395b1e1a7715f31e561115d53741fdb48686604051808381526020018060200182810382528381815181526020019150805190602001908083836000838110156117ff5781810151838201526020016117e7565b600760205260009081526040902054600160a060020a031681565b6000611342838360206040519081016040528060008152506129e2565b3360009081526005602052604090205460ff161515612178576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b6121858260001983612e71565b600160a060020a0382166000818152600960209081526040808320805460ff191690558051600180825281840183815287519383019390935286517f4bf46282901af80a4309ce07c36d841184ce98297f8735f7769d169497ac7a4c959194889492606085019291860191908190849084908381101561129a578181015183820152602001611282565b600160a060020a031660009081526020819052604090205490565b3360009081526005602052604081205460ff161515612281576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b61228b8484613c26565b905083600160a060020a031633600160a060020a03167f5513400315f143ad4b27ad1d27f5e1b70f44f10be6a682911031002e96cca29585856040518083815260200180602001828103825283818151815260200191508051906020019080838360008381101561165e578181015183820152602001611646565b6000612313848484613d26565b9050612323333386866000613e24565b509392505050565b600354600160a060020a0316331461238d576040805160e560020a62461bcd02815260206004820152601b60248201527f526f6f742070726976696c6567652069732072657175697265642e0000000000604482015290519081900360640190fd5b600354600160a060020a0316ff5b600454600090600160a060020a03163314612426576040805160e560020a62461bcd02815260206004820152602260248201527f53757065724f776e65722070726976696c65646765206973207265717569726560448201527f642e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0382161515612497576040805160e560020a62461bcd0281526020600482015260436024820152600080516020614dbf8339815191526044820152600080516020614e5f833981519152606482015260e960020a6239b99702608482015290519081900360a40190fd5b600160a060020a03821660009081526005602052604090205460ff161561252e576040805160e560020a62461bcd02815260206004820152602360248201527f54686973206164647265737320697320616c726561647920726567697374657260448201527f65642e0000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0382166000818152600560209081526040808320805460ff191660019081179091556006805491820181559093527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9092018054600160a060020a03191684179055815192835290517f5446d64d957daf41eca8227aa8fa5eb7f92c617adf03fbd9df64e8eb564d824e9281900390910190a1506001919050565b600454600160a060020a031681565b336000908152600560205260408120548190819060ff16151561263a576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b600160a060020a03841615156126ab576040805160e560020a62461bcd0281526020600482015260436024820152600080516020614dbf8339815191526044820152600080516020614e5f833981519152606482015260e960020a6239b99702608482015290519081900360a40190fd5b33600090815260076020526040902054600160a060020a0385811691161415612744576040805160e560020a62461bcd02815260206004820152602860248201527f596f75206861766520616c726561647920766f74656420666f7220746869732060448201527f6163636f756e742e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50503360009081526007602052604081208054600160a060020a031916600160a060020a038516179055805b60065460ff821610156127dd5783600160a060020a03166007600060068460ff1681548110151561279d57fe5b6000918252602080832090910154600160a060020a0390811684529083019390935260409091019020541614156127d5576001909101905b600101612770565b600654600290048260ff1611156128a7575060048054600160a060020a031916600160a060020a03851617905560005b60065460ff8216101561286a576007600060068360ff1681548110151561283057fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190208054600160a060020a031916905560010161280d565b60408051600160a060020a038616815290517f94b17f1a4844062cbed00809347b0f8149fc88c5a3ea720c7aed42c559eed46d9181900360200190a15b5060019392505050565b600d6020526000908152604090205481565b60408051808201909152600381527f4b53430000000000000000000000000000000000000000000000000000000000602082015281565b600061134283836020604051908101604052806000815250612306565b3360009081526005602052604090205460ff16151561296e576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b6008805460ff19169055604080516000808252602080830184815285519484019490945284517fc1086893b0a3f1d991fd25e26cd28cad11de174842b04a55cc2423ed178e438294929386939092909160608401918501908083838983811015611d41578181015183820152602001611d29565b60006115cd8484613fa8565b3360009081526005602052604081205460ff161515612a45576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b612a50848484614098565b905061232360003386866002613e24565b6000612a6d6000613665565b905090565b6000612a8085858585614174565b9050612a90853386866000613e24565b50949350505050565b3360009081526005602052604081205460ff161515612af0576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b600160a060020a038416301415612b67576040805160e560020a62461bcd02815260206004820152605f6024820152600080516020614ddf8339815191526044820152600080516020614dff8339815191526064820152600080516020614d9f833981519152608482015290519081900360a40190fd5b612b72858585613904565b905083600160a060020a031633600160a060020a031686600160a060020a03167fe85177e5f6b1e79ca62e899dada6437a93bcd353e42695b57a7a299964e5b37e8686604051808381526020018060200182810382528381815181526020019150805190602001908083836000838110156117ff5781810151838201526020016117e7565b600a6020526000908152604090205481565b6004546000908190600160a060020a03163314612c96576040805160e560020a62461bcd02815260206004820152602260248201527f53757065724f776e65722070726976696c65646765206973207265717569726560448201527f642e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03831660009081526005602052604090205460ff161515612d2e576040805160e560020a62461bcd02815260206004820152602860248201527f5468697320696e7075742061646472657373206973206e6f742061207375706560448201527f72206f776e65722e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50600160a060020a0382166000908152600560205260408120805460ff191690555b600654811015612e235782600160a060020a0316600682815481101515612d7357fe5b600091825260209091200154600160a060020a03161415612e1b5760068054612da390600163ffffffff613b7016565b81548110612dad57fe5b60009182526020909120015460068054600160a060020a039092169183908110612dd357fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600654612e0a906001613b70565b612e15600682614d5b565b50612e23565b600101612d50565b60408051600160a060020a038516815290517f1e64d9a491033a9731fa82493f0ab60e9f74294eca27edd93629f1fbaa15d2879181900360200190a150600192915050565b60085460ff1681565b3360009081526005602052604090205460ff161515612ec8576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b600160a060020a0383166000818152600a60209081526040808320869055805186815280830182815286519282019290925285517fb19425af6288c6bb0d88f64d6d1cfe5eb7e2d31ee92f1012798df97a9b6b011a9488948894926060850192918601918190849084905b83811015612f4b578181015183820152602001612f33565b50505050905090810190601f168015612f785780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2505050565b6000611342838360206040519081016040528060008152506115c1565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6006805482908110612fe157fe5b600091825260209091200154600160a060020a0316905081565b336000908152600560205260408120548190819060ff161515613056576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b8751875190925082146130d9576040805160e560020a62461bcd02815260206004820152603160248201527f5468652073697a65206f662027746f2720616e64202776616c7565732720617260448201527f72617920697320646966666572656e742e000000000000000000000000000000606482015290519081900360840190fd5b84518214613157576040805160e560020a62461bcd02815260206004820152603560248201527f5468652073697a65206f662027746f2720616e6420277573657249644861736860448201527f2720617272617920697320646966666572656e742e0000000000000000000000606482015290519081900360840190fd5b506001915060005b81811015611c5e578751309089908390811061317757fe5b60209081029091010151600160a060020a031614156131f6576040805160e560020a62461bcd02815260206004820152605f6024820152600080516020614ddf8339815191526044820152600080516020614dff8339815191526064820152600080516020614d9f833981519152608482015290519081900360a40190fd5b8280156132105750613210898983815181101515611b1957fe5b9250878181518110151561322057fe5b90602001906020020151600160a060020a031633600160a060020a03168a600160a060020a03167fd1eeefb15b40f2cd79a9f59312406c24c8ac4aa23f444c493e9bc5ca587fd2bf8a8581518110151561327657fe5b906020019060200201518a8a8781518110151561328f57fe5b906020019060200201518a6040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132e95781810151838201526020016132d1565b50505050905090810190601f1680156133165780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a460010161315f565b336000908152600560205260408120548190819060ff161515613389576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b87518751909250821461340c576040805160e560020a62461bcd02815260206004820152603160248201527f5468652073697a65206f662027746f2720616e64202776616c7565732720617260448201527f72617920697320646966666572656e742e000000000000000000000000000000606482015290519081900360840190fd5b506001915060005b81811015611c5e578751309089908390811061342c57fe5b60209081029091010151600160a060020a031614156134ab576040805160e560020a62461bcd02815260206004820152605f6024820152600080516020614ddf8339815191526044820152600080516020614dff8339815191526064820152600080516020614d9f833981519152608482015290519081900360a40190fd5b8280156134c557506134c5898983815181101515611b1957fe5b925087818151811015156134d557fe5b90602001906020020151600160a060020a031633600160a060020a03168a600160a060020a03167f0bf0225be82b0e35bf95a165e871255021221312a120febdba85e9650024d35f8a8581518110151561352b57fe5b906020019060200201518a8a8781518110151561354457fe5b906020019060200201518a6040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561359e578181015183820152602001613586565b50505050905090810190601f1680156135cb5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4600101613414565b3360009081526005602052604081205460ff16151561363a576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b61364584848461427d565b905061232360003386866001613e24565b600354600160a060020a031681565b336000908152602081905260408120548211156136cc576040805160e560020a62461bcd02815260206004820152601d60248201527f596f75722062616c616e636520697320696e73756666696369656e742e000000604482015290519081900360640190fd5b336000908152600b602052604090205482106136f957336000908152600d602052604090204290556137fd565b336000908152600d60205260409020544210156137d2576040805160e560020a62461bcd02815260206004820152607860248201527f5468652072656d61696e696e67206d6f6e657920696e20746865206163636f7560448201527f6e742063616e6e6f7420626520756e6c6f636b656420636f6e74696e756f757360648201527f6c792e20596f752063616e6e6f742072656e657720756e74696c20313220686f60848201527f757273206166746572207468652066697273742072756e2e000000000000000060a482015290519081900360c40190fd5b336000908152600d6020908152604080832061a8c042019055600b825280832054600c909252909120555b336000818152600b60209081526040808320869055600d8252918290205482518681529182015281517f29f8b22a98b13376caf4551cf7eb973ad73a6b94bb83780818b808e04bf86af5929181900390910190a2506001919050565b600b6020526000908152604090205481565b336000908152600260209081526040808320600160a060020a038616845290915281205461389f908363ffffffff61435916565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b336000908152600d60205260408120548490839042106139f957600160a060020a0382166000908152600b60209081526040808320549183905290912054613952908363ffffffff613b7016565b10156139f4576040805160e560020a62461bcd02815260206004820152605060248201527f5472616e7366657261626c65206c696d69742065786365656465642e2043686160448201527f6e6765207468652062616c616e6365206c6f636b2076616c756520666972737460648201527f20616e64207468656e2075736520697400000000000000000000000000000000608482015290519081900360a40190fd5b613af5565b600160a060020a0382166000908152600c60209081526040808320549183905290912054613a2d908363ffffffff613b7016565b1015613af5576040805160e560020a62461bcd02815260206004820152607560248201527f5472616e7366657261626c65206c696d69742065786365656465642e20506c6560448201527f617365206e6f746520746861742074686520726573696475616c206c6f636b2060648201527f76616c756520686173206368616e67656420616e642069742077696c6c20746160848201527f6b6520313220686f75727320746f206170706c792e000000000000000000000060a482015290519081900360c40190fd5b613b0086868661436c565b9695505050505050565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600082821115613b7c57fe5b50900390565b600854600090339060ff161580613bb15750600160a060020a03811660009081526009602052604090205460ff165b8015613bde5750600160a060020a0381166000908152600a60209081526040808320549183905290912054115b15613c1d57600160a060020a0381166000908152600a60209081526040808320549183905290912054613c169163ffffffff613b7016565b9150613c22565b600091505b5090565b600160a060020a038216600090815260208190526040812054821115613c96576040805160e560020a62461bcd02815260206004820152601d60248201527f596f75722062616c616e636520697320696e73756666696369656e742e000000604482015290519081900360640190fd5b600160a060020a038316600090815260208190526040902054613cbf908363ffffffff613b7016565b600160a060020a038416600090815260208190526040902055600154613ceb908363ffffffff613b7016565b600155604080518381529051600091600160a060020a03861691600080516020614e3f8339815191529181900360200190a350600192915050565b6000600160a060020a038416301415613d9f576040805160e560020a62461bcd02815260206004820152605f6024820152600080516020614ddf8339815191526044820152600080516020614dff8339815191526064820152600080516020614d9f833981519152608482015290519081900360a40190fd5b613da984846144ae565b905083600160a060020a031633600160a060020a03167ff8c83dd2123ea3dc7804f44ca59137f0dc06dfb7fe6e821c8d18e0c9dbb35af085856040518083815260200180602001828103825283818151815260200191508051906020019080838360008381101561165e578181015183820152602001611646565b600080613e3985600160a060020a03166146b3565b15613f9b5784600160a060020a031660405180807f6f6e4b5343526563656976656428616464726573732c616464726573732c756981526020017f6e743235362c75696e7438290000000000000000000000000000000000000000815250602c019050604051809103902060e060020a9004888887876040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a03168152602001838152602001826002811115613f0757fe5b60ff1681526020019450505050506000604051808303816000875af19250505090508015613f9b5784600160a060020a031686600160a060020a031688600160a060020a03167fc8e7ea09f288f5ec19ac88fb74928e1e3b8e33976067636454bcca8e89b288ea878760405180838152602001826002811115613f8657fe5b60ff1681526020019250505060405180910390a45b5060019695505050505050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115613ffd57336000908152600260209081526040808320600160a060020a0388168452909152812055614032565b61400d818463ffffffff613b7016565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b3360009081526005602052604081205460ff1615156140ef576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b6140f98484613c26565b905083600160a060020a031633600160a060020a03167f90bfe73c777234e28e547dab10018ff4a1a72792c298c700b5e4c22f8291234b85856040518083815260200180602001828103825283818151815260200191508051906020019080838360008381101561165e578181015183820152602001611646565b6000600160a060020a0384163014156141ed576040805160e560020a62461bcd02815260206004820152605f6024820152600080516020614ddf8339815191526044820152600080516020614dff8339815191526064820152600080516020614d9f833981519152608482015290519081900360a40190fd5b6141f8858585613904565b905083600160a060020a031633600160a060020a031686600160a060020a03167f231d0124a8336036805fce94d719c3d1b6df71528dde9d2d61a75d8735dc89bd8686604051808381526020018060200182810382528381815181526020019150805190602001908083836000838110156117ff5781810151838201526020016117e7565b3360009081526005602052604081205460ff1615156142d4576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020614e1f833981519152604482015290519081900360640190fd5b6142de84846146bb565b905083600160a060020a031633600160a060020a03167ffe626f25dbc6d473da376b3d741078b605d2840f9e9571c3f782e27aff54d65f85856040518083815260200180602001828103825283818151815260200191508051906020019080838360008381101561165e578181015183820152602001611646565b8181018281101561436657fe5b92915050565b6008546000908490839060ff16158061439d5750600160a060020a03821660009081526009602052604090205460ff165b15156143f3576040805160e560020a62461bcd02815260206004820181905260248201527f546865206163636f756e742069732063757272656e746c79206c6f636b65642e604482015290519081900360640190fd5b600160a060020a0382166000908152600a60209081526040808320549183905290912054614427908363ffffffff613b7016565b10156144a3576040805160e560020a62461bcd02815260206004820152602481018290527f5472616e7366657261626c65206c696d69742065786365656465642e2043686560448201527f636b2074686520737461747573206f6620746865206c6f636b2076616c75652e606482015290519081900360840190fd5b613b008686866147b6565b336000818152600d6020526040812054909190839042106145a457600160a060020a0382166000908152600b602090815260408083205491839052909120546144fd908363ffffffff613b7016565b101561459f576040805160e560020a62461bcd02815260206004820152605060248201527f5472616e7366657261626c65206c696d69742065786365656465642e2043686160448201527f6e6765207468652062616c616e6365206c6f636b2076616c756520666972737460648201527f20616e64207468656e2075736520697400000000000000000000000000000000608482015290519081900360a40190fd5b6146a0565b600160a060020a0382166000908152600c602090815260408083205491839052909120546145d8908363ffffffff613b7016565b10156146a0576040805160e560020a62461bcd02815260206004820152607560248201527f5472616e7366657261626c65206c696d69742065786365656465642e20506c6560448201527f617365206e6f746520746861742074686520726573696475616c206c6f636b2060648201527f76616c756520686173206368616e67656420616e642069742077696c6c20746160848201527f6b6520313220686f75727320746f206170706c792e000000000000000000000060a482015290519081900360c40190fd5b6146aa8585614a6e565b95945050505050565b6000903b1190565b6000600160a060020a038316151561472e576040805160e560020a62461bcd0281526020600482015260436024820152600080516020614dbf8339815191526044820152600080516020614e5f833981519152606482015260e960020a6239b99702608482015290519081900360a40190fd5b600154614741908363ffffffff61435916565b600155600160a060020a03831660009081526020819052604090205461476d908363ffffffff61435916565b600160a060020a038416600081815260208181526040808320949094558351868152935192939192600080516020614e3f8339815191529281900390910190a350600192915050565b6000600160a060020a038316151561483e576040805160e560020a62461bcd02815260206004820152603e60248201527f526563697069656e742061646472657373206973207a65726f2061646472657360448201527f732830292e20436865636b20746865206164647265737320616761696e2e0000606482015290519081900360840190fd5b600160a060020a0384166000908152602081905260409020548211156148d4576040805160e560020a62461bcd02815260206004820152602760248201527f5468652062616c616e6365206f66206163636f756e7420697320696e7375666660448201527f696369656e742e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115614975576040805160e560020a62461bcd02815260206004820152603060248201527f496e73756666696369656e7420746f6b656e7320617070726f7665642066726f60448201527f6d206163636f756e74206f776e65722e00000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03841660009081526020819052604090205461499e908363ffffffff613b7016565b600160a060020a0380861660009081526020819052604080822093909355908516815220546149d3908363ffffffff61435916565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054614a15908363ffffffff613b7016565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020614e3f833981519152929181900390910190a35060019392505050565b6008546000903390839060ff161580614a9f5750600160a060020a03821660009081526009602052604090205460ff165b1515614af5576040805160e560020a62461bcd02815260206004820181905260248201527f546865206163636f756e742069732063757272656e746c79206c6f636b65642e604482015290519081900360640190fd5b600160a060020a0382166000908152600a60209081526040808320549183905290912054614b29908363ffffffff613b7016565b1015614ba5576040805160e560020a62461bcd02815260206004820152602481018290527f5472616e7366657261626c65206c696d69742065786365656465642e2043686560448201527f636b2074686520737461747573206f6620746865206c6f636b2076616c75652e606482015290519081900360840190fd5b6146aa85856000600160a060020a0383161515614c32576040805160e560020a62461bcd02815260206004820152603e60248201527f526563697069656e742061646472657373206973207a65726f2061646472657360448201527f732830292e20436865636b20746865206164647265737320616761696e2e0000606482015290519081900360840190fd5b33600090815260208190526040902054821115614cbf576040805160e560020a62461bcd02815260206004820152602760248201527f5468652062616c616e6365206f66206163636f756e7420697320696e7375666660448201527f696369656e742e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33600090815260208190526040902054614cdf908363ffffffff613b7016565b3360009081526020819052604080822092909255600160a060020a03851681522054614d11908363ffffffff61435916565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020614e3f8339815191529281900390910190a350600192915050565b815481835581811115614d7f57600083815260209020614d7f918101908301614d84565b505050565b61147c91905b80821115613c225760008155600101614d8a56006e6f742073656e64206d6f6e657920746f207468697320616464726573732e0054686973206164647265737320746f20626520736574206973207a65726f2061546865207265636569766520616464726573732069732074686520436f6e746163742041646472657373206f66204b53746172436f696e2e20596f752063616e4f776e65722070726976696c656467652069732072657175697265642e000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6464726573732830292e20436865636b2074686520696e707574206164647265a165627a7a72305820b35a1bd1a5a3dc92bc14f0ce2e27c5990c0013605b49adb54315e36894bc6c5e0029"
}