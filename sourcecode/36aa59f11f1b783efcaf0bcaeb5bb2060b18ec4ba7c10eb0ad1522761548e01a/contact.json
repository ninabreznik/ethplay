{
  "address": "0x13e2d9c5b368a5054a84976c92254098f4fc108a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SimpleLottery",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\n// File: contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/token/ERC20Cutted.sol\n\npragma solidity ^0.4.24;\n\ncontract ERC20Cutted {\n\n  function balanceOf(address who) public view returns (uint256);\n\n  function transfer(address to, uint256 value) public returns (bool);\n\n}\n\n// File: contracts/SimpleLottery.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n\ncontract SimpleLottery is Ownable {\n\n    event TicketPurchased(uint lotIndex, uint ticketNumber, address player, uint ticketPrice);\n\n    event TicketWon(uint lotIndex, uint ticketNumber, address player, uint win);\n\n    using SafeMath for uint;\n\n    uint public percentRate = 100;\n\n    uint public ticketPrice = 500000000000000000;\n\n    uint public feePercent = 10;\n\n    uint public playersLimit = 10;\n\n    uint public ticketsPerPlayerLimit = 2;\n\n    address public feeWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\n\n    uint curLotIndex = 0;\n\n    struct Lottery {\n        uint summaryInvested;\n        uint rewardBase;\n        uint ticketsCount;\n        uint playersCount;\n        address winner;\n        mapping(address => uint) ticketsCounts;\n        mapping(uint => address) tickets;\n        mapping(address => uint) invested;\n        address[] players;\n    }\n\n    Lottery[] public lots;\n\n    modifier notContract(address to) {\n        uint codeLength;\n        assembly {\n            codeLength := extcodesize(to)\n        }\n        require(codeLength == 0, \"Contracts not supported!\");\n        _;\n    }\n\n    function setTicketsPerPlayerLimit(uint newTicketsPerPlayerLimit) public onlyOwner {\n        ticketsPerPlayerLimit = newTicketsPerPlayerLimit;\n    }\n\n    function setFeeWallet(address newFeeWallet) public onlyOwner {\n        feeWallet = newFeeWallet;\n    }\n\n    function setTicketPrice(uint newTicketPrice) public onlyOwner {\n        ticketPrice = newTicketPrice;\n    }\n\n    function setFeePercent(uint newFeePercent) public onlyOwner {\n        feePercent = newFeePercent;\n    }\n\n    function setPlayesrLimit(uint newPlayersLimit) public onlyOwner {\n        playersLimit = newPlayersLimit;\n    }\n\n    function() public payable notContract(msg.sender) {\n        require(msg.value >= ticketPrice, \"Not enough funds to buy ticket!\");\n\n        if (lots.length == 0) {\n            lots.length = 1;\n        }\n\n        Lottery storage lot = lots[curLotIndex];\n\n        uint numTicketsToBuy = msg.value.div(ticketPrice);\n\n        if (numTicketsToBuy > ticketsPerPlayerLimit) {\n            numTicketsToBuy = ticketsPerPlayerLimit;\n        }\n\n        uint toInvest = ticketPrice.mul(numTicketsToBuy);\n\n        if (lot.invested[msg.sender] == 0) {\n            lot.players.push(msg.sender);\n            lot.playersCount = lot.playersCount.add(1);\n        }\n\n        lot.invested[msg.sender] = lot.invested[msg.sender].add(toInvest);\n\n        for (uint i = 0; i < numTicketsToBuy; i++) {\n            lot.tickets[lot.ticketsCount] = msg.sender;\n            emit TicketPurchased(curLotIndex, lot.ticketsCount, msg.sender, ticketPrice);\n            lot.ticketsCount = lot.ticketsCount.add(1);\n            lot.ticketsCounts[msg.sender]++;\n        }\n\n        lot.summaryInvested = lot.summaryInvested.add(toInvest);\n\n        uint refund = msg.value.sub(toInvest);\n        msg.sender.transfer(refund);\n\n        if (lot.playersCount >= playersLimit) {\n            uint number = uint(keccak256(abi.encodePacked(block.number))) % lot.ticketsCount;\n            address winner = lot.tickets[number];\n            lot.winner = winner;\n            uint fee = lot.summaryInvested.mul(feePercent).div(percentRate);\n            feeWallet.transfer(fee);\n            winner.transfer(lot.rewardBase);\n            lot.rewardBase = lot.summaryInvested.sub(fee);\n            emit TicketWon(curLotIndex, number, lot.winner, lot.rewardBase);\n            curLotIndex++;\n        }\n    }\n\n    function retrieveTokens(address tokenAddr, address to) public onlyOwner {\n        ERC20Cutted token = ERC20Cutted(tokenAddr);\n        token.transfer(to, token.balanceOf(address(this)));\n    }\n\n}",
  "bytecode": "608060405260646001556706f05b59d3b200006002908155600a600381905560045560055560068054600160a060020a031990811673ea15adb66dc92a4bbccc8bf32fd25e2e86a2a7701790915560006007819055805490911633179055610c848061006c6000396000f3006080604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631209b1f681146105e95780631598165014610610578063332db0781461062a5780636341ca0b146106425780636e09674514610669578063715018a61461067e5780637ce3489b146106935780637f186b34146106ab5780637fd6f15c146106c05780638090114f146106d55780638da5cb5b146106ea57806390d49b9d1461071b578063ac6eb7ed1461073c578063f1648e8414610754578063f25f4b56146107a0578063f2fde38b146107b5575b60008080808080808033803b801561015e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f436f6e747261637473206e6f7420737570706f72746564210000000000000000604482015290519081900360640190fd5b6002543410156101cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f7420656e6f7567682066756e647320746f20627579207469636b65742100604482015290519081900360640190fd5b60085415156101e75760016101e5600882610b9d565b505b60086007548154811015156101f857fe5b9060005260206000209060090201995061021d600254346107d690919063ffffffff16565b985060055489111561022f5760055498505b600254610242908a63ffffffff6107ed16565b33600090815260078c016020526040902054909850151561029f5760088a0180546001818101835560009283526020909220018054600160a060020a0319163317905560038b01546102999163ffffffff61081616565b60038b01555b33600090815260078b0160205260409020546102c1908963ffffffff61081616565b33600090815260078c01602052604081209190915596505b8887101561039d576002808b018054600090815260068d0160209081526040918290208054600160a060020a031916339081179091556007549354945483519485529184019490945282820193909352606082019290925290517fc3b7539e996dc1d1252af1e3c72474162b7a9c7cc7411ca8905732eaf6fff3289181900360800190a160028a015461037390600163ffffffff61081616565b60028b015533600090815260058b01602052604090208054600190810190915596909601956102d9565b89546103af908963ffffffff61081616565b8a556103c1348963ffffffff61082316565b604051909650339087156108fc029088906000818181858888f193505050501580156103f1573d6000803e3d6000fd5b5060045460038b0154106105dd57896002015443604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106104535780518252601f199092019160209182019101610434565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209250505081151561048957fe5b06600081815260068c01602052604090205460048c018054600160a060020a031916600160a060020a0390921691821790556001546003548d549398509196506104eb9290916104df919063ffffffff6107ed16565b9063ffffffff6107d616565b600654604051919450600160a060020a03169084156108fc029085906000818181858888f19350505050158015610526573d6000803e3d6000fd5b5060018a0154604051600160a060020a0386169180156108fc02916000818181858888f19350505050158015610560573d6000803e3d6000fd5b508954610573908463ffffffff61082316565b60018b0181905560075460048c01546040805192835260208301899052600160a060020a0390911682820152606082019290925290517fa72bc6a2e384f433f6cc57d7e229394eb69f16adee24dcc00871e94bc5ab3ffe9181900360800190a16007805460010190555b50505050505050505050005b3480156105f557600080fd5b506105fe610835565b60408051918252519081900360200190f35b34801561061c57600080fd5b5061062860043561083b565b005b34801561063657600080fd5b50610628600435610857565b34801561064e57600080fd5b50610628600160a060020a0360043581169060243516610873565b34801561067557600080fd5b506105fe6109bc565b34801561068a57600080fd5b506106286109c2565b34801561069f57600080fd5b50610628600435610a21565b3480156106b757600080fd5b506105fe610a3d565b3480156106cc57600080fd5b506105fe610a43565b3480156106e157600080fd5b506105fe610a49565b3480156106f657600080fd5b506106ff610a4f565b60408051600160a060020a039092168252519081900360200190f35b34801561072757600080fd5b50610628600160a060020a0360043516610a5e565b34801561074857600080fd5b50610628600435610a97565b34801561076057600080fd5b5061076c600435610ab3565b604080519586526020860194909452848401929092526060840152600160a060020a03166080830152519081900360a00190f35b3480156107ac57600080fd5b506106ff610afb565b3480156107c157600080fd5b50610628600160a060020a0360043516610b0a565b600081838115156107e357fe5b0490505b92915050565b60008215156107fe575060006107e7565b5081810281838281151561080e57fe5b04146107e757fe5b818101828110156107e757fe5b60008282111561082f57fe5b50900390565b60025481565b600054600160a060020a0316331461085257600080fd5b600255565b600054600160a060020a0316331461086e57600080fd5b600555565b60008054600160a060020a0316331461088b57600080fd5b50604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518391600160a060020a0383169163a9059cbb91859184916370a082319160248083019260209291908290030181600087803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b505050506040513d602081101561092357600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561098b57600080fd5b505af115801561099f573d6000803e3d6000fd5b505050506040513d60208110156109b557600080fd5b5050505050565b60055481565b600054600160a060020a031633146109d957600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b600054600160a060020a03163314610a3857600080fd5b600355565b60045481565b60035481565b60015481565b600054600160a060020a031681565b600054600160a060020a03163314610a7557600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a03163314610aae57600080fd5b600455565b6008805482908110610ac157fe5b60009182526020909120600990910201805460018201546002830154600384015460049094015492945090929091600160a060020a031685565b600654600160a060020a031681565b600054600160a060020a03163314610b2157600080fd5b610b2a81610b2d565b50565b600160a060020a0381161515610b4257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b815481835581811115610bc957600902816009028360005260206000209182019101610bc99190610bce565b505050565b610c2291905b80821115610c1e576000808255600182018190556002820181905560038201819055600482018054600160a060020a0319169055610c156008830182610c25565b50600901610bd4565b5090565b90565b5080546000825590600052602060002090810190610b2a9190610c2291905b80821115610c1e5760008155600101610c445600a165627a7a7230582086e64d842b5100b4ae93d0c31b9bcd6fcbc5b66d1d05e4f575c906b4339fafe60029"
}