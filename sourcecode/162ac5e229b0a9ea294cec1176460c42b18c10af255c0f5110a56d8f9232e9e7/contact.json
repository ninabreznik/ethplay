{
  "address": "0x121551ec9912a1a789a9b9570a35c89380d6d537",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MainToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-19\n*/\n\n/*\n * This file was generated by MyWish Platform (https://mywish.io/)\n * The complete code could be found at https://github.com/MyWishPlatform/\n * Copyright (C) 2018 MyWish\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\n\ncontract FreezableToken is StandardToken {\n    // freezing chains\n    mapping (bytes32 => uint64) internal chains;\n    // freezing amounts for each chain\n    mapping (bytes32 => uint) internal freezings;\n    // total freezing balance per address\n    mapping (address => uint) internal freezingBalance;\n\n    event Freezed(address indexed to, uint64 release, uint amount);\n    event Released(address indexed owner, uint amount);\n\n\n    /**\n     * @dev Gets the balance of the specified address include freezing tokens.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return super.balanceOf(_owner) + freezingBalance[_owner];\n    }\n\n    /**\n     * @dev Gets the balance of the specified address without freezing tokens.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\n        return super.balanceOf(_owner);\n    }\n\n    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\n        return freezingBalance[_owner];\n    }\n\n    /**\n     * @dev gets freezing count\n     * @param _addr Address of freeze tokens owner.\n     */\n    function freezingCount(address _addr) public view returns (uint count) {\n        uint64 release = chains[toKey(_addr, 0)];\n        while (release != 0) {\n            count ++;\n            release = chains[toKey(_addr, release)];\n        }\n    }\n\n    /**\n     * @dev gets freezing end date and freezing balance for the freezing portion specified by index.\n     * @param _addr Address of freeze tokens owner.\n     * @param _index Freezing portion index. It ordered by release date descending.\n     */\n    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\n        for (uint i = 0; i < _index + 1; i ++) {\n            _release = chains[toKey(_addr, _release)];\n            if (_release == 0) {\n                return;\n            }\n        }\n        _balance = freezings[toKey(_addr, _release)];\n    }\n\n    /**\n     * @dev freeze your tokens to the specified address.\n     *      Be careful, gas usage is not deterministic,\n     *      and depends on how many freezes _to address already has.\n     * @param _to Address to which token will be freeze.\n     * @param _amount Amount of token to freeze.\n     * @param _until Release date, must be in future.\n     */\n    function freezeTo(address _to, uint _amount, uint64 _until) public {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n\n        bytes32 currentKey = toKey(_to, _until);\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freeze(_to, _until);\n        Transfer(msg.sender, _to, _amount);\n        emit Freezed(_to, _until, _amount);\n    }\n\n    /**\n     * @dev release first available freezing tokens.\n     */\n    function releaseOnce() public {\n        bytes32 headKey = toKey(msg.sender, 0);\n        uint64 head = chains[headKey];\n        require(head != 0);\n        require(uint64(block.timestamp) > head);\n        bytes32 currentKey = toKey(msg.sender, head);\n\n        uint64 next = chains[currentKey];\n\n        uint amount = freezings[currentKey];\n        delete freezings[currentKey];\n\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\n\n        if (next == 0) {\n            delete chains[headKey];\n        }\n        else {\n            chains[headKey] = next;\n            delete chains[currentKey];\n        }\n        emit Released(msg.sender, amount);\n    }\n\n    /**\n     * @dev release all available for release freezing tokens. Gas usage is not deterministic!\n     * @return how many tokens was released\n     */\n    function releaseAll() public returns (uint tokens) {\n        uint release;\n        uint balance;\n        (release, balance) = getFreezing(msg.sender, 0);\n        while (release != 0 && block.timestamp > release) {\n            releaseOnce();\n            tokens += balance;\n            (release, balance) = getFreezing(msg.sender, 0);\n        }\n    }\n\n    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\n        // WISH masc to increase entropy\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\n        assembly {\n            result := or(result, mul(_addr, 0x10000000000000000))\n            result := or(result, _release)\n        }\n    }\n\n    function freeze(address _to, uint64 _until) internal {\n        require(_until > block.timestamp);\n        bytes32 key = toKey(_to, _until);\n        bytes32 parentKey = toKey(_to, uint64(0));\n        uint64 next = chains[parentKey];\n\n        if (next == 0) {\n            chains[parentKey] = _until;\n            return;\n        }\n\n        bytes32 nextKey = toKey(_to, next);\n        uint parent;\n\n        while (next != 0 && _until > next) {\n            parent = next;\n            parentKey = nextKey;\n\n            next = chains[nextKey];\n            nextKey = toKey(_to, next);\n        }\n\n        if (_until == next) {\n            return;\n        }\n\n        if (next != 0) {\n            chains[key] = next;\n        }\n\n        chains[parentKey] = _until;\n    }\n}\n\n/**\n* @title Contract that will work with ERC223 tokens.\n*/\n\ncontract ERC223Receiver {\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract ERC223Basic is ERC20Basic {\n    function transfer(address to, uint value, bytes data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\n\ncontract SuccessfulERC223Receiver is ERC223Receiver {\n    event Invoked(address from, uint value, bytes data);\n\n    function tokenFallback(address _from, uint _value, bytes _data) public {\n        emit Invoked(_from, _value, _data);\n    }\n}\n\ncontract FailingERC223Receiver is ERC223Receiver {\n    function tokenFallback(address, uint, bytes) public {\n        revert();\n    }\n}\n\ncontract ERC223ReceiverWithoutTokenFallback {\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\n\ncontract FreezableMintableToken is FreezableToken, MintableToken {\n    /**\n     * @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\n     *      Be careful, gas usage is not deterministic,\n     *      and depends on how many freezes _to address already has.\n     * @param _to Address to which token will be freeze.\n     * @param _amount Amount of token to mint and freeze.\n     * @param _until Release date, must be in future.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintAndFreeze(address _to, uint _amount, uint64 _until) onlyOwner canMint public returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n\n        bytes32 currentKey = toKey(_to, _until);\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freeze(_to, _until);\n        emit Mint(_to, _amount);\n        emit Freezed(_to, _until, _amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n}\n\ncontract Consts {\n    uint constant TOKEN_DECIMALS = 18;\n    uint8 constant TOKEN_DECIMALS_UINT8 = 18;\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n\n    string constant TOKEN_NAME = \"EJACOIN\";\n    string constant TOKEN_SYMBOL = \"EJAC\";\n    bool constant PAUSED = false;\n    address constant TARGET_USER = 0xB030dC3457e03e6a5c2e9c428Cbd8F104B5282d5;\n    \n    bool constant CONTINUE_MINTING = false;\n}\n\n\n\n\n/**\n * @title Reference implementation of the ERC223 standard token.\n */\ncontract ERC223Token is ERC223Basic, BasicToken, FailingERC223Receiver {\n    using SafeMath for uint;\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        uint codeLength;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly.\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength > 0) {\n            ERC223Receiver receiver = ERC223Receiver(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        bytes memory empty;\n        return transfer(_to, _value, empty);\n    }\n}\n\n\ncontract MainToken is Consts, FreezableMintableToken, BurnableToken, Pausable\n    \n    , ERC223Token\n    \n{\n    \n    event Initialized();\n    bool public initialized = false;\n\n    function MainToken() public {\n        init();\n        transferOwnership(TARGET_USER);\n    }\n\n    function init() private {\n        require(!initialized);\n        initialized = true;\n\n        if (PAUSED) {\n            pause();\n        }\n\n        \n        address[1] memory addresses = [address(0xb030dc3457e03e6a5c2e9c428cbd8f104b5282d5)];\n        uint[1] memory amounts = [uint(250000000000000000000000000)];\n        uint64[1] memory freezes = [uint64(0)];\n\n        for (uint i = 0; i < addresses.length; i++) {\n            if (freezes[i] == 0) {\n                mint(addresses[i], amounts[i]);\n            } else {\n                mintAndFreeze(addresses[i], amounts[i], freezes[i]);\n            }\n        }\n        \n\n        if (!CONTINUE_MINTING) {\n            finishMinting();\n        }\n\n        emit Initialized();\n    }\n    \n\n    function name() pure public returns (string _name) {\n        return TOKEN_NAME;\n    }\n\n    function symbol() pure public returns (string _symbol) {\n        return TOKEN_SYMBOL;\n    }\n\n    function decimals() pure public returns (uint8 _decimals) {\n        return TOKEN_DECIMALS_UINT8;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n        require(!paused);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool _success) {\n        require(!paused);\n        return super.transfer(_to, _value);\n    }\n}",
  "bytecode": "60806040526006805460a060020a62ffffff02191690553480156200002357600080fd5b5060068054600160a060020a031916331790556200004964010000000062000077810204565b6200007173b030dc3457e03e6a5c2e9c428cbd8f104b5282d56401000000006200023a810204565b62000869565b620000816200084a565b6200008b6200084a565b620000956200084a565b600654600090760100000000000000000000000000000000000000000000900460ff1615620000c357600080fd5b6006805460b060020a60ff0219167601000000000000000000000000000000000000000000001790555050604080516020818101835273b030dc3457e03e6a5c2e9c428cbd8f104b5282d58252825180820184526acecb8f27f4200f3a0000008152835191820190935260008082529194509192505b6001811015620001f7578181600181106200015057fe5b60200201516001604060020a03161515620001a3576200019c8482600181106200017657fe5b60200201518483600181106200018857fe5b6020020151640100000000620002c4810204565b50620001ee565b620001ec848260018110620001b457fe5b6020020151848360018110620001c657fe5b6020020151848460018110620001d857fe5b6020020151640100000000620003d4810204565b505b60010162000139565b6200020a640100000000620005a7810204565b506040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c890600090a150505050565b600654600160a060020a031633146200025257600080fd5b600160a060020a03811615156200026857600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360068054600160a060020a031916600160a060020a0392909216919091179055565b600654600090600160a060020a03163314620002df57600080fd5b60065474010000000000000000000000000000000000000000900460ff16156200030857600080fd5b600054620003259083640100000000620016946200064182021704565b6000908155600160a060020a0384168152600160205260409020546200035a9083640100000000620016946200064182021704565b600160a060020a03841660008181526001602090815260409182902093909355805185815290519192600080516020620022c583398151915292918290030190a2604080518381529051600160a060020a03851691600091600080516020620022a58339815191529181900360200190a350600192915050565b6006546000908190600160a060020a03163314620003f157600080fd5b60065474010000000000000000000000000000000000000000900460ff16156200041a57600080fd5b600054620004379085640100000000620016946200064182021704565b60005562000458856001604060020a03851664010000000062000658810204565b600081815260046020526040902054909150620004849085640100000000620016946200064182021704565b600082815260046020908152604080832093909355600160a060020a0388168252600590522054620004c59085640100000000620016946200064182021704565b600160a060020a038616600090815260056020526040902055620004f385846401000000006200068c810204565b604080518581529051600160a060020a03871691600080516020620022c5833981519152919081900360200190a2604080516001604060020a0385168152602081018690528151600160a060020a038816927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a2604080518581529051600160a060020a038716913391600080516020620022a58339815191529181900360200190a3506001949350505050565b600654600090600160a060020a03163314620005c257600080fd5b60065474010000000000000000000000000000000000000000900460ff1615620005eb57600080fd5b6006805460a060020a60ff021916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b6000828201838110156200065157fe5b9392505050565b6801000000000000000091909102177f57495348000000000000000000000000000000000000000000000000000000001790565b600080808080426001604060020a03871611620006a857600080fd5b620006c6876001604060020a03881664010000000062000658810204565b9450620006de87600064010000000062000658810204565b6000818152600360205260409020549094506001604060020a031692508215156200073057600084815260036020526040902080546001604060020a0319166001604060020a03881617905562000841565b6200074e876001604060020a03851664010000000062000658810204565b91505b6001604060020a038316158015906200077b5750826001604060020a0316866001604060020a0316115b15620007c057506000818152600360205260409020549092506001604060020a0390811691839116620007b8878464010000000062000658810204565b915062000751565b826001604060020a0316866001604060020a03161415620007e15762000841565b6001604060020a038316156200081957600085815260036020526040902080546001604060020a0319166001604060020a0385161790555b600084815260036020526040902080546001604060020a0319166001604060020a0388161790555b50505050505050565b6020604051908101604052806001906020820280388339509192915050565b611a2c80620008796000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d6f730811461018f57806305d2035b146101d757806306fdde0314610200578063095ea7b31461028a5780630bb2cd6b146102ae578063158ef93e146102df57806317a950ac146102f457806318160ddd1461032757806323b872dd1461033c578063313ce567146103665780633be1e952146103915780633f4ba83a146103c457806340c10f19146103d957806342966c68146103fd5780635be7fde8146104155780635c975abb1461042a578063661884631461043f57806366a92cda1461046357806370a08231146104785780637d64bcb4146104995780638456cb59146104ae5780638da5cb5b146104c357806395d89b41146104f4578063a9059cbb14610509578063be45fd621461052d578063c0ee0b8a14610596578063ca63b5b8146105ff578063d73dd62314610620578063d8aeedf514610644578063dd62ed3e14610665578063f2fde38b1461068c575b600080fd5b34801561019b57600080fd5b506101b3600160a060020a03600435166024356106ad565b6040805167ffffffffffffffff909316835260208301919091528051918290030190f35b3480156101e357600080fd5b506101ec61073a565b604080519115158252519081900360200190f35b34801561020c57600080fd5b5061021561074a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024f578181015183820152602001610237565b50505050905090810190601f16801561027c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029657600080fd5b506101ec600160a060020a0360043516602435610781565b3480156102ba57600080fd5b506101ec600160a060020a036004351660243567ffffffffffffffff604435166107e7565b3480156102eb57600080fd5b506101ec610985565b34801561030057600080fd5b50610315600160a060020a03600435166109a8565b60408051918252519081900360200190f35b34801561033357600080fd5b506103156109b9565b34801561034857600080fd5b506101ec600160a060020a03600435811690602435166044356109bf565b34801561037257600080fd5b5061037b6109ec565b6040805160ff9092168252519081900360200190f35b34801561039d57600080fd5b506103c2600160a060020a036004351660243567ffffffffffffffff604435166109f1565b005b3480156103d057600080fd5b506103c2610b65565b3480156103e557600080fd5b506101ec600160a060020a0360043516602435610bde565b34801561040957600080fd5b506103c2600435610cd7565b34801561042157600080fd5b50610315610d95565b34801561043657600080fd5b506101ec610dfa565b34801561044b57600080fd5b506101ec600160a060020a0360043516602435610e0a565b34801561046f57600080fd5b506103c2610efa565b34801561048457600080fd5b50610315600160a060020a03600435166110a0565b3480156104a557600080fd5b506101ec6110c9565b3480156104ba57600080fd5b506103c261114d565b3480156104cf57600080fd5b506104d86111cb565b60408051600160a060020a039092168252519081900360200190f35b34801561050057600080fd5b506102156111da565b34801561051557600080fd5b506101ec600160a060020a0360043516602435611211565b34801561053957600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101ec948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061123c9650505050505050565b3480156105a257600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103c2948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061018a9650505050505050565b34801561060b57600080fd5b50610315600160a060020a0360043516611466565b34801561062c57600080fd5b506101ec600160a060020a03600435166024356114ec565b34801561065057600080fd5b50610315600160a060020a0360043516611585565b34801561067157600080fd5b50610315600160a060020a03600435811690602435166115a0565b34801561069857600080fd5b506103c2600160a060020a03600435166115cb565b600080805b8360010181101561070657600360006106d5878667ffffffffffffffff16611660565b815260208101919091526040016000205467ffffffffffffffff1692508215156106fe57610732565b6001016106b2565b6004600061071e878667ffffffffffffffff16611660565b815260208101919091526040016000205491505b509250929050565b60065460a060020a900460ff1681565b60408051808201909152600781527f454a41434f494e00000000000000000000000000000000000000000000000000602082015290565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6006546000908190600160a060020a0316331461080357600080fd5b60065460a060020a900460ff161561081a57600080fd5b60005461082d908563ffffffff61169416565b6000556108448567ffffffffffffffff8516611660565b600081815260046020526040902054909150610866908563ffffffff61169416565b600082815260046020908152604080832093909355600160a060020a038816825260059052205461089d908563ffffffff61169416565b600160a060020a0386166000908152600560205260409020556108c085846116a3565b604080518581529051600160a060020a038716917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a26040805167ffffffffffffffff85168152602081018690528151600160a060020a038816927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a2604080518581529051600160a060020a0387169133916000805160206119e18339815191529181900360200190a3506001949350505050565b600654760100000000000000000000000000000000000000000000900460ff1681565b60006109b38261183d565b92915050565b60005481565b60065460009060a860020a900460ff16156109d957600080fd5b6109e4848484611858565b949350505050565b601290565b6000600160a060020a0384161515610a0857600080fd5b33600090815260016020526040902054831115610a2457600080fd5b33600090815260016020526040902054610a44908463ffffffff6119bf16565b33600090815260016020526040902055610a688467ffffffffffffffff8416611660565b600081815260046020526040902054909150610a8a908463ffffffff61169416565b600082815260046020908152604080832093909355600160a060020a0387168252600590522054610ac1908463ffffffff61169416565b600160a060020a038516600090815260056020526040902055610ae484836116a3565b604080518481529051600160a060020a0386169133916000805160206119e18339815191529181900360200190a36040805167ffffffffffffffff84168152602081018590528151600160a060020a038716927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a250505050565b600654600160a060020a03163314610b7c57600080fd5b60065460a860020a900460ff161515610b9457600080fd5b6006805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600654600090600160a060020a03163314610bf857600080fd5b60065460a060020a900460ff1615610c0f57600080fd5b600054610c22908363ffffffff61169416565b6000908155600160a060020a038416815260016020526040902054610c4d908363ffffffff61169416565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206119e18339815191529181900360200190a350600192915050565b6000808211610ce557600080fd5b33600090815260016020526040902054821115610d0157600080fd5b5033600081815260016020526040902054610d22908363ffffffff6119bf16565b600160a060020a03821660009081526001602052604081209190915554610d4f908363ffffffff6119bf16565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b6000806000610da53360006106ad565b67ffffffffffffffff909116925090505b8115801590610dc457508142115b15610df557610dd1610efa565b91820191610de03360006106ad565b67ffffffffffffffff90911692509050610db6565b505090565b60065460a860020a900460ff1681565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610e5f57336000908152600260209081526040808320600160a060020a0388168452909152812055610e94565b610e6f818463ffffffff6119bf16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000806000806000610f0d336000611660565b60008181526003602052604090205490955067ffffffffffffffff169350831515610f3757600080fd5b8367ffffffffffffffff164267ffffffffffffffff16111515610f5957600080fd5b610f6d338567ffffffffffffffff16611660565b60008181526003602090815260408083205460048352818420805490859055338552600190935292205492955067ffffffffffffffff90911693509150610fba908263ffffffff61169416565b33600090815260016020908152604080832093909355600590522054610fe6908263ffffffff6119bf16565b3360009081526005602052604090205567ffffffffffffffff82161515611029576000858152600360205260409020805467ffffffffffffffff19169055611063565b600085815260036020526040808220805467ffffffffffffffff861667ffffffffffffffff19918216179091558583529120805490911690555b60408051828152905133917fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e919081900360200190a25050505050565b600160a060020a0381166000908152600560205260408120546110c28361183d565b0192915050565b600654600090600160a060020a031633146110e357600080fd5b60065460a060020a900460ff16156110fa57600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600654600160a060020a0316331461116457600080fd5b60065460a860020a900460ff161561117b57600080fd5b6006805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600654600160a060020a031681565b60408051808201909152600481527f454a414300000000000000000000000000000000000000000000000000000000602082015290565b60065460009060a860020a900460ff161561122b57600080fd5b61123583836119d1565b9392505050565b33600090815260016020526040812054843b908290611261908663ffffffff6119bf16565b3360009081526001602052604080822092909255600160a060020a03881681522054611293908663ffffffff61169416565b600160a060020a0387166000908152600160205260408120919091558211156113a557506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018790526060604484019081528651606485015286518994600160a060020a0386169463c0ee0b8a9490938b938b9360840190602085019080838360005b8381101561133e578181015183820152602001611326565b50505050905090810190601f16801561136b5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561138c57600080fd5b505af11580156113a0573d6000803e3d6000fd5b505050505b85600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1687876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561141f578181015183820152602001611407565b50505050905090810190601f16801561144c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a350600195945050505050565b60008060036000611478856000611660565b815260208101919091526040016000205467ffffffffffffffff1690505b67ffffffffffffffff8116156114e657600190910190600360006114c48567ffffffffffffffff8516611660565b815260208101919091526040016000205467ffffffffffffffff169050611496565b50919050565b336000908152600260209081526040808320600160a060020a0386168452909152812054611520908363ffffffff61169416565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526005602052604090205490565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600654600160a060020a031633146115e257600080fd5b600160a060020a03811615156115f757600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6801000000000000000091909102177f57495348000000000000000000000000000000000000000000000000000000001790565b60008282018381101561123557fe5b6000808080804267ffffffffffffffff8716116116bf57600080fd5b6116d3878767ffffffffffffffff16611660565b94506116e0876000611660565b60008181526003602052604090205490945067ffffffffffffffff169250821515611733576000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff8816179055611834565b611747878467ffffffffffffffff16611660565b91505b67ffffffffffffffff83161580159061177657508267ffffffffffffffff168667ffffffffffffffff16115b156117af575060008181526003602052604090205490925067ffffffffffffffff908116918391166117a88784611660565b915061174a565b8267ffffffffffffffff168667ffffffffffffffff1614156117d057611834565b67ffffffffffffffff83161561180a576000858152600360205260409020805467ffffffffffffffff191667ffffffffffffffff85161790555b6000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff88161790555b50505050505050565b600160a060020a031660009081526001602052604090205490565b6000600160a060020a038316151561186f57600080fd5b600160a060020a03841660009081526001602052604090205482111561189457600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156118c457600080fd5b600160a060020a0384166000908152600160205260409020546118ed908363ffffffff6119bf16565b600160a060020a038086166000908152600160205260408082209390935590851681522054611922908363ffffffff61169416565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054611966908363ffffffff6119bf16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391926000805160206119e1833981519152929181900390910190a35060019392505050565b6000828211156119cb57fe5b50900390565b600060606109e484848361123c5600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820df692c42e2d27970c897bb7a45bc895f5e7d4d48488a8c6ec45c49fdf38d75910029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"
}