{
  "address": "0xe467b8d9b0c69f7d497b8f002a9e7f4b61c84c67",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Amber",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-18\n*/\n\npragma solidity 0.4.24;\n\nlibrary SafeMathExt{\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function pow(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (b == 0){\n      return 1;\n    }\n    if (b == 1){\n      return a;\n    }\n    uint256 c = a;\n    for(uint i = 1; i<b; i++){\n      c = mul(c, a);\n    }\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function roundUp(uint256 a, uint256 b) public pure returns(uint256){\n    // ((a + b - 1) / b) * b\n    uint256 c = (mul(div(sub(add(a, b), 1), b), b));\n    return c;\n  }\n}\n\ncontract BadgeFactoryInterface{\n\tfunction _initBadges(address admin_, uint256 badgeBasePrice_, uint256 badgeStartMultiplier_, uint256 badgeStartQuantity_) external;\n\tfunction _createNewBadge(address owner_, uint256 price_) external;\n\tfunction _setOwner(uint256 badgeID_, address owner_) external;\n\tfunction getOwner(uint256 badgeID_) public view returns(address);\n\tfunction _increasePrice(uint256 badgeID_) external;\n\tfunction getPrice(uint256 badgeID_) public view returns(uint256);\n\tfunction _increaseTotalDivis(uint256 badgeID_, uint256 divis_) external;\n\tfunction getTotalDivis(uint256 badgeID_) public view returns(uint256);\n\tfunction _setBuyTime(uint256 badgeID_, uint32 timeStamp_) external;\n\tfunction getBuyTime(uint256 badgeID_) public view returns(uint32);\n\tfunction getCreationTime(uint256 badgeID_) public view returns(uint32);\n\tfunction getChainLength() public view returns(uint256);\n\tfunction getRandomBadge(uint256 max_, uint256 i_) external view returns(uint256);\n    function getRandomFactor() external returns(uint256);\n}\n\ncontract TeamAmberInterface{\n    function distribute() public payable;\n}\n\ncontract Amber{\n\tusing SafeMathExt for uint256;\n    /*===============================================================================\n    =                      DATA SET                     DATA SET                    =\n    ===============================================================================*/\n    /*==============================\n    =          INTERFACES          =\n    ==============================*/\n    BadgeFactoryInterface internal _badgeFactory;\n    TeamAmberInterface internal _teamAmber;\n\n    /*==============================\n    =          CONSTANTS           =\n    ==============================*/\n    uint256 internal constant GWEI = 10**9;\n    uint256 internal constant FINNEY = 10**15;\n    uint256 internal constant ETH = 10**18;\n    uint256 internal constant _badgeBasePrice = 25 * FINNEY;\n    uint256 internal constant _luckyWinners = 5;\n    uint256 internal constant _sharePreviousOwnerRatio = 50;\n    uint256 internal constant _shareReferalRatio = 5;\n    uint256 internal constant _shareDistributionRatio = 45;\n\n    /*==============================\n    =          VARIABLES           =\n    ==============================*/\n    address internal _contractOwner;\n    address internal _admin;\n    uint256 internal _startTime;\n    uint256 internal _initCounter;\n\n    /*==============================\n    =            BADGES            =\n    ==============================*/\n    struct Badge{\n        address owner;\n        uint256 price;\n        uint256 totalDivis;\n    }\n\n    Badge[] private badges;\n\n    /*==============================\n    =        USER MAPPINGS         =\n    ==============================*/\n    mapping(address => uint256) private _splitProfit;\n    mapping(address => uint256) private _flipProfit;\n    mapping(address => uint256) private _waypointProfit;\n    mapping(address => address) private _referer;\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onContractStart(uint256 startTime_);\n    event onRefererSet(address indexed user_, address indexed referer_);\n    event onBadgeBuy(uint256 indexed badgeID_, address previousOwner_, address indexed buyer_, address indexed referer_, uint256 price_, uint256 newPrice_);\n    event onWithdraw(address indexed receiver_, uint256 splitProfit_, uint256 flipProfit_, uint256 waypointProfit_);\n\n    /*==============================\n    =          MODIFIERS           =\n    ==============================*/\n    modifier onlyContractOwner(){\n    \trequire(msg.sender == _contractOwner, 'Sender is not the contract owner.');\n    \t_;\n    }\n    modifier isNotAContract(){\n        require (msg.sender == tx.origin, 'Contracts are not allowed to interact.');\n        _;\n    }\n    modifier isRunning(){\n    \trequire(_startTime != 0 && _startTime <= now, 'The contract is not running yet.');\n    \t_;\n    }\n\n    /*===============================================================================\n    =                       PURE AMBER                       PURE AMBER             =\n    ===============================================================================*/\n    function isValidBuy(uint256 price_, uint256 msgValue_) public pure returns(bool){\n        return (price_ == msgValue_);\n    }\n\n    function refererAllowed(address msgSender_, address currentReferer_, address newReferer_) public pure returns(bool){\n        return (addressNotSet(currentReferer_) && isAddress(newReferer_) && isNotSelf(msgSender_, newReferer_));\n    }\n\n    function addressNotSet(address address_) public pure returns(bool){\n        return (address_ == 0x0);\n    }\n\n    function isAddress(address address_) public pure returns(bool){\n        return (address_ != 0x0);\n    }\n\n    function isNotSelf(address msgSender_, address compare_) public pure returns(bool){\n        return (msgSender_ != compare_);\n    }\n\n    function isFirstBadgeEle(uint256 badgeID_) public pure returns(bool){\n        return (badgeID_ == 0);\n    }\n\n    function isLastBadgeEle(uint256 badgeID_, uint256 badgeLength_) public pure returns(bool){\n        assert(badgeID_ <= SafeMathExt.sub(badgeLength_, 1));\n        return (badgeID_ == SafeMathExt.sub(badgeLength_, 1));\n    }\n\n    function calcShare(uint256 msgValue_, uint256 ratio_) public pure returns(uint256){\n        assert(ratio_ <= 100 && msgValue_ >= 0);\n        return (msgValue_ * ratio_) / 100;\n    }\n\n    /*===============================================================================\n    =                     BADGE FACTORY                     BADGE FACTORY           =\n    ===============================================================================*/\n    function _initBadges(address[] owner_, uint256[] price_, uint256[] totalDivis_) internal{\n        for (uint256 i = 0; i < owner_.length; i++) {\n            badges.push(Badge(owner_[i], price_[i], totalDivis_[i]));\n        }\n    }\n\n    function _createNewBadge(address owner_, uint256 price_) internal{\n        badges.push(Badge(owner_, price_, 0));\n    }\n\n    function _setOwner(uint256 badgeID_, address owner_) internal{\n        badges[badgeID_].owner = owner_;\n    }\n\n    function getOwner(uint256 badgeID_) public view returns(address){\n        return badges[badgeID_].owner;\n    }\n\n    function _increasePrice(uint256 badgeID_) internal{\n        uint256 newPrice = (badges[badgeID_].price * _badgeFactory.getRandomFactor()) / 100;\n        badges[badgeID_].price = SafeMathExt.roundUp(newPrice, 10000 * GWEI);\n    }\n\n    function getPrice(uint256 badgeID_) public view returns(uint256){\n        return badges[badgeID_].price;\n    }\n\n    function _increaseTotalDivis(uint256 badgeID_, uint256 divis_) internal{\n        badges[badgeID_].totalDivis += divis_;\n    }\n\n    function getTotalDivis(uint256 badgeID_) public view returns(uint256){\n        return badges[badgeID_].totalDivis;\n    }\n\n    function getChainLength() public view returns(uint256){\n        return badges.length;\n    }\n\n    /*===============================================================================\n    =                       FUNCTIONS                       FUNCTIONS               =\n    ===============================================================================*/\n    /*==============================\n    =           OWNER ONLY         =\n    ==============================*/\n    constructor(address admin_, address teamAmberAddress_) public{\n    \t_contractOwner = msg.sender;\n        _admin = admin_;\n        _teamAmber = TeamAmberInterface(teamAmberAddress_);\n    }\n\n    function initGame(address badgesFactoryAddress_, address[] owner_, uint256[] price_, uint256[] totalDivis_) external onlyContractOwner{\n        require(_startTime == 0);\n        assert(owner_.length == price_.length && price_.length == totalDivis_.length);\n\n        if(_badgeFactory == address(0x0)){\n            _badgeFactory = BadgeFactoryInterface(badgesFactoryAddress_);\n        }\n        _initBadges(owner_, price_, totalDivis_);\n    }\n\n    function initReferrals(address[] refArray_) external onlyContractOwner{\n        require(_startTime == 0);\n        for (uint256 i = 0; i < refArray_.length; i+=2) {\n            _refererUpdate(refArray_[i], refArray_[i+1]);\n        }\n    }\n\n    function _startContract(uint256 delay_) external onlyContractOwner{\n    \trequire(_startTime == 0);\n        _startTime = now + delay_;\n\n        emit onContractStart(_startTime);\n    }\n\n    /*==============================\n    =             BUY              =\n    ==============================*/\n    //Hex Data: 0x7deb6025\n    function buy(uint256 badgeID_, address newReferer_) public payable isNotAContract isRunning{\n    \t_refererUpdate(msg.sender, newReferer_);\n    \t_buy(badgeID_, newReferer_, msg.sender, msg.value);\n    }\n\n    function _buy(uint256 badgeID_, address newReferer_, address msgSender_, uint256 msgValue_) internal{\n        address previousOwner = getOwner(badgeID_);\n        require(isNotSelf(msgSender_, getOwner(badgeID_)), 'You can not buy from yourself.');\n        require(isValidBuy(getPrice(badgeID_), msgValue_), 'It is not a valid buy.');        \n\n        _diviSplit(badgeID_, previousOwner, msgSender_, msgValue_);\n        _extendBadges(badgeID_, msgSender_, _badgeBasePrice);\n        _badgeOwnerChange(badgeID_, msgSender_);\n        _increasePrice(badgeID_);\n\n        emit onBadgeBuy(badgeID_, previousOwner, msgSender_, newReferer_, msgValue_, getPrice(badgeID_));\n    }\n\n    function _refererUpdate(address user_, address newReferer_) internal{\n    \tif (refererAllowed(user_, _referer[user_], newReferer_)){\n    \t\t_referer[user_] = newReferer_;\n    \t\temit onRefererSet(user_, newReferer_);\n    \t}\n    }\n\n    /*==============================\n    =         BADGE SYSTEM         =\n    ==============================*/\n    function _extendBadges(uint256 badgeID_, address owner_, uint256 price_) internal{\n        if (isLastBadgeEle(badgeID_, getChainLength())){\n            _createNewBadge(owner_, price_);\n        }\n    }\n\n    function _badgeOwnerChange(uint256 badgeID_, address newOwner_) internal{\n        _setOwner(badgeID_, newOwner_);\n    }\n\n    /*==============================\n    =          DIVI SPLIT          =\n    ==============================*/\n    function _diviSplit(uint256 badgeID_, address previousOwner_, address msgSender_, uint256 msgValue_) internal{\n    \t_shareToDistribution(badgeID_, msgValue_, _shareDistributionRatio);\n        _shareToPreviousOwner(previousOwner_, msgValue_, _sharePreviousOwnerRatio);\n    \t_shareToReferer(_referer[msgSender_], msgValue_, _shareReferalRatio);\n    }\n\n    function _shareToDistribution(uint256 badgeID_, uint256 msgValue_, uint256 ratio_) internal{\n        uint256 share = calcShare(msgValue_, ratio_) / _luckyWinners;\n        uint256 idx;\n\n        for(uint256 i = 0; i < _luckyWinners; i++){\n            idx = _badgeFactory.getRandomBadge(badgeID_, i);\n            _increaseTotalDivis(idx, share);\n            _splitProfit[getOwner(idx)] += share;\n        }\n    }\n\n    function _shareToPreviousOwner(address previousOwner_, uint256 msgValue_, uint256 ratio_) internal{\n    \t_flipProfit[previousOwner_] += calcShare(msgValue_, ratio_);\n    }\n\n    function _shareToReferer(address referer_, uint256 msgValue_, uint256 ratio_) internal{\n    \tif (addressNotSet(referer_)){\n    \t\t_waypointProfit[_admin] += calcShare(msgValue_, ratio_);\n    \t} else {\n    \t\t_waypointProfit[referer_] += calcShare(msgValue_, ratio_);\n    \t}\n    }\n\n    /*==============================\n    =           WITHDRAW           =\n    ==============================*/\n    //Hex Data: 0x853828b6\n    function withdrawAll() public isNotAContract{\n        uint256 splitProfit = _splitProfit[msg.sender];\n        _splitProfit[msg.sender] = 0;\n\n        uint256 flipProfit = _flipProfit[msg.sender];\n        _flipProfit[msg.sender] = 0;\n\n        uint256 waypointProfit = _waypointProfit[msg.sender];\n        _waypointProfit[msg.sender] = 0;\n\n        _transferDivis(msg.sender, splitProfit + flipProfit + waypointProfit);\n        emit onWithdraw(msg.sender, splitProfit, flipProfit, waypointProfit);\n    }\n\n    function _transferDivis(address msgSender_, uint256 payout_) internal{\n        assert(address(this).balance >= payout_);\n        if(msgSender_ == _admin){\n            _teamAmber.distribute.value(payout_)();\n        } else {\n            msgSender_.transfer(payout_);       \n        }\n    }\n\n    /*==============================\n    =            HELPERS           =\n    ==============================*/\n    function getStartTime() public view returns (uint256){\n        return _startTime;\n    }\n\n    function getSplitProfit(address user_) public view returns(uint256){\n        return _splitProfit[user_];\n    }\n\n    function getFlipProfit(address user_) public view returns(uint256){\n        return _flipProfit[user_];\n    }\n\n    function getWaypointProfit(address user_) public view returns(uint256){\n        return _waypointProfit[user_];\n    }\n\n    function getReferer(address user_) public view returns(address){\n    \treturn _referer[user_];\n    }\n\n    function getBalanceContract() public view returns(uint256){\n    \treturn address(this).balance;\n    }\n\n    function getAllBadges() public view returns(address[], uint256[], uint256[]){\n        uint256 chainLength = getChainLength();\n        return (getBadges(0, chainLength-1));\n    }\n\n    function getBadges(uint256 _from, uint256 _to) public view returns(address[], uint256[], uint256[]){\n        require(_from <= _to, 'Index FROM needs to be smaller or same than index TO');\n\n        address[] memory owner = new address[](_to - _from + 1);\n        uint256[] memory price = new uint256[](_to - _from + 1);\n        uint256[] memory totalDivis = new uint256[](_to - _from + 1);\n\n        for (uint256 i = _from; i <= _to; i++) {\n            owner[i - _from] = getOwner(i);\n            price[i - _from] = getPrice(i);\n            totalDivis[i - _from] = getTotalDivis(i);\n        }\n        return (owner, price, totalDivis);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160408061175683398101604052805160209091015160028054600160a060020a0319908116331790915560038054600160a060020a03948516908316179055600180549390921692169190911790556116e4806100726000396000f30060806040526004361061012f5763ffffffff60e060020a600035041663131762c2811461013457806314ae1ad0146101565780634dbab0ba1461019b578063579d94c0146101ce5780635b8b4f91146102035780635c32460b1461023057806366bd78fd146102515780636d03fa87146102665780637a91e53d146102a35780637dc5cc64146102ca5780637deb6025146102e2578063853828b6146102f95780638a80dfb11461030e5780638f2bab0714610326578063ab5190201461033b578063b0ae788e14610356578063b47a27391461044f578063bcc4f0ed14610470578063c41a360a1461048b578063c4dd5acc146104a3578063c828371e146104be578063d0125691146104d3578063e10c7f6f146104e8578063e757223014610509578063f08ea4cc14610521575b600080fd5b34801561014057600080fd5b506101546004803560248101910135610539565b005b34801561016257600080fd5b5061015460048035600160a060020a0316906024803580820192908101359160443580820192908101359160643590810191013561062f565b3480156101a757600080fd5b506101bc600160a060020a03600435166107aa565b60408051918252519081900360200190f35b3480156101da57600080fd5b506101ef600160a060020a03600435166107c5565b604080519115158252519081900360200190f35b34801561020f57600080fd5b506101ef600160a060020a03600435811690602435811690604435166107d2565b34801561023c57600080fd5b506101ef600160a060020a0360043516610806565b34801561025d57600080fd5b506101bc610814565b34801561027257600080fd5b50610287600160a060020a0360043516610819565b60408051600160a060020a039092168252519081900360200190f35b3480156102af57600080fd5b506101ef600160a060020a0360043581169060243516610837565b3480156102d657600080fd5b506101bc600435610849565b610154600435600160a060020a0360243516610873565b34801561030557600080fd5b50610154610973565b34801561031a57600080fd5b506101ef600435610a81565b34801561033257600080fd5b506101bc610a85565b34801561034757600080fd5b506101bc600435602435610a8b565b34801561036257600080fd5b50610371600435602435610ab0565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156103b95781810151838201526020016103a1565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156103f85781810151838201526020016103e0565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561043757818101518382015260200161041f565b50505050905001965050505050505060405180910390f35b34801561045b57600080fd5b506101bc600160a060020a0360043516610c65565b34801561047c57600080fd5b506101ef600435602435610c80565b34801561049757600080fd5b50610287600435610c84565b3480156104af57600080fd5b506101ef600435602435610cb5565b3480156104ca57600080fd5b506101bc610cdf565b3480156104df57600080fd5b50610371610ce5565b3480156104f457600080fd5b506101bc600160a060020a0360043516610d10565b34801561051557600080fd5b506101bc600435610d2b565b34801561052d57600080fd5b50610154600435610d55565b600254600090600160a060020a031633146105c4576040805160e560020a62461bcd02815260206004820152602160248201527f53656e646572206973206e6f742074686520636f6e7472616374206f776e657260448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600454156105d157600080fd5b5060005b8181101561062a576106228383838181106105ec57fe5b90506020020135600160a060020a0316848484600101818110151561060d57fe5b90506020020135600160a060020a0316610e27565b6002016105d5565b505050565b600254600160a060020a031633146106b7576040805160e560020a62461bcd02815260206004820152602160248201527f53656e646572206973206e6f742074686520636f6e7472616374206f776e657260448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600454156106c457600080fd5b84831480156106d257508281145b15156106da57fe5b600054600160a060020a03161515610715576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0389161790555b6107a18686808060200260200160405190810160405280939291908181526020018383602002808284375050604080516020808c0282810182019093528b82529095508b94508a93508392508501908490808284375050604080516020808b0282810182019093528a82529095508a945089935083925085019084908082843750610eb7945050505050565b50505050505050565b600160a060020a031660009081526009602052604090205490565b600160a060020a03161590565b60006107dd836107c5565b80156107ed57506107ed82610806565b80156107fe57506107fe8483610837565b949350505050565b600160a060020a0316151590565b303190565b600160a060020a039081166000908152600a60205260409020541690565b600160a060020a039081169116141590565b600060068281548110151561085a57fe5b9060005260206000209060030201600201549050919050565b3332146108f0576040805160e560020a62461bcd02815260206004820152602660248201527f436f6e74726163747320617265206e6f7420616c6c6f77656420746f20696e7460448201527f65726163742e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6004541580159061090357504260045411155b1515610959576040805160e560020a62461bcd02815260206004820181905260248201527f54686520636f6e7472616374206973206e6f742072756e6e696e67207965742e604482015290519081900360640190fd5b6109633382610e27565b61096f82823334610f95565b5050565b600080803332146109f4576040805160e560020a62461bcd02815260206004820152602660248201527f436f6e74726163747320617265206e6f7420616c6c6f77656420746f20696e7460448201527f65726163742e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50503360008181526007602090815260408083208054908490556008835281842080549085905560099093529083208054939055935091610a39908385018301611112565b6040805184815260208101849052808201839052905133917f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70919081900360600190a2505050565b1590565b60065490565b600060648211158015610a9f575060008310155b1515610aa757fe5b50606491020490565b60608080808080600087891115610b37576040805160e560020a62461bcd02815260206004820152603460248201527f496e6465782046524f4d206e6565647320746f20626520736d616c6c6572206f60448201527f722073616d65207468616e20696e64657820544f000000000000000000000000606482015290519081900360840190fd5b888803600101604051908082528060200260200182016040528015610b66578160200160208202803883390190505b509350888803600101604051908082528060200260200182016040528015610b98578160200160208202803883390190505b509250888803600101604051908082528060200260200182016040528015610bca578160200160208202803883390190505b5091508890505b878111610c5657610be181610c84565b848a8303815181101515610bf157fe5b600160a060020a03909216602092830290910190910152610c1181610d2b565b838a8303815181101515610c2157fe5b60209081029091010152610c3481610849565b828a8303815181101515610c4457fe5b60209081029091010152600101610bd1565b50919790965090945092505050565b600160a060020a031660009081526008602052604090205490565b1490565b6000600682815481101515610c9557fe5b6000918252602090912060039091020154600160a060020a031692915050565b6000610cc28260016111da565b831115610ccb57fe5b610cd68260016111da565b90921492915050565b60045490565b60608060606000610cf4610a85565b9050610d04600060018303610ab0565b93509350935050909192565b600160a060020a031660009081526007602052604090205490565b6000600682815481101515610d3c57fe5b9060005260206000209060030201600101549050919050565b600254600160a060020a03163314610ddd576040805160e560020a62461bcd02815260206004820152602160248201527f53656e646572206973206e6f742074686520636f6e7472616374206f776e657260448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60045415610dea57600080fd5b428101600481905560408051918252517fc95500414a933625aebaf804d96decf560ff6c63826e9ff60c61408e05bb004f9181900360200190a150565b600160a060020a038083166000908152600a6020526040902054610e4e91849116836107d2565b1561096f57600160a060020a038281166000818152600a6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169486169485179055517fb3f1c8ed4ff0777d22e70236169841472c2775e96f5349e766a140ab2a579ec89190a35050565b60005b8351811015610f8f5760066060604051908101604052808684815181101515610edf57fe5b90602001906020020151600160a060020a031681526020018584815181101515610f0557fe5b9060200190602002015181526020018484815181101515610f2257fe5b6020908102919091018101519091528254600180820185556000948552938290208351600390920201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091178155908201518184015560409091015160029091015501610eba565b50505050565b6000610fa085610c84565b9050610fb483610faf87610c84565b610837565b151561100a576040805160e560020a62461bcd02815260206004820152601e60248201527f596f752063616e206e6f74206275792066726f6d20796f757273656c662e0000604482015290519081900360640190fd5b61101c61101686610d2b565b83610c80565b1515611072576040805160e560020a62461bcd02815260206004820152601660248201527f4974206973206e6f7420612076616c6964206275792e00000000000000000000604482015290519081900360640190fd5b61107e858285856111ec565b61109085846658d15e1762800061122b565b61109a858461124b565b6110a385611255565b83600160a060020a031683600160a060020a0316867f23f65a3d59ea178d3257eb66489f5a564e18748b46ac164e45d2f4561b0984d584866110e48b610d2b565b60408051600160a060020a039094168452602084019290925282820152519081900360600190a45050505050565b303181111561111d57fe5b600354600160a060020a03838116911614156111a457600160009054906101000a9004600160a060020a0316600160a060020a031663e4fc6b6d826040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b505050505061096f565b604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561062a573d6000803e3d6000fd5b6000828211156111e657fe5b50900390565b6111f88482602d6113c3565b611204838260326114d3565b600160a060020a038083166000908152600a6020526040902054610f8f9116826005611502565b61123c83611237610a85565b610cb5565b1561062a5761062a828261156e565b61096f828261163b565b60008054604080517f28a5190c0000000000000000000000000000000000000000000000000000000081529051606492600160a060020a0316916328a5190c91600480830192602092919082900301818887803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b505050506040513d60208110156112df57600080fd5b505160068054859081106112ef57fe5b9060005260206000209060030201600101540281151561130b57fe5b04905073b8e61c88b3ce99b80389b8913c03c13418f03a146303ce6c5582633b9aca00612710026040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561137057600080fd5b505af4158015611384573d6000803e3d6000fd5b505050506040513d602081101561139a57600080fd5b505160068054849081106113aa57fe5b9060005260206000209060030201600101819055505050565b600080600060056113d48686610a8b565b8115156113dd57fe5b049250600090505b60058110156114cb5760008054604080517fdbff60ce000000000000000000000000000000000000000000000000000000008152600481018a9052602481018590529051600160a060020a039092169263dbff60ce926044808401936020939083900390910190829087803b15801561145d57600080fd5b505af1158015611471573d6000803e3d6000fd5b505050506040513d602081101561148757600080fd5b50519150611495828461168a565b82600760006114a385610c84565b600160a060020a031681526020810191909152604001600020805490910190556001016113e5565b505050505050565b6114dd8282610a8b565b600160a060020a03909316600090815260086020526040902080549093019092555050565b61150b836107c5565b156115405761151a8282610a8b565b600354600160a060020a031660009081526009602052604090208054909101905561062a565b61154a8282610a8b565b600160a060020a038416600090815260096020526040902080549091019055505050565b60408051606081018252600160a060020a03938416815260208101928352600091810182815260068054600181018255935290517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f6003909302928301805473ffffffffffffffffffffffffffffffffffffffff1916919095161790935590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4190910155565b8060068381548110151561164b57fe5b60009182526020909120600390910201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050565b8060068381548110151561169a57fe5b600091825260209091206002600390920201018054909101905550505600a165627a7a72305820781f840e5e835740d50a06910cd06ba9ee6285cc5d98915e787b8fd031cf857a0029000000000000000000000000ae5ac19f938f8338920e630cc9a8ecd6ce89bca10000000000000000000000001ce75bfd524489e7dd8678d4905cbd8f47f22083",
  "constructorArguments": "000000000000000000000000ae5ac19f938f8338920e630cc9a8ecd6ce89bca10000000000000000000000001ce75bfd524489e7dd8678d4905cbd8f47f22083",
  "libraries": [
    {
      "name": "SafeMathExt",
      "address": "0xB8E61C88B3CE99b80389B8913c03c13418F03A14"
    }
  ]
}