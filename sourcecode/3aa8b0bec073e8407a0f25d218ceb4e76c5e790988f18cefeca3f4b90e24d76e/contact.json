{
  "address": "0x1181afdd79f0c6634aad5468380747bb2532a2a3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-13\n*/\n\npragma solidity ^0.4.24;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN));\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0);\n        require(!(b == -1 && a == INT256_MIN));\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract ERC20 is owned,IERC20 {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    string public name = \"NNB\";\n    string public symbol = \"NNB\";\n    uint8 public decimals = 18;\n    uint256 private _totalSupply = 2 * 100000000;\n    \n    constructor() public {\n        _totalSupply = _totalSupply * 10 ** uint256(decimals);\n        _balances[msg.sender] = _totalSupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function burn(address account, uint256 value) external onlyOwner returns (bool) {\n        _burn(account, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n    \n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        require(to != 0x0);\n\t\trequire(value > 0); \n        require(_balances[from] >= value);\n        require(_balances[to] + value >= _balances[to]);\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        require(_balances[account] >= value);\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}",
  "bytecode": "60c0604052600360808190527f4e4e42000000000000000000000000000000000000000000000000000000000060a090815261003e91600491906100e4565b506040805180820190915260038082527f4e4e4200000000000000000000000000000000000000000000000000000000006020909201918252610083916005916100e4565b506006805460ff19166012179055630bebc2006007553480156100a557600080fd5b5060008054600160a060020a0319163390811782556006546007805460ff909216600a0a9190910290819055908252600160205260409091205561017f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012557805160ff1916838001178555610152565b82800160010185558215610152579182015b82811115610152578251825591602001919060010190610137565b5061015e929150610162565b5090565b61017c91905b8082111561015e5760008155600101610168565b90565b610ab68061018e6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101ac57806323b872dd146101d3578063313ce567146101fd578063395093511461022857806370a082311461024c5780638da5cb5b1461026d57806395d89b411461029e5780639dc29fac146102b3578063a457c2d7146102d7578063a9059cbb146102fb578063b414d4b61461031f578063dd62ed3e14610340578063e724529c14610367578063f2fde38b1461038f575b600080fd5b3480156100f657600080fd5b506100ff6103b0565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a036004351660243561043e565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c16104bc565b60408051918252519081900360200190f35b3480156101df57600080fd5b50610198600160a060020a03600435811690602435166044356104c2565b34801561020957600080fd5b5061021261058b565b6040805160ff9092168252519081900360200190f35b34801561023457600080fd5b50610198600160a060020a0360043516602435610594565b34801561025857600080fd5b506101c1600160a060020a0360043516610644565b34801561027957600080fd5b5061028261065f565b60408051600160a060020a039092168252519081900360200190f35b3480156102aa57600080fd5b506100ff61066e565b3480156102bf57600080fd5b50610198600160a060020a03600435166024356106c9565b3480156102e357600080fd5b50610198600160a060020a03600435166024356106f4565b34801561030757600080fd5b50610198600160a060020a036004351660243561073f565b34801561032b57600080fd5b50610198600160a060020a036004351661074c565b34801561034c57600080fd5b506101c1600160a060020a0360043581169060243516610761565b34801561037357600080fd5b5061038d600160a060020a0360043516602435151561078c565b005b34801561039b57600080fd5b5061038d600160a060020a0360043516610807565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104365780601f1061040b57610100808354040283529160200191610436565b820191906000526020600020905b81548152906001019060200180831161041957829003601f168201915b505050505081565b6000600160a060020a038316151561045557600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60075490565b600160a060020a03831660009081526002602090815260408083203384529091528120546104f6908363ffffffff61084d16565b600160a060020a0385166000908152600260209081526040808320338452909152902055610525848484610864565b600160a060020a0384166000818152600260209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60065460ff1681565b6000600160a060020a03831615156105ab57600080fd5b336000908152600260209081526040808320600160a060020a03871684529091529020546105df908363ffffffff6109a116565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104365780601f1061040b57610100808354040283529160200191610436565b60008054600160a060020a031633146106e157600080fd5b6106eb83836109ba565b50600192915050565b6000600160a060020a038316151561070b57600080fd5b336000908152600260209081526040808320600160a060020a03871684529091529020546105df908363ffffffff61084d16565b60006106eb338484610864565b60036020526000908152604090205460ff1681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600054600160a060020a031633146107a357600080fd5b600160a060020a038216600081815260036020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a0316331461081e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000808383111561085d57600080fd5b5050900390565b600160a060020a038216151561087957600080fd5b600160a060020a038216151561088e57600080fd5b6000811161089b57600080fd5b600160a060020a0383166000908152600160205260409020548111156108c057600080fd5b600160a060020a03821660009081526001602052604090205481810110156108e757600080fd5b600160a060020a038316600090815260016020526040902054610910908263ffffffff61084d16565b600160a060020a038085166000908152600160205260408082209390935590841681522054610945908263ffffffff6109a116565b600160a060020a0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156109b357600080fd5b9392505050565b600160a060020a03821615156109cf57600080fd5b600160a060020a0382166000908152600160205260409020548111156109f457600080fd5b600754610a07908263ffffffff61084d16565b600755600160a060020a038216600090815260016020526040902054610a33908263ffffffff61084d16565b600160a060020a0383166000818152600160209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350505600a165627a7a7230582078d8920dd10e4c37a155d850ecceaa73f25c918a6b95d98fd86b6cec9a88afb50029"
}