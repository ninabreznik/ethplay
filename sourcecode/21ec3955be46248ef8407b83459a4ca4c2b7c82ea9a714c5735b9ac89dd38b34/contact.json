{
  "address": "0x0be3e6e3d9e99036ccce4fd0b692016de860aa62",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FckDice",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-31\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract FckDice {\n    /// *** Constants section\n\n    // Each bet is deducted 0.98% in favour of the house, but no less than some minimum.\n    // The lower bound is dictated by gas costs of the settleBet transaction, providing\n    // headroom for up to 10 Gwei prices.\n    uint public HOUSE_EDGE_OF_TEN_THOUSAND = 98;\n    uint public HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether;\n\n    // Bets lower than this amount do not participate in jackpot rolls (and are\n    // not deducted JACKPOT_FEE).\n    uint public MIN_JACKPOT_BET = 0.1 ether;\n\n    // Chance to win jackpot (currently 0.1%) and fee deducted into jackpot fund.\n    uint public JACKPOT_MODULO = 1000;\n    uint public JACKPOT_FEE = 0.001 ether;\n\n    // There is minimum and maximum bets.\n    uint constant MIN_BET = 0.01 ether;\n    uint constant MAX_AMOUNT = 300000 ether;\n\n    // Modulo is a number of equiprobable outcomes in a game:\n    //  - 2 for coin flip\n    //  - 6 for dice\n    //  - 6*6 = 36 for double dice\n    //  - 100 for etheroll\n    //  - 37 for roulette\n    //  etc.\n    // It's called so because 256-bit entropy is treated like a huge integer and\n    // the remainder of its division by modulo is considered bet outcome.\n    uint constant MAX_MODULO = 255;\n\n    // For modulos below this threshold rolls are checked against a bit mask,\n    // thus allowing betting on any combination of outcomes. For example, given\n    // modulo 6 for dice, 101000 mask (base-2, big endian) means betting on\n    // 4 and 6; for games with modulos higher than threshold (Etheroll), a simple\n    // limit is used, allowing betting on any outcome in [0, N) range.\n    //\n    // The specific value is dictated by the fact that 256-bit intermediate\n    // multiplication result allows implementing population count efficiently\n    // for numbers that are up to 42 bits, and 40 is the highest multiple of\n    // eight below 42.\n    uint constant MAX_MASK_MODULO = 40;\n\n    // This is a check on bet mask overflow.\n    uint constant MAX_BET_MASK = 2 ** (MAX_MASK_MODULO * 6);\n\n    // EVM BLOCKHASH opcode can query no further than 256 blocks into the\n    // past. Given that settleBet uses block hash of placeBet as one of\n    // complementary entropy sources, we cannot process bets older than this\n    // threshold. On rare occasions croupier may fail to invoke\n    // settleBet in this timespan due to technical issues or extreme Ethereum\n    // congestion; such bets can be refunded via invoking refundBet.\n    uint constant BET_EXPIRATION_BLOCKS = 250;\n\n    // Some deliberately invalid address to initialize the secret signer with.\n    // Forces maintainers to invoke setSecretSigner before processing any bets.\n    // address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    // Standard contract ownership transfer.\n    address public owner1;\n    address public owner2;\n    //    address private nextOwner;\n\n    // Adjustable max bet profit. Used to cap bets against dynamic odds.\n    uint public maxProfit;\n\n    // The address corresponding to a private key used to sign placeBet commits.\n    address public secretSigner;\n\n    // Accumulated jackpot fund.\n    uint128 public jackpotSize;\n\n    // Funds that are locked in potentially winning bets. Prevents contract from\n    // committing to bets it cannot pay out.\n    uint128 public lockedInBets;\n\n    // A structure representing a single bet.\n    struct Bet {\n        // Wager amount in wei.\n        uint amount;\n        // Modulo of a game.\n        uint8 modulo;\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollUnder),\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\n        uint8 rollUnder;\n        // Block number of placeBet tx.\n        uint40 placeBlockNumber;\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\n        uint240 mask;\n        // Address of a gambler, used to pay out winning bets.\n        address gambler;\n    }\n\n    // Mapping from commits to all currently active & processed bets.\n    mapping(uint => Bet) bets;\n\n    // Croupier account.\n    address public croupier;\n\n    // Events that are issued to make statistic recovery easier.\n    event FailedPayment(address indexed beneficiary, uint amount);\n    event Payment(address indexed beneficiary, uint amount);\n    event JackpotPayment(address indexed beneficiary, uint amount);\n\n    // This event is emitted in placeBet to record commit in the logs.\n    event Commit(uint commit);\n\n    // Constructor.\n    constructor (address _owner1, address _owner2,\n        address _secretSigner, address _croupier, uint _maxProfit\n    ) public payable {\n        owner1 = _owner1;\n        owner2 = _owner2;\n        secretSigner = _secretSigner;\n        croupier = _croupier;\n        require(_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\n        maxProfit = _maxProfit;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyOwner {\n        require(msg.sender == owner1 || msg.sender == owner2, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyCroupier {\n        require(msg.sender == croupier, \"OnlyCroupier methods called by non-croupier.\");\n        _;\n    }\n\n    //    // Standard contract ownership transfer implementation,\n    //    function approveNextOwner(address _nextOwner) external onlyOwner {\n    //        require(_nextOwner != owner, \"Cannot approve current owner.\");\n    //        nextOwner = _nextOwner;\n    //    }\n    //\n    //    function acceptNextOwner() external {\n    //        require(msg.sender == nextOwner, \"Can only accept preapproved new owner.\");\n    //        owner = nextOwner;\n    //    }\n\n    // Fallback function deliberately left empty. It's primary use case\n    // is to top up the bank roll.\n    function() public payable {\n    }\n\n    function setOwner1(address o) external onlyOwner {\n        require(o != address(0));\n        require(o != owner1);\n        require(o != owner2);\n        owner1 = o;\n    }\n\n    function setOwner2(address o) external onlyOwner {\n        require(o != address(0));\n        require(o != owner1);\n        require(o != owner2);\n        owner2 = o;\n    }\n\n    // See comment for \"secretSigner\" variable.\n    function setSecretSigner(address newSecretSigner) external onlyOwner {\n        secretSigner = newSecretSigner;\n    }\n\n    // Change the croupier address.\n    function setCroupier(address newCroupier) external onlyOwner {\n        croupier = newCroupier;\n    }\n\n    // Change max bet reward. Setting this to zero effectively disables betting.\n    function setMaxProfit(uint _maxProfit) public onlyOwner {\n        require(_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\n        maxProfit = _maxProfit;\n    }\n\n    // This function is used to bump up the jackpot fund. Cannot be used to lower it.\n    function increaseJackpot(uint increaseAmount) external onlyOwner {\n        require(increaseAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require(jackpotSize + lockedInBets + increaseAmount <= address(this).balance, \"Not enough funds.\");\n        jackpotSize += uint128(increaseAmount);\n    }\n\n    // Funds withdrawal to cover costs of croupier operation.\n    function withdrawFunds(address beneficiary, uint withdrawAmount) external onlyOwner {\n        require(withdrawAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require(jackpotSize + lockedInBets + withdrawAmount <= address(this).balance, \"Not enough funds.\");\n        sendFunds(beneficiary, withdrawAmount, withdrawAmount);\n    }\n\n    // Contract may be destroyed only when there are no ongoing bets,\n    // either settled or refunded. All funds are transferred to contract owner.\n    function kill() external onlyOwner {\n        require(lockedInBets == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n        selfdestruct(owner1);\n    }\n\n    function getBetInfo(uint commit) external view returns (uint amount, uint8 modulo, uint8 rollUnder, uint40 placeBlockNumber, uint240 mask, address gambler) {\n        Bet storage bet = bets[commit];\n        amount = bet.amount;\n        modulo = bet.modulo;\n        rollUnder = bet.rollUnder;\n        placeBlockNumber = bet.placeBlockNumber;\n        mask = bet.mask;\n        gambler = bet.gambler;\n    }\n\n    /// *** Betting logic\n\n    // Bet states:\n    //  amount == 0 && gambler == 0 - 'clean' (can place a bet)\n    //  amount != 0 && gambler != 0 - 'active' (can be settled or refunded)\n    //  amount == 0 && gambler != 0 - 'processed' (can clean storage)\n    //\n    //  NOTE: Storage cleaning is not implemented in this contract version; it will be added\n    //        with the next upgrade to prevent polluting Ethereum state with expired bets.\n\n    // Bet placing transaction - issued by the player.\n    //  betMask         - bet outcomes bit mask for modulo <= MAX_MASK_MODULO,\n    //                    [0, betMask) for larger modulos.\n    //  modulo          - game modulo.\n    //  commitLastBlock - number of the maximum block where \"commit\" is still considered valid.\n    //  commit          - Keccak256 hash of some secret \"reveal\" random number, to be supplied\n    //                    by the croupier bot in the settleBet transaction. Supplying\n    //                    \"commit\" ensures that \"reveal\" cannot be changed behind the scenes\n    //                    after placeBet have been mined.\n    //  r, s            - components of ECDSA signature of (commitLastBlock, commit). v is\n    //                    guaranteed to always equal 27.\n    //\n    // Commit, being essentially random 256-bit number, is used as a unique bet identifier in\n    // the 'bets' mapping.\n    //\n    // Commits are signed with a block limit to ensure that they are used at most once - otherwise\n    // it would be possible for a miner to place a bet with a known commit/reveal pair and tamper\n    // with the blockhash. Croupier guarantees that commitLastBlock will always be not greater than\n    // placeBet block number plus BET_EXPIRATION_BLOCKS. See whitepaper for details.\n    function placeBet(uint betMask, uint modulo, uint commitLastBlock, uint commit, bytes32 r, bytes32 s) external payable {\n        // Check that the bet is in 'clean' state.\n        Bet storage bet = bets[commit];\n        require(bet.gambler == address(0), \"Bet should be in a 'clean' state.\");\n\n        // Validate input data ranges.\n        uint amount = msg.value;\n        require(modulo > 1 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\n        require(amount >= MIN_BET && amount <= MAX_AMOUNT, \"Amount should be within range.\");\n        require(betMask > 0 && betMask < MAX_BET_MASK, \"Mask should be within range.\");\n\n        // Check that commit is valid - it has not expired and its signature is valid.\n        require(block.number <= commitLastBlock, \"Commit has expired.\");\n        bytes32 signatureHash = keccak256(abi.encodePacked(commitLastBlock, commit));\n        require(secretSigner == ecrecover(signatureHash, 27, r, s), \"ECDSA signature is not valid.\");\n\n        uint rollUnder;\n        uint mask;\n\n        if (modulo <= MAX_MASK_MODULO) {\n            // Small modulo games specify bet outcomes via bit mask.\n            // rollUnder is a number of 1 bits in this mask (population count).\n            // This magic looking formula is an efficient way to compute population\n            // count on EVM for numbers below 2**40.\n            rollUnder = ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n            mask = betMask;\n        } else if (modulo <= MAX_MASK_MODULO * 2) {\n            rollUnder = getRollUnder(betMask, 2);\n            mask = betMask;\n        } else if (modulo == 100) {\n            require(betMask > 0 && betMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            rollUnder = betMask;\n        } else if (modulo <= MAX_MASK_MODULO * 3) {\n            rollUnder = getRollUnder(betMask, 3);\n            mask = betMask;\n        } else if (modulo <= MAX_MASK_MODULO * 4) {\n            rollUnder = getRollUnder(betMask, 4);\n            mask = betMask;\n        } else if (modulo <= MAX_MASK_MODULO * 5) {\n            rollUnder = getRollUnder(betMask, 5);\n            mask = betMask;\n        } else if (modulo <= MAX_MASK_MODULO * 6) {\n            rollUnder = getRollUnder(betMask, 6);\n            mask = betMask;\n        } else {\n            // Larger modulos specify the right edge of half-open interval of\n            // winning bet outcomes.\n            require(betMask > 0 && betMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            rollUnder = betMask;\n        }\n\n        // Winning amount and jackpot increase.\n        uint possibleWinAmount;\n        uint jackpotFee;\n\n        //        emit DebugUint(\"rollUnder\", rollUnder);\n        (possibleWinAmount, jackpotFee) = getDiceWinAmount(amount, modulo, rollUnder);\n\n        // Enforce max profit limit.\n        require(possibleWinAmount <= amount + maxProfit, \"maxProfit limit violation.\");\n\n        // Lock funds.\n        lockedInBets += uint128(possibleWinAmount);\n        jackpotSize += uint128(jackpotFee);\n\n        // Check whether contract has enough funds to process this bet.\n        require(jackpotSize + lockedInBets <= address(this).balance, \"Cannot afford to lose this bet.\");\n\n        // Record commit in logs.\n        emit Commit(commit);\n\n        // Store bet parameters on blockchain.\n        bet.amount = amount;\n        bet.modulo = uint8(modulo);\n        bet.rollUnder = uint8(rollUnder);\n        bet.placeBlockNumber = uint40(block.number);\n        bet.mask = uint240(mask);\n        bet.gambler = msg.sender;\n        //        emit DebugUint(\"placeBet-placeBlockNumber\", bet.placeBlockNumber);\n    }\n\n    function getRollUnder(uint betMask, uint n) private pure returns (uint rollUnder) {\n        rollUnder += (((betMask & MASK40) * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n        for (uint i = 1; i < n; i++) {\n            betMask = betMask >> MAX_MASK_MODULO;\n            rollUnder += (((betMask & MASK40) * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n        }\n        return rollUnder;\n    }\n\n    // This is the method used to settle 99% of bets. To process a bet with a specific\n    // \"commit\", settleBet should supply a \"reveal\" number that would Keccak256-hash to\n    // \"commit\". \"blockHash\" is the block hash of placeBet block as seen by croupier; it\n    // is additionally asserted to prevent changing the bet outcomes on Ethereum reorgs.\n    function settleBet(bytes20 reveal1, bytes20 reveal2, bytes32 blockHash) external onlyCroupier {\n        uint commit = uint(keccak256(abi.encodePacked(reveal1, reveal2)));\n        //         emit DebugUint(\"settleBet-reveal1\", uint(reveal1));\n        //         emit DebugUint(\"settleBet-reveal2\", uint(reveal2));\n        //         emit DebugUint(\"settleBet-commit\", commit);\n\n        Bet storage bet = bets[commit];\n        uint placeBlockNumber = bet.placeBlockNumber;\n\n        //         emit DebugBytes32(\"settleBet-placeBlockhash\", blockhash(placeBlockNumber));\n        //         emit DebugUint(\"settleBet-placeBlockNumber\", bet.placeBlockNumber);\n\n        // Check that bet has not expired yet (see comment to BET_EXPIRATION_BLOCKS).\n        require(block.number > placeBlockNumber, \"settleBet in the same block as placeBet, or before.\");\n        require(block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n        require(blockhash(placeBlockNumber) == blockHash, \"blockHash invalid\");\n\n        // Settle bet using reveal and blockHash as entropy sources.\n        settleBetCommon(bet, reveal1, reveal2, blockHash);\n    }\n\n    // Debug events\n    //    event DebugBytes32(string name, bytes32 data);\n    //    event DebugUint(string name, uint data);\n\n    // Common settlement code for settleBet.\n    function settleBetCommon(Bet storage bet, bytes20 reveal1, bytes20 reveal2, bytes32 entropyBlockHash) private {\n        // Fetch bet parameters into local variables (to save gas).\n        uint amount = bet.amount;\n        uint modulo = bet.modulo;\n        uint rollUnder = bet.rollUnder;\n        address gambler = bet.gambler;\n\n        // Check that bet is in 'active' state.\n        require(amount != 0, \"Bet should be in an 'active' state\");\n\n        // Move bet into 'processed' state already.\n        bet.amount = 0;\n\n        // The RNG - combine \"reveal\" and blockhash of placeBet using Keccak256. Miners\n        // are not aware of \"reveal\" and cannot deduce it from \"commit\" (as Keccak256\n        // preimage is intractable), and house is unable to alter the \"reveal\" after\n        // placeBet have been mined (as Keccak256 collision finding is also intractable).\n        bytes32 entropy = keccak256(abi.encodePacked(reveal1, entropyBlockHash, reveal2));\n        //emit DebugBytes32(\"entropy\", entropy);\n\n        // Do a roll by taking a modulo of entropy. Compute winning amount.\n        uint dice = uint(entropy) % modulo;\n\n        uint diceWinAmount;\n        uint _jackpotFee;\n        (diceWinAmount, _jackpotFee) = getDiceWinAmount(amount, modulo, rollUnder);\n\n        uint diceWin = 0;\n        uint jackpotWin = 0;\n\n        // Determine dice outcome.\n        if ((modulo != 100) && (modulo <= MAX_MASK_MODULO * 6)) {\n            // For small modulo games, check the outcome against a bit mask.\n            if ((2 ** dice) & bet.mask != 0) {\n                diceWin = diceWinAmount;\n            }\n        } else {\n            // For larger modulos, check inclusion into half-open interval.\n            if (dice < rollUnder) {\n                diceWin = diceWinAmount;\n            }\n        }\n\n        // Unlock the bet amount, regardless of the outcome.\n        lockedInBets -= uint128(diceWinAmount);\n\n        // Roll for a jackpot (if eligible).\n        if (amount >= MIN_JACKPOT_BET) {\n            // The second modulo, statistically independent from the \"main\" dice roll.\n            // Effectively you are playing two games at once!\n            uint jackpotRng = (uint(entropy) / modulo) % JACKPOT_MODULO;\n\n            // Bingo!\n            if (jackpotRng == 0) {\n                jackpotWin = jackpotSize;\n                jackpotSize = 0;\n            }\n        }\n\n        // Log jackpot win.\n        if (jackpotWin > 0) {\n            emit JackpotPayment(gambler, jackpotWin);\n        }\n\n        // Send the funds to gambler.\n        sendFunds(gambler, diceWin + jackpotWin == 0 ? 1 wei : diceWin + jackpotWin, diceWin);\n    }\n\n    // Refund transaction - return the bet amount of a roll that was not processed in a\n    // due timeframe. Processing such blocks is not possible due to EVM limitations (see\n    // BET_EXPIRATION_BLOCKS comment above for details). In case you ever find yourself\n    // in a situation like this, just contact the fck.com support, however nothing\n    // precludes you from invoking this method yourself.\n    function refundBet(uint commit) external {\n        // Check that bet is in 'active' state.\n        Bet storage bet = bets[commit];\n        uint amount = bet.amount;\n\n        require(amount != 0, \"Bet should be in an 'active' state\");\n\n        // Check that bet has already expired.\n        require(block.number > bet.placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n\n        // Move bet into 'processed' state, release funds.\n        bet.amount = 0;\n\n        uint diceWinAmount;\n        uint jackpotFee;\n        (diceWinAmount, jackpotFee) = getDiceWinAmount(amount, bet.modulo, bet.rollUnder);\n\n        lockedInBets -= uint128(diceWinAmount);\n        if (jackpotSize >= jackpotFee) {\n            jackpotSize -= uint128(jackpotFee);\n        }\n\n        // Send the refund.\n        sendFunds(bet.gambler, amount, amount);\n    }\n\n    // Get the expected win amount after house edge is subtracted.\n    function getDiceWinAmount(uint amount, uint modulo, uint rollUnder) private view returns (uint winAmount, uint jackpotFee) {\n        require(0 < rollUnder && rollUnder <= modulo, \"Win probability out of range.\");\n\n        jackpotFee = amount >= MIN_JACKPOT_BET ? JACKPOT_FEE : 0;\n\n        uint houseEdge = amount * HOUSE_EDGE_OF_TEN_THOUSAND / 10000;\n\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\n            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\n        }\n\n        require(houseEdge + jackpotFee <= amount, \"Bet doesn't even cover house edge.\");\n\n        winAmount = (amount - houseEdge - jackpotFee) * modulo / rollUnder;\n    }\n\n    // Helper routine to process the payment.\n    function sendFunds(address beneficiary, uint amount, uint successLogAmount) private {\n        if (beneficiary.send(amount)) {\n            emit Payment(beneficiary, successLogAmount);\n        } else {\n            emit FailedPayment(beneficiary, amount);\n        }\n    }\n\n    // This are some constants making O(1) population count in placeBet possible.\n    // See whitepaper for intuition and proofs behind it.\n    uint constant POPCNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\n    uint constant POPCNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\n    uint constant POPCNT_MODULO = 0x3F;\n    uint constant MASK40 = 0xFFFFFFFFFF;\n}",
  "bytecode": "60806040526062600055660110d9316ec00060015567016345785d8a00006002556103e860035566038d7ea4c6800060045560405160a0806121078339810160409081528151602083015191830151606084015160809094015160058054600160a060020a03808616600160a060020a0319928316179092556006805483881690831617905560088054838616908316179055600b80549288169290911691909117905591939091693f870857a3e0e3800000811061014557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6d617850726f6669742073686f756c6420626520612073616e65206e756d626560448201527f722e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60075550505050611fac8061015b6000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301f60217811461013f5780630cf9349d146101665780631b5806201461017b57806341c0e1b51461019c5780634d61537f146101b157806352709725146101e2578063537af6c4146101f757806357246d231461020c5780635825884f1461023d5780635e83b4631461025e5780636b5c5f3914610278578063736889141461028d57806379141f80146102a2578063b539cd551461030a578063bcce60401461031f578063bf020f6114610334578063c107532914610349578063d6d30a511461036d578063d702087f14610385578063df88126f146103a6578063e163b75b146103bb578063e1fdb4b4146103eb578063f8bb201c14610403578063fbd668a914610424575b005b34801561014b57600080fd5b5061015461043c565b60408051918252519081900360200190f35b34801561017257600080fd5b50610154610442565b34801561018757600080fd5b5061013d600160a060020a0360043516610448565b3480156101a857600080fd5b5061013d61053b565b3480156101bd57600080fd5b506101c6610676565b60408051600160a060020a039092168252519081900360200190f35b3480156101ee57600080fd5b506101c6610685565b34801561020357600080fd5b50610154610694565b34801561021857600080fd5b5061022161069a565b604080516001608060020a039092168252519081900360200190f35b34801561024957600080fd5b5061013d600160a060020a03600435166106a9565b61013d60043560243560443560643560843560a43561079c565b34801561028457600080fd5b506101c6610f43565b34801561029957600080fd5b506101c6610f52565b3480156102ae57600080fd5b506102ba600435610f61565b6040805196875260ff9586166020880152939094168584015264ffffffffff9091166060850152600160f060020a03166080840152600160a060020a0390911660a0830152519081900360c00190f35b34801561031657600080fd5b50610154610fbb565b34801561032b57600080fd5b50610154610fc1565b34801561034057600080fd5b50610154610fc7565b34801561035557600080fd5b5061013d600160a060020a0360043516602435610fcd565b34801561037957600080fd5b5061013d60043561114c565b34801561039157600080fd5b5061013d600160a060020a03600435166112ec565b3480156103b257600080fd5b50610221611394565b3480156103c757600080fd5b5061013d6bffffffffffffffffffffffff19600435811690602435166044356113aa565b3480156103f757600080fd5b5061013d60043561165b565b34801561040f57600080fd5b5061013d600160a060020a036004351661181d565b34801561043057600080fd5b5061013d6004356118c5565b60035481565b60025481565b600554600160a060020a031633148061046b5750600654600160a060020a031633145b15156104c1576040805160e560020a62461bcd0281526020600482015260266024820152600080516020611f61833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600160a060020a03811615156104d657600080fd5b600554600160a060020a03828116911614156104f157600080fd5b600654600160a060020a038281169116141561050c57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600554600160a060020a031633148061055e5750600654600160a060020a031633145b15156105b4576040805160e560020a62461bcd0281526020600482015260266024820152600080516020611f61833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600954608060020a90046001608060020a031615610668576040805160e560020a62461bcd02815260206004820152604860248201527f416c6c20626574732073686f756c642062652070726f6365737365642028736560448201527f74746c6564206f7220726566756e64656429206265666f72652073656c662d6460648201527f657374727563742e000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600554600160a060020a0316ff5b600854600160a060020a031681565b600654600160a060020a031681565b60005481565b6009546001608060020a031681565b600554600160a060020a03163314806106cc5750600654600160a060020a031633145b1515610722576040805160e560020a62461bcd0281526020600482015260266024820152600080516020611f61833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600160a060020a038116151561073757600080fd5b600554600160a060020a038281169116141561075257600080fd5b600654600160a060020a038281169116141561076d57600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000838152600a60205260408120600381015490919081908190819081908190600160a060020a031615610840576040805160e560020a62461bcd02815260206004820152602160248201527f4265742073686f756c6420626520696e20612027636c65616e2720737461746560448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b34955060018c118015610854575060ff8c11155b15156108aa576040805160e560020a62461bcd02815260206004820152601e60248201527f4d6f64756c6f2073686f756c642062652077697468696e2072616e67652e0000604482015290519081900360640190fd5b662386f26fc1000086101580156108cb5750693f870857a3e0e38000008611155b1515610921576040805160e560020a62461bcd02815260206004820152601e60248201527f416d6f756e742073686f756c642062652077697468696e2072616e67652e0000604482015290519081900360640190fd5b60008d11801561094f57507e010000000000000000000000000000000000000000000000000000000000008d105b15156109a5576040805160e560020a62461bcd02815260206004820152601c60248201527f4d61736b2073686f756c642062652077697468696e2072616e67652e00000000604482015290519081900360640190fd5b438b10156109fd576040805160e560020a62461bcd02815260206004820152601360248201527f436f6d6d69742068617320657870697265642e00000000000000000000000000604482015290519081900360640190fd5b8a8a60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610a545780518252601f199092019160209182019101610a35565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600185601b8b8b604051600081526020016040526040518085600019166000191681526020018460ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610af8573d6000803e3d6000fd5b5050604051601f190151600854600160a060020a039081169116149050610b69576040805160e560020a62461bcd02815260206004820152601d60248201527f4543445341207369676e6174757265206973206e6f742076616c69642e000000604482015290519081900360640190fd5b60288c11610bbc57603f7920000000001000000000080000000004000000000200000000018e027e01041041041041041041041041041041041041041041041041041041041041160693508c9250610d52565b60508c11610bd957610bcf8d60026119ca565b93508c9250610d52565b8b60641415610c765760008d118015610bf257508b8d11155b1515610c6e576040805160e560020a62461bcd02815260206004820152602e60248201527f48696768206d6f64756c6f2072616e67652c206265744d61736b206c6172676560448201527f72207468616e206d6f64756c6f2e000000000000000000000000000000000000606482015290519081900360840190fd5b8c9350610d52565b60788c11610c8957610bcf8d60036119ca565b60a08c11610c9c57610bcf8d60046119ca565b60c88c11610caf57610bcf8d60056119ca565b60f08c11610cc257610bcf8d60066119ca565b60008d118015610cd257508b8d11155b1515610d4e576040805160e560020a62461bcd02815260206004820152602e60248201527f48696768206d6f64756c6f2072616e67652c206265744d61736b206c6172676560448201527f72207468616e206d6f64756c6f2e000000000000000000000000000000000000606482015290519081900360840190fd5b8c93505b610d5d868d86611a84565b60075491935091508601821115610dbe576040805160e560020a62461bcd02815260206004820152601a60248201527f6d617850726f666974206c696d69742076696f6c6174696f6e2e000000000000604482015290519081900360640190fd5b600980546001608060020a03608060020a808304821686018216810292821692909217808216850182166fffffffffffffffffffffffffffffffff19919091161792839055303183821692909304811691909101161115610e69576040805160e560020a62461bcd02815260206004820152601f60248201527f43616e6e6f74206166666f726420746f206c6f73652074686973206265742e00604482015290519081900360640190fd5b604080518b815290517f5bdd2fc99022530157777690475b670d3872f32262eb1d47d9ba8000dad58f879181900360200190a1505092845560018401805460ff191660ff9a8b161761ff00191661010092909a16919091029890981766ffffffffff00001916620100004364ffffffffff1602179097556002820180547fffff00000000000000000000000000000000000000000000000000000000000016600160f060020a0390921691909117905560030180543373ffffffffffffffffffffffffffffffffffffffff19909116179055505050505050565b600b54600160a060020a031681565b600554600160a060020a031681565b6000908152600a60205260409020805460018201546002830154600390930154919360ff808316946101008404909116936201000090930464ffffffffff1692600160f060020a0390911691600160a060020a0390911690565b60075481565b60015481565b60045481565b600554600160a060020a0316331480610ff05750600654600160a060020a031633145b1515611046576040805160e560020a62461bcd0281526020600482015260266024820152600080516020611f61833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b30318111156110c4576040805160e560020a62461bcd028152602060048201526024808201527f496e63726561736520616d6f756e74206c6172676572207468616e2062616c6160448201527f6e63652e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60095430316001608060020a03808316608060020a9093048116929092019091168201111561113d576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f7420656e6f7567682066756e64732e000000000000000000000000000000604482015290519081900360640190fd5b611148828283611bbf565b5050565b600554600160a060020a031633148061116f5750600654600160a060020a031633145b15156111c5576040805160e560020a62461bcd0281526020600482015260266024820152600080516020611f61833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b3031811115611243576040805160e560020a62461bcd028152602060048201526024808201527f496e63726561736520616d6f756e74206c6172676572207468616e2062616c6160448201527f6e63652e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60095430316001608060020a03808316608060020a909304811692909201909116820111156112bc576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f7420656e6f7567682066756e64732e000000000000000000000000000000604482015290519081900360640190fd5b600980546fffffffffffffffffffffffffffffffff1981166001608060020a039182169390930116919091179055565b600554600160a060020a031633148061130f5750600654600160a060020a031633145b1515611365576040805160e560020a62461bcd0281526020600482015260266024820152600080516020611f61833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600954608060020a90046001608060020a031681565b600b5460009081908190600160a060020a03163314611439576040805160e560020a62461bcd02815260206004820152602c60248201527f4f6e6c7943726f7570696572206d6574686f64732063616c6c6564206279206e60448201527f6f6e2d63726f75706965722e0000000000000000000000000000000000000000606482015290519081900360840190fd5b604080516bffffffffffffffffffffffff19808916602080840191909152908816603483015282516028818403018152604890920192839052815191929182918401908083835b6020831061149f5780518252601f199092019160209182019101611480565b51815160209384036101000a600019018019909216911617905260408051929094018290039091206000818152600a909252929020600181015492975095505062010000900464ffffffffff16925050438210905061156e576040805160e560020a62461bcd02815260206004820152603360248201527f736574746c6542657420696e207468652073616d6520626c6f636b206173207060448201527f6c6163654265742c206f72206265666f72652e00000000000000000000000000606482015290519081900360840190fd5b60fa81014311156115ef576040805160e560020a62461bcd02815260206004820152602260248201527f426c6f636b686173682063616e2774206265207175657269656420627920455660448201527f4d2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b80408414611647576040805160e560020a62461bcd02815260206004820152601160248201527f626c6f636b4861736820696e76616c6964000000000000000000000000000000604482015290519081900360640190fd5b61165382878787611c72565b505050505050565b6000818152600a6020526040812080549091808215156116eb576040805160e560020a62461bcd02815260206004820152602260248201527f4265742073686f756c6420626520696e20616e2027616374697665272073746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600184015464ffffffffff620100009091041660fa01431161177d576040805160e560020a62461bcd02815260206004820152602260248201527f426c6f636b686173682063616e2774206265207175657269656420627920455660448201527f4d2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008455600184015461179d90849060ff80821691610100900416611a84565b600980546001608060020a03608060020a808304821686900382160291811691909117918290559294509092501681116117fd57600980546001608060020a03808216849003166fffffffffffffffffffffffffffffffff199091161790555b600384015461181690600160a060020a03168480611bbf565b5050505050565b600554600160a060020a03163314806118405750600654600160a060020a031633145b1515611896576040805160e560020a62461bcd0281526020600482015260266024820152600080516020611f61833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600554600160a060020a03163314806118e85750600654600160a060020a031633145b151561193e576040805160e560020a62461bcd0281526020600482015260266024820152600080516020611f61833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b693f870857a3e0e380000081106119c5576040805160e560020a62461bcd02815260206004820152602260248201527f6d617850726f6669742073686f756c6420626520612073616e65206e756d626560448201527f722e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600755565b603f7e0104104104104104104104104104104104104104104104104104104104104179200000000010000000000800000000040000000002000000000164ffffffffff851602160660015b82811015611a7d576501000000000090930492603f64ffffffffff8516792000000000100000000008000000000400000000020000000001027e0104104104104104104104104104104104104104104104104104104104104116069190910190600101611a15565b5092915050565b6000806000836000108015611a995750848411155b1515611aef576040805160e560020a62461bcd02815260206004820152601d60248201527f57696e2070726f626162696c697479206f7574206f662072616e67652e000000604482015290519081900360640190fd5b600254861015611b00576000611b04565b6004545b600054909250612710908702049050600154811015611b2257506001545b808201861015611ba2576040805160e560020a62461bcd02815260206004820152602260248201527f42657420646f65736e2774206576656e20636f76657220686f7573652065646760448201527f652e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8385838389030302811515611bb357fe5b04925050935093915050565b604051600160a060020a0384169083156108fc029084906000818181858888f1935050505015611c2d57604080518281529051600160a060020a038516917fd4f43975feb89f48dd30cabbb32011045be187d1e11c8ea9faa43efc35282519919081900360200190a2611c6d565b604080518381529051600160a060020a038516917fac464fe4d3a86b9121261ac0a01dd981bfe0777c7c9d9c8f4473d31a9c0f9d2d919081900360200190a25b505050565b83546001850154600386015460ff8083169261010090041690600160a060020a031660008080808080808a1515611d19576040805160e560020a62461bcd02815260206004820152602260248201527f4265742073686f756c6420626520696e20616e2027616374697665272073746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008f600001819055508d8c8e60405160200180846bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526014018360001916600019168152602001826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260140193505050506040516020818303038152906040526040518082805190602001908083835b60208310611dc65780518252601f199092019160209182019101611da7565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912099508c925089915050811515611e0157fe5b069550611e0f8b8b8b611a84565b90955093506000925082915060648a14801590611e2d575060f08a11155b15611e6a578e60020160009054906101000a9004600160f060020a0316600160f060020a03168660020a166000141515611e65578492505b611e76565b88861015611e76578492505b600980546001608060020a03608060020a808304821689900382160291161790556002548b10611ee9576003548a88811515611eae57fe5b04811515611eb857fe5b069050801515611ee957600980546fffffffffffffffffffffffffffffffff1981169091556001608060020a031691505b6000821115611f3257604080518381529051600160a060020a038a16917fc388db0e8aa560a59633c094a0d0aa21322cd6234836fd5bac00fc5ae63b5783919081900360200190a25b611f4f8884840115611f4657838501611f49565b60015b85611bbf565b50505050505050505050505050505056004f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2da165627a7a7230582000d7a0e60f5404056ef9e53bb769f694e12abd9c00e92ff04863e2f9afe678b2002900000000000000000000000008a6268b1362b02f6473ec22fac93795353f5173000000000000000000000000d81f6028509b1c38c48abd2e5ca6f28889ebbd4d0000000000000000000000005a5f158fb01b03a9df99337386516ebcbd1b93eb00000000000000000000000001fd2b8c9c81044d37352704f1ce9ada7e1b6ae20000000000000000000000000000000000000000000000004563918244f40000",
  "constructorArguments": "00000000000000000000000008a6268b1362b02f6473ec22fac93795353f5173000000000000000000000000d81f6028509b1c38c48abd2e5ca6f28889ebbd4d0000000000000000000000005a5f158fb01b03a9df99337386516ebcbd1b93eb00000000000000000000000001fd2b8c9c81044d37352704f1ce9ada7e1b6ae20000000000000000000000000000000000000000000000004563918244f40000"
}