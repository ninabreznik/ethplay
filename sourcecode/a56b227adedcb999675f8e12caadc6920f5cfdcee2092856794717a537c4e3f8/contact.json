{
  "address": "0xcf106b9644eb97deb5b78ab22da160ffca67a448",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WalletFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "999",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-04\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Owned\n * @dev Basic contract to define an owner.\n * @author Julien Niset - <[email protected]>\n */\ncontract Owned {\n\n    // The owner\n    address public owner;\n\n    event OwnerChanged(address indexed _newOwner);\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Must be owner\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\n     * @param _newOwner The new owner.\n     */\n    function changeOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Address must not be null\");\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n}\n\n/**\n * @title Managed\n * @dev Basic contract that defines a set of managers. Only the owner can add/remove managers.\n * @author Julien Niset - <[email protected]>\n */\ncontract Managed is Owned {\n\n    // The managers\n    mapping (address => bool) public managers;\n\n    /**\n     * @dev Throws if the sender is not a manager.\n     */\n    modifier onlyManager {\n        require(managers[msg.sender] == true, \"M: Must be manager\");\n        _;\n    }\n\n    event ManagerAdded(address indexed _manager);\n    event ManagerRevoked(address indexed _manager);\n\n    /**\n    * @dev Adds a manager. \n    * @param _manager The address of the manager.\n    */\n    function addManager(address _manager) external onlyOwner {\n        require(_manager != address(0), \"M: Address must not be null\");\n        if(managers[_manager] == false) {\n            managers[_manager] = true;\n            emit ManagerAdded(_manager);\n        }        \n    }\n\n    /**\n    * @dev Revokes a manager.\n    * @param _manager The address of the manager.\n    */\n    function revokeManager(address _manager) external onlyOwner {\n        require(managers[_manager] == true, \"M: Target must be an existing manager\");\n        delete managers[_manager];\n        emit ManagerRevoked(_manager);\n    }\n}\n\n/**\n * ENS Registry interface.\n */\ncontract ENSRegistry {\n    function owner(bytes32 _node) public view returns (address);\n    function resolver(bytes32 _node) public view returns (address);\n    function ttl(bytes32 _node) public view returns (uint64);\n    function setOwner(bytes32 _node, address _owner) public;\n    function setSubnodeOwner(bytes32 _node, bytes32 _label, address _owner) public;\n    function setResolver(bytes32 _node, address _resolver) public;\n    function setTTL(bytes32 _node, uint64 _ttl) public;\n}\n\n/**\n * ENS Resolver interface.\n */\ncontract ENSResolver {\n    function addr(bytes32 _node) public view returns (address);\n    function setAddr(bytes32 _node, address _addr) public;\n    function name(bytes32 _node) public view returns (string);\n    function setName(bytes32 _node, string _name) public;\n}\n\n/**\n * ENS Reverse Registrar interface.\n */\ncontract ENSReverseRegistrar {\n    function claim(address _owner) public returns (bytes32 _node);\n    function claimWithResolver(address _owner, address _resolver) public returns (bytes32);\n    function setName(string _name) public returns (bytes32);\n    function node(address _addr) public view returns (bytes32);\n}\n\n/*\n * @title String & slice utility library for Solidity contracts.\n * @author Nick Johnson <[email protected]>\n *\n * @dev Functionality in this library is largely implemented using an\n *      abstraction called a 'slice'. A slice represents a part of a string -\n *      anything from the entire string to a single character, or even no\n *      characters at all (a 0-length slice). Since a slice only has to specify\n *      an offset and a length, copying and manipulating slices is a lot less\n *      expensive than copying and manipulating the strings they reference.\n *\n *      To further reduce gas costs, most functions on slice that need to return\n *      a slice modify the original one instead of allocating a new one; for\n *      instance, `s.split(\".\")` will return the text up to the first '.',\n *      modifying s to only contain the remainder of the string after the '.'.\n *      In situations where you do not want to modify the original slice, you\n *      can make a copy first with `.copy()`, for example:\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\n *      Solidity has no memory management, it will result in allocating many\n *      short-lived slices that are later discarded.\n *\n *      Functions that return two slices come in two versions: a non-allocating\n *      version that takes the second slice as an argument, modifying it in\n *      place, and an allocating version that allocates and returns the second\n *      slice; see `nextRune` for example.\n *\n *      Functions that have to copy string data will return strings rather than\n *      slices; these can be cast back to slices for further processing if\n *      required.\n *\n *      For convenience, some functions are provided with non-modifying\n *      variants that create a new slice and return both; for instance,\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\n *      corresponding to the left and right parts of the string.\n */\n/* solium-disable */\nlibrary strings {\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string memory self) internal pure returns (slice memory) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns the length of a null-terminated bytes32 string.\n     * @param self The value to find the length of.\n     * @return The length of the string, from 0 to 32.\n     */\n    function len(bytes32 self) internal pure returns (uint) {\n        uint ret;\n        if (self == 0)\n            return 0;\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\n            ret += 16;\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n        }\n        if (self & 0xffffffffffffffff == 0) {\n            ret += 8;\n            self = bytes32(uint(self) / 0x10000000000000000);\n        }\n        if (self & 0xffffffff == 0) {\n            ret += 4;\n            self = bytes32(uint(self) / 0x100000000);\n        }\n        if (self & 0xffff == 0) {\n            ret += 2;\n            self = bytes32(uint(self) / 0x10000);\n        }\n        if (self & 0xff == 0) {\n            ret += 1;\n        }\n        return 32 - ret;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\n     *      null-terminated utf-8 string.\n     * @param self The bytes32 value to convert to a slice.\n     * @return A new slice containing the value of the input argument up to the\n     *         first null.\n     */\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n        assembly {\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, 0x20))\n            mstore(ptr, self)\n            mstore(add(ret, 0x20), ptr)\n        }\n        ret._len = len(self);\n    }\n\n    /*\n     * @dev Returns a new slice containing the same data as the current slice.\n     * @param self The slice to copy.\n     * @return A new slice containing the same data as `self`.\n     */\n    function copy(slice memory self) internal pure returns (slice memory) {\n        return slice(self._len, self._ptr);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice memory self) internal pure returns (string memory) {\n        string memory ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n    /*\n     * @dev Returns the length in runes of the slice. Note that this operation\n     *      takes time proportional to the length of the slice; avoid using it\n     *      in loops, and call `slice.empty()` if you only need to know whether\n     *      the slice is empty or not.\n     * @param self The slice to operate on.\n     * @return The length of the slice in runes.\n     */\n    function len(slice memory self) internal pure returns (uint l) {\n        // Starting at ptr-31 means the LSB will be the byte we care about\n        uint ptr = self._ptr - 31;\n        uint end = ptr + self._len;\n        for (l = 0; ptr < end; l++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n    }\n\n    /*\n     * @dev Returns true if the slice is empty (has a length of 0).\n     * @param self The slice to operate on.\n     * @return True if the slice is empty, False otherwise.\n     */\n    function empty(slice memory self) internal pure returns (bool) {\n        return self._len == 0;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two slices are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first slice to compare.\n     * @param other The second slice to compare.\n     * @return The result of the comparison.\n     */\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\n        uint shortest = self._len;\n        if (other._len < self._len)\n            shortest = other._len;\n\n        uint selfptr = self._ptr;\n        uint otherptr = other._ptr;\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint256 mask = uint256(-1); // 0xffff...\n                if(shortest < 32) {\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                uint256 diff = (a & mask) - (b & mask);\n                if (diff != 0)\n                    return int(diff);\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n        return int(self._len) - int(other._len);\n    }\n\n    /*\n     * @dev Returns true if the two slices contain the same text.\n     * @param self The first slice to compare.\n     * @param self The second slice to compare.\n     * @return True if the slices are equal, false otherwise.\n     */\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\n        return compare(self, other) == 0;\n    }\n\n    /*\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\n     *      slice to point to the next rune and returning `self`.\n     * @param self The slice to operate on.\n     * @param rune The slice that will contain the first rune.\n     * @return `rune`.\n     */\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\n        rune._ptr = self._ptr;\n\n        if (self._len == 0) {\n            rune._len = 0;\n            return rune;\n        }\n\n        uint l;\n        uint b;\n        // Load the first byte of the rune into the LSBs of b\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n        if (b < 0x80) {\n            l = 1;\n        } else if(b < 0xE0) {\n            l = 2;\n        } else if(b < 0xF0) {\n            l = 3;\n        } else {\n            l = 4;\n        }\n\n        // Check for truncated codepoints\n        if (l > self._len) {\n            rune._len = self._len;\n            self._ptr += self._len;\n            self._len = 0;\n            return rune;\n        }\n\n        self._ptr += l;\n        self._len -= l;\n        rune._len = l;\n        return rune;\n    }\n\n    /*\n     * @dev Returns the first rune in the slice, advancing the slice to point\n     *      to the next rune.\n     * @param self The slice to operate on.\n     * @return A slice containing only the first rune from `self`.\n     */\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\n        nextRune(self, ret);\n    }\n\n    /*\n     * @dev Returns the number of the first codepoint in the slice.\n     * @param self The slice to operate on.\n     * @return The number of the first codepoint in the slice.\n     */\n    function ord(slice memory self) internal pure returns (uint ret) {\n        if (self._len == 0) {\n            return 0;\n        }\n\n        uint word;\n        uint length;\n        uint divisor = 2 ** 248;\n\n        // Load the rune into the MSBs of b\n        assembly { word:= mload(mload(add(self, 32))) }\n        uint b = word / divisor;\n        if (b < 0x80) {\n            ret = b;\n            length = 1;\n        } else if(b < 0xE0) {\n            ret = b & 0x1F;\n            length = 2;\n        } else if(b < 0xF0) {\n            ret = b & 0x0F;\n            length = 3;\n        } else {\n            ret = b & 0x07;\n            length = 4;\n        }\n\n        // Check for truncated codepoints\n        if (length > self._len) {\n            return 0;\n        }\n\n        for (uint i = 1; i < length; i++) {\n            divisor = divisor / 256;\n            b = (word / divisor) & 0xFF;\n            if (b & 0xC0 != 0x80) {\n                // Invalid UTF-8 sequence\n                return 0;\n            }\n            ret = (ret * 64) | (b & 0x3F);\n        }\n\n        return ret;\n    }\n\n    /*\n     * @dev Returns the keccak-256 hash of the slice.\n     * @param self The slice to hash.\n     * @return The hash of the slice.\n     */\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\n        assembly {\n            ret := keccak256(mload(add(self, 32)), mload(self))\n        }\n    }\n\n    /*\n     * @dev Returns true if `self` starts with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        if (self._ptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let selfptr := mload(add(self, 0x20))\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n        return equal;\n    }\n\n    /*\n     * @dev If `self` starts with `needle`, `needle` is removed from the\n     *      beginning of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        bool equal = true;\n        if (self._ptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let selfptr := mload(add(self, 0x20))\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n            self._ptr += needle._len;\n        }\n\n        return self;\n    }\n\n    /*\n     * @dev Returns true if the slice ends with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n\n        if (selfptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n\n        return equal;\n    }\n\n    /*\n     * @dev If `self` ends with `needle`, `needle` is removed from the\n     *      end of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n        bool equal = true;\n        if (selfptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n        }\n\n        return self;\n    }\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr = selfptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                uint end = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr >= end)\n                        return selfptr + selflen;\n                    ptr++;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    // Returns the memory address of the first byte after the last occurrence of\n    // `needle` in `self`, or the address of `self` if not found.\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                ptr = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr <= selfptr)\n                        return selfptr;\n                    ptr--;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr + needlelen;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n                ptr = selfptr + (selflen - needlelen);\n                while (ptr >= selfptr) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr + needlelen;\n                    ptr -= 1;\n                }\n            }\n        }\n        return selfptr;\n    }\n\n    /*\n     * @dev Modifies `self` to contain everything from the first occurrence of\n     *      `needle` to the end of the slice. `self` is set to the empty slice\n     *      if `needle` is not found.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len -= ptr - self._ptr;\n        self._ptr = ptr;\n        return self;\n    }\n\n    /*\n     * @dev Modifies `self` to contain the part of the string from the start of\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\n     *      is not found, `self` is set to the empty slice.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len = ptr - self._ptr;\n        return self;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and `token` to everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = ptr;\n        token._len = self._len - (ptr - self._ptr);\n        if (ptr == self._ptr) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and returning everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` after the last occurrence of `delim`.\n     */\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        rsplit(self, needle, token);\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    /*\n     * @dev Returns True if `self` contains `needle`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return True if `needle` is found in `self`, false otherwise.\n     */\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\n     *      newly allocated string.\n     * @param self The delimiter to use.\n     * @param parts A list of slices to join.\n     * @return A newly allocated string containing all the slices in `parts`,\n     *         joined with `self`.\n     */\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\n        if (parts.length == 0)\n            return \"\";\n\n        uint length = self._len * (parts.length - 1);\n        for(uint i = 0; i < parts.length; i++)\n            length += parts[i]._len;\n\n        string memory ret = new string(length);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        for(i = 0; i < parts.length; i++) {\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n            retptr += parts[i]._len;\n            if (i < parts.length - 1) {\n                memcpy(retptr, self._ptr, self._len);\n                retptr += self._len;\n            }\n        }\n\n        return ret;\n    }\n}\n\n/**\n * @title ENSConsumer\n * @dev Helper contract to resolve ENS names.\n * @author Julien Niset - <[email protected]>\n */\ncontract ENSConsumer {\n\n    using strings for *;\n\n    // namehash('addr.reverse')\n    bytes32 constant public ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n    // the address of the ENS registry\n    address ensRegistry;\n\n    /**\n    * @dev No address should be provided when deploying on Mainnet to avoid storage cost. The \n    * contract will use the hardcoded value.\n    */\n    constructor(address _ensRegistry) public {\n        ensRegistry = _ensRegistry;\n    }\n\n    /**\n    * @dev Resolves an ENS name to an address.\n    * @param _node The namehash of the ENS name. \n    */\n    function resolveEns(bytes32 _node) public view returns (address) {\n        address resolver = getENSRegistry().resolver(_node);\n        return ENSResolver(resolver).addr(_node);\n    }\n\n    /**\n    * @dev Gets the official ENS registry.\n    */\n    function getENSRegistry() public view returns (ENSRegistry) {\n        return ENSRegistry(ensRegistry);\n    }\n\n    /**\n    * @dev Gets the official ENS reverse registrar. \n    */\n    function getENSReverseRegistrar() public view returns (ENSReverseRegistrar) {\n        return ENSReverseRegistrar(getENSRegistry().owner(ADDR_REVERSE_NODE));\n    }\n}\n\n/**\n * @dev Interface for an ENS Mananger.\n */\ninterface IENSManager {\n    function changeRootnodeOwner(address _newOwner) external;\n    function register(string _label, address _owner) external;\n    function isAvailable(bytes32 _subnode) external view returns(bool);\n}\n\n/**\n * @title Proxy\n * @dev Basic proxy that delegates all calls to a fixed implementing contract.\n * The implementing contract cannot be upgraded.\n * @author Julien Niset - <[email protected]>\n */\ncontract Proxy {\n\n    address implementation;\n\n    event Received(uint indexed value, address indexed sender, bytes data);\n\n    constructor(address _implementation) public {\n        implementation = _implementation;\n    }\n\n    function() external payable {\n\n        if(msg.data.length == 0 && msg.value > 0) { \n            emit Received(msg.value, msg.sender, msg.data); \n        }\n        else {\n            // solium-disable-next-line security/no-inline-assembly\n            assembly {\n                let target := sload(0)\n                calldatacopy(0, 0, calldatasize())\n                let result := delegatecall(gas, target, 0, calldatasize(), 0, 0)\n                returndatacopy(0, 0, returndatasize())\n                switch result \n                case 0 {revert(0, returndatasize())} \n                default {return (0, returndatasize())}\n            }\n        }\n    }\n}\n\n/**\n * @title Module\n * @dev Interface for a module. \n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\n * can never end up in a \"frozen\" state.\n * @author Julien Niset - <[email protected]>\n */\ninterface Module {\n\n    /**\n     * @dev Inits a module for a wallet by e.g. setting some wallet specific parameters in storage.\n     * @param _wallet The wallet.\n     */\n    function init(BaseWallet _wallet) external;\n\n    /**\n     * @dev Adds a module to a wallet.\n     * @param _wallet The target wallet.\n     * @param _module The modules to authorise.\n     */\n    function addModule(BaseWallet _wallet, Module _module) external;\n\n    /**\n    * @dev Utility method to recover any ERC20 token that was sent to the\n    * module by mistake. \n    * @param _token The token to recover.\n    */\n    function recoverToken(address _token) external;\n}\n\n/**\n * @title BaseWallet\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\n * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by \n * @author Julien Niset - <[email protected]>\n */\ncontract BaseWallet {\n\n    // The implementation of the proxy\n    address public implementation;\n    // The owner \n    address public owner;\n    // The authorised modules\n    mapping (address => bool) public authorised;\n    // The enabled static calls\n    mapping (bytes4 => address) public enabled;\n    // The number of modules\n    uint public modules;\n    \n    event AuthorisedModule(address indexed module, bool value);\n    event EnabledStaticCall(address indexed module, bytes4 indexed method);\n    event Invoked(address indexed module, address indexed target, uint indexed value, bytes data);\n    event Received(uint indexed value, address indexed sender, bytes data);\n    event OwnerChanged(address owner);\n    \n    /**\n     * @dev Throws if the sender is not an authorised module.\n     */\n    modifier moduleOnly {\n        require(authorised[msg.sender], \"BW: msg.sender not an authorized module\");\n        _;\n    }\n\n    /**\n     * @dev Inits the wallet by setting the owner and authorising a list of modules.\n     * @param _owner The owner.\n     * @param _modules The modules to authorise.\n     */\n    function init(address _owner, address[] _modules) external {\n        require(owner == address(0) && modules == 0, \"BW: wallet already initialised\");\n        require(_modules.length > 0, \"BW: construction requires at least 1 module\");\n        owner = _owner;\n        modules = _modules.length;\n        for(uint256 i = 0; i < _modules.length; i++) {\n            require(authorised[_modules[i]] == false, \"BW: module is already added\");\n            authorised[_modules[i]] = true;\n            Module(_modules[i]).init(this);\n            emit AuthorisedModule(_modules[i], true);\n        }\n    }\n    \n    /**\n     * @dev Enables/Disables a module.\n     * @param _module The target module.\n     * @param _value Set to true to authorise the module.\n     */\n    function authoriseModule(address _module, bool _value) external moduleOnly {\n        if (authorised[_module] != _value) {\n            if(_value == true) {\n                modules += 1;\n                authorised[_module] = true;\n                Module(_module).init(this);\n            }\n            else {\n                modules -= 1;\n                require(modules > 0, \"BW: wallet must have at least one module\");\n                delete authorised[_module];\n            }\n            emit AuthorisedModule(_module, _value);\n        }\n    }\n\n    /**\n    * @dev Enables a static method by specifying the target module to which the call\n    * must be delegated.\n    * @param _module The target module.\n    * @param _method The static method signature.\n    */\n    function enableStaticCall(address _module, bytes4 _method) external moduleOnly {\n        require(authorised[_module], \"BW: must be an authorised module for static call\");\n        enabled[_method] = _module;\n        emit EnabledStaticCall(_module, _method);\n    }\n\n    /**\n     * @dev Sets a new owner for the wallet.\n     * @param _newOwner The new owner.\n     */\n    function setOwner(address _newOwner) external moduleOnly {\n        require(_newOwner != address(0), \"BW: address cannot be null\");\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n    \n    /**\n     * @dev Performs a generic transaction.\n     * @param _target The address for the transaction.\n     * @param _value The value of the transaction.\n     * @param _data The data of the transaction.\n     */\n    function invoke(address _target, uint _value, bytes _data) external moduleOnly {\n        // solium-disable-next-line security/no-call-value\n        require(_target.call.value(_value)(_data), \"BW: call to target failed\");\n        emit Invoked(msg.sender, _target, _value, _data);\n    }\n\n    /**\n     * @dev This method makes it possible for the wallet to comply to interfaces expecting the wallet to\n     * implement specific static methods. It delegates the static call to a target contract if the data corresponds \n     * to an enabled method, or logs the call otherwise.\n     */\n    function() public payable {\n        if(msg.data.length > 0) { \n            address module = enabled[msg.sig];\n            if(module == address(0)) {\n                emit Received(msg.value, msg.sender, msg.data);\n            } \n            else {\n                require(authorised[module], \"BW: must be an authorised module for static call\");\n                // solium-disable-next-line security/no-inline-assembly\n                assembly {\n                    calldatacopy(0, 0, calldatasize())\n                    let result := staticcall(gas, module, 0, calldatasize(), 0, 0)\n                    returndatacopy(0, 0, returndatasize())\n                    switch result \n                    case 0 {revert(0, returndatasize())} \n                    default {return (0, returndatasize())}\n                }\n            }\n        }\n    }\n}\n\n/**\n * ERC20 contract interface.\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint);\n    function decimals() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n}\n\n/**\n * @title ModuleRegistry\n * @dev Registry of authorised modules. \n * Modules must be registered before they can be authorised on a wallet.\n * @author Julien Niset - <[email protected]>\n */\ncontract ModuleRegistry is Owned {\n\n    mapping (address => Info) internal modules;\n    mapping (address => Info) internal upgraders;\n\n    event ModuleRegistered(address indexed module, bytes32 name);\n    event ModuleDeRegistered(address module);\n    event UpgraderRegistered(address indexed upgrader, bytes32 name);\n    event UpgraderDeRegistered(address upgrader);\n\n    struct Info {\n        bool exists;\n        bytes32 name;\n    }\n\n    /**\n     * @dev Registers a module.\n     * @param _module The module.\n     * @param _name The unique name of the module.\n     */\n    function registerModule(address _module, bytes32 _name) external onlyOwner {\n        require(!modules[_module].exists, \"MR: module already exists\");\n        modules[_module] = Info({exists: true, name: _name});\n        emit ModuleRegistered(_module, _name);\n    }\n\n    /**\n     * @dev Deregisters a module.\n     * @param _module The module.\n     */\n    function deregisterModule(address _module) external onlyOwner {\n        require(modules[_module].exists, \"MR: module does not exists\");\n        delete modules[_module];\n        emit ModuleDeRegistered(_module);\n    }\n\n        /**\n     * @dev Registers an upgrader.\n     * @param _upgrader The upgrader.\n     * @param _name The unique name of the upgrader.\n     */\n    function registerUpgrader(address _upgrader, bytes32 _name) external onlyOwner {\n        require(!upgraders[_upgrader].exists, \"MR: upgrader already exists\");\n        upgraders[_upgrader] = Info({exists: true, name: _name});\n        emit UpgraderRegistered(_upgrader, _name);\n    }\n\n    /**\n     * @dev Deregisters an upgrader.\n     * @param _upgrader The _upgrader.\n     */\n    function deregisterUpgrader(address _upgrader) external onlyOwner {\n        require(upgraders[_upgrader].exists, \"MR: upgrader does not exists\");\n        delete upgraders[_upgrader];\n        emit UpgraderDeRegistered(_upgrader);\n    }\n\n    /**\n    * @dev Utility method enbaling the owner of the registry to claim any ERC20 token that was sent to the\n    * registry.\n    * @param _token The token to recover.\n    */\n    function recoverToken(address _token) external onlyOwner {\n        uint total = ERC20(_token).balanceOf(address(this));\n        ERC20(_token).transfer(msg.sender, total);\n    } \n\n    /**\n     * @dev Gets the name of a module from its address.\n     * @param _module The module address.\n     * @return the name.\n     */\n    function moduleInfo(address _module) external view returns (bytes32) {\n        return modules[_module].name;\n    }\n\n    /**\n     * @dev Gets the name of an upgrader from its address.\n     * @param _upgrader The upgrader address.\n     * @return the name.\n     */\n    function upgraderInfo(address _upgrader) external view returns (bytes32) {\n        return upgraders[_upgrader].name;\n    }\n\n    /**\n     * @dev Checks if a module is registered.\n     * @param _module The module address.\n     * @return true if the module is registered.\n     */\n    function isRegisteredModule(address _module) external view returns (bool) {\n        return modules[_module].exists;\n    }\n\n    /**\n     * @dev Checks if a list of modules are registered.\n     * @param _modules The list of modules address.\n     * @return true if all the modules are registered.\n     */\n    function isRegisteredModule(address[] _modules) external view returns (bool) {\n        for(uint i = 0; i < _modules.length; i++) {\n            if (!modules[_modules[i]].exists) {\n                return false;\n            }\n        }\n        return true;\n    }  \n\n    /**\n     * @dev Checks if an upgrader is registered.\n     * @param _upgrader The upgrader address.\n     * @return true if the upgrader is registered.\n     */\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool) {\n        return upgraders[_upgrader].exists;\n    } \n\n}\n\n/**\n * @title WalletFactory\n * @dev The WalletFactory contract creates and assigns wallets to accounts.\n * @author Julien Niset - <[email protected]>\n */\ncontract WalletFactory is Owned, Managed, ENSConsumer {\n\n    // The address of the module registry\n    address public moduleRegistry;\n    // The address of the base wallet implementation\n    address public walletImplementation;\n    // The address of the ENS manager\n    address public ensManager;\n    // The address of the ENS resolver\n    address public ensResolver;\n\n    // *************** Events *************************** //\n\n    event ModuleRegistryChanged(address addr);\n    event WalletImplementationChanged(address addr);\n    event ENSManagerChanged(address addr);\n    event ENSResolverChanged(address addr);\n    event WalletCreated(address indexed _wallet, address indexed _owner);\n\n    // *************** Constructor ********************** //\n\n    /**\n     * @dev Default constructor.\n     */\n    constructor(\n        address _ensRegistry, \n        address _moduleRegistry,\n        address _walletImplementation, \n        address _ensManager, \n        address _ensResolver\n    ) \n        ENSConsumer(_ensRegistry) \n        public \n    {\n        moduleRegistry = _moduleRegistry;\n        walletImplementation = _walletImplementation;\n        ensManager = _ensManager;\n        ensResolver = _ensResolver;\n    }\n\n    // *************** External Functions ********************* //\n\n    /**\n     * @dev Lets the manager create a wallet for an account. The wallet is initialised with a list of modules.\n     * @param _owner The account address.\n     * @param _modules The list of modules.\n     * @param _label Optional ENS label of the new wallet (e.g. franck).\n     */\n    function createWallet(address _owner, address[] _modules, string _label) external onlyManager {\n        require(_owner != address(0), \"WF: owner cannot be null\");\n        require(_modules.length > 0, \"WF: cannot assign with less than 1 module\");\n        require(ModuleRegistry(moduleRegistry).isRegisteredModule(_modules), \"WF: one or more modules are not registered\");\n        // create the proxy\n        Proxy proxy = new Proxy(walletImplementation);\n        address wallet = address(proxy);\n        // check for ENS\n        bytes memory labelBytes = bytes(_label);\n        if (labelBytes.length != 0) {\n            // add the factory to the modules so it can claim the reverse ENS\n            address[] memory extendedModules = new address[](_modules.length + 1);\n            extendedModules[0] = address(this);\n            for(uint i = 0; i < _modules.length; i++) {\n                extendedModules[i + 1] = _modules[i];\n            }\n            // initialise the wallet with the owner and the extended modules\n            BaseWallet(wallet).init(_owner, extendedModules);\n            // register ENS\n            registerWalletENS(wallet, _label);\n            // remove the factory from the authorised modules\n            BaseWallet(wallet).authoriseModule(address(this), false);\n        } else {\n            // initialise the wallet with the owner and the modules\n            BaseWallet(wallet).init(_owner, _modules);\n        }\n        emit WalletCreated(wallet, _owner);\n    }\n\n    /**\n     * @dev Lets the owner change the address of the module registry contract.\n     * @param _moduleRegistry The address of the module registry contract.\n     */\n    function changeModuleRegistry(address _moduleRegistry) external onlyOwner {\n        require(_moduleRegistry != address(0), \"WF: address cannot be null\");\n        moduleRegistry = _moduleRegistry;\n        emit ModuleRegistryChanged(_moduleRegistry);\n    }\n\n    /**\n     * @dev Lets the owner change the address of the implementing contract.\n     * @param _walletImplementation The address of the implementing contract.\n     */\n    function changeWalletImplementation(address _walletImplementation) external onlyOwner {\n        require(_walletImplementation != address(0), \"WF: address cannot be null\");\n        walletImplementation = _walletImplementation;\n        emit WalletImplementationChanged(_walletImplementation);\n    }\n\n    /**\n     * @dev Lets the owner change the address of the ENS manager contract.\n     * @param _ensManager The address of the ENS manager contract.\n     */\n    function changeENSManager(address _ensManager) external onlyOwner {\n        require(_ensManager != address(0), \"WF: address cannot be null\");\n        ensManager = _ensManager;\n        emit ENSManagerChanged(_ensManager);\n    }\n\n    /**\n     * @dev Lets the owner change the address of the ENS resolver contract.\n     * @param _ensResolver The address of the ENS resolver contract.\n     */\n    function changeENSResolver(address _ensResolver) external onlyOwner {\n        require(_ensResolver != address(0), \"WF: address cannot be null\");\n        ensResolver = _ensResolver;\n        emit ENSResolverChanged(_ensResolver);\n    }\n\n    /**\n     * @dev Register an ENS subname to a wallet.\n     * @param _wallet The wallet address.\n     * @param _label ENS label of the new wallet (e.g. franck).\n     */\n    function registerWalletENS(address _wallet, string _label) internal {\n        // claim reverse\n        bytes memory methodData = abi.encodeWithSignature(\"claimWithResolver(address,address)\", ensManager, ensResolver);\n        BaseWallet(_wallet).invoke(getENSReverseRegistrar(), 0, methodData);\n        // register with ENS manager\n        IENSManager(ensManager).register(_label, _wallet);\n    }\n\n    /**\n     * @dev Inits the module for a wallet by logging an event.\n     * The method can only be called by the wallet itself.\n     * @param _wallet The wallet.\n     */\n    function init(BaseWallet _wallet) external pure {\n        //do nothing\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160a08061192e833981016040908152815160208301519183015160608401516080909401516000805433600160a060020a0319918216178255600280548216600160a060020a03968716179055600380548216968616969096179095556004805486169385169390931790925560058054851695841695909517909455600680549093169190931617905561187f9081906100af90396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308d668bc811461010b57806309d734421461012e57806319ab453c1461015f5780632d06177a146101805780632f680795146101a1578063377e32e6146101b65780635a6971f9146101d75780637cf8a2eb146101ec5780638117abc1146102135780638da5cb5b1461022857806390ed991c1461023d5780639eb869c71461025e578063a6f9dae114610276578063adce1c5f14610297578063aff18575146102ac578063b95459e4146102e5578063c799cd11146102fa578063fb4199991461031b578063fdff9b4d1461033c575b600080fd5b34801561011757600080fd5b5061012c600160a060020a0360043516610371565b005b34801561013a57600080fd5b5061014361049e565b60408051600160a060020a039092168252519081900360200190f35b34801561016b57600080fd5b5061012c600160a060020a036004351661055d565b34801561018c57600080fd5b5061012c600160a060020a0360043516610560565b3480156101ad57600080fd5b5061014361069d565b3480156101c257600080fd5b5061012c600160a060020a03600435166106ac565b3480156101e357600080fd5b506101436107fd565b3480156101f857600080fd5b5061020161080c565b60408051918252519081900360200190f35b34801561021f57600080fd5b50610143610830565b34801561023457600080fd5b5061014361083f565b34801561024957600080fd5b5061012c600160a060020a036004351661084e565b34801561026a57600080fd5b5061014360043561097b565b34801561028257600080fd5b5061012c600160a060020a0360043516610ab4565b3480156102a357600080fd5b50610143610bd5565b3480156102b857600080fd5b5061012c60048035600160a060020a03169060248035808201929081013591604435908101910135610be4565b3480156102f157600080fd5b50610143611213565b34801561030657600080fd5b5061012c600160a060020a0360043516611222565b34801561032757600080fd5b5061012c600160a060020a036004351661134f565b34801561034857600080fd5b5061035d600160a060020a036004351661147c565b604080519115158252519081900360200190f35b600054600160a060020a031633146103d85760408051600080516020611834833981519152815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561043d5760408051600080516020611834833981519152815260206004820152601a60248201527f57463a20616464726573732063616e6e6f74206265206e756c6c000000000000604482015290519081900360640190fd5b60038054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f9bf4baeb20b6008af8dfd7fed5c50dce707a05623b022e5d61a00c7db7f90c729181900360200190a150565b60006104a861069d565b604080517f02571be30000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201529051600160a060020a0392909216916302571be3916024808201926020929091908290030181600087803b15801561052c57600080fd5b505af1158015610540573d6000803e3d6000fd5b505050506040513d602081101561055657600080fd5b5051905090565b50565b600054600160a060020a031633146105c75760408051600080516020611834833981519152815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561062c5760408051600080516020611834833981519152815260206004820152601b60248201527f4d3a2041646472657373206d757374206e6f74206265206e756c6c0000000000604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff16151561055d57600160a060020a0381166000818152600160208190526040808320805460ff1916909217909155517f3b4a40cccf2058c593542587329dd385be4f0b588db5471fbd9598e56dd7093a9190a250565b600254600160a060020a031690565b600054600160a060020a031633146107135760408051600080516020611834833981519152815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03811660009081526001602081905260409091205460ff161515146107b45760408051600080516020611834833981519152815260206004820152602560248201527f4d3a20546172676574206d75737420626520616e206578697374696e67206d6160448201527f6e61676572000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038116600081815260016020526040808220805460ff19169055517fe5def11e0516f317f9c37b8835aec29fc01db4d4b6d6fecaca339d3596a29bc19190a250565b600554600160a060020a031681565b7f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e281565b600454600160a060020a031681565b600054600160a060020a031681565b600054600160a060020a031633146108b55760408051600080516020611834833981519152815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561091a5760408051600080516020611834833981519152815260206004820152601a60248201527f57463a20616464726573732063616e6e6f74206265206e756c6c000000000000604482015290519081900360640190fd5b60058054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f5b22021f5b1f5f8a744edb1f20f667875f22a1b29c4d9a46418ee25110c76cb89181900360200190a150565b60008061098661069d565b600160a060020a0316630178b8bf846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156109ef57600080fd5b505af1158015610a03573d6000803e3d6000fd5b505050506040513d6020811015610a1957600080fd5b5051604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481018690529051919250600160a060020a03831691633b3b57de916024808201926020929091908290030181600087803b158015610a8157600080fd5b505af1158015610a95573d6000803e3d6000fd5b505050506040513d6020811015610aab57600080fd5b50519392505050565b600054600160a060020a03163314610b1b5760408051600080516020611834833981519152815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381161515610b805760408051600080516020611834833981519152815260206004820152601860248201527f41646472657373206d757374206e6f74206265206e756c6c0000000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038316908117825560405190917fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3691a250565b600654600160a060020a031681565b33600090815260016020819052604082205482916060918291849160ff16151514610c5e5760408051600080516020611834833981519152815260206004820152601260248201527f4d3a204d757374206265206d616e616765720000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038a161515610cc35760408051600080516020611834833981519152815260206004820152601860248201527f57463a206f776e65722063616e6e6f74206265206e756c6c0000000000000000604482015290519081900360640190fd5b60008811610d465760408051600080516020611834833981519152815260206004820152602960248201527f57463a2063616e6e6f742061737369676e2077697468206c657373207468616e60448201527f2031206d6f64756c650000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6003546040517f6bb18a54000000000000000000000000000000000000000000000000000000008152602060048201818152602483018c9052600160a060020a0390931692636bb18a54928d928d92918291604490910190859085028082843782019150509350505050602060405180830381600087803b158015610dca57600080fd5b505af1158015610dde573d6000803e3d6000fd5b505050506040513d6020811015610df457600080fd5b50511515610e775760408051600080516020611834833981519152815260206004820152602a60248201527f57463a206f6e65206f72206d6f7265206d6f64756c657320617265206e6f742060448201527f7265676973746572656400000000000000000000000000000000000000000000606482015290519081900360840190fd5b600454600160a060020a0316610e8b6116fc565b600160a060020a03909116815260405190819003602001906000f080158015610eb8573d6000803e3d6000fd5b50945084935086868080601f016020809104026020016040519081016040528093929190818152602001838380828437505084519497505092159250611126915050576040805160018a018082526020808202830101909252908015610f28578160200160208202803883390190505b50915030826000815181101515610f3b57fe5b600160a060020a039092166020928302909101909101525060005b87811015610faa57888882818110610f6a57fe5b90506020020135600160a060020a03168282600101815181101515610f8b57fe5b600160a060020a03909216602092830290910190910152600101610f56565b604080517f3c5a3cea000000000000000000000000000000000000000000000000000000008152600160a060020a038c8116600483019081526024830193845285516044840152855191881693633c5a3cea938f9388939291606401906020808601910280838360005b8381101561102c578181015183820152602001611014565b505050509050019350505050600060405180830381600087803b15801561105257600080fd5b505af1158015611066573d6000803e3d6000fd5b505050506110a48488888080601f01602080910402602001604051908101604052809392919081815260200183838082843750611491945050505050565b604080517f1f17732d0000000000000000000000000000000000000000000000000000000081523060048201526000602482018190529151600160a060020a03871692631f17732d926044808201939182900301818387803b15801561110957600080fd5b505af115801561111d573d6000803e3d6000fd5b505050506111c7565b604080517f3c5a3cea000000000000000000000000000000000000000000000000000000008152600160a060020a038c81166004830190815260248301938452604483018c905290871692633c5a3cea928e928e928e926064018460208502808284378201915050945050505050600060405180830381600087803b1580156111ae57600080fd5b505af11580156111c2573d6000803e3d6000fd5b505050505b89600160a060020a031684600160a060020a03167f5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f08160405160405180910390a350505050505050505050565b600354600160a060020a031681565b600054600160a060020a031633146112895760408051600080516020611834833981519152815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03811615156112ee5760408051600080516020611834833981519152815260206004820152601a60248201527f57463a20616464726573732063616e6e6f74206265206e756c6c000000000000604482015290519081900360640190fd5b60048054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f06b03978f7966b1fbddfcf29d0c63594e116380be51c99e25506cbc85d5bb1a19181900360200190a150565b600054600160a060020a031633146113b65760408051600080516020611834833981519152815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561141b5760408051600080516020611834833981519152815260206004820152601a60248201527f57463a20616464726573732063616e6e6f74206265206e756c6c000000000000604482015290519081900360640190fd5b60068054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f8bd878c65101d815c50829c7b19270ff5c19e91bd1ad6ebaa282c4a65a5baa5f9181900360200190a150565b60016020526000908152604090205460ff1681565b60055460065460408051600160a060020a03938416602482015291831660448084019190915281518084039091018152606490920190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0f5a546600000000000000000000000000000000000000000000000000000000179052908316638f6f033261152061049e565b6000846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115a9578181015183820152602001611591565b50505050905090810190601f1680156115d65780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156115f757600080fd5b505af115801561160b573d6000803e3d6000fd5b5050600554604080517f1e59c529000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660248301526004820192835287516044830152875193169450631e59c529935086928892918291606490910190602086019080838360005b8381101561169257818101518382015260200161167a565b50505050905090810190601f1680156116bf5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b50505050505050565b6040516101278061170d833901905600608060405234801561001057600080fd5b50604051602080610127833981016040525160008054600160a060020a03909216600160a060020a031990921691909117905560d6806100516000396000f30060806040523615801560115750600034115b156082573373ffffffffffffffffffffffffffffffffffffffff16347f606834f57405380c4fb88d1f4850326ad3885f014bab3b568dfbf7a041eef7386000366040518080602001828103825284848281815260200192508082843760405192018290039550909350505050a360a8565b6000543660008037600080366000845af43d6000803e80801560a3573d6000f35b3d6000fd5b0000a165627a7a7230582009ad600070879c5d9739059132e69cc1b5b90d2b945f553b3f45ceea43d65c8f002908c379a000000000000000000000000000000000000000000000000000000000a165627a7a723058200bf0893748cb2a7f9392a3642a9ff3b8d7504b0dfa76c21a9a96981c95a65d790029000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db0105000000000000000000000000b1dd690cc9af7bb1a906a9b5a94f94191cc553ce00000000000000000000000030b406dd3cc461112bcd0dd2a2eaf0641c1a1d62000000000000000000000000da1756bb923af5d1a05e277cb1e54f1d0a127890",
  "constructorArguments": "000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db0105000000000000000000000000b1dd690cc9af7bb1a906a9b5a94f94191cc553ce00000000000000000000000030b406dd3cc461112bcd0dd2a2eaf0641c1a1d62000000000000000000000000da1756bb923af5d1a05e277cb1e54f1d0a127890"
}