{
  "address": "0x83e2be8d114f9661221384b3a50d24b96a5653f5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "0xcert Protocol Token",
  "contractName": "Zxc",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-26\n*/\n\npragma solidity ^0.4.24;\n\n// File: @0xcert/ethereum-erc20/contracts/tokens/ERC20.sol\n\n/**\n * @title A standard interface for tokens.\n */\ninterface ERC20 {\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name()\n    external\n    view\n    returns (string _name);\n\n  /**\n   * @dev Returns the symbol of the token.\n   */\n  function symbol()\n    external\n    view\n    returns (string _symbol);\n\n  /**\n   * @dev Returns the number of decimals the token uses.\n   */\n  function decimals()\n    external\n    view\n    returns (uint8 _decimals);\n\n  /**\n   * @dev Returns the total token supply.\n   */\n  function totalSupply()\n    external\n    view\n    returns (uint256 _totalSupply);\n\n  /**\n   * @dev Returns the account balance of another account with address _owner.\n   * @param _owner The address from which the balance will be retrieved.\n   */\n  function balanceOf(\n    address _owner\n  )\n    external\n    view\n    returns (uint256 _balance);\n\n  /**\n   * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The\n   * function SHOULD throw if the _from account balance does not have enough tokens to spend.\n   * @param _to The address of the recipient.\n   * @param _value The amount of token to be transferred.\n   */\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    external\n    returns (bool _success);\n\n  /**\n   * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the\n   * Transfer event.\n   * @param _from The address of the sender.\n   * @param _to The address of the recipient.\n   * @param _value The amount of token to be transferred.\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    external\n    returns (bool _success);\n\n  /**\n   * @dev Allows _spender to withdraw from your account multiple times, up to\n   * the _value amount. If this function is called again it overwrites the current\n   * allowance with _value.\n   * @param _spender The address of the account able to transfer the tokens.\n   * @param _value The amount of tokens to be approved for transfer.\n   */\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    external\n    returns (bool _success);\n\n  /**\n   * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n   * @param _owner The address of the account owning tokens.\n   * @param _spender The address of the account able to transfer the tokens.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n  )\n    external\n    view\n    returns (uint256 _remaining);\n\n  /**\n   * @dev Triggers when tokens are transferred, including zero value transfers.\n   */\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 _value\n  );\n\n  /**\n   * @dev Triggers on any successful call to approve(address _spender, uint256 _value).\n   */\n  event Approval(\n    address indexed _owner,\n    address indexed _spender,\n    uint256 _value\n  );\n\n}\n\n// File: @0xcert/ethereum-utils/contracts/math/SafeMath.sol\n\n/**\n * @dev Math operations with safety checks that throw on error. This contract is based\n * on the source code at https://goo.gl/iyQsmU.\n */\nlibrary SafeMath {\n\n  /**\n   * @dev Multiplies two numbers, throws on overflow.\n   * @param _a Factor number.\n   * @param _b Factor number.\n   */\n  function mul(\n    uint256 _a,\n    uint256 _b\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    if (_a == 0) {\n      return 0;\n    }\n    uint256 c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient.\n   * @param _a Dividend number.\n   * @param _b Divisor number.\n   */\n  function div(\n    uint256 _a,\n    uint256 _b\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    uint256 c = _a / _b;\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n   * @param _a Minuend number.\n   * @param _b Subtrahend number.\n   */\n  function sub(\n    uint256 _a,\n    uint256 _b\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n   * @dev Adds two numbers, throws on overflow.\n   * @param _a Number.\n   * @param _b Number.\n   */\n  function add(\n    uint256 _a,\n    uint256 _b\n  )\n    internal\n    pure\n    returns (uint256)\n  {\n    uint256 c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n\n}\n\n// File: @0xcert/ethereum-erc20/contracts/tokens/Token.sol\n\n/**\n * @title ERC20 standard token implementation.\n * @dev Standard ERC20 token. This contract follows the implementation at https://goo.gl/mLbAPJ.\n */\ncontract Token is\n  ERC20\n{\n  using SafeMath for uint256;\n\n  /**\n   * Token name.\n   */\n  string internal tokenName;\n\n  /**\n   * Token symbol.\n   */\n  string internal tokenSymbol;\n\n  /**\n   * Number of decimals.\n   */\n  uint8 internal tokenDecimals;\n\n  /**\n   * Total supply of tokens.\n   */\n  uint256 internal tokenTotalSupply;\n\n  /**\n   * Balance information map.\n   */\n  mapping (address => uint256) internal balances;\n\n  /**\n   * Token allowance mapping.\n   */\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Trigger when tokens are transferred, including zero value transfers.\n   */\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 _value\n  );\n\n  /**\n   * @dev Trigger on any successful call to approve(address _spender, uint256 _value).\n   */\n  event Approval(\n    address indexed _owner,\n    address indexed _spender,\n    uint256 _value\n  );\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name()\n    external\n    view\n    returns (string _name)\n  {\n    _name = tokenName;\n  }\n\n  /**\n   * @dev Returns the symbol of the token.\n   */\n  function symbol()\n    external\n    view\n    returns (string _symbol)\n  {\n    _symbol = tokenSymbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals the token uses.\n   */\n  function decimals()\n    external\n    view\n    returns (uint8 _decimals)\n  {\n    _decimals = tokenDecimals;\n  }\n\n  /**\n   * @dev Returns the total token supply.\n   */\n  function totalSupply()\n    external\n    view\n    returns (uint256 _totalSupply)\n  {\n    _totalSupply = tokenTotalSupply;\n  }\n\n  /**\n   * @dev Returns the account balance of another account with address _owner.\n   * @param _owner The address from which the balance will be retrieved.\n   */\n  function balanceOf(\n    address _owner\n  )\n    external\n    view\n    returns (uint256 _balance)\n  {\n    _balance = balances[_owner];\n  }\n\n  /**\n   * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The\n   * function SHOULD throw if the _from account balance does not have enough tokens to spend.\n   * @param _to The address of the recipient.\n   * @param _value The amount of token to be transferred.\n   */\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool _success)\n  {\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n    _success = true;\n  }\n\n  /**\n   * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. If\n   * this function is called again it overwrites the current allowance with _value.\n   * @param _spender The address of the account able to transfer the tokens.\n   * @param _value The amount of tokens to be approved for transfer.\n   */\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    returns (bool _success)\n  {\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n    _success = true;\n  }\n\n  /**\n   * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n   * @param _owner The address of the account owning tokens.\n   * @param _spender The address of the account able to transfer the tokens.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n  )\n    external\n    view\n    returns (uint256 _remaining)\n  {\n    _remaining = allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the\n   * Transfer event.\n   * @param _from The address of the sender.\n   * @param _to The address of the recipient.\n   * @param _value The amount of token to be transferred.\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool _success)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n    _success = true;\n  }\n\n}\n\n// File: @0xcert/ethereum-utils/contracts/ownership/Ownable.sol\n\n/**\n * @dev The contract has an owner address, and provides basic authorization control whitch\n * simplifies the implementation of user permissions. This contract is based on the source code\n * at https://goo.gl/n2ZGVt.\n */\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev An event which is triggered when the owner is changed.\n   * @param previousOwner The address of the previous owner.\n   * @param newOwner The address of the new owner.\n   */\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The constructor sets the original `owner` of the contract to the sender account.\n   */\n  constructor()\n    public\n  {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(\n    address _newOwner\n  )\n    onlyOwner\n    public\n  {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n\n}\n\n// File: @0xcert/ethereum-utils/contracts/ownership/Claimable.sol\n\n/**\n * @dev The contract has an owner address, and provides basic authorization control whitch\n * simplifies the implementation of user permissions. This contract is based on the source code\n * at goo.gl/CfEAkv and upgrades Ownable contracts with additional claim step which makes ownership\n * transfers less prone to errors.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev An event which is triggered when the owner is changed.\n   * @param previousOwner The address of the previous owner.\n   * @param newOwner The address of the new owner.\n   */\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev Allows the current owner to give new owner ability to claim the ownership of the contract.\n   * This differs from the Owner's function in that it allows setting pedingOwner address to 0x0,\n   * which effectively cancels an active claim.\n   * @param _newOwner The address which can claim ownership of the contract.\n   */\n  function transferOwnership(\n    address _newOwner\n  )\n    onlyOwner\n    public\n  {\n    pendingOwner = _newOwner;\n  }\n\n  /**\n   * @dev Allows the current pending owner to claim the ownership of the contract. It emits\n   * OwnershipTransferred event and resets pending owner to 0.\n   */\n  function claimOwnership()\n    public\n  {\n    require(msg.sender == pendingOwner);\n    address previousOwner = owner;\n    owner = pendingOwner;\n    pendingOwner = 0;\n    emit OwnershipTransferred(previousOwner, owner);\n  }\n}\n\n// File: contracts/tokens/Zxc.sol\n\n/*\n * @title ZXC protocol token.\n * @dev Standard ERC20 token used by the 0xcert protocol. This contract follows the implementation\n * at https://goo.gl/twbPwp.\n */\ncontract Zxc is\n  Token,\n  Claimable\n{\n  using SafeMath for uint256;\n\n  /**\n   * Transfer feature state.\n   */\n  bool internal transferEnabled;\n\n  /**\n   * Crowdsale smart contract address.\n   */\n  address public crowdsaleAddress;\n\n  /**\n   * @dev An event which is triggered when tokens are burned.\n   * @param _burner The address which burns tokens.\n   * @param _value The amount of burned tokens.\n   */\n  event Burn(\n    address indexed _burner,\n    uint256 _value\n  );\n\n  /**\n   * @dev Assures that the provided address is a valid destination to transfer tokens to.\n   * @param _to Target address.\n   */\n  modifier validDestination(\n    address _to\n  )\n  {\n    require(_to != address(0x0));\n    require(_to != address(this));\n    require(_to != address(crowdsaleAddress));\n    _;\n  }\n\n  /**\n   * @dev Assures that tokens can be transfered.\n   */\n  modifier onlyWhenTransferAllowed()\n  {\n    require(transferEnabled || msg.sender == crowdsaleAddress);\n    _;\n  }\n\n  /**\n   * @dev Contract constructor.\n   */\n  constructor()\n    public\n  {\n    tokenName = \"0xcert Protocol Token\";\n    tokenSymbol = \"ZXC\";\n    tokenDecimals = 18;\n    tokenTotalSupply = 500000000000000000000000000;\n    transferEnabled = false;\n\n    balances[owner] = tokenTotalSupply;\n    emit Transfer(address(0x0), owner, tokenTotalSupply);\n  }\n\n  /**\n   * @dev Transfers token to a specified address.\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    onlyWhenTransferAllowed()\n    validDestination(_to)\n    public\n    returns (bool _success)\n  {\n    _success = super.transfer(_to, _value);\n  }\n\n  /**\n   * @dev Transfers tokens from one address to another.\n   * @param _from address The address which you want to send tokens from.\n   * @param _to address The address which you want to transfer to.\n   * @param _value uint256 The amount of tokens to be transferred.\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    onlyWhenTransferAllowed()\n    validDestination(_to)\n    public\n    returns (bool _success)\n  {\n    _success = super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Enables token transfers.\n   */\n  function enableTransfer()\n    onlyOwner()\n    external\n  {\n    transferEnabled = true;\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens. This function is based on BurnableToken implementation\n   * at goo.gl/GZEhaq.\n   * @notice Only owner is allowed to perform this operation.\n   * @param _value The amount of tokens to be burned.\n   */\n  function burn(\n    uint256 _value\n  )\n    onlyOwner()\n    external\n  {\n    require(_value <= balances[msg.sender]);\n\n    balances[owner] = balances[owner].sub(_value);\n    tokenTotalSupply = tokenTotalSupply.sub(_value);\n\n    emit Burn(owner, _value);\n    emit Transfer(owner, address(0x0), _value);\n  }\n\n  /**\n    * @dev Set crowdsale address which can distribute tokens even when onlyWhenTransferAllowed is\n    * false.\n    * @param crowdsaleAddr Address of token offering contract.\n    */\n  function setCrowdsaleAddress(\n    address crowdsaleAddr\n  )\n    external\n    onlyOwner()\n  {\n    crowdsaleAddress = crowdsaleAddr;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crowdsaleAddr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060068054600160a060020a031916331790556040805180820190915260158082527f3078636572742050726f746f636f6c20546f6b656e000000000000000000000060209092019182526100679160009161013f565b506040805180820190915260038082527f5a5843000000000000000000000000000000000000000000000000000000000060209092019182526100ac9160019161013f565b506002805460ff191660121790556b019d971e4fe8401e7400000060038190556007805460a060020a60ff021916905560068054600160a060020a039081166000908152600460209081526040808320869055935484519586529351939092169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a36101da565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018057805160ff19168380011785556101ad565b828001600101855582156101ad579182015b828111156101ad578251825591602001919060010190610192565b506101b99291506101bd565b5090565b6101d791905b808211156101b957600081556001016101c3565b90565b610be1806101e96000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b75780631f35bc40146101de57806323b872dd14610201578063313ce5671461022b57806331d2f8911461025657806342966c68146102875780634e71e0c81461029f57806370a08231146102b45780638da5cb5b146102d557806395d89b41146102ea578063a9059cbb146102ff578063dd62ed3e14610323578063e30c39781461034a578063f1b50c1d1461035f578063f2fde38b14610374575b600080fd5b34801561010157600080fd5b5061010a610395565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a036004351660243561042b565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc6104cd565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101ff600160a060020a03600435166104d3565b005b34801561020d57600080fd5b506101a3600160a060020a0360043581169060243516604435610519565b34801561023757600080fd5b506102406105b5565b6040805160ff9092168252519081900360200190f35b34801561026257600080fd5b5061026b6105be565b60408051600160a060020a039092168252519081900360200190f35b34801561029357600080fd5b506101ff6004356105cd565b3480156102ab57600080fd5b506101ff6106e5565b3480156102c057600080fd5b506101cc600160a060020a036004351661076d565b3480156102e157600080fd5b5061026b610788565b3480156102f657600080fd5b5061010a610797565b34801561030b57600080fd5b506101a3600160a060020a03600435166024356107f7565b34801561032f57600080fd5b506101cc600160a060020a0360043581169060243516610891565b34801561035657600080fd5b5061026b6108bc565b34801561036b57600080fd5b506101ff6108cb565b34801561038057600080fd5b506101ff600160a060020a0360043516610919565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104215780601f106103f657610100808354040283529160200191610421565b820191906000526020600020905b81548152906001019060200180831161040457829003601f168201915b5050505050905090565b600081158061045b5750336000908152600560209081526040808320600160a060020a0387168452909152902054155b151561046657600080fd5b336000818152600560209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60035490565b600654600160a060020a031633146104ea57600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60075460009074010000000000000000000000000000000000000000900460ff168061054f5750600854600160a060020a031633145b151561055a57600080fd5b82600160a060020a038116151561057057600080fd5b600160a060020a03811630141561058657600080fd5b600854600160a060020a03828116911614156105a157600080fd5b6105ac85858561095f565b95945050505050565b60025460ff1690565b600854600160a060020a031681565b600654600160a060020a031633146105e457600080fd5b3360009081526004602052604090205481111561060057600080fd5b600654600160a060020a031660009081526004602052604090205461062b908263ffffffff610ac116565b600654600160a060020a0316600090815260046020526040902055600354610659908263ffffffff610ac116565b600355600654604080518381529051600160a060020a03909216917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59181900360200190a2600654604080518381529051600092600160a060020a0316917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a350565b600754600090600160a060020a031633146106ff57600080fd5b50600680546007805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a038381169190911795869055911690915560405191811692169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b600160a060020a031660009081526004602052604090205490565b600654600160a060020a031681565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156104215780601f106103f657610100808354040283529160200191610421565b60075460009074010000000000000000000000000000000000000000900460ff168061082d5750600854600160a060020a031633145b151561083857600080fd5b82600160a060020a038116151561084e57600080fd5b600160a060020a03811630141561086457600080fd5b600854600160a060020a038281169116141561087f57600080fd5b6108898484610ad3565b949350505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600754600160a060020a031681565b600654600160a060020a031633146108e257600080fd5b6007805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600654600160a060020a0316331461093057600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03831660009081526004602052604081205482111561098457600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156109b457600080fd5b600160a060020a0384166000908152600460205260409020546109dd908363ffffffff610ac116565b600160a060020a038086166000908152600460205260408082209390935590851681522054610a12908363ffffffff610b9f16565b600160a060020a038085166000908152600460209081526040808320949094559187168152600582528281203382529091522054610a56908363ffffffff610ac116565b600160a060020a03808616600081815260056020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082821115610acd57fe5b50900390565b33600090815260046020526040812054821115610aef57600080fd5b33600090815260046020526040902054610b0f908363ffffffff610ac116565b3360009081526004602052604080822092909255600160a060020a03851681522054610b41908363ffffffff610b9f16565b600160a060020a0384166000818152600460209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600082820183811015610bae57fe5b93925050505600a165627a7a7230582036d05124dd6101a74018a2c04541adcf48d7b1bbfb9d7da91a9a7934b59ad7d80029"
}