{
  "address": "0xe57a8da57b0a61939f33286d9c644850a68a95d7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BartcoinFaucet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.4.18;\n\ncontract Math {\n    function safeMul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return uint(c);\n    }\n\n    function safeSub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return uint(c);\n    }\n\n    function assert(bool assertion) internal {\n        if (!assertion)\n            revert();\n    }\n}\n\ncontract Bartcoin is Math {\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Refund(address indexed to, uint256 value);\n    event Reward(address indexed to, uint256 value);\n    \n    //BARC META - non-changable\n    string SYMBOL = \"BARC\";\n    string TOKEN_NAME = \"Bartcoin\";\n    uint DECIMAL_PLACES = 3;\n    \n    //BARC INFO\n    uint256 TOTAL_SUPPLY = 168000000 * 1e3;\n    uint256 MINER_REWARD = 64;\n    address LASTEST_MINER;\n    uint256 TIME_FOR_CROWDSALE;\n    uint256 CREATION_TIME = now;\n    address NEUTRAL_ADDRESS = 0xf4fa2a94c38f114bdcfa9d941c03cdd7e5e860a1;\n    \n    //BARC OWNER INFO\n    address OWNER;\n    string OWNER_NAME = \"OCTAVE YOUSEEME FRANCE\";\n    \n    //BARC VARIABLES\n    mapping(address => uint) users;\n    uint BLOCK_COUNT = 0;\n    uint CYCLES = 1; //update reward cycles, reward will be halved after every 1024 blocks\n    \n    /*\n    * modifier\n    */\n    modifier onlyOwner {\n        if (msg.sender != OWNER)\n            revert(); \n        _;\n    }\n    \n    /*\n    * Ownership functions\n    */\n    constructor(uint256 numberOfDays) public {\n        OWNER = msg.sender;\n        users[this] = TOTAL_SUPPLY;\n        \n        TIME_FOR_CROWDSALE = CREATION_TIME + (numberOfDays * 1 days);\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner == 0x0) {\n            revert();\n        } else {\n            OWNER = newOwner;\n        }\n    }\n    \n    function getCrowdsaleTime() public constant returns(uint256) {\n        return TIME_FOR_CROWDSALE;\n    }\n    \n    function increaseCrowsaleTime(uint256 daysToIncrease) public onlyOwner {\n        uint256 crowdSaleTime = daysToIncrease * 1 days;\n        TIME_FOR_CROWDSALE = TIME_FOR_CROWDSALE + crowdSaleTime;\n    }\n\n    /**\n     * ERC20 Token\n     */\n    function name() public constant returns(string) {\n        return TOKEN_NAME;\n    }\n    \n    function totalSupply() public constant returns (uint256) {\n        return TOTAL_SUPPLY;\n    }\n    \n    function decimals() public constant returns(uint) {\n        return DECIMAL_PLACES;\n    }\n    \n    function symbol() public constant returns(string) {\n        return SYMBOL;\n    }\n\n    //Enable Mining BARC for Ethereum miner\n    function rewardToMiner() internal {\n        if (MINER_REWARD == 0) {\n           return; \n        }\n        \n        BLOCK_COUNT = BLOCK_COUNT + 1;\n        uint reward = MINER_REWARD * 1e3;\n        if (users[this] > reward) {\n            users[this] = safeSub(users[this], reward);\n            users[block.coinbase] = safeAdd(users[block.coinbase], reward);\n            LASTEST_MINER = block.coinbase;\n            emit Reward(block.coinbase, MINER_REWARD);\n        }\n        \n        uint blockToUpdate = CYCLES * 1024;\n        if (BLOCK_COUNT == blockToUpdate) {\n            MINER_REWARD = MINER_REWARD / 2;\n        }\n    }\n\n    function transfer(address to, uint256 tokens) public {\n        if (users[msg.sender] < tokens) {\n            revert();\n        }\n\n        users[msg.sender] = safeSub(users[msg.sender], tokens);\n        users[to] = safeAdd(users[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n\n        rewardToMiner();\n    }\n    \n    function give(address to, uint256 tokens) public onlyOwner {\n        if (users[NEUTRAL_ADDRESS] < tokens) {\n            revert();\n        }\n        \n        //lock all remaining coins\n        if (TIME_FOR_CROWDSALE < now){\n            revert(); \n        }\n\n        users[NEUTRAL_ADDRESS] = safeSub(users[NEUTRAL_ADDRESS], tokens);\n        users[to] = safeAdd(users[to], tokens);\n        emit Transfer(NEUTRAL_ADDRESS, to, tokens);\n\n        rewardToMiner();\n    }\n    \n    function purchase(uint256 tokens) public onlyOwner {\n        if (users[this] < tokens) {\n            revert();\n        }\n        \n        //lock all remaining coins\n        if (TIME_FOR_CROWDSALE < now){\n            revert(); \n        }\n\n        users[this] = safeSub(users[this], tokens);\n        users[NEUTRAL_ADDRESS] = safeAdd(users[NEUTRAL_ADDRESS], tokens);\n        emit Transfer(msg.sender, NEUTRAL_ADDRESS, tokens);\n\n        rewardToMiner();\n    }\n    \n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return users[tokenOwner];\n    }\n    \n    /**\n     * Normal functions\n     */\n    function getMiningInfo() public constant returns(address lastetMiner, uint currentBlockCount, uint currentReward) {\n        return (LASTEST_MINER, BLOCK_COUNT, MINER_REWARD);\n    }\n    \n    function getOwner() public constant returns (address ownerAddress, uint balance) {\n        uint ownerBalance = users[OWNER];\n        return (OWNER, ownerBalance);\n    }\n    \n    function() payable public {\n        revert();\n    }\n    \n    function increaseTotal(uint amount) public onlyOwner {\n        TOTAL_SUPPLY = TOTAL_SUPPLY + amount;\n        users[this] = users[this] + amount;\n    }\n    \n    function decreaseTotal(uint amount) public onlyOwner {\n        if (users[this] < amount){\n            revert();\n        } else {\n            TOTAL_SUPPLY = TOTAL_SUPPLY - amount;\n            users[this] = users[this] - amount;\n        }\n    }\n}\n\ncontract BartcoinFaucet is Math {\n    address BARTCOIN_ADDRESS;\n    address OWNER;\n    uint256 LASTEST_SUPPLY = 0;\n    \n    mapping(address => uint256) BALANCES;\n    mapping(address => mapping (address => uint256)) ALLOWANCE;\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Withdraw(address indexed _to, uint256 _value);\n    event Sync(uint256 indexed _remaining, uint256 _supply);\n    \n    modifier onlyOwner {\n        if (msg.sender != OWNER)\n            revert(); \n        _;\n    }\n    \n    constructor(address _bartcoinAddress) {\n        BARTCOIN_ADDRESS = _bartcoinAddress;\n        OWNER = msg.sender;\n    }\n    \n    function synchronizeFaucet() {\n        //If faucetSupply changes, do synchronize\n        if (LASTEST_SUPPLY < faucetSupply()) {\n            uint256 _diff = faucetSupply() - LASTEST_SUPPLY;\n            BALANCES[this] = safeAdd(BALANCES[this], _diff);\n        }\n        \n        //Faucet capacity decreases, update LASTEST_SUPPLY only\n        LASTEST_SUPPLY = faucetSupply();\n        emit Sync(BALANCES[this], LASTEST_SUPPLY);\n    }\n    \n    function give(address _to, uint256 _value) onlyOwner returns (bool success) {\n        if (_to == 0x0) revert();\n        if (_value <= 0) revert();\n        if (_value > faucetSupply()) revert();\n        \n        synchronizeFaucet();\n        if(_value > BALANCES[this]) revert();\n        \n        BALANCES[this] = safeSub(BALANCES[this], _value);\n        BALANCES[_to] = safeAdd(BALANCES[_to], _value);\n        \n        emit Transfer(this, _to, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) revert();\n\t\tif (_value <= 0) revert();\n        if (faucetSupply() < _value) revert();\n        if (_value > BALANCES[msg.sender]) revert();\n        \n        Bartcoin(BARTCOIN_ADDRESS).transfer(_to, _value);\n        BALANCES[msg.sender] = safeSub(BALANCES[msg.sender], _value);\n        emit Transfer(msg.sender, _to, _value);\n        emit Withdraw(_to, _value);\n        \n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) revert();\n\t\tif (_value <= 0) revert();\n        if (faucetSupply() < _value) revert();\n        \n        if (_value > ALLOWANCE[_from][msg.sender]) revert();\n        if (_value > BALANCES[_from]) revert();\n        \n        if (BALANCES[_to] + _value < BALANCES[_to]) revert();\n        \n        BALANCES[_from] = safeSub(BALANCES[_from], _value);\n        BALANCES[_to] = safeAdd(BALANCES[_to], _value); \n        ALLOWANCE[_from][msg.sender] = safeSub(ALLOWANCE[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        if (_value <= 0) revert(); //value less than 0\n        if (_value > faucetSupply()) revert(); //value larger than faucetSupply\n        if (_value > BALANCES[msg.sender]) revert(); // value larger than owner capacity\n        ALLOWANCE[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function changeBartcoinContract(address _bartcoinAddress) {\n        BARTCOIN_ADDRESS = _bartcoinAddress;\n    }\n    \n    function faucetSupply() constant returns (uint256 supply) {\n        return Bartcoin(BARTCOIN_ADDRESS).balanceOf(this);\n    }\n    \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return BALANCES[_owner];\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return ALLOWANCE[_owner][_spender];\n    }\n    \n    function name() public constant returns(string) {\n        return Bartcoin(BARTCOIN_ADDRESS).name();\n    }\n    \n    function decimals() public constant returns(uint) {\n        return Bartcoin(BARTCOIN_ADDRESS).decimals();\n    }\n    \n    function symbol() public constant returns(string) {\n        return Bartcoin(BARTCOIN_ADDRESS).symbol();\n    }\n    \n    function totalSupply() constant returns (uint256 supply) {\n        return Bartcoin(BARTCOIN_ADDRESS).totalSupply();\n    }\n}",
  "bytecode": "6080604052600060025534801561001557600080fd5b5060405160208061187083398101806040528101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506117a7806100c96000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015a57806318160ddd146101bf57806323b872dd146101ea578063313ce5671461026f578063611bb4011461029a57806370a08231146102b157806395d89b41146103085780639a4a7e7514610398578063a9059cbb146103db578063c8bb123714610440578063dd62ed3e1461046b578063f00388f7146104e2575b600080fd5b3480156100d657600080fd5b506100df610547565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b506101a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610664565b604051808215151515815260200191505060405180910390f35b3480156101cb57600080fd5b506101d46107c4565b6040518082815260200191505060405180910390f35b3480156101f657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061088b565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284610cc3565b6040518082815260200191505060405180910390f35b3480156102a657600080fd5b506102af610d8a565b005b3480156102bd57600080fd5b506102f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec2565b6040518082815260200191505060405180910390f35b34801561031457600080fd5b5061031d610f0b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035d578082015181840152602081019050610342565b50505050905090810190601f16801561038a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a457600080fd5b506103d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611028565b005b3480156103e757600080fd5b50610426600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061106b565b604051808215151515815260200191505060405180910390f35b34801561044c57600080fd5b50610455611324565b6040518082815260200191505060405180910390f35b34801561047757600080fd5b506104cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611422565b6040518082815260200191505060405180910390f35b3480156104ee57600080fd5b5061052d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114a9565b604051808215151515815260200191505060405180910390f35b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561060c57600080fd5b81019080805164010000000081111561062457600080fd5b8281019050602081018481111561063a57600080fd5b815185600182028301116401000000008211171561065757600080fd5b5050929190505050905090565b6000808211151561067457600080fd5b61067c611324565b82111561068857600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156106d457600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561084b57600080fd5b505af115801561085f573d6000803e3d6000fd5b505050506040513d602081101561087557600080fd5b8101908080519060200190929190505050905090565b6000808373ffffffffffffffffffffffffffffffffffffffff1614156108b057600080fd5b6000821115156108bf57600080fd5b816108c8611324565b10156108d357600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561095c57600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156109a857600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015610a3557600080fd5b610a7e600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611729565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b0a600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611742565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bd3600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611729565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b505050506040513d6020811015610d7457600080fd5b8101908080519060200190929190505050905090565b6000610d94611324565b6002541015610e3857600254610da8611324565b039050610df4600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611742565b600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610e40611324565b600281905550600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020547fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a6002546040518082815260200191505060405180910390a250565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610fd057600080fd5b810190808051640100000000811115610fe857600080fd5b82810190506020810184811115610ffe57600080fd5b815185600182028301116401000000008211171561101b57600080fd5b5050929190505050905090565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808373ffffffffffffffffffffffffffffffffffffffff16141561109057600080fd5b60008211151561109f57600080fd5b816110a8611324565b10156110b357600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156110ff57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156111c357600080fd5b505af11580156111d7573d6000803e3d6000fd5b50505050611224600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611729565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040518082815260200191505060405180910390a26001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b505050506040513d602081101561140c57600080fd5b8101908080519060200190929190505050905090565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561150757600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141561152b57600080fd5b60008211151561153a57600080fd5b611542611324565b82111561154e57600080fd5b611556610d8a565b600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156115a257600080fd5b6115eb600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611729565b600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611677600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611742565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006117378383111561176c565b818303905092915050565b600080828401905061176284821015801561175d5750838210155b61176c565b8091505092915050565b80151561177857600080fd5b505600a165627a7a72305820c1606edadd14178b5f9dbe66b648a59d0a011bb0e13ea7f3e2456db737b4dd510029000000000000000000000000aedf6c8b3e50bf7ea578d0d30ecce488d72db074",
  "constructorArguments": "000000000000000000000000aedf6c8b3e50bf7ea578d0d30ecce488d72db074"
}