{
  "address": "0xc3fc3549e50c68662c21649f3f6d88e28271498f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GOMC",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity 0.5.7;\n\n/**\n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on underflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n/**\n * @title GOMC Standard ERC20 token\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n */\ncontract GOMC {\n    using SafeMath for uint256;\n    \n    string public constant name = \"GGOOUMCHAIN Token\";\n    string public constant symbol = \"GOMC\";\n    uint8 public constant decimals = 18;\n\n    uint256 private constant INITIAL_SUPPLY = 1e9;\n    uint256 public constant totalSupply = INITIAL_SUPPLY * 10 ** uint256(decimals);\n\n    address public constant wallet = 0x873feD29d4cFcCB1E4919e98DEA88b2725B15C33;\n\n    mapping(address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n    /**\n     * @dev Constructor.\n     */\n    constructor() public {\n        balances[wallet] = totalSupply;\n        emit Transfer(address(0), wallet, totalSupply);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_spender != address(0));\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\n    \trequire(_spender != address(0));\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\n    \trequire(_spender != address(0));\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_subtractedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5073873fed29d4cfccb1e4919e98dea88b2725b15c33600081815260208181526b033b2e3c9fd0803ce80000007fbcfaeac2fe12bdaf36b1812f83a2b1e5c3fef3c01f638d9be44c2fa054f8df1981905560408051918252517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a36107d8806100a36000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063521eb27311610071578063521eb2731461021057806370a082311461023457806395d89b411461025a578063a457c2d714610262578063a9059cbb1461028e578063dd62ed3e146102ba576100b4565b806306fdde03146100b9578063095ea7b31461013657806318160ddd1461017657806323b872dd14610190578063313ce567146101c657806339509351146101e4575b600080fd5b6100c16102e8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fb5781810151838201526020016100e3565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101626004803603604081101561014c57600080fd5b506001600160a01b038135169060200135610321565b604080519115158252519081900360200190f35b61017e61039d565b60408051918252519081900360200190f35b610162600480360360608110156101a657600080fd5b506001600160a01b038135811691602081013590911690604001356103ad565b6101ce610522565b6040805160ff9092168252519081900360200190f35b610162600480360360408110156101fa57600080fd5b506001600160a01b038135169060200135610527565b6102186105d5565b604080516001600160a01b039092168252519081900360200190f35b61017e6004803603602081101561024a57600080fd5b50356001600160a01b03166105ed565b6100c1610608565b6101626004803603604081101561027857600080fd5b506001600160a01b03813516906020013561062b565b610162600480360360408110156102a457600080fd5b506001600160a01b038135169060200135610674565b61017e600480360360408110156102d057600080fd5b506001600160a01b0381358116916020013516610753565b6040518060400160405280601181526020017f47474f4f554d434841494e20546f6b656e00000000000000000000000000000081525081565b60006001600160a01b03831661033657600080fd5b3360008181526001602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6b033b2e3c9fd0803ce800000081565b60006001600160a01b0383166103c257600080fd5b6001600160a01b0384166000908152602081905260409020548211156103e757600080fd5b6001600160a01b038416600090815260016020908152604080832033845290915290205482111561041757600080fd5b6001600160a01b038416600090815260208190526040902054610440908363ffffffff61077e16565b6001600160a01b038086166000908152602081905260408082209390935590851681522054610475908363ffffffff61079316565b6001600160a01b038085166000908152602081815260408083209490945591871681526001825282812033825290915220546104b7908363ffffffff61077e16565b6001600160a01b03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b60006001600160a01b03831661053c57600080fd5b3360009081526001602090815260408083206001600160a01b0387168452909152902054610570908363ffffffff61079316565b3360008181526001602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b73873fed29d4cfccb1e4919e98dea88b2725b15c3381565b6001600160a01b031660009081526020819052604090205490565b604051806040016040528060048152602001600160e01b63474f4d430281525081565b60006001600160a01b03831661064057600080fd5b3360009081526001602090815260408083206001600160a01b0387168452909152902054610570908363ffffffff61077e16565b60006001600160a01b03831661068957600080fd5b336000908152602081905260409020548211156106a557600080fd5b336000908152602081905260409020546106c5908363ffffffff61077e16565b33600090815260208190526040808220929092556001600160a01b038516815220546106f7908363ffffffff61079316565b6001600160a01b038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60008282111561078d57600080fd5b50900390565b6000828201838110156107a557600080fd5b939250505056fea165627a7a72305820771971b8a59564cd3288972ee01f6ddad242dcb37e20ed1803f254e8b88363180029"
}