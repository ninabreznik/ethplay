{
  "address": "0xb04a4cdf06e1da9275e554e763e74af1cb0de603",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SCCTokenERC20",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-23\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    return _a / _b;\n  }\n\n  /**\n  * Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  *  Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  uint256 public totalSupply;\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender) public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n  \n  function approve(address _spender, uint256 _value) public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n\n  event Transfer( address indexed from, address indexed to,  uint256 value);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  \n  event Burn(address indexed from, uint256 value);\n}\n\n\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n  * Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   *  Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256){\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   *  Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = (\n    allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   *  Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender,  uint256 _subtractedValue) public returns (bool) {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  \n   /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);   \n        balances[msg.sender] = balances[msg.sender].sub(_value);          \n        totalSupply = totalSupply.sub(_value);                      \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);                \n        require(_value <= allowed[_from][msg.sender]);    \n        balances[_from] = balances[_from].sub(_value);                        \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);             \n        totalSupply = totalSupply.sub(_value);                              \n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\ncontract SCCTokenERC20 is StandardToken {\n    // Public variables of the token\n    string public name = \"Smart Cash Coin\";\n    string public symbol = \"SCC\";\n    uint8 constant public decimals = 4;\n    uint256 constant public initialSupply = 50000000;\n\n    constructor() public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  \n        balances[msg.sender] = totalSupply;               \n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n}",
  "bytecode": "60c0604052600f60808190527f536d617274204361736820436f696e000000000000000000000000000000000060a090815261003e91600391906100e7565b506040805180820190915260038082527f53434300000000000000000000000000000000000000000000000000000000006020909201918252610083916004916100e7565b5034801561009057600080fd5b5064746a52880060008181553380825260016020908152604080842085905580519485525191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610182565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012857805160ff1916838001178555610155565b82800160010185558215610155579182015b8281111561015557825182559160200191906001019061013a565b50610161929150610165565b5090565b61017f91905b80821115610161576000815560010161016b565b90565b610ae4806101916000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd578063313ce567146101e7578063378dc3dc1461021257806342966c6814610227578063661884631461023f57806370a082311461026357806379cc67901461028457806395d89b41146102a8578063a9059cbb146102bd578063d73dd623146102e1578063dd62ed3e14610305575b600080fd5b3480156100e057600080fd5b506100e961032c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a03600435166024356103ba565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab610420565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a0360043581169060243516604435610426565b3480156101f357600080fd5b506101fc61059d565b6040805160ff9092168252519081900360200190f35b34801561021e57600080fd5b506101ab6105a2565b34801561023357600080fd5b506101826004356105aa565b34801561024b57600080fd5b50610182600160a060020a036004351660243561064b565b34801561026f57600080fd5b506101ab600160a060020a036004351661073a565b34801561029057600080fd5b50610182600160a060020a0360043516602435610755565b3480156102b457600080fd5b506100e9610893565b3480156102c957600080fd5b50610182600160a060020a03600435166024356108ee565b3480156102ed57600080fd5b50610182600160a060020a03600435166024356109cf565b34801561031157600080fd5b506101ab600160a060020a0360043581169060243516610a68565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b25780601f10610387576101008083540402835291602001916103b2565b820191906000526020600020905b81548152906001019060200180831161039557829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600160a060020a03831660009081526001602052604081205482111561044b57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561047b57600080fd5b600160a060020a038316151561049057600080fd5b600160a060020a0384166000908152600160205260409020546104b9908363ffffffff610a9316565b600160a060020a0380861660009081526001602052604080822093909355908516815220546104ee908363ffffffff610aa516565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610532908363ffffffff610a9316565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600481565b6302faf08081565b336000908152600160205260408120548211156105c657600080fd5b336000908152600160205260409020546105e6908363ffffffff610a9316565b336000908152600160205260408120919091555461060a908363ffffffff610a9316565b60005560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061069f57336000908152600260209081526040808320600160a060020a03881684529091528120556106d4565b6106af818463ffffffff610a9316565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600160a060020a03821660009081526001602052604081205482111561077a57600080fd5b600160a060020a03831660009081526002602090815260408083203384529091529020548211156107aa57600080fd5b600160a060020a0383166000908152600160205260409020546107d3908363ffffffff610a9316565b600160a060020a0384166000908152600160209081526040808320939093556002815282822033835290522054610810908363ffffffff610a9316565b600160a060020a038416600090815260026020908152604080832033845290915281209190915554610848908363ffffffff610a9316565b600055604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b25780601f10610387576101008083540402835291602001916103b2565b3360009081526001602052604081205482111561090a57600080fd5b600160a060020a038316151561091f57600080fd5b3360009081526001602052604090205461093f908363ffffffff610a9316565b3360009081526001602052604080822092909255600160a060020a03851681522054610971908363ffffffff610aa516565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610a03908363ffffffff610aa516565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600082821115610a9f57fe5b50900390565b81810182811015610ab257fe5b929150505600a165627a7a723058208bc253059dea877b66447573da960e44a9c7917d2b89a2ec9a1a5a10de9f960f0029"
}