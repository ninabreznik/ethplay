{
  "address": "0xA596cE74161a031D951D5a3aCbB38BEDe00E7d92",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BasicToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-06\n*/\n\npragma solidity ^0.4.16;\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \n\nlibrary SafeMath {\n    \n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n \n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n \n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n \n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n \ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n \n  mapping(address => uint256) balances;\n \n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n \n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n \ncontract StandardToken is ERC20, BasicToken {\n \n  mapping (address => mapping (address => uint256)) allowed;\n \n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n \n  function approve(address _spender, uint256 _value) returns (bool) {\n \n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n \n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n \n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n \ncontract Ownable {\n    \n  address public owner;\n \n  function Ownable() {\n    owner = msg.sender;\n  }\n \n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n \n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n}\n \ncontract BurnableToken is StandardToken {\n \n  function burn(uint _value) public {\n    require(_value > 0);\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(burner, _value);\n  }\n \n  event Burn(address indexed burner, uint indexed value);\n}\n \ncontract MimiCoinToken is BurnableToken {\n    \n  string public constant name = \"Mimimi Coin Token\";\n   \n  string public constant symbol = \"MIMI\";\n    \n  uint32 public constant decimals = 18;\n \n  uint256 public INITIAL_SUPPLY = 200000000 * 1 ether;\n \n  function MimiCoinToken() {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n}\n \ncontract Crowdsale is Ownable {\n    \n  using SafeMath for uint;\n    \n  address multisig;\n \n  uint restrictedPercent;\n \n  address restricted;\n \n  MimiCoinToken public token = new MimiCoinToken();\n \n  uint start;\n    \n  uint period;\n \n  uint rate;\n \n  function Crowdsale() {\n    multisig = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\n    restricted = 0xb3eD172CC64839FB0C0Aa06aa129f402e994e7De;\n    restrictedPercent = 2;\n    rate = 100000000000000000000;\n    start = 1556668800;\n    period = 426;\n  }\n \n  modifier saleIsOn() {\n    require(now > start && now < start + period * 1 days);\n    _;\n  }\n \n  function createTokens() saleIsOn payable {\n    multisig.transfer(msg.value);\n    uint tokens = rate.mul(msg.value).div(1 ether);\n    uint bonusTokens = 0;\n    if(now < start + (period * 1 days).div(4)) {\n      bonusTokens = tokens.div(4);\n    } else if(now >= start + (period * 1 days).div(4) && now < start + (period * 1 days).div(4).mul(2)) {\n      bonusTokens = tokens.div(10);\n    } else if(now >= start + (period * 1 days).div(4).mul(2) && now < start + (period * 1 days).div(4).mul(3)) {\n      bonusTokens = tokens.div(20);\n    }\n    uint tokensWithBonus = tokens.add(bonusTokens);\n    token.transfer(msg.sender, tokensWithBonus);\n    uint restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\n    token.transfer(restricted, restrictedTokens);\n  }\n \n  function() external payable {\n    createTokens();\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b5b6103758061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318160ddd1461005457806370a082311461007d578063a9059cbb146100ca575b600080fd5b341561005f57600080fd5b610067610124565b6040518082815260200191505060405180910390f35b341561008857600080fd5b6100b4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061012a565b6040518082815260200191505060405180910390f35b34156100d557600080fd5b61010a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610174565b604051808215151515815260200191505060405180910390f35b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60006101c882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461031090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061025d82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461032a90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600082821115151561031e57fe5b81830390505b92915050565b600080828401905083811015151561033e57fe5b8091505b50929150505600a165627a7a72305820c49ef961d7562c0e6aa0a1f28e6e2769b9da0f5642960402c7c42ba93dfd2e5e0029"
}