{
  "address": "0xc2f46fa6a4b91ca39b6e34781434841f7c13ccf8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NFTKred",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC721 interface\n * @dev see https://github.com/ethereum/eips/issues/721\n */\ncontract ERC721 {\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _tokenId\n    );\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 _tokenId\n    );\n\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n    function transfer(address _to, uint256 _tokenId) public;\n\n    function approve(address _to, uint256 _tokenId) public;\n\n    function takeOwnership(uint256 _tokenId) public;\n}\n\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC721/ERC721Token.sol\n\n/**\n * @title ERC721Token\n * Generic implementation for the required functionality of the ERC721 standard\n */\ncontract NFTKred is ERC721 {\n    using SafeMath for uint256;\n\n    // Public variables of the contract\n    string public name;\n    string public symbol;\n\n    // Most Ethereum contracts use 18 decimals, but we restrict it to 7 here\n    // for portability to and from Stellar.\n    uint8 public valueDecimals = 7;\n\n    // Numeric data\n    mapping(uint => uint) public nftBatch;\n    mapping(uint => uint) public nftSequence;\n    mapping(uint => uint) public nftCount;\n\n    // The face value of the NFT must be intrinsic so that smart contracts can work with it\n    // Sale price and last sale price are available via the metadata endpoints\n    mapping(uint => uint256) public nftValue;\n\n    // NFT strings - these are expensive to store, but necessary for API compatibility\n    // And string manipulation is also expensive\n\n    // Not to be confused with name(), which returns the contract name\n    mapping(uint => string) public nftName;\n\n    // The NFT type, e.g. coin, card, badge, ticket\n    mapping(uint => string) public nftType;\n\n    // API address of standard metadata\n    mapping(uint => string) public nftURIs;\n\n    // IPFS address of extended metadata\n    mapping(uint => string) public tokenIPFSs;\n\n    // Total amount of tokens\n    uint256 private totalTokens;\n\n    // Mapping from token ID to owner\n    mapping(uint256 => address) private tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private tokenApprovals;\n\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) private ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private ownedTokensIndex;\n\n    // Metadata accessors\n    function name() external view returns (string _name) {\n        return name;\n    }\n\n    function symbol() external view returns (string _symbol) {\n        return symbol;\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string) {\n        require(exists(_tokenId));\n        return nftURIs[_tokenId];\n    }\n\n    function tokenIPFS(uint256 _tokenId) public view returns (string) {\n        require(exists(_tokenId));\n        return tokenIPFSs[_tokenId];\n    }\n\n    /**\n    * @dev Returns whether the specified token exists\n    * @param _tokenId uint256 ID of the token to query the existence of\n    * @return whether the token exists\n    */\n    function exists(uint256 _tokenId) public view returns (bool) {\n        address owner = tokenOwner[_tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    /* constructor( */\n    constructor(\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        name = tokenName;\n        // Set the name for display purposes\n        symbol = tokenSymbol;\n        // Set the symbol for display purposes\n    }\n\n    /**\n    * @dev Guarantees msg.sender is owner of the given token\n    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n    */\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n    /**\n    * @dev Gets the total amount of tokens stored by the contract\n    * @return uint256 representing the total amount of tokens\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalTokens;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address\n    * @param _owner address to query the balance of\n    * @return uint256 representing the amount owned by the passed address\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        require(_owner != address(0));\n        return ownedTokens[_owner].length;\n    }\n\n    /**\n    * @dev Gets the list of tokens owned by a given address\n    * @param _owner address to query the tokens of\n    * @return uint256[] representing the list of tokens owned by the passed address\n    */\n    function tokensOf(address _owner) public view returns (uint256[]) {\n        return ownedTokens[_owner];\n    }\n\n    /**\n    * @dev Gets the owner of the specified token ID\n    * @param _tokenId uint256 ID of the token to query the owner of\n    * @return owner address currently marked as the owner of the given token ID\n    */\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        address owner = tokenOwner[_tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n     * @dev Gets the approved address to take ownership of a given token ID\n     * @param _tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved to take ownership of the given token ID\n     */\n    function approvedFor(uint256 _tokenId) public view returns (address) {\n        return tokenApprovals[_tokenId];\n    }\n\n    /**\n    * @dev Transfers the ownership of a given token ID to another address\n    * @param _to address to receive the ownership of the given token ID\n    * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n    }\n\n    /**\n    * @dev Approves another address to claim for the ownership of the given token ID\n    * @param _to address to be approved for the given token ID\n    * @param _tokenId uint256 ID of the token to be approved\n    */\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        address owner = ownerOf(_tokenId);\n        require(_to != owner);\n        if (approvedFor(_tokenId) != 0 || _to != 0) {\n            tokenApprovals[_tokenId] = _to;\n            emit Approval(owner, _to, _tokenId);\n        }\n    }\n\n    /**\n    * @dev Claims the ownership of a given token ID\n    * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n    */\n    function takeOwnership(uint256 _tokenId) public {\n        require(isApprovedFor(msg.sender, _tokenId));\n        clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n    }\n\n    // Mint an NFT - should this be a smart contract function dependent on CKr tokens?\n    function mint(\n        address _to,\n        uint256 _tokenId,\n        uint _batch,\n        uint _sequence,\n        uint _count,\n        uint256 _value,\n        string _type,\n        string _IPFS,\n        string _tokenURI\n    ) public /* onlyNonexistentToken(_tokenId) */\n    {\n        // Addresses for direct test (Ethereum wallet) and live test (Geth server)\n        require(\n            msg.sender == 0x979e636D308E86A2D9cB9B2eA5986d6E2f89FcC1 ||\n            msg.sender == 0x0fEB00CAe329050915035dF479Ce6DBf747b01Fd\n        );\n        require(_to != address(0));\n        require(nftValue[_tokenId] == 0);\n\n        // Batch details - also available from the metadata endpoints\n        nftBatch[_tokenId] = _batch;\n        nftSequence[_tokenId] = _sequence;\n        nftCount[_tokenId] = _count;\n\n        // Value in CKr + 7 trailing zeroes (to reflect Stellar)\n        nftValue[_tokenId] = _value;\n\n        // Token type\n        nftType[_tokenId] = _type;\n\n        // Metadata access via IPFS (canonical URL)\n        tokenIPFSs[_tokenId] = _IPFS;\n\n        // Metadata access via API (canonical url - add /{platform} for custom-formatted data for your platform\n        nftURIs[_tokenId] = _tokenURI;\n\n        addToken(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n    }\n\n\n    /**\n    * @dev Burns a specific token\n    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n    */\n    function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n        if (approvedFor(_tokenId) != 0) {\n            clearApproval(msg.sender, _tokenId);\n        }\n        removeToken(msg.sender, _tokenId);\n        emit Transfer(msg.sender, 0x0, _tokenId);\n    }\n\n    /**\n     * @dev Tells whether the msg.sender is approved for the given token ID or not\n     * This function is not private so it can be extended in further implementations like the operatable ERC721\n     * @param _owner address of the owner to query the approval of\n     * @param _tokenId uint256 ID of the token to query the approval of\n     * @return bool whether the msg.sender is approved for the given token ID or not\n     */\n    function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n        return approvedFor(_tokenId) == _owner;\n    }\n\n    /**\n    * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n    * @param _from address which you want to send tokens from\n    * @param _to address which you want to transfer the token to\n    * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n        require(_to != address(0));\n        require(_to != ownerOf(_tokenId));\n        require(ownerOf(_tokenId) == _from);\n\n        clearApproval(_from, _tokenId);\n        removeToken(_from, _tokenId);\n        addToken(_to, _tokenId);\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /**\n    * @dev Internal function to clear current approval of a given token ID\n    * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function clearApproval(address _owner, uint256 _tokenId) private {\n        require(ownerOf(_tokenId) == _owner);\n        tokenApprovals[_tokenId] = 0;\n        emit Approval(_owner, 0, _tokenId);\n    }\n\n    /**\n    * @dev Internal function to add a token ID to the list of a given address\n    * @param _to address representing the new owner of the given token ID\n    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n    */\n    function addToken(address _to, uint256 _tokenId) private {\n        require(tokenOwner[_tokenId] == address(0));\n        tokenOwner[_tokenId] = _to;\n        uint256 length = balanceOf(_to);\n        ownedTokens[_to].push(_tokenId);\n        ownedTokensIndex[_tokenId] = length;\n        totalTokens = totalTokens.add(1);\n    }\n\n    /**\n    * @dev Internal function to remove a token ID from the list of a given address\n    * @param _from address representing the previous owner of the given token ID\n    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n    */\n    function removeToken(address _from, uint256 _tokenId) private {\n        require(ownerOf(_tokenId) == _from);\n\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n        uint256 lastTokenIndex = balanceOf(_from).sub(1);\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n        tokenOwner[_tokenId] = 0;\n        ownedTokens[_from][tokenIndex] = lastToken;\n        ownedTokens[_from][lastTokenIndex] = 0;\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n        ownedTokens[_from].length--;\n        ownedTokensIndex[_tokenId] = 0;\n        ownedTokensIndex[lastToken] = tokenIndex;\n        totalTokens = totalTokens.sub(1);\n    }\n\n    /**\n    * @dev Returns `true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise\n    * @param  _interfaceID The interface identifier, as specified in ERC-165\n    */\n    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n\n        if (_interfaceID == 0xffffffff) {\n            return false;\n        }\n        return _interfaceID == 0x01ffc9a7 ||  // From ERC721Base\n               _interfaceID == 0x7c0633c6 ||  // From ERC721Base\n               _interfaceID == 0x80ac58cd ||  // ERC721\n               _interfaceID == 0x5b5e139f;    // ERC712Metadata\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valueDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftURIs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFS\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_batch\",\"type\":\"uint256\"},{\"name\":\"_sequence\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_IPFS\",\"type\":\"string\"},{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftSequence\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000084e46542e4b72656400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084e46542e4b726564000000000000000000000000000000000000000000000000"
}