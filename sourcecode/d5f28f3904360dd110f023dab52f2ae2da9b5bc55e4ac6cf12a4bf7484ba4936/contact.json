{
  "address": "0x527369a144afad1d9bed370205ee3eda0ebb7411",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FTCash",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-14\n*/\n\npragma solidity ^0.4.24;\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary Config {\n    address constant internal BANK = 0xF2058a24B61E5B7cD0Aa6F4CC28f7ff0ecA10FF4;\n    uint constant internal INITIAL_SUPPLY = 50000000000000000000000000;\n\n    function bank() internal pure returns (address) {\n      return BANK;\n    }\n    \n    function initial_supply() internal pure returns (uint) {\n      return INITIAL_SUPPLY;\n    }\n}\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\ncontract SuperInvestorRole {\n  using Roles for Roles.Role;\n  using Config for Config;\n    \n  address internal BANK = Config.bank();\n\n  event SuperInvestorAdded(address indexed account);\n  event SuperInvestorRemoved(address indexed account);\n\n  Roles.Role private superInvestors;\n\n  constructor() internal {\n  }\n\n  modifier onlyBank() {\n    require(msg.sender == BANK);\n    _;\n  }\n  \n  modifier onlyBankOrSuperInvestor() {\n    require(msg.sender == BANK || isSuperInvestor(msg.sender));\n    _;\n  }\n\n  function isSuperInvestor(address account) public view returns (bool) {\n    return superInvestors.has(account);\n  }\n\n  function addSuperInvestor(address account) public onlyBank {\n    _addSuperInvestor(account);\n  }\n\n  function renounceSuperInvestor() public onlyBankOrSuperInvestor {\n    _removeSuperInvestor(msg.sender);\n  }\n\n  function _addSuperInvestor(address account) internal {\n    superInvestors.add(account);\n    emit SuperInvestorAdded(account);\n  }\n\n  function _removeSuperInvestor(address account) internal {\n    superInvestors.remove(account);\n    emit SuperInvestorRemoved(account);\n  }\n}\n\ncontract InvestorRole is SuperInvestorRole {\n  using Roles for Roles.Role;\n  using Config for Config;\n    \n  address internal BANK = Config.bank();\n\n  event InvestorAdded(address indexed account);\n  event InvestorRemoved(address indexed account);\n\n  Roles.Role private investors;\n\n  constructor() internal {\n  }\n  \n  modifier onlyInvestor() {\n    require(isInvestor(msg.sender));\n    _;\n  }\n\n  function isInvestor(address account) public view returns (bool) {\n    return investors.has(account);\n  }\n\n  function addInvestor(address account) public onlyBankOrSuperInvestor {\n    _addInvestor(account);\n  }\n\n  function renounceInvestor() public onlyInvestor() {\n    _removeInvestor(msg.sender);\n  }\n\n  function _addInvestor(address account) internal {\n    investors.add(account);\n    emit InvestorAdded(account);\n  }\n\n  function _removeInvestor(address account) internal {\n    investors.remove(account);\n    emit InvestorRemoved(account);\n  }\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\ncontract ERC20Mintable is ERC20, MinterRole {\n  using Config for Config;\n  \n  address internal _bank = Config.bank();\n\n  /**\n   * @dev Function to mint tokens\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(_bank, value);\n    return true;\n  }\n}\n\ncontract ERC20Burnable is ERC20 {\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n  function burnFrom(address from, uint256 value) public {\n    _burnFrom(from, value);\n  }\n}\n\ninterface IVest {\n  function totalVested() external view returns (uint256);\n\n  function vestedOf(address who) external view returns (uint256);\n  \n  event Vest(\n    address indexed to,\n    uint256 value\n  );\n}\n\ncontract Vest is IVest {\n  using SafeMath for uint256;\n  \n  struct Beneficiary {\n    address _address;\n    uint256 startTime;\n    uint256 _amount;\n    uint256 _percent;\n    bool monthly;\n  }\n\n  mapping (address => Beneficiary) beneficiaries;\n\n  mapping (address => uint256) private _vestedBalances;\n\n  uint256 private _totalVested;\n  uint256 private beneficiariesCount;\n\n  function totalVested() public view returns (uint256) {\n    return _totalVested;\n  }\n\n  function vestedOf(address owner) public view returns (uint256) {\n    return _vestedBalances[owner];\n  }\n\n  function _vest(address to, uint256 value, uint256 percent, bool monthly) internal {\n    require(to != address(0));\n\n    _totalVested = _totalVested.add(value);\n    _vestedBalances[to] = _vestedBalances[to].add(value);\n\n    addBeneficiary(to, now, value, percent, monthly);\n    emit Vest(to, value);\n  }\n\n  function totalBeneficiaries() public view returns (uint256) {\n    return beneficiariesCount;\n  }\n\n  function addBeneficiary (address to, uint256, uint256 value, uint256 percent, bool monthly) internal {\n    beneficiariesCount ++;\n    beneficiaries[to] = Beneficiary(to, now, value, percent, monthly);\n  }\n  \n  function isBeneficiary (address _address) public view returns (bool) {\n    if (beneficiaries[_address]._address != 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function getBeneficiary (address _address) public view returns (address, uint256, uint256, uint256, bool) {\n    Beneficiary storage b = beneficiaries[_address];\n    return (b._address, b.startTime, b._amount, b._percent, b.monthly);\n  }\n  \n  function _getLockedAmount(address _address) public view returns (uint256) {\n    Beneficiary memory b = beneficiaries[_address];\n    uint256 amount = b._amount;\n    uint256 percent = b._percent;\n    uint256 timeValue = _getTimeValue(_address);\n    uint256 calcAmount = amount.mul(timeValue.mul(percent)).div(100);\n\n    if (calcAmount >= amount) {\n        return 0;\n    } else {\n        return amount.sub(calcAmount);\n    }\n  }\n  \n  function _getTimeValue(address _address) internal view returns (uint256) {\n    Beneficiary memory b = beneficiaries[_address];\n    uint256 startTime = b.startTime;\n    uint256 presentTime = now;\n    uint256 timeValue = presentTime.sub(startTime);\n    bool monthly = b.monthly;\n\n    if (monthly) {\n      return timeValue.div(10 minutes);\n    } else {\n      return timeValue.div(120 minutes);  \n    }\n  }\n}\n\ncontract SuperInvestable is SuperInvestorRole, InvestorRole {\n  using SafeMath for uint256;\n  using Config for Config;\n\n  address internal BANK = Config.bank();\n  uint256 public percent;\n  \n  struct Investor {\n    address _address;\n    uint256 _amount;\n    uint256 _initialAmount;\n    uint256 startTime;\n  }\n  \n  mapping (address => Investor) investorList;\n  \n  modifier onlyBank() {\n    require(msg.sender == BANK);\n    _;\n  }\n  \n  function setPercent (uint256 _percent) external onlyBank returns (bool) {\n    percent = _percent;\n    return true;\n  }\n  \n  function addToInvestorList (address to, uint256 _amount, uint256 _initialAmount, uint256) internal {\n    _addInvestor(to);\n    investorList[to] = Investor(to, _amount, _initialAmount, now);\n  }\n      \n  function getInvestor (address _address) internal view returns (address, uint256, uint256, uint256) {\n    Investor storage i = investorList[_address];\n    return (i._address, i._amount, i._initialAmount, i.startTime);\n  }\n  \n  function _getInvestorLockedAmount (address _address) public view returns (uint256) {\n    Investor memory i = investorList[_address];\n    uint256 amount = i._amount;\n    uint256 timeValue = _getTimeValue(_address);\n    uint256 calcAmount = amount.mul(timeValue.mul(percent)).div(100);\n\n    if (calcAmount >= amount) {\n        return 0;\n    } else {\n        return amount.sub(calcAmount);\n    }\n  }\n  \n  function _getTimeValue (address _address) internal view returns (uint256) {\n    Investor memory i = investorList[_address];\n    uint256 startTime = i.startTime;\n    uint256 presentTime = now;\n    uint256 timeValue = presentTime.sub(startTime);\n\n    return timeValue.div(1 minutes);\n  }\n}\n\ncontract FTCash is ERC20Detailed, ERC20Mintable, ERC20Burnable, Vest, SuperInvestable {\n    using Config for Config;\n\n    uint internal INITIAL_SUPPLY = Config.initial_supply();\n    address internal BANK = Config.bank();\n\n    string internal _name = \"FTCash\";\n    string internal _symbol = \"FTX\";\n    uint8 internal _decimals = 18;\n\n    modifier onlyBank() {\n      require(msg.sender == BANK);\n      _;\n    }\n\n    constructor()\n      ERC20Detailed(_name, _symbol, _decimals)\n\n    public \n    {\n        _mint(BANK, INITIAL_SUPPLY);\n        // _addMinter(BANK);\n        // renounceMinter();\n    }\n\n    function vest(address _to, uint256 _amount, uint256 percent, bool monthly)\n      onlyBank external returns (bool) {\n      _vest(_to, _amount, percent, monthly);\n      transfer(_to, _amount);\n      return true;\n    }\n\n    /* Checks limit for the address \n    *  Checks if the address is a Beneficiary and checks the allowed transferrable first\n    *  Then checks if address is a Super Investor and converts the recipient into an Investor\n    *  Then checks if address is an Investor and checks the allowed transferrable\n    *  Then returns if remaining balance after the transfer is gte to value\n    */\n    function checkLimit(address _address, uint256 value) internal view returns (bool) {\n      uint256 remaining = balanceOf(_address).sub(value);\n      \n      if (isBeneficiary(_address) && isInvestor(_address)) {\n        uint256 ilocked = _getInvestorLockedAmount(_address);\n        uint256 locked = _getLockedAmount(_address);\n        return remaining >= locked.add(ilocked);\n      }\n      \n      if (isBeneficiary(_address)) {\n        return remaining >= _getLockedAmount(_address);\n      }\n      \n      if (isInvestor(_address)) {\n        return remaining >= _getInvestorLockedAmount(_address);\n      }\n    }\n\n    /* Checks if sender is a Beneficiary or an Investor then checks the limit\n    *  Then checks if the sender is a superInvestor then converts the recipient to an investor\n    *  Then proceeds to transfer the amount\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n      if (isBeneficiary(msg.sender) || isInvestor(msg.sender)) {\n        require(checkLimit(msg.sender, value));\n      }\n\n      if (isSuperInvestor(msg.sender)) {\n        addToInvestorList(to, value, value, now);\n      }\n\n      _transfer(msg.sender, to, value);\n      return true;\n    }\n    \n    function bankBurnFrom(address account, uint256 value) external onlyBank {\n      _burn(account, value);\n    }\n}",
  "bytecode": "608060405262000022620004be6401000000000262002f7d176401000000009004565b600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000080620004be6401000000000262002f7d176401000000009004565b600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000de620004be6401000000000262002f7d176401000000009004565b600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200013c620004be6401000000000262002f7d176401000000009004565b601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200019a620004da6401000000000262002f99176401000000009004565b601355620001bb620004be6401000000000262002f7d176401000000009004565b601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600681526020017f4654436173680000000000000000000000000000000000000000000000000000815250601590805190602001906200024892919062000832565b506040805190810160405280600381526020017f4654580000000000000000000000000000000000000000000000000000000000815250601690805190602001906200029692919062000832565b506012601760006101000a81548160ff021916908360ff160217905550348015620002c057600080fd5b5060158054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200035b5780601f106200032f576101008083540402835291602001916200035b565b820191906000526020600020905b8154815290600101906020018083116200033d57829003601f168201915b505050505060168054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620003fa5780601f10620003ce57610100808354040283529160200191620003fa565b820191906000526020600020905b815481529060010190602001808311620003dc57829003601f168201915b5050505050601760009054906101000a900460ff1682600090805190602001906200042792919062000832565b5081600190805190602001906200044092919062000832565b5080600260006101000a81548160ff021916908360ff1602179055505050506200047933620004ed640100000000026401000000009004565b620004b8601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660135462000557640100000000026401000000009004565b620008e1565b600073f2058a24b61e5b7cd0aa6f4cc28f7ff0eca10ff4905090565b60006a295be96e64066972000000905090565b62000511816006620006b86401000000000262002c77179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156200057e57600080fd5b620005a3816005546200077b6401000000000262002172179091906401000000009004565b6005819055506200060b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200077b6401000000000262002172179091906401000000009004565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620006f557600080fd5b6200071082826200079d640100000000026401000000009004565b1515156200071d57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008082840190508381101515156200079357600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620007db57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200087557805160ff1916838001178555620008a6565b82800160010185558215620008a6579182015b82811115620008a557825182559160200191906001019062000888565b5b509050620008b59190620008b9565b5090565b620008de91905b80821115620008da576000816000905550600101620008c0565b5090565b90565b612fd880620008f16000396000f3006080604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101b1578063077b124b14610241578063095ea7b31461028457806318160ddd146102e9578063199cbc5414610314578063233e32201461033f57806323b872dd14610356578063313ce567146103db578063395093511461040c57806340df78b61461047157806342966c68146104be57806347556b73146104eb578063505a1b311461054657806353c76b13146105e957806370a082311461064057806370ba1113146106975780637154b8b5146106c257806379cc6790146107075780637a5db3f314610754578063944771041461076b57806395d89b41146107c2578063983b2d561461085257806398650275146108955780639d19b226146108ac578063a0712d6814610907578063a457c2d71461094c578063a9059cbb146109b1578063aa271e1a14610a16578063adf272ab14610a71578063c9252e7014610aec578063cee2a9cf14610b43578063d01a69c914610b9e578063dd62ed3e14610bc9578063e641bde114610c40575b600080fd5b3480156101bd57600080fd5b506101c6610c83565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102065780820151818401526020810190506101eb565b50505050905090810190601f1680156102335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024d57600080fd5b50610282600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d25565b005b34801561029057600080fd5b506102cf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d8d565b604051808215151515815260200191505060405180910390f35b3480156102f557600080fd5b506102fe610eba565b6040518082815260200191505060405180910390f35b34801561032057600080fd5b50610329610ec4565b6040518082815260200191505060405180910390f35b34801561034b57600080fd5b50610354610ece565b005b34801561036257600080fd5b506103c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f45565b604051808215151515815260200191505060405180910390f35b3480156103e757600080fd5b506103f06110f7565b604051808260ff1660ff16815260200191505060405180910390f35b34801561041857600080fd5b50610457600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061110e565b604051808215151515815260200191505060405180910390f35b34801561047d57600080fd5b506104bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611345565b005b3480156104ca57600080fd5b506104e9600480360381019080803590602001909291905050506113af565b005b3480156104f757600080fd5b5061052c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113bc565b604051808215151515815260200191505060405180910390f35b34801561055257600080fd5b50610587600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113d9565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b3480156105f557600080fd5b5061062a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061147d565b6040518082815260200191505060405180910390f35b34801561064c57600080fd5b50610681600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115ee565b6040518082815260200191505060405180910390f35b3480156106a357600080fd5b506106ac611637565b6040518082815260200191505060405180910390f35b3480156106ce57600080fd5b506106ed6004803603810190808035906020019092919050505061163d565b604051808215151515815260200191505060405180910390f35b34801561071357600080fd5b50610752600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116ab565b005b34801561076057600080fd5b506107696116b9565b005b34801561077757600080fd5b506107ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d8565b6040518082815260200191505060405180910390f35b3480156107ce57600080fd5b506107d7611721565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108175780820151818401526020810190506107fc565b50505050905090810190601f1680156108445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561085e57600080fd5b50610893600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117c3565b005b3480156108a157600080fd5b506108aa6117e3565b005b3480156108b857600080fd5b506108ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ee565b604051808215151515815260200191505060405180910390f35b34801561091357600080fd5b5061093260048036038101908080359060200190929190505050611884565b604051808215151515815260200191505060405180910390f35b34801561095857600080fd5b50610997600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506118cf565b604051808215151515815260200191505060405180910390f35b3480156109bd57600080fd5b506109fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b06565b604051808215151515815260200191505060405180910390f35b348015610a2257600080fd5b50610a57600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b6c565b604051808215151515815260200191505060405180910390f35b348015610a7d57600080fd5b50610ad2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190505050611b89565b604051808215151515815260200191505060405180910390f35b348015610af857600080fd5b50610b2d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c0a565b6040518082815260200191505060405180910390f35b348015610b4f57600080fd5b50610b84600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d59565b604051808215151515815260200191505060405180910390f35b348015610baa57600080fd5b50610bb3611d76565b6040518082815260200191505060405180910390f35b348015610bd557600080fd5b50610c2a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d80565b6040518082815260200191505060405180910390f35b348015610c4c57600080fd5b50610c81600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e07565b005b606060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d1b5780601f10610cf057610100808354040283529160200191610d1b565b820191906000526020600020905b815481529060010190602001808311610cfe57829003601f168201915b5050505050905090565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d8157600080fd5b610d8a81611e7f565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610dca57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600554905090565b6000600a54905090565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f2f5750610f2e336113bc565b5b1515610f3a57600080fd5b610f4333611ed9565b565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610fd257600080fd5b61106182600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3390919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110ec848484611f54565b600190509392505050565b6000600260009054906101000a900460ff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561114b57600080fd5b6111da82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461217290919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a157600080fd5b6113ab8282612193565b5050565b6113b93382612193565b50565b60006113d282600d61232190919063ffffffff16565b9050919050565b600080600080600080600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010154826002015483600301548460040160009054906101000a900460ff16955095509550955095505091939590929450565b6000611487612ef6565b600080600080600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505094508460400151935084606001519250611580876123b5565b91506115ba60646115ac61159d86866124c390919063ffffffff16565b876124c390919063ffffffff16565b61250190919063ffffffff16565b905083811015156115ce57600095506115e4565b6115e18185611f3390919063ffffffff16565b95505b5050505050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60115481565b6000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561169b57600080fd5b8160118190555060019050919050565b6116b5828261252b565b5050565b6116c233611d59565b15156116cd57600080fd5b6116d6336126d3565b565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117b95780601f1061178e576101008083540402835291602001916117b9565b820191906000526020600020905b81548152906001019060200180831161179c57829003601f168201915b5050505050905090565b6117cc33611b6c565b15156117d757600080fd5b6117e08161272d565b50565b6117ec33612787565b565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561187a576001905061187f565b600090505b919050565b600061188f33611b6c565b151561189a57600080fd5b6118c6600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836127e1565b60019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561190c57600080fd5b61199b82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3390919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000611b11336117ee565b80611b215750611b2033611d59565b5b15611b3c57611b303383612921565b1515611b3b57600080fd5b5b611b45336113bc565b15611b5757611b56838384426129e2565b5b611b62338484611f54565b6001905092915050565b6000611b8282600661232190919063ffffffff16565b9050919050565b6000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611be757600080fd5b611bf385858585612ad0565b611bfd8585611b06565b5060019050949350505050565b6000611c14612f3e565b6000806000601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050935083602001519250611cea866123b5565b9150611d266064611d18611d09601154866124c390919063ffffffff16565b866124c390919063ffffffff16565b61250190919063ffffffff16565b90508281101515611d3a5760009450611d50565b611d4d8184611f3390919063ffffffff16565b94505b50505050919050565b6000611d6f82600f61232190919063ffffffff16565b9050919050565b6000600b54905090565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e685750611e67336113bc565b5b1515611e7357600080fd5b611e7c81612c1d565b50565b611e9381600d612c7790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f3f1b9b76d84ba0cff326e6234d14d93b035f0ea8db8507dc9949300fa5400ef160405160405180910390a250565b611eed81600d612d2790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f21591ef36cd05dca4dc5a839372eb318a3d96b2242cae6ade69e835ef2da653f60405160405180910390a250565b600080838311151515611f4557600080fd5b82840390508091505092915050565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611fa257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611fde57600080fd5b61203081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3390919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120c581600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461217290919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015151561218957600080fd5b8091505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156121b957600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561220757600080fd5b61221c81600554611f3390919063ffffffff16565b60058190555061227481600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3390919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561235e57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006123bf612f3e565b6000806000601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250509350836060015192504291506124a28383611f3390919063ffffffff16565b90506124b8603c8261250190919063ffffffff16565b945050505050919050565b60008060008414156124d857600091506124fa565b82840290508284828115156124e957fe5b041415156124f657600080fd5b8091505b5092915050565b60008060008311151561251357600080fd5b828481151561251e57fe5b0490508091505092915050565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156125b657600080fd5b61264581600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f3390919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126cf8282612193565b5050565b6126e781600f612d2790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fba0013628ccb89af5bb18edf764d3a7b35c07b894848b8e6fd3434719de39c7d60405160405180910390a250565b612741816006612c7790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61279b816006612d2790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561280757600080fd5b61281c8160055461217290919063ffffffff16565b60058190555061287481600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461217290919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008060008061294285612934886115ee565b611f3390919063ffffffff16565b925061294d866117ee565b801561295e575061295d86611d59565b5b156129965761296c86611c0a565b91506129778661147d565b905061298c828261217290919063ffffffff16565b83101593506129d9565b61299f866117ee565b156129b7576129ad8661147d565b83101593506129d9565b6129c086611d59565b156129d8576129ce86611c0a565b83101593506129d9565b5b50505092915050565b6129eb84612c1d565b6080604051908101604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200142815250601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015590505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515612b0c57600080fd5b612b2183600a5461217290919063ffffffff16565b600a81905550612b7983600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461217290919063ffffffff16565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612bc98442858585612dd6565b8373ffffffffffffffffffffffffffffffffffffffff167fd4a50953e9ae2104f507446be8391c79b33e1e86e626473e34bb79eb5fea1f3e846040518082815260200191505060405180910390a250505050565b612c3181600f612c7790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612cb357600080fd5b612cbd8282612321565b151515612cc957600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d6357600080fd5b612d6d8282612321565b1515612d7857600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600b6000815480929190600101919050555060a0604051908101604052808673ffffffffffffffffffffffffffffffffffffffff168152602001428152602001848152602001838152602001821515815250600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050505050505050565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000151581525090565b608060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b600073f2058a24b61e5b7cd0aa6f4cc28f7ff0eca10ff4905090565b60006a295be96e640669720000009050905600a165627a7a723058206a09dc928c1da6895cda0c3e46a096564e18e381e297dc1287cd6e3d9b1bf9e20029"
}