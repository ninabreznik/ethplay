{
  "address": "0x000c100050e98c91f9114fa5dd75ce6869bf4f53",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Crypto10 Hedged Token",
  "contractName": "C10Token",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\n/**\n * Invictus Capital - CRYPTO10 Hedged\n * https://invictuscapital.com\n * MIT License - https://github.com/invictuscapital/smartcontracts/\n * Uses code from the OpenZeppelin project\n */\n\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.6;\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.6;\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title WhitelistAdminRole\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n */\ncontract WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(msg.sender);\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(msg.sender));\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title WhitelistedRole\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n * it), and not Whitelisteds themselves.\n */\ncontract WhitelistedRole is WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    Roles.Role private _whitelisteds;\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(msg.sender));\n        _;\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\n        _addWhitelisted(account);\n    }\n\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n\n    function renounceWhitelisted() public {\n        _removeWhitelisted(msg.sender);\n    }\n\n    function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n\n    function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n}\n\n// File: contracts/InvictusWhitelist.sol\n\npragma solidity ^0.5.6;\n\n/**\n * Manages whitelisted addresses.\n *\n */\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\n    constructor ()\n        WhitelistedRole() public {\n    }\n\n    /// @dev override to support legacy name\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\n        if (!isWhitelisted(participant)) {\n            addWhitelisted(participant);\n        }\n    }\n\n    /// Allow the owner to remove a whitelistAdmin\n    function removeWhitelistAdmin(address account) public onlyOwner {\n        require(account != msg.sender, \"Use renounceWhitelistAdmin\");\n        _removeWhitelistAdmin(account);\n    }\n}\n\n// File: contracts/C10Token.sol\n\npragma solidity ^0.5.6;\n\n/**\n * Contract for CRYPTO10 Hedged (C10) fund.\n *\n */\ncontract C10Token is ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\n\n    // Maps participant addresses to the eth balance pending token issuance\n    mapping(address => uint256) public pendingBuys;\n    // The participant accounts waiting for token issuance\n    address[] public participantAddresses;\n\n    // Maps participant addresses to the withdrawal request\n    mapping (address => uint256) public pendingWithdrawals;\n    address payable[] public withdrawals;\n\n    uint256 public minimumWei = 50 finney;\n    uint256 public entryFee = 50;  // 0.5% , or 50 bips\n    uint256 public exitFee = 50;  // 0.5% , or 50 bips\n    uint256 public minTokenRedemption = 1 ether;\n    uint256 public maxAllocationsPerTx = 50;\n    uint256 public maxWithdrawalsPerTx = 50;\n    Price public price;\n\n    address public whitelistContract;\n\n    struct Price {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    event PriceUpdate(uint256 numerator, uint256 denominator);\n    event AddLiquidity(uint256 value);\n    event RemoveLiquidity(uint256 value);\n    event DepositReceived(address indexed participant, uint256 value);\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\n    event WithdrawInvalidAddress(address indexed participant, uint256 amountTokens);\n    event WithdrawFailed(address indexed participant, uint256 amountTokens);\n    event TokensClaimed(address indexed token, uint256 balance);\n\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\n        ERC20Detailed(\"CRYPTO10 Hedged\", \"C10\", 18)\n        ERC20Burnable()\n        Pausable() public {\n            price = Price(priceNumeratorInput, 1000);\n            require(priceNumeratorInput > 0, \"Invalid price numerator\");\n            require(whitelistContractInput != address(0), \"Invalid whitelist address\");\n            whitelistContract = whitelistContractInput;\n    }\n\n    /**\n     * @dev fallback function that buys tokens if the sender is whitelisted.\n     */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @dev Explicitly buy via contract.\n     */\n    function buy() external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * Sets the maximum number of allocations in a single transaction.\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\n     */\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\n        require(newMaxAllocationsPerTx > 0, \"Must be greater than 0\");\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\n    }\n\n    /**\n     * Sets the maximum number of withdrawals in a single transaction.\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\n     */\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\n        require(newMaxWithdrawalsPerTx > 0, \"Must be greater than 0\");\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\n    }\n\n    function setEntryFee(uint256 newFee) external onlyOwner {\n        require(newFee < 10000, \"Must be less than 100 percent\");\n        entryFee = newFee;\n    }\n\n    function setExitFee(uint256 newFee) external onlyOwner {\n        require(newFee < 10000, \"Must be less than 100 percent\");\n        exitFee = newFee;\n    }\n\n    /// Sets the minimum wei when buying tokens.\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\n        require(newMinimumWei > 0, \"Minimum must be greater than 0\");\n        minimumWei = newMinimumWei;\n    }\n\n    /// Sets the minimum number of tokens to redeem.\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\n        require(newMinTokenRedemption > 0, \"Minimum must be greater than 0\");\n        minTokenRedemption = newMinTokenRedemption;\n    }\n\n    /// Updates the price numerator.\n    function updatePrice(uint256 newNumerator) external onlyMinter {\n        require(newNumerator > 0, \"Must be positive value\");\n\n        price.numerator = newNumerator;\n\n        allocateTokens();\n        processWithdrawals();\n        emit PriceUpdate(price.numerator, price.denominator);\n    }\n\n    /// Updates the price denominator.\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\n        require(newDenominator > 0, \"Must be positive value\");\n\n        price.denominator = newDenominator;\n    }\n\n    /**\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\n     * @dev withdrawn tokens are burnt.\n     */\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \n        onlyWhitelisted {\n\n        address payable participant = msg.sender;\n        require(balanceOf(participant) >= amountTokensToWithdraw, \n            \"Cannot withdraw more than balance held\");\n        require(amountTokensToWithdraw >= minTokenRedemption, \"Too few tokens\");\n\n        burn(amountTokensToWithdraw);\n\n        uint256 pendingAmount = pendingWithdrawals[participant];\n        if (pendingAmount == 0) {\n            withdrawals.push(participant);\n        }\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\n    }\n\n    /// Allows owner to claim any ERC20 tokens.\n    function claimTokens(ERC20 token) external onlyOwner {\n        require(address(token) != address(0), \"Invalid address\");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(owner(), token.balanceOf(address(this)));\n        emit TokensClaimed(address(token), balance);\n    }\n    \n    /**\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\n     * @param value The amount of tokens to be burned.\n     */\n    function burnForParticipant(address account, uint256 value) external onlyOwner {\n        _burn(account, value);\n    }\n\n\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\n    function addLiquidity() external payable {\n        require(msg.value > 0, \"Must be positive value\");\n        emit AddLiquidity(msg.value);\n    }\n\n    /// Removes liquidity, allowing owner to transfer eth to the owner.\n    function removeLiquidity(uint256 amount) external onlyOwner {\n        require(amount <= address(this).balance, \"Insufficient balance\");\n\n        msg.sender.transfer(amount);\n        emit RemoveLiquidity(amount);\n    }\n\n    /// Allow the owner to remove a minter\n    function removeMinter(address account) external onlyOwner {\n        require(account != msg.sender, \"Use renounceMinter\");\n        _removeMinter(account);\n    }\n\n    /// Allow the owner to remove a pauser\n    function removePauser(address account) external onlyOwner {\n        require(account != msg.sender, \"Use renouncePauser\");\n        _removePauser(account);\n    }\n\n    /// returns the number of withdrawals pending.\n    function numberWithdrawalsPending() external view returns (uint256) {\n        return withdrawals.length;\n    }\n\n    /// returns the number of pending buys, waiting for token issuance.\n    function numberBuysPending() external view returns (uint256) {\n        return participantAddresses.length;\n    }\n\n    /**\n     * @dev Function to mint tokens when not paused.\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n\n    /**\n     * First phase of the 2-part buy, the participant deposits eth and waits\n     * for a price to be set so the tokens can be minted.\n     * @param participant whitelisted buyer.\n     */\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\n        assert(participant != address(0));\n\n        // Ensure minimum investment is met\n        require(msg.value >= minimumWei, \"Minimum wei not met\");\n\n        uint256 pendingAmount = pendingBuys[participant];\n        if (pendingAmount == 0) {\n            participantAddresses.push(participant);\n        }\n\n        // Increase the pending balance and wait for the price update\n        pendingBuys[participant] = pendingAmount.add(msg.value);\n\n        emit DepositReceived(participant, msg.value);\n    }\n\n    /// Internal function to allocate token.\n    function allocateTokens() internal {\n        uint256 numberOfAllocations = min(participantAddresses.length, maxAllocationsPerTx);\n        uint256 startingIndex = participantAddresses.length;\n        uint256 endingIndex = participantAddresses.length.sub(numberOfAllocations);\n\n        for (uint256 i = startingIndex; i > endingIndex; i--) {\n            handleAllocation(i - 1);\n        }\n    }\n\n    function handleAllocation(uint256 index) internal {\n        address participant = participantAddresses[index];\n        uint256 deposit = pendingBuys[participant];\n        uint256 feeAmount = deposit.mul(entryFee) / 10000;\n        uint256 balance = deposit.sub(feeAmount);\n\n        uint256 newTokens = balance.mul(price.numerator) / price.denominator;\n        pendingBuys[participant] = 0;\n        participantAddresses.pop();\n\n        if (feeAmount > 0) {\n            address(uint160(owner())).transfer(feeAmount);\n        }\n\n        mint(participant, newTokens);\n        emit TokensIssued(participant, newTokens, balance);\n    }\n\n    /// Internal function to process withdrawals.\n    function processWithdrawals() internal {\n        uint256 numberOfWithdrawals = min(withdrawals.length, maxWithdrawalsPerTx);\n        uint256 startingIndex = withdrawals.length;\n        uint256 endingIndex = withdrawals.length.sub(numberOfWithdrawals);\n\n        for (uint256 i = startingIndex; i > endingIndex; i--) {\n            handleWithdrawal(i - 1);\n        }\n    }\n\n    function handleWithdrawal(uint256 index) internal {\n        address payable participant = withdrawals[index];\n        uint256 tokens = pendingWithdrawals[participant];\n        uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\n        pendingWithdrawals[participant] = 0;\n        withdrawals.pop();\n\n        if (address(this).balance < withdrawValue) {\n            mint(participant, tokens);\n            emit WithdrawFailed(participant, tokens);\n            return;\n        }\n\n        uint256 feeAmount = withdrawValue.mul(exitFee) / 10000;\n        uint256 balance = withdrawValue.sub(feeAmount);\n        if (participant.send(balance)) {\n            if (feeAmount > 0) {\n                address(uint160(owner())).transfer(feeAmount);\n            }\n            emit Withdraw(participant, tokens, balance);\n        } else {\n            mint(participant, tokens);\n            emit WithdrawInvalidAddress(participant, tokens);\n        }\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    modifier onlyWhitelisted() {\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \"Must be whitelisted\");\n        _;\n    }\n}",
  "bytecode": "608060405266b1a2bc2ec50000600e556032600f556032601055670de0b6b3a7640000601155603260125560326013553480156200003c57600080fd5b5060405160408062002ea8833981018060405260408110156200005e57600080fd5b508051602091820151604080518082018252600f81527f43525950544f31302048656467656400000000000000000000000000000000008186019081528251808401909352600383527f4331300000000000000000000000000000000000000000000000000000000000958301959095528051939492939092601291620000e891600091620003e9565b508151620000fe906001906020850190620003e9565b506002805460ff90921660ff199092169190911790555050600680546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200017333620002b960201b60201c565b6008805460ff191690556200018f336200030b602090811b901c565b604080518082019091528281526103e860209091018190526014839055601555816200021c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207072696365206e756d657261746f72000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166200029257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c69642077686974656c697374206164647265737300000000000000604482015290519081900360640190fd5b601680546001600160a01b0319166001600160a01b0392909216919091179055506200048e565b620002d48160076200035d60201b6200254f1790919060201c565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b620003268160096200035d60201b6200254f1790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6001600160a01b0381166200037157600080fd5b620003838282620003b360201b60201c565b156200038e57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b038216620003c957600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200042c57805160ff19168380011785556200045c565b828001600101855582156200045c579182015b828111156200045c5782518255916020019190600101906200043f565b506200046a9291506200046e565b5090565b6200048b91905b808211156200046a576000815560010162000475565b90565b612a0a806200049e6000396000f3fe6080604052600436106103765760003560e01c806382dc1ec4116101d1578063a9059cbb11610102578063dd62ed3e116100a0578063e8078d941161006f578063e8078d9414610c0d578063eb770d0c14610c15578063f2fde38b14610c3f578063f3f4370314610c7257610376565b8063dd62ed3e14610b60578063df8de3e714610b9b578063e0e267e514610bce578063e5a583a914610be357610376565b8063cc9be27a116100dc578063cc9be27a14610acd578063cf0aed0e14610ae2578063cf60402f14610b0c578063dbb2455414610b3657610376565b8063a9059cbb14610a4c578063aa271e1a14610a85578063c239f6ff14610ab857610376565b8063983b2d561161016f5780639ee679e8116101495780639ee679e8146109b3578063a035b1fe146109dd578063a457c2d714610a0b578063a6f2ae3a14610a4457610376565b8063983b2d561461094157806398650275146109745780639c8f9f231461098957610376565b80638d6cc56d116101ab5780638d6cc56d146108d85780638da5cb5b146109025780638f32d59b1461091757806395d89b411461092c57610376565b806382dc1ec41461087b5780638456cb59146108ae57806384900b04146108c357610376565b806346fbf68e116102ab5780636284ae41116102495780636ef8d66d116102235780636ef8d66d146107e557806370a08231146107fa578063715018a61461082d57806379cc67901461084257610376565b80636284ae4114610773578063640c2544146107885780636b2c0f55146107b257610376565b80635c975abb116102855780635c975abb146106e65780635cc07076146106fb5780636036846d146107255780636130aabf1461073a57610376565b806346fbf68e1461065857806354ffbddb1461068b57806359a747d4146106d157610376565b8063313ce567116103185780633f4ba83a116102f25780633f4ba83a146105b657806340c10f19146105cb57806342966c6814610604578063454adff91461062e57610376565b8063313ce5671461051f57806331a4cbb61461054a578063395093511461057d57610376565b806318160ddd1161035457806318160ddd1461047f57806323b872dd1461049457806327e70606146104d75780633092afd5146104ec57610376565b806306fdde0314610381578063072ea61c1461040b578063095ea7b314610432575b61037f33610ca5565b005b34801561038d57600080fd5b50610396610ebd565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103d05781810151838201526020016103b8565b50505050905090810190601f1680156103fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041757600080fd5b50610420610f53565b60408051918252519081900360200190f35b34801561043e57600080fd5b5061046b6004803603604081101561045557600080fd5b506001600160a01b038135169060200135610f59565b604080519115158252519081900360200190f35b34801561048b57600080fd5b50610420610fc4565b3480156104a057600080fd5b5061046b600480360360608110156104b757600080fd5b506001600160a01b03813581169160208101359091169060400135610fca565b3480156104e357600080fd5b50610420611081565b3480156104f857600080fd5b5061037f6004803603602081101561050f57600080fd5b50356001600160a01b0316611087565b34801561052b57600080fd5b50610534611105565b6040805160ff9092168252519081900360200190f35b34801561055657600080fd5b506104206004803603602081101561056d57600080fd5b50356001600160a01b031661110e565b34801561058957600080fd5b5061046b600480360360408110156105a057600080fd5b506001600160a01b038135169060200135611120565b3480156105c257600080fd5b5061037f6111bc565b3480156105d757600080fd5b5061046b600480360360408110156105ee57600080fd5b506001600160a01b03813516906020013561121c565b34801561061057600080fd5b5061037f6004803603602081101561062757600080fd5b5035611253565b34801561063a57600080fd5b5061037f6004803603602081101561065157600080fd5b503561125d565b34801561066457600080fd5b5061046b6004803603602081101561067b57600080fd5b50356001600160a01b03166112cb565b34801561069757600080fd5b506106b5600480360360208110156106ae57600080fd5b50356112de565b604080516001600160a01b039092168252519081900360200190f35b3480156106dd57600080fd5b50610420611305565b3480156106f257600080fd5b5061046b61130b565b34801561070757600080fd5b506106b56004803603602081101561071e57600080fd5b5035611314565b34801561073157600080fd5b50610420611321565b34801561074657600080fd5b5061037f6004803603604081101561075d57600080fd5b506001600160a01b038135169060200135611327565b34801561077f57600080fd5b50610420611346565b34801561079457600080fd5b5061037f600480360360208110156107ab57600080fd5b503561134c565b3480156107be57600080fd5b5061037f600480360360208110156107d557600080fd5b50356001600160a01b03166113ba565b3480156107f157600080fd5b5061037f611435565b34801561080657600080fd5b506104206004803603602081101561081d57600080fd5b50356001600160a01b0316611440565b34801561083957600080fd5b5061037f61145b565b34801561084e57600080fd5b5061037f6004803603604081101561086557600080fd5b506001600160a01b0381351690602001356114b6565b34801561088757600080fd5b5061037f6004803603602081101561089e57600080fd5b50356001600160a01b03166114c0565b3480156108ba57600080fd5b5061037f6114db565b3480156108cf57600080fd5b506106b561153f565b3480156108e457600080fd5b5061037f600480360360208110156108fb57600080fd5b503561154e565b34801561090e57600080fd5b506106b5611611565b34801561092357600080fd5b5061046b611620565b34801561093857600080fd5b50610396611631565b34801561094d57600080fd5b5061037f6004803603602081101561096457600080fd5b50356001600160a01b0316611691565b34801561098057600080fd5b5061037f6116ac565b34801561099557600080fd5b5061037f600480360360208110156109ac57600080fd5b50356116b5565b3480156109bf57600080fd5b5061037f600480360360208110156109d657600080fd5b5035611783565b3480156109e957600080fd5b506109f26119e0565b6040805192835260208301919091528051918290030190f35b348015610a1757600080fd5b5061046b60048036036040811015610a2e57600080fd5b506001600160a01b0381351690602001356119e9565b61037f611a32565b348015610a5857600080fd5b5061046b60048036036040811015610a6f57600080fd5b506001600160a01b038135169060200135611a3b565b348015610a9157600080fd5b5061046b60048036036020811015610aa857600080fd5b50356001600160a01b0316611a48565b348015610ac457600080fd5b50610420611a5b565b348015610ad957600080fd5b50610420611a61565b348015610aee57600080fd5b5061037f60048036036020811015610b0557600080fd5b5035611a67565b348015610b1857600080fd5b5061037f60048036036020811015610b2f57600080fd5b5035611ad5565b348015610b4257600080fd5b5061037f60048036036020811015610b5957600080fd5b5035611b43565b348015610b6c57600080fd5b5061042060048036036040811015610b8357600080fd5b506001600160a01b0381358116916020013516611bb2565b348015610ba757600080fd5b5061037f60048036036020811015610bbe57600080fd5b50356001600160a01b0316611bdd565b348015610bda57600080fd5b50610420611e0c565b348015610bef57600080fd5b5061037f60048036036020811015610c0657600080fd5b5035611e12565b61037f611e81565b348015610c2157600080fd5b5061037f60048036036020811015610c3857600080fd5b5035611f0e565b348015610c4b57600080fd5b5061037f60048036036020811015610c6257600080fd5b50356001600160a01b0316611f7d565b348015610c7e57600080fd5b5061042060048036036020811015610c9557600080fd5b50356001600160a01b0316611f97565b60085460ff1615610cb557600080fd5b60165460408051600160e01b633af32abf02815233600482015290516001600160a01b0390921691633af32abf91602480820192602092909190829003018186803b158015610d0357600080fd5b505afa158015610d17573d6000803e3d6000fd5b505050506040513d6020811015610d2d57600080fd5b5051610d835760408051600160e51b62461bcd02815260206004820152601360248201527f4d7573742062652077686974656c697374656400000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610d9357fe5b600e54341015610ded5760408051600160e51b62461bcd02815260206004820152601360248201527f4d696e696d756d20776569206e6f74206d657400000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600a602052604090205480610e5757600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b0384161790555b610e67813463ffffffff611fa916565b6001600160a01b0383166000818152600a6020908152604091829020939093558051348152905191927f9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e92918290030190a25050565b60008054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610f495780601f10610f1e57610100808354040283529160200191610f49565b820191906000526020600020905b815481529060010190602001808311610f2c57829003601f168201915b5050505050905090565b600f5481565b60006001600160a01b038316610f6e57600080fd5b3360008181526004602090815260408083206001600160a01b0388168085529083529281902086905580518681529051929392600080516020612999833981519152929181900390910190a35060015b92915050565b60055490565b6001600160a01b0383166000908152600460209081526040808320338452909152812054610ffe908363ffffffff611fc216565b6001600160a01b038516600090815260046020908152604080832033845290915290205561102d848484611fd7565b6001600160a01b038416600081815260046020908152604080832033808552908352928190205481519081529051929392600080516020612999833981519152929181900390910190a35060019392505050565b60125481565b61108f611620565b61109857600080fd5b6001600160a01b0381163314156110f95760408051600160e51b62461bcd02815260206004820152601260248201527f5573652072656e6f756e63654d696e7465720000000000000000000000000000604482015290519081900360640190fd5b611102816120a4565b50565b60025460ff1690565b600a6020526000908152604090205481565b60006001600160a01b03831661113557600080fd5b3360009081526004602090815260408083206001600160a01b0387168452909152902054611169908363ffffffff611fa916565b3360008181526004602090815260408083206001600160a01b038916808552908352928190208590558051948552519193600080516020612999833981519152929081900390910190a350600192915050565b6111c5336112cb565b6111ce57600080fd5b60085460ff166111dd57600080fd5b6008805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061122733611a48565b61123057600080fd5b60085460ff161561124057600080fd5b61124a83836120ec565b50600192915050565b6111023382612196565b611265611620565b61126e57600080fd5b600081116112c65760408051600160e51b62461bcd02815260206004820152601660248201527f4d7573742062652067726561746572207468616e203000000000000000000000604482015290519081900360640190fd5b601355565b6000610fbe60078363ffffffff61223f16565b600b81815481106112eb57fe5b6000918252602090912001546001600160a01b0316905081565b60115481565b60085460ff1690565b600d81815481106112eb57fe5b60135481565b61132f611620565b61133857600080fd5b6113428282612196565b5050565b60105481565b611354611620565b61135d57600080fd5b600081116113b55760408051600160e51b62461bcd02815260206004820152601660248201527f4d7573742062652067726561746572207468616e203000000000000000000000604482015290519081900360640190fd5b601255565b6113c2611620565b6113cb57600080fd5b6001600160a01b03811633141561142c5760408051600160e51b62461bcd02815260206004820152601260248201527f5573652072656e6f756e63655061757365720000000000000000000000000000604482015290519081900360640190fd5b61110281612274565b61143e33612274565b565b6001600160a01b031660009081526003602052604090205490565b611463611620565b61146c57600080fd5b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b61134282826122bc565b6114c9336112cb565b6114d257600080fd5b6111028161236c565b6114e4336112cb565b6114ed57600080fd5b60085460ff16156114fd57600080fd5b6008805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6016546001600160a01b031681565b61155733611a48565b61156057600080fd5b600081116115b85760408051600160e51b62461bcd02815260206004820152601660248201527f4d75737420626520706f7369746976652076616c756500000000000000000000604482015290519081900360640190fd5b60148190556115c56123b4565b6115cd612405565b60145460155460408051928352602083019190915280517f92664190cca12aca9cd5309d87194bdda75bb51362d71c06e1a6f75c7c7657119281900390910190a150565b6006546001600160a01b031690565b6006546001600160a01b0316331490565b60018054604080516020601f60026000196101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610f495780601f10610f1e57610100808354040283529160200191610f49565b61169a33611a48565b6116a357600080fd5b61110281612450565b61143e336120a4565b6116bd611620565b6116c657600080fd5b303181111561171f5760408051600160e51b62461bcd02815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f1935050505015801561174c573d6000803e3d6000fd5b506040805182815290517f9a5a8a32afd899e7f95003c6e21c9fab2d50e11992439d14472229180c60c7aa9181900360200190a150565b60085460ff161561179357600080fd5b60165460408051600160e01b633af32abf02815233600482015290516001600160a01b0390921691633af32abf91602480820192602092909190829003018186803b1580156117e157600080fd5b505afa1580156117f5573d6000803e3d6000fd5b505050506040513d602081101561180b57600080fd5b50516118615760408051600160e51b62461bcd02815260206004820152601360248201527f4d7573742062652077686974656c697374656400000000000000000000000000604482015290519081900360640190fd5b338161186c82611440565b10156118ac57604051600160e51b62461bcd0281526004018080602001828103825260268152602001806129b96026913960400191505060405180910390fd5b6011548210156119065760408051600160e51b62461bcd02815260206004820152600e60248201527f546f6f2066657720746f6b656e73000000000000000000000000000000000000604482015290519081900360640190fd5b61190f82611253565b6001600160a01b0381166000908152600c60205260409020548061197957600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384161790555b611989818463ffffffff611fa916565b6001600160a01b0383166000818152600c6020908152604091829020939093558051868152905191927f17040713250ec5f668a1c39e7939900e78558350dbaff0ebef34268dfa8ea4ac92918290030190a2505050565b60145460155482565b60006001600160a01b0383166119fe57600080fd5b3360009081526004602090815260408083206001600160a01b0387168452909152902054611169908363ffffffff611fc216565b61143e33610ca5565b600061124a338484611fd7565b6000610fbe60098363ffffffff61223f16565b600d5490565b600b5490565b611a6f611620565b611a7857600080fd5b60008111611ad05760408051600160e51b62461bcd02815260206004820152601e60248201527f4d696e696d756d206d7573742062652067726561746572207468616e20300000604482015290519081900360640190fd5b600e55565b611add611620565b611ae657600080fd5b60008111611b3e5760408051600160e51b62461bcd02815260206004820152601e60248201527f4d696e696d756d206d7573742062652067726561746572207468616e20300000604482015290519081900360640190fd5b601155565b611b4c33611a48565b611b5557600080fd5b60008111611bad5760408051600160e51b62461bcd02815260206004820152601660248201527f4d75737420626520706f7369746976652076616c756500000000000000000000604482015290519081900360640190fd5b601555565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b611be5611620565b611bee57600080fd5b6001600160a01b038116611c4c5760408051600160e51b62461bcd02815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b60408051600160e01b6370a0823102815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b158015611c9957600080fd5b505afa158015611cad573d6000803e3d6000fd5b505050506040513d6020811015611cc357600080fd5b505190506001600160a01b03821663a9059cbb611cde611611565b60408051600160e01b6370a0823102815230600482015290516001600160a01b038716916370a08231916024808301926020929190829003018186803b158015611d2757600080fd5b505afa158015611d3b573d6000803e3d6000fd5b505050506040513d6020811015611d5157600080fd5b50516040805163ffffffff851660e01b81526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b505050506040513d6020811015611dc757600080fd5b50506040805182815290516001600160a01b038416917f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e430919081900360200190a25050565b600e5481565b611e1a611620565b611e2357600080fd5b6127108110611e7c5760408051600160e51b62461bcd02815260206004820152601d60248201527f4d757374206265206c657373207468616e203130302070657263656e74000000604482015290519081900360640190fd5b601055565b60003411611ed95760408051600160e51b62461bcd02815260206004820152601660248201527f4d75737420626520706f7369746976652076616c756500000000000000000000604482015290519081900360640190fd5b6040805134815290517ff53d9d58a7ff16a2e1360446f1c4b5e81a427d3efd25615be081f4003662400a9181900360200190a1565b611f16611620565b611f1f57600080fd5b6127108110611f785760408051600160e51b62461bcd02815260206004820152601d60248201527f4d757374206265206c657373207468616e203130302070657263656e74000000604482015290519081900360640190fd5b600f55565b611f85611620565b611f8e57600080fd5b61110281612498565b600c6020526000908152604090205481565b600082820183811015611fbb57600080fd5b9392505050565b600082821115611fd157600080fd5b50900390565b6001600160a01b038216611fea57600080fd5b6001600160a01b038316600090815260036020526040902054612013908263ffffffff611fc216565b6001600160a01b038085166000908152600360205260408082209390935590841681522054612048908263ffffffff611fa916565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6120b560098263ffffffff61250716565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6001600160a01b0382166120ff57600080fd5b600554612112908263ffffffff611fa916565b6005556001600160a01b03821660009081526003602052604090205461213e908263ffffffff611fa916565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166121a957600080fd5b6005546121bc908263ffffffff611fc216565b6005556001600160a01b0382166000908152600360205260409020546121e8908263ffffffff611fc216565b6001600160a01b0383166000818152600360209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b60006001600160a01b03821661225457600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61228560078263ffffffff61250716565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6001600160a01b03821660009081526004602090815260408083203384529091529020546122f0908263ffffffff611fc216565b6001600160a01b038316600090815260046020908152604080832033845290915290205561231e8282612196565b6001600160a01b038216600081815260046020908152604080832033808552908352928190205481519081529051929392600080516020612999833981519152929181900390910190a35050565b61237d60078263ffffffff61254f16565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600b546012546000916123c69161259b565b600b5490915060006123de828463ffffffff611fc216565b9050815b818111156123ff576123f6600182036125b1565b600019016123e2565b50505050565b600d546013546000916124179161259b565b600d54909150600061242f828463ffffffff611fc216565b9050815b818111156123ff576124476001820361272c565b60001901612433565b61246160098263ffffffff61254f16565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6001600160a01b0381166124ab57600080fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811661251a57600080fd5b612524828261223f565b61252d57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b03811661256257600080fd5b61256c828261223f565b1561257657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60008183106125aa5781611fbb565b5090919050565b6000600b82815481106125c057fe5b60009182526020808320909101546001600160a01b0316808352600a9091526040822054600f5491935091906127109061260190849063ffffffff61297116565b8161260857fe5b049050600061261d838363ffffffff611fc216565b60155460145491925060009161263a90849063ffffffff61297116565b8161264157fe5b6001600160a01b0387166000908152600a6020526040812055600b8054929091049250908061266c57fe5b600082815260209020810160001990810180546001600160a01b031916905501905582156126d65761269c611611565b6001600160a01b03166108fc849081150290604051600060405180830381858888f193505050501580156126d4573d6000803e3d6000fd5b505b6126e0858261121c565b50604080518281526020810184905281516001600160a01b038816927fc91a3666a5b4764b69624fd864f5f18d75169482bacba07da1dbf4be975f83e2928290030190a2505050505050565b6000600d828154811061273b57fe5b60009182526020808320909101546001600160a01b0316808352600c909152604082205460145460155492945090929161277c90849063ffffffff61297116565b8161278357fe5b6001600160a01b0385166000908152600c6020526040812055600d805492909104925090806127ae57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055303181111561282b576127e3838361121c565b506040805183815290516001600160a01b038516917fa2269912b47133fae1d7f448c9284ea248951ac29b8c7c41d301f8721a38d10d919081900360200190a2505050611102565b60006127106128456010548461297190919063ffffffff16565b8161284c57fe5b0490506000612861838363ffffffff611fc216565b6040519091506001600160a01b0386169082156108fc029083906000818181858888f193505050501561291e5781156128d65761289c611611565b6001600160a01b03166108fc839081150290604051600060405180830381858888f193505050501580156128d4573d6000803e3d6000fd5b505b604080518581526020810183905281516001600160a01b038816927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568928290030190a2612969565b612928858561121c565b506040805185815290516001600160a01b038716917f93c87512400559004ebab34a251ea23289f1d5e70979a237004610ab7cce9d22919081900360200190a25b505050505050565b60008261298057506000610fbe565b8282028284828161298d57fe5b0414611fbb57600080fdfe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92543616e6e6f74207769746864726177206d6f7265207468616e2062616c616e63652068656c64a165627a7a723058206cb45074f43f64d08cd6e6024977292ddeff1872c2601ae12cf43a11a8468327002900000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000fdf9eb269b38e39e058f45d7d0ddb60f9",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000fdf9eb269b38e39e058f45d7d0ddb60f9"
}