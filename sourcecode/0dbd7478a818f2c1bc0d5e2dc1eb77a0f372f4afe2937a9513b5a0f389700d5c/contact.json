{
  "address": "0x0406caef8aec22de729fa3c74276c6b7e2bfc456",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "richtestkk",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-26\n*/\n\npragma solidity ^0.4.8;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b)  internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure  returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >=a);\n    return c;\n  }\n\n \n  \n}\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function kill() public {\n      if (msg.sender == owner)\n          selfdestruct(owner);\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n  bool public paused = false;\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract richtestkk is SafeMath,Pausable{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\t  address public owner;\n    uint256 public startTime;\n    uint256[9] public founderAmounts;\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n\t  mapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function richtestkk(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol\n        ) public {\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n\t\t    owner = msg.sender;\n        startTime=now;\n        founderAmounts = [427*10** uint256(25), 304*10** uint256(25), 217*10** uint256(25), 154*10** uint256(25), 11*10** uint256(25), 78*10** uint256(25), 56*10** uint256(25), 34*10** uint256(25), 2*10** uint256(26)];\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) public whenNotPaused {\n        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    function minutestotal() public onlyOwner \n    {\n       if (now > startTime + 3 days&& founderAmounts[0]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[0]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[0]);\n        founderAmounts[0]=0;\n        emit  Transfer(0, msg.sender, founderAmounts[0]);\n\n       }\n       if (now > startTime + 6 days&& founderAmounts[1]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[1]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[1]);\n        founderAmounts[1]=0;\n        emit Transfer(0, msg.sender, founderAmounts[1]);\n\n       }\n        if (now > startTime + 9 days&& founderAmounts[2]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[2]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[2]);\n        founderAmounts[2]=0;\n        emit Transfer(0, msg.sender, founderAmounts[2]);\n       }\n\n        if (now > startTime + 12 days&& founderAmounts[3]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[3]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[3]);\n        founderAmounts[3]=0;\n        emit  Transfer(0, msg.sender, founderAmounts[3]);\n       }\n        if (now > startTime + 15 days&& founderAmounts[4]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[4]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[4]);\n        founderAmounts[4]=0;\n        emit Transfer(0, msg.sender, founderAmounts[4]);\n       }\n        if (now > startTime + 18 days&& founderAmounts[5]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[5]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[5]);\n        founderAmounts[5]=0;\n        emit  Transfer(0, msg.sender, founderAmounts[5]);\n       }\n        if (now > startTime + 21 days&& founderAmounts[6]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[6]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[6]);\n        founderAmounts[6]=0;\n        emit  Transfer(0, msg.sender, founderAmounts[6]);\n       }\n         if (now > startTime + 24 days&& founderAmounts[7]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[7]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[7]);\n        founderAmounts[7]=0;\n        emit  Transfer(0, msg.sender, founderAmounts[7]);\n       }\n        if (now > startTime + 27 days&& founderAmounts[8]>0)\n       {\n        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[8]);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[8]);\n        founderAmounts[8]=0;\n        emit  Transfer(0, msg.sender, founderAmounts[8]);\n       }\n    }\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value) public whenNotPaused  returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit  Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\n        if (_to == 0x0) revert();                                // Prevent transfer to 0x0 address. \n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n\n\tfunction freeze(uint256 _value) public whenNotPaused returns (bool success) {\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n        emit  Freeze(msg.sender, _value);\n        return true;\n    }\n\n\tfunction unfreeze(uint256 _value) public whenNotPaused returns (bool success) {\n        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\t\t    balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n        emit Unfreeze(msg.sender, _value);\n        return true;\n    }\n\n\n}",
  "bytecode": "608060405260008060146101000a81548160ff0219169083151502179055503480156200002b57600080fd5b506040516200287d3803806200287d83398101806040528101908080519060200190929190805182019291906020018051906020019092919080518201929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836004819055508260019080519060200190620001119291906200022d565b5080600290805190602001906200012a9291906200022d565b5081600360006101000a81548160ff021916908360ff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600681905550610120604051908101604052806019600a0a6101ab0281526020016019600a0a6101300281526020016019600a0a60d90281526020016019600a0a609a0281526020016019600a0a600b0281526020016019600a0a604e0281526020016019600a0a60380281526020016019600a0a6022028152602001601a600a0a600202815250600790600962000222929190620002b4565b505050505062000321565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027057805160ff1916838001178555620002a1565b82800160010185558215620002a1579182015b82811115620002a057825182559160200191906001019062000283565b5b509050620002b09190620002f9565b5090565b8260098101928215620002e6579160200282015b82811115620002e5578251825591602001919060010190620002c8565b5b509050620002f59190620002f9565b5090565b6200031e91905b808211156200031a57600081600090555060010162000300565b5090565b90565b61254c80620003316000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b257806318160ddd1461021757806323b872dd14610242578063313ce567146102c75780633f4ba83a146102f857806341c0e1b51461030f5780635c975abb146103265780636623fc461461035557806370a082311461039a57806378e97925146103f15780638456cb591461041c5780638da5cb5b1461043357806395d89b411461048a578063a9059cbb1461051a578063cd4217c114610567578063d5b3b317146105be578063d7a78db8146105d5578063dd62ed3e1461061a578063f2fde38b14610691578063fff83edf146106d4575b600080fd5b34801561012e57600080fd5b50610137610715565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017757808201518184015260208101905061015c565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101be57600080fd5b506101fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107b3565b604051808215151515815260200191505060405180910390f35b34801561022357600080fd5b5061022c6108c0565b6040518082815260200191505060405180910390f35b34801561024e57600080fd5b506102ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108c6565b604051808215151515815260200191505060405180910390f35b3480156102d357600080fd5b506102dc610cf7565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030457600080fd5b5061030d610d0a565b005b34801561031b57600080fd5b50610324610dc8565b005b34801561033257600080fd5b5061033b610e59565b604051808215151515815260200191505060405180910390f35b34801561036157600080fd5b5061038060048036038101908080359060200190929190505050610e6c565b604051808215151515815260200191505060405180910390f35b3480156103a657600080fd5b506103db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611044565b6040518082815260200191505060405180910390f35b3480156103fd57600080fd5b5061040661105c565b6040518082815260200191505060405180910390f35b34801561042857600080fd5b50610431611062565b005b34801561043f57600080fd5b50610448611122565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049657600080fd5b5061049f611148565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104df5780820151818401526020810190506104c4565b50505050905090810190601f16801561050c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052657600080fd5b50610565600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111e6565b005b34801561057357600080fd5b506105a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611480565b6040518082815260200191505060405180910390f35b3480156105ca57600080fd5b506105d3611498565b005b3480156105e157600080fd5b506106006004803603810190808035906020019092919050505061217d565b604051808215151515815260200191505060405180910390f35b34801561062657600080fd5b5061067b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612355565b6040518082815260200191505060405180910390f35b34801561069d57600080fd5b506106d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061237a565b005b3480156106e057600080fd5b506106ff600480360381019080803590602001909291905050506124cf565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107ab5780601f10610780576101008083540402835291602001916107ab565b820191906000526020600020905b81548152906001019060200180831161078e57829003601f168201915b505050505081565b60008060149054906101000a900460ff161515156107d057600080fd5b81601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b60008060149054906101000a900460ff161515156108e357600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141561090757600080fd5b81601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561095357600080fd5b601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156109e057600080fd5b601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610a6957600080fd5b610ab2601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836124e9565b601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b3e601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612502565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c07601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836124e9565b601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6557600080fd5b600060149054906101000a900460ff161515610d8057600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610e57576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b600060149054906101000a900460ff1681565b60008060149054906101000a900460ff16151515610e8957600080fd5b81601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610ed557600080fd5b610f1e601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836124e9565b601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610faa601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f836040518082815260200191505060405180910390a260019050919050565b60106020528060005260406000206000915090505481565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110bd57600080fd5b600060149054906101000a900460ff161515156110d957600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111de5780601f106111b3576101008083540402835291602001916111de565b820191906000526020600020905b8154815290600101906020018083116111c157829003601f168201915b505050505081565b600060149054906101000a900460ff1615151561120257600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16141561122657600080fd5b80601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561127257600080fd5b601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156112ff57600080fd5b611348601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826124e9565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113d4601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612502565b601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60116020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f357600080fd5b6203f480600654014211801561151a575060006007600060098110151561151657fe5b0154115b156116585761153c6004546007600060098110151561153557fe5b0154612502565b60048190555061159c601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546007600060098110151561159557fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760006009811015156115f157fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007600060098110151561164057fe5b01546040518082815260200191505060405180910390a35b6207e900600654014211801561167f575060006007600160098110151561167b57fe5b0154115b156117bd576116a16004546007600160098110151561169a57fe5b0154612502565b600481905550611701601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760016009811015156116fa57fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006007600160098110151561175657fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600760016009811015156117a557fe5b01546040518082815260200191505060405180910390a35b620bdd8060065401421180156117e457506000600760026009811015156117e057fe5b0154115b1561192257611806600454600760026009811015156117ff57fe5b0154612502565b600481905550611866601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546007600260098110151561185f57fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760026009811015156118bb57fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007600260098110151561190a57fe5b01546040518082815260200191505060405180910390a35b620fd2006006540142118015611949575060006007600360098110151561194557fe5b0154115b15611a875761196b6004546007600360098110151561196457fe5b0154612502565b6004819055506119cb601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760036009811015156119c457fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060076003600981101515611a2057fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60076003600981101515611a6f57fe5b01546040518082815260200191505060405180910390a35b6213c6806006540142118015611aae5750600060076004600981101515611aaa57fe5b0154115b15611bec57611ad060045460076004600981101515611ac957fe5b0154612502565b600481905550611b30601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076004600981101515611b2957fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060076004600981101515611b8557fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60076004600981101515611bd457fe5b01546040518082815260200191505060405180910390a35b6217bb006006540142118015611c135750600060076005600981101515611c0f57fe5b0154115b15611d5157611c3560045460076005600981101515611c2e57fe5b0154612502565b600481905550611c95601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076005600981101515611c8e57fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060076005600981101515611cea57fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60076005600981101515611d3957fe5b01546040518082815260200191505060405180910390a35b621baf806006540142118015611d785750600060076006600981101515611d7457fe5b0154115b15611eb657611d9a60045460076006600981101515611d9357fe5b0154612502565b600481905550611dfa601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076006600981101515611df357fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060076006600981101515611e4f57fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60076006600981101515611e9e57fe5b01546040518082815260200191505060405180910390a35b621fa4006006540142118015611edc57506000600780600981101515611ed857fe5b0154115b1561201657611efd600454600780600981101515611ef657fe5b0154612502565b600481905550611f5c601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600780600981101515611f5557fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600780600981101515611fb057fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600780600981101515611ffe57fe5b01546040518082815260200191505060405180910390a35b62239880600654014211801561203d575060006007600860098110151561203957fe5b0154115b1561217b5761205f6004546007600860098110151561205857fe5b0154612502565b6004819055506120bf601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760086009811015156120b857fe5b0154612502565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006007600860098110151561211457fe5b01819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007600860098110151561216357fe5b01546040518082815260200191505060405180910390a35b565b60008060149054906101000a900460ff1615151561219a57600080fd5b81601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156121e657600080fd5b61222f601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836124e9565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122bb601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612502565b601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0836040518082815260200191505060405180910390a260019050919050565b6012602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123d557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561241157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6007816009811015156124de57fe5b016000915090505481565b60008282111515156124f757fe5b818303905092915050565b600080828401905083811015151561251657fe5b80915050929150505600a165627a7a72305820177d979c371da6fd120fc5402c7fe441d6d3a52e91c6baaa4107095065a5270a002900000000000000000000000000000000000000001363156bbee3016d700000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a72696368746573746b6b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026363000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000001363156bbee3016d700000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a72696368746573746b6b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026363000000000000000000000000000000000000000000000000000000000000"
}