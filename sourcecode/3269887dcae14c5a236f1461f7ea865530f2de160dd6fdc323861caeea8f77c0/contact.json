{
  "address": "0x155e5e7c77274ca7a1c58236326518cc948daad6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AFG",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-07\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract AFG is StandardToken{\n  string public name    = \"AFG Token\";\n  string public symbol  = \"AFG\";\n  uint8 public decimals = 18;\n  uint256 public constant INITIAL_SUPPLY = 1000000000;\n  event Burn(address indexed _from, uint256 _tokenDestroyed, uint256 _timestamp);\n\n  function AFG() public {\n    totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\n    balances[msg.sender] = totalSupply_;\n  }\n\n  function burn(uint256 _burntAmount) public returns (bool success) {\n    require(balances[msg.sender] >= _burntAmount && _burntAmount > 0);\n    balances[msg.sender] = balances[msg.sender].sub(_burntAmount);\n    totalSupply_ = totalSupply_.sub(_burntAmount);\n    emit Transfer(address(this), 0x0, _burntAmount);\n    emit Burn(msg.sender, _burntAmount, block.timestamp);\n    return true;\n  }\n}",
  "bytecode": "60c0604052600960808190527f41464720546f6b656e000000000000000000000000000000000000000000000060a090815261003e91600391906100c7565b506040805180820190915260038082527f41464700000000000000000000000000000000000000000000000000000000006020909201918252610083916004916100c7565b506005805460ff1916601217905534801561009d57600080fd5b5060055460ff16600a0a633b9aca0002600181905533600090815260208190526040902055610162565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010857805160ff1916838001178555610135565b82800160010185558215610135579182015b8281111561013557825182559160200191906001019061011a565b50610141929150610145565b5090565b61015f91905b80821115610141576000815560010161014b565b90565b6109c7806101716000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018b57806323b872dd146101b25780632ff2e9dc146101dc578063313ce567146101f157806342966c681461021c578063661884631461023457806370a082311461025857806395d89b4114610279578063a9059cbb1461028e578063d73dd623146102b2578063dd62ed3e146102d6575b600080fd5b3480156100d557600080fd5b506100de6102fd565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b50610177600160a060020a036004351660243561038b565b604080519115158252519081900360200190f35b34801561019757600080fd5b506101a06103f1565b60408051918252519081900360200190f35b3480156101be57600080fd5b50610177600160a060020a03600435811690602435166044356103f7565b3480156101e857600080fd5b506101a061056e565b3480156101fd57600080fd5b50610206610576565b6040805160ff9092168252519081900360200190f35b34801561022857600080fd5b5061017760043561057f565b34801561024057600080fd5b50610177600160a060020a0360043516602435610668565b34801561026457600080fd5b506101a0600160a060020a0360043516610758565b34801561028557600080fd5b506100de610773565b34801561029a57600080fd5b50610177600160a060020a03600435166024356107ce565b3480156102be57600080fd5b50610177600160a060020a03600435166024356108af565b3480156102e257600080fd5b506101a0600160a060020a0360043581169060243516610948565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103835780601f1061035857610100808354040283529160200191610383565b820191906000526020600020905b81548152906001019060200180831161036657829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561040e57600080fd5b600160a060020a03841660009081526020819052604090205482111561043357600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561046357600080fd5b600160a060020a03841660009081526020819052604090205461048c908363ffffffff61097316565b600160a060020a0380861660009081526020819052604080822093909355908516815220546104c1908363ffffffff61098516565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610503908363ffffffff61097316565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b633b9aca0081565b60055460ff1681565b33600090815260208190526040812054821180159061059e5750600082115b15156105a957600080fd5b336000908152602081905260409020546105c9908363ffffffff61097316565b336000908152602081905260409020556001546105ec908363ffffffff61097316565b60015560408051838152905160009130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a360408051838152426020820152815133927f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a928290030190a2506001919050565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156106bd57336000908152600260209081526040808320600160a060020a03881684529091528120556106f2565b6106cd818463ffffffff61097316565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103835780601f1061035857610100808354040283529160200191610383565b6000600160a060020a03831615156107e557600080fd5b3360009081526020819052604090205482111561080157600080fd5b33600090815260208190526040902054610821908363ffffffff61097316565b3360009081526020819052604080822092909255600160a060020a03851681522054610853908363ffffffff61098516565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546108e3908363ffffffff61098516565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561097f57fe5b50900390565b60008282018381101561099457fe5b93925050505600a165627a7a72305820197c1f85d4fde3f4cef8d54b1fe212623bdab73b0cf5d4cb3178756b5ea34b8c0029"
}