{
  "address": "0x02bc86b1f8fedf25e2b98cc8278ca8cde58cbad7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DrifeToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity 0.4.25;\n\n// ----------------------------------------------------------------------------\n// DRIFE token contract\n//\n// Symbol      : DRF\n// Name        : DRIFE Token\n// Total supply: 325000000\n// Decimals    : 18\n//\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// DRIFE ERC20 Token\n// ----------------------------------------------------------------------------\ncontract DrifeToken is ERC20Interface, SafeMath {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"DRF\";\n        name = \"DRIFE\";\n        decimals = 18;\n        _totalSupply = 325000000000000000000000000;\n        balances[msg.sender] = _totalSupply;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account tokenOwner\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to 'to' account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        require(to != address(0));\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        require(spender != address(0));\n        require(tokens <= balances[msg.sender]);\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer tokens  from the 'from' account to the 'to' account\n    // \n    // NOTE: The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the 'from' account and\n    // - 'From' account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        require(from != address(0));\n        require(to != address(0));        \n        require(tokens <= balances[from]);\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account. The spender contract function\n    // receiveApproval(...) is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        require(spender != address(0));\n        require(tokens <= balances[msg.sender]);\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Fallback function - Don't accept ETH, revert txn\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040805180820190915260038082527f44524600000000000000000000000000000000000000000000000000000000006020909201918252610055916000916100cf565b506040805180820190915260058082527f4452494645000000000000000000000000000000000000000000000000000000602090920191825261009a916001916100cf565b506002805460ff191660121790556b010cd56d4d8a29ad6500000060038190553360009081526004602052604090205561016a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011057805160ff191683800117855561013d565b8280016001018555821561013d579182015b8281111561013d578251825591602001919060010190610122565b5061014992915061014d565b5090565b61016791905b808211156101495760008155600101610153565b90565b610a50806101796000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de57806327e235e314610208578063313ce567146102295780633eaaf86b146102545780635c6581651461026957806370a082311461029057806395d89b41146102b1578063a293d1e8146102c6578063a9059cbb146102e1578063b5931f7c14610305578063cae9ca5114610320578063d05c78da14610389578063dd62ed3e146103a4578063e6cb9013146103cb575b600080fd5b34801561010157600080fd5b5061010a6103e6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a0360043516602435610473565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc61050e565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a0360043581169060243516604435610540565b34801561021457600080fd5b506101cc600160a060020a036004351661068a565b34801561023557600080fd5b5061023e61069c565b6040805160ff9092168252519081900360200190f35b34801561026057600080fd5b506101cc6106a5565b34801561027557600080fd5b506101cc600160a060020a03600435811690602435166106ab565b34801561029c57600080fd5b506101cc600160a060020a03600435166106c8565b3480156102bd57600080fd5b5061010a6106e3565b3480156102d257600080fd5b506101cc60043560243561073e565b3480156102ed57600080fd5b506101a3600160a060020a0360043516602435610753565b34801561031157600080fd5b506101cc60043560243561080e565b34801561032c57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a3948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061082f9650505050505050565b34801561039557600080fd5b506101cc6004356024356109c4565b3480156103b057600080fd5b506101cc600160a060020a03600435811690602435166109e9565b3480156103d757600080fd5b506101cc600435602435610a14565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561046b5780601f106104405761010080835404028352916020019161046b565b820191906000526020600020905b81548152906001019060200180831161044e57829003601f168201915b505050505081565b6000600160a060020a038316151561048a57600080fd5b336000908152600460205260409020548211156104a657600080fd5b336000818152600560209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b6000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec546003540390565b6000600160a060020a038416151561055757600080fd5b600160a060020a038316151561056c57600080fd5b600160a060020a03841660009081526004602052604090205482111561059157600080fd5b600160a060020a0384166000908152600460205260409020546105b4908361073e565b600160a060020a03851660009081526004602090815260408083209390935560058152828220338352905220546105eb908361073e565b600160a060020a0380861660009081526005602090815260408083203384528252808320949094559186168152600490915220546106299083610a14565b600160a060020a0380851660008181526004602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60046020526000908152604090205481565b60025460ff1681565b60035481565b600560209081526000928352604080842090915290825290205481565b600160a060020a031660009081526004602052604090205490565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561046b5780601f106104405761010080835404028352916020019161046b565b60008282111561074d57600080fd5b50900390565b6000600160a060020a038316151561076a57600080fd5b33600090815260046020526040902054610784908361073e565b3360009081526004602052604080822092909255600160a060020a038516815220546107b09083610a14565b600160a060020a0384166000818152600460209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600080821161081c57600080fd5b818381151561082757fe5b049392505050565b6000600160a060020a038416151561084657600080fd5b3360009081526004602052604090205483111561086257600080fd5b336000818152600560209081526040808320600160a060020a03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b8381101561095357818101518382015260200161093b565b50505050905090810190601f1680156109805780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156109a257600080fd5b505af11580156109b6573d6000803e3d6000fd5b506001979650505050505050565b8181028215806109de57508183828115156109db57fe5b04145b151561050857600080fd5b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b8181018281101561050857600080fd00a165627a7a72305820bb70daf51cc89adc8b4e4c2948d1fafee723707e14cc6734218161699f59c4450029"
}