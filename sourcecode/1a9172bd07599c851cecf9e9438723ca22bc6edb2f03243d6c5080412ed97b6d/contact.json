{
  "address": "0xcb5bdded57c7e560fcea2cf8f6c14a3267b89909",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MAUToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-08\n*/\n\npragma solidity ^0.4.19;\n\n/*\nThis is MAUCOIN the Official Cryptocurrency of MU Crypto.\nMade during a very boring evening by @Hoytico\n\n(\\(\\\n( – -)\n((‘) (’)\n\nJoin us on Telegram https://t.me/joinchat/Hg3PmBMGZ7Wrt6jJD77D5Q\n*/\n\ncontract MAUToken {\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    event Burn(address indexed from, uint256 value);\n    \n    string public constant symbol = \"MAU\";\n    string public constant name = \"Maucoin\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 88888888000000000000000000;\n    uint256 _totalBurned = 0;\n     \n    address public owner;\n  \n    mapping(address => uint256) balances;\n  \n    mapping(address => mapping (address => uint256)) allowed;\n  \n    modifier onlyOwner() \n     {\n         if (msg.sender != owner) \n         {\n             throw;\n         }\n         _;\n     }\n  \n     function MAUToken() \n     {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n     }\n  \n     function totalSupply() constant returns (uint256 l_totalSupply) \n     {\n        l_totalSupply = _totalSupply;\n     }\n\n     function totalBurned() constant returns (uint256 l_totalBurned)\n     {\n        l_totalBurned = _totalBurned;\n     }\n  \n     function balanceOf(address _owner) constant returns (uint256 balance) \n     {\n        return balances[_owner];\n     }\n  \n     function transfer(address _to, uint256 _amount) returns (bool success) \n     {\n        if (_to == 0x0) throw;\n\n        if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n        {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n         } \n         else \n         {\n            return false;\n         }\n     }\n\n     function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) \n     {\n        if (_to == 0x0) throw;\n\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n        {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n         } \n         else \n         {\n            return false;\n         }\n     }\n  \n     function approve(address _spender, uint256 _amount) returns (bool success) \n     {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n     }\n  \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) \n     {\n        return allowed[_owner][_spender];\n     }\n\n    function burn(uint256 _value) returns (bool success) \n    {\n        if (balances[msg.sender] < _value) throw;\n        balances[msg.sender] -= _value;\n        _totalSupply -= _value;          \n        _totalBurned += _value;                             \n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) returns (bool success) \n    {\n        if (balances[_from] < _value) throw;\n        if (_value > allowed[_from][msg.sender]) throw;\n        balances[_from] -= _value;\n        _totalSupply -= _value;                           \n        _totalBurned += _value;\n        Burn(_from, _value);\n        return true;\n    }\n }",
  "bytecode": "60606040526a4986f44622f73835e000006000556000600155341561002357600080fd5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460036000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fc2806100db6000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015857806318160ddd146101b257806323b872dd146101db578063313ce5671461025457806342966c681461028357806370a08231146102be57806379cc67901461030b5780638da5cb5b1461036557806395d89b41146103ba578063a9059cbb14610448578063d89135cd146104a2578063dd62ed3e146104cb575b600080fd5b34156100d557600080fd5b6100dd610537565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011d578082015181840152602081019050610102565b50505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016357600080fd5b610198600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610570565b604051808215151515815260200191505060405180910390f35b34156101bd57600080fd5b6101c5610662565b6040518082815260200191505060405180910390f35b34156101e657600080fd5b61023a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061066b565b604051808215151515815260200191505060405180910390f35b341561025f57600080fd5b610267610995565b604051808260ff1660ff16815260200191505060405180910390f35b341561028e57600080fd5b6102a4600480803590602001909190505061099a565b604051808215151515815260200191505060405180910390f35b34156102c957600080fd5b6102f5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610aab565b6040518082815260200191505060405180910390f35b341561031657600080fd5b61034b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610af4565b604051808215151515815260200191505060405180910390f35b341561037057600080fd5b610378610c8f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103c557600080fd5b6103cd610cb5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561040d5780820151818401526020810190506103f2565b50505050905090810190601f16801561043a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045357600080fd5b610488600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cee565b604051808215151515815260200191505060405180910390f35b34156104ad57600080fd5b6104b5610f05565b6040518082815260200191505060405180910390f35b34156104d657600080fd5b610521600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f0f565b6040518082815260200191505060405180910390f35b6040805190810160405280600781526020017f4d6175636f696e0000000000000000000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b6000808373ffffffffffffffffffffffffffffffffffffffff16141561069057600080fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561075b575081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156107675750600082115b80156107f25750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156109895781600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061098e565b600090505b9392505050565b601281565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109e857600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808282540392505081905550816001600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b4257600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610bcb57600080fd5b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808282540392505081905550816001600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f4d4155000000000000000000000000000000000000000000000000000000000081525081565b6000808373ffffffffffffffffffffffffffffffffffffffff161415610d1357600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610d625750600082115b8015610ded5750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610efa5781600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610eff565b600090505b92915050565b6000600154905090565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a723058206f6ab63b7d77490199ccc0b37025efff2eb67b013dd6b8edd4e886e6f18252cd0029"
}