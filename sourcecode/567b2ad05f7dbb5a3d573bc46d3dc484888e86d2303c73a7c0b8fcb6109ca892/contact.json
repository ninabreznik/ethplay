{
  "address": "0xafa67d306a7273c35c0e37322b5a8e959b09b207",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitGramToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.22;\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint256 _value) public returns (bool);\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n// ------------------------------\n// ERC Token Standard #223 Interface\n// https://github.com/Dexaran/ERC223-token-standard/token/ERC223/ERC223_interface.sol\n// ----------------------------------------------------------------------------\ncontract ERC223Interface {\n    uint public totalSupply;\n    function transfer(address to, uint value, bytes data) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n/**\n * @title Owned\n * @dev To verify ownership\n */\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n}\n/**\n * As part of the ERC223 standard we need to call the fallback of the token\n */\ncontract ContractReceiver {\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n        /* tkn variable is analogue of msg variable of Ether transaction\n        *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n        *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n        *  tkn.data is data of token transaction   (analogue of msg.data)\n        *  tkn.sig is 4 bytes signature of function\n        *  if data of token transaction is a function execution\n        */\n    }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract TimeVaultInterface is ERC20Interface, ERC223Interface {\n    function timeVault(address who) public constant returns (uint);\n    function getNow() public constant returns (uint);\n    function transferByOwner(address to, uint _value, uint timevault) public returns (bool);\n}\n/**\n * All meta information for the Token must be defined here so that it can be accessed from both sides of proxy\n */\ncontract BitGramTokenType {\n    uint public decimals;\n    uint public totalSupply;\n\n    mapping(address => uint) balances;\n\n    mapping(address => uint) timevault;\n    mapping(address => mapping(address => uint)) allowed;\n\n    // Token release switch\n    bool public released;\n\n    // The date before the release must be finalized (a unix timestamp)\n    uint public globalTimeVault;\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n}\n\ncontract ERC20Token is ERC20Interface, ERC223Interface, BitGramTokenType {\n    using SafeMath for uint;\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        bytes memory empty;\n        return transfer(_to, _value, empty);\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data, false);\n        }\n        else {\n            return transferToAddress(_to, _value, _data, false);\n        }\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     */\n    function approve(address _spender, uint _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly\n        {\n        //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n\n    //function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data, bool withAllowance) private returns (bool success) {\n        transferIfRequirementsMet(msg.sender, _to, _value, withAllowance);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    //function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data, bool withAllowance) private returns (bool success) {\n        transferIfRequirementsMet(msg.sender, _to, _value, withAllowance);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    // Function to verify that all the requirements to transfer are satisfied\n    // The destination is not the null address\n    // The tokens have been released for sale\n    // The sender's tokens are not locked in a timevault\n    function checkTransferRequirements(address _to, uint _value) private view {\n        require(_to != address(0));\n        require(released == true);\n        require(now > globalTimeVault);\n        if (timevault[msg.sender] != 0)\n        {\n            require(now > timevault[msg.sender]);\n        }\n        require(balanceOf(msg.sender) >= _value);\n    }\n\n    // Do the transfer if the requirements are met\n    function transferIfRequirementsMet(address _from, address _to, uint _value, bool withAllowances) private {\n        checkTransferRequirements(_to, _value);\n        if ( withAllowances)\n        {\n            require (_value <= allowed[_from][msg.sender]);\n        }\n        balances[_from] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n    }\n\n    // Transfer from one address to another taking into account ERC223 condition to verify that the to address is a contract or not\n    function transferFrom(address from, address to, uint value) public returns (bool) {\n        bytes memory empty;\n        if (isContract(to)) {\n            return transferToContract(to, value, empty, true);\n        }\n        else {\n            return transferToAddress(to, value, empty, true);\n        }\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        return true;\n    }\n}\ncontract TimeVaultToken is  owned, TimeVaultInterface, ERC20Token {\n\n    function transferByOwner(address to, uint value, uint earliestReTransferTime) onlyOwner public returns (bool) {\n        transfer(to, value);\n        timevault[to] = earliestReTransferTime;\n        return true;\n    }\n\n    function timeVault(address owner) public constant returns (uint earliestTransferTime) {\n        return timevault[owner];\n    }\n\n    function getNow() public constant returns (uint blockchainTimeNow) {\n        return now;\n    }\n\n}\ncontract StandardToken is TimeVaultToken {\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\ncontract StandardTokenExt is StandardToken {\n\n    /* Interface declaration */\n    function isToken() public pure returns (bool weAre) {\n        return true;\n    }\n}\ncontract OwnershipTransferrable is TimeVaultToken {\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        transferByOwner(newOwner, balanceOf(newOwner), 0);\n        owner = newOwner;\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n\n}\ncontract VersionedToken is owned {\n    address public upgradableContractAddress;\n\n    /**\n     * Constructor:\n     *  initialVersion - the address of the initial version of the implementation for the contract\n     *\n     * Note that this implementation must be visible to the relay contact even though it will not be a subclass\n     * do this by importing the main contract that implements it.  If the code is not visible it will not\n     * always be accessible through the delegatecall() function.  And even if it is, it will take an unlimited amount\n     * of gas to process the call.\n     *\n     * In our case this it is BitGramTokenImpl.sol\n     * e.g.\n     *    import \"BitGramToken.sol\"\n     *\n     * Please note: IMPORTANT\n     * do not implement any function called \"update()\" otherwise it will break the Versioning system\n     */\n    constructor(address initialImplementation) public {\n        upgradableContractAddress = initialImplementation;\n    }\n\n    /**\n     * update\n     * Call to upgrade the implementation version of this constract\n     *  newVersion: this is the address of the new implementation for the contract\n     */\n\n    function upgradeToken(address newImplementation) onlyOwner public {\n        upgradableContractAddress = newImplementation;\n    }\n\n    /**\n     * This is the fallback function that is called whenever a contract is called but can't find the called function.\n     * In this case we delegate the call to the implementing contract BitGramTokenImpl\n     *\n     * Instead of using delegatecall() in Solidity we use the assembly because it allows us to return values to the caller\n     */\n    function() public {\n        address upgradableContractMem = upgradableContractAddress;\n        bytes memory functionCall = msg.data;\n\n        assembly {\n        // Load the first 32 bytes of the functionCall bytes array which represents the size of the bytes array\n            let functionCallSize := mload(functionCall)\n\n        // Calculate functionCallDataAddress which starts at the second 32 byte block in the functionCall bytes array\n            let functionCallDataAddress := add(functionCall, 0x20)\n\n        // delegatecall(gasAllowed, callAddress, inMemAddress, inSizeBytes, outMemAddress, outSizeBytes) returns/pushes to stack (1 on success, 0 on failure)\n            let functionCallResult := delegatecall(gas, upgradableContractMem, functionCallDataAddress, functionCallSize, 0, 0)\n\n            let freeMemAddress := mload(0x40)\n\n            switch functionCallResult\n            case 0 {\n            // revert(fromMemAddress, sizeInBytes) ends execution and returns value\n                revert(freeMemAddress, 0)\n            }\n            default {\n            // returndatacopy(toMemAddress, fromMemAddress, sizeInBytes)\n                returndatacopy(freeMemAddress, 0x0, returndatasize)\n            // return(fromMemAddress, sizeInBytes)\n                return (freeMemAddress, returndatasize)\n            }\n        }\n    }\n}\ncontract BitGramToken is VersionedToken, BitGramTokenType {\n    string public name;\n    string public symbol;\n\n    constructor(address _tokenOwner, string _tokenName, string _tokenSymbol, uint _totalSupply, uint _decimals, uint _globalTimeVaultOpeningTime, address _initialImplementation) VersionedToken(_initialImplementation)  public {\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10 ** uint(decimals);\n        // Allocate initial balance to the owner\n        balances[_tokenOwner] = totalSupply;\n        emit Transfer(address(0), owner, totalSupply);\n        globalTimeVault = _globalTimeVaultOpeningTime;\n        released = false;\n\n    }\n}\ncontract BitGramTokenImpl is StandardTokenExt {\n    /** Name and symbol were updated. */\n    event UpdatedTokenInformation(string newName, string newSymbol);\n\n    string public name;\n    string public symbol;\n     bool private adminReturnStatus ;\n\n    /**\n     * One way function to perform the final token release.\n     */\n    function releaseTokenTransfer(bool _value) onlyOwner public {\n        released = _value;\n    }\n\n    function setGlobalTimeVault(uint _globalTimeVaultOpeningTime) onlyOwner public {\n        globalTimeVault = _globalTimeVaultOpeningTime;\n    }\n     function admin(string functionName, string p1, string p2, string p3) onlyOwner public returns (bool result) {\n        // Use parameters to remove warning\n        adminReturnStatus = (bytes(functionName).length + bytes(p1).length + bytes(p2).length + bytes(p3).length) != 0;\n\n        return adminReturnStatus ;\n    }\n    /**\n     * Owner can update token information here.\n     *\n     * It is often useful to conceal the actual token association, until\n     * the token operations, like central issuance or reissuance have been completed.\n     * In this case the initial token can be supplied with empty name and symbol information.\n     *\n     * This function allows the token owner to rename the token after the operations\n     * have been completed and then point the audience to use the token contract.\n     */\n    function setTokenInformation(string _tokenName, string _tokenSymbol) onlyOwner public {\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        emit UpdatedTokenInformation(name, symbol);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405161094e38038061094e8339810180604052810190808051906020019092919080518201929190602001805182019291906020018051906020019092919080519060200190929190805190602001909291908051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050856009908051906020019061010b929190610235565b5084600a9080519060200190610122929190610235565b5082600281905550600254600a0a8402600381905550600354600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6003546040518082815260200191505060405180910390a3816008819055506000600760006101000a81548160ff021916908315150217905550505050505050506102da565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061027657805160ff19168380011785556102a4565b828001600101855582156102a4579182015b828111156102a3578251825591602001919060010190610288565b5b5090506102b191906102b5565b5090565b6102d791905b808211156102d35760008160009055506001016102bb565b5090565b90565b610665806102e96000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d57806318160ddd146101bd578063313ce567146101e85780636aede5cd146102135780636ee31a181461023e5780638da5cb5b1461028157806395d89b41146102d85780639613252114610368578063a842f0f214610397575b3480156100a557600080fd5b5060006060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000368080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505090508051602082016000808383875af46040518160008114610128573d6000833e3d82f35b600082fd5b34801561013957600080fd5b506101426103ee565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610182578082015181840152602081019050610167565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c957600080fd5b506101d261048c565b6040518082815260200191505060405180910390f35b3480156101f457600080fd5b506101fd610492565b6040518082815260200191505060405180910390f35b34801561021f57600080fd5b50610228610498565b6040518082815260200191505060405180910390f35b34801561024a57600080fd5b5061027f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061049e565b005b34801561028d57600080fd5b5061029661053d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e457600080fd5b506102ed610562565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032d578082015181840152602081019050610312565b50505050905090810190601f16801561035a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037457600080fd5b5061037d610600565b604051808215151515815260200191505060405180910390f35b3480156103a357600080fd5b506103ac610613565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104845780601f1061045957610100808354040283529160200191610484565b820191906000526020600020905b81548152906001019060200180831161046757829003601f168201915b505050505081565b60035481565b60025481565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104f957600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105f85780601f106105cd576101008083540402835291602001916105f8565b820191906000526020600020905b8154815290600101906020018083116105db57829003601f168201915b505050505081565b600760009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820ab4c2a861840ef7f454fa532e960deec05263de9613d35a9a6dfbf6e74252b390029000000000000000000000000e318219ceff2b338e7cd74b5dd4af435ad48e20700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d7e0b8ab609a23e9e9ebcbc990976008f6aee5000000000000000000000000000000000000000000000000000000000000000c4269746772616d20436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034247430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000e318219ceff2b338e7cd74b5dd4af435ad48e20700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d7e0b8ab609a23e9e9ebcbc990976008f6aee5000000000000000000000000000000000000000000000000000000000000000c4269746772616d20436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034247430000000000000000000000000000000000000000000000000000000000"
}