{
  "address": "0x0980f403d58032e945a269a42955339f52624484",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bounty0xEscrow",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-08\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n /**\n * @title Contract that will work with ERC223 tokens.\n */\n\ncontract ERC223ReceivingContract {\n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenFallback(address _from, uint _value, bytes _data);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n\ncontract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable {\n\n    using SafeMath for uint256;\n\n    mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n\n    event Deposit(address indexed token, address indexed user, uint amount, uint balance);\n    event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount);\n\n\n    constructor() public {\n    }\n\n    // for erc223 tokens\n    function tokenFallback(address _from, uint _value, bytes _data) public whenNotPaused {\n        address _token = msg.sender;\n\n        tokens[_token][_from] = SafeMath.add(tokens[_token][_from], _value);\n        emit Deposit(_token, _from, _value, tokens[_token][_from]);\n    }\n\n    // for erc20 tokens\n    function depositToken(address _token, uint _amount) public whenNotPaused {\n        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n        require(_token != address(0));\n\n        require(ERC20(_token).transferFrom(msg.sender, this, _amount));\n        tokens[_token][msg.sender] = SafeMath.add(tokens[_token][msg.sender], _amount);\n\n        emit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n    }\n\n    // for ether\n    function depositEther() public payable whenNotPaused {\n        tokens[address(0)][msg.sender] = SafeMath.add(tokens[address(0)][msg.sender], msg.value);\n        emit Deposit(address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n    }\n\n\n    function distributeTokenToAddress(address _token, address _host, address _hunter, uint256 _amount) external onlyOwner {\n        require(_hunter != address(0));\n        require(tokens[_token][_host] >= _amount);\n\n        tokens[_token][_host] = SafeMath.sub(tokens[_token][_host], _amount);\n\n        if (_token == address(0)) {\n            require(_hunter.send(_amount));\n        } else {\n            require(ERC20(_token).transfer(_hunter, _amount));\n        }\n\n        emit Distribution(_token, _host, _hunter, _amount);\n    }\n\n    function distributeTokenToAddressesAndAmounts(address _token, address _host, address[] _hunters, uint256[] _amounts) external onlyOwner {\n        require(_host != address(0));\n        require(_hunters.length == _amounts.length);\n\n        uint256 totalAmount = 0;\n        for (uint j = 0; j < _amounts.length; j++) {\n            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\n        }\n        require(tokens[_token][_host] >= totalAmount);\n        tokens[_token][_host] = SafeMath.sub(tokens[_token][_host], totalAmount);\n\n        if (_token == address(0)) {\n            for (uint i = 0; i < _hunters.length; i++) {\n                require(_hunters[i].send(_amounts[i]));\n                emit Distribution(_token, _host, _hunters[i], _amounts[i]);\n            }\n        } else {\n            for (uint k = 0; k < _hunters.length; k++) {\n                require(ERC20(_token).transfer(_hunters[k], _amounts[k]));\n                emit Distribution(_token, _host, _hunters[k], _amounts[k]);\n            }\n        }\n    }\n\n    function distributeTokenToAddressesAndAmountsWithoutHost(address _token, address[] _hunters, uint256[] _amounts) external onlyOwner {\n        require(_hunters.length == _amounts.length);\n\n        uint256 totalAmount = 0;\n        for (uint j = 0; j < _amounts.length; j++) {\n            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\n        }\n\n        if (_token == address(0)) {\n            require(address(this).balance >= totalAmount);\n            for (uint i = 0; i < _hunters.length; i++) {\n                require(_hunters[i].send(_amounts[i]));\n                emit Distribution(_token, this, _hunters[i], _amounts[i]);\n            }\n        } else {\n            require(ERC20(_token).balanceOf(this) >= totalAmount);\n            for (uint k = 0; k < _hunters.length; k++) {\n                require(ERC20(_token).transfer(_hunters[k], _amounts[k]));\n                emit Distribution(_token, this, _hunters[k], _amounts[k]);\n            }\n        }\n    }\n\n    function distributeWithTransferFrom(address _token, address _ownerOfTokens, address[] _hunters, uint256[] _amounts) external onlyOwner {\n        require(_token != address(0));\n        require(_hunters.length == _amounts.length);\n\n        uint256 totalAmount = 0;\n        for (uint j = 0; j < _amounts.length; j++) {\n            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\n        }\n        require(ERC20(_token).allowance(_ownerOfTokens, this) >= totalAmount);\n\n        for (uint i = 0; i < _hunters.length; i++) {\n            require(ERC20(_token).transferFrom(_ownerOfTokens, _hunters[i], _amounts[i]));\n\n            emit Distribution(_token, this, _hunters[i], _amounts[i]);\n        }\n    }\n\n    // in case of emergency\n    function approveToPullOutTokens(address _token, address _receiver, uint256 _amount) external onlyOwner {\n        ERC20(_token).approve(_receiver, _amount);\n    }\n\n}",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b5060008054600160a060020a0319163317905561149a806100426000396000f3006080604052600436106100c15763ffffffff60e060020a6000350416632b44e5be81146100c6578063338b5dea146100f85780633f4ba83a1461011c578063508493bc146101315780635c975abb1461016a5780635f4402c514610193578063715018a6146101d45780638456cb59146101e95780638da5cb5b146101fe57806398ea5fca1461022f578063b0885dd614610237578063b425bd4314610278578063bd837b2b146102b1578063c0ee0b8a146102db578063f2fde38b14610344575b600080fd5b3480156100d257600080fd5b506100f6600160a060020a0360043581169060243581169060443516606435610365565b005b34801561010457600080fd5b506100f6600160a060020a036004351660243561053d565b34801561012857600080fd5b506100f66106a2565b34801561013d57600080fd5b50610158600160a060020a0360043581169060243516610718565b60408051918252519081900360200190f35b34801561017657600080fd5b5061017f610735565b604080519115158252519081900360200190f35b34801561019f57600080fd5b506100f6600160a060020a03600480358216916024803590911691604435808301929082013591606435918201910135610745565b3480156101e057600080fd5b506100f6610a9e565b3480156101f557600080fd5b506100f6610b0a565b34801561020a57600080fd5b50610213610b85565b60408051600160a060020a039092168252519081900360200190f35b6100f6610b94565b34801561024357600080fd5b506100f6600160a060020a03600480358216916024803590911691604435808301929082013591606435918201910135610c57565b34801561028457600080fd5b506100f660048035600160a060020a03169060248035808201929081013591604435908101910135610ed8565b3480156102bd57600080fd5b506100f6600160a060020a0360043581169060243516604435611229565b3480156102e757600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526100f6948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506112d49650505050505050565b34801561035057600080fd5b506100f6600160a060020a0360043516611389565b600054600160a060020a0316331461037c57600080fd5b600160a060020a038216151561039157600080fd5b600160a060020a038085166000908152600160209081526040808320938716835292905220548111156103c357600080fd5b600160a060020a038085166000908152600160209081526040808320938716835292905220546103f390826113ac565b600160a060020a03808616600081815260016020908152604080832094891683529390529190912091909155151561045a57604051600160a060020a0383169082156108fc029083906000818181858888f19350505050151561045557600080fd5b6104f4565b83600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156104bd57600080fd5b505af11580156104d1573d6000803e3d6000fd5b505050506040513d60208110156104e757600080fd5b505115156104f457600080fd5b81600160a060020a031683600160a060020a031685600160a060020a031660008051602061144f833981519152846040518082815260200191505060405180910390a450505050565b60005460a060020a900460ff161561055457600080fd5b600160a060020a038216151561056957600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390529051600160a060020a038416916323b872dd9160648083019260209291908290030181600087803b1580156105d757600080fd5b505af11580156105eb573d6000803e3d6000fd5b505050506040513d602081101561060157600080fd5b5051151561060e57600080fd5b600160a060020a038216600090815260016020908152604080832033845290915290205461063c90826113be565b600160a060020a03831660008181526001602090815260408083203380855290835292819020859055805186815291820194909452835191937fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d792918290030190a35050565b600054600160a060020a031633146106b957600080fd5b60005460a060020a900460ff1615156106d157600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b600160209081526000928352604080842090915290825290205481565b60005460a060020a900460ff1681565b60008054819081908190600160a060020a0316331461076357600080fd5b600160a060020a038916151561077857600080fd5b86851461078457600080fd5b60009350600092505b848310156107be576107b1848787868181106107a557fe5b905060200201356113be565b935060019092019161078d565b600160a060020a03808b166000908152600160209081526040808320938d16835292905220548411156107f057600080fd5b600160a060020a03808b166000908152600160209081526040808320938d168352929052205461082090856113ac565b600160a060020a03808c166000818152600160209081526040808320948f1683529390529190912091909155151561094357600091505b8682101561093e5787878381811061086b57fe5b90506020020135600160a060020a0316600160a060020a03166108fc878785818110151561089557fe5b905060200201359081150290604051600060405180830381858888f1935050505015156108c157600080fd5b8787838181106108cd57fe5b90506020020135600160a060020a0316600160a060020a031689600160a060020a03168b600160a060020a031660008051602061144f833981519152898987818110151561091757fe5b905060200201356040518082815260200191505060405180910390a4600190910190610857565b610a92565b5060005b86811015610a9257600160a060020a038a1663a9059cbb89898481811061096a57fe5b90506020020135600160a060020a0316888885818110151561098857fe5b905060200201356040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156109e157600080fd5b505af11580156109f5573d6000803e3d6000fd5b505050506040513d6020811015610a0b57600080fd5b50511515610a1857600080fd5b878782818110610a2457fe5b90506020020135600160a060020a0316600160a060020a031689600160a060020a03168b600160a060020a031660008051602061144f8339815191528989868181101515610a6e57fe5b905060200201356040518082815260200191505060405180910390a4600101610947565b50505050505050505050565b600054600160a060020a03163314610ab557600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610b2157600080fd5b60005460a060020a900460ff1615610b3857600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b60005460a060020a900460ff1615610bab57600080fd5b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb496020526040902054610be490346113be565b3360008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602090815260408083208590558051348152918201949094528351929391927fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7929181900390910190a3565b6000805481908190600160a060020a03163314610c7357600080fd5b600160a060020a0389161515610c8857600080fd5b858414610c9457600080fd5b60009250600091505b83821015610cc257610cb5838686858181106107a557fe5b9250600190910190610c9d565b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038a81166004830152306024830152915185928c169163dd62ed3e9160448083019260209291908290030181600087803b158015610d2d57600080fd5b505af1158015610d41573d6000803e3d6000fd5b505050506040513d6020811015610d5757600080fd5b50511015610d6457600080fd5b5060005b85811015610ecd57600160a060020a0389166323b872dd89898985818110610d8c57fe5b90506020020135600160a060020a03168888868181101515610daa57fe5b905060200201356040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050602060405180830381600087803b158015610e1c57600080fd5b505af1158015610e30573d6000803e3d6000fd5b505050506040513d6020811015610e4657600080fd5b50511515610e5357600080fd5b868682818110610e5f57fe5b90506020020135600160a060020a0316600160a060020a031630600160a060020a03168a600160a060020a031660008051602061144f8339815191528888868181101515610ea957fe5b905060200201356040518082815260200191505060405180910390a4600101610d68565b505050505050505050565b60008054819081908190600160a060020a03163314610ef657600080fd5b868514610f0257600080fd5b60009350600092505b84831015610f3057610f23848787868181106107a557fe5b9350600190920191610f0b565b600160a060020a038916151561103f573031841115610f4e57600080fd5b600091505b8682101561103a57878783818110610f6757fe5b90506020020135600160a060020a0316600160a060020a03166108fc8787858181101515610f9157fe5b905060200201359081150290604051600060405180830381858888f193505050501515610fbd57600080fd5b878783818110610fc957fe5b90506020020135600160a060020a0316600160a060020a031630600160a060020a03168a600160a060020a031660008051602061144f833981519152898987818110151561101357fe5b905060200201356040518082815260200191505060405180910390a4600190910190610f53565b610ecd565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518591600160a060020a038c16916370a08231916024808201926020929091908290030181600087803b1580156110a357600080fd5b505af11580156110b7573d6000803e3d6000fd5b505050506040513d60208110156110cd57600080fd5b505110156110da57600080fd5b5060005b86811015610ecd57600160a060020a03891663a9059cbb89898481811061110157fe5b90506020020135600160a060020a0316888885818110151561111f57fe5b905060200201356040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561117857600080fd5b505af115801561118c573d6000803e3d6000fd5b505050506040513d60208110156111a257600080fd5b505115156111af57600080fd5b8787828181106111bb57fe5b90506020020135600160a060020a0316600160a060020a031630600160a060020a03168a600160a060020a031660008051602061144f833981519152898986818110151561120557fe5b905060200201356040518082815260200191505060405180910390a46001016110de565b600054600160a060020a0316331461124057600080fd5b82600160a060020a031663095ea7b383836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050506040513d60208110156112cd57600080fd5b5050505050565b6000805460a060020a900460ff16156112ec57600080fd5b50336000818152600160209081526040808320600160a060020a038816845290915290205461131b90846113be565b600160a060020a038281166000818152600160209081526040808320948a16808452948252918290208590558151888152908101949094528051929391927fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79281900390910190a350505050565b600054600160a060020a031633146113a057600080fd5b6113a9816113d1565b50565b6000828211156113b857fe5b50900390565b818101828110156113cb57fe5b92915050565b600160a060020a03811615156113e657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600bfec203a269774f1426f43ebb0f700c39a12194a6a7bec8afd165c9179cbe7dda165627a7a7230582075cddbafbfcc5ac612928f3055e4f5b86c8527692ee4eebada021048ac1e15be0029"
}