{
  "address": "0x11a267697b777cf0353af94fdce71e1904317f9e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Support",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity ^0.4.24;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor(\n\t\tuint256 initialSupply,\n\t\tstring tokenName,\n\t\tstring tokenSymbol\n\t) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != 0x0);\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\t\tpublic\n\t\treturns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\ncontract developed {\n\taddress public developer;\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor() public {\n\t\tdeveloper = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks only developer address is calling\n\t */\n\tmodifier onlyDeveloper {\n\t\trequire(msg.sender == developer);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows developer to switch developer address\n\t * @param _developer The new developer address to be set\n\t */\n\tfunction changeDeveloper(address _developer) public onlyDeveloper {\n\t\tdeveloper = _developer;\n\t}\n\n\t/**\n\t * @dev Allows developer to withdraw ERC20 Token\n\t */\n\tfunction withdrawToken(address tokenContractAddress) public onlyDeveloper {\n\t\tTokenERC20 _token = TokenERC20(tokenContractAddress);\n\t\tif (_token.balanceOf(this) > 0) {\n\t\t\t_token.transfer(developer, _token.balanceOf(this));\n\t\t}\n\t}\n}\n\n/**\n * @title Support\n */\ncontract Support is developed {\n\t/**\n\t * @dev Game variables\n\t */\n\tbool public paused;\n\tuint256 public ticketCount;\n\n\tstruct Ticket {\n\t\tuint256 ticketId;\n\t\taddress ticketCreator;\n\t\tstring txHashId;\n\t\tstring title;\n\t\tstring description;\n\t\tbool inInvestigation;\n\t\tstring solution;\n\t\tbool isClosed;\n\t}\n\n\tmapping (uint256 => Ticket) public tickets;\n\tmapping (address => bool) private investigators;\n\n\t/**\n\t * @dev Log when user submits a ticket\n\t */\n\tevent LogTicket(uint indexed ticketId, address indexed ticketCreator, string txHashId, string title, string description);\n\n\t/**\n\t * @dev Log current ticket investigation status\n\t */\n\tevent LogInvestigation(uint indexed ticketId, address indexed ticketCreator, string txHashId, string title, bool inInvestigation);\n\n\t/**\n\t * @dev Log when ticket is closed\n\t */\n\tevent LogCloseTicket(uint indexed ticketId, address indexed ticketCreator, string txHashId, string title);\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor() public {\n\t\tinvestigators[msg.sender] = true;\n\t}\n\n\t/**\n\t * @dev Checks if investigator address is calling\n\t */\n\tmodifier onlyInvestigator(address account) {\n\t\trequire(investigators[account] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks contract is active\n\t */\n\tmodifier supportIsActive {\n\t\trequire(paused == false);\n\t\t_;\n\t}\n\n\t/******************************************/\n\t/*       DEVELOPER ONLY METHODS           */\n\t/******************************************/\n\n\t/**\n\t * @dev Allows developer to add/remove investigator\n\t * @param account The account address to be added/removed\n\t * @param canInvestigate The permission to investigate\n\t */\n\tfunction devSetInvestigator(address account, bool canInvestigate) public onlyDeveloper {\n\t\tinvestigators[account] = canInvestigate;\n\t}\n\n\t/**\n\t * @dev Allows developer to check whether an address is an investigator\n\t * @param account The account address to be checked\n\t * @return True if account is an investigator\n\t */\n\tfunction devGetInvestigator(address account) public onlyDeveloper constant returns (bool) {\n\t\treturn investigators[account];\n\t}\n\n\t/**\n\t * @dev Allows developer to pause the contract\n\t * @param _paused The paused value to be set\n\t */\n\tfunction devPauseSupport(bool _paused) public onlyDeveloper {\n\t\tpaused = _paused;\n\t}\n\n\t/******************************************/\n\t/*       INVESTIGATOR ONLY METHODS        */\n\t/******************************************/\n\n\t/**\n\t * @dev Allows investigator to set investigation status\n\t * @param ticketId The ticket ID to be set\n\t * @param inInvestigation The status to be set\n\t * @return Return true if success\n\t */\n\tfunction setInvestigate(uint ticketId, bool inInvestigation) public\n\t\tonlyInvestigator(msg.sender)\n\t\tsupportIsActive\n\t\treturns (bool) {\n\t\tTicket storage _ticket = tickets[ticketId];\n\t\trequire(_ticket.isClosed == false);\n\t\t_ticket.inInvestigation = inInvestigation;\n\t\temit LogInvestigation(_ticket.ticketId, _ticket.ticketCreator, _ticket.txHashId, _ticket.title, _ticket.inInvestigation);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows investigator to close the ticket\n\t * @param ticketId The ticket ID to be closed\n\t * @param solution The explanation of solution to the ticket in question\n\t */\n\tfunction closeTicket(uint ticketId, string solution) public\n\t\tonlyInvestigator(msg.sender)\n\t\tsupportIsActive\n\t\treturns (bool) {\n\t\tTicket storage _ticket = tickets[ticketId];\n\t\trequire(_ticket.isClosed == false);\n\t\t_ticket.solution = solution;\n\t\t_ticket.inInvestigation = false;\n\t\t_ticket.isClosed = true;\n\t\temit LogCloseTicket(ticketId, _ticket.ticketCreator, _ticket.txHashId, _ticket.title);\n\t\treturn true;\n\t}\n\n\t/******************************************/\n\t/*             PUBLIC METHODS             */\n\t/******************************************/\n\n\t/**\n\t * @dev Creates a ticket\n\t * @param txHashId The transaction hash ID of the problem\n\t * @param title The title of the problem\n\t * @param description The description of the problem\n\t * @return True if success\n\t */\n\tfunction create(string txHashId, string title, string description) public supportIsActive returns (bool) {\n\t\tticketCount++;\n\t\tTicket storage _ticket = tickets[ticketCount];\n\t\t_ticket.ticketId = ticketCount;\n\t\t_ticket.ticketCreator = msg.sender;\n\t\t_ticket.txHashId = txHashId;\n\t\t_ticket.title = title;\n\t\t_ticket.description = description;\n\t\t_ticket.inInvestigation = false;\n\t\t_ticket.isClosed = false;\n\t\temit LogTicket(_ticket.ticketId, _ticket.ticketCreator, _ticket.txHashId, _ticket.title, _ticket.description);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Cancels existing ticket\n\t * @param ticketId The ticketId to be cancelled\n\t * @return True if success\n\t */\n\tfunction cancelTicket(uint ticketId) public supportIsActive returns (bool) {\n\t\tTicket storage _ticket = tickets[ticketId];\n\t\trequire(_ticket.isClosed == false);\n\t\trequire(_ticket.ticketCreator == msg.sender);\n\t\t_ticket.inInvestigation = false;\n\t\t_ticket.isClosed = true;\n\t\temit LogCloseTicket(ticketId, _ticket.ticketCreator, _ticket.txHashId, _ticket.title);\n\t\treturn true;\n\t}\n}",
  "bytecode": ""
}