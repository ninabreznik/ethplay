{
  "address": "0xdde19c145c1ee51b48f7a28e8df125da0cc440be",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EmbiggenToken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-14\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract EmbiggenToken is ERC20 {\n  using SafeMath for uint256;\n\n  uint constant MAX_UINT = 2**256 - 1;\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  uint initialSupply;\n  uint initializedTime;\n  uint hourRate;\n\n  struct UserBalance {\n    uint latestBalance;\n    uint lastCalculated;\n  }\n\n  mapping(address => UserBalance) balances;\n  mapping(address => mapping(address => uint)) allowed;\n\n  // annualRate: percent * 10^18\n  function EmbiggenToken(uint _initialSupply, uint annualRate, string _name, string _symbol, uint8 _decimals) {\n    initialSupply = _initialSupply;\n    initializedTime = (block.timestamp / 3600) * 3600;\n    hourRate = annualRate / (365 * 24);\n    require(hourRate <= 223872113856833); // This ensures that (earnedInterset * baseInterest) won't overflow a uint for any plausible time period\n    balances[msg.sender] = UserBalance({\n      latestBalance: _initialSupply,\n      lastCalculated: (block.timestamp / 3600) * 3600\n    });\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n\n  function getInterest(uint value, uint lastCalculated) public view returns (uint) {\n    if(value == 0) {\n      // We were going to multiply by 0 at the end, so no point wasting gas on\n      // the other calculations.\n      return 0;\n    }\n    uint exp = (block.timestamp - lastCalculated) / 3600;\n    uint x = 1000000000000000000;\n    uint base = 1000000000000000000 + hourRate;\n    while(exp != 0) {\n      if(exp & 1 != 0){\n        x = (x * base) / 1000000000000000000;\n      }\n      exp = exp / 2;\n      base = (base * base) / 1000000000000000000;\n    }\n    return value.mul(x - 1000000000000000000) / 1000000000000000000;\n  }\n\n  function totalSupply() public view returns (uint) {\n    return initialSupply.add(getInterest(initialSupply, initializedTime));\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner].latestBalance.add(getInterest(balances[_owner].latestBalance, balances[_owner].lastCalculated));\n  }\n\n  function incBalance(address _owner, uint amount) private {\n    balances[_owner] = UserBalance({\n      latestBalance: balanceOf(_owner).add(amount),\n      lastCalculated: (block.timestamp / 3600) * 3600 // Round down to the last hour\n    });\n  }\n\n  function decBalance(address _owner, uint amount) private {\n    uint priorBalance = balanceOf(_owner);\n    require(priorBalance >= amount);\n    balances[_owner] = UserBalance({\n      latestBalance: priorBalance.sub(amount),\n      lastCalculated: (block.timestamp / 3600) * 3600 // Round down to the last hour\n    });\n  }\n\n  function transfer(address _to, uint _value) public returns (bool)  {\n    require(_to != address(0));\n    decBalance(msg.sender, _value);\n    incBalance(_to, _value);\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= allowed[_from][msg.sender]);\n\n    decBalance(_from, _value);\n    incBalance(_to, _value);\n\n    if(allowed[_from][msg.sender] < MAX_UINT) {\n      allowed[_from][msg.sender] -= _value;\n    }\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516109a63803806109a683398101604052808051919060200180519190602001805182019190602001805182019190602001805160038790559150610e1090504204610e10026004556122388404600581905565cb9c49d2514190111561007757600080fd5b6040805190810160405285815260208101610e104204610e1002905233600160a060020a031660009081526006602052604090208151815560208201516001909101555060008380516100ce929160200190610101565b5060018280516100e2929160200190610101565b506002805460ff191660ff929092169190911790555061019c92505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014257805160ff191683800117855561016f565b8280016001018555821561016f579182015b8281111561016f578251825591602001919060010190610154565b5061017b92915061017f565b5090565b61019991905b8082111561017b5760008155600101610185565b90565b6107fb806101ab6000396000f30060606040526004361061008a5763ffffffff60e060020a60003504166306fdde03811461008f578063095ea7b31461011957806318160ddd1461014f57806323b872dd14610174578063313ce5671461019c57806370a08231146101c5578063728af7ec146101e457806395d89b41146101fd578063a9059cbb14610210578063dd62ed3e14610232575b600080fd5b341561009a57600080fd5b6100a2610257565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100de5780820151838201526020016100c6565b50505050905090810190601f16801561010b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561012457600080fd5b61013b600160a060020a03600435166024356102f5565b604051901515815260200160405180910390f35b341561015a57600080fd5b610162610361565b60405190815260200160405180910390f35b341561017f57600080fd5b61013b600160a060020a0360043581169060243516604435610388565b34156101a757600080fd5b6101af610484565b60405160ff909116815260200160405180910390f35b34156101d057600080fd5b610162600160a060020a036004351661048d565b34156101ef57600080fd5b6101626004356024356104e5565b341561020857600080fd5b6100a2610587565b341561021b57600080fd5b61013b600160a060020a03600435166024356105f2565b341561023d57600080fd5b610162600160a060020a036004358116906024351661065b565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102ed5780601f106102c2576101008083540402835291602001916102ed565b820191906000526020600020905b8154815290600101906020018083116102d057829003601f168201915b505050505081565b600160a060020a03338116600081815260076020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60006103836103746003546004546104e5565b6003549063ffffffff61068616565b905090565b6000600160a060020a038316151561039f57600080fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220548211156103d257600080fd5b6103dc84836106a0565b6103e68383610712565b600160a060020a038085166000908152600760209081526040808320339094168352929052205460001990101561044557600160a060020a03808516600090815260076020908152604080832033909416835292905220805483900390555b82600160a060020a031684600160a060020a03166000805160206107b08339815191528460405190815260200160405180910390a35060019392505050565b60025460ff1681565b600160a060020a038116600090815260066020526040812080546001909101546104df916104ba916104e5565b600160a060020a0384166000908152600660205260409020549063ffffffff61068616565b92915050565b60008080808515156104fa576000935061057e565b5050600554610e1042859003049150670de0b6b3a76400009081015b821561054d57600183161561053557670de0b6b3a76400008282020491505b600290920491670de0b6b3a764000090800204610516565b670de0b6b3a764000061057187670de0b6b3a763ffff19850163ffffffff61077216565b81151561057a57fe5b0493505b50505092915050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102ed5780601f106102c2576101008083540402835291602001916102ed565b6000600160a060020a038316151561060957600080fd5b61061333836106a0565b61061d8383610712565b82600160a060020a031633600160a060020a03166000805160206107b08339815191528460405190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b60008282018381101561069557fe5b8091505b5092915050565b60006106ab8361048d565b9050818110156106ba57600080fd5b60408051908101604052806106d5838563ffffffff61079d16565b8152602001610e104204610e10029052600160a060020a038416600090815260066020526040902081518155602082015160019091015550505050565b60408051908101604052806107368361072a8661048d565b9063ffffffff61068616565b8152602001610e104204610e10029052600160a060020a0383166000908152600660205260409020815181556020820151600190910155505050565b6000808315156107855760009150610699565b5082820282848281151561079557fe5b041461069557fe5b6000828211156107a957fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058203d6efa7b5f4b6c77100abd66207608e11d8f41a365fe863bc98270d84ecc29ee00290000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000008456d62696767656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d42474e00000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000008456d62696767656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d42474e00000000000000000000000000000000000000000000000000000000"
}