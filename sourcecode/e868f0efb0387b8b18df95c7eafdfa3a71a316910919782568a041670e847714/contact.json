{
  "address": "0x3977a3ee2e7b4eaba817cf9dce6a4b9c22c891f8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MIBTokenSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-07\n*/\n\npragma solidity ^0.4.24;\n\ncontract DMIBLog {\n    event MIBLog(bytes4 indexed sig, address indexed sender, uint _value) anonymous;\n\n    modifier mlog {\n        emit MIBLog(msg.sig, msg.sender, msg.value);\n        _;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnerLog(address indexed previousOwner, address indexed newOwner, bytes4 sig);\n\n    constructor() public { \n        owner = msg.sender; \n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner  public {\n        require(newOwner != address(0));\n        emit OwnerLog(owner, newOwner, msg.sig);\n        owner = newOwner;\n    }\n}\n\ncontract MIBStop is Ownable, DMIBLog {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require (!stopped);\n        _;\n    }\n    function stop() onlyOwner mlog public {\n        stopped = true;\n    }\n    function start() onlyOwner mlog public {\n        stopped = false;\n    }\n}\n\nlibrary SafeMath {\n    \n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n          return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function approve(address spender, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n    \n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n        )\n    internal\n    {\n        require(token.transferFrom(from, to, value));\n    }\n}\n\n\ncontract MIBTokenSale is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n    \n    ERC20 mibtokenaddress;\n    \n    uint8 private nowvestingType = 0;\n    uint256 private minimum_wei = 1e18;         // 1eth\n    \n    uint256 private totalWeiEther;\n    \n    uint8 k;\n    \n    mapping(uint8 => uint) assignTokensperType ;\n    mapping(uint8 => uint) remainTokensperType ;\n    mapping(uint8 => uint) nowTokensperEth;\n    mapping(uint8 => uint) distributionTimes;\n\n    uint8 public iDistribution;\n    uint8 public iICO;\n\n    modifier canDistribute() {\n        require(iICO == 1);\n        require(iDistribution > 1);\n        _;\n    }\n    \n\n    enum InvestTypes { Angels, Pre_sales, Ico, Offices, Teams, Advisors, Stocks, MAX_InvestTypes }\n    \n    event TokenPurchase(address indexed _sender, address indexed _to, uint256 _value1, uint _value2, uint _value3);  \n    event MibTokenSend(address indexed _sender, address indexed _to, uint256 _value1, uint _value2, uint _value3);  \n    event MibSetLog(address indexed _sender, uint256 _value1, uint _value2, uint _value3);  \n\n    //vesting, sep, rate, start date, end date, start distribution date\n    constructor(\n            ERC20 _mibtokenaddress,\n            uint [] vesting,\n            uint8 [] sep,\n            uint [] rate\n        ) public {\n        \n            mibtokenaddress = ERC20(_mibtokenaddress);\n    \n            //proceed only ico\n            nowvestingType = uint8(InvestTypes.Ico);\n    \n            for(k=0; k<uint8(InvestTypes.MAX_InvestTypes); k++)\n            {\n                remainTokensperType[k] = remainTokensperType[k].add(vesting[k] * 1e18);\n                assignTokensperType[k] = assignTokensperType[k].add(vesting[k] * 1e18);\n                nowTokensperEth[k] = rate[k];\n                distributionTimes[k] = sep[k];\n            }     \n    \n            totalWeiEther = 0;\n        \n    }  \n    \n    function setVestingRate(uint256 _icorate) onlyOwner public {\n\n        nowTokensperEth[uint8(InvestTypes.Ico)] = _icorate;\n        \n        emit MibSetLog(msg.sender, 0, 0, _icorate);\n    }\n\n    function setVestingType(uint8 _type) onlyOwner public {\n        require(_type < uint8(InvestTypes.MAX_InvestTypes));\n        nowvestingType = _type;\n        //proceed only ico\n        nowvestingType = uint8(InvestTypes.Ico);\n        \n        emit MibSetLog(msg.sender, 0, 0, nowvestingType);\n        \n    }\n    \n    function startICO() onlyOwner public {\n        require(iDistribution < 1);\n        require(iICO < 1);\n        iICO = 2;\n    }\n\n    function stopICO() onlyOwner public {\n        require(iDistribution <= 1);\n        iICO = 1;\n    }\n    \n    function distributionStart() onlyOwner public {\n        require(iICO == 1);\n        iDistribution = 2;\n    }\n\n    function getDistributionStatus() onlyOwner public view returns(uint8) {\n        return iDistribution;\n    }\n    \n    function getNowVestingType() public view returns (uint8) {\n        return nowvestingType;\n    }\n    \n    function getassignTokensperType(uint8 _type) public view returns (uint) {\n        return assignTokensperType[_type];\n    }\n    \n    function getremainTokensperType(uint8 _type) public view returns (uint) {\n        return remainTokensperType[_type];\n    }\n\n    function getTotalWEIEther() onlyOwner public view returns (uint256) { \n        return totalWeiEther; \n    }\n\n    function () external payable {\n        \n        buyTokens(msg.sender, nowvestingType);\n    }\n    \n    function buyTokens(address _to, uint8 _type) public payable {\n        uint256 tokens;\n        \n        require(iICO > 1);\n\n        require(_type < uint8(InvestTypes.MAX_InvestTypes));\n        \n        tokens = _preValidatePurchase(_to, _type, msg.value);\n\n        processPurchase(_to, _type, tokens);\n        remainTokensperType[_type] = remainTokensperType[_type].sub(tokens);\n        \n        mibtokenaddress.safeTransfer(_to, tokens);\n        \n    }\n    \n    function _preValidatePurchase(\n        address _to,\n        uint8 _type,\n        uint256 _weiAmount\n        )\n    internal \n    view\n    returns (uint256)\n    {\n        uint256 tokens;\n        uint256 tmpTokens;\n        \n        require(_to != address(0));\n        require(_weiAmount >= minimum_wei);\n\n        tokens = nowTokensperEth[nowvestingType].mul(msg.value);\n        \n        tmpTokens = tokens.mul(20).div(100);\n        tokens = tokens.add(tmpTokens);\n        \n        require(tokens > 0);\n        \n        require(tokens <= remainTokensperType[_type]);\n        \n        return tokens;\n    }\n  \n    \n    function processPurchase(address _to, uint8 _type, uint256 _tokens) internal {\n\n        _forwardFunds();\n        totalWeiEther += msg.value;\n\n        emit TokenPurchase(owner, _to, _type, msg.value, _tokens);\n    }\n\n    function ownerSendTokens(address _to, uint8 _type, uint256 _weitokens) \n        public \n        canDistribute\n        onlyOwner\n        payable\n        returns (uint256)\n    {\n        uint256 remaintokens;\n        \n        remaintokens = remainTokensperType[_type];\n        \n        require(remaintokens >= _weitokens);\n        require(_type < uint8(InvestTypes.MAX_InvestTypes));\n        \n        mibtokenaddress.safeTransfer(_to, _weitokens);\n        remainTokensperType[_type] = remainTokensperType[_type].sub(_weitokens);\n        \n        emit MibTokenSend(msg.sender, _to, _type, _weitokens, remainTokensperType[_type]);\n        return (remainTokensperType[_type]);\n        \n    }\n    \n    function _forwardFunds() internal  {\n        owner.transfer(msg.value);\n    }\n\n}",
  "bytecode": "60806040526001805460a060020a60ff0219169055670de0b6b3a764000060025534801561002c57600080fd5b50604051610d62380380610d62833981016040908152815160208301519183015160608401516000805433600160a060020a03199182161790915560018054740200000000000000000000000000000000000000009216600160a060020a0386161760a060020a60ff0219169190911790556004805460ff1916905591939283019290810191015b600454600760ff909116101561023257600454835161011b91859160ff9091169081106100dd57fe5b602090810290910181015160045460ff166000908152600690925260409091205490670de0b6b3a764000002640100000000610a8961024182021704565b6004805460ff9081166000908152600660205260409020929092555484516101879286921690811061014957fe5b602090810290910181015160045460ff166000908152600590925260409091205490670de0b6b3a764000002640100000000610a8961024182021704565b6004805460ff9081166000908152600560205260409020929092555482518392919091169081106101b457fe5b60209081029091018101516004805460ff908116600090815260079094526040909320919091555483518492919091169081106101ed57fe5b60209081029091018101516004805460ff908116600090815260089094526040909320918316909155805480831660010190921660ff199092169190911790556100b4565b50506000600355506102549050565b8181018281101561024e57fe5b92915050565b610aff806102636000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308a47c3281146101105780631861cb281461012b5780632ef35214146101565780633816d4ee1461016e5780637ae9c856146101835780637bbc101b146101b05780637fa8c158146101c557806387a88c43146101da5780638c4ef31a146101ef5780638da5cb5b1461020a578063a1b140b61461023b578063c8e569a814610250578063cb6291cb14610265578063e9f4043f14610282578063ec9974eb1461029c578063f2fde38b146102b1575b60015461010e90339074010000000000000000000000000000000000000000900460ff166102d2565b005b34801561011c57600080fd5b5061010e60ff6004351661036d565b34801561013757600080fd5b5061014061043b565b6040805160ff9092168252519081900360200190f35b34801561016257600080fd5b5061010e60043561045c565b34801561017a57600080fd5b506101406104eb565b34801561018f57600080fd5b5061019e60ff600435166104f9565b60408051918252519081900360200190f35b3480156101bc57600080fd5b5061010e61050e565b3480156101d157600080fd5b5061010e61054c565b3480156101e657600080fd5b506101406105a0565b3480156101fb57600080fd5b5061019e60ff600435166105a9565b34801561021657600080fd5b5061021f6105be565b60408051600160a060020a039092168252519081900360200190f35b34801561024757600080fd5b506101406105cd565b34801561025c57600080fd5b5061010e6105ef565b61019e600160a060020a036004351660ff6024351660443561062c565b61010e600160a060020a036004351660ff602435166102d2565b3480156102a857600080fd5b5061019e610762565b3480156102bd57600080fd5b5061010e600160a060020a0360043516610781565b600954600090600161010090910460ff16116102ed57600080fd5b600760ff8316106102fd57600080fd5b610308838334610848565b9050610315838383610914565b60ff8216600090815260066020526040902054610338908263ffffffff61098116565b60ff831660009081526006602052604090205560015461036890600160a060020a0316848363ffffffff61099816565b505050565b600054600160a060020a0316331461038457600080fd5b600760ff82161061039457600080fd5b6001805460ff8381167401000000000000000000000000000000000000000090810274ff000000000000000000000000000000000000000019938416179092167402000000000000000000000000000000000000000017928390556040805160008082526020820152929093041681830152905133917f2f7da6818588613d4f9298fc7bae9185a479ceb90fb6cac8a1afce0407636d50916060918190039190910190a250565b60015474010000000000000000000000000000000000000000900460ff1690565b600054600160a060020a0316331461047357600080fd5b60026000908152600760209081527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d8390556040805183815291820192909252808201839052905133917f2f7da6818588613d4f9298fc7bae9185a479ceb90fb6cac8a1afce0407636d50919081900360600190a250565b600954610100900460ff1681565b60ff1660009081526005602052604090205490565b600054600160a060020a0316331461052557600080fd5b60095460ff6101009091041660011461053d57600080fd5b6009805460ff19166002179055565b600054600160a060020a0316331461056357600080fd5b600954600160ff9091161061057757600080fd5b600954600161010090910460ff161061058f57600080fd5b6009805461ff001916610200179055565b60095460ff1681565b60ff1660009081526006602052604090205490565b600054600160a060020a031681565b60008054600160a060020a031633146105e557600080fd5b5060095460ff1690565b600054600160a060020a0316331461060657600080fd5b600954600160ff909116111561061b57600080fd5b6009805461ff001916610100179055565b600954600090819060ff6101009091041660011461064957600080fd5b600954600160ff9091161161065d57600080fd5b600054600160a060020a0316331461067457600080fd5b5060ff83166000908152600660205260409020548281101561069557600080fd5b600760ff8516106106a557600080fd5b6001546106c290600160a060020a0316868563ffffffff61099816565b60ff84166000908152600660205260409020546106e5908463ffffffff61098116565b60ff851660008181526006602090815260409182902084905581519283528201869052818101929092529051600160a060020a0387169133917f9f124e186062762bcbf1c3003309a55ce0204bb5a6eaf35ba0c55ff27e8ed3a29181900360600190a350505060ff16600090815260066020526040902054919050565b60008054600160a060020a0316331461077a57600080fd5b5060035490565b600054600160a060020a0316331461079857600080fd5b600160a060020a03811615156107ad57600080fd5b60008054604080517fffffffff00000000000000000000000000000000000000000000000000000000933593909316835251600160a060020a03808516939216917f8cc3473d76f967279609ef0cfc0fd750b056bdc0d7c3969099c5f17c5699b3fe919081900360200190a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008080600160a060020a038616151561086157600080fd5b60025484101561087057600080fd5b60015474010000000000000000000000000000000000000000900460ff166000908152600760205260409020546108a79034610a4b565b91506108cb60646108bf84601463ffffffff610a4b16565b9063ffffffff610a7416565b90506108dd828263ffffffff610a8916565b9150600082116108ec57600080fd5b60ff851660009081526006602052604090205482111561090b57600080fd5b50949350505050565b61091c610a96565b60038054349081019091556000546040805160ff86168152602081019390935282810184905251600160a060020a03808716939216917efe0e12b43090c1fc19a34aefa5cc138a4eeafc60ab800f855c730b3fb9480e919081900360600190a3505050565b60008282111561098d57fe5b508082035b92915050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610a1457600080fd5b505af1158015610a28573d6000803e3d6000fd5b505050506040513d6020811015610a3e57600080fd5b5051151561036857600080fd5b6000821515610a5c57506000610992565b50818102818382811515610a6c57fe5b041461099257fe5b60008183811515610a8157fe5b049392505050565b8181018281101561099257fe5b60008054604051600160a060020a03909116913480156108fc02929091818181858888f19350505050158015610ad0573d6000803e3d6000fd5b505600a165627a7a7230582020c846309a8b2450b7c6d46e7b57bc540d4d6e1b0c088073400f7de6d3d1afe90029000000000000000000000000146d8d942048ad517479c9bab1788712af180fde00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000002160ec00000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000042c1d8000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000005a995c000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b0",
  "constructorArguments": "000000000000000000000000146d8d942048ad517479c9bab1788712af180fde00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000002160ec00000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000042c1d8000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000005a995c000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b0"
}