{
  "address": "0xd6aca5b766853f7879d153fdb7567be356dd46ec",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Exenium Token",
  "contractName": "ExeniumToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-16\n*/\n\npragma solidity ^0.4.18;\n\n/*\n*   Exenium Token (XNT)\n*   Created by Starlag Labs (www.starlag.com)\n*   Copyright Â© Exenium.io 2018. All rights reserved.\n*   https://www.exenium.io\n*/\n\nlibrary Math {\n    function mul(uint256 a, uint256 b) \n    internal \n    pure \n    returns (uint256) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) \n    internal \n    pure \n    returns (uint256) \n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) \n    internal \n    pure \n    returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) \n    internal \n    pure \n    returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Utils {\n    function Utils() public {}\n\n    modifier greaterThanZero(uint256 _value) \n    {\n        require(_value > 0);\n        _;\n    }\n\n    modifier validUint(uint256 _value) \n    {\n        require(_value >= 0);\n        _;\n    }\n\n    modifier validAddress(address _address) \n    {\n        require(_address != address(0));\n        _;\n    }\n\n    modifier notThis(address _address) \n    {\n        require(_address != address(this));\n        _;\n    }\n\n    modifier validAddressAndNotThis(address _address) \n    {\n        require(_address != address(0) && _address != address(this));\n        _;\n    }\n\n    modifier notEmpty(string _data)\n    {\n        require(bytes(_data).length > 0);\n        _;\n    }\n\n    modifier stringLength(string _data, uint256 _length)\n    {\n        require(bytes(_data).length == _length);\n        _;\n    }\n    \n    modifier validBytes32(bytes32 _bytes)\n    {\n        require(_bytes != 0);\n        _;\n    }\n\n    modifier validUint64(uint64 _value) \n    {\n        require(_value >= 0 && _value < 4294967296);\n        _;\n    }\n\n    modifier validUint8(uint8 _value) \n    {\n        require(_value >= 0 && _value < 256);\n        _;\n    }\n\n    modifier validBalanceThis(uint256 _value)\n    {\n        require(_value <= address(this).balance);\n        _;\n    }\n}\n\ncontract Authorizable is Utils {\n    using Math for uint256;\n\n    address public owner;\n    address public newOwner;\n    mapping (address => Level) authorizeds;\n    uint256 public authorizedCount;\n\n    /*  \n    *   ZERO 0 - bug for null object\n    *   OWNER 1\n    *   ADMIN 2\n    *   DAPP 3\n    */  \n    enum Level {ZERO,OWNER,ADMIN,DAPP}\n\n    event OwnerTransferred(address indexed _prevOwner, address indexed _newOwner);\n    event Authorized(address indexed _address, Level _level);\n    event UnAuthorized(address indexed _address);\n\n    function Authorizable() \n    public \n    {\n        owner = msg.sender;\n        authorizeds[msg.sender] = Level.OWNER;\n        authorizedCount = authorizedCount.add(1);\n    }\n\n    modifier onlyOwner {\n        require(authorizeds[msg.sender] == Level.OWNER);\n        _;\n    }\n\n    modifier onlyOwnerOrThis {\n        require(authorizeds[msg.sender] == Level.OWNER || msg.sender == address(this));\n        _;\n    }\n\n    modifier notOwner(address _address) {\n        require(authorizeds[_address] != Level.OWNER);\n        _;\n    }\n\n    modifier authLevel(Level _level) {\n        require((authorizeds[msg.sender] > Level.ZERO) && (authorizeds[msg.sender] <= _level));\n        _;\n    }\n\n    modifier authLevelOnly(Level _level) {\n        require(authorizeds[msg.sender] == _level);\n        _;\n    }\n    \n    modifier notSender(address _address) {\n        require(msg.sender != _address);\n        _;\n    }\n\n    modifier isSender(address _address) {\n        require(msg.sender == _address);\n        _;\n    }\n\n    modifier checkLevel(Level _level) {\n        require((_level > Level.ZERO) && (Level.DAPP >= _level));\n        _;\n    }\n\n    function transferOwnership(address _newOwner) \n    public \n    {\n        _transferOwnership(_newOwner);\n    }\n\n    function _transferOwnership(address _newOwner) \n    onlyOwner \n    validAddress(_newOwner)\n    notThis(_newOwner)\n    internal \n    {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() \n    validAddress(newOwner)\n    isSender(newOwner)\n    public \n    {\n        OwnerTransferred(owner, newOwner);\n        if (authorizeds[owner] == Level.OWNER) {\n            delete authorizeds[owner];\n        }\n        if (authorizeds[newOwner] > Level.ZERO) {\n            authorizedCount = authorizedCount.sub(1);\n        }\n        owner = newOwner;\n        newOwner = address(0);\n        authorizeds[owner] = Level.OWNER;\n    }\n\n    function cancelOwnership() \n    onlyOwner\n    public \n    {\n        newOwner = address(0);\n    }\n\n    function authorized(address _address, Level _level) \n    public  \n    {\n        _authorized(_address, _level);\n    }\n\n    function _authorized(address _address, Level _level) \n    onlyOwner\n    validAddress(_address)\n    notOwner(_address)\n    notThis(_address)\n    checkLevel(_level)\n    internal  \n    {\n        if (authorizeds[_address] == Level.ZERO) {\n            authorizedCount = authorizedCount.add(1);\n        }\n        authorizeds[_address] = _level;\n        Authorized(_address, _level);\n    }\n\n    function unAuthorized(address _address) \n    onlyOwner\n    validAddress(_address)\n    notOwner(_address)\n    notThis(_address)\n    public  \n    {\n        if (authorizeds[_address] > Level.ZERO) {\n            authorizedCount = authorizedCount.sub(1);\n        }\n        delete authorizeds[_address];\n        UnAuthorized(_address);\n    }\n\n    function isAuthorized(address _address) \n    validAddress(_address)\n    notThis(_address)\n    public \n    constant \n    returns (Level) \n    {\n        return authorizeds[_address];\n    }\n}\n\ncontract ITokenRecipient { function receiveApproval(address _spender, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract IERC20 {\n    function totalSupply() public constant returns (uint256);\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20Token is Authorizable, IERC20 {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 totalSupply_;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    modifier validBalance(uint256 _value)\n    {\n        require(_value <= balances[msg.sender]);\n        _;\n    }\n\n    modifier validBalanceFrom(address _from, uint256 _value)\n    {\n        require(_value <= balances[_from]);\n        _;\n    }\n\n    modifier validBalanceOverflows(address _to, uint256 _value)\n    {\n        require(balances[_to] <= balances[_to].add(_value));\n        _;\n    }\n\n    function ERC20Token() public {}\n\n    function totalSupply()\n    public \n    constant \n    returns (uint256) \n    {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value)\n    public\n    returns (bool success) \n    {\n        return _transfer(_to, _value);\n    }\n\n    function _transfer(address _to, uint256 _value)\n    validAddress(_to)\n    greaterThanZero(_value)\n    validBalance(_value)\n    validBalanceOverflows(_to, _value)\n    internal\n    returns (bool success) \n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)\n    public \n    returns (bool success) \n    {\n        return _transferFrom(_from, _to, _value);\n    }\n\n    function _transferFrom(address _from, address _to, uint256 _value)\n    validAddress(_to)\n    validAddress(_from)\n    greaterThanZero(_value)\n    validBalanceFrom(_from, _value)\n    validBalanceOverflows(_to, _value)\n    internal \n    returns (bool success) \n    {\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner)\n    validAddress(_owner)\n    public \n    constant \n    returns (uint256 balance) \n    {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) \n    public \n    returns (bool success) \n    {\n        return _approve(_spender, _value);\n    }\n\n    function _approve(address _spender, uint256 _value) \n    validAddress(_spender)\n    internal \n    returns (bool success) \n    {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)\n    validAddress(_owner)\n    validAddress(_spender)\n    public \n    constant \n    returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue)\n    validAddress(_spender)\n    greaterThanZero(_addedValue)\n    public \n    returns (bool success) \n    {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \n    validAddress(_spender)\n    greaterThanZero(_subtractedValue)\n    public\n    returns (bool success) \n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            delete allowed[msg.sender][_spender];\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract FrozenToken is ERC20Token, ITokenRecipient {\n    mapping (address => bool) frozeds;\n    uint256 public frozedCount;\n    bool public freezeEnabled = false;\n    bool public autoFreeze = false;\n    bool public mintFinished = false;\n\n    event Freeze(address indexed wallet);\n    event UnFreeze(address indexed wallet);\n    event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue);\n    event Mint(address indexed sender, address indexed wallet, uint256 amount);\n    event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData);\n    event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); \n    event Burn(address indexed sender, uint256 amount);\n    event MintFinished(address indexed spender);\n\n    modifier notFreeze\n    {\n        require(frozeds[msg.sender] == false || freezeEnabled == false);\n        _;\n    }\n\n    modifier notFreezeFrom(address _from) \n    {\n        require((_from != address(0) && frozeds[_from] == false) || freezeEnabled == false);\n        _;\n    }\n\n    modifier canMint\n    {\n        require(!mintFinished);\n        _;\n    }\n\n    function FrozenToken() public {}\n\n    function freeze(address _address) \n    authLevel(Level.DAPP)\n    validAddress(_address)\n    notThis(_address)\n    notOwner(_address)\n    public \n    {\n        if (!frozeds[_address]) {\n            frozeds[_address] = true;\n            frozedCount = frozedCount.add(1);\n            Freeze(_address);\n        }\n    }\n\n    function unFreeze(address _address) \n    authLevel(Level.DAPP)\n    validAddress(_address)\n    public \n    {\n        if (frozeds[_address]) {\n            delete frozeds[_address];\n            frozedCount = frozedCount.sub(1);\n            UnFreeze(_address);\n        }\n    }\n\n    function updFreezeEnabled(bool _freezeEnabled) \n    authLevel(Level.ADMIN)\n    public \n    {\n        PropsChanged(msg.sender, \"freezeEnabled\", freezeEnabled, _freezeEnabled);\n        freezeEnabled = _freezeEnabled;\n    }\n\n    function updAutoFreeze(bool _autoFreeze) \n    authLevel(Level.ADMIN)\n    public \n    {\n        PropsChanged(msg.sender, \"autoFreeze\", autoFreeze, _autoFreeze);\n        autoFreeze = _autoFreeze;\n    }\n\n    function isFreeze(address _address) \n    validAddress(_address)\n    public \n    constant \n    returns(bool) \n    {\n        return bool(frozeds[_address]);\n    }\n\n    function transfer(address _to, uint256 _value) \n    notFreeze\n    public \n    returns (bool) \n    {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) \n    notFreezeFrom(_from)\n    public \n    returns (bool) \n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) \n    notFreezeFrom(_spender)\n    public \n    returns (bool) \n    {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue)\n    notFreezeFrom(_spender)\n    public \n    returns (bool) \n    {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \n    notFreezeFrom(_spender)\n    public \n    returns (bool) \n    {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) \n    validAddress(_spender)\n    greaterThanZero(_value)\n    public \n    returns (bool success) \n    {\n        ITokenRecipient spender = ITokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            ApproveAndCall(_spender, _value, _extraData); \n            return true;\n        }\n    }\n\n    function receiveApproval(address _spender, uint256 _value, address _token, bytes _extraData)\n    validAddress(_spender)\n    validAddress(_token)\n    greaterThanZero(_value)\n    public \n    {\n        IERC20 token = IERC20(_token);\n        require(token.transferFrom(_spender, address(this), _value));\n        ReceiveTokens(_spender, _token, _value, _extraData);\n    }\n\n    function mintFinish() \n    onlyOwner\n    public \n    returns (bool success)\n    {\n        mintFinished = true;\n        MintFinished(msg.sender);\n        return true;\n    }\n\n    function mint(address _address, uint256 _value)\n    canMint\n    authLevel(Level.DAPP)\n    validAddress(_address)\n    greaterThanZero(_value)\n    public\n    returns (bool success) \n    {\n        balances[_address] = balances[_address].add(_value);\n        totalSupply_ = totalSupply_.add(_value);\n        Transfer(0, _address, _value);\n\n        if (freezeEnabled && autoFreeze && _address != address(this) && isAuthorized(_address) == Level.ZERO) {\n            if (!isFreeze(_address)) {\n                frozeds[_address] = true;\n                frozedCount = frozedCount.add(1);\n                Freeze(_address);\n            }\n        }\n\n        Mint(0, _address, _value);\n        return true;\n    }\n\n    function burn(uint256 _value)\n    greaterThanZero(_value)\n    validBalance(_value)\n    public\n    returns (bool) \n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        Transfer(msg.sender, address(0), _value);\n\n        if (isFreeze(msg.sender)) {\n            delete frozeds[msg.sender];\n            frozedCount = frozedCount.sub(1);\n            UnFreeze(msg.sender);\n        }\n\n        Burn(msg.sender, _value);\n        return true;\n    }\n}\n\ncontract ExeniumToken is FrozenToken {\n    string public name = \"Exenium Token\";\n    string public symbol = \"XNT\";\n    uint8 public decimals = 8;\n\n    string public version = \"0.1\";\n    string public publisher = \"https://www.exenium.io\";\n    string public description = \"This is an official Exenium Token (XNT)\";\n\n    bool public acceptAdminWithdraw = false;\n    bool public acceptDonate = true;\n\n    event InfoChanged(address indexed sender, string version, string publisher, string description);\n    event Withdraw(address indexed sender, address indexed wallet, uint256 amount);\n    event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount);\n    event Donate(address indexed sender, uint256 value);\n    event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue);\n\n    function ExeniumToken() public {}\n\n    function setupInfo(string _version, string _publisher, string _description)\n    authLevel(Level.ADMIN)\n    notEmpty(_version)\n    notEmpty(_publisher)\n    notEmpty(_description)\n    public\n    {\n        version = _version;\n        publisher = _publisher;\n        description = _description;\n        InfoChanged(msg.sender, _version, _publisher, _description);\n    }\n\n    function withdraw() \n    public \n    returns (bool success)\n    {\n        return withdrawAmount(address(this).balance);\n    }\n\n    function withdrawAmount(uint256 _amount) \n    authLevel(Level.ADMIN) \n    greaterThanZero(address(this).balance)\n    greaterThanZero(_amount)\n    validBalanceThis(_amount)\n    public \n    returns (bool success)\n    {\n        address wallet = owner;\n        if (acceptAdminWithdraw) {\n            wallet = msg.sender;\n        }\n\n        Withdraw(msg.sender, wallet, address(this).balance);\n        wallet.transfer(address(this).balance);\n        return true;\n    }\n\n    function withdrawTokens(address _token, uint256 _amount)\n    authLevel(Level.ADMIN)\n    validAddress(_token)\n    greaterThanZero(_amount)\n    public \n    returns (bool success) \n    {\n        address wallet = owner;\n        if (acceptAdminWithdraw) {\n            wallet = msg.sender;\n        }\n\n        bool result = IERC20(_token).transfer(wallet, _amount);\n        if (result) {\n            WithdrawTokens(msg.sender, wallet, _token, _amount);\n        }\n        return result;\n    }\n\n    function balanceToken(address _token)\n    validAddress(_token)\n    public \n    constant\n    returns (uint256 amount) \n    {\n        return IERC20(_token).balanceOf(address(this));\n    }\n\n    function updAcceptAdminWithdraw(bool _accept)\n    onlyOwner\n    public\n    returns (bool success)\n    {\n        PropsChanged(msg.sender, \"acceptAdminWithdraw\", acceptAdminWithdraw, _accept);\n        acceptAdminWithdraw = _accept;\n        return true;\n    }\n    \n    function () \n    external \n    payable \n    {\n        if (acceptDonate) {\n            donate();\n        }\n\t}\n\n    function donate() \n    greaterThanZero(msg.value)\n    internal \n    {\n        Donate(msg.sender, msg.value);\n    }\n\n    function updAcceptDonate(bool _accept)\n    authLevel(Level.ADMIN)\n    public\n    returns (bool success)\n    {\n        PropsChanged(msg.sender, \"acceptDonate\", acceptDonate, _accept);\n        acceptDonate = _accept;\n        return true;\n    }\n}",
  "bytecode": "606060409081526009805462ffffff191690558051908101604052600d81527f4578656e69756d20546f6b656e000000000000000000000000000000000000006020820152600a9080516200005992916020019062000245565b5060408051908101604052600381527f584e5400000000000000000000000000000000000000000000000000000000006020820152600b908051620000a392916020019062000245565b50600c805460ff1916600817905560408051908101604052600381527f302e3100000000000000000000000000000000000000000000000000000000006020820152600d908051620000fa92916020019062000245565b5060408051908101604052601681527f68747470733a2f2f7777772e6578656e69756d2e696f000000000000000000006020820152600e9080516200014492916020019062000245565b50606060405190810160405280602781526020017f5468697320697320616e206f6666696369616c204578656e69756d20546f6b6581526020017f6e2028584e542900000000000000000000000000000000000000000000000000815250600f908051620001b792916020019062000245565b506010805461ffff19166101001790553415620001d357600080fd5b60008054600160a060020a03191633600160a060020a031690811782558152600260205260409020805460ff1916600190811790915560035462000225916401000000006200265c6200022e82021704565b600355620002ea565b6000828201838110156200023e57fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028857805160ff1916838001178555620002b8565b82800160010185558215620002b8579182015b82811115620002b85782518255916020019190600101906200029b565b50620002c6929150620002ca565b5090565b620002e791905b80821115620002c65760008155600101620002d1565b90565b612fd280620002fa6000396000f3006060604052600436106102165763ffffffff60e060020a6000350416630459901281146102305780630562b9f71461026157806306b091f91461028b57806306fdde03146102ad578063095ea7b31461033757806313270bb81461035957806318160ddd1461036c57806323b872dd1461037f5780632bda04c5146103a7578063313ce567146103ba5780633ccfd60b146103e35780633e2fce37146103f657806340c10f191461040e57806342966c68146104305780634e2808da1461044657806354fd4d50146104595780635d82ddc81461046c578063661884631461047f57806370a08231146104a15780637284e416146104c057806375143ef2146104d357806379ba5097146104e6578063807a599c146104f957806383cfab421461050c57806383df7d211461052b5780638b5a17df146105435780638c72c54e146105565780638d1fdf2f146105695780638da5cb5b146105885780638e818aa1146105b75780638ef5ae21146105ca5780638f4ffcb11461069f57806395d89b411461070b5780639e060fb61461071e578063a9059cbb14610736578063bdc742fc14610758578063cae9ca5114610770578063d4ee1d90146107d5578063d73dd623146107e8578063dd62ed3e1461080a578063e1ad855d1461082f578063e41d09441461084e578063eef4c01614610861578063f2fde38b14610886578063fe9fbb80146108a5578063ff192bc8146108e8575b601054610100900460ff161561022e5761022e610907565b005b341561023b57600080fd5b61024f600160a060020a0360043516610955565b60405190815260200160405180910390f35b341561026c57600080fd5b6102776004356109e5565b604051901515815260200160405180910390f35b341561029657600080fd5b610277600160a060020a0360043516602435610b53565b34156102b857600080fd5b6102c0610cea565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102fc5780820151838201526020016102e4565b50505050905090810190601f1680156103295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034257600080fd5b610277600160a060020a0360043516602435610d88565b341561036457600080fd5b61024f610de7565b341561037757600080fd5b61024f610ded565b341561038a57600080fd5b610277600160a060020a0360043581169060243516604435610df4565b34156103b257600080fd5b610277610e55565b34156103c557600080fd5b6103cd610e63565b60405160ff909116815260200160405180910390f35b34156103ee57600080fd5b610277610e6c565b341561040157600080fd5b61022e6004351515610e86565b341561041957600080fd5b610277600160a060020a0360043516602435610f8f565b341561043b57600080fd5b6102776004356111ec565b341561045157600080fd5b61022e61136a565b341561046457600080fd5b6102c06113bc565b341561047757600080fd5b610277611427565b341561048a57600080fd5b610277600160a060020a0360043516602435611430565b34156104ac57600080fd5b61024f600160a060020a0360043516611487565b34156104cb57600080fd5b6102c06114bc565b34156104de57600080fd5b610277611527565b34156104f157600080fd5b61022e611536565b341561050457600080fd5b610277611695565b341561051757600080fd5b61022e600160a060020a0360043516611717565b341561053657600080fd5b61022e6004351515611835565b341561054e57600080fd5b61024f611932565b341561056157600080fd5b6102c0611938565b341561057457600080fd5b61022e600160a060020a03600435166119a3565b341561059357600080fd5b61059b611b1f565b604051600160a060020a03909116815260200160405180910390f35b34156105c257600080fd5b610277611b2e565b34156105d557600080fd5b61022e60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650611b3795505050505050565b34156106aa57600080fd5b61022e60048035600160a060020a0390811691602480359260443516919060849060643590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611d9495505050505050565b341561071657600080fd5b6102c0611f21565b341561072957600080fd5b6102776004351515611f8c565b341561074157600080fd5b610277600160a060020a036004351660243561204d565b341561076357600080fd5b6102776004351515612094565b341561077b57600080fd5b61027760048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506121a295505050505050565b34156107e057600080fd5b61059b61238e565b34156107f357600080fd5b610277600160a060020a036004351660243561239d565b341561081557600080fd5b61024f600160a060020a03600435811690602435166123f4565b341561083a57600080fd5b61022e600160a060020a0360043516612450565b341561085957600080fd5b610277612588565b341561086c57600080fd5b61022e600160a060020a036004351660ff60243516612596565b341561089157600080fd5b61022e600160a060020a03600435166125a4565b34156108b057600080fd5b6108c4600160a060020a03600435166125b0565b604051808260038111156108d457fe5b60ff16815260200191505060405180910390f35b34156108f357600080fd5b610277600160a060020a036004351661260b565b346000811161091557600080fd5b33600160a060020a03167f0553260a2e46b0577270d8992db02d30856ca880144c72d6e9503760946aef133460405190815260200160405180910390a250565b600081600160a060020a038116151561096d57600080fd5b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156109c457600080fd5b6102c65a03f115156109d557600080fd5b5050506040518051949350505050565b600080600281600160a060020a03331660009081526002602052604090205460ff166003811115610a1257fe5b118015610a505750806003811115610a2657fe5b600160a060020a03331660009081526002602052604090205460ff166003811115610a4d57fe5b11155b1515610a5b57600080fd5b600160a060020a0330163160008111610a7357600080fd5b8460008111610a8157600080fd5b85600160a060020a03301631811115610a9957600080fd5b600054601054600160a060020a03909116955060ff1615610ab8573394505b84600160a060020a031633600160a060020a03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb30600160a060020a03163160405190815260200160405180910390a384600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515610b4657600080fd5b5060019695505050505050565b60008080600281600160a060020a03331660009081526002602052604090205460ff166003811115610b8157fe5b118015610bbf5750806003811115610b9557fe5b600160a060020a03331660009081526002602052604090205460ff166003811115610bbc57fe5b11155b1515610bca57600080fd5b85600160a060020a0381161515610be057600080fd5b8560008111610bee57600080fd5b600054601054600160a060020a03909116955060ff1615610c0d573394505b87600160a060020a031663a9059cbb868960006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610c6a57600080fd5b6102c65a03f11515610c7b57600080fd5b50505060405180519450508315610cde5787600160a060020a031685600160a060020a031633600160a060020a03167fc9e8848e763791df46dee01dfdd8f0eb58cd33dd15e0773146866af844e8f09b8a60405190815260200160405180910390a45b50919695505050505050565b600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d805780601f10610d5557610100808354040283529160200191610d80565b820191906000526020600020905b815481529060010190602001808311610d6357829003601f168201915b505050505081565b600082600160a060020a03811615801590610dbc5750600160a060020a03811660009081526007602052604090205460ff16155b80610dca575060095460ff16155b1515610dd557600080fd5b610ddf8484612643565b949350505050565b60035481565b6006545b90565b600083600160a060020a03811615801590610e285750600160a060020a03811660009081526007602052604090205460ff16155b80610e36575060095460ff16155b1515610e4157600080fd5b610e4c85858561264f565b95945050505050565b600954610100900460ff1681565b600c5460ff1681565b6000610e8130600160a060020a0316316109e5565b905090565b60026000600160a060020a03331660009081526002602052604090205460ff166003811115610eb157fe5b118015610eef5750806003811115610ec557fe5b600160a060020a03331660009081526002602052604090205460ff166003811115610eec57fe5b11155b1515610efa57600080fd5b60095433600160a060020a031690600080516020612f6783398151915290610100900460ff1684604051911515602083015215156040808301919091526060808352600a908301527f6175746f467265657a6500000000000000000000000000000000000000000000608083015260a0909101905180910390a250600980549115156101000261ff0019909216919091179055565b60095460009062010000900460ff1615610fa857600080fd5b60036000600160a060020a03331660009081526002602052604090205460ff166003811115610fd357fe5b1180156110115750806003811115610fe757fe5b600160a060020a03331660009081526002602052604090205460ff16600381111561100e57fe5b11155b151561101c57600080fd5b83600160a060020a038116151561103257600080fd5b836000811161104057600080fd5b600160a060020a038616600090815260046020526040902054611069908663ffffffff61265c16565b600160a060020a038716600090815260046020526040902055600654611095908663ffffffff61265c16565b600655600160a060020a0386166000600080516020612f878339815191528760405190815260200160405180910390a360095460ff1680156110de5750600954610100900460ff165b80156110fc575030600160a060020a031686600160a060020a031614155b801561111b5750600061110e876125b0565b600381111561111957fe5b145b156111a1576111298661260b565b15156111a157600160a060020a0386166000908152600760205260409020805460ff191660019081179091556008546111679163ffffffff61265c16565b600855600160a060020a0386167faf85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc32304960405160405180910390a25b85600160a060020a031660007fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f88760405190815260200160405180910390a350600195945050505050565b6000818181116111fb57600080fd5b600160a060020a033316600090815260046020526040902054839081111561122257600080fd5b600160a060020a03331660009081526004602052604090205461124b908563ffffffff61266b16565b600160a060020a033316600090815260046020526040902055600654611277908563ffffffff61266b16565b600655600033600160a060020a0316600080516020612f878339815191528660405190815260200160405180910390a36112b03361260b565b1561132357600160a060020a0333166000908152600760205260409020805460ff191690556008546112e990600163ffffffff61266b16565b600855600160a060020a0333167f8a56897dfce8680cbcfd8a39fc9a77d55677650ea50712197f14b6fbc7e0677b60405160405180910390a25b33600160a060020a03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58560405190815260200160405180910390a25060019392505050565b6001600160a060020a03331660009081526002602052604090205460ff16600381111561139357fe5b1461139d57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b600d8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d805780601f10610d5557610100808354040283529160200191610d80565b60095460ff1681565b600082600160a060020a038116158015906114645750600160a060020a03811660009081526007602052604090205460ff16155b80611472575060095460ff16155b151561147d57600080fd5b610ddf848461267d565b600081600160a060020a038116151561149f57600080fd5b5050600160a060020a031660009081526004602052604090205490565b600f8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d805780601f10610d5557610100808354040283529160200191610d80565b60095462010000900460ff1681565b600154600160a060020a031680151561154e57600080fd5b600154600160a060020a03908116903316811461156a57600080fd5b600154600054600160a060020a0391821691167f8934ce4adea8d9ce0d714d2c22b86790e41b7731c84b926fbbdc1d40ff6533c960405160405180910390a3600160008054600160a060020a031681526002602052604090205460ff1660038111156115d257fe5b14156115f95760008054600160a060020a03168152600260205260409020805460ff191690555b600154600160a060020a031660009081526002602052604081205460ff16600381111561162257fe5b11156116405760035461163c90600163ffffffff61266b16565b6003555b6001805460008054600160a060020a0380841673ffffffffffffffffffffffffffffffffffffffff19928316178084559190931684559091168152600260205260409020805460ff1916828002179055505050565b60006001600160a060020a03331660009081526002602052604090205460ff1660038111156116c057fe5b146116ca57600080fd5b6009805462ff0000191662010000179055600160a060020a0333167f39b5ca6d4234a87b875f701a848e24d718e9f824d12099eec3c01762383b04ee60405160405180910390a250600190565b60036000600160a060020a03331660009081526002602052604090205460ff16600381111561174257fe5b118015611780575080600381111561175657fe5b600160a060020a03331660009081526002602052604090205460ff16600381111561177d57fe5b11155b151561178b57600080fd5b81600160a060020a03811615156117a157600080fd5b600160a060020a03831660009081526007602052604090205460ff161561183057600160a060020a0383166000908152600760205260409020805460ff191690556008546117f690600163ffffffff61266b16565b600855600160a060020a0383167f8a56897dfce8680cbcfd8a39fc9a77d55677650ea50712197f14b6fbc7e0677b60405160405180910390a25b505050565b60026000600160a060020a03331660009081526002602052604090205460ff16600381111561186057fe5b11801561189e575080600381111561187457fe5b600160a060020a03331660009081526002602052604090205460ff16600381111561189b57fe5b11155b15156118a957600080fd5b600954600160a060020a03331690600080516020612f678339815191529060ff1684604051911515602083015215156040808301919091526060808352600d908301527f667265657a65456e61626c656400000000000000000000000000000000000000608083015260a0909101905180910390a2506009805460ff1916911515919091179055565b60085481565b600e8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d805780601f10610d5557610100808354040283529160200191610d80565b60036000600160a060020a03331660009081526002602052604090205460ff1660038111156119ce57fe5b118015611a0c57508060038111156119e257fe5b600160a060020a03331660009081526002602052604090205460ff166003811115611a0957fe5b11155b1515611a1757600080fd5b81600160a060020a0381161515611a2d57600080fd5b8230600160a060020a031681600160a060020a031614151515611a4f57600080fd5b836001600160a060020a03821660009081526002602052604090205460ff166003811115611a7957fe5b1415611a8457600080fd5b600160a060020a03851660009081526007602052604090205460ff161515611b1857600160a060020a0385166000908152600760205260409020805460ff19166001908117909155600854611ade9163ffffffff61265c16565b600855600160a060020a0385167faf85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc32304960405160405180910390a25b5050505050565b600054600160a060020a031681565b60105460ff1681565b60026000600160a060020a03331660009081526002602052604090205460ff166003811115611b6257fe5b118015611ba05750806003811115611b7657fe5b600160a060020a03331660009081526002602052604090205460ff166003811115611b9d57fe5b11155b1515611bab57600080fd5b836000815111611bba57600080fd5b836000815111611bc957600080fd5b836000815111611bd857600080fd5b600d878051611beb929160200190612ece565b50600e868051611bff929160200190612ece565b50600f858051611c13929160200190612ece565b5033600160a060020a03167f661ac65f03704ae18172992749e864e6664203c36752b2f6aec840dec016c51a88888860405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015611c87578082015183820152602001611c6f565b50505050905090810190601f168015611cb45780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611cea578082015183820152602001611cd2565b50505050905090810190601f168015611d175780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015611d4d578082015183820152602001611d35565b50505050905090810190601f168015611d7a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a250505050505050565b600084600160a060020a0381161515611dac57600080fd5b83600160a060020a0381161515611dc257600080fd5b8560008111611dd057600080fd5b85935083600160a060020a03166323b872dd89308a60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515611e3d57600080fd5b6102c65a03f11515611e4e57600080fd5b505050604051805190501515611e6357600080fd5b85600160a060020a031688600160a060020a03167f92024e89146e4e864038c547cbb7ec2ec79b189856fa0dedc5aebd1bfb179376898860405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015611edc578082015183820152602001611ec4565b50505050905090810190601f168015611f095780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35050505050505050565b600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d805780601f10610d5557610100808354040283529160200191610d80565b60006001600160a060020a03331660009081526002602052604090205460ff166003811115611fb757fe5b14611fc157600080fd5b601054600160a060020a03331690600080516020612f678339815191529060ff16846040519115156020830152151560408083019190915260608083526013908301527f61636365707441646d696e576974686472617700000000000000000000000000608083015260a0909101905180910390a2506010805460ff1916911515919091179055600190565b600160a060020a03331660009081526007602052604081205460ff161580612078575060095460ff16155b151561208357600080fd5b61208d83836127a0565b9392505050565b6000600281600160a060020a03331660009081526002602052604090205460ff1660038111156120c057fe5b1180156120fe57508060038111156120d457fe5b600160a060020a03331660009081526002602052604090205460ff1660038111156120fb57fe5b11155b151561210957600080fd5b60105433600160a060020a031690600080516020612f6783398151915290610100900460ff1685604051911515602083015215156040808301919091526060808352600c908301527f616363657074446f6e6174650000000000000000000000000000000000000000608083015260a0909101905180910390a2601080548415156101000261ff00199091161790556001915050919050565b60008084600160a060020a03811615156121bb57600080fd5b84600081116121c957600080fd5b8692506121d68787610d88565b156123845782600160a060020a0316638f4ffcb1338830896040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561227357808201518382015260200161225b565b50505050905090810190601f1680156122a05780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156122c157600080fd5b6102c65a03f115156122d257600080fd5b50505086600160a060020a03167f4df88a0bc463d1105f5b5e7b0a2e83433ef2058a59573056c6d85ad20f69fc2b878760405182815260406020820181815290820183818151815260200191508051906020019080838360005b8381101561234457808201518382015260200161232c565b50505050905090810190601f1680156123715780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2600193505b5050509392505050565b600154600160a060020a031681565b600082600160a060020a038116158015906123d15750600160a060020a03811660009081526007602052604090205460ff16155b806123df575060095460ff16155b15156123ea57600080fd5b610ddf84846127ac565b600082600160a060020a038116151561240c57600080fd5b82600160a060020a038116151561242257600080fd5b505050600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b6001600160a060020a03331660009081526002602052604090205460ff16600381111561247957fe5b1461248357600080fd5b80600160a060020a038116151561249957600080fd5b816001600160a060020a03821660009081526002602052604090205460ff1660038111156124c357fe5b14156124ce57600080fd5b8230600160a060020a031681600160a060020a0316141515156124f057600080fd5b600160a060020a03841660009081526002602052604081205460ff16600381111561251757fe5b11156125355760035461253190600163ffffffff61266b16565b6003555b600160a060020a03841660008181526002602052604090819020805460ff191690557fb392249530409099dedf8a34dfe3498cfc2f81a2f80804432221e95cda371754905160405180910390a250505050565b601054610100900460ff1681565b6125a08282612876565b5050565b6125ad81612a19565b50565b600081600160a060020a03811615156125c857600080fd5b8230600160a060020a031681600160a060020a0316141515156125ea57600080fd5b505050600160a060020a031660009081526002602052604090205460ff1690565b600081600160a060020a038116151561262357600080fd5b5050600160a060020a031660009081526007602052604090205460ff1690565b600061208d8383612ad0565b6000610ddf848484612b8d565b60008282018381101561208d57fe5b60008282111561267757fe5b50900390565b60008083600160a060020a038116151561269657600080fd5b83600081116126a457600080fd5b600160a060020a033381166000908152600560209081526040808320938a168352929052205492508285111561270157600160a060020a033381166000908152600560209081526040808320938a16835292905290812055612738565b612711838663ffffffff61266b16565b600160a060020a033381166000908152600560209081526040808320938b16835292905220555b600160a060020a033381166000818152600560209081526040808320948b168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a350600195945050505050565b600061208d8383612d7e565b600082600160a060020a03811615156127c457600080fd5b82600081116127d257600080fd5b600160a060020a03338116600090815260056020908152604080832093891683529290522054612808908563ffffffff61265c16565b600160a060020a033381166000818152600560209081526040808320948b168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a3506001949350505050565b6001600160a060020a03331660009081526002602052604090205460ff16600381111561289f57fe5b146128a957600080fd5b81600160a060020a03811615156128bf57600080fd5b826001600160a060020a03821660009081526002602052604090205460ff1660038111156128e957fe5b14156128f457600080fd5b8330600160a060020a031681600160a060020a03161415151561291657600080fd5b83600081600381111561292557fe5b11801561293e575080600381111561293957fe5b600310155b151561294957600080fd5b600160a060020a03861660009081526002602052604081205460ff16600381111561297057fe5b141561298e5760035461298a90600163ffffffff61265c16565b6003555b600160a060020a0386166000908152600260205260409020805486919060ff191660018360038111156129bd57fe5b021790555085600160a060020a03167f074ffe655755f8e9ed8070a26dfff7bf6b7de4e823685ed4b580ada0b841ed3086604051808260038111156129fe57fe5b60ff16815260200191505060405180910390a2505050505050565b6001600160a060020a03331660009081526002602052604090205460ff166003811115612a4257fe5b14612a4c57600080fd5b80600160a060020a0381161515612a6257600080fd5b8130600160a060020a031681600160a060020a031614151515612a8457600080fd5b600054600160a060020a0384811691161415612a9f57600080fd5b50506001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082600160a060020a0381161515612ae857600080fd5b821580612b185750600160a060020a03338116600090815260056020908152604080832093881683529290522054155b1515612b2357600080fd5b600160a060020a03338116600081815260056020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a35060019392505050565b600082600160a060020a0381161515612ba557600080fd5b84600160a060020a0381161515612bbb57600080fd5b8360008111612bc957600080fd5b600160a060020a03871660009081526004602052604090205487908690811115612bf257600080fd5b600160a060020a03881660009081526004602052604090205488908890612c1f908263ffffffff61265c16565b600160a060020a0383166000908152600460205260409020541115612c4357600080fd5b600160a060020a03808c1660009081526005602090815260408083203390941683529290522054891115612c7657600080fd5b600160a060020a038b16600090815260046020526040902054612c9f908a63ffffffff61266b16565b600160a060020a03808d1660009081526004602052604080822093909355908c1681522054612cd4908a63ffffffff61265c16565b600160a060020a03808c166000908152600460209081526040808320949094558e8316825260058152838220339093168252919091522054612d1c908a63ffffffff61266b16565b600160a060020a03808d16600081815260056020908152604080832033861684529091529081902093909355908c1691600080516020612f87833981519152908c905190815260200160405180910390a35060019a9950505050505050505050565b600082600160a060020a0381161515612d9657600080fd5b8260008111612da457600080fd5b600160a060020a0333166000908152600460205260409020548490811115612dcb57600080fd5b600160a060020a03861660009081526004602052604090205486908690612df8908263ffffffff61265c16565b600160a060020a0383166000908152600460205260409020541115612e1c57600080fd5b600160a060020a033316600090815260046020526040902054612e45908863ffffffff61266b16565b600160a060020a0333811660009081526004602052604080822093909355908a1681522054612e7a908863ffffffff61265c16565b600160a060020a03808a166000818152600460205260409081902093909355913390911690600080516020612f87833981519152908a905190815260200160405180910390a3506001979650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f0f57805160ff1916838001178555612f3c565b82800160010185558215612f3c579182015b82811115612f3c578251825591602001919060010190612f21565b50612f48929150612f4c565b5090565b610df191905b80821115612f485760008155600101612f52560037719d649d851c9697b183602b8859487914b31559c27a9e1214f7575a66f45cddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058200d25cadbceba5034e8c873bbee69f143d14c58bddb67eb31c43882b6fe1249270029"
}