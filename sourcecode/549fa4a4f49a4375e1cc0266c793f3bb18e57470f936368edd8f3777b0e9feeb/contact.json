{
  "address": "0x68f1f41f735801ed82501a7fe171b7fec5a1a27c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "vRC20",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\npragma solidity ^0.5.2;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\n// input  /Users/GustavoIbarra/Projects/Solidity/blockchain-asset-registry/contracts/vRC20.sol\n// flattened :  Thursday, 11-Apr-19 23:33:19 UTC\ninterface IVersioned {\n    event AppendedData( string data, uint256 versionIndex );\n\n    /*\n    * @dev fallback function\n    */\n    function() external;\n\n    /**\n    * @dev Appends data to a string[] list\n    * @param _data any string. Could be an IPFS hash\n    */\n    function appendData(string calldata _data) external returns (bool);\n\n    /**\n    * @dev Gets the current index of the data list\n    */\n    function getVersionIndex() external view returns (uint count);\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Ownable {\n\n    /**\n    * @dev The current owner of the contract\n    */\n    address payable private _owner;\n    \n    /**\n    * @dev A list of the contract owners\n    */\n    address[] private _owners;\n\n    /**\n    * @dev The pending owner. \n    * The current owner must have transferred the contract to this address\n    * The pending owner must claim the ownership\n    */\n    address payable private _pendingOwner;\n\n    /**\n    * @dev A list of addresses that are allowed to transfer \n    * the contract ownership on behalf of the current owner\n    */\n    mapping (address => mapping (address => bool)) internal allowed;\n\n    event PendingTransfer( address indexed owner, address indexed pendingOwner );\n    event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );\n    event Approval( address indexed owner, address indexed trustee );\n    event RemovedApproval( address indexed owner, address indexed trustee );\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner {\n        require(isPendingOwner());\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n    * @dev The Asset constructor sets the original `owner` \n    * of the contract to the sender account.\n    */\n    constructor() public {\n        _owner = msg.sender;\n        _owners.push(_owner);\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*\n    * @dev fallback function\n    */\n    function() external {}\n\n    /**\n     * @return the set asset owner\n     */\n    function owner() public view returns (address payable) {\n        return _owner;\n    }\n    \n    /**\n     * @return the set asset owner\n     */\n    function owners() public view returns (address[] memory) {\n        return _owners;\n    }\n    \n    /**\n     * @return the set asset pendingOwner\n     */\n    function pendingOwner() public view returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n    \n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isPendingOwner() public view returns (bool) {\n        return msg.sender == _pendingOwner;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param pendingOwner_ The address to transfer ownership to.\n    */\n    function transferOwnership(address payable pendingOwner_) onlyOwner public {\n        _pendingOwner = pendingOwner_;\n        emit PendingTransfer(_owner, _pendingOwner);\n    }\n\n\n    /**\n    * @dev Allows an approved trustee to set the pendingOwner address.\n    * @param pendingOwner_ The address to transfer ownership to.\n    */\n    function transferOwnershipFrom(address payable pendingOwner_) public {\n        require(allowance(msg.sender));\n        _pendingOwner = pendingOwner_;\n        emit PendingTransfer(_owner, _pendingOwner);\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() onlyPendingOwner public {\n        _owner = _pendingOwner;\n        _owners.push(_owner);\n        _pendingOwner = address(0);\n        emit OwnershipTransferred(_owner, _pendingOwner);\n    }\n\n    /**\n    * @dev Approve the passed address to transfer the Asset on behalf of msg.sender.\n    * @param trustee The address which will spend the funds.\n    */\n    function approve(address trustee) onlyOwner public returns (bool) {\n        allowed[msg.sender][trustee] = true;\n        emit Approval(msg.sender, trustee);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to transfer the Asset on behalf of msg.sender.\n    * @param trustee The address which will spend the funds.\n    */\n    function removeApproval(address trustee) onlyOwner public returns (bool) {\n        allowed[msg.sender][trustee] = false;\n        emit RemovedApproval(msg.sender, trustee);\n        return true;\n    }\n\n    /**\n    * @dev Function to check if a trustee is allowed to transfer on behalf the owner\n    * @param trustee address The address which will spend the funds.\n    * @return A bool specifying if the trustee can still transfer the Asset\n    */\n    function allowance(address trustee) public view returns (bool) {\n        return allowed[_owner][trustee];\n    }\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract Versioned is IVersioned {\n\n    string[] public data;\n    \n    event AppendedData( \n        string data, \n        uint256 versionIndex\n    );\n\n    /*\n    * @dev fallback function\n    */\n    function() external {}\n\n    /**\n    * @dev Add data to the _data array\n    * @param _data string data\n    */\n    function appendData(string memory _data) public returns (bool) {\n        return _appendData(_data);\n    }\n    \n    /**\n    * @dev Add data to the _data array\n    * @param _data string data\n    */\n    function _appendData(string memory _data) internal returns (bool) {\n        data.push(_data);\n        emit AppendedData(_data, getVersionIndex());\n        return true;\n    }\n\n    /**\n    * @dev Gets the current index of the data list\n    */\n    function getVersionIndex() public view returns (uint count) {\n        return data.length - 1;\n    }\n}\n\ncontract vRC20 is ERC20, ERC20Detailed, Versioned, Ownable {\n\n    constructor (\n        uint256 supply,\n        string memory name,\n        string memory symbol,\n        uint8 decimals\n    ) public ERC20Detailed (name, symbol, decimals) {\n        _mint(msg.sender, supply);\n    }\n\n    /**\n    * @dev Add data to the _data array\n    * @param _data string data\n    */\n    function appendData(string memory _data) public onlyOwner returns (bool) {\n        return _appendData(_data);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001e546865204c61777965722049582045646963696f6e204c6177205465636800000000000000000000000000000000000000000000000000000000000000000007544c4958454c5400000000000000000000000000000000000000000000000000"
}