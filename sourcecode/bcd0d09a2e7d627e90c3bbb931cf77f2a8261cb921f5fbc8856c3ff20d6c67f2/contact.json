{
  "address": "0x837ae66bfbcdee3f5d07a051c17401e5636d77b3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Convergent_Billboard",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-21\n*/\n\npragma solidity ^0.4.24;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\n// input  /home/volt/workspaces/convergentcx/billboard/contracts/Convergent_Billboard.sol\n// flattened :  Wednesday, 21-Nov-18 00:21:30 UTC\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param amount The amount that will be created.\n   */\n  function _mint(address account, uint256 amount) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burn(address account, uint256 amount) internal {\n    require(account != 0);\n    require(amount <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 amount) internal {\n    require(amount <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      amount);\n    _burn(account, amount);\n  }\n}\n\ncontract EthBondingCurvedToken is ERC20Detailed, ERC20 {\n    using SafeMath for uint256;\n\n    uint256 public poolBalance;\n\n    event Minted(uint256 amount, uint256 totalCost);\n    event Burned(uint256 amount, uint256 reward);\n\n    constructor(\n        string name,\n        string symbol,\n        uint8 decimals\n    )   ERC20Detailed(name, symbol, decimals)\n        public\n    {}\n\n    function priceToMint(uint256 numTokens) public view returns (uint256);\n\n    function rewardForBurn(uint256 numTokens) public view returns (uint256);\n\n    function mint(uint256 numTokens) public payable {\n        require(numTokens > 0, \"Must purchase an amount greater than zero.\");\n\n        uint256 priceForTokens = priceToMint(numTokens);\n        require(msg.value >= priceForTokens, \"Must send requisite amount to purchase.\");\n\n        _mint(msg.sender, numTokens);\n        poolBalance = poolBalance.add(priceForTokens);\n        if (msg.value > priceForTokens) {\n            msg.sender.transfer(msg.value.sub(priceForTokens));\n        }\n\n        emit Minted(numTokens, priceForTokens);\n    }\n\n    function burn(uint256 numTokens) public {\n        require(numTokens > 0, \"Must burn an amount greater than zero.\");\n        require(balanceOf(msg.sender) >= numTokens, \"Must have enough tokens to burn.\");\n\n        uint256 ethToReturn = rewardForBurn(numTokens);\n        _burn(msg.sender, numTokens);\n        poolBalance = poolBalance.sub(ethToReturn);\n        msg.sender.transfer(ethToReturn);\n\n        emit Burned(numTokens, ethToReturn);\n    }\n}\n\ncontract EthPolynomialCurvedToken is EthBondingCurvedToken {\n\n    uint256 public exponent;\n    uint256 public inverseSlope;\n\n    /// @dev constructor        Initializes the bonding curve\n    /// @param name             The name of the token\n    /// @param decimals         The number of decimals to use\n    /// @param symbol           The symbol of the token\n    /// @param _exponent        The exponent of the curve\n    constructor(\n        string name,\n        string symbol,\n        uint8 decimals,\n        uint256 _exponent,\n        uint256 _inverseSlope\n    )   EthBondingCurvedToken(name, symbol, decimals) \n        public\n    {\n        exponent = _exponent;\n        inverseSlope = _inverseSlope;\n    }\n\n    /// @dev        Calculate the integral from 0 to t\n    /// @param t    The number to integrate to\n    function curveIntegral(uint256 t) internal returns (uint256) {\n        uint256 nexp = exponent.add(1);\n        uint256 norm = 10 ** (uint256(decimals()) * uint256(nexp)) - 18;\n        // Calculate integral of t^exponent\n        return\n            (t ** nexp).div(nexp).div(inverseSlope).div(10 ** 18);\n    }\n\n    function priceToMint(uint256 numTokens) public view returns(uint256) {\n        return curveIntegral(totalSupply().add(numTokens)).sub(poolBalance);\n    }\n\n    function rewardForBurn(uint256 numTokens) public view returns(uint256) {\n        return poolBalance.sub(curveIntegral(totalSupply().sub(numTokens)));\n    }\n}\n\ncontract Convergent_Billboard is EthPolynomialCurvedToken {\n    using SafeMath for uint256;\n\n    uint256 public cashed;                      // Amount of tokens that have been \"cashed out.\"\n    uint256 public maxTokens;                   // Total amount of Billboard tokens to be sold.\n    uint256 public requiredAmt;                 // Required amount of token per banner change.\n    address public safe;                        // Target to send the funds.\n\n    event Advertisement(bytes32 what, uint256 indexed when);\n\n    constructor(uint256 _maxTokens, uint256 _requiredAmt, address _safe)\n        EthPolynomialCurvedToken(\n            \"Convergent Billboard Token\",\n            \"CBT\",\n            18,\n            1,\n            1000\n        )\n        public\n    {\n        maxTokens = _maxTokens * 10**18;\n        requiredAmt = _requiredAmt * 10**18;\n        safe = _safe;\n    }\n\n    /// Overwrite\n    function mint(uint256 numTokens) public payable {\n        uint256 newTotal = totalSupply().add(numTokens);\n        if (newTotal > maxTokens) {\n            super.mint(maxTokens.sub(totalSupply()));\n            // The super.mint() function will not allow 0\n            // as an argument rendering this as sufficient\n            // to enforce a cap of maxTokens.\n        } else {\n            super.mint(numTokens);\n        }\n    }\n\n    function purchaseAdvertisement(bytes32 _what)\n        public\n        payable\n    {\n        mint(requiredAmt);\n        submit(_what);\n    }\n\n    function submit(bytes32 _what)\n        public\n    {\n        require(balanceOf(msg.sender) >= requiredAmt);\n\n        cashed++; // increment cashed counter\n        _transfer(msg.sender, address(0x1337), requiredAmt);\n\n        uint256 dec = 10**uint256(decimals());\n        uint256 newCliff = curveIntegral(\n            (cashed).mul(dec)\n        );\n        uint256 oldCliff = curveIntegral(\n            (cashed - 1).mul(dec)\n        );\n        uint256 cliffDiff = newCliff.sub(oldCliff);\n        safe.transfer(cliffDiff);\n\n        emit Advertisement(_what, block.timestamp);\n    }\n\n    function () public { revert(); }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051606080620020db8339810180604052810190808051906020019092919080519060200190929190805190602001909291905050506040805190810160405280601a81526020017f436f6e76657267656e742042696c6c626f61726420546f6b656e0000000000008152506040805190810160405280600381526020017f4342540000000000000000000000000000000000000000000000000000000000815250601260016103e88484848282828260009080519060200190620000da92919062000194565b508160019080519060200190620000f392919062000194565b5080600260006101000a81548160ff021916908360ff16021790555050505050505081600781905550806008819055505050505050670de0b6b3a76400008302600a81905550670de0b6b3a76400008202600b8190555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000243565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d757805160ff191683800117855562000208565b8280016001018555821562000208579182015b8281111562000207578251825591602001919060010190620001ea565b5b5090506200021791906200021b565b5090565b6200024091905b808211156200023c57600081600090555060010162000222565b5090565b90565b611e8880620002536000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610150578063095ea7b3146101e05780630fb226201461024557806318160ddd14610270578063186f03541461029b57806323b872dd146102f2578063313ce5671461037757806339509351146103a857806342966c681461040d57806352f6ee581461043a5780635cb27801146104655780636400be1d1461049057806370a08231146104bb57806395d89b411461051257806396365d44146105a2578063a0712d68146105cd578063a457c2d7146105ed578063a9059cbb14610652578063b9d36743146106b7578063c544682b146106f8578063d9caa3d214610739578063dd62ed3e1461076a578063e8315742146107e1578063e927594f1461080c575b34801561014a57600080fd5b50600080fd5b34801561015c57600080fd5b50610165610830565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a557808201518184015260208101905061018a565b50505050905090810190601f1680156101d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ec57600080fd5b5061022b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108d2565b604051808215151515815260200191505060405180910390f35b34801561025157600080fd5b5061025a6109ff565b6040518082815260200191505060405180910390f35b34801561027c57600080fd5b50610285610a05565b6040518082815260200191505060405180910390f35b3480156102a757600080fd5b506102b0610a0f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102fe57600080fd5b5061035d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a35565b604051808215151515815260200191505060405180910390f35b34801561038357600080fd5b5061038c610be7565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103b457600080fd5b506103f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bfe565b604051808215151515815260200191505060405180910390f35b34801561041957600080fd5b5061043860048036038101908080359060200190929190505050610e35565b005b34801561044657600080fd5b5061044f61100e565b6040518082815260200191505060405180910390f35b34801561047157600080fd5b5061047a611014565b6040518082815260200191505060405180910390f35b34801561049c57600080fd5b506104a561101a565b6040518082815260200191505060405180910390f35b3480156104c757600080fd5b506104fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611020565b6040518082815260200191505060405180910390f35b34801561051e57600080fd5b50610527611069565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056757808201518184015260208101905061054c565b50505050905090810190601f1680156105945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105ae57600080fd5b506105b761110b565b6040518082815260200191505060405180910390f35b6105eb60048036038101908080359060200190929190505050611111565b005b3480156105f957600080fd5b50610638600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611170565b604051808215151515815260200191505060405180910390f35b34801561065e57600080fd5b5061069d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113a7565b604051808215151515815260200191505060405180910390f35b3480156106c357600080fd5b506106e2600480360381019080803590602001909291905050506113be565b6040518082815260200191505060405180910390f35b34801561070457600080fd5b50610723600480360381019080803590602001909291905050506113fd565b6040518082815260200191505060405180910390f35b34801561074557600080fd5b50610768600480360381019080803560001916906020019092919050505061143c565b005b34801561077657600080fd5b506107cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611592565b6040518082815260200191505060405180910390f35b3480156107ed57600080fd5b506107f6611619565b6040518082815260200191505060405180910390f35b61082e600480360381019080803560001916906020019092919050505061161f565b005b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561090f57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600b5481565b6000600554905090565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ac257600080fd5b610b5182600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461163690919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bdc848484611657565b600190509392505050565b6000600260009054906101000a900460ff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c3b57600080fd5b610cca82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461187590919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008082111515610ed4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4d757374206275726e20616e20616d6f756e742067726561746572207468616e81526020017f207a65726f2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81610ede33611020565b10151515610f54576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4d757374206861766520656e6f75676820746f6b656e7320746f206275726e2e81525060200191505060405180910390fd5b610f5d826113fd565b9050610f693383611896565b610f7e8160065461163690919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610fca573d6000803e3d6000fd5b507fcec1bae6e024d929f2929f3478ce70f55f9c636c8ef7b5073a61d7c3a432451b8282604051808381526020018281526020019250505060405180910390a15050565b60075481565b60095481565b60085481565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111015780601f106110d657610100808354040283529160200191611101565b820191906000526020600020905b8154815290600101906020018083116110e457829003601f168201915b5050505050905090565b60065481565b600061112d8261111f610a05565b61187590919063ffffffff16565b9050600a548111156111625761115d611158611147610a05565b600a5461163690919063ffffffff16565b611a24565b61116c565b61116b82611a24565b5b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156111ad57600080fd5b61123c82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461163690919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60006113b4338484611657565b6001905092915050565b60006113f66006546113e86113e3856113d5610a05565b61187590919063ffffffff16565b611c36565b61163690919063ffffffff16565b9050919050565b600061143561142461141f84611411610a05565b61163690919063ffffffff16565b611c36565b60065461163690919063ffffffff16565b9050919050565b600080600080600b5461144e33611020565b1015151561145b57600080fd5b60096000815480929190600101919050555061147c33611337600b54611657565b611484610be7565b60ff16600a0a93506114a96114a485600954611cb490919063ffffffff16565b611c36565b92506114cb6114c685600160095403611cb490919063ffffffff16565b611c36565b91506114e0828461163690919063ffffffff16565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561154a573d6000803e3d6000fd5b50427f20afb6b5480941b31017b07508c24c719ee2e80878477f377b62ba2922bd42668660405180826000191660001916815260200191505060405180910390a25050505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600a5481565b61162a600b54611111565b6116338161143c565b50565b60008083831115151561164857600080fd5b82840390508091505092915050565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156116a557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156116e157600080fd5b61173381600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461163690919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117c881600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461187590919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015151561188c57600080fd5b8091505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156118bc57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561190a57600080fd5b61191f8160055461163690919063ffffffff16565b60058190555061197781600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461163690919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082111515611ac3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f4d75737420707572636861736520616e20616d6f756e7420677265617465722081526020017f7468616e207a65726f2e0000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611acc826113be565b9050803410151515611b6c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f4d7573742073656e642072657175697369746520616d6f756e7420746f20707581526020017f7263686173652e0000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611b763383611cf2565b611b8b8160065461187590919063ffffffff16565b60068190555080341115611bf3573373ffffffffffffffffffffffffffffffffffffffff166108fc611bc6833461163690919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015611bf1573d6000803e3d6000fd5b505b7f8a9dcf4e150b1153011b29fec302d5be0c13e84fa8f56ab78587f778a32a90dd8282604051808381526020018281526020019250505060405180910390a15050565b6000806000611c51600160075461187590919063ffffffff16565b9150601282611c5e610be7565b60ff1602600a0a039050611cab670de0b6b3a7640000611c9d600854611c8f86878a0a611e3290919063ffffffff16565b611e3290919063ffffffff16565b611e3290919063ffffffff16565b92505050919050565b6000806000841415611cc95760009150611ceb565b8284029050828482811515611cda57fe5b04141515611ce757600080fd5b8091505b5092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515611d1857600080fd5b611d2d8160055461187590919063ffffffff16565b600581905550611d8581600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461187590919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080600083111515611e4457600080fd5b8284811515611e4f57fe5b04905080915050929150505600a165627a7a72305820ddfc285b7df0055254c643558f25c61c418fe3a49309ae28af80967206d8a311002900000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b8001be99e38be45fa9caa4a6353ca75063b4e4c",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b8001be99e38be45fa9caa4a6353ca75063b4e4c"
}