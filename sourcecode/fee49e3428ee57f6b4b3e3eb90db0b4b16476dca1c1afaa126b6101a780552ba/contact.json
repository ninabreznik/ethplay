{
  "address": "0x0ff161071e627a0e6de138105c73970f86ca7922",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Paypite",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-27\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\"\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner\n   * @param newOwner The address to transfer ownership to\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/*\n * @title Migration Agent interface\n */\ncontract MigrationAgent {\n  function migrateFrom(address _from, uint256 _value);\n}\n\ncontract ERC20 {\n    function totalSupply() constant returns (uint256);\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value);\n    function transferFrom(address from, address to, uint256 value);\n    function approve(address spender, uint256 value);\n    function allowance(address owner, address spender) constant returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Paypite is Ownable, ERC20 {\n  using SafeMath for uint256;\n\n  uint8 private _decimals = 18;\n  uint256 private decimalMultiplier = 10**(uint256(_decimals));\n\n  string private _name = \"Paypite v2\";\n  string private _symbol = \"PIT\";\n  uint256 private _totalSupply = 274000000 * decimalMultiplier;\n\n  bool public tradable = true;\n\n  // Wallet Address of Token\n  address public multisig;\n\n  // Function to access name of token\n  function name() constant returns (string) {\n    return _name;\n  }\n\n  // Function to access symbol of token\n  function symbol() constant returns (string) {\n    return _symbol;\n  }\n\n  // Function to access decimals of token\n  function decimals() constant returns (uint8) {\n    return _decimals;\n  }\n\n  // Function to access total supply of tokens\n  function totalSupply() constant returns (uint256) {\n    return _totalSupply;\n  }\n\n  mapping(address => uint256) balances;\n  mapping(address => mapping (address => uint256)) allowed;\n  mapping(address => uint256) releaseTimes;\n  address public migrationAgent;\n  uint256 public totalMigrated;\n\n  event Migrate(address indexed _from, address indexed _to, uint256 _value);\n\n  // Constructor\n  // @notice Paypite Contract\n  // @return the transaction address\n  function Paypite(address _multisig) {\n    require(_multisig != 0x0);\n    multisig = _multisig;\n    balances[multisig] = _totalSupply;\n  }\n\n  modifier canTrade() {\n    require(tradable);\n    _;\n  }\n\n  // Standard function transfer similar to ERC20 transfer with no _data\n  // Added due to backwards compatibility reasons\n  function transfer(address to, uint256 value) canTrade {\n    require(!isLocked(msg.sender));\n    require (balances[msg.sender] >= value && value > 0);\n    balances[msg.sender] = balances[msg.sender].sub(value);\n    balances[to] = balances[to].add(value);\n    Transfer(msg.sender, to, value);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param who The address to query the the balance of\n   * @return An uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address who) constant returns (uint256) {\n    return balances[who];\n  }\n\n /**\n  * @dev Transfer tokens from one address to another\n  * @param from address The address which you want to send tokens from\n  * @param to address The address which you want to transfer to\n  * @param value uint256 the amount of tokens to be transfered\n  */\n  function transferFrom(address from, address to, uint256 value) canTrade {\n    require(to != 0x0);\n    require(!isLocked(from));\n    uint256 _allowance = allowed[from][msg.sender];\n    require(value > 0 && _allowance >= value);\n    balances[from] = balances[from].sub(value);\n    balances[to] = balances[to].add(value);\n    allowed[from][msg.sender] = _allowance.sub(value);\n    Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n   * @param spender The address which will spend the funds\n   * @param value The amount of tokens to be spent\n   */\n  function approve(address spender, uint256 value) canTrade {\n    require((value >= 0) && (allowed[msg.sender][spender] >= 0));\n    allowed[msg.sender][spender] = value;\n    Approval(msg.sender, spender, value);\n  }\n\n  // Check the allowed value for the spender to withdraw from owner\n  // @param owner The address of the owner\n  // @param spender The address of the spender\n  // @return the amount which spender is still allowed to withdraw from owner\n  function allowance(address owner, address spender) constant returns (uint256) {\n    return allowed[owner][spender];\n  }\n\n  /**\n   * @dev Function to update tradable status\n   * @param _newTradableState New tradable state\n   * @return A boolean that indicates if the operation was successful\n   */\n  function setTradable(bool _newTradableState) onlyOwner public {\n    tradable = _newTradableState;\n  }\n\n  /**\n   * Function to lock a given address until the specified date\n   * @param spender Address to lock\n   * @param date A timestamp specifying when the account will be unlocked\n   * @return A boolean that indicates if the operation was successful\n   */\n  function timeLock(address spender, uint256 date) public onlyOwner returns (bool) {\n    releaseTimes[spender] = date;\n    return true;\n  }\n\n  /**\n   * Function to check if a given address is locked or not\n   * @param _spender Address\n   * @return A boolean that indicates if the account is locked or not\n   */\n  function isLocked(address _spender) public view returns (bool) {\n    if (releaseTimes[_spender] == 0 || releaseTimes[_spender] <= block.timestamp) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * @notice Set address of migration target contract and enable migration process\n   * @dev Required state: Operational Normal\n   * @dev State transition: -> Operational Migration\n   * @param _agent The address of the MigrationAgent contract\n   */\n  function setMigrationAgent(address _agent) external onlyOwner {\n    require(migrationAgent == 0x0 && totalMigrated == 0);\n    migrationAgent = _agent;\n  }\n\n  /*\n   * @notice Migrate tokens to the new token contract.\n   * @dev Required state: Operational Migration\n   * @param _value The amount of token to be migrated\n   */\n  function migrate(uint256 value) external {\n    require(migrationAgent != 0x0);\n    require(value >= 0);\n    require(value <= balances[msg.sender]);\n\n    balances[msg.sender] -= value;\n    _totalSupply = _totalSupply.sub(value);\n    totalMigrated = totalMigrated.add(value);\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n    Migrate(msg.sender, migrationAgent, value);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTradableState\",\"type\":\"bool\"}],\"name\":\"setTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60606040526012600060146101000a81548160ff021916908360ff160217905550600060149054906101000a900460ff1660ff16600a0a6001556040805190810160405280600a81526020017f506179706974652076320000000000000000000000000000000000000000000081525060029080519060200190620000869291906200023c565b506040805190810160405280600381526020017f504954000000000000000000000000000000000000000000000000000000000081525060039080519060200190620000d49291906200023c565b50600154631054e880026004556001600560006101000a81548160ff02191690831515021790555034156200010857600080fd5b60405160208062001a9183398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16141515156200018c57600080fd5b80600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060045460066000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050620002eb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027f57805160ff1916838001178555620002b0565b82800160010185558215620002b0579182015b82811115620002af57825182559160200191906001019062000292565b5b509050620002bf9190620002c3565b5090565b620002e891905b80821115620002e4576000816000905550600101620002ca565b5090565b90565b61179680620002fb6000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a557806318160ddd146101e757806323b872dd14610210578063313ce56714610271578063454b0608146102a05780634783c35b146102c35780634a4fbeec1461031857806354840c6e1461036957806370a082311461039657806375e2ff65146103e35780637cd505771461041c5780638328dbcd146104415780638da5cb5b1461049657806395a0f5eb146104eb57806395d89b4114610514578063a9059cbb146105a2578063d91dc952146105e4578063dd62ed3e1461063e578063f2fde38b146106aa575b600080fd5b341561012257600080fd5b61012a6106e3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016a57808201518184015260208101905061014f565b50505050905090810190601f1680156101975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b057600080fd5b6101e5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061078b565b005b34156101f257600080fd5b6101fa610929565b6040518082815260200191505060405180910390f35b341561021b57600080fd5b61026f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610933565b005b341561027c57600080fd5b610284610c4d565b604051808260ff1660ff16815260200191505060405180910390f35b34156102ab57600080fd5b6102c16004808035906020019091905050610c63565b005b34156102ce57600080fd5b6102d6610eee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561032357600080fd5b61034f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f14565b604051808215151515815260200191505060405180910390f35b341561037457600080fd5b61037c610fba565b604051808215151515815260200191505060405180910390f35b34156103a157600080fd5b6103cd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fcd565b6040518082815260200191505060405180910390f35b34156103ee57600080fd5b61041a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611016565b005b341561042757600080fd5b61043f6004808035151590602001909190505061110a565b005b341561044c57600080fd5b610454611182565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104a157600080fd5b6104a96111a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104f657600080fd5b6104fe6111cd565b6040518082815260200191505060405180910390f35b341561051f57600080fd5b6105276111d3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056757808201518184015260208101905061054c565b50505050905090810190601f1680156105945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105ad57600080fd5b6105e2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061127b565b005b34156105ef57600080fd5b610624600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611498565b604051808215151515815260200191505060405180910390f35b341561064957600080fd5b610694600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611543565b6040518082815260200191505060405180910390f35b34156106b557600080fd5b6106e1600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115ca565b005b6106eb611756565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107815780601f1061075657610100808354040283529160200191610781565b820191906000526020600020905b81548152906001019060200180831161076457829003601f168201915b5050505050905090565b600560009054906101000a900460ff1615156107a657600080fd5b6000811015801561083457506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b151561083f57600080fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b6000600454905090565b6000600560009054906101000a900460ff16151561095057600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561097657600080fd5b61097f84610f14565b15151561098b57600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600082118015610a1a5750818110155b1515610a2557600080fd5b610a7782600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461171f90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b0c82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173890919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b62828261171f90919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b60008060149054906101000a900460ff16905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610cab57600080fd5b60008110151515610cbb57600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610d0957600080fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610d6b8160045461171f90919063ffffffff16565b600481905550610d8681600a5461173890919063ffffffff16565b600a81905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a3130e333836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610e5057600080fd5b6102c65a03f11515610e6157600080fd5b505050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a836040518082815260200191505060405180910390a350565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480610fa2575042600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411155b15610fb05760009050610fb5565b600190505b919050565b600560009054906101000a900460ff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561107157600080fd5b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156110bb57506000600a54145b15156110c657600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561116557600080fd5b80600560006101000a81548160ff02191690831515021790555050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b6111db611756565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112715780601f1061124657610100808354040283529160200191611271565b820191906000526020600020905b81548152906001019060200180831161125457829003601f168201915b5050505050905090565b600560009054906101000a900460ff16151561129657600080fd5b61129f33610f14565b1515156112ab57600080fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156112fa5750600081115b151561130557600080fd5b61135781600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461171f90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113ec81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173890919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f557600080fd5b81600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561162557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561166157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561172d57fe5b818303905092915050565b600080828401905083811015151561174c57fe5b8091505092915050565b6020604051908101604052806000815250905600a165627a7a7230582061de35db6ce46fbee87241ca647929bcb7c9b2cc7e8246656522d6d5f40ffa570029000000000000000000000000db6c3b8c189d79a3dc961f9e10d221f4e83d031c",
  "constructorArguments": "000000000000000000000000db6c3b8c189d79a3dc961f9e10d221f4e83d031c"
}