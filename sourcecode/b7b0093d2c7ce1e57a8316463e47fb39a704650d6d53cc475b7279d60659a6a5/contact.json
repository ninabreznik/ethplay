{
  "address": "0x5b4e0b60f6f3725628d831057c8a624422b2e9af",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HDCToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-12\n*/\n\npragma solidity ^0.4.18;\n\n  // ----------------------------------------------------------------------------------------------\n  // Sample fixed supply token contract\n  // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n  // ----------------------------------------------------------------------------------------------\n\n   // ERC Token Standard #20 Interface\n  // https://github.com/ethereum/EIPs/issues/20\n  contract ERC20Interface {\n      // 获取总的支持量\n      function totalSupply() constant public returns (uint256 _totalSupply);\n\n      // 获取其他地址的余额\n      function balanceOf(address _owner) constant public returns (uint256 balance);\n\n      // 向其他地址发送token\n      function transfer(address _to, uint256 _value) public returns (bool success);\n\n      // 从一个地址想另一个地址发送余额\n      function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n      //允许_spender从你的账户转出_value的余额，调用多次会覆盖可用量。某些DEX功能需要此功能\n      function approve(address _spender, uint256 _value) public returns (bool success);\n\n      // 返回_spender仍然允许从_owner退出的余额数量\n      function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n      // token转移完成后出发\n      event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n      // approve(address _spender, uint256 _value)调用后触发\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n  }\n\n   //继承接口后的实例\n   contract HDCToken is ERC20Interface {\n      string public constant symbol = \"HDCT\"; //单位\n      string public constant name = \"Health Data Chain Token\"; //名称\n      uint8 public constant decimals = 18; //小数点后的位数\n      uint256 _totalSupply = 10000000000000000000000000000; //发行总量\n\n      // 智能合约的所有者\n      address public owner;\n\n      // 每个账户的余额\n      mapping(address => uint256) balances;\n\n      // 帐户的所有者批准将金额转入另一个帐户。从上面的说明我们可以得知allowed[被转移的账户][转移钱的账户]\n      mapping(address => mapping (address => uint256)) allowed;\n\n      // 只能通过智能合约的所有者才能调用的方法\n      modifier onlyOwner() {\n          require (msg.sender != owner);\n          _;\n      }\n\n\t  bool public paused = false;\n\n      /**\n       * @dev Modifier to make a function callable only when the contract is not paused.\n       */\n      modifier whenNotPaused() {\n        require(!paused);\n        _;\n      }\n    \n      /**\n       * @dev Modifier to make a function callable only when the contract is paused.\n       */\n      modifier whenPaused() {\n        require(paused);\n        _;\n      }\n    \n      /**\n       * @dev called by the owner to pause, triggers stopped state\n       */\n      function pause() onlyOwner whenNotPaused public {\n        paused = true;\n      }\n    \n      /**\n       * @dev called by the owner to unpause, returns to normal state\n       */\n      function unpause() onlyOwner whenPaused public {\n        paused = false;\n      }\n  \n      // 构造函数\n      constructor () public {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n\n      function  totalSupply() public constant returns (uint256 totalSupplyRet) {\n          totalSupplyRet = _totalSupply;\n      }\n\n      // 特定账户的余额\n      function balanceOf(address _owner) public constant returns (uint256 balance) {\n          return balances[_owner];\n      }\n\n      // 转移余额到其他账户\n      function transfer(address _to, uint256 _amount) public whenNotPaused returns (bool success) {\n          require(_to != address(0x0) );\n\n          require (balances[msg.sender] >= _amount \n              && _amount > 0\n              && balances[_to] + _amount > balances[_to]); \n              \n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            emit Transfer(msg.sender, _to, _amount);\n            return true;\n      }\n\n      //从一个账户转移到另一个账户，前提是需要有允许转移的余额\n      function transferFrom(\n          address _from,\n          address _to,\n          uint256 _amount\n      ) public whenNotPaused returns (bool success) {\n          require(_to != address(0x0) );\n          \n          require (balances[_from] >= _amount\n              && allowed[_from][msg.sender] >= _amount\n              && _amount > 0\n              && balances[_to] + _amount > balances[_to]);\n              \n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            emit Transfer(_from, _to, _amount);\n            return true;\n      }\n\n      //允许账户从当前用户转移余额到那个账户，多次调用会覆盖\n      function approve(address _spender, uint256 _amount) public whenNotPaused returns (bool success) {\n          allowed[msg.sender][_spender] = _amount;\n          emit Approval(msg.sender, _spender, _amount);\n          return true;\n      }\n\n      //返回被允许转移的余额数量\n      function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n          return allowed[_owner][_spender];\n      }\n  }",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupplyRet\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526b204fce5e3e250261100000006000556000600460006101000a81548160ff02191690831515021790555034801561003b57600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ea8806100f46000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015a57806318160ddd146101bf57806323b872dd146101ea578063313ce5671461026f5780633f4ba83a146102a05780635c975abb146102b757806370a08231146102e65780638456cb591461033d5780638da5cb5b1461035457806395d89b41146103ab578063a9059cbb1461043b578063dd62ed3e146104a0575b600080fd5b3480156100d657600080fd5b506100df610517565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b506101a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610550565b604051808215151515815260200191505060405180910390f35b3480156101cb57600080fd5b506101d461065e565b6040518082815260200191505060405180910390f35b3480156101f657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610667565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b506102846109c2565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ac57600080fd5b506102b56109c7565b005b3480156102c357600080fd5b506102cc610a5c565b604051808215151515815260200191505060405180910390f35b3480156102f257600080fd5b50610327600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a6f565b6040518082815260200191505060405180910390f35b34801561034957600080fd5b50610352610ab8565b005b34801561036057600080fd5b50610369610b4e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b757600080fd5b506103c0610b74565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104005780820151818401526020810190506103e5565b50505050905090810190601f16801561042d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561044757600080fd5b50610486600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bad565b604051808215151515815260200191505060405180910390f35b3480156104ac57600080fd5b50610501600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610df5565b6040518082815260200191505060405180910390f35b6040805190810160405280601781526020017f4865616c7468204461746120436861696e20546f6b656e00000000000000000081525081565b6000600460009054906101000a900460ff1615151561056e57600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b6000600460009054906101000a900460ff1615151561068557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106c157600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561078c575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156107985750600082115b80156108235750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b151561082e57600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610a2457600080fd5b600460009054906101000a900460ff161515610a3f57600080fd5b6000600460006101000a81548160ff021916908315150217905550565b600460009054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610b1557600080fd5b600460009054906101000a900460ff16151515610b3157600080fd5b6001600460006101000a81548160ff021916908315150217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f484443540000000000000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900460ff16151515610bcb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c0757600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610c565750600082115b8015610ce15750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1515610cec57600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a723058206a747dfec411098d6f3e55d6c57e00252f3130654cc6148e21811197040665950029"
}