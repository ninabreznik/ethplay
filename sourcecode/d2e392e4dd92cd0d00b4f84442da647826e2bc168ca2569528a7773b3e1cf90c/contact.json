{
  "address": "0xf396de9a6b0a9f29e01e28e4d61c68eaf5448514",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DutchAuction",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-16\n*/\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/SignerRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract SignerRole {\n    using Roles for Roles.Role;\n\n    event SignerAdded(address indexed account);\n    event SignerRemoved(address indexed account);\n\n    Roles.Role private _signers;\n\n    constructor () internal {\n        _addSigner(msg.sender);\n    }\n\n    modifier onlySigner() {\n        require(isSigner(msg.sender));\n        _;\n    }\n\n    function isSigner(address account) public view returns (bool) {\n        return _signers.has(account);\n    }\n\n    function addSigner(address account) public onlySigner {\n        _addSigner(account);\n    }\n\n    function renounceSigner() public {\n        _removeSigner(msg.sender);\n    }\n\n    function _addSigner(address account) internal {\n        _signers.add(account);\n        emit SignerAdded(account);\n    }\n\n    function _removeSigner(address account) internal {\n        _signers.remove(account);\n        emit SignerRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Elliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\n\nlibrary ECDSA {\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * toEthSignedMessageHash\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n     * and hash the result\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/drafts/SignatureBouncer.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title SignatureBouncer\n * @author PhABC, Shrugs and aflesher\n * @dev SignatureBouncer allows users to submit a signature as a permission to\n * do an action.\n * If the signature is from one of the authorized signer addresses, the\n * signature is valid.\n * Note that SignatureBouncer offers no protection against replay attacks, users\n * must add this themselves!\n *\n * Signer addresses can be individual servers signing grants or different\n * users within a decentralized club that have permission to invite other\n * members. This technique is useful for whitelists and airdrops; instead of\n * putting all valid addresses on-chain, simply sign a grant of the form\n * keccak256(abi.encodePacked(`:contractAddress` + `:granteeAddress`)) using a\n * valid signer address.\n * Then restrict access to your crowdsale/whitelist/airdrop using the\n * `onlyValidSignature` modifier (or implement your own using _isValidSignature).\n * In addition to `onlyValidSignature`, `onlyValidSignatureAndMethod` and\n * `onlyValidSignatureAndData` can be used to restrict access to only a given\n * method or a given method with given parameters respectively.\n * See the tests in SignatureBouncer.test.js for specific usage examples.\n *\n * @notice A method that uses the `onlyValidSignatureAndData` modifier must make\n * the _signature parameter the \"last\" parameter. You cannot sign a message that\n * has its own signature in it so the last 128 bytes of msg.data (which\n * represents the length of the _signature data and the _signaature data itself)\n * is ignored when validating. Also non fixed sized parameters make constructing\n * the data in the signature much more complex.\n * See https://ethereum.stackexchange.com/a/50616 for more details.\n */\ncontract SignatureBouncer is SignerRole {\n    using ECDSA for bytes32;\n\n    // Function selectors are 4 bytes long, as documented in\n    // https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector\n    uint256 private constant _METHOD_ID_SIZE = 4;\n    // Signature size is 65 bytes (tightly packed v + r + s), but gets padded to 96 bytes\n    uint256 private constant _SIGNATURE_SIZE = 96;\n\n    constructor () internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev requires that a valid signature of a signer was provided\n     */\n    modifier onlyValidSignature(bytes memory signature) {\n        require(_isValidSignature(msg.sender, signature));\n        _;\n    }\n\n    /**\n     * @dev requires that a valid signature with a specifed method of a signer was provided\n     */\n    modifier onlyValidSignatureAndMethod(bytes memory signature) {\n        require(_isValidSignatureAndMethod(msg.sender, signature));\n        _;\n    }\n\n    /**\n     * @dev requires that a valid signature with a specifed method and params of a signer was provided\n     */\n    modifier onlyValidSignatureAndData(bytes memory signature) {\n        require(_isValidSignatureAndData(msg.sender, signature));\n        _;\n    }\n\n    /**\n     * @dev is the signature of `this + sender` from a signer?\n     * @return bool\n     */\n    function _isValidSignature(address account, bytes memory signature) internal view returns (bool) {\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account)), signature);\n    }\n\n    /**\n     * @dev is the signature of `this + sender + methodId` from a signer?\n     * @return bool\n     */\n    function _isValidSignatureAndMethod(address account, bytes memory signature) internal view returns (bool) {\n        bytes memory data = new bytes(_METHOD_ID_SIZE);\n        for (uint i = 0; i < data.length; i++) {\n            data[i] = msg.data[i];\n        }\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account, data)), signature);\n    }\n\n    /**\n        * @dev is the signature of `this + sender + methodId + params(s)` from a signer?\n        * @notice the signature parameter of the method being validated must be the \"last\" parameter\n        * @return bool\n        */\n    function _isValidSignatureAndData(address account, bytes memory signature) internal view returns (bool) {\n        require(msg.data.length > _SIGNATURE_SIZE);\n\n        bytes memory data = new bytes(msg.data.length - _SIGNATURE_SIZE);\n        for (uint i = 0; i < data.length; i++) {\n            data[i] = msg.data[i];\n        }\n\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account, data)), signature);\n    }\n\n    /**\n     * @dev internal function to convert a hash to an eth signed message\n     * and then recover the signature and check it against the signer role\n     * @return bool\n     */\n    function _isValidDataHash(bytes32 hash, bytes memory signature) internal view returns (bool) {\n        address signer = hash.toEthSignedMessageHash().recover(signature);\n\n        return signer != address(0) && isSigner(signer);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/misc/DutchAuction.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n/// @title Dutch auction contract - distribution of XRT tokens using an auction.\n/// @author Stefan George - <[email protected]>\n/// @author Airalab - <[email protected]> \ncontract DutchAuction is SignatureBouncer, Ownable {\n    using SafeERC20 for ERC20Burnable;\n\n    /*\n     *  Events\n     */\n    event BidSubmission(address indexed sender, uint256 amount);\n\n    /*\n     *  Constants\n     */\n    uint constant public WAITING_PERIOD = 0; // 1 days;\n\n    /*\n     *  Storage\n     */\n    ERC20Burnable public token;\n    address public ambix;\n    address payable public wallet;\n    uint public maxTokenSold;\n    uint public ceiling;\n    uint public priceFactor;\n    uint public startBlock;\n    uint public endTime;\n    uint public totalReceived;\n    uint public finalPrice;\n    mapping (address => uint) public bids;\n    Stages public stage;\n\n    /*\n     *  Enums\n     */\n    enum Stages {\n        AuctionDeployed,\n        AuctionSetUp,\n        AuctionStarted,\n        AuctionEnded,\n        TradingStarted\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier atStage(Stages _stage) {\n        // Contract on stage\n        require(stage == _stage);\n        _;\n    }\n\n    modifier isValidPayload() {\n        require(msg.data.length == 4 || msg.data.length == 164);\n        _;\n    }\n\n    modifier timedTransitions() {\n        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\n            finalizeAuction();\n        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\n            stage = Stages.TradingStarted;\n        _;\n    }\n\n    /*\n     *  Public functions\n     */\n    /// @dev Contract constructor function sets owner.\n    /// @param _wallet Multisig wallet.\n    /// @param _maxTokenSold Auction token balance.\n    /// @param _ceiling Auction ceiling.\n    /// @param _priceFactor Auction price factor.\n    constructor(address payable _wallet, uint _maxTokenSold, uint _ceiling, uint _priceFactor)\n        public\n    {\n        require(_wallet != address(0) && _ceiling > 0 && _priceFactor > 0);\n\n        wallet = _wallet;\n        maxTokenSold = _maxTokenSold;\n        ceiling = _ceiling;\n        priceFactor = _priceFactor;\n        stage = Stages.AuctionDeployed;\n    }\n\n    /// @dev Setup function sets external contracts' addresses.\n    /// @param _token Token address.\n    /// @param _ambix Distillation cube address.\n    function setup(ERC20Burnable _token, address _ambix)\n        public\n        onlyOwner\n        atStage(Stages.AuctionDeployed)\n    {\n        // Validate argument\n        require(_token != ERC20Burnable(0) && _ambix != address(0));\n\n        token = _token;\n        ambix = _ambix;\n\n        // Validate token balance\n        require(token.balanceOf(address(this)) == maxTokenSold);\n\n        stage = Stages.AuctionSetUp;\n    }\n\n    /// @dev Starts auction and sets startBlock.\n    function startAuction()\n        public\n        onlyOwner\n        atStage(Stages.AuctionSetUp)\n    {\n        stage = Stages.AuctionStarted;\n        startBlock = block.number;\n    }\n\n    /// @dev Calculates current token price.\n    /// @return Returns token price.\n    function calcCurrentTokenPrice()\n        public\n        timedTransitions\n        returns (uint)\n    {\n        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\n            return finalPrice;\n        return calcTokenPrice();\n    }\n\n    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\n    /// @return Returns current auction stage.\n    function updateStage()\n        public\n        timedTransitions\n        returns (Stages)\n    {\n        return stage;\n    }\n\n    /// @dev Allows to send a bid to the auction.\n    /// @param signature KYC approvement\n    function bid(bytes calldata signature)\n        external\n        payable\n        isValidPayload\n        timedTransitions\n        atStage(Stages.AuctionStarted)\n        onlyValidSignature(signature)\n        returns (uint amount)\n    {\n        require(msg.value > 0);\n        amount = msg.value;\n\n        address payable receiver = msg.sender;\n\n        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\n        uint maxWei = maxTokenSold * calcTokenPrice() / 10**9 - totalReceived;\n        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\n        if (maxWeiBasedOnTotalReceived < maxWei)\n            maxWei = maxWeiBasedOnTotalReceived;\n\n        // Only invest maximum possible amount.\n        if (amount > maxWei) {\n            amount = maxWei;\n            // Send change back to receiver address.\n            receiver.transfer(msg.value - amount);\n        }\n\n        // Forward funding to ether wallet\n        (bool success,) = wallet.call.value(amount)(\"\");\n        require(success);\n\n        bids[receiver] += amount;\n        totalReceived += amount;\n        emit BidSubmission(receiver, amount);\n\n        // Finalize auction when maxWei reached\n        if (amount == maxWei)\n            finalizeAuction();\n    }\n\n    /// @dev Claims tokens for bidder after auction.\n    function claimTokens()\n        public\n        isValidPayload\n        timedTransitions\n        atStage(Stages.TradingStarted)\n    {\n        address receiver = msg.sender;\n        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\n        bids[receiver] = 0;\n        token.safeTransfer(receiver, tokenCount);\n    }\n\n    /// @dev Calculates stop price.\n    /// @return Returns stop price.\n    function calcStopPrice()\n        view\n        public\n        returns (uint)\n    {\n        return totalReceived * 10**9 / maxTokenSold + 1;\n    }\n\n    /// @dev Calculates token price.\n    /// @return Returns token price.\n    function calcTokenPrice()\n        view\n        public\n        returns (uint)\n    {\n        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\n    }\n\n    /*\n     *  Private functions\n     */\n    function finalizeAuction()\n        private\n    {\n        stage = Stages.AuctionEnded;\n        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\n        uint soldTokens = totalReceived * 10**9 / finalPrice;\n\n        if (totalReceived == ceiling) {\n            // Auction contract transfers all unsold tokens to Ambix contract\n            token.safeTransfer(ambix, maxTokenSold - soldTokens);\n        } else {\n            // Auction contract burn all unsold tokens\n            token.burn(maxTokenSold - soldTokens);\n        }\n\n        endTime = now;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_ambix\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"bid\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WAITING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceiling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calcCurrentTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcStopPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_maxTokenSold\",\"type\":\"uint256\"},{\"name\":\"_ceiling\",\"type\":\"uint256\"},{\"name\":\"_priceFactor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516080806200141e833981018060405260808110156200003357600080fd5b50805160208083015160408401516060909401519293909290916200005e90339062000117811b901c565b600180546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b03841615801590620000c35750600082115b8015620000d05750600081115b620000da57600080fd5b600480546001600160a01b0319166001600160a01b039590951694909417909355600591909155600655600755600d805460ff19169055620001f5565b620001328160006200016960201b6200107f1790919060201c565b6040516001600160a01b038216907f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2490600090a250565b6001600160a01b0381166200017d57600080fd5b6200018f8282620001bf60201b60201c565b156200019a57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b038216620001d557600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61121980620002056000396000f3fe6080604052600436106101b75760003560e01c80638da5cb5b116100ec578063da8e0b781161008a578063e5c8b03d11610064578063e5c8b03d146104d9578063eb12d61e146104ee578063f2fde38b14610521578063fc0c546a14610554576101b7565b8063da8e0b781461049a578063dd9dd688146104af578063dfb2866d146104c4576101b7565b8063a6b513ee116100c6578063a6b513ee14610422578063c040e6b814610437578063c062f57814610470578063d9f8a4e214610485576101b7565b80638da5cb5b146103e35780638f32d59b146103f8578063a3c2c4621461040d576101b7565b80635a5132be116101595780636f85c7e4116101335780636f85c7e41461035d578063715018a614610372578063753ed1bd146103875780637df73e271461039c576101b7565b80635a5132be1461030057806362ea82db146103155780636b64c76914610348576101b7565b806339f64b521161019557806339f64b521461029057806348c54b9d146102a557806348cd4cb1146102ba578063521eb273146102cf576101b7565b80632d34ba79146101bc5780633197cbb6146101f957806331e3753014610220575b600080fd5b3480156101c857600080fd5b506101f7600480360360408110156101df57600080fd5b506001600160a01b0381358116916020013516610569565b005b34801561020557600080fd5b5061020e610680565b60408051918252519081900360200190f35b61020e6004803603602081101561023657600080fd5b81019060208101813564010000000081111561025157600080fd5b82018360208201111561026357600080fd5b8035906020019184600183028401116401000000008311171561028557600080fd5b509092509050610686565b34801561029c57600080fd5b5061020e6108e3565b3480156102b157600080fd5b506101f761090c565b3480156102c657600080fd5b5061020e610a0f565b3480156102db57600080fd5b506102e4610a15565b604080516001600160a01b039092168252519081900360200190f35b34801561030c57600080fd5b506102e4610a24565b34801561032157600080fd5b5061020e6004803603602081101561033857600080fd5b50356001600160a01b0316610a33565b34801561035457600080fd5b506101f7610a45565b34801561036957600080fd5b5061020e610a88565b34801561037e57600080fd5b506101f7610a8d565b34801561039357600080fd5b5061020e610ae8565b3480156103a857600080fd5b506103cf600480360360208110156103bf57600080fd5b50356001600160a01b0316610aee565b604080519115158252519081900360200190f35b3480156103ef57600080fd5b506102e4610b06565b34801561040457600080fd5b506103cf610b15565b34801561041957600080fd5b5061020e610b26565b34801561042e57600080fd5b5061020e610b2c565b34801561044357600080fd5b5061044c610b32565b6040518082600481111561045c57fe5b60ff16815260200191505060405180910390f35b34801561047c57600080fd5b5061044c610b3b565b34801561049157600080fd5b5061020e610bb6565b3480156104a657600080fd5b5061020e610c71565b3480156104bb57600080fd5b5061020e610c77565b3480156104d057600080fd5b5061020e610c8c565b3480156104e557600080fd5b506101f7610c92565b3480156104fa57600080fd5b506101f76004803603602081101561051157600080fd5b50356001600160a01b0316610c9d565b34801561052d57600080fd5b506101f76004803603602081101561054457600080fd5b50356001600160a01b0316610cbb565b34801561056057600080fd5b506102e4610cd5565b610571610b15565b61057a57600080fd5b600080600d5460ff16600481111561058e57fe5b1461059857600080fd5b6001600160a01b038316158015906105b857506001600160a01b03821615155b6105c157600080fd5b600280546001600160a01b038086166001600160a01b031992831617928390556003805486831693169290921790915560055460408051600160e01b6370a0823102815230600482015290519193909216916370a08231916024808301926020929190829003018186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d602081101561066257600080fd5b50511461066e57600080fd5b5050600d805460ff1916600117905550565b60095481565b60006004361480610697575060a436145b6106a057600080fd5b6002600d5460ff1660048111156106b357fe5b1480156106ce57506106c3610c77565b6106cb6108e3565b11155b156106db576106db610ce4565b6003600d5460ff1660048111156106ee57fe5b1480156106fc575060095442115b1561070f57600d805460ff191660041790555b600280600d5460ff16600481111561072357fe5b1461072d57600080fd5b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107709250339150839050610ddc565b61077957600080fd5b6000341161078657600080fd5b600a543493503390600090633b9aca0061079e6108e3565b60055402816107a957fe5b040390506000600a54600654039050818110156107c4578091505b8186111561080c57819550826001600160a01b03166108fc8734039081150290604051600060405180830381858888f1935050505015801561080a573d6000803e3d6000fd5b505b6004546040516000916001600160a01b03169088908381818185875af1925050503d8060008114610859576040519150601f19603f3d011682016040523d82523d6000602084013e61085e565b606091505b505090508061086c57600080fd5b6001600160a01b0384166000818152600c602090815260409182902080548b019055600a80548b01905581518a815291517f9c89e828e6cee6374b68147c9e753e41746aad98ba255a527a4fc0ac1868bff99281900390910190a2828714156108d7576108d7610ce4565b50505050505092915050565b60006008544303611d4c01600754670de0b6b3a7640000028161090257fe5b0460010190505b90565b600436148061091b575060a436145b61092457600080fd5b6002600d5460ff16600481111561093757fe5b1480156109525750610947610c77565b61094f6108e3565b11155b1561095f5761095f610ce4565b6003600d5460ff16600481111561097257fe5b148015610980575060095442115b1561099357600d805460ff191660041790555b600480600d5460ff1660048111156109a757fe5b146109b157600080fd5b600b54336000818152600c602052604081205491929091633b9aca0002816109d557fe5b6001600160a01b038085166000908152600c6020526040812055600254929091049250610a0a9116838363ffffffff610e2c16565b505050565b60085481565b6004546001600160a01b031681565b6003546001600160a01b031681565b600c6020526000908152604090205481565b610a4d610b15565b610a5657600080fd5b600180600d5460ff166004811115610a6a57fe5b14610a7457600080fd5b50600d805460ff1916600217905543600855565b600081565b610a95610b15565b610a9e57600080fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b60065481565b6000610b00818363ffffffff610ec116565b92915050565b6001546001600160a01b031690565b6001546001600160a01b0316331490565b600a5481565b600b5481565b600d5460ff1681565b60006002600d5460ff166004811115610b5057fe5b148015610b6b5750610b60610c77565b610b686108e3565b11155b15610b7857610b78610ce4565b6003600d5460ff166004811115610b8b57fe5b148015610b99575060095442115b15610bac57600d805460ff191660041790555b50600d5460ff1690565b60006002600d5460ff166004811115610bcb57fe5b148015610be65750610bdb610c77565b610be36108e3565b11155b15610bf357610bf3610ce4565b6003600d5460ff166004811115610c0657fe5b148015610c14575060095442115b15610c2757600d805460ff191660041790555b6003600d5460ff166004811115610c3a57fe5b1480610c5657506004600d5460ff166004811115610c5457fe5b145b15610c645750600b54610909565b610c6c6108e3565b905090565b60055481565b6000600554600a54633b9aca00028161090257fe5b60075481565b610c9b33610ef6565b565b610ca633610aee565b610caf57600080fd5b610cb881610f3e565b50565b610cc3610b15565b610ccc57600080fd5b610cb881610f86565b6002546001600160a01b031681565b600d805460ff19166003179055600654600a5414610d0957610d04610c77565b610d11565b610d116108e3565b600b819055600a5460009190633b9aca000281610d2a57fe5b049050600654600a541415610d6857600354600554600254610d63926001600160a01b039182169291169084900363ffffffff610e2c16565b610dd5565b60025460055460408051600160e31b630852cd8d028152918490036004830152516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015610dbc57600080fd5b505af1158015610dd0573d6000803e3d6000fd5b505050505b5042600955565b6040805130606090811b6020808401919091526001600160a01b03861690911b60348301528251602881840301815260489092019092528051910120600090610e259083610ff5565b9392505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610e8c57600080fd5b505af1158015610ea0573d6000803e3d6000fd5b505050506040513d6020811015610eb657600080fd5b5051610a0a57600080fd5b60006001600160a01b038216610ed657600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b610f0760008263ffffffff61103716565b6040516001600160a01b038216907f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b90600090a250565b610f4f60008263ffffffff61107f16565b6040516001600160a01b038216907f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2490600090a250565b6001600160a01b038116610f9957600080fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008061101183611005866110cb565b9063ffffffff61111c16565b90506001600160a01b0381161580159061102f575061102f81610aee565b949350505050565b6001600160a01b03811661104a57600080fd5b6110548282610ec1565b61105d57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b03811661109257600080fd5b61109c8282610ec1565b156110a657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008060008084516041146111375760009350505050610b00565b50505060208201516040830151606084015160001a601b81101561115957601b015b8060ff16601b1415801561117157508060ff16601c14155b156111825760009350505050610b00565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156111d9573d6000803e3d6000fd5b505050602060405103519350505050610b0056fea165627a7a723058201c1a1636619d9772d082f250802bdd093a98de0f378a7bf5219a1abb9290044900290000000000000000000000001fafda0d9039e4aabfa7b4e293b1196212a704b70000000000000000000000000000000000000000000000000018de76816d800000000000000000000000000000000000000000000000021e19e0c9bab24000000000000000000000000000000000000000000000000000000000000000000096",
  "constructorArguments": "0000000000000000000000001fafda0d9039e4aabfa7b4e293b1196212a704b70000000000000000000000000000000000000000000000000018de76816d800000000000000000000000000000000000000000000000021e19e0c9bab24000000000000000000000000000000000000000000000000000000000000000000096"
}