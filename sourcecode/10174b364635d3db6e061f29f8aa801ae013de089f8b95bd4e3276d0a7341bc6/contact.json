{
  "address": "0x022c635044ba01ced1e098bc32e62a954147f2de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Etheremon: Rank Battle 2",
  "contractName": "EtheremonRankBattle",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\npragma solidity ^0.4.16;\n\ncontract BasicAccessControl {\n    address public owner;\n    // address[] public moderators;\n    uint16 public totalModerators = 0;\n    mapping (address => bool) public moderators;\n    bool public isMaintaining = false;\n\n    function BasicAccessControl() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyModerators() {\n        require(msg.sender == owner || moderators[msg.sender] == true);\n        _;\n    }\n\n    modifier isActive {\n        require(!isMaintaining);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) onlyOwner public {\n        if (_newOwner != address(0)) {\n            owner = _newOwner;\n        }\n    }\n\n\n    function AddModerator(address _newModerator) onlyOwner public {\n        if (moderators[_newModerator] == false) {\n            moderators[_newModerator] = true;\n            totalModerators += 1;\n        }\n    }\n    \n    function RemoveModerator(address _oldModerator) onlyOwner public {\n        if (moderators[_oldModerator] == true) {\n            moderators[_oldModerator] = false;\n            totalModerators -= 1;\n        }\n    }\n\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n        isMaintaining = _isMaintaining;\n    }\n}\n\ncontract EtheremonEnum {\n    enum ArrayType {\n        CLASS_TYPE,\n        STAT_STEP,\n        STAT_START,\n        STAT_BASE,\n        OBJ_SKILL\n    }\n}\n\ninterface EtheremonTradeInterface {\n    function isOnTrading(uint64 _objId) constant external returns(bool);\n}\n\ncontract EtheremonDataBase is EtheremonEnum {\n    uint64 public totalMonster;\n\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n    \n    function addMonsterObj(uint32 _classId, address _trainer, string _name)  public returns(uint64);\n    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) public returns(uint);\n}\n\ninterface EtheremonRankData {\n    function setPlayer(address _trainer, uint64 _a0, uint64 _a1, uint64 _a2, uint64 _s0, uint64 _s1, uint64 _s2) external returns(uint32 playerId);\n    function isOnBattle(address _trainer, uint64 _objId) constant external returns(bool);\n}\n\ncontract EtheremonRankBattle is BasicAccessControl, EtheremonEnum {\n\n    struct MonsterObjAcc {\n        uint64 monsterId;\n        uint32 classId;\n        address trainer;\n        string name;\n        uint32 exp;\n        uint32 createIndex;\n        uint32 lastClaimIndex;\n        uint createTime;\n    }\n    \n    // linked smart contract\n    address public dataContract;\n    address public tradeContract;\n    address public rankDataContract;\n    \n    // modifier\n    modifier requireDataContract {\n        require(dataContract != address(0));\n        _;\n    }\n    \n    modifier requireTradeContract {\n        require(tradeContract != address(0));\n        _;\n    }\n\n    modifier requireRankDataContract {\n        require(rankDataContract != address(0));\n        _;\n    }\n\n    // event\n    event EventUpdateCastle(address indexed trainer, uint32 playerId);\n    \n    function EtheremonRankBattle(address _dataContract, address _tradeContract, address _rankDataContract) public {\n        dataContract = _dataContract;\n        tradeContract = _tradeContract;\n        rankDataContract = _rankDataContract;\n    }\n    \n    function setContract(address _dataContract, address _tradeContract, address _rankDataContract) onlyModerators external {\n        dataContract = _dataContract;\n        tradeContract = _tradeContract;\n        rankDataContract = _rankDataContract;\n    }\n\n    // public\n    \n    function getValidClassId(uint64 _objId, address _owner) constant public returns(uint32) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n        if (obj.trainer != _owner || obj.classId == 21) return 0;\n        return obj.classId;\n    }\n    \n    function hasValidParam(address _trainer, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) constant public returns(bool) {\n        if (_a1 == 0 || _a2 == 0 || _a3 == 0)\n            return false;\n        if (_a1 == _a2 || _a1 == _a3 || _a1 == _s1 || _a1 == _s2 || _a1 == _s3)\n            return false;\n        if (_a2 == _a3 || _a2 == _s1 || _a2 == _s2 || _a2 == _s3)\n            return false;\n        if (_a3 == _s1 || _a3 == _s2 || _a3 == _s3)\n            return false;\n        if (_s1 > 0 && (_s1 == _s2 || _s1 == _s3))\n            return false;\n        if (_s2 > 0 && (_s2 == _s3))\n            return false;\n        \n        uint32 classA1 = getValidClassId(_a1, _trainer);\n        uint32 classA2 = getValidClassId(_a2, _trainer);\n        uint32 classA3 = getValidClassId(_a3, _trainer);\n        \n        if (classA1 == 0 || classA2 == 0 || classA3 == 0)\n            return false;\n        if (classA1 == classA2 || classA1 == classA3 || classA2 == classA3)\n            return false;\n        if (_s1 > 0 && getValidClassId(_s1, _trainer) == 0)\n            return false;\n        if (_s2 > 0 && getValidClassId(_s2, _trainer) == 0)\n            return false;\n        if (_s3 > 0 && getValidClassId(_s3, _trainer) == 0)\n            return false;\n        return true;\n    }\n    \n    function setCastle(uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) isActive requireDataContract \n        requireTradeContract requireRankDataContract external {\n        \n        if (!hasValidParam(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3))\n            revert();\n        \n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n        if (trade.isOnTrading(_a1) || trade.isOnTrading(_a2) || trade.isOnTrading(_a3) || \n            trade.isOnTrading(_s1) || trade.isOnTrading(_s2) || trade.isOnTrading(_s3))\n            revert();\n\n        EtheremonRankData rank = EtheremonRankData(rankDataContract);\n        uint32 playerId = rank.setPlayer(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3);\n        EventUpdateCastle(msg.sender, playerId);\n    }\n    \n    function isOnBattle(uint64 _objId) constant external requireDataContract requireRankDataContract returns(bool) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n        if (obj.monsterId == 0)\n            return false;\n        EtheremonRankData rank = EtheremonRankData(rankDataContract);\n        return rank.isOnBattle(obj.trainer, _objId);\n    }\n}",
  "bytecode": "60606040526000805460a060020a61ffff02191690556002805460ff19169055341561002a57600080fd5b60405160608061129683398101604052808051919060200180519190602001805160008054600160a060020a03338116600160a060020a031992831617909255600280549783166101000261010060a860020a03199098169790971790965560038054958216958716959095179094556004805494909116939094169290921790925550506111d8806100be6000396000f3006060604052600436106100cc5763ffffffff60e060020a6000350416630d66881881146100d157806314d0f1ba146101005780631bab090814610133578063292910541461017d57806335f097f3146101aa57806348ef5aa8146101ca5780634a826823146101e25780634efb023e146102205780636c81fd6d1461024a5780638da5cb5b14610269578063b85d62751461027c578063b946c19c1461029b578063e7bb22cd146102ae578063ee4e4416146102f3578063f285329214610306578063ffa640d814610325575b600080fd5b34156100dc57600080fd5b6100e4610338565b604051600160a060020a03909116815260200160405180910390f35b341561010b57600080fd5b61011f600160a060020a036004351661034c565b604051901515815260200160405180910390f35b341561013e57600080fd5b61011f600160a060020a036004351667ffffffffffffffff60243581169060443581169060643581169060843581169060a43581169060c43516610361565b341561018857600080fd5b6101a8600160a060020a0360043581169060243581169060443516610709565b005b34156101b557600080fd5b61011f67ffffffffffffffff600435166107b1565b34156101d557600080fd5b6101a86004351515610985565b34156101ed57600080fd5b6101a867ffffffffffffffff60043581169060243581169060443581169060643581169060843581169060a435166109b3565b341561022b57600080fd5b610233610e14565b60405161ffff909116815260200160405180910390f35b341561025557600080fd5b6101a8600160a060020a0360043516610e36565b341561027457600080fd5b6100e4610ee0565b341561028757600080fd5b6101a8600160a060020a0360043516610eef565b34156102a657600080fd5b6100e4610f99565b34156102b957600080fd5b6102da67ffffffffffffffff60043516600160a060020a0360243516610fa8565b60405163ffffffff909116815260200160405180910390f35b34156102fe57600080fd5b61011f6110df565b341561031157600080fd5b6101a8600160a060020a03600435166110e8565b341561033057600080fd5b6100e461113f565b6002546101009004600160a060020a031681565b60016020526000908152604090205460ff1681565b600080808067ffffffffffffffff8a161580610385575067ffffffffffffffff8916155b80610398575067ffffffffffffffff8816155b156103a657600093506106fb565b8867ffffffffffffffff168a67ffffffffffffffff1614806103db57508767ffffffffffffffff168a67ffffffffffffffff16145b806103f957508667ffffffffffffffff168a67ffffffffffffffff16145b8061041757508567ffffffffffffffff168a67ffffffffffffffff16145b8061043557508467ffffffffffffffff168a67ffffffffffffffff16145b1561044357600093506106fb565b8767ffffffffffffffff168967ffffffffffffffff16148061047857508667ffffffffffffffff168967ffffffffffffffff16145b8061049657508567ffffffffffffffff168967ffffffffffffffff16145b806104b457508467ffffffffffffffff168967ffffffffffffffff16145b156104c257600093506106fb565b8667ffffffffffffffff168867ffffffffffffffff1614806104f757508567ffffffffffffffff168867ffffffffffffffff16145b8061051557508467ffffffffffffffff168867ffffffffffffffff16145b1561052357600093506106fb565b60008767ffffffffffffffff1611801561056d57508567ffffffffffffffff168767ffffffffffffffff16148061056d57508467ffffffffffffffff168767ffffffffffffffff16145b1561057b57600093506106fb565b60008667ffffffffffffffff161180156105a857508467ffffffffffffffff168667ffffffffffffffff16145b156105b657600093506106fb565b6105c08a8c610fa8565b92506105cc898c610fa8565b91506105d8888c610fa8565b905063ffffffff831615806105f1575063ffffffff8216155b80610600575063ffffffff8116155b1561060e57600093506106fb565b8163ffffffff168363ffffffff16148061063357508063ffffffff168363ffffffff16145b8061064957508063ffffffff168263ffffffff16145b1561065757600093506106fb565b60008767ffffffffffffffff1611801561067e5750610676878c610fa8565b63ffffffff16155b1561068c57600093506106fb565b60008667ffffffffffffffff161180156106b357506106ab868c610fa8565b63ffffffff16155b156106c157600093506106fb565b60008567ffffffffffffffff161180156106e857506106e0858c610fa8565b63ffffffff16155b156106f657600093506106fb565b600193505b505050979650505050505050565b60005433600160a060020a03908116911614806107445750600160a060020a03331660009081526001602081905260409091205460ff161515145b151561074f57600080fd5b60028054600160a060020a039485166101000274ffffffffffffffffffffffffffffffffffffffff00199091161790556003805492841673ffffffffffffffffffffffffffffffffffffffff1993841617905560048054919093169116179055565b6000806107bc61114e565b6002546000906101009004600160a060020a031615156107db57600080fd5b600454600160a060020a031615156107f257600080fd5b6002546101009004600160a060020a0316925082630720246086600060405160e0015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240160e060405180830381600087803b151561085457600080fd5b6102c65a03f1151561086557600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805160e08a01525063ffffffff90811660c089015290811660a08801529081166080870152600160a060020a03909116604086015216602084015267ffffffffffffffff168252815167ffffffffffffffff1615156108f1576000935061097d565b50600454600160a060020a0316806346a7551d60408401518760006040516020015260405160e060020a63ffffffff8516028152600160a060020a03909216600483015267ffffffffffffffff166024820152604401602060405180830381600087803b151561096057600080fd5b6102c65a03f1151561097157600080fd5b50505060405180519450505b505050919050565b60005433600160a060020a039081169116146109a057600080fd5b6002805460ff1916911515919091179055565b6002546000908190819060ff16156109ca57600080fd5b6002546101009004600160a060020a031615156109e657600080fd5b600354600160a060020a031615156109fd57600080fd5b600454600160a060020a03161515610a1457600080fd5b610a23338a8a8a8a8a8a610361565b1515610a2e57600080fd5b600354600160a060020a031692508263a847a71c8a60006040516020015260405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401602060405180830381600087803b1515610a8b57600080fd5b6102c65a03f11515610a9c57600080fd5b5050506040518051905080610b20575082600160a060020a031663a847a71c8960006040516020015260405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401602060405180830381600087803b1515610b0457600080fd5b6102c65a03f11515610b1557600080fd5b505050604051805190505b80610b9a575082600160a060020a031663a847a71c8860006040516020015260405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401602060405180830381600087803b1515610b7e57600080fd5b6102c65a03f11515610b8f57600080fd5b505050604051805190505b80610c14575082600160a060020a031663a847a71c8760006040516020015260405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401602060405180830381600087803b1515610bf857600080fd5b6102c65a03f11515610c0957600080fd5b505050604051805190505b80610c8e575082600160a060020a031663a847a71c8660006040516020015260405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401602060405180830381600087803b1515610c7257600080fd5b6102c65a03f11515610c8357600080fd5b505050604051805190505b80610d08575082600160a060020a031663a847a71c8560006040516020015260405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401602060405180830381600087803b1515610cec57600080fd5b6102c65a03f11515610cfd57600080fd5b505050604051805190505b15610d1257600080fd5b600454600160a060020a03169150816349a92910338b8b8b8b8b8b60006040516020015260405160e060020a63ffffffff8a16028152600160a060020a03909716600488015267ffffffffffffffff95861660248801529385166044870152918416606486015283166084850152821660a48401521660c482015260e401602060405180830381600087803b1515610da957600080fd5b6102c65a03f11515610dba57600080fd5b5050506040518051915050600160a060020a0333167f73e58b14fab1ee02f4e1a0ab06d580a880c03f88b1d660acf5528ea85d455dfe8260405163ffffffff909116815260200160405180910390a2505050505050505050565b60005474010000000000000000000000000000000000000000900461ffff1681565b60005433600160a060020a03908116911614610e5157600080fd5b600160a060020a03811660009081526001602052604090205460ff161515610edd57600160a060020a03811660009081526001602081905260408220805460ff191682179055815461ffff7401000000000000000000000000000000000000000080830482169093011690910275ffff0000000000000000000000000000000000000000199091161790555b50565b600054600160a060020a031681565b60005433600160a060020a03908116911614610f0a57600080fd5b600160a060020a03811660009081526001602081905260409091205460ff1615151415610edd57600160a060020a03166000908152600160205260408120805460ff19169055805475ffff0000000000000000000000000000000000000000198116740100000000000000000000000000000000000000009182900461ffff9081166000190116909102179055565b600454600160a060020a031681565b600080610fb361114e565b6002546101009004600160a060020a0316915081630720246086600060405160e0015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240160e060405180830381600087803b151561101557600080fd5b6102c65a03f1151561102657600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805160e08901525063ffffffff90811660c088015290811660a08701529081166080860152600160a060020a03918216604086019081529216602085015267ffffffffffffffff90921683529085169051600160a060020a03161415806110c15750806020015163ffffffff166015145b156110cf57600092506110d7565b806020015192505b505092915050565b60025460ff1681565b60005433600160a060020a0390811691161461110357600080fd5b600160a060020a03811615610edd5760008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b600354600160a060020a031681565b6101006040519081016040908152600080835260208301819052908201526060810161117861119a565b8152600060208201819052604082018190526060820181905260809091015290565b602060405190810160405260008152905600a165627a7a7230582076ef0a05c60b141c23714e1a37809ad74d6bdc3485e554285137727ad826cc560029000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e0000000000000000000000004ba72f0f8dad13709ee28a992869e79d0fe47030000000000000000000000000838cda4a4cc873fff10f4d6373ada6636517fa31",
  "constructorArguments": "000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e0000000000000000000000004ba72f0f8dad13709ee28a992869e79d0fe47030000000000000000000000000838cda4a4cc873fff10f4d6373ada6636517fa31"
}