{
  "address": "0x05159559b45296b0a96097351e17ab1619bc9431",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bussiness",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity ^0.5.8;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract IERC721 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20BasicInterface {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    uint8 public decimals;\n}\n\ncontract Bussiness is Ownable {\n\n    using SafeMath for uint256;\n    address public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\n    ERC20BasicInterface public hbwalletToken = ERC20BasicInterface(0xEc7ba74789694d0d03D458965370Dc7cF2FE75Ba);\n    uint256 public Percen = 1000;\n    uint256 public HBWALLETExchange = 21;\n    // cong thuc hbFee = ETHFee / Percen * HBWALLETExchange / 2\n    // uint256 public hightLightFee = 30000000000000000;\n\n    struct Price {\n        address payable tokenOwner;\n        uint256 price;\n        uint256 fee;\n        uint256 hbfee;\n        bool isHightlight;\n    }\n    // new code =======================\n    struct Game {\n        mapping(uint256 => Price) tokenPrice;\n        uint256[] tokenIdSale;\n        uint256 ETHFee;\n        uint256 limitETHFee;\n        uint256 limitHBWALLETFee;\n        uint256 hightLightFee;\n    }\n\n    mapping(address => Game) public Games;\n    address[] arrGames;\n    constructor() public {\n        Games[address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B)].ETHFee = 0;\n        Games[address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B)].limitETHFee = 0;\n        Games[address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B)].limitHBWALLETFee = 0;\n        Games[address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B));\n\n        Games[address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea)].ETHFee = 0;\n        Games[address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea)].limitETHFee = 0;\n        Games[address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea)].limitHBWALLETFee = 0;\n        Games[address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0xdceaf1652a131F32a821468Dc03A92df0edd86Ea));\n\n        Games[address(0x273f7F8E6489682Df756151F5525576E322d51A3)].ETHFee = 0;\n        Games[address(0x273f7F8E6489682Df756151F5525576E322d51A3)].limitETHFee = 0;\n        Games[address(0x273f7F8E6489682Df756151F5525576E322d51A3)].limitHBWALLETFee = 0;\n        Games[address(0x273f7F8E6489682Df756151F5525576E322d51A3)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x273f7F8E6489682Df756151F5525576E322d51A3));\n\n        Games[address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d)].ETHFee = 0;\n        Games[address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d)].limitETHFee = 0;\n        Games[address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d)].limitHBWALLETFee = 0;\n        Games[address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d));\n\n        Games[address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392)].ETHFee = 0;\n        Games[address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392)].limitETHFee = 0;\n        Games[address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392)].limitHBWALLETFee = 0;\n        Games[address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x1276dce965ADA590E42d62B3953dDc1DDCeB0392));\n\n        Games[address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f)].ETHFee = 0;\n        Games[address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f)].limitETHFee = 0;\n        Games[address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f)].limitHBWALLETFee = 0;\n        Games[address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0xE60D2325f996e197EEdDed8964227a0c6CA82D0f));\n\n        Games[address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340)].ETHFee = 0;\n        Games[address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340)].limitETHFee = 0;\n        Games[address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340)].limitHBWALLETFee = 0;\n        Games[address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x617913Dd43dbDf4236B85Ec7BdF9aDFD7E35b340));\n\n        Games[address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b)].ETHFee = 0;\n        Games[address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b)].limitETHFee = 0;\n        Games[address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b)].limitHBWALLETFee = 0;\n        Games[address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0xECd6b4A2f82b0c9FB283A4a8a1ef5ADf555f794b));\n\n        Games[address(0xf26A23019b4699068bb54457f32dAFCF22A9D371)].ETHFee = 0;\n        Games[address(0xf26A23019b4699068bb54457f32dAFCF22A9D371)].limitETHFee = 0;\n        Games[address(0xf26A23019b4699068bb54457f32dAFCF22A9D371)].limitHBWALLETFee = 0;\n        Games[address(0xf26A23019b4699068bb54457f32dAFCF22A9D371)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0xf26A23019b4699068bb54457f32dAFCF22A9D371));\n\n        Games[address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)].ETHFee = 0;\n        Games[address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)].limitETHFee = 0;\n        Games[address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)].limitHBWALLETFee = 0;\n        Games[address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)].hightLightFee = 30000000000000000;\n        arrGames.push(address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099));\n    }\n    // function addTokenPrice(address _game, uint256 _tokenId, uint256 _ethPrice, bool _isHightLight) public {\n    //     Games[_game].tokenPrice[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);\n    //     Games[_game].tokenIdSale.push(_tokenId);\n    // }\n    function getTokenPrice(address _game, uint256 _tokenId) public view returns (address, uint256, uint256, uint256, bool) {\n        return (Games[_game].tokenPrice[_tokenId].tokenOwner, Games[_game].tokenPrice[_tokenId].price, Games[_game].tokenPrice[_tokenId].fee, Games[_game].tokenPrice[_tokenId].hbfee, Games[_game].tokenPrice[_tokenId].isHightlight);\n    }\n    // new code =======================\n    /**\n     * @dev Throws if called by any account other than the ceo address.\n     */\n    modifier onlyCeoAddress() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n    modifier isOwnerOf(address _game, uint256 _tokenId) {\n        IERC721 erc721Address = IERC721(_game);\n        require(erc721Address.ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n    // Move the last element to the deleted spot.\n    // Delete the last element, then correct the length.\n    function _burnArrayTokenIdSale(address _game, uint8 index)  internal {\n        if (index >= Games[_game].tokenIdSale.length) return;\n\n        for (uint i = index; i<Games[_game].tokenIdSale.length-1; i++){\n            Games[_game].tokenIdSale[i] = Games[_game].tokenIdSale[i+1];\n        }\n        delete Games[_game].tokenIdSale[Games[_game].tokenIdSale.length-1];\n        Games[_game].tokenIdSale.length--;\n    }\n\n    function _burnArrayTokenIdSaleByArr(address _game, uint8[] memory arr) internal {\n        for(uint8 i; i<arr.length; i++){\n            _burnArrayTokenIdSale(_game, i);\n        }\n\n    }\n    function ownerOf(address _game, uint256 _tokenId) public view returns (address){\n        IERC721 erc721Address = IERC721(_game);\n        return erc721Address.ownerOf(_tokenId);\n    }\n\n    function balanceOf() public view returns (uint256){\n        return address(this).balance;\n    }\n\n    function getApproved(address _game, uint256 _tokenId) public view returns (address){\n        IERC721 erc721Address = IERC721(_game);\n        return erc721Address.getApproved(_tokenId);\n    }\n\n    function setPrice(address _game, uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint _hbfee, bool _isHightLight) internal {\n        Games[_game].tokenPrice[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);\n        Games[_game].tokenIdSale.push(_tokenId);\n        bool flag = false;\n        for(uint i = 0; i< arrGames.length; i++) {\n            if(arrGames[i] == address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099)) flag = true;\n        }\n        if(!flag) arrGames.push(address(0x8c9b261Faef3b3C2e64ab5E58e04615F8c788099));\n    }\n\n    function calPriceFeeEth(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns(uint256, uint256) {\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        uint256 ethNeed;\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || !Games[_game].tokenPrice[_tokenId].isHightlight)) {\n            _hightLightFee = Games[_game].hightLightFee;\n        }\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(Games[_game].tokenPrice[_tokenId].price).mul(Games[_game].ETHFee).div(Percen);\n            if(Games[_game].tokenPrice[_tokenId].price == 0) {\n                if (ethfee >= Games[_game].limitETHFee) {\n                    ethNeed = ethfee.add(_hightLightFee);\n                } else {\n                    ethNeed = Games[_game].limitETHFee.add(_hightLightFee);\n                }\n            }\n\n        }\n        return (ethNeed, _hightLightFee);\n    }\n    function setPriceFeeEth(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public payable isOwnerOf(_game, _tokenId) {\n        require(Games[_game].tokenPrice[_tokenId].price != _ethPrice);\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || !Games[_game].tokenPrice[_tokenId].isHightlight)) {\n            _hightLightFee = Games[_game].hightLightFee;\n        }\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(Games[_game].tokenPrice[_tokenId].price).mul(Games[_game].ETHFee).div(Percen);\n            if(Games[_game].tokenPrice[_tokenId].price == 0) {\n                if (ethfee >= Games[_game].limitETHFee) {\n                    require(msg.value == ethfee.add(_hightLightFee));\n                } else {\n                    require(msg.value == Games[_game].limitETHFee.add(_hightLightFee));\n                    ethfee = Games[_game].limitETHFee;\n                }\n            }\n            ethfee = ethfee.add(Games[_game].tokenPrice[_tokenId].fee);\n        } else ethfee = _ethPrice.mul(Games[_game].ETHFee).div(Percen);\n\n        setPrice(_game, _tokenId, _ethPrice, ethfee, 0, _isHightLight == 1);\n    }\n    function calPriceFeeHBWALLET(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns (uint256){\n        uint fee;\n        uint256 ethfee;\n        uint _hightLightFee = 0;\n        uint hbNeed;\n        address local_game = _game;\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || !Games[_game].tokenPrice[_tokenId].isHightlight)) {\n            // _hightLightFee = hightLightFee * HBWALLETExchange / 2 / (10 ** 16);\n            _hightLightFee = Games[local_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(Games[local_game].tokenPrice[_tokenId].price).mul(Games[_game].ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\n            if(Games[_game].tokenPrice[_tokenId].price == 0) {\n                if (fee >= Games[_game].limitHBWALLETFee) {\n                    hbNeed = fee.add(_hightLightFee);\n                } else {\n                    hbNeed = Games[_game].limitHBWALLETFee.add(_hightLightFee);\n                }\n            }\n        }\n        return hbNeed;\n    }\n    function setPriceFeeHBWALLET(address _game, uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public isOwnerOf(_game, _tokenId) {\n        require(Games[_game].tokenPrice[_tokenId].price != _ethPrice);\n        uint fee;\n        uint256 ethfee;\n        uint _hightLightFee = 0;\n        address local_game = _game;\n        uint256 local_tokenId = _tokenId;\n        if (_isHightLight == 1 && (Games[_game].tokenPrice[_tokenId].price == 0 || !Games[_game].tokenPrice[_tokenId].isHightlight)) {\n            _hightLightFee = Games[local_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n        if (Games[_game].tokenPrice[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(Games[local_game].tokenPrice[local_tokenId].price).mul(Games[local_game].ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\n            if(Games[_game].tokenPrice[_tokenId].price == 0) {\n                if (fee >= Games[_game].limitHBWALLETFee) {\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), fee.add(_hightLightFee)));\n                } else {\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), Games[local_game].limitHBWALLETFee.add(_hightLightFee)));\n                    fee = Games[_game].limitHBWALLETFee;\n                }\n            }\n            fee = fee.add(Games[_game].tokenPrice[_tokenId].hbfee);\n        } else {\n            ethfee = _ethPrice.mul(Games[local_game].ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n\n        setPrice(_game, _tokenId, _ethPrice, 0, fee, _isHightLight == 1);\n    }\n\n    function removePrice(address _game, uint256 _tokenId) public isOwnerOf(_game, _tokenId) returns (uint256){\n        if (Games[_game].tokenPrice[_tokenId].fee > 0) msg.sender.transfer(Games[_game].tokenPrice[_tokenId].fee);\n        else if (Games[_game].tokenPrice[_tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, Games[_game].tokenPrice[_tokenId].hbfee);\n        resetPrice(_game, _tokenId);\n        return Games[_game].tokenPrice[_tokenId].price;\n    }\n\n    function setHBWALLETExchange(uint _HBWALLETExchange) public onlyOwner returns (uint){\n        require(_HBWALLETExchange >= 1);\n\n        HBWALLETExchange = _HBWALLETExchange;\n\n        return (HBWALLETExchange);\n    }\n\n    function setLimitFee(address _game, uint256 _ethFee, uint256 _ethlimitFee, uint _hbWalletlimitFee, uint256 _hightLightFee) public onlyOwner returns (uint256, uint256, uint256, uint256){\n        require(_ethFee >= 0 && _ethlimitFee >= 0 && _hbWalletlimitFee >= 0 && _hightLightFee >= 0);\n        Games[_game].ETHFee = _ethFee;\n        Games[_game].limitETHFee = _ethlimitFee;\n        Games[_game].limitHBWALLETFee = _hbWalletlimitFee;\n        Games[_game].hightLightFee = _hightLightFee;\n        return (Games[_game].ETHFee, Games[_game].limitETHFee, Games[_game].limitHBWALLETFee, Games[_game].hightLightFee);\n    }\n\n    function _withdraw(uint256 amount, uint256 _amountHB) internal {\n        require(address(this).balance >= amount && hbwalletToken.balanceOf(address(this)) >= _amountHB);\n        if(amount > 0) {\n            msg.sender.transfer(amount);\n        }\n        if(_amountHB > 0) {\n            hbwalletToken.transfer(msg.sender, _amountHB);\n        }\n    }\n    function withdraw(uint256 amount, uint8 _amountHB) public onlyCeoAddress {\n        _withdraw(amount, _amountHB);\n    }\n    function cancelBussiness() public onlyCeoAddress {\n        for(uint j = 0; j< arrGames.length; j++) {\n            address _game = arrGames[j];\n            IERC721 erc721Address = IERC721(arrGames[j]);\n            uint256[] memory arr = Games[_game].tokenIdSale;\n            uint length = Games[_game].tokenIdSale.length;\n            for (uint i = 0; i < length; i++) {\n                if (Games[_game].tokenPrice[arr[i]].tokenOwner == erc721Address.ownerOf(arr[i])) {\n                    if (Games[_game].tokenPrice[arr[i]].fee > 0) {\n                        uint256 eth = Games[_game].tokenPrice[arr[i]].fee;\n                        if(Games[_game].tokenPrice[arr[i]].isHightlight) eth = eth.add(Games[_game].hightLightFee);\n                        if(address(this).balance >= eth) {\n                            Games[_game].tokenPrice[arr[i]].tokenOwner.transfer(eth);\n                        }\n                    }\n                    else if (Games[_game].tokenPrice[arr[i]].hbfee > 0) {\n                        uint hb = Games[_game].tokenPrice[arr[i]].hbfee;\n                        if(Games[_game].tokenPrice[arr[i]].isHightlight) hb = hb.add(Games[_game].hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16));\n                        if(hbwalletToken.balanceOf(address(this)) >= hb) {\n                            hbwalletToken.transfer(Games[_game].tokenPrice[arr[i]].tokenOwner, hb);\n                        }\n                    }\n                    resetPrice(_game, arr[i]);\n                }\n            }\n        }\n        _withdraw(address(this).balance, hbwalletToken.balanceOf(address(this)));\n    }\n\n    function revenue() public view returns (uint256, uint){\n\n        uint256 ethfee = 0;\n        uint256 hbfee = 0;\n        for(uint j = 0; j< arrGames.length; j++) {\n\n            address _game = arrGames[j];\n            IERC721 erc721Address = IERC721(arrGames[j]);\n            for (uint i = 0; i < Games[_game].tokenIdSale.length; i++) {\n                if (Games[_game].tokenPrice[Games[_game].tokenIdSale[i]].tokenOwner == erc721Address.ownerOf(Games[_game].tokenIdSale[i])) {\n                    if (Games[_game].tokenPrice[Games[_game].tokenIdSale[i]].fee > 0) {\n                        ethfee = ethfee.add(Games[_game].tokenPrice[Games[_game].tokenIdSale[i]].fee);\n                    }\n                    else if (Games[_game].tokenPrice[Games[_game].tokenIdSale[i]].hbfee > 0) {\n                        hbfee = hbfee.add(Games[_game].tokenPrice[Games[_game].tokenIdSale[i]].hbfee);\n                    }\n                }\n            }\n        }\n\n        uint256 eth = address(this).balance.sub(ethfee);\n        uint256 hb = hbwalletToken.balanceOf(address(this)).sub(hbfee);\n        return (eth, hb);\n    }\n\n    function changeCeo(address _address) public onlyCeoAddress {\n        require(_address != address(0));\n        ceoAddress = _address;\n\n    }\n\n    function buy(address _game, uint256 tokenId) public payable {\n        IERC721 erc721Address = IERC721(_game);\n        require(getApproved(_game, tokenId) == address(this));\n        require(Games[_game].tokenPrice[tokenId].price > 0 && Games[_game].tokenPrice[tokenId].price == msg.value);\n        erc721Address.transferFrom(Games[_game].tokenPrice[tokenId].tokenOwner, msg.sender, tokenId);\n        Games[_game].tokenPrice[tokenId].tokenOwner.transfer(msg.value);\n        resetPrice(_game, tokenId);\n    }\n\n    function buyWithoutCheckApproved(address _game, uint256 tokenId) public payable {\n        IERC721 erc721Address = IERC721(_game);\n        require(Games[_game].tokenPrice[tokenId].price > 0 && Games[_game].tokenPrice[tokenId].price == msg.value);\n        erc721Address.transferFrom(Games[_game].tokenPrice[tokenId].tokenOwner, msg.sender, tokenId);\n        Games[_game].tokenPrice[tokenId].tokenOwner.transfer(msg.value);\n        resetPrice(_game, tokenId);\n    }\n\n    function resetPrice(address _game, uint256 _tokenId) private {\n        Games[_game].tokenPrice[_tokenId] = Price(address(0), 0, 0, 0, false);\n        for (uint8 i = 0; i < Games[_game].tokenIdSale.length; i++) {\n            if (Games[_game].tokenIdSale[i] == _tokenId) {\n                _burnArrayTokenIdSale(_game, i);\n            }\n        }\n    }\n}",
  "bytecode": "608060405273fce92d4163aa532aa096de8a3c4fef9f875bc55f600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ec7ba74789694d0d03d458965370dc7cf2fe75ba600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103e860035560156004553480156100c557600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060056000735d00d312e171be5342067c09bae883f9bcb2003b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600060056000735d00d312e171be5342067c09bae883f9bcb2003b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600060056000735d00d312e171be5342067c09bae883f9bcb2003b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f43000060056000735d00d312e171be5342067c09bae883f9bcb2003b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055506006735d00d312e171be5342067c09bae883f9bcb2003b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060006005600073dceaf1652a131f32a821468dc03a92df0edd86ea73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060006005600073dceaf1652a131f32a821468dc03a92df0edd86ea73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060006005600073dceaf1652a131f32a821468dc03a92df0edd86ea73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f4300006005600073dceaf1652a131f32a821468dc03a92df0edd86ea73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550600673dceaf1652a131f32a821468dc03a92df0edd86ea90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060006005600073273f7f8e6489682df756151f5525576e322d51a373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060006005600073273f7f8e6489682df756151f5525576e322d51a373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060006005600073273f7f8e6489682df756151f5525576e322d51a373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f4300006005600073273f7f8e6489682df756151f5525576e322d51a373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550600673273f7f8e6489682df756151f5525576e322d51a390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506000600560007306012c8cf97bead5deae237070f9587f8e7a266d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600560007306012c8cf97bead5deae237070f9587f8e7a266d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506000600560007306012c8cf97bead5deae237070f9587f8e7a266d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f430000600560007306012c8cf97bead5deae237070f9587f8e7a266d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005018190555060067306012c8cf97bead5deae237070f9587f8e7a266d90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600060056000731276dce965ada590e42d62b3953ddc1ddceb039273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600060056000731276dce965ada590e42d62b3953ddc1ddceb039273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600060056000731276dce965ada590e42d62b3953ddc1ddceb039273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f43000060056000731276dce965ada590e42d62b3953ddc1ddceb039273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055506006731276dce965ada590e42d62b3953ddc1ddceb039290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060006005600073e60d2325f996e197eedded8964227a0c6ca82d0f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060006005600073e60d2325f996e197eedded8964227a0c6ca82d0f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060006005600073e60d2325f996e197eedded8964227a0c6ca82d0f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f4300006005600073e60d2325f996e197eedded8964227a0c6ca82d0f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550600673e60d2325f996e197eedded8964227a0c6ca82d0f90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060006005600073617913dd43dbdf4236b85ec7bdf9adfd7e35b34073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060006005600073617913dd43dbdf4236b85ec7bdf9adfd7e35b34073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060006005600073617913dd43dbdf4236b85ec7bdf9adfd7e35b34073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f4300006005600073617913dd43dbdf4236b85ec7bdf9adfd7e35b34073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550600673617913dd43dbdf4236b85ec7bdf9adfd7e35b34090806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060006005600073ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060006005600073ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060006005600073ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f4300006005600073ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550600673ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060006005600073f26a23019b4699068bb54457f32dafcf22a9d37173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060006005600073f26a23019b4699068bb54457f32dafcf22a9d37173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060006005600073f26a23019b4699068bb54457f32dafcf22a9d37173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f4300006005600073f26a23019b4699068bb54457f32dafcf22a9d37173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550600673f26a23019b4699068bb54457f32dafcf22a9d37190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600060056000738c9b261faef3b3c2e64ab5e58e04615f8c78809973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600060056000738c9b261faef3b3c2e64ab5e58e04615f8c78809973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600060056000738c9b261faef3b3c2e64ab5e58e04615f8c78809973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550666a94d74f43000060056000738c9b261faef3b3c2e64ab5e58e04615f8c78809973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055506006738c9b261faef3b3c2e64ab5e58e04615f8c78809990806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061515780620014766000396000f3fe60806040526004361061014b5760003560e01c806385b017e1116100b6578063c9f7153c1161006f578063c9f7153c1461080c578063cce7ec13146108c7578063db83b4c014610915578063e367b5d51461092c578063f2fde38b146109a6578063f91d4fd9146109f75761014b565b806385b017e1146105e15780638da5cb5b1461066b5780638f58bd8a146106c2578063903d429614610711578063a0ebff3414610759578063c8a61698146107bb5761014b565b80633e9491a2116101085780633e9491a2146103fa578063464311a61461042c57806347431c4c1461049b57806358b7acfe146104e95780636adeecb11461058b578063722713f7146105b65761014b565b8063098f2366146101505780630a0f8168146101eb5780631f29d2dc146102425780631f3752a9146102dd5780633957cc67146103085780633c2ab17f1461038b575b600080fd5b34801561015c57600080fd5b506101a96004803603604081101561017357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a4e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101f757600080fd5b50610200610ae9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024e57600080fd5b5061029b6004803603604081101561026557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b0f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e957600080fd5b506102f2610baa565b6040518082815260200191505060405180910390f35b34801561031457600080fd5b506103756004803603608081101561032b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610bb0565b6040518082815260200191505060405180910390f35b34801561039757600080fd5b506103f8600480360360808110156103ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610fbd565b005b34801561040657600080fd5b5061040f6118a8565b604051808381526020018281526020019250505060405180910390f35b34801561043857600080fd5b506104856004803603604081101561044f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fb8565b6040518082815260200191505060405180910390f35b6104e7600480360360408110156104b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061238d565b005b3480156104f557600080fd5b50610560600480360360a081101561050c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919050505061266b565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561059757600080fd5b506105a061293b565b6040518082815260200191505060405180910390f35b3480156105c257600080fd5b506105cb612941565b6040518082815260200191505060405180910390f35b3480156105ed57600080fd5b5061064e6004803603608081101561060457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050612960565b604051808381526020018281526020019250505060405180910390f35b34801561067757600080fd5b50610680612ce8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ce57600080fd5b506106fb600480360360208110156106e557600080fd5b8101908080359060200190929190505050612d0d565b6040518082815260200191505060405180910390f35b34801561071d57600080fd5b506107576004803603604081101561073457600080fd5b8101908080359060200190929190803560ff169060200190929190505050612d87565b005b6107b96004803603608081101561076f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050612df2565b005b3480156107c757600080fd5b5061080a600480360360208110156107de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133df565b005b34801561081857600080fd5b506108656004803603604081101561082f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506134b7565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b610913600480360360408110156108dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506136b6565b005b34801561092157600080fd5b5061092a6139d5565b005b34801561093857600080fd5b5061097b6004803603602081101561094f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061452b565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156109b257600080fd5b506109f5600480360360208110156109c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061455b565b005b348015610a0357600080fd5b50610a0c6146ac565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610aa557600080fd5b505afa158015610ab9573d6000803e3d6000fd5b505050506040513d6020811015610acf57600080fd5b810190808051906020019092919050505091505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808390508073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b6657600080fd5b505afa158015610b7a573d6000803e3d6000fd5b505050506040513d6020811015610b9057600080fd5b810190808051906020019092919050505091505092915050565b60045481565b60008060008060009050600080899050600187148015610c9257506000600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008b8152602001908152602001600020600101541480610c915750600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a815260200190815260200160002060040160009054906101000a900460ff16155b5b15610d1d57610d1a662386f26fc10000610d0c6002610cfe600454600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501546146d290919063ffffffff16565b61470c90919063ffffffff16565b61470c90919063ffffffff16565b92505b87600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008b8152602001908152602001600020600101541015610fad57610e4c600354610e3e600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610e30600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008f8152602001908152602001600020600101548d61473290919063ffffffff16565b6146d290919063ffffffff16565b61470c90919063ffffffff16565b9350610e8f662386f26fc10000610e816002610e73600454896146d290919063ffffffff16565b61470c90919063ffffffff16565b61470c90919063ffffffff16565b94506000600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008b8152602001908152602001600020600101541415610fac57600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401548510610f5357610f4c838661475290919063ffffffff16565b9150610fab565b610fa883600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015461475290919063ffffffff16565b91505b5b5b8195505050505050949350505050565b838360008290503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561102c57600080fd5b505afa158015611040573d6000803e3d6000fd5b505050506040513d602081101561105657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461108757600080fd5b84600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008881526020019081526020016000206001015414156110ea57600080fd5b600080600080905060008a905060008a90506001891480156111ce57506000600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008d81526020019081526020016000206001015414806111cd5750600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008c815260200190815260200160002060040160009054906101000a900460ff16155b5b1561125957611256662386f26fc10000611248600261123a600454600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501546146d290919063ffffffff16565b61470c90919063ffffffff16565b61470c90919063ffffffff16565b92505b89600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008d81526020019081526020016000206001015410156117d95761138860035461137a600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461136c600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000878152602001908152602001600020600101548f61473290919063ffffffff16565b6146d290919063ffffffff16565b61470c90919063ffffffff16565b93506113cb662386f26fc100006113bd60026113af600454896146d290919063ffffffff16565b61470c90919063ffffffff16565b61470c90919063ffffffff16565b94506000600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008d815260200190815260200160002060010154141561176957600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015485106115ad57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306114c8878a61475290919063ffffffff16565b6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561156457600080fd5b505af1158015611578573d6000803e3d6000fd5b505050506040513d602081101561158e57600080fd5b81019080805190602001909291905050506115a857600080fd5b611768565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333061164287600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015461475290919063ffffffff16565b6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156116de57600080fd5b505af11580156116f2573d6000803e3d6000fd5b505050506040513d602081101561170857600080fd5b810190808051906020019092919050505061172257600080fd5b600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015494505b5b6117d2600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008d8152602001908152602001600020600301548661475290919063ffffffff16565b9450611888565b611842600354611834600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201548d6146d290919063ffffffff16565b61470c90919063ffffffff16565b9350611885662386f26fc100006118776002611869600454896146d290919063ffffffff16565b61470c90919063ffffffff16565b61470c90919063ffffffff16565b94505b61189a8c8c8c60008960018f14614771565b505050505050505050505050565b6000806000809050600080905060008090505b600680549050811015611e8b576000600682815481106118d757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006006838154811061191357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008090505b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180549050811015611e7b578173ffffffffffffffffffffffffffffffffffffffff16636352211e600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010183815481106119fc57fe5b90600052602060002001546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a3b57600080fd5b505afa158015611a4f573d6000803e3d6000fd5b505050506040513d6020811015611a6557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018481548110611b1d57fe5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611e6e576000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018481548110611c0957fe5b90600052602060002001548152602001908152602001600020600201541115611cf357611cec600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018481548110611cc057fe5b90600052602060002001548152602001908152602001600020600201548761475290919063ffffffff16565b9550611e6d565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018481548110611d8657fe5b90600052602060002001548152602001908152602001600020600301541115611e6c57611e69600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018481548110611e3d57fe5b90600052602060002001548152602001908152602001600020600301548661475290919063ffffffff16565b94505b5b5b8080600101915050611946565b50505080806001019150506118bb565b506000611eb8833073ffffffffffffffffffffffffffffffffffffffff163161473290919063ffffffff16565b90506000611fa883600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611f5f57600080fd5b505afa158015611f73573d6000803e3d6000fd5b505050506040513d6020811015611f8957600080fd5b810190808051906020019092919050505061473290919063ffffffff16565b9050818195509550505050509091565b6000828260008290503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d602081101561205357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461208457600080fd5b6000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000878152602001908152602001600020600201541115612185573373ffffffffffffffffffffffffffffffffffffffff166108fc600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000888152602001908152602001600020600201549081150290604051600060405180830381858888f1935050505015801561217f573d6000803e3d6000fd5b50612321565b6000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600087815260200190815260200160002060030154111561232057600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000898152602001908152602001600020600301546040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156122e357600080fd5b505af11580156122f7573d6000803e3d6000fd5b505050506040513d602081101561230d57600080fd5b8101908080519060200190929190505050505b5b61232b8686614a2a565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600086815260200190815260200160002060010154935050505092915050565b60008290506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008481526020019081526020016000206001015411801561244d575034600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600084815260200190815260200160002060010154145b61245657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561258757600080fd5b505af115801561259b573d6000803e3d6000fd5b50505050600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561265b573d6000803e3d6000fd5b506126668383614a2a565b505050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146126ca57600080fd5b600088101580156126dc575060008710155b80156126e9575060008610155b80156126f6575060008510155b6126ff57600080fd5b87600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555086600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555085600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555084600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154935093509350935095509550955095915050565b60035481565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600080600080600090506000600186148015612a3e57506000600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a8152602001908152602001600020600101541480612a3d5750600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600089815260200190815260200160002060040160009054906101000a900460ff16155b5b15612a8957600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015491505b86600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a8152602001908152602001600020600101541015612cd657612bb8600354612baa600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154612b9c600560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008e8152602001908152602001600020600101548c61473290919063ffffffff16565b6146d290919063ffffffff16565b61470c90919063ffffffff16565b92506000600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a8152602001908152602001600020600101541415612cd557600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301548310612c7c57612c75828461475290919063ffffffff16565b9050612cd4565b612cd182600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015461475290919063ffffffff16565b90505b5b5b80829450945050505094509492505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d6857600080fd5b6001821015612d7657600080fd5b816004819055506004549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612de157600080fd5b612dee828260ff16614c1e565b5050565b838360008290503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612e6157600080fd5b505afa158015612e75573d6000803e3d6000fd5b505050506040513d6020811015612e8b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614612ebc57600080fd5b84600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000888152602001908152602001600020600101541415612f1f57600080fd5b60008060009050600186148015612ff857506000600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a8152602001908152602001600020600101541480612ff75750600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600089815260200190815260200160002060040160009054906101000a900460ff16155b5b1561304357600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015490505b86600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a815260200190815260200160002060010154101561335657613172600354613164600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154613156600560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008e8152602001908152602001600020600101548c61473290919063ffffffff16565b6146d290919063ffffffff16565b61470c90919063ffffffff16565b91506000600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a81526020019081526020016000206001015414156132e657600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154821061323f5761322f818361475290919063ffffffff16565b341461323a57600080fd5b6132e5565b61329481600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015461475290919063ffffffff16565b341461329f57600080fd5b600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015491505b5b61334f600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a8152602001908152602001600020600201548361475290919063ffffffff16565b91506133c2565b6133bf6003546133b1600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201548a6146d290919063ffffffff16565b61470c90919063ffffffff16565b91505b6133d489898985600060018c14614771565b505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461343957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561347357600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600088815260200190815260200160002060010154600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600089815260200190815260200160002060020154600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008a815260200190815260200160002060030154600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008b815260200190815260200160002060040160009054906101000a900460ff16849450945094509450945094509295509295909350565b60008290503073ffffffffffffffffffffffffffffffffffffffff166136dc8484610a4e565b73ffffffffffffffffffffffffffffffffffffffff16146136fc57600080fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000848152602001908152602001600020600101541180156137b7575034600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600084815260200190815260200160002060010154145b6137c057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156138f157600080fd5b505af1158015613905573d6000803e3d6000fd5b50505050600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156139c5573d6000803e3d6000fd5b506139d08383614a2a565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613a2f57600080fd5b60008090505b60068054905081101561442e57600060068281548110613a5157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060068381548110613a8d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506060600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015613b4857602002820191906000526020600020905b815481526020019060010190808311613b34575b505050505090506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180549050905060008090505b8181101561441c578373ffffffffffffffffffffffffffffffffffffffff16636352211e848381518110613bcf57fe5b60200260200101516040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613c0b57600080fd5b505afa158015613c1f573d6000803e3d6000fd5b505050506040513d6020811015613c3557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858481518110613cac57fe5b6020026020010151815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561440f576000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858481518110613d5457fe5b60200260200101518152602001908152602001600020600201541115613fab576000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858481518110613dc657fe5b60200260200101518152602001908152602001600020600201549050600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858481518110613e3257fe5b6020026020010151815260200190815260200160002060040160009054906101000a900460ff1615613eb657613eb3600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501548261475290919063ffffffff16565b90505b803073ffffffffffffffffffffffffffffffffffffffff163110613fa557600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858481518110613f2457fe5b6020026020010151815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613fa3573d6000803e3d6000fd5b505b506143f1565b6000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858481518110613ffd57fe5b602002602001015181526020019081526020016000206003015411156143f0576000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600085848151811061406f57fe5b60200260200101518152602001908152602001600020600301549050600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008584815181106140db57fe5b6020026020010151815260200190815260200160002060040160009054906101000a900460ff161561419f5761419c61418d662386f26fc1000061417f6002614171600454600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501546146d290919063ffffffff16565b61470c90919063ffffffff16565b61470c90919063ffffffff16565b8261475290919063ffffffff16565b90505b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561423f57600080fd5b505afa158015614253573d6000803e3d6000fd5b505050506040513d602081101561426957600080fd5b8101908080519060200190929190505050106143ee57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600087868151811061430d57fe5b6020026020010151815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156143b157600080fd5b505af11580156143c5573d6000803e3d6000fd5b505050506040513d60208110156143db57600080fd5b8101908080519060200190929190505050505b505b5b61440e8584838151811061440157fe5b6020026020010151614a2a565b5b8080600101915050613b9f565b50505050508080600101915050613a35565b506145293073ffffffffffffffffffffffffffffffffffffffff1631600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156144e957600080fd5b505afa1580156144fd573d6000803e3d6000fd5b505050506040513d602081101561451357600080fd5b8101908080519060200190929190505050614c1e565b565b60056020528060005260406000206000915090508060020154908060030154908060040154908060050154905084565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146145b457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156145ee57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808314156146e55760009050614706565b60008284029050828482816146f657fe5b041461470157600080fd5b809150505b92915050565b600080821161471a57600080fd5b600082848161472557fe5b0490508091505092915050565b60008282111561474157600080fd5b600082840390508091505092915050565b60008082840190508381101561476757600080fd5b8091505092915050565b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001821515815250600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101859080600181540180825580915050906001820390600052602060002001600090919290919091505550600080905060008090505b6006805490508110156149a057738c9b261faef3b3c2e64ab5e58e04615f8c78809973ffffffffffffffffffffffffffffffffffffffff166006828154811061494757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561499357600191505b8080600101915050614902565b5080614a21576006738c9b261faef3b3c2e64ab5e58e04615f8c78809990806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50505050505050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160001515815250600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555090505060008090505b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805490508160ff161015614c195781600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018260ff1681548110614bf057fe5b90600052602060002001541415614c0c57614c0b8382614e6b565b5b8080600101915050614b4f565b505050565b813073ffffffffffffffffffffffffffffffffffffffff163110158015614d1e575080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614ce057600080fd5b505afa158015614cf4573d6000803e3d6000fd5b505050506040513d6020811015614d0a57600080fd5b810190808051906020019092919050505010155b614d2757600080fd5b6000821115614d78573373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015614d76573d6000803e3d6000fd5b505b6000811115614e6757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015614e2a57600080fd5b505af1158015614e3e573d6000803e3d6000fd5b505050506040513d6020811015614e5457600080fd5b8101908080519060200190929190505050505b5050565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805490508160ff1610614ebf576150d6565b60008160ff1690505b6001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054905003811015614fdb57600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001820181548110614f6857fe5b9060005260206000200154600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018281548110614fc057fe5b90600052602060002001819055508080600101915050614ec8565b50600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180549050038154811061507157fe5b9060005260206000200160009055600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054809190600190036150d491906150da565b505b5050565b815481835581811115615101578183600052602060002091820191016151009190615106565b5b505050565b61512891905b8082111561512457600081600090555060010161510c565b5090565b9056fea165627a7a7230582019ecc8e299dfa8537714442ddb8b60e5898eba3073b9f4bd67cbf630917fadf20029"
}