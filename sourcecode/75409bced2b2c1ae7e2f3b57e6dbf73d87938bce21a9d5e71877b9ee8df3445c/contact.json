{
  "address": "0x4d4f6ca4d5b1df946fd85ed20101d9921c6b90ee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ComplexChildToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-16\n*/\n\npragma solidity ^0.4.18;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/ChildToken.sol\n\n/**\n * @title ChildToken\n * @dev ChildToken is the base contract of child token contracts\n */\ncontract ChildToken is StandardToken {\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/Slogan.sol\n\n/**\n * @title Slogan\n * @dev Developers and owners can set a slogan in their contract\n */\ncontract Slogan is Ownable {\n\tstring public slogan;\n\n\tevent SloganChanged(string indexed oldSlogan, string indexed newSlogan);\n\n\tfunction Slogan(string _slogan) public {\n\t\tslogan = _slogan;\n\t}\n\n\tfunction ownerChangeSlogan(string _slogan) onlyOwner public {\n\t\tSloganChanged(slogan, _slogan);\n\t\tslogan = _slogan;\n\t}\n}\n\n/**\n * @title Bitansuo\n * @dev Bitansuo is a contract with bitansuo's slogan.\n */\ncontract Bitansuo is Slogan {\n\tfunction Bitansuo() Slogan(\"币探索 (bitansuo.com | bitansuo.eth)\") public {\n\t}\n}\n\n// File: contracts/Refundable.sol\n\n/**\n * @title Refundable\n * @dev Base contract that can refund funds(ETH and tokens) by owner.\n * @dev Reference TokenDestructible(zeppelinand) TokenDestructible(zeppelin)\n */\ncontract Refundable is Bitansuo {\n\tevent RefundETH(address indexed owner, address indexed payee, uint256 amount);\n\tevent RefundERC20(address indexed owner, address indexed payee, address indexed token, uint256 amount);\n\n\tfunction Refundable() public payable {\n\t}\n\n\tfunction refundETH(address payee, uint256 amount) onlyOwner public {\n\t\trequire(payee != address(0));\n\t\trequire(this.balance >= amount);\n\t\tassert(payee.send(amount));\n\t\tRefundETH(owner, payee, amount);\n\t}\n\n\tfunction refundERC20(address tokenContract, address payee, uint256 amount) onlyOwner public {\n\t\trequire(payee != address(0));\n\t\tbool isContract;\n\t\tassembly {\n\t\t\tisContract := gt(extcodesize(tokenContract), 0)\n\t\t}\n\t\trequire(isContract);\n\n\t\tERC20 token = ERC20(tokenContract);\n\t\tassert(token.transfer(payee, amount));\n\t\tRefundERC20(owner, payee, tokenContract, amount);\n\t}\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/ComplexChildToken.sol\n\n/**\n * @title ComplexChildToken\n * @dev Complex child token to be generated by TokenFather.\n */\ncontract ComplexChildToken is ChildToken, Refundable, MintableToken, BurnableToken {\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tbool public canBurn;\n\n\tevent Burn(address indexed burner, uint256 value);\n\n\tfunction ComplexChildToken(address _owner, string _name, string _symbol, uint256 _initSupply, uint8 _decimals,\n\t\tbool _canMint, bool _canBurn) public {\n\t\trequire(_owner != address(0));\n\t\towner = _owner;\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\n\t\tuint256 amount = _initSupply;\n\t\ttotalSupply_ = totalSupply_.add(amount);\n\t\tbalances[owner] = balances[owner].add(amount);\n\t\tTransfer(address(0), owner, amount);\n\n\t\tif (!_canMint) {\n\t\t\tmintingFinished = true;\n\t\t}\n\t\tcanBurn = _canBurn;\n\t}\n\n\t/**\n\t* @dev Burns a specific amount of tokens.\n\t* @param _value The amount of token to be burned.\n\t*/\n\tfunction burn(uint256 _value) public {\n\t\trequire(canBurn);\n\t\tBurnableToken.burn(_value);\n\t}\n\n\tfunction ownerCanBurn(bool _canBurn) onlyOwner public {\n\t\tcanBurn = _canBurn;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slogan\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_canBurn\",\"type\":\"bool\"}],\"name\":\"ownerCanBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"},{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refundERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refundETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slogan\",\"type\":\"string\"}],\"name\":\"ownerChangeSlogan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_canMint\",\"type\":\"bool\"},{\"name\":\"_canBurn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldSlogan\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"newSlogan\",\"type\":\"string\"}],\"name\":\"SloganChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526005805460ff1916905534156200001a57600080fd5b6040516200157238038062001572833981016040528080519190602001805182019190602001805182019190602001805191906020018051919060200180519190602001805191506000905060606040519081016040908152602782527fe5b881e68ea2e7b4a22028626974616e73756f2e636f6d207c20626974616e7360208301527f756f2e65746829000000000000000000000000000000000000000000000000009082015260038054600160a060020a03191633600160a060020a03161790556004818051620000f292916020019062000264565b5050600160a060020a03881615156200010a57600080fd5b60038054600160a060020a031916600160a060020a038a1617905560068780516200013a92916020019062000264565b5060078680516200015092916020019062000264565b50506008805460ff191660ff851617905560015484906200018090826401000000006200024d8102620010c51704565b600155600354600160a060020a0316600090815260208190526040902054620001b89082640100000000620010c56200024d82021704565b60038054600160a060020a0390811660009081526020819052604080822094909455915416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a382151562000227576005805460ff191660011790555b50600880549115156101000261ff00199092169190911790555062000309945050505050565b6000828201838110156200025d57fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a757805160ff1916838001178555620002d7565b82800160010185558215620002d7579182015b82811115620002d7578251825591602001919060010190620002ba565b50620002e5929150620002e9565b5090565b6200030691905b80821115620002e55760008155600101620002f0565b90565b61125980620003196000396000f3006060604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461013757806306fdde031461015e578063095ea7b3146101e857806318160ddd1461020a57806323b872dd1461022f57806324e5eeaa146102575780632fbc83531461026a578063313ce5671461028457806340c10f19146102ad57806342966c68146102cf57806348c44712146102e55780634bd227661461030d578063661884631461032f57806370a08231146103515780637d64bcb4146103705780638da5cb5b1461038357806395d89b41146103b2578063a9059cbb146103c5578063c1eb1840146103e7578063d73dd623146103fa578063dd62ed3e1461041c578063e1d94d9414610441578063f2fde38b14610492575b600080fd5b341561014257600080fd5b61014a6104b1565b604051901515815260200160405180910390f35b341561016957600080fd5b6101716104ba565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ad578082015183820152602001610195565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f357600080fd5b61014a600160a060020a0360043516602435610558565b341561021557600080fd5b61021d6105c4565b60405190815260200160405180910390f35b341561023a57600080fd5b61014a600160a060020a03600435811690602435166044356105cb565b341561026257600080fd5b61017161074b565b341561027557600080fd5b61028260043515156107b6565b005b341561028f57600080fd5b6102976107eb565b60405160ff909116815260200160405180910390f35b34156102b857600080fd5b61014a600160a060020a03600435166024356107f4565b34156102da57600080fd5b6102826004356108fb565b34156102f057600080fd5b610282600160a060020a036004358116906024351660443561091d565b341561031857600080fd5b610282600160a060020a0360043516602435610a4c565b341561033a57600080fd5b61014a600160a060020a0360043516602435610b09565b341561035c57600080fd5b61021d600160a060020a0360043516610c03565b341561037b57600080fd5b61014a610c1e565b341561038e57600080fd5b610396610c8b565b604051600160a060020a03909116815260200160405180910390f35b34156103bd57600080fd5b610171610c9a565b34156103d057600080fd5b61014a600160a060020a0360043516602435610d05565b34156103f257600080fd5b61014a610e17565b341561040557600080fd5b61014a600160a060020a0360043516602435610e25565b341561042757600080fd5b61021d600160a060020a0360043581169060243516610ec9565b341561044c57600080fd5b61028260046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610ef495505050505050565b341561049d57600080fd5b610282600160a060020a0360043516611018565b60055460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6001545b90565b6000600160a060020a03831615156105e257600080fd5b600160a060020a03841660009081526020819052604090205482111561060757600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561063a57600080fd5b600160a060020a038416600090815260208190526040902054610663908363ffffffff6110b316565b600160a060020a038086166000908152602081905260408082209390935590851681522054610698908363ffffffff6110c516565b600160a060020a03808516600090815260208181526040808320949094558783168252600281528382203390931682529190915220546106de908363ffffffff6110b316565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105505780601f1061052557610100808354040283529160200191610550565b60035433600160a060020a039081169116146107d157600080fd5b600880549115156101000261ff0019909216919091179055565b60085460ff1681565b60035460009033600160a060020a0390811691161461081257600080fd5b60055460ff161561082257600080fd5b600154610835908363ffffffff6110c516565b600155600160a060020a038316600090815260208190526040902054610861908363ffffffff6110c516565b600160a060020a0384166000818152602081905260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600854610100900460ff16151561091157600080fd5b61091a816110db565b50565b600354600090819033600160a060020a0390811691161461093d57600080fd5b600160a060020a038416151561095257600080fd5b6000853b1191508161096357600080fd5b5083600160a060020a03811663a9059cbb85856000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109db57600080fd5b6102c65a03f115156109ec57600080fd5b5050506040518051905015156109fe57fe5b600354600160a060020a038087169186821691167fa1e4855d49b75f7254460c3e0a5572cde83f71d659655bcef5319969068d5a638660405190815260200160405180910390a45050505050565b60035433600160a060020a03908116911614610a6757600080fd5b600160a060020a0382161515610a7c57600080fd5b600160a060020a0330163181901015610a9457600080fd5b600160a060020a03821681156108fc0282604051600060405180830381858888f193505050501515610ac257fe5b600354600160a060020a0380841691167f94c0c9648f44e27ff77f68e457219cb803cf319b29a83403156a3ef21747101e8360405190815260200160405180910390a35050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610b6657600160a060020a033381166000908152600260209081526040808320938816835292905290812055610b9d565b610b76818463ffffffff6110b316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60035460009033600160a060020a03908116911614610c3c57600080fd5b60055460ff1615610c4c57600080fd5b6005805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105505780601f1061052557610100808354040283529160200191610550565b6000600160a060020a0383161515610d1c57600080fd5b600160a060020a033316600090815260208190526040902054821115610d4157600080fd5b600160a060020a033316600090815260208190526040902054610d6a908363ffffffff6110b316565b600160a060020a033381166000908152602081905260408082209390935590851681522054610d9f908363ffffffff6110c516565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600854610100900460ff1681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610e5d908363ffffffff6110c516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610f0f57600080fd5b806040518082805190602001908083835b60208310610f3f5780518252601f199092019160209182019101610f20565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060046040518082805460018160011615610100020316600290048015610fc85780601f10610fa6576101008083540402835291820191610fc8565b820191906000526020600020905b815481529060010190602001808311610fb4575b505091505060405180910390207f1bd1859f91725c6c9db8e93c05d317c051c0a026aac89354dcfcef75b1534b2d60405160405180910390a36004818051611014929160200190611195565b5050565b60035433600160a060020a0390811691161461103357600080fd5b600160a060020a038116151561104857600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828211156110bf57fe5b50900390565b6000828201838110156110d457fe5b9392505050565b600160a060020a03331660009081526020819052604081205482111561110057600080fd5b5033600160a060020a03811660009081526020819052604090205461112590836110b3565b600160a060020a038216600090815260208190526040902055600154611151908363ffffffff6110b316565b600155600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111d657805160ff1916838001178555611203565b82800160010185558215611203579182015b828111156112035782518255916020019190600101906111e8565b5061120f929150611213565b5090565b6105c891905b8082111561120f57600081556001016112195600a165627a7a7230582094d9e4d5610184c95e28bf843fe60c0f2bcb1ae3e80316d7c8976bbcdf505ad6002900000000000000000000000000f9425a20d223f3e318dce2b2b785b79335384900000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000e37983df262343f300000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015e5b881e68ea2e7b4a2e6b58be8af95e4bba3e5b881000000000000000000000000000000000000000000000000000000000000000000000000000000000000044254535400000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000f9425a20d223f3e318dce2b2b785b79335384900000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000e37983df262343f300000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015e5b881e68ea2e7b4a2e6b58be8af95e4bba3e5b881000000000000000000000000000000000000000000000000000000000000000000000000000000000000044254535400000000000000000000000000000000000000000000000000000000"
}