{
  "address": "0xee16240bfb5d1bd8b50d8d97b9a71ec1eba5dcc5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VLToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-17\n*/\n\npragma solidity ^0.4.18;\n\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address _who) public constant returns (uint);\n  function allowance(address _owner, address _spender) public constant returns (uint);\n\n  function transfer(address _to, uint _value) public returns (bool ok);\n  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\n  function approve(address _spender, uint _value) public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract VLToken is ERC20, Ownable, SafeMath {\n\n    // Token related informations\n    string public constant name = \"Villiam Blockchain Token\";\n    string public constant symbol = \"VLT\";\n    uint256 public constant decimals = 18; // decimal places\n\n    // Start withdraw of tokens\n    uint256 public startWithdraw;\n\n    // Address of wallet from which tokens assigned\n    address public ethExchangeWallet;\n\n    // MultiSig Wallet Address\n    address public VLTMultisig;\n\n    uint256 public tokensPerEther = 1500;\n\n    bool public startStop = false;\n\n    mapping (address => uint256) public walletAngelSales;\n    mapping (address => uint256) public walletPESales;\n\n    mapping (address => uint256) public releasedAngelSales;\n    mapping (address => uint256) public releasedPESales;\n\n    mapping (uint => address) public walletAddresses;\n\n    // Mapping of token balance and allowed address for each address with transfer limit\n    mapping (address => uint256) balances;\n    //mapping of allowed address for each address with tranfer limit\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function VLToken() public {\n        totalSupply = 500000000 ether;\n        balances[msg.sender] = totalSupply;\n    }\n\n    // Only to be called by Owner of this contract\n    // @param _id Id of lock wallet address\n    // @param _walletAddress Address of lock wallet\n    function addWalletAddresses(uint _id, address _walletAddress) onlyOwner external{\n        require(_walletAddress != address(0));\n        walletAddresses[_id] = _walletAddress;\n    }\n\n    // Owner can Set Multisig wallet\n    // @param _vltMultisig address of Multisig wallet.\n    function setVLTMultiSig(address _vltMultisig) onlyOwner external{\n        require(_vltMultisig != address(0));\n        VLTMultisig = _vltMultisig;\n    }\n\n    // Only to be called by Owner of this contract\n    // @param _ethExchangeWallet Ether Address of exchange wallet\n    function setEthExchangeWallet(address _ethExchangeWallet) onlyOwner external {\n        require(_ethExchangeWallet != address(0));\n        ethExchangeWallet = _ethExchangeWallet;\n    }\n\n    // Only to be called by Owner of this contract\n    // @param _tokensPerEther Tokens per ether during ICO stages\n    function setTokensPerEther(uint256 _tokensPerEther) onlyOwner external {\n        require(_tokensPerEther > 0);\n        tokensPerEther = _tokensPerEther;\n    }\n\n    function startStopICO(bool status) onlyOwner external {\n        startStop = status;\n    }\n\n    function startLockingPeriod() onlyOwner external {\n        startWithdraw = now;\n    }\n\n    // Assign tokens to investor with locking period\n    function assignToken(address _investor,uint256 _tokens) external {\n        // Tokens assigned by only Angel Sales And PE Sales wallets\n        require(msg.sender == walletAddresses[0] || msg.sender == walletAddresses[1]);\n\n        // Check investor address and tokens.Not allow 0 value\n        require(_investor != address(0) && _tokens > 0);\n        // Check wallet have enough token balance to assign\n        require(_tokens <= balances[msg.sender]);\n        \n        // Debit the tokens from the wallet\n        balances[msg.sender] = safeSub(balances[msg.sender],_tokens);\n\n        uint256 calCurrentTokens = getPercentageAmount(_tokens, 20);\n        uint256 allocateTokens = safeSub(_tokens, calCurrentTokens);\n\n        // Initially assign 20% tokens to the investor\n        balances[_investor] = safeAdd(balances[_investor], calCurrentTokens);\n\n        // Assign tokens to the investor\n        if(msg.sender == walletAddresses[0]){\n            walletAngelSales[_investor] = safeAdd(walletAngelSales[_investor],allocateTokens);\n            releasedAngelSales[_investor] = safeAdd(releasedAngelSales[_investor], calCurrentTokens);\n        }\n        else if(msg.sender == walletAddresses[1]){\n            walletPESales[_investor] = safeAdd(walletPESales[_investor],allocateTokens);\n            releasedPESales[_investor] = safeAdd(releasedPESales[_investor], calCurrentTokens);\n        }\n        else{\n            revert();\n        }\n    }\n\n    function withdrawTokens() public {\n        require(walletAngelSales[msg.sender] > 0 || walletPESales[msg.sender] > 0);\n        uint256 withdrawableAmount = 0;\n\n        if (walletAngelSales[msg.sender] > 0) {\n            uint256 withdrawableAmountAS = getWithdrawableAmountAS(msg.sender);\n            walletAngelSales[msg.sender] = safeSub(walletAngelSales[msg.sender], withdrawableAmountAS);\n            releasedAngelSales[msg.sender] = safeAdd(releasedAngelSales[msg.sender],withdrawableAmountAS);\n            withdrawableAmount = safeAdd(withdrawableAmount, withdrawableAmountAS);\n        }\n        if (walletPESales[msg.sender] > 0) {\n            uint256 withdrawableAmountPS = getWithdrawableAmountPES(msg.sender);\n            walletPESales[msg.sender] = safeSub(walletPESales[msg.sender], withdrawableAmountPS);\n            releasedPESales[msg.sender] = safeAdd(releasedPESales[msg.sender], withdrawableAmountPS);\n            withdrawableAmount = safeAdd(withdrawableAmount, withdrawableAmountPS);\n        }\n        require(withdrawableAmount > 0);\n        // Assign tokens to the sender\n        balances[msg.sender] = safeAdd(balances[msg.sender], withdrawableAmount);\n    }\n\n    // For wallet Angel Sales\n    function getWithdrawableAmountAS(address _investor) public view returns(uint256) {\n        require(startWithdraw != 0);\n        // interval in months\n        uint interval = safeDiv(safeSub(now,startWithdraw),30 days);\n        // total allocatedTokens\n        uint _allocatedTokens = safeAdd(walletAngelSales[_investor],releasedAngelSales[_investor]);\n        // Atleast 6 months\n        if (interval < 6) { \n            return (0); \n        } else if (interval >= 6 && interval < 9) {\n            return safeSub(getPercentageAmount(40,_allocatedTokens), releasedAngelSales[_investor]);\n        } else if (interval >= 9 && interval < 12) {\n            return safeSub(getPercentageAmount(60,_allocatedTokens), releasedAngelSales[_investor]);\n        } else if (interval >= 12 && interval < 15) {\n            return safeSub(getPercentageAmount(80,_allocatedTokens), releasedAngelSales[_investor]);\n        } else if (interval >= 15) {\n            return safeSub(_allocatedTokens, releasedAngelSales[_investor]);\n        }\n    }\n\n    // For wallet PE Sales\n    function getWithdrawableAmountPES(address _investor) public view returns(uint256) {\n        require(startWithdraw != 0);\n        // interval in months\n        uint interval = safeDiv(safeSub(now,startWithdraw),30 days);\n        // total allocatedTokens\n        uint _allocatedTokens = safeAdd(walletPESales[_investor],releasedPESales[_investor]);\n        // Atleast 12 months\n        if (interval < 12) { \n            return (0); \n        } else if (interval >= 12 && interval < 18) {\n            return safeSub(getPercentageAmount(40,_allocatedTokens), releasedPESales[_investor]);\n        } else if (interval >= 18 && interval < 24) {\n            return safeSub(getPercentageAmount(60,_allocatedTokens), releasedPESales[_investor]);\n        } else if (interval >= 24 && interval < 30) {\n            return safeSub(getPercentageAmount(80,_allocatedTokens), releasedPESales[_investor]);\n        } else if (interval >= 30) {\n            return safeSub(_allocatedTokens, releasedPESales[_investor]);\n        }\n    }\n\n    function getPercentageAmount(uint256 percent,uint256 _tokens) internal pure returns (uint256) {\n        return safeDiv(safeMul(_tokens,percent),100);\n    }\n\n    // Sale of the tokens. Investors can call this method to invest into VLT Tokens\n    function() payable external {\n        // Allow only to invest in ICO stage\n        require(startStop);\n\n        //Sorry !! We only allow to invest with minimum 0.5 Ether as value\n        require(msg.value >= (0.5 ether));\n\n        // multiply by exchange rate to get token amount\n        uint256 calculatedTokens = safeMul(msg.value, tokensPerEther);\n\n        // Wait we check tokens available for assign\n        require(balances[ethExchangeWallet] >= calculatedTokens);\n\n        // Call to Internal function to assign tokens\n        assignTokens(msg.sender, calculatedTokens);\n    }\n\n    // Function will transfer the tokens to investor's address\n    // Common function code for assigning tokens\n    function assignTokens(address investor, uint256 tokens) internal {\n        // Debit tokens from ether exchange wallet\n        balances[ethExchangeWallet] = safeSub(balances[ethExchangeWallet], tokens);\n\n        // Assign tokens to the sender\n        balances[investor] = safeAdd(balances[investor], tokens);\n\n        // Finally token assigned to sender, log the creation event\n        Transfer(ethExchangeWallet, investor, tokens);\n    }\n\n    function finalizeCrowdSale() external{\n        // Check VLT Multisig wallet set or not\n        require(VLTMultisig != address(0));\n        // Send fund to multisig wallet\n        require(VLTMultisig.send(address(this).balance));\n    }\n\n    // @param _who The address of the investor to check balance\n    // @return balance tokens of investor address\n    function balanceOf(address _who) public constant returns (uint) {\n        return balances[_who];\n    }\n\n    // @param _owner The address of the account owning tokens\n    // @param _spender The address of the account able to transfer the tokens\n    // @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public constant returns (uint) {\n        return allowed[_owner][_spender];\n    }\n\n    //  Transfer `value` VLT tokens from sender's account\n    // `msg.sender` to provided account address `to`.\n    // @param _to The address of the recipient\n    // @param _value The number of VLT tokens to transfer\n    // @return Whether the transfer was successful or not\n    function transfer(address _to, uint _value) public returns (bool ok) {\n        //validate receiver address and value.Not allow 0 value\n        require(_to != 0 && _value > 0);\n        uint256 senderBalance = balances[msg.sender];\n        //Check sender have enough balance\n        require(senderBalance >= _value);\n        senderBalance = safeSub(senderBalance, _value);\n        balances[msg.sender] = senderBalance;\n        balances[_to] = safeAdd(balances[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    //  Transfer `value` VLT tokens from sender 'from'\n    // to provided account address `to`.\n    // @param from The address of the sender\n    // @param to The address of the recipient\n    // @param value The number of VLT to transfer\n    // @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint _value) public returns (bool ok) {\n        //validate _from,_to address and _value(Now allow with 0)\n        require(_from != 0 && _to != 0 && _value > 0);\n        //Check amount is approved by the owner for spender to spent and owner have enough balances\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\n        balances[_from] = safeSub(balances[_from],_value);\n        balances[_to] = safeAdd(balances[_to],_value);\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    //  `msg.sender` approves `spender` to spend `value` tokens\n    // @param spender The address of the account able to transfer the tokens\n    // @param value The amount of wei to be approved for transfer\n    // @return Whether the approval was successful or not\n    function approve(address _spender, uint _value) public returns (bool ok) {\n        //validate _spender address\n        require(_spender != 0);\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n}",
  "bytecode": "60806040526105dc6005556000600660006101000a81548160ff02191690831515021790555034801561003157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b019d971e4fe8401e74000000600081905550600054600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ccb806100db6000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610255578063095ea7b3146102e55780630e758d0a1461034a5780631469d5d4146103a157806318160ddd1461040e57806323b872dd14610439578063313ce567146104be5780633ac46b25146104e957806345bfdca6146105405780634fdf8a031461058d5780635751bee2146105e45780635a5ddcf61461063b578063631c42ae1461066a57806370a08231146106c157806371098a351461071857806375f46563146107475780637b253fe61461078a5780638ca9e721146107e15780638d8f2adb146107f85780638da5cb5b1461080f5780638f69fa2514610866578063904bd6d01461087d57806390ed6bf4146108aa57806394b23972146108d557806395d89b411461092c578063998c4f5a146109bc578063a401d24d146109ff578063a9059cbb14610a4c578063aab7403e14610ab1578063dd62ed3e14610b08578063f2fde38b14610b7f578063f856d60514610bc2575b6000600660009054906101000a900460ff1615156101b357600080fd5b6706f05b59d3b2000034101515156101ca57600080fd5b6101d634600554610bed565b905080600c6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561024857600080fd5b6102523382610c28565b50005b34801561026157600080fd5b5061026a610e0f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102aa57808201518184015260208101905061028f565b50505050905090810190601f1680156102d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102f157600080fd5b50610330600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e48565b604051808215151515815260200191505060405180910390f35b34801561035657600080fd5b5061038b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5f565b6040518082815260200191505060405180910390f35b3480156103ad57600080fd5b506103cc60048036038101908080359060200190929190505050610f77565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041a57600080fd5b50610423610faa565b6040518082815260200191505060405180910390f35b34801561044557600080fd5b506104a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fb0565b604051808215151515815260200191505060405180910390f35b3480156104ca57600080fd5b506104d361136a565b6040518082815260200191505060405180910390f35b3480156104f557600080fd5b5061052a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061136f565b6040518082815260200191505060405180910390f35b34801561054c57600080fd5b5061058b60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115ed565b005b34801561059957600080fd5b506105a26116db565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105f057600080fd5b50610625600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611701565b6040518082815260200191505060405180910390f35b34801561064757600080fd5b50610668600480360381019080803515159060200190929190505050611719565b005b34801561067657600080fd5b5061067f611792565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106cd57600080fd5b50610702600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117b8565b6040518082815260200191505060405180910390f35b34801561072457600080fd5b5061072d611801565b604051808215151515815260200191505060405180910390f35b34801561075357600080fd5b50610788600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611814565b005b34801561079657600080fd5b506107cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118f0565b6040518082815260200191505060405180910390f35b3480156107ed57600080fd5b506107f6611b6e565b005b34801561080457600080fd5b5061080d611c47565b005b34801561081b57600080fd5b50610824612077565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561087257600080fd5b5061087b61209d565b005b34801561088957600080fd5b506108a860048036038101908080359060200190929190505050612102565b005b3480156108b657600080fd5b506108bf612177565b6040518082815260200191505060405180910390f35b3480156108e157600080fd5b50610916600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061217d565b6040518082815260200191505060405180910390f35b34801561093857600080fd5b50610941612195565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610981578082015181840152602081019050610966565b50505050905090810190601f1680156109ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109c857600080fd5b506109fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121ce565b005b348015610a0b57600080fd5b50610a4a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122aa565b005b348015610a5857600080fd5b50610a97600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612860565b604051808215151515815260200191505060405180910390f35b348015610abd57600080fd5b50610af2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a32565b6040518082815260200191505060405180910390f35b348015610b1457600080fd5b50610b69600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a4a565b6040518082815260200191505060405180910390f35b348015610b8b57600080fd5b50610bc0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ad1565b005b348015610bce57600080fd5b50610bd7612c29565b6040518082815260200191505060405180910390f35b6000806000841415610c025760009150610c21565b8284029050828482811515610c1357fe5b04141515610c1d57fe5b8091505b5092915050565b610c93600c6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612c2f565b600c6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d41600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612c48565b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6040805190810160405280601881526020017f56696c6c69616d20426c6f636b636861696e20546f6b656e000000000000000081525081565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610e6f57600080fd5b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600a6020528060005260406000206000915090505481565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b6000808473ffffffffffffffffffffffffffffffffffffffff1614158015610fef575060008373ffffffffffffffffffffffffffffffffffffffff1614155b8015610ffb5750600082115b151561100657600080fd5b81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110d1575081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156110dc57600080fd5b611125600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612c2f565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111b1600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612c48565b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061127a600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612c2f565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6000806000806002541415151561138557600080fd5b61139d61139442600254612c2f565b62278d00612c66565b9150611427600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c48565b9050600c82101561143b57600092506115e6565b600c821015801561144c5750601282105b156114ab576114a461145f602883612c81565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2f565b92506115e6565b601282101580156114bc5750601882105b1561151b576115146114cf603c83612c81565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2f565b92506115e6565b6018821015801561152c5750601e82105b1561158b5761158461153f605083612c81565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2f565b92506115e6565b601e821015156115e5576115de81600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2f565b92506115e6565b5b5050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561168557600080fd5b80600b600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177557600080fd5b80600660006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561187057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118ac57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806002541415151561190657600080fd5b61191e61191542600254612c2f565b62278d00612c66565b91506119a8600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c48565b905060068210156119bc5760009250611b67565b600682101580156119cd5750600982105b15611a2c57611a256119e0602883612c81565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2f565b9250611b67565b60098210158015611a3d5750600c82105b15611a9c57611a95611a50603c83612c81565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2f565b9250611b67565b600c8210158015611aad5750600f82105b15611b0c57611b05611ac0605083612c81565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2f565b9250611b67565b600f82101515611b6657611b5f81600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c2f565b9250611b67565b5b5050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611bcc57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611c4557600080fd5b565b600080600080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180611cd857506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1515611ce357600080fd5b600092506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611e5f57611d38336118f0565b9150611d83600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612c2f565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e0f600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612c48565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e5c8383612c48565b92505b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611fd757611eb03361136f565b9050611efb600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612c2f565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f87600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612c48565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fd48382612c48565b92505b600083111515611fe657600080fd5b61202f600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612c48565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120f957600080fd5b42600281905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561215e57600080fd5b60008111151561216d57600080fd5b8060058190555050565b60025481565b60086020528060005260406000206000915090505481565b6040805190810160405280600381526020017f564c54000000000000000000000000000000000000000000000000000000000081525081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561222a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561226657600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600b600080815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806123795750600b60006001815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561238457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156123c15750600083115b15156123cc57600080fd5b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561241a57600080fd5b612463600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612c2f565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124b1836014612c81565b91506124bd8383612c2f565b9050612508600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612c48565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b600080815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156126cf576125fb600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612c48565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612687600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612c48565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061285a565b600b60006001815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561285457612780600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612c48565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061280c600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612c48565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612859565b600080fd5b5b50505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff161415801561288a5750600083115b151561289557600080fd5b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101515156128e657600080fd5b6128f08184612c2f565b905080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061297f600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612c48565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60096020528060005260406000206000915090505481565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b2d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612b6957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b6000828211151515612c3d57fe5b818303905092915050565b6000808284019050838110151515612c5c57fe5b8091505092915050565b6000808284811515612c7457fe5b0490508091505092915050565b6000612c97612c908385610bed565b6064612c66565b9050929150505600a165627a7a72305820b48f11e238589fcd2787c4855fdd2c2c847f1624874fa7452fe9ec03eaff2d620029"
}