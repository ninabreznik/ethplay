{
  "address": "0xa206d217c0642735e82a6b11547bf00659623163",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Staking",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity ^0.4.25;\n\n/*\n██╗  ██╗██╗   ██╗██████╗ ███████╗██████╗ ███████╗████████╗ █████╗ ██╗  ██╗███████╗\n██║  ██║╚██╗ ██╔╝██╔══██╗██╔════╝██╔══██╗██╔════╝╚══██╔══╝██╔══██╗██║ ██╔╝██╔════╝\n███████║ ╚████╔╝ ██████╔╝█████╗  ██████╔╝███████╗   ██║   ███████║█████╔╝ █████╗  \n██╔══██║  ╚██╔╝  ██╔═══╝ ██╔══╝  ██╔══██╗╚════██║   ██║   ██╔══██║██╔═██╗ ██╔══╝  \n██║  ██║   ██║   ██║     ███████╗██║  ██║███████║   ██║   ██║  ██║██║  ██╗███████╗\n╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝\n*/\n\n\ncontract HyperETH {\n\t\n\t/**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's 0% fee here.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) public returns(bool);\n\t\n\t/**\n     * Retrieve the tokens owned by the caller.\n     */\n\tfunction myTokens() public view returns(uint256);\n\t\n\t/**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) public view returns(uint256);\n\t\n\t/**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral\n     */\n    function buy(address _referredBy) public payable returns(uint256);\n\t\n\t/**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw() public;\n\t\n\t/**\n     * Converts all of caller's dividends to tokens.\n     */\n\tfunction reinvest() public;\n\t\n\t/**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n\tfunction() payable external;\n}\n\n\n/**\n * Accepts HYPER tokens: Staking\n */\ncontract Staking {\n\tusing SafeMath for *;\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n    // ERC20\n    event Transfer (\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\t\n\tevent onDeposit (\n\t\taddress indexed customer,\n\t\tuint256 tokens\n\t);\n\t\n\tevent onReinvestProfit (\n\t\taddress indexed customer,\n\t\tuint256 tokens\n\t);\n\t\n\tevent onWithdrawProfit (\n\t\taddress indexed customer,\n\t\tuint256 tokens\n\t);\n\t\n\tevent onWithdrawCapital (\n\t\taddress indexed customer,\n\t\tuint256 tokens\n\t);\n\t\n\t\n\t/*=================================\n    =            MODIFIERS            =\n    =================================*/\t\n\tmodifier onlyTokenContract {\n        require(msg.sender == address(tokenContract_));\n        _;\n    }\n\t\n\t// only people with deposit\n    modifier onlyBagholders() {\n        require(myDeposit() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myProfit(msg.sender) > 0);\n        _;\n    }\n\t\n\t// administrators can:\n    // -> set token contract\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrator_ == _customerAddress);\n        _;\n    }\n\t\n\t\n\t/*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => Dealer) internal dealers_; \t// address => Dealer\n    uint256 internal totalDeposit_ = 0;\n\t\n\t// token exchange contract\n\tHyperETH public tokenContract_;\n\t\n\t// administrator (see above on what they can do)\n    address internal administrator_;\n\t\n\t// Player data\n\tstruct Dealer {\n\t\tuint256 deposit;\t\t// active deposit\n\t\tuint256 profit;\t\t\t// old outstanding profits\n\t\tuint256 time;\t\t\t// last time profits have been moved\n\t}\n    \n\t\n\t/*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    constructor() public {\n\t\tadministrator_ = 0x73018870D10173ae6F71Cac3047ED3b6d175F274;\n    }\n\t\n\tfunction() payable external {\n\t\t// prevent invalid or unintentional calls\n\t\t//require(msg.data.length == 0);\n\t}\n\t\n\t/**\n    * @dev Standard ERC677 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint256 _value, bytes _data)\n\t\tonlyTokenContract()\n\t\texternal\n\t\treturns (bool)\n\t{\n        // data setup\n\t\tDealer storage _dealer = dealers_[_from];\n\t\t\n\t\t// profit and deposit tracking\n\t\t_dealer.profit = myProfit(_from);\t/* saves the new generated profit; old profit will be taken into account within the calculation\n\t\t\t\t\t\t\t\t\t\t\t   last time deposit timer is 0 for the first deposit */\n\t\t_dealer.time = now;\t\t\t\t\t// so we set the timer AFTER calculating profits\n        \n\t\t// allocate tokens\n\t\t_dealer.deposit = _dealer.deposit.add(_value);\n\t\ttotalDeposit_ = totalDeposit_.add(_value);\n\t\t\n\t\t// trigger event\n\t\temit onDeposit(_from, _value);\n\t\t\n\t\treturn true;\n\t\t\n\t\t// silence compiler warning\n\t\t_data;\n\t}\n\t\n\t/**\n\t * Reinvest generated profit\n\t */\n\tfunction reinvestProfit()\n\t\tonlyStronghands()\n\t\tpublic \n\t{\n\t\taddress _customerAddress = msg.sender;\n\t\tDealer storage _dealer = dealers_[_customerAddress];\n\t\t\n\t\tuint256 _profits = myProfit(_customerAddress);\n\t\t\n\t\t// update Dealer\n\t\t_dealer.deposit = _dealer.deposit.add(_profits);\t// add new tokens to active deposit\n\t\t_dealer.profit = 0;\t\t\t\t\t\t\t\t\t// old tokens have been reinvested\n\t\t_dealer.time = now;\t\t\t\t\t\t\t\t\t// generate tokens from now\n\t\t\n\t\t// update total deposit value\n\t\ttotalDeposit_ = totalDeposit_.add(_profits);\n\t\t\n\t\t// trigger event\n\t\temit onReinvestProfit(_customerAddress, _profits);\n\t}\n\t\n\t/**\n\t * Withdraw profit to token exchange\n\t */\n\tfunction withdrawProfit()\n\t\tonlyStronghands()\n\t\tpublic\n\t{\n\t\taddress _customerAddress = msg.sender;\n\t\tDealer storage _dealer = dealers_[_customerAddress];\n\t\t\n\t\tuint256 _profits = myProfit(_customerAddress);\n\t\t\n\t\t// update profits\n\t\t_dealer.profit = 0;\t\t// old tokens have been reinvested\n\t\t_dealer.time = now;\t\t// generate tokens from now\n\t\t\n\t\t// transfer tokens from exchange to sender\n\t\ttokenContract_.transfer(_customerAddress, _profits);\n\t\t\n\t\t// trigger event\n\t\temit onWithdrawProfit(_customerAddress, _profits);\n\t}\n\t\n\t/**\n\t * Withdraw deposit to token exchange. 10% fee will be incured\n\t */\n\tfunction withdrawCapital()\n\t\tonlyBagholders()\n\t\tpublic\n\t{\n\t\taddress _customerAddress = msg.sender;\n\t\tDealer storage _dealer = dealers_[_customerAddress];\n\t\t\n\t\tuint256 _deposit = _dealer.deposit;\n\t\tuint256 _taxedDeposit = _deposit.mul(90).div(100);\n\t\tuint256 _profits = myProfit(_customerAddress);\n\t\t\n\t\t// update deposit\n\t\t_dealer.deposit = 0;\n\t\t_dealer.profit = _profits;\n\t\t\n\t\t// reduce tokens in staking deposit ledger\n\t\t// use the untaxed value, bcs Dealers deposit will drop to 0,\n\t\t// but token transfer (below) will be taxed\n\t\ttotalDeposit_ = totalDeposit_.sub(_deposit);\n\t\t\n\t\t// transfer tokens from exchange to sender\n\t\ttokenContract_.transfer(_customerAddress, _taxedDeposit);\n\t\t\n\t\t// trigger event\n\t\temit onWithdrawCapital(_customerAddress, _taxedDeposit);\n\t}\n\t\n\t/**\n\t * Staking will reinvest its ETH\n\t */\n\tfunction reinvestEther()\n\t\tpublic\n\t{\n\t\tuint256 _balance = address(this).balance;\n\t\tif (_balance > 0) {\n\t\t\t// triggers exchanges payable fallback buy function\n\t\t\tif(!address(tokenContract_).call.value(_balance)()) {\n\t\t\t\t// Some failure code\n\t\t\t\trevert();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Staking will reinvest its dividends\n\t */\n\tfunction reinvestDividends()\n\t\tpublic\n\t{\n\t\tuint256 _dividends = myDividends(true);\n\t\tif (_dividends > 0) {\n\t\t\ttokenContract_.reinvest();\n\t\t}\n\t}\n\t\n\t\n\t/*----------  HELPERS AND CALCULATORS  ----------*/\t\n    /**\n     * Retrieve the total token supply.\n     */\n    function totalDeposit()\n        public\n        view\n        returns(uint256)\n    {\n        return totalDeposit_;\n    }\n\t\n\t/**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenContract_.myTokens();\n    }\n\t\n\tfunction stakepool()\n\t\tpublic\n\t\tview\n\t\treturns(int256)\n\t{\n\t\tuint256 _tokens = totalSupply();\n\t\t\n\t\t// we cannot divide by 0\n\t\tif (totalDeposit_ > 0) {\n\t\t\t// returns a value that indicates the token pool amount of the staking contract\n\t\t\t// based on 1000 => 1000 = 100%; 303 = 30.3%; -200 = -20%\n\t\t\treturn int256((1000).mul(_tokens).div(totalDeposit_) - 1000);\n\t\t} else {\n\t\t\treturn 1000;\t// 100%\n\t\t}\n\t}\n\t\n\t/**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myDeposit()\n        public\n        view\n        returns(uint256)\n    {\n\t\taddress _customerAddress = msg.sender;\n        Dealer storage _dealer = dealers_[_customerAddress];\n        return _dealer.deposit;\n    }\n\t\n\t/**\n     * Retrieve the profit of the caller. Profits are virtual\n     */\n\tfunction myProfit(address _customerAddress)\n\t\tpublic\n\t\tview\n\t\treturns(uint256)\n\t{\n\t\tDealer storage _dealer = dealers_[_customerAddress];\n\t\tuint256 _oldProfits = _dealer.profit;\n\t\tuint256 _newProfits = 0;\n\t\t\n\t\tif (\n\t\t\t// if time is 0, the dealer has not deposited tokens yet\n\t\t\t_dealer.time == 0 ||\n\t\t\t\n\t\t\t// dealer has currently no tokens deposited\n\t\t\t_dealer.deposit == 0\n\t\t)\n\t\t{\n\t\t\t_newProfits = 0;\n\t\t} else {\n\t\t\t// get the last deposit time stamp\n\t\t\tuint256 _timeStaking = now - _dealer.time;\n\t\t\t\n\t\t\t_newProfits = _timeStaking\t// time difference since profits are being generated\n\t\t\t\t.mul(_dealer.deposit)\t// current deposit\n\t\t\t\t.mul(1000)\t\t\t\t// 1.000% (daily)\n\t\t\t\t.div(100000)\t\t\t// to base 100%\n\t\t\t\t.div(86400);\t\t\t// 1 day in seconds\n\t\t}\n\t\t\n\t\t// Dealer may have tokens in profit wallet left, so always add the old value\n\t\treturn _newProfits.add(_oldProfits);\n\t}\n\t\n\tfunction myDividends(bool _includeReferralBonus)\n\t\tpublic\n\t\tview\n\t\treturns(uint256)\n\t{\n\t\treturn tokenContract_.myDividends(_includeReferralBonus);\n\t}\n\t\n\t/**\n\t * Set the token contract\n\t */\n\tfunction setTokenContract(address _tokenContract)\n\t\tonlyAdministrator()\n\t\tpublic\n\t{\n\t\ttokenContract_ = HyperETH(_tokenContract);\n\t}\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"myProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawCapital\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakepool\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onReinvestProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onWithdrawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onWithdrawCapital\",\"type\":\"event\"}]",
  "bytecode": "6080604052600060015534801561001557600080fd5b507373018870d10173ae6f71cac3047ed3b6d175f274600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ff48061007a6000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630bf0e4e4146100d257806317727a001461012957806318160ddd146101405780632a0963971461016b578063688abbf7146101965780638a68cf9c146101d9578063957b2e5614610230578063959499b614610247578063bbcd5bbe1461025e578063c0ee0b8a146102a1578063e3b611351461031e578063f251898314610335578063f268e24b1461034c578063f6153ccd14610377575b005b3480156100de57600080fd5b50610113600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103a2565b6040518082815260200191505060405180910390f35b34801561013557600080fd5b5061013e610499565b005b34801561014c57600080fd5b506101556106b8565b6040518082815260200191505060405180910390f35b34801561017757600080fd5b50610180610780565b6040518082815260200191505060405180910390f35b3480156101a257600080fd5b506101c36004803603810190808035151590602001909291905050506107d4565b6040518082815260200191505060405180910390f35b3480156101e557600080fd5b506101ee6108ad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023c57600080fd5b506102456108d3565b005b34801561025357600080fd5b5061025c61098c565b005b34801561026a57600080fd5b5061029f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b5c565b005b3480156102ad57600080fd5b50610304600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050610c02565b604051808215151515815260200191505060405180910390f35b34801561032a57600080fd5b50610333610d50565b005b34801561034157600080fd5b5061034a610e59565b005b34801561035857600080fd5b50610361610edb565b6040518082815260200191505060405180910390f35b34801561038357600080fd5b5061038c610f31565b6040518082815260200191505060405180910390f35b60008060008060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350836001015492506000915060008460020154148061040c575060008460000154145b1561041a576000915061047b565b8360020154420390506104786201518061046a620186a061045c6103e861044e8a6000015488610f3b90919063ffffffff16565b610f3b90919063ffffffff16565b610f7690919063ffffffff16565b610f7690919063ffffffff16565b91505b61048e8383610f9190919063ffffffff16565b945050505050919050565b6000806000806000806104aa610780565b1115156104b657600080fd5b3394506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350836000015492506105276064610519605a86610f3b90919063ffffffff16565b610f7690919063ffffffff16565b9150610532856103a2565b90506000846000018190555080846001018190555061055c83600154610faf90919063ffffffff16565b600181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050506040513d602081101561065157600080fd5b8101908080519060200190929190505050508473ffffffffffffffffffffffffffffffffffffffff167fa6e66a9520eda738902b9b8fd1649eb52ec404a7c65c1a8ece315280eb83a533836040518082815260200191505060405180910390a25050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663949e8acd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b505050506040513d602081101561076a57600080fd5b8101908080519060200190929190505050905090565b60008060003391506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001549250505090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663688abbf7836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050602060405180830381600087803b15801561086b57600080fd5b505af115801561087f573d6000803e3d6000fd5b505050506040513d602081101561089557600080fd5b81019080805190602001909291905050509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006108df60016107d4565b9050600081111561098957600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdb5a03e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561097057600080fd5b505af1158015610984573d6000803e3d6000fd5b505050505b50565b60008060008061099b336103a2565b1115156109a757600080fd5b3392506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091506109f3836103a2565b905060008260010181905550428260020181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610acd57600080fd5b505af1158015610ae1573d6000803e3d6000fd5b505050506040513d6020811015610af757600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff167fce669b3f9a0e90f9c11f32d8383a889ccb4e94faab076af5f194a720fd6345f1826040518082815260200191505060405180910390a2505050565b60003390508073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610bbd57600080fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6157600080fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610caa866103a2565b8160010181905550428160020181905550610cd2858260000154610f9190919063ffffffff16565b8160000181905550610cef85600154610f9190919063ffffffff16565b6001819055508573ffffffffffffffffffffffffffffffffffffffff167f2bf9518c65eff7d1f3ee4106bf0dc41267ccde0924dbfa4ab476ed5c0f45da98866040518082815260200191505060405180910390a26001915050949350505050565b600080600080610d5f336103a2565b111515610d6b57600080fd5b3392506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150610db7836103a2565b9050610dd0818360000154610f9190919063ffffffff16565b826000018190555060008260010181905550428260020181905550610e0081600154610f9190919063ffffffff16565b6001819055508273ffffffffffffffffffffffffffffffffffffffff167f28c3c331aef7f7a3a7f34e77b9a568e3d50b65d4c69cba1ebb650450be6ce036826040518082815260200191505060405180910390a2505050565b60003073ffffffffffffffffffffffffffffffffffffffff163190506000811115610ed857600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160405160006040518083038185875af1925050501515610ed757600080fd5b5b50565b600080610ee66106b8565b905060006001541115610f27576103e8610f1f600154610f11846103e8610f3b90919063ffffffff16565b610f7690919063ffffffff16565b039150610f2d565b6103e891505b5090565b6000600154905090565b6000806000841415610f505760009150610f6f565b8284029050828482811515610f6157fe5b04141515610f6b57fe5b8091505b5092915050565b6000808284811515610f8457fe5b0490508091505092915050565b6000808284019050838110151515610fa557fe5b8091505092915050565b6000828211151515610fbd57fe5b8183039050929150505600a165627a7a723058206e9821be572c7bf85f8eec1f1c7bb4c1c02f2656349c09d4cfb99dc905b0af2a0029"
}