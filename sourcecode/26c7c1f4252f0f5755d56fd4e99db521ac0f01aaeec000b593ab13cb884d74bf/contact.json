{
  "address": "0x0317ada015cf35244b9f9c7d1f8f05c3651833ff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-27\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ApproveAndCallReceiver {\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) public;\n}\n\ncontract Controlled {\n    modifier onlyController { \n        require(msg.sender == controller); \n        _; \n    }\n\n    address public controller;\n\n    constructor() public {\n      controller = msg.sender;\n    }\n\n    function changeController(address _newController) onlyController public {\n        controller = _newController;\n    }\n}\n\ncontract TokenAbout is Controlled {\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n\n    function isContract(address _addr) constant internal returns (bool) {\n        if (_addr == 0) {\n            return false;\n        }\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n\n    function claimTokens(address[] tokens) onlyController public {\n        require(tokens.length <= 100, \"tokens.length too long\");\n        address _token;\n        uint256 balance;\n        ERC20Token token;\n        for(uint256 i; i<tokens.length; i++){\n            _token = tokens[i];\n            if (_token == 0x0) {\n                balance = address(this).balance;\n                if(balance > 0){\n                    msg.sender.transfer(balance);\n                }\n            }else{\n                token = ERC20Token(_token);\n                balance = token.balanceOf(address(this));\n                token.transfer(msg.sender, balance);\n                emit ClaimedTokens(_token, msg.sender, balance);\n            }\n        }\n    }\n}\n\ncontract TokenController {\n    function proxyPayment(address _owner) payable public returns(bool);\n    function onTransfer(address _from, address _to, uint _amount) public view returns(bool);\n    function onApprove(address _owner, address _spender, uint _amount) public view returns(bool);\n}\n\ncontract ERC20Token {\n    uint256 public totalSupply;\n    mapping (address => uint256) public balanceOf;\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract TokenI is ERC20Token, Controlled {\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    function approveAndCall( address _spender, uint256 _amount, bytes _extraData) public returns (bool success);\n    function generateTokens(address _owner, uint _amount) public returns (bool);\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\n    function enableTransfers(bool _transfersEnabled) public;\n}\n\ncontract Token is TokenI, TokenAbout {\n    using SafeMath for uint256;\n    address public owner;\n    string public techProvider = \"WeYii Tech(https://weyii.co)\";\n\n    mapping (uint8 => uint256[]) public freezeOf; //所有数额，地址与数额合并为uint256，位运算拆分。\n    uint8  currUnlockStep; //当前解锁step\n    uint256 currUnlockSeq; //当前解锁step 内的游标\n\n    mapping (uint8 => bool) public stepUnlockInfo; //所有锁仓，key 使用序号向上增加，value,是否已解锁。\n    mapping (address => uint256) public freezeOfUser; //用户所有锁仓，方便用户查询自己锁仓余额\n    mapping (uint8 => uint256) public stepLockend; //key:锁仓step，value：解锁时\n\n    bool public transfersEnabled = true;\n\n    event Burn(address indexed from, uint256 value);\n    event Freeze(address indexed from, uint256 value);\n    event Unfreeze(address indexed from, uint256 value);\n\n    constructor(uint256 initialSupply, string tokenName, string tokenSymbol, address initialOwner) public {\n        name = tokenName;\n        symbol = tokenSymbol;\n        owner = initialOwner;\n        totalSupply = initialSupply*uint256(10)**decimals;\n        balanceOf[owner] = totalSupply;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier ownerOrController(){\n        require(msg.sender == owner || msg.sender == controller);\n        _;\n    }\n\n    modifier transable(){\n        require(transfersEnabled);\n        _;\n    }\n\n    modifier ownerOrUser(address user){\n        require(msg.sender == owner || msg.sender == user);\n        _;\n    }\n\n    modifier userOrController(address user){\n        require(msg.sender == user || msg.sender == owner || msg.sender == controller);\n        _;\n    }\n\n    modifier realUser(address user){\n        require(user != 0x0);\n        _;\n    }\n\n    modifier moreThanZero(uint256 _value){\n        require(_value > 0);\n        _;\n    }\n\n    modifier userEnough(address _user, uint256 _amount) {\n        require(balanceOf[_user] >= _amount);\n        _;\n    }\n\n    function addLockStep(uint8 _step, uint _endTime) onlyController external returns(bool) {\n        stepLockend[_step] = _endTime;\n    }\n\n    function transfer(address _to, uint256 _value) realUser(_to) moreThanZero(_value) transable public returns (bool) {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                     // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add the same to the recipient\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) transable public returns (bool success) {\n        require(_value == 0 || (allowance[msg.sender][_spender] == 0));\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function unApprove(address _spender, uint256 _value) moreThanZero(_value) transable public returns (bool success) {\n        require(_value == 0 || (allowance[msg.sender][_spender] == 0));\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].sub(_value);\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) transable public returns (bool success) {\n        require(approve(_spender, _amount));\n        ApproveAndCallReceiver(_spender).receiveApproval(msg.sender, _amount, this, _extraData);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) realUser(_from) realUser(_to) moreThanZero(_value) transable public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function transferMulti(address[] _to, uint256[] _value) transable public returns (bool success, uint256 amount){\n        require(_to.length == _value.length && _to.length <= 300, \"transfer once should be less than 300, or will be slow\");\n        uint256 balanceOfSender = balanceOf[msg.sender];\n        uint256 len = _to.length;\n        for(uint256 j; j<len; j++){\n            require(_value[j] <= balanceOfSender); //limit transfer value\n            amount = amount.add(_value[j]);\n        }\n        require(balanceOfSender > amount ); //check enough and not overflow\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n        address _toI;\n        uint256 _valueI;\n        for(uint256 i; i<len; i++){\n            _toI = _to[i];\n            _valueI = _value[i];\n            balanceOf[_toI] = balanceOf[_toI].add(_valueI);\n            emit Transfer(msg.sender, _toI, _valueI);\n        }\n        return (true, amount);\n    }\n    \n    function transferMultiSameValue(address[] _to, uint256 _value) transable public returns (bool){\n        require(_to.length <= 300, \"transfer once should be less than 300, or will be slow\");\n        uint256 len = _to.length;\n        uint256 amount = _value.mul(len);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n        address _toI;\n        for(uint256 i; i<len; i++){\n            _toI = _to[i];\n            balanceOf[_toI] = balanceOf[_toI].add(_value);\n            emit Transfer(msg.sender, _toI, _value);\n        }\n        return true;\n    }\n\n    function freeze(address _user, uint256[] _value, uint8[] _step) onlyController public returns (bool success) {\n        require(_value.length == _step.length, \"length of value and step must be equal\");\n        require(_value.length <= 100, \"lock step should less or equal than 100\");\n        uint256 amount; //冻结总额\n        for(uint i; i<_value.length; i++){\n            amount = amount.add(_value[i]);\n        }\n        require(balanceOf[_user] >= amount, \"balance of user must bigger or equal than amount of all steps\");\n        balanceOf[_user] -= amount;\n        freezeOfUser[_user] += amount;\n        uint256 _valueI;\n        uint8 _stepI;\n        for(i=0; i<_value.length; i++){\n            _valueI = _value[i];\n            _stepI = _step[i];\n            freezeOf[_stepI].push(uint256(_user)<<96|_valueI);\n        }\n        emit Freeze(_user, amount);\n        return true;\n    }\n\n    function unFreeze(uint8 _step) onlyController public returns (bool unlockOver) {\n        require(stepLockend[_step]<now && (currUnlockStep==_step || currUnlockSeq==uint256(0)));\n        require(stepUnlockInfo[_step]==false);\n        uint256[] memory currArr = freezeOf[_step];\n        currUnlockStep = _step;\n        if(currUnlockSeq==uint256(0)){\n            currUnlockSeq = currArr.length;\n        }\n        uint256 start = ((currUnlockSeq>99)?(currUnlockSeq-99): 0);\n\n        uint256 userLockInfo;\n        uint256 _amount;\n        address userAddress;\n        for(uint256 end = currUnlockSeq; end>start; end--){\n            userLockInfo = freezeOf[_step][end-1];\n            _amount = userLockInfo&0xFFFFFFFFFFFFFFFFFFFFFFFF;\n            userAddress = address(userLockInfo>>96);\n            balanceOf[userAddress] += _amount;\n            freezeOfUser[userAddress] = freezeOfUser[userAddress].sub(_amount);\n            emit Unfreeze(userAddress, _amount);\n        }\n        if(start==0){\n            stepUnlockInfo[_step] = true;\n            currUnlockSeq = 0;\n        }else{\n            currUnlockSeq = start;\n        }\n        return true;\n    }\n    \n    function() payable public {\n        require(isContract(controller), \"controller is not a contract\");\n        bool proxyPayment = TokenController(controller).proxyPayment.value(msg.value)(msg.sender);\n        require(proxyPayment);\n    }\n\n    function generateTokens(address _user, uint _amount) onlyController userEnough(owner, _amount) public returns (bool) {\n        balanceOf[_user] += _amount;\n        balanceOf[owner] -= _amount;\n        emit Transfer(0, _user, _amount);\n        return true;\n    }\n\n    function destroyTokens(address _user, uint _amount) onlyController userEnough(_user, _amount) public returns (bool) {\n        require(balanceOf[_user] >= _amount);\n        balanceOf[owner] += _amount;\n        balanceOf[_user] -= _amount;\n        emit Transfer(_user, 0, _amount);\n        emit Burn(_user, _amount);\n        return true;\n    }\n\n    function changeOwner(address newOwner) onlyOwner public returns (bool) {\n        balanceOf[newOwner] = balanceOf[owner];\n        balanceOf[owner] = 0;\n        owner = newOwner;\n        return true;\n    }\n\n    function enableTransfers(bool _transfersEnabled) onlyController public {\n        transfersEnabled = _transfersEnabled;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000005459bf4d39b7da88a33adca3e57c8553ecc5b466000000000000000000000000000000000000000000000000000000000000001b5175616e74205472656173757265204261636b757020434841494e000000000000000000000000000000000000000000000000000000000000000000000000035154420000000000000000000000000000000000000000000000000000000000"
}