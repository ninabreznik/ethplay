{
  "address": "0x01db18f6a474840db3480a6a35227d4d0dfcca37",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BPToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-23\n*/\n\npragma solidity ^0.4.20;\n\n\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    uint public totalSupply;\n    function balanceOf(address who) constant returns (uint);\n    function allowance(address owner, address spender) constant returns (uint);\n\n    function transfer(address to, uint value) returns (bool ok);\n    function transferFrom(address from, address to, uint value) returns (bool ok);\n    function approve(address spender, uint value) returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n    function safeMul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b) internal returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function assert(bool assertion) internal {\n        if (!assertion) {\n            throw;\n        }\n    }\n\n}\n\n/**\n * Owned contract\n */\ncontract Owned {\n    address[] public pools;\n    address public owner;\n\n    function Owned() {\n        owner = msg.sender;\n        pools.push(msg.sender);\n    }\n\n    modifier onlyPool {\n        require(isPool(msg.sender));\n        _;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /// add new pool address to pools\n    function addPool(address newPool) onlyOwner {\n        assert (newPool != 0);\n        if (isPool(newPool)) throw;\n        pools.push(newPool);\n    }\n    \n    /// remove a address from pools\n    function removePool(address pool) onlyOwner{\n        assert (pool != 0);\n        if (!isPool(pool)) throw;\n        \n        for (uint i=0; i<pools.length - 1; i++) {\n            if (pools[i] == pool) {\n                pools[i] = pools[pools.length - 1];\n                break;\n            }\n        }\n        pools.length -= 1;\n    }\n\n    function isPool(address pool) internal returns (bool ok){\n        for (uint i=0; i<pools.length; i++) {\n            if (pools[i] == pool)\n                return true;\n        }\n        return false;\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        removePool(owner);\n        addPool(newOwner);\n        owner = newOwner;\n    }\n}\n\n/**\n * BP crowdsale contract\n*/\ncontract BPToken is SafeMath, Owned, ERC20 {\n    string public constant name = \"Backpack Token\";\n    string public constant symbol = \"BP\";\n    uint256 public constant decimals = 18;  \n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function BPToken() {\n        totalSupply = 2000000000 * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n    }\n\n    /// asset pool map\n    mapping (address => address) addressPool;\n\n    /// address base amount\n    mapping (address => uint256) addressAmount;\n\n    /// per month seconds\n    uint perMonthSecond = 2592000;\n    \n    /// calc the balance that the user shuold hold\n    function shouldHadBalance(address who) constant returns (uint256){\n        if (isPool(who)) return 0;\n\n        address apAddress = getAssetPoolAddress(who);\n        uint256 baseAmount  = getBaseAmount(who);\n\n        /// Does not belong to AssetPool contract\n        if( (apAddress == address(0)) || (baseAmount == 0) ) return 0;\n\n        /// Instantiate ap contract\n        AssetPool ap = AssetPool(apAddress);\n\n        uint startLockTime = ap.getStartLockTime();\n        uint stopLockTime = ap.getStopLockTime();\n\n        if (block.timestamp > stopLockTime) {\n            return 0;\n        }\n\n        if (ap.getBaseLockPercent() == 0) {\n            return 0;\n        }\n\n        // base lock amount \n        uint256 baseLockAmount = safeDiv(safeMul(baseAmount, ap.getBaseLockPercent()),100);\n        if (block.timestamp < startLockTime) {\n            return baseLockAmount;\n        }\n        \n        /// will not linear release\n        if (ap.getLinearRelease() == 0) {\n            if (block.timestamp < stopLockTime) {\n                return baseLockAmount;\n            } else {\n                return 0;\n            }\n        }\n        /// will linear release \n\n        /// now timestamp before start lock time \n        if (block.timestamp < startLockTime + perMonthSecond) {\n            return baseLockAmount;\n        }\n        // total lock months\n        uint lockMonth = safeDiv(safeSub(stopLockTime,startLockTime),perMonthSecond);\n        if (lockMonth <= 0) {\n            if (block.timestamp >= stopLockTime) {\n                return 0;\n            } else {\n                return baseLockAmount;\n            }\n        }\n\n        // unlock amount of every month\n        uint256 monthUnlockAmount = safeDiv(baseLockAmount,lockMonth);\n\n        // current timestamp passed month \n        uint hadPassMonth = safeDiv(safeSub(block.timestamp,startLockTime),perMonthSecond);\n\n        return safeSub(baseLockAmount,safeMul(hadPassMonth,monthUnlockAmount));\n    }\n\n    function getAssetPoolAddress(address who) internal returns(address){\n        return addressPool[who];\n    }\n\n    function getBaseAmount(address who) internal returns(uint256){\n        return addressAmount[who];\n    }\n\n    function getBalance() constant returns(uint){\n        return balances[msg.sender];\n    }\n\n    function setPoolAndAmount(address who, uint256 amount) onlyPool returns (bool) {\n        assert(balances[msg.sender] >= amount);\n\n        if (owner == who) {\n            return true;\n        }\n        \n        address apAddress = getAssetPoolAddress(who);\n        uint256 baseAmount = getBaseAmount(who);\n\n        assert((apAddress == msg.sender) || (baseAmount == 0));\n\n        addressPool[who] = msg.sender;\n        addressAmount[who] += amount;\n\n        return true;\n    }\n\n    /// get balance of the special address\n    function balanceOf(address who) constant returns (uint) {\n        return balances[who];\n    }\n\n    /// @notice Transfer `value` BP tokens from sender's account\n    /// `msg.sender` to provided account address `to`.\n    /// @notice This function is disabled during the funding.\n    /// @dev Required state: Success\n    /// @param to The address of the recipient\n    /// @param value The number of BPs to transfer\n    /// @return Whether the transfer was successful or not\n    function transfer(address to, uint256 value) returns (bool) {\n        if (safeSub(balances[msg.sender],value) < shouldHadBalance(msg.sender)) throw;\n\n        uint256 senderBalance = balances[msg.sender];\n        if (senderBalance >= value && value > 0) {\n            senderBalance = safeSub(senderBalance, value);\n            balances[msg.sender] = senderBalance;\n            balances[to] = safeAdd(balances[to], value);\n            Transfer(msg.sender, to, value);\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n    /// @notice Transfer `value` BP tokens from sender 'from'\n    /// to provided account address `to`.\n    /// @notice This function is disabled during the funding.\n    /// @dev Required state: Success\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The number of BPs to transfer\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address from, address to, uint256 value) returns (bool) {\n        // Abort if not in Success state.\n        // protect against wrapping uints\n        if (balances[from] >= value &&\n        allowed[from][msg.sender] >= value &&\n        safeAdd(balances[to], value) > balances[to])\n        {\n            balances[to] = safeAdd(balances[to], value);\n            balances[from] = safeSub(balances[from], value);\n            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], value);\n            Transfer(from, to, value);\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n    /// @notice `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address spender, uint256 value) returns (bool) {\n        if (safeSub(balances[msg.sender],value) < shouldHadBalance(msg.sender)) throw;\n        \n        // Abort if not in Success state.\n        allowed[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender) constant returns (uint) {\n        uint allow = allowed[owner][spender];\n        return allow;\n    }\n}\n\n\n\ncontract ownedPool {\n    address public owner;\n\n    function ownedPool() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n/**\n * Asset pool contract\n*/\ncontract AssetPool is ownedPool {\n    uint  baseLockPercent;\n    uint  startLockTime;\n    uint  stopLockTime;\n    uint  linearRelease;\n    address public bpTokenAddress;\n\n    BPToken bp;\n\n    function AssetPool(address _bpTokenAddress, uint _baseLockPercent, uint _startLockTime, uint _stopLockTime, uint _linearRelease) {\n        assert(_stopLockTime > _startLockTime);\n        \n        baseLockPercent = _baseLockPercent;\n        startLockTime = _startLockTime;\n        stopLockTime = _stopLockTime;\n        linearRelease = _linearRelease;\n\n        bpTokenAddress = _bpTokenAddress;\n        bp = BPToken(bpTokenAddress);\n\n        owner = msg.sender;\n    }\n    \n    /// set role value\n    function setRule(uint _baseLockPercent, uint _startLockTime, uint _stopLockTime, uint _linearRelease) onlyOwner {\n        assert(_stopLockTime > _startLockTime);\n       \n        baseLockPercent = _baseLockPercent;\n        startLockTime = _startLockTime;\n        stopLockTime = _stopLockTime;\n        linearRelease = _linearRelease;\n    }\n\n    /// set bp token contract address\n    // function setBpToken(address _bpTokenAddress) onlyOwner {\n    //     bpTokenAddress = _bpTokenAddress;\n    //     bp = BPToken(bpTokenAddress);\n    // }\n    \n    /// assign BP token to another address\n    function assign(address to, uint256 amount) onlyOwner returns (bool) {\n        if (bp.setPoolAndAmount(to,amount)) {\n            if (bp.transfer(to,amount)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// get the balance of current asset pool\n    function getPoolBalance() constant returns (uint) {\n        return bp.getBalance();\n    }\n    \n    function getStartLockTime() constant returns (uint) {\n        return startLockTime;\n    }\n    \n    function getStopLockTime() constant returns (uint) {\n        return stopLockTime;\n    }\n    \n    function getBaseLockPercent() constant returns (uint) {\n        return baseLockPercent;\n    }\n    \n    function getLinearRelease() constant returns (uint) {\n        return linearRelease;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPoolAndAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"shouldHadBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405262278d0060075534156200001757600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080548060010182816200006e91906200011a565b9160005260206000209001600033909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506012600a0a637735940002600281905550600254600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000171565b815481835581811511620001445781836000526020600020918201910162000143919062000149565b5b505050565b6200016e91905b808211156200016a57600081600090555060010162000150565b5090565b90565b611c2580620001816000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018457806312065fe0146101de57806314b116511461020757806318160ddd1461026157806323b872dd1461028a578063313ce567146103035780633b7d09461461032c57806370a08231146103655780638da5cb5b146103b257806395d89b4114610407578063a9059cbb14610495578063ac4afa38146104ef578063d914cd4b14610552578063d9a4ad8b1461058b578063dd62ed3e146105d8578063f2fde38b14610644575b600080fd5b341561010157600080fd5b61010961067d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018f57600080fd5b6101c4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106b6565b604051808215151515815260200191505060405180910390f35b34156101e957600080fd5b6101f1610805565b6040518082815260200191505060405180910390f35b341561021257600080fd5b610247600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061084c565b604051808215151515815260200191505060405180910390f35b341561026c57600080fd5b610274610a3f565b6040518082815260200191505060405180910390f35b341561029557600080fd5b6102e9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a45565b604051808215151515815260200191505060405180910390f35b341561030e57600080fd5b610316610e41565b6040518082815260200191505060405180910390f35b341561033757600080fd5b610363600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e46565b005b341561037057600080fd5b61039c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611028565b6040518082815260200191505060405180910390f35b34156103bd57600080fd5b6103c5611071565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561041257600080fd5b61041a611097565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045a57808201518184015260208101905061043f565b50505050905090810190601f1680156104875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a057600080fd5b6104d5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110d0565b604051808215151515815260200191505060405180910390f35b34156104fa57600080fd5b61051060048080359060200190919050506112dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055d57600080fd5b610589600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061131c565b005b341561059657600080fd5b6105c2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611414565b6040518082815260200191505060405180910390f35b34156105e357600080fd5b61062e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611800565b6040518082815260200191505060405180910390f35b341561064f57600080fd5b61067b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061188c565b005b6040805190810160405280600e81526020017f4261636b7061636b20546f6b656e00000000000000000000000000000000000081525081565b60006106c133611414565b61070a600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611960565b101561071557600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600080600061085a33611979565b151561086557600080fd5b6108b084600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611a1d565b8473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561090f5760019250610a37565b61091885611a2c565b915061092385611a95565b90506109673373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806109625750600082145b611a1d565b33600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600192505b505092915050565b60025481565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b12575081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610ba45750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ba2600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611ade565b115b15610e3557610bf2600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611ade565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c7e600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611960565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d47600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611960565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610e3a565b600080fd5b9392505050565b601281565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ea457600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614151515610ec757fe5b610ed082611979565b1515610edb57600080fd5b600090505b60016000805490500381101561100b578173ffffffffffffffffffffffffffffffffffffffff16600082815481101515610f1657fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ffe576000600160008054905003815481101515610f7557fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600082815481101515610fb057fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061100b565b8080600101915050610ee0565b60016000818180549050039150816110239190611b7c565b505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600281526020017f425000000000000000000000000000000000000000000000000000000000000081525081565b6000806110dc33611414565b611125600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611960565b101561113057600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101580156111825750600083115b156112d1576111918184611960565b905080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611220600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611ade565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506112d6565b600080fd5b5092915050565b6000818154811015156112ec57fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561137857600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561139b57fe5b6113a481611979565b156113ae57600080fd5b600080548060010182816113c29190611ba8565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060008060008060008060008061142c8b611979565b1561143a57600099506117f2565b6114438b611a2c565b985061144e8b611a95565b9750600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16148061148b5750600088145b1561149957600099506117f2565b8896508673ffffffffffffffffffffffffffffffffffffffff1663a24247f16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156114ff57600080fd5b5af1151561150c57600080fd5b5050506040518051905095508673ffffffffffffffffffffffffffffffffffffffff16636b27909d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561157b57600080fd5b5af1151561158857600080fd5b505050604051805190509450844211156115a557600099506117f2565b60008773ffffffffffffffffffffffffffffffffffffffff16639fb8dd1a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561160a57600080fd5b5af1151561161757600080fd5b50505060405180519050141561163057600099506117f2565b6116bd6116b6898973ffffffffffffffffffffffffffffffffffffffff16639fb8dd1a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561169a57600080fd5b5af115156116a757600080fd5b50505060405180519050611b08565b6064611b3b565b9350854210156116cf578399506117f2565b60008773ffffffffffffffffffffffffffffffffffffffff166382351b436040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561173457600080fd5b5af1151561174157600080fd5b50505060405180519050141561176a5784421015611761578399506117f2565b600099506117f2565b600754860142101561177e578399506117f2565b61179361178b8688611960565b600754611b3b565b92506000831115156117b95784421015156117b157600099506117f2565b8399506117f2565b6117c38484611b3b565b91506117da6117d24288611960565b600754611b3b565b90506117ef846117ea8385611b08565b611960565b99505b505050505050505050919050565b600080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508091505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118e857600080fd5b611913600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e46565b61191c8161131c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061196e83831115611a1d565b818303905092915050565b600080600090505b600080549050811015611a12578273ffffffffffffffffffffffffffffffffffffffff166000828154811015156119b457fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611a055760019150611a17565b8080600101915050611981565b600091505b50919050565b801515611a2957600080fd5b50565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000808284019050611afe848210158015611af95750838210155b611a1d565b8091505092915050565b6000808284029050611b316000851480611b2c5750838583811515611b2957fe5b04145b611a1d565b8091505092915050565b600080611b4a60008411611a1d565b8284811515611b5557fe5b049050611b728385811515611b6657fe5b06828502018514611a1d565b8091505092915050565b815481835581811511611ba357818360005260206000209182019101611ba29190611bd4565b5b505050565b815481835581811511611bcf57818360005260206000209182019101611bce9190611bd4565b5b505050565b611bf691905b80821115611bf2576000816000905550600101611bda565b5090565b905600a165627a7a723058200bb19593604693e4d77088b98e9682fc99e097a27c82c87a51a01e66e1bb21f20029"
}