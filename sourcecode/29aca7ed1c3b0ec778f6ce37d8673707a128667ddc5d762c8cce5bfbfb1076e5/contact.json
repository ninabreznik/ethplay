{
  "address": "0x9950ed4d348162fd788025c77b4d377eec124cfb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AoraTgeCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-01\n*/\n\n// solium-disable linebreak-style\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    // Owner's address\n    address public owner;\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n    event OwnerChanged(address indexed previousOwner,address indexed newOwner);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n      // benefit is lost if 'b' is also tested.\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract AoraTgeCoin is IERC20, Ownable {\n    using SafeMath for uint256;\n\n    // Name of the token\n    string public constant name = \"Aora TGE Coin\"; \n    \n    // Symbol of the token\n    string public constant symbol = \"AORATGE\";\n\n    // Number of decimals for the token\n    uint8 public constant decimals = 18;\n    \n    uint constant private _totalSupply = 650000000 ether;\n\n    // Contract deployment block\n    uint256 public deploymentBlock;\n\n    // Address of the convertContract\n    address public convertContract = address(0);\n\n    // Address of the crowdsaleContract\n    address public crowdsaleContract = address(0);\n\n    // Token balances \n    mapping (address => uint) balances;\n\n    /**\n    * @dev Sets the convertContract address. \n    *   In the future, there will be a need to convert Aora TGE Coins to Aora Coins. \n    *   That will be done using the Convert contract which will be deployed in the future.\n    *   Convert contract will do the functions of converting Aora TGE Coins to Aora Coins\n    *   and enforcing vesting rules. \n    * @param _convert address of the convert contract.\n    */\n    function setConvertContract(address _convert) external onlyOwner {\n        require(address(0) != address(_convert));\n        convertContract = _convert;\n        emit OnConvertContractSet(_convert);\n    }\n\n    /** \n    * @dev Sets the crowdsaleContract address.\n    *   transfer function is modified in a way that only owner and crowdsale can call it.\n    *   That is done because crowdsale will sell the tokens, and owner will be allowed\n    *   to assign AORATGE to addresses in a way that matches the Aora business model.\n    * @param _crowdsale address of the crowdsale contract.\n    */\n    function setCrowdsaleContract(address _crowdsale) external onlyOwner {\n        require(address(0) != address(_crowdsale));\n        crowdsaleContract = _crowdsale;\n        emit OnCrowdsaleContractSet(_crowdsale);\n    }\n\n    /**\n    * @dev only convert contract can call the modified function\n    */\n    modifier onlyConvert {\n        require(msg.sender == convertContract);\n        _;\n    }\n\n    constructor() public {\n        balances[msg.sender] = _totalSupply;\n        deploymentBlock = block.number;\n    }\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address who) external view returns (uint256) {\n        return balances[who];\n    }\n\n    function allowance(address owner, address spender) external view returns (uint256) {\n        require(false);\n        return 0;\n    }\n\n    /**\n    * @dev Transfer token for a specified address.\n    *   Only callable by the owner or crowdsale contract, to prevent token trading.\n    *   AORA will be a tradable token. AORATGE will be exchanged for AORA in 1-1 ratio. \n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(msg.sender == owner || msg.sender == crowdsaleContract);\n\n        require(_value <= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) external returns (bool) {\n        require(false);\n        return false;\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another. \n    *   Only callable by the convert contract. Used in the process of converting \n    *   AORATGE to AORA. Will be called from convert contracts convert() function.\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to. \n    *   Only 0x0 address, because of a need to prevent token recycling. \n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) onlyConvert public returns (bool) {\n        require(_value <= balances[_from]);\n        require(_to == address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Fallback function. Can't send ether to this contract. \n    */\n    function () external payable {\n        revert();\n    }\n\n    /**\n    * @dev This method can be used by the owner to extract mistakenly sent tokens\n    * or Ether sent to this contract.\n    * @param _token address The address of the token contract that you want to\n    * recover set to 0 in case you want to extract ether. It can't be ElpisToken.\n    */\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == address(0)) {\n            owner.transfer(address(this).balance);\n            return;\n        }\n\n        IERC20 tokenReference = IERC20(_token);\n        uint balance = tokenReference.balanceOf(address(this));\n        tokenReference.transfer(owner, balance);\n        emit OnClaimTokens(_token, owner, balance);\n    }\n\n    /**\n    * @param crowdsaleAddress crowdsale contract address\n    */\n    event OnCrowdsaleContractSet(address indexed crowdsaleAddress);\n\n    /**\n    * @param convertAddress crowdsale contract address\n    */\n    event OnConvertContractSet(address indexed convertAddress);\n\n    /**\n    * @param token claimed token\n    * @param owner who owns the contract\n    * @param amount amount of the claimed token\n    */\n    event OnClaimTokens(address indexed token, address indexed owner, uint256 amount);\n}",
  "bytecode": "60806040526000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561009457600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b0219aada9b14535aca000000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055504360018190555061151c8061013b6000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018657806318160ddd146101eb57806323b872dd14610216578063313ce5671461029b57806331616395146102cc5780636596cff31461032357806370a082311461036657806382100e3f146103bd5780638da5cb5b146103e857806395d89b411461043f578063a9059cbb146104cf578063dd62ed3e14610534578063df8de3e7146105ab578063eb0baade146105ee578063ed7eff2b14610645578063f2fde38b14610688575b600080fd5b34801561010257600080fd5b5061010b6106cb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014b578082015181840152602081019050610130565b50505050905090810190601f1680156101785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019257600080fd5b506101d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610704565b604051808215151515815260200191505060405180910390f35b3480156101f757600080fd5b5061020061071c565b6040518082815260200191505060405180910390f35b34801561022257600080fd5b50610281600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610730565b604051808215151515815260200191505060405180910390f35b3480156102a757600080fd5b506102b06109b1565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102d857600080fd5b506102e16109b6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032f57600080fd5b50610364600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109dc565b005b34801561037257600080fd5b506103a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610afa565b6040518082815260200191505060405180910390f35b3480156103c957600080fd5b506103d2610b43565b6040518082815260200191505060405180910390f35b3480156103f457600080fd5b506103fd610b49565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044b57600080fd5b50610454610b6e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610494578082015181840152602081019050610479565b50505050905090810190601f1680156104c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104db57600080fd5b5061051a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ba7565b604051808215151515815260200191505060405180910390f35b34801561054057600080fd5b50610595600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e7f565b6040518082815260200191505060405180910390f35b3480156105b757600080fd5b506105ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e97565b005b3480156105fa57600080fd5b50610603611215565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065157600080fd5b50610686600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061123b565b005b34801561069457600080fd5b506106c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611359565b005b6040805190810160405280600d81526020017f416f72612054474520436f696e0000000000000000000000000000000000000081525081565b600080151561071257600080fd5b6000905092915050565b60006b0219aada9b14535aca000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561078e57600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107dc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561081757600080fd5b61086982600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ae90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108fe82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114cf90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a3757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515610a7357600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f2298eae7ec78ddfce87ab5887f85a9fdf3d8222120757c7049a1e18da4b745d860405160405180910390a250565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600781526020017f414f52415447450000000000000000000000000000000000000000000000000081525081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610c515750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610c5c57600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610caa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ce657600080fd5b610d3882600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ae90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dcd82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114cf90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000801515610e8d57600080fd5b6000905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ef557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fae576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610fa8573d6000803e3d6000fd5b50611210565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561104c57600080fd5b505af1158015611060573d6000803e3d6000fd5b505050506040513d602081101561107657600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561114d57600080fd5b505af1158015611161573d6000803e3d6000fd5b505050506040513d602081101561117757600080fd5b8101908080519060200190929190505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f4851d5266113ac968ef5218c6e91c4c5d25940054e41b3d9552a2b1e67f7a45e836040518082815260200191505060405180910390a35b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515156112d257600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f753549191865bc7c764de8b0e51047f99a629487390e232fbb78c0856b115aaa60405160405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113b457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156113f057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808383111515156114c057600080fd5b82840390508091505092915050565b60008082840190508381101515156114e657600080fd5b80915050929150505600a165627a7a72305820c2ee0d99c568887d9f1a10f636fc08adf93d881b48b9bb7ce1fc8fb64e224c3a0029"
}