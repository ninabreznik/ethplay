{
  "address": "0x87d598064c736dd0c712d329afcfaa0ccc1921a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoFighters Token",
  "contractName": "FighterCore",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-25\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n/// @title Auction Core\n/// @dev Contains models, variables, and internal methods for the auction.\ncontract ClockAuctionBase {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n    }\n\n    // Reference to contract tracking NFT ownership\n    ERC721 public nonFungibleContract;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Map from token ID to their corresponding auction.\n    mapping (uint256 => Auction) tokenIdToAuction;\n\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\n    event AuctionCancelled(uint256 tokenId);\n\n    /// @dev DON'T give me your money.\n    function() external {}\n\n    // Modifiers to check that inputs can be safely stored with a certain\n    // number of bits. We use constants and multiple modifiers to save gas.\n    modifier canBeStoredWith64Bits(uint256 _value) {\n        require(_value <= 18446744073709551615);\n        _;\n    }\n\n    modifier canBeStoredWith128Bits(uint256 _value) {\n        require(_value < 340282366920938463463374607431768211455);\n        _;\n    }\n\n    /// @dev Returns true if the claimant owns the token.\n    /// @param _claimant - Address claiming to own the token.\n    /// @param _tokenId - ID of token whose ownership to verify.\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    function _escrow(address _owner, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n        \n        AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }\n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        AuctionCancelled(_tokenId);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the incoming bid is higher than the current\n        // price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            //  Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            //  value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    /// @dev Returns current price of an NFT on auction. Broken into two\n    ///  functions (this one, that computes the duration from the auction\n    ///  structure, and the other that does the price computation) so we\n    ///  can easily test that the price computation works correctly.\n    function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n        \n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    /// @dev Computes the current price of an auction. Factored out\n    ///  from _currentPrice so we can run extensive unit tests.\n    ///  When testing, make this function public and turn on\n    ///  `Current price computation` test suite.\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n            \n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n            \n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n            \n            return uint256(currentPrice);\n        }\n    }\n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return _price * ownerCut / 10000;\n    }\n\n}\n\n\n/// @title Clock auction for non-fungible tokens.\ncontract ClockAuction is Pausable, ClockAuctionBase {\n\n    /// @dev Constructor creates a reference to the NFT ownership contract\n    ///  and verifies the owner cut is in the valid range.\n    /// @param _nftAddress - address of a deployed contract implementing\n    ///  the Nonfungible Interface.\n    /// @param _cut - percent cut the owner takes on each auction, must be\n    ///  between 0-10,000.\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n        \n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.implementsERC721());\n        nonFungibleContract = candidateContract;\n    }\n\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\n    ///  as well as any Ether sent directly to the contract address.\n    ///  Always transfers to the NFT contract, but can be called either by\n    ///  the owner or the NFT contract.\n    function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        nftAddress.transfer(this.balance);\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        public\n        whenNotPaused\n        canBeStoredWith128Bits(_startingPrice)\n        canBeStoredWith128Bits(_endingPrice)\n        canBeStoredWith64Bits(_duration)\n    {\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(uint256 _tokenId)\n        public\n        payable\n        whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(uint256 _tokenId)\n        public\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n        whenPaused\n        onlyOwner\n        public\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(uint256 _tokenId)\n        public\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }\n\n    /// @dev Returns the current price of an auction.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(uint256 _tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n}\n\n\n/// @title Clock auction modified for sale of fighters\ncontract SaleClockAuction is ClockAuction {\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSaleAuctionAddress() call.\n    bool public isSaleClockAuction = true;\n    \n    // Tracks last 4 sale price of gen0 fighter sales\n    uint256 public gen0SaleCount;\n    uint256[4] public lastGen0SalePrices;\n\n    // Delegate constructor\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        public\n        canBeStoredWith128Bits(_startingPrice)\n        canBeStoredWith128Bits(_endingPrice)\n        canBeStoredWith64Bits(_duration)\n    {\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Updates lastSalePrice if seller is the nft contract\n    /// Otherwise, works the same as default bid method.\n    function bid(uint256 _tokenId)\n        public\n        payable\n    {\n        // _bid verifies token ID size\n        address seller = tokenIdToAuction[_tokenId].seller;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n\n        // If not a gen0 auction, exit\n        if (seller == address(nonFungibleContract)) {\n            // Track gen0 sale prices\n            lastGen0SalePrices[gen0SaleCount % 4] = price;\n            gen0SaleCount++;\n        }\n    }\n\n    function averageGen0SalePrice() public view returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 4; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 4;\n    }\n\n}\n\n\n/// @title A facet of FighterCore that manages special access privileges.\ncontract FighterAccessControl {\n    /// @dev Emited when contract is upgraded\n    event ContractUpgrade(address newContract);\n\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n    bool public paused = false;\n\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    function setCEO(address _newCEO) public onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    function setCFO(address _newCFO) public onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    function setCOO(address _newCOO) public onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    function withdrawBalance() external onlyCFO {\n        cfoAddress.transfer(this.balance);\n    }\n\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    function pause() public onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    function unpause() public onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n}\n\n\n/// @title Base contract for CryptoFighters. Holds all common structs, events and base variables.\ncontract FighterBase is FighterAccessControl {\n    /*** EVENTS ***/\n\n    event FighterCreated(address indexed owner, uint256 fighterId, uint256 genes);\n\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a fighter\n    ///  ownership is assigned, including newly created fighters.\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /*** DATA TYPES ***/\n\n    /// @dev The main Fighter struct. Every fighter in CryptoFighters is represented by a copy\n    ///  of this structure.\n    struct Fighter {\n        // The Fighter's genetic code is packed into these 256-bits.\n        // A fighter's genes never change.\n        uint256 genes;\n\n        // The minimum timestamp after which this fighter can win a prize fighter again\n        uint64 prizeCooldownEndTime;\n\n        // The minimum timestamp after which this fighter can engage in battle again\n        uint64 battleCooldownEndTime;\n\n        // battle experience\n        uint32 experience;\n\n        // Set to the index that represents the current cooldown duration for this Fighter.\n        // Incremented by one for each successful prize won in battle\n        uint16 prizeCooldownIndex;\n\n        uint16 battlesFought;\n        uint16 battlesWon;\n\n        // The \"generation number\" of this fighter. Fighters minted by the CF contract\n        // for sale are called \"gen0\" and have a generation number of 0.\n        uint16 generation;\n\n        uint8 dexterity;\n        uint8 strength;\n        uint8 vitality;\n        uint8 luck;\n    }\n\n    /*** STORAGE ***/\n\n    /// @dev An array containing the Fighter struct for all Fighters in existence. The ID\n    ///  of each fighter is actually an index into this array. Note that ID 0 is a negafighter.\n    ///  Fighter ID 0 is invalid.\n    Fighter[] fighters;\n\n    /// @dev A mapping from fighter IDs to the address that owns them. All fighters have\n    ///  some valid owner address, even gen0 fighters are created with a non-zero owner.\n    mapping (uint256 => address) public fighterIndexToOwner;\n\n    // @dev A mapping from owner address to count of tokens that address owns.\n    //  Used internally inside balanceOf() to resolve ownership count.\n    mapping (address => uint256) ownershipTokenCount;\n\n    /// @dev A mapping from FighterIDs to an address that has been approved to call\n    ///  transferFrom(). A zero value means no approval is outstanding.\n    mapping (uint256 => address) public fighterIndexToApproved;\n    \n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        // since the number of fighters is capped to 2^32\n        // there is no way to overflow this\n        ownershipTokenCount[_to]++;\n        fighterIndexToOwner[_tokenId] = _to;\n\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            delete fighterIndexToApproved[_tokenId];\n        }\n\n        Transfer(_from, _to, _tokenId);\n    }\n\n    // Will generate both a FighterCreated event\n    function _createFighter(\n        uint16 _generation,\n        uint256 _genes,\n        uint8 _dexterity,\n        uint8 _strength,\n        uint8 _vitality,\n        uint8 _luck,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n        Fighter memory _fighter = Fighter({\n            genes: _genes,\n            prizeCooldownEndTime: 0,\n            battleCooldownEndTime: 0,\n            prizeCooldownIndex: 0,\n            battlesFought: 0,\n            battlesWon: 0,\n            experience: 0,\n            generation: _generation,\n            dexterity: _dexterity,\n            strength: _strength,\n            vitality: _vitality,\n            luck: _luck\n        });\n        uint256 newFighterId = fighters.push(_fighter) - 1;\n\n        require(newFighterId <= 4294967295);\n\n        FighterCreated(_owner, newFighterId, _fighter.genes);\n\n        _transfer(0, _owner, newFighterId);\n\n        return newFighterId;\n    }\n}\n\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\ncontract ERC721 {\n    function implementsERC721() public pure returns (bool);\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\n    function approve(address _to, uint256 _tokenId) public;\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n    function transfer(address _to, uint256 _tokenId) public;\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n}\n\n/// @title The facet of the CryptoFighters core contract that manages ownership, ERC-721 (draft) compliant.\ncontract FighterOwnership is FighterBase, ERC721 {\n    string public name = \"CryptoFighters\";\n    string public symbol = \"CF\";\n\n    function implementsERC721() public pure returns (bool)\n    {\n        return true;\n    }\n    \n    /// @dev Checks if a given address is the current owner of a particular Fighter.\n    /// @param _claimant the address we are validating against.\n    /// @param _tokenId fighter id, only valid when > 0\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return fighterIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Fighter.\n    /// @param _claimant the address we are confirming fighter is approved for.\n    /// @param _tokenId fighter id, only valid when > 0\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return fighterIndexToApproved[_tokenId] == _claimant;\n    }\n\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\n    ///  NOTE: _approve() does NOT send the Approval event.\n    function _approve(uint256 _tokenId, address _approved) internal {\n        fighterIndexToApproved[_tokenId] = _approved;\n    }\n\n    /// @dev Transfers a fighter owned by this contract to the specified address.\n    ///  Used to rescue lost fighters. (There is no \"proper\" flow where this contract\n    ///  should be the owner of any Fighter. This function exists for us to reassign\n    ///  the ownership of Fighters that users may have accidentally sent to our address.)\n    /// @param _fighterId - ID of fighter\n    /// @param _recipient - Address to send the fighter to\n    function rescueLostFighter(uint256 _fighterId, address _recipient) public onlyCOO whenNotPaused {\n        require(_owns(this, _fighterId));\n        _transfer(this, _recipient, _fighterId);\n    }\n\n    /// @notice Returns the number of Fighters owned by a specific address.\n    /// @param _owner The owner address to check.\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /// @notice Transfers a Fighter to another address. If transferring to a smart\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n    ///  CryptoFighters specifically) or your Fighter may be lost forever. Seriously.\n    /// @param _to The address of the recipient, can be a user or contract.\n    /// @param _tokenId The ID of the Fighter to transfer.\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        public\n        whenNotPaused\n    {\n        require(_to != address(0));\n        require(_owns(msg.sender, _tokenId));\n\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Grant another address the right to transfer a specific Fighter via\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Fighter that can be transferred if this call succeeds.\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        public\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _tokenId));\n\n        _approve(_tokenId, _to);\n\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Transfer a Fighter owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the Fighter to be transfered.\n    /// @param _to The address that should take ownership of the Fighter. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the Fighter to be transferred.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public\n        whenNotPaused\n    {\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n\n        _transfer(_from, _to, _tokenId);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return fighters.length - 1;\n    }\n\n    function ownerOf(uint256 _tokenId)\n        public\n        view\n        returns (address owner)\n    {\n        owner = fighterIndexToOwner[_tokenId];\n\n        require(owner != address(0));\n    }\n\n    /// @notice Returns the nth Fighter assigned to an address, with n specified by the\n    ///  _index argument.\n    /// @param _owner The owner whose Fighters we are interested in.\n    /// @param _index The zero-based index of the fighter within the owner's list of fighters.\n    ///  Must be less than balanceOf(_owner).\n    /// @dev This method MUST NEVER be called by smart contract code. It will almost\n    ///  certainly blow past the block gas limit once there are a large number of\n    ///  Fighters in existence. Exists only to allow off-chain queries of ownership.\n    ///  Optional method for ERC-721.\n    function tokensOfOwnerByIndex(address _owner, uint256 _index)\n        external\n        view\n        returns (uint256 tokenId)\n    {\n        uint256 count = 0;\n        for (uint256 i = 1; i <= totalSupply(); i++) {\n            if (fighterIndexToOwner[i] == _owner) {\n                if (count == _index) {\n                    return i;\n                } else {\n                    count++;\n                }\n            }\n        }\n        revert();\n    }\n}\n\n\n// this helps with battle functionality\n// it gives the ability to an external contract to do the following:\n// * create fighters as rewards\n// * update fighter stats\n// * update cooldown data for next prize/battle\ncontract FighterBattle is FighterOwnership {\n    event FighterUpdated(uint256 fighterId);\n    \n    /// @dev The address of the sibling contract that handles battles\n    address public battleContractAddress;\n\n    /// @dev If set to false the `battleContractAddress` can never be updated again\n    bool public battleContractAddressCanBeUpdated = true;\n    \n    function setBattleAddress(address _address) public onlyCEO {\n        require(battleContractAddressCanBeUpdated == true);\n\n        battleContractAddress = _address;\n    }\n\n    function foreverBlockBattleAddressUpdate() public onlyCEO {\n        battleContractAddressCanBeUpdated = false;\n    }\n    \n    modifier onlyBattleContract() {\n        require(msg.sender == battleContractAddress);\n        _;\n    }\n    \n    function createPrizeFighter(\n        uint16 _generation,\n        uint256 _genes,\n        uint8 _dexterity,\n        uint8 _strength,\n        uint8 _vitality,\n        uint8 _luck,\n        address _owner\n    ) public onlyBattleContract {\n        require(_generation > 0);\n        \n        _createFighter(_generation, _genes, _dexterity, _strength, _vitality, _luck, _owner);\n    }\n    \n    // Update fighter functions\n    \n    // The logic for creating so many different functions is that it will be\n    // easier to optimise for gas costs having all these available to us.\n    // The contract deployment will be more expensive, but future costs can be\n    // cheaper.\n    function updateFighter(\n        uint256 _fighterId,\n        uint8 _dexterity,\n        uint8 _strength,\n        uint8 _vitality,\n        uint8 _luck,\n        uint32 _experience,\n        uint64 _prizeCooldownEndTime,\n        uint16 _prizeCooldownIndex,\n        uint64 _battleCooldownEndTime,\n        uint16 _battlesFought,\n        uint16 _battlesWon\n    )\n        public onlyBattleContract\n    {\n        Fighter storage fighter = fighters[_fighterId];\n        \n        fighter.dexterity = _dexterity;\n        fighter.strength = _strength;\n        fighter.vitality = _vitality;\n        fighter.luck = _luck;\n        fighter.experience = _experience;\n        \n        fighter.prizeCooldownEndTime = _prizeCooldownEndTime;\n        fighter.prizeCooldownIndex = _prizeCooldownIndex;\n        fighter.battleCooldownEndTime = _battleCooldownEndTime;\n        fighter.battlesFought = _battlesFought;\n        fighter.battlesWon = _battlesWon;\n        \n        FighterUpdated(_fighterId);\n    }\n    \n    function updateFighterStats(\n        uint256 _fighterId,\n        uint8 _dexterity,\n        uint8 _strength,\n        uint8 _vitality,\n        uint8 _luck,\n        uint32 _experience\n    )\n        public onlyBattleContract\n    {\n        Fighter storage fighter = fighters[_fighterId];\n        \n        fighter.dexterity = _dexterity;\n        fighter.strength = _strength;\n        fighter.vitality = _vitality;\n        fighter.luck = _luck;\n        fighter.experience = _experience;\n        \n        FighterUpdated(_fighterId);\n    }\n    \n    function updateFighterBattleStats(\n        uint256 _fighterId,\n        uint64 _prizeCooldownEndTime,\n        uint16 _prizeCooldownIndex,\n        uint64 _battleCooldownEndTime,\n        uint16 _battlesFought,\n        uint16 _battlesWon\n    )\n        public onlyBattleContract\n    {\n        Fighter storage fighter = fighters[_fighterId];\n        \n        fighter.prizeCooldownEndTime = _prizeCooldownEndTime;\n        fighter.prizeCooldownIndex = _prizeCooldownIndex;\n        fighter.battleCooldownEndTime = _battleCooldownEndTime;\n        fighter.battlesFought = _battlesFought;\n        fighter.battlesWon = _battlesWon;\n        \n        FighterUpdated(_fighterId);\n    }\n    \n    function updateDexterity(uint256 _fighterId, uint8 _dexterity) public onlyBattleContract {\n        fighters[_fighterId].dexterity = _dexterity;\n        FighterUpdated(_fighterId);\n    }\n    \n    function updateStrength(uint256 _fighterId, uint8 _strength) public onlyBattleContract {\n        fighters[_fighterId].strength = _strength;\n        FighterUpdated(_fighterId);\n    }\n    \n    function updateVitality(uint256 _fighterId, uint8 _vitality) public onlyBattleContract {\n        fighters[_fighterId].vitality = _vitality;\n        FighterUpdated(_fighterId);\n    }\n    \n    function updateLuck(uint256 _fighterId, uint8 _luck) public onlyBattleContract {\n        fighters[_fighterId].luck = _luck;\n        FighterUpdated(_fighterId);\n    }\n    \n    function updateExperience(uint256 _fighterId, uint32 _experience) public onlyBattleContract {\n        fighters[_fighterId].experience = _experience;\n        FighterUpdated(_fighterId);\n    }\n}\n\n/// @title Handles creating auctions for sale of fighters.\n///  This wrapper of ReverseAuction exists only so that users can create\n///  auctions with only one transaction.\ncontract FighterAuction is FighterBattle {\n    SaleClockAuction public saleAuction;\n\n    function setSaleAuctionAddress(address _address) public onlyCEO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n\n        require(candidateContract.isSaleClockAuction());\n\n        saleAuction = candidateContract;\n    }\n\n    function createSaleAuction(\n        uint256 _fighterId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        public\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If fighter is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _fighterId));\n        _approve(_fighterId, saleAuction);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer approval after escrowing the fighter.\n        saleAuction.createAuction(\n            _fighterId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    /// @dev Transfers the balance of the sale auction contract\n    /// to the FighterCore contract. We use two-step withdrawal to\n    /// prevent two transfer calls in the auction bid function.\n    function withdrawAuctionBalances() external onlyCOO {\n        saleAuction.withdrawBalance();\n    }\n}\n\n\n/// @title all functions related to creating fighters\ncontract FighterMinting is FighterAuction {\n\n    // Limits the number of fighters the contract owner can ever create.\n    uint256 public promoCreationLimit = 5000;\n    uint256 public gen0CreationLimit = 25000;\n\n    // Constants for gen0 auctions.\n    uint256 public gen0StartingPrice = 500 finney;\n    uint256 public gen0EndingPrice = 10 finney;\n    uint256 public gen0AuctionDuration = 1 days;\n\n    // Counts the number of fighters the contract owner has created.\n    uint256 public promoCreatedCount;\n    uint256 public gen0CreatedCount;\n\n    /// @dev we can create promo fighters, up to a limit\n    function createPromoFighter(\n        uint256 _genes,\n        uint8 _dexterity,\n        uint8 _strength,\n        uint8 _vitality,\n        uint8 _luck,\n        address _owner\n    ) public onlyCOO {\n        if (_owner == address(0)) {\n             _owner = cooAddress;\n        }\n        require(promoCreatedCount < promoCreationLimit);\n        require(gen0CreatedCount < gen0CreationLimit);\n\n        promoCreatedCount++;\n        gen0CreatedCount++;\n        \n        _createFighter(0, _genes, _dexterity, _strength, _vitality, _luck, _owner);\n    }\n\n    /// @dev Creates a new gen0 fighter with the given genes and\n    ///  creates an auction for it.\n    function createGen0Auction(\n        uint256 _genes,\n        uint8 _dexterity,\n        uint8 _strength,\n        uint8 _vitality,\n        uint8 _luck\n    ) public onlyCOO {\n        require(gen0CreatedCount < gen0CreationLimit);\n\n        uint256 fighterId = _createFighter(0, _genes, _dexterity, _strength, _vitality, _luck, address(this));\n        \n        _approve(fighterId, saleAuction);\n\n        saleAuction.createAuction(\n            fighterId,\n            _computeNextGen0Price(),\n            gen0EndingPrice,\n            gen0AuctionDuration,\n            address(this)\n        );\n\n        gen0CreatedCount++;\n    }\n\n    /// @dev Computes the next gen0 auction starting price, given\n    ///  the average of the past 4 prices + 50%.\n    function _computeNextGen0Price() internal view returns (uint256) {\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n\n        // sanity check to ensure we don't overflow arithmetic (this big number is 2^128-1).\n        require(avePrice < 340282366920938463463374607431768211455);\n\n        uint256 nextPrice = avePrice + (avePrice / 2);\n\n        // We never auction for less than starting price\n        if (nextPrice < gen0StartingPrice) {\n            nextPrice = gen0StartingPrice;\n        }\n\n        return nextPrice;\n    }\n}\n\n\n/// @title CryptoFighters: Collectible, battlable fighters on the Ethereum blockchain.\n/// @dev The main CryptoFighters contract\ncontract FighterCore is FighterMinting {\n\n    // This is the main CryptoFighters contract. We have several seperately-instantiated sibling contracts\n    // that handle auctions, battles and the creation of new fighters. By keeping\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\n    // fighter ownership.\n    //\n    //      - FighterBase: This is where we define the most fundamental code shared throughout the core\n    //             functionality. This includes our main data storage, constants and data types, plus\n    //             internal functions for managing these items.\n    //\n    //      - FighterAccessControl: This contract manages the various addresses and constraints for operations\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\n    //\n    //      - FighterOwnership: This provides the methods required for basic non-fungible token\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n    //\n    //      - FighterBattle: This file contains the methods necessary to allow a separate contract to handle battles\n    //             allowing it to reward new prize fighters as well as update fighter stats.\n    //\n    //      - FighterAuction: Here we have the public methods for auctioning or bidding on fighters.\n    //             The actual auction functionality is handled in a sibling sales contract,\n    //             while auction creation and bidding is mostly mediated through this facet of the core contract.\n    //\n    //      - FighterMinting: This final facet contains the functionality we use for creating new gen0 fighters.\n    //             We can make up to 5000 \"promo\" fighters that can be given away, and all others can only be created and then immediately put up\n    //             for auction via an algorithmically determined starting price. Regardless of how they\n    //             are created, there is a hard limit of 25,000 gen0 fighters.\n\n    // Set in case the core contract is broken and an upgrade is required\n    address public newContractAddress;\n\n    function FighterCore() public {\n        paused = true;\n\n        ceoAddress = msg.sender;\n        cooAddress = msg.sender;\n        cfoAddress = msg.sender;\n\n        // start with the mythical fighter 0\n        _createFighter(0, uint256(-1), uint8(-1), uint8(-1), uint8(-1), uint8(-1),  address(0));\n    }\n\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n    ///  breaking bug. This method does nothing but keep track of the new contract and\n    ///  emit a message indicating that the new address is set. It's up to clients of this\n    ///  contract to update to the new contract address in that case. (This contract will\n    ///  be paused indefinitely if such an upgrade takes place.)\n    /// @param _v2Address new address\n    function setNewAddress(address _v2Address) public onlyCEO whenPaused {\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }\n\n    /// @notice No tipping!\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\n    function() external payable {\n        require(msg.sender == address(saleAuction));\n    }\n\n    /// @param _id The ID of the fighter of interest.\n    function getFighter(uint256 _id)\n        public\n        view\n        returns (\n        uint256 prizeCooldownEndTime,\n        uint256 battleCooldownEndTime,\n        uint256 prizeCooldownIndex,\n        uint256 battlesFought,\n        uint256 battlesWon,\n        uint256 generation,\n        uint256 genes,\n        uint256 dexterity,\n        uint256 strength,\n        uint256 vitality,\n        uint256 luck,\n        uint256 experience\n    ) {\n        Fighter storage fighter = fighters[_id];\n\n        prizeCooldownEndTime = fighter.prizeCooldownEndTime;\n        battleCooldownEndTime = fighter.battleCooldownEndTime;\n        prizeCooldownIndex = fighter.prizeCooldownIndex;\n        battlesFought = fighter.battlesFought;\n        battlesWon = fighter.battlesWon;\n        generation = fighter.generation;\n        genes = fighter.genes;\n        dexterity = fighter.dexterity;\n        strength = fighter.strength;\n        vitality = fighter.vitality;\n        luck = fighter.luck;\n        experience = fighter.experience;\n    }\n\n    /// @dev Override unpause so it requires all external contract addresses\n    ///  to be set before contract can be unpaused. Also, we can't have\n    ///  newContractAddress set either, because then the contract was upgraded.\n    function unpause() public onlyCEO whenPaused {\n        require(saleAuction != address(0));\n        require(newContractAddress == address(0));\n\n        super.unpause();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_luck\",\"type\":\"uint8\"}],\"name\":\"updateLuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_generation\",\"type\":\"uint16\"},{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_dexterity\",\"type\":\"uint8\"},{\"name\":\"_strength\",\"type\":\"uint8\"},{\"name\":\"_vitality\",\"type\":\"uint8\"},{\"name\":\"_luck\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPrizeFighter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_prizeCooldownEndTime\",\"type\":\"uint64\"},{\"name\":\"_prizeCooldownIndex\",\"type\":\"uint16\"},{\"name\":\"_battleCooldownEndTime\",\"type\":\"uint64\"},{\"name\":\"_battlesFought\",\"type\":\"uint16\"},{\"name\":\"_battlesWon\",\"type\":\"uint16\"}],\"name\":\"updateFighterBattleStats\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_dexterity\",\"type\":\"uint8\"},{\"name\":\"_strength\",\"type\":\"uint8\"},{\"name\":\"_vitality\",\"type\":\"uint8\"},{\"name\":\"_luck\",\"type\":\"uint8\"},{\"name\":\"_experience\",\"type\":\"uint32\"},{\"name\":\"_prizeCooldownEndTime\",\"type\":\"uint64\"},{\"name\":\"_prizeCooldownIndex\",\"type\":\"uint16\"},{\"name\":\"_battleCooldownEndTime\",\"type\":\"uint64\"},{\"name\":\"_battlesFought\",\"type\":\"uint16\"},{\"name\":\"_battlesWon\",\"type\":\"uint16\"}],\"name\":\"updateFighter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_dexterity\",\"type\":\"uint8\"},{\"name\":\"_strength\",\"type\":\"uint8\"},{\"name\":\"_vitality\",\"type\":\"uint8\"},{\"name\":\"_luck\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoFighter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_dexterity\",\"type\":\"uint8\"}],\"name\":\"updateDexterity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLostFighter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_experience\",\"type\":\"uint32\"}],\"name\":\"updateExperience\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighterIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFighter\",\"outputs\":[{\"name\":\"prizeCooldownEndTime\",\"type\":\"uint256\"},{\"name\":\"battleCooldownEndTime\",\"type\":\"uint256\"},{\"name\":\"prizeCooldownIndex\",\"type\":\"uint256\"},{\"name\":\"battlesFought\",\"type\":\"uint256\"},{\"name\":\"battlesWon\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"dexterity\",\"type\":\"uint256\"},{\"name\":\"strength\",\"type\":\"uint256\"},{\"name\":\"vitality\",\"type\":\"uint256\"},{\"name\":\"luck\",\"type\":\"uint256\"},{\"name\":\"experience\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_dexterity\",\"type\":\"uint8\"},{\"name\":\"_strength\",\"type\":\"uint8\"},{\"name\":\"_vitality\",\"type\":\"uint8\"},{\"name\":\"_luck\",\"type\":\"uint8\"},{\"name\":\"_experience\",\"type\":\"uint32\"}],\"name\":\"updateFighterStats\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_vitality\",\"type\":\"uint8\"}],\"name\":\"updateVitality\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighterIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0EndingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0StartingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_dexterity\",\"type\":\"uint8\"},{\"name\":\"_strength\",\"type\":\"uint8\"},{\"name\":\"_vitality\",\"type\":\"uint8\"},{\"name\":\"_luck\",\"type\":\"uint8\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"foreverBlockBattleAddressUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBattleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterId\",\"type\":\"uint256\"},{\"name\":\"_strength\",\"type\":\"uint8\"}],\"name\":\"updateStrength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleContractAddressCanBeUpdated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0AuctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fighterId\",\"type\":\"uint256\"}],\"name\":\"FighterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fighterId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"FighterCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]",
  "bytecode": ""
}