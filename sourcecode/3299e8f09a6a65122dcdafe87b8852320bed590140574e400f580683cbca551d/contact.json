{
  "address": "0x5b813a2f4b58183d270975ab60700740af00a3c9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CrystalAirdropGame",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\npragma solidity ^0.4.24;\n\n/*\n* CrystalAirdropGame\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\ncontract CryptoMiningWarInterface {\n\tuint256 public roundNumber;\n    uint256 public deadline; \n    function addCrystal( address _addr, uint256 _value ) public {}\n}\ncontract CrystalAirdropGame {\n\tusing SafeMath for uint256;\n\n\taddress public administrator;\n\t// mini game\n    uint256 public MINI_GAME_TIME_DEFAULT = 60 * 5;\n    uint256 public MINI_GAME_PRIZE_CRYSTAL = 100;\n    uint256 public MINI_GAME_BETWEEN_TIME = 8 hours;\n    uint256 public MINI_GAME_ADD_TIME_DEFAULT = 15;\n    address public miningWarContractAddress;\n    uint256 public miniGameId = 0;\n    uint256 public noRoundMiniGame;\n    CryptoMiningWarInterface public MiningWarContract;\n    /** \n    * Admin can set the bonus of game's reward\n    */\n    uint256 public MINI_GAME_BONUS = 100;\n    /** \n    * @dev mini game information\n    */\n    mapping(uint256 => MiniGame) public minigames;\n    /** \n    * @dev player information\n    */\n    mapping(address => PlayerData) public players;\n   \n    struct MiniGame {\n        uint256 miningWarRoundNumber;\n        bool ended; \n        uint256 prizeCrystal;\n        uint256 startTime;\n        uint256 endTime;\n        address playerWin;\n        uint256 totalPlayer;\n    }\n    struct PlayerData {\n        uint256 currentMiniGameId;\n        uint256 lastMiniGameId; \n        uint256 win;\n        uint256 share;\n        uint256 totalJoin;\n        uint256 miningWarRoundNumber;\n    }\n    event eventEndMiniGame(\n        address playerWin,\n        uint256 crystalBonus\n    );\n    event eventJoinMiniGame(\n        uint256 totalJoin\n    );\n    modifier disableContract()\n    {\n        require(tx.origin == msg.sender);\n        _;\n    }\n\n    constructor() public {\n        administrator = msg.sender;\n        // set interface main contract\n        miningWarContractAddress = address(0xf84c61bb982041c030b8580d1634f00fffb89059);\n        MiningWarContract = CryptoMiningWarInterface(miningWarContractAddress);\n    }\n\n    /** \n    * @dev MainContract used this function to verify game's contract\n    */\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n    {\n    \t_isContractMiniGame = true;\n    }\n\n    /** \n    * @dev set discount bonus for game \n    * require is administrator\n    */\n    function setDiscountBonus( uint256 _discountBonus ) public \n    {\n        require( administrator == msg.sender );\n        MINI_GAME_BONUS = _discountBonus;\n    }\n\n    /** \n    * @dev Main Contract call this function to setup mini game.\n    * @param _miningWarRoundNumber is current main game round number\n    * @param _miningWarDeadline Main game's end time\n    */\n    function setupMiniGame( uint256 _miningWarRoundNumber, uint256 _miningWarDeadline ) public\n    {\n        require(minigames[ miniGameId ].miningWarRoundNumber < _miningWarRoundNumber && msg.sender == miningWarContractAddress);\n        // rerest current mini game to default\n        minigames[ miniGameId ] = MiniGame(0, true, 0, 0, 0, 0x0, 0);\n        noRoundMiniGame = 0;         \n        startMiniGame();\t\n    }\n\n    /**\n    * @dev start the mini game\n    */\n    function startMiniGame() private \n    {      \n        uint256 miningWarRoundNumber = getMiningWarRoundNumber();\n\n        require(minigames[ miniGameId ].ended == true);\n        // caculate information for next mini game\n        uint256 currentPrizeCrystal;\n        if ( noRoundMiniGame == 0 ) {\n            currentPrizeCrystal = SafeMath.div(SafeMath.mul(MINI_GAME_PRIZE_CRYSTAL, MINI_GAME_BONUS),100);\n        } else {\n            uint256 rate = 168 * MINI_GAME_BONUS;\n\n            currentPrizeCrystal = SafeMath.div(SafeMath.mul(minigames[miniGameId].prizeCrystal, rate), 10000); // price * 168 / 100 * MINI_GAME_BONUS / 100 \n        }\n\n        uint256 startTime = now + MINI_GAME_BETWEEN_TIME;\n        uint256 endTime = startTime + MINI_GAME_TIME_DEFAULT;\n        noRoundMiniGame = noRoundMiniGame + 1;\n        // start new round mini game\n        miniGameId = miniGameId + 1;\n        minigames[ miniGameId ] = MiniGame(miningWarRoundNumber, false, currentPrizeCrystal, startTime, endTime, 0x0, 0);\n    }\n\n    /**\n    * @dev end Mini Game's round\n    */\n    function endMiniGame() private  \n    {  \n        require(minigames[ miniGameId ].ended == false && (minigames[ miniGameId ].endTime <= now ));\n        \n        uint256 crystalBonus = SafeMath.div( SafeMath.mul(minigames[ miniGameId ].prizeCrystal, 50), 100 );\n        // update crystal bonus for player win\n        if (minigames[ miniGameId ].playerWin != 0x0) {\n            PlayerData storage p = players[minigames[ miniGameId ].playerWin];\n            p.win =  p.win + crystalBonus;\n        }\n        // end current mini game\n        minigames[ miniGameId ].ended = true;\n        emit eventEndMiniGame(minigames[ miniGameId ].playerWin, crystalBonus);\n        // start new mini game\n        startMiniGame();\n    }\n\n    /**\n    * @dev player join this round\n    */\n    function joinMiniGame() public disableContract\n    {        \n        require(now >= minigames[ miniGameId ].startTime && minigames[ miniGameId ].ended == false);\n        \n        PlayerData storage p = players[msg.sender];\n        if (now <= minigames[ miniGameId ].endTime) {\n            // update player data in current mini game\n            if (p.currentMiniGameId == miniGameId) {\n                p.totalJoin = p.totalJoin + 1;\n            } else {\n                // if player join an new mini game then update share of last mini game for this player \n                updateShareCrystal();\n                p.currentMiniGameId = miniGameId;\n                p.totalJoin = 1;\n                p.miningWarRoundNumber = minigames[ miniGameId ].miningWarRoundNumber;\n            }\n            // update information for current mini game \n            if ( p.totalJoin <= 1 ) { // this player into the current mini game for the first time \n                minigames[ miniGameId ].totalPlayer = minigames[ miniGameId ].totalPlayer + 1;\n            }\n            minigames[ miniGameId ].playerWin = msg.sender;\n            minigames[ miniGameId ].endTime = minigames[ miniGameId ].endTime + MINI_GAME_ADD_TIME_DEFAULT;\n            emit eventJoinMiniGame(p.totalJoin);\n        } else {\n            // need run end round\n            if (minigames[ miniGameId ].playerWin == 0x0) {\n                updateShareCrystal();\n                p.currentMiniGameId = miniGameId;\n                p.lastMiniGameId = miniGameId;\n                p.totalJoin = 1;\n                p.miningWarRoundNumber = minigames[ miniGameId ].miningWarRoundNumber;\n\n                minigames[ miniGameId ].playerWin = msg.sender;\n            }\n            endMiniGame();\n        }\n    }\n\n    /**\n    * @dev update share bonus for player who join the game\n    */\n    function updateShareCrystal() private\n    {\n        uint256 miningWarRoundNumber = getMiningWarRoundNumber();\n        PlayerData storage p = players[msg.sender];\n        // check current mini game of player join. if mining war start new round then reset player data \n        if ( p.miningWarRoundNumber != miningWarRoundNumber) {\n            p.share = 0;\n            p.win = 0;\n        } else if (minigames[ p.currentMiniGameId ].ended == true && p.lastMiniGameId < p.currentMiniGameId && minigames[ p.currentMiniGameId ].miningWarRoundNumber == miningWarRoundNumber) {\n            // check current mini game of player join, last update mini game and current mining war round id\n            // require this mini game is children of mining war game( is current mining war round id ) \n            p.share = SafeMath.add(p.share, calculateShareCrystal(p.currentMiniGameId));\n            p.lastMiniGameId = p.currentMiniGameId;\n        }\n    }\n\n    /**\n    * @dev claim crystals\n    */\n    function claimCrystal() public\n    {\n        // should run end round\n        if ( minigames[miniGameId].endTime < now ) {\n            endMiniGame();\n        }\n        updateShareCrystal(); \n        // update crystal for this player to main game\n        uint256 crystalBonus = players[msg.sender].win + players[msg.sender].share;\n        MiningWarContract.addCrystal(msg.sender,crystalBonus); \n        // update player data. reset value win and share of player\n        PlayerData storage p = players[msg.sender];\n        p.win = 0;\n        p.share = 0;\n    \t\n    }\n\n    /**\n    * @dev calculate share crystal of player\n    */\n    function calculateShareCrystal(uint256 _miniGameId) public view returns(uint256 _share)\n    {\n        PlayerData memory p = players[msg.sender];\n        if ( p.lastMiniGameId >= p.currentMiniGameId && p.currentMiniGameId != 0) {\n            _share = 0;\n        } else {\n            _share = SafeMath.div( SafeMath.div( SafeMath.mul(minigames[ _miniGameId ].prizeCrystal, 50), 100 ), minigames[ _miniGameId ].totalPlayer );\n        }\n    }\n\n    function getMiningWarDealine () private view returns( uint256 _dealine )\n    {\n        _dealine = MiningWarContract.deadline();\n    }\n\n    function getMiningWarRoundNumber () private view returns( uint256 _roundNumber )\n    {\n        _roundNumber = MiningWarContract.roundNumber();\n    }\n}",
  "bytecode": "608060405261012c6001556064600255617080600355600f6004556000600655606460095534801561003057600080fd5b5060008054600160a060020a0319908116331790915560058054821673f84c61bb982041c030b8580d1634f00fffb89059179081905560088054909216600160a060020a0391909116179055610d8b8061008b6000396000f3006080604052600436106100fb5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c69b1898114610100578063187fd079146101175780633281d5761461013e57806348a8b4271461016757806349462b531461017f57806359a02652146101d85780636231775b14610209578063744d0a921461021e57806375f289bc146102335780639831ca4d1461024b578063be7ccd7e14610260578063ca2cef511461027b578063cb9a20d014610290578063d7ecb5e3146102a5578063de8bf3b6146102ba578063decd8a25146102cf578063e2eb41ff146102e4578063f53d0a8e14610338575b600080fd5b34801561010c57600080fd5b5061011561034d565b005b34801561012357600080fd5b5061012c610437565b60408051918252519081900360200190f35b34801561014a57600080fd5b5061015361043d565b604080519115158252519081900360200190f35b34801561017357600080fd5b5061012c600435610442565b34801561018b57600080fd5b5061019760043561050c565b6040805197885295151560208801528686019490945260608601929092526080850152600160a060020a031660a084015260c0830152519081900360e00190f35b3480156101e457600080fd5b506101ed610556565b60408051600160a060020a039092168252519081900360200190f35b34801561021557600080fd5b5061012c610565565b34801561022a57600080fd5b5061012c61056b565b34801561023f57600080fd5b50610115600435610571565b34801561025757600080fd5b5061011561058d565b34801561026c57600080fd5b50610115600435602435610787565b34801561028757600080fd5b506101ed610878565b34801561029c57600080fd5b5061012c610887565b3480156102b157600080fd5b5061012c61088d565b3480156102c657600080fd5b5061012c610893565b3480156102db57600080fd5b5061012c610899565b3480156102f057600080fd5b50610305600160a060020a036004351661089f565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b34801561034457600080fd5b506101ed6108d4565b6006546000908152600a60205260408120600401548190421115610373576103736108e3565b61037b610a24565b336000818152600b6020526040808220600381015460029091015460085483517ff6e212ea00000000000000000000000000000000000000000000000000000000815260048101969096529101602485018190529151919550600160a060020a03169263f6e212ea92604480830193919282900301818387803b15801561040157600080fd5b505af1158015610415573d6000803e3d6000fd5b5050336000908152600b60205260408120600281018290556003015550505050565b60015481565b600190565b600061044c610d28565b50336000908152600b6020908152604091829020825160c08101845281548082526001830154938201849052600283015494820194909452600382015460608201526004820154608082015260059091015460a082015291118015906104b25750805115155b156104c05760009150610506565b6000838152600a6020526040902060020154610503906104ec906104e5906032610ad7565b6064610b0d565b6000858152600a6020526040902060060154610b0d565b91505b50919050565b600a602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949560ff90941694929391929091600160a060020a03169087565b600554600160a060020a031681565b60065481565b60095481565b600054600160a060020a0316331461058857600080fd5b600955565b600032331461059b57600080fd5b6006546000908152600a602052604090206003015442108015906105d457506006546000908152600a602052604090206001015460ff16155b15156105df57600080fd5b50336000908152600b602090815260408083206006548452600a9092529091206004015442116106fb576006548154141561062457600481018054600101905561064f565b61062c610a24565b60068054825560016004830155546000908152600a602052604090205460058201555b600481015460011061067657600680546000908152600a6020526040902001805460010190555b600680546000908152600a60209081526040808320600501805473ffffffffffffffffffffffffffffffffffffffff1916331790556004805494548452928190208301805490940190935590830154825190815291517f2565721fc5267794b779224f650d9e5fea66a4cc4d49e23702a7fa1b861efef19281900390910190a1610784565b6006546000908152600a6020526040902060050154600160a060020a0316151561077c57610727610a24565b60068054808355600180840191909155600483015580546000908152600a60205260408082205460058086019190915592548252902001805473ffffffffffffffffffffffffffffffffffffffff1916331790555b6107846108e3565b50565b6006546000908152600a6020526040902054821180156107b15750600554600160a060020a031633145b15156107bc57600080fd5b6040805160e081018252600080825260016020808401828152848601848152606086018581526080870186815260a0880187815260c08901888152600680548a52600a909752998820985189559351958801805460ff1916961515969096179095559051600287015551600386015591516004850155905160058401805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905592519190920155600755610874610b24565b5050565b600854600160a060020a031681565b60045481565b60035481565b60075481565b60025481565b600b60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b600054600160a060020a031681565b6006546000908152600a6020526040812060010154819060ff1615801561091e57506006546000908152600a60205260409020600401544210155b151561092957600080fd5b6006546000908152600a602052604090206002015461094d906104e5906032610ad7565b6006546000908152600a6020526040902060050154909250600160a060020a0316156109a957506006546000908152600a6020908152604080832060050154600160a060020a03168352600b9091529020600281018054830190555b600680546000908152600a602090815260408083206001908101805460ff191690911790559254825290829020600501548251600160a060020a03909116815290810184905281517fdb32b3d80b7ca1141c1b65362e2c5b0e340c3b14e031e2648fcb2ae30ae13732929181900390910190a1610874610b24565b600080610a2f610c89565b336000908152600b60205260409020600581015491935091508214610a61576000600382018190556002820155610874565b80546000908152600a6020526040902060019081015460ff161515148015610a8d575080546001820154105b8015610aa8575080546000908152600a602052604090205482145b1561087457610ac78160030154610ac28360000154610442565b610d19565b6003820155805460018201555050565b600080831515610aea5760009150610b06565b50828202828482811515610afa57fe5b0414610b0257fe5b8091505b5092915050565b6000808284811515610b1b57fe5b04949350505050565b6000806000806000610b34610c89565b6006546000908152600a6020526040902060019081015491965060ff909116151514610b5f57600080fd5b6007541515610b8057610b796104e5600254600954610ad7565b9350610bb8565b60095460a8029250610bb5610bad600a600060065481526020019081526020016000206002015485610ad7565b612710610b0d565b93505b5050600380546001805460078054830190556006805483018082556040805160e081018252998a5260006020808c018281528c84019b8c524290980160608d01818152960160808d0190815260a08d0183815260c08e01848152958452600a909252929091209a518b559551948a01805460ff191695151595909517909455965160028901559051938701939093555160048601555160058501805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790559151929091019190915550565b600854604080517f4e2786fb0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691634e2786fb91600480830192602092919082900301818787803b158015610ce857600080fd5b505af1158015610cfc573d6000803e3d6000fd5b505050506040513d6020811015610d1257600080fd5b5051919050565b600082820183811015610b0257fe5b60c06040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250905600a165627a7a72305820ab5ef211989faf5f1db2c9b2318f6955fa8be250addcf14f8ee1a443fea5206b0029"
}