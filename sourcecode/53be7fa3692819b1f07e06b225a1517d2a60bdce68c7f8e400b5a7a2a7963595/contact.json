{
  "address": "0x0b98f937f6edd6f66b0f0a210d3dcd8ec1063cb6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MiningKing",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\npragma solidity ^0.4.18;\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/*\n\nThis is a King Of The Hill contract which requires Proof of Work (hashpower) to set the king\n\nThis global non-owned contract proxy-mints 0xBTC through a personally-owned mintHelper contract (MintHelper.sol)\n\n*/\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\ncontract ERC918Interface {\n\n  function epochCount() public constant returns (uint);\n\n  function totalSupply() public constant returns (uint);\n  function getMiningDifficulty() public constant returns (uint);\n  function getMiningTarget() public constant returns (uint);\n  function getMiningReward() public constant returns (uint);\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\n\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n}\n\ncontract mintForwarderInterface\n{\n  function mintForwarder(uint256 nonce, bytes32 challenge_digest, address[] proxyMintArray) public returns (bool success);\n}\n\ncontract proxyMinterInterface\n{\n  function proxyMint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n}\n\n\ncontract MiningKing   {\n\n\n  using SafeMath for uint;\n\n\n   address public miningKing;\n\n   address public minedToken;\n\n\n   event TransferKing(address from, address to);\n\n   // 0xBTC is 0xb6ed7644c69416d67b522e20bc294a9a9b405b31;\n  constructor(address mintableToken) public  {\n    minedToken = mintableToken;\n  }\n\n\n  //do not allow ether to enter\n  function() public payable {\n      revert();\n  }\n\n  function getKing() view public returns (address king)\n  {\n    return miningKing;\n  }\n\n   function transferKing(address newKing) public   {\n\n       require(msg.sender == miningKing);\n\n       miningKing = newKing;\n\n       emit TransferKing(msg.sender, newKing);\n\n   }\n\n\n/**\nSet the king to the Ethereum Address which is encoded as 160 bits of the 256 bit mining nonce\n\n\n**/\n\n//proxyMintWithKing\n   function mintForwarder(uint256 nonce, bytes32 challenge_digest, address[] proxyMintArray) public returns (bool)\n   {\n\n      require(proxyMintArray.length > 0);\n\n\n      uint previousEpochCount = ERC918Interface(minedToken).epochCount();\n\n      address proxyMinter = proxyMintArray[0];\n\n      if(proxyMintArray.length == 1)\n      {\n        //Forward to the last proxyMint contract, typically a pool's owned  mint contract\n        require(proxyMinterInterface(proxyMinter).proxyMint(nonce, challenge_digest));\n      }else{\n        //if array length is greater than 1, pop the proxyMinter from the front of the array and keep cascading down the chain...\n        address[] memory remainingProxyMintArray = popFirstFromArray(proxyMintArray);\n\n        require(mintForwarderInterface(proxyMinter).mintForwarder(nonce, challenge_digest,remainingProxyMintArray));\n      }\n\n     //make sure that the minedToken really was proxy minted through the proxyMint delegate call chain\n      require( ERC918Interface(minedToken).epochCount() == previousEpochCount.add(1) );\n\n\n\n\n      // UNIQUE CONTRACT ACTION SPACE \n      bytes memory nonceBytes = uintToBytesForAddress(nonce);\n\n      address newKing = bytesToAddress(nonceBytes);\n      \n      miningKing = newKing;\n      // --------\n\n      return true;\n   }\n\n\n  function popFirstFromArray(address[] array) pure public returns (address[] memory)\n  {\n    address[] memory newArray = new address[](array.length-1);\n\n    for (uint i=0; i < array.length-1; i++) {\n      newArray[i] =  array[i+1]  ;\n    }\n\n    return newArray;\n  }\n\n function uintToBytesForAddress(uint256 x) pure public returns (bytes b) {\n\n      b = new bytes(20);\n      for (uint i = 0; i < 20; i++) {\n          b[i] = byte(uint8(x / (2**(8*(31 - i)))));\n      }\n\n      return b;\n    }\n\n\n function bytesToAddress (bytes b) pure public returns (address) {\n     uint result = 0;\n     for (uint i = b.length-1; i+1 > 0; i--) {\n       uint c = uint(b[i]);\n       uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\n       result += to_inc;\n     }\n     return address(result);\n }\n\n\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610d878339810180604052810190808051906020019092919050505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610d03806100846000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306d8619b14610093578063111da3a7146100d6578063405103991461019157806342526e4e146101e85780637920d8041461029157806379687166146102e8578063a3c5dcce1461038e578063edfffca014610424575b600080fd5b34801561009f57600080fd5b506100d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061047b565b005b3480156100e257600080fd5b5061013a600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506105b0565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561017d578082015181840152602081019050610162565b505050509050019250505060405180910390f35b34801561019d57600080fd5b506101a6610678565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101f457600080fd5b5061024f600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061069d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029d57600080fd5b506102a661076a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102f457600080fd5b5061031360048036038101908080359060200190929190505050610793565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610353578082015181840152602081019050610338565b50505050905090810190601f1680156103805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039a57600080fd5b5061040a60048036038101908080359060200190929190803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610867565b604051808215151515815260200191505060405180910390f35b34801561043057600080fd5b50610439610c93565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104d657600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcb21dc7de62e70efdb467b866050922f2845c8b005b478e6ca5dd975819943dd3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b606080600060018451036040519080825280602002602001820160405280156105e85781602001602082028038833980820191505090505b509150600090505b600184510381101561066e57836001820181518110151561060d57fe5b90602001906020020151828281518110151561062557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506105f0565b8192505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000809350600186510392505b600060018401111561075e5785838151811015156106ca57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900491506002600184885103030260100a8202905080840193508280600190039350506106b0565b83945050505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060146040519080825280601f01601f1916602001820160405280156107cb5781602001602082028038833980820191505090505b509150600090505b601481101561085e5780601f0360080260020a838115156107f057fe5b047f010000000000000000000000000000000000000000000000000000000000000002828281518110151561082157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506107d3565b81915050919050565b6000806000606080600080875111151561088057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663829965cc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506040513d602081101561093057600080fd5b8101908080519060200190929190505050945086600081518110151561095257fe5b906020019060200201519350600187511415610a32578373ffffffffffffffffffffffffffffffffffffffff1663b1bb4d358a8a6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001826000191660001916815260200192505050602060405180830381600087803b1580156109e757600080fd5b505af11580156109fb573d6000803e3d6000fd5b505050506040513d6020811015610a1157600080fd5b81019080805190602001909291905050501515610a2d57600080fd5b610b4c565b610a3b876105b0565b92508373ffffffffffffffffffffffffffffffffffffffff1663a3c5dcce8a8a866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610ade578082015181840152602081019050610ac3565b50505050905001945050505050602060405180830381600087803b158015610b0557600080fd5b505af1158015610b19573d6000803e3d6000fd5b505050506040513d6020811015610b2f57600080fd5b81019080805190602001909291905050501515610b4b57600080fd5b5b610b60600186610cb990919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663829965cc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610be657600080fd5b505af1158015610bfa573d6000803e3d6000fd5b505050506040513d6020811015610c1057600080fd5b8101908080519060200190929190505050141515610c2d57600080fd5b610c3689610793565b9150610c418261069d565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001955050505050509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808284019050838110151515610ccd57fe5b80915050929150505600a165627a7a72305820c5d36b0dd56ed8d70b2e13c1b1b14fc1c0102d9b5d03e0d3868398f19eb60c4a0029000000000000000000000000b6ed7644c69416d67b522e20bc294a9a9b405b31",
  "constructorArguments": "000000000000000000000000b6ed7644c69416d67b522e20bc294a9a9b405b31"
}