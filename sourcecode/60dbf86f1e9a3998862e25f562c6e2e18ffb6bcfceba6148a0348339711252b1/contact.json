{
  "address": "0x24358430f5b1f947b04d9d1a22beb6de01cabea2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TTTToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-25\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract TTTToken is ERC20, Ownable {\n\tusing SafeMath for uint;\n\n\tstring public constant name = \"The Tip Token\";\n\tstring public constant symbol = \"TTT\";\n\n\tuint8 public decimals = 18;\n\n\tmapping(address=>uint256) balances;\n\tmapping(address=>mapping(address=>uint256)) allowed;\n\n\t// Supply variables\n\tuint256 public totalSupply_;\n\tuint256 public presaleSupply;\n\tuint256 public crowdsaleSupply;\n\tuint256 public privatesaleSupply;\n\tuint256 public airdropSupply;\n\tuint256 public teamSupply;\n\tuint256 public ecoSupply;\n\n\t// Vest variables\n\tuint256 public firstVestStartsAt;\n\tuint256 public secondVestStartsAt;\n\tuint256 public firstVestAmount;\n\tuint256 public secondVestAmount;\n\tuint256 public currentVestedAmount;\n\n\tuint256 public crowdsaleBurnAmount;\n\n\t// Token sale addresses\n\taddress public privatesaleAddress;\n\taddress public presaleAddress;\n\taddress public crowdsaleAddress;\n\taddress public teamSupplyAddress;\n\taddress public ecoSupplyAddress;\n\taddress public crowdsaleAirdropAddress;\n\taddress public crowdsaleBurnAddress;\n\taddress public tokenSaleAddress;\n\n\t// Token sale state variables\n\tbool public privatesaleFinalized;\n\tbool public presaleFinalized;\n\tbool public crowdsaleFinalized;\n\n\tevent PrivatesaleFinalized(uint tokensRemaining);\n\tevent PresaleFinalized(uint tokensRemaining);\n\tevent CrowdsaleFinalized(uint tokensRemaining);\n\tevent Burn(address indexed burner, uint256 value);\n\tevent TokensaleAddressSet(address tSeller, address from);\n\n\tmodifier onlyTokenSale() {\n\t\trequire(msg.sender == tokenSaleAddress);\n\t\t_;\n\t}\n\n\tmodifier canItoSend() {\n\t\trequire(crowdsaleFinalized == true || (crowdsaleFinalized == false && msg.sender == ecoSupplyAddress));\n\t\t_;\n\t}\n\n\tfunction TTTToken() {\n\t\t// 600 million total supply divided into\n\t\t//\t\t90 million to privatesale address\n\t\t//\t\t120 million to presale address\n\t\t//\t\t180 million to crowdsale address\n\t\t//\t\t90 million to eco supply address\n\t\t//\t\t120 million to team supply address\n\t\ttotalSupply_ = 600000000 * 10**uint(decimals);\n\t\tprivatesaleSupply = 90000000 * 10**uint(decimals);\n\t\tpresaleSupply = 120000000 * 10**uint(decimals);\n\t\tcrowdsaleSupply = 180000000 * 10**uint(decimals);\n\t\tecoSupply = 90000000 * 10**uint(decimals);\n\t\tteamSupply = 120000000 * 10**uint(decimals);\n\n\t\tfirstVestAmount = teamSupply.div(2);\n\t\tsecondVestAmount = firstVestAmount;\n\t\tcurrentVestedAmount = 0;\n\n\t\tprivatesaleAddress = 0xE67EE1935bf160B48BA331074bb743630ee8aAea;\n\t\tpresaleAddress = 0x4A41D67748D16aEB12708E88270d342751223870;\n\t\tcrowdsaleAddress = 0x2eDf855e5A90DF003a5c1039bEcf4a721C9c3f9b;\n\t\tteamSupplyAddress = 0xc4146EcE2645038fbccf79784a6DcbE3C6586c03;\n\t\tecoSupplyAddress = 0xdBA99B92a18930dA39d1e4B52177f84a0C27C8eE;\n\t\tcrowdsaleAirdropAddress = 0x6BCb947a8e8E895d1258C1b2fc84A5d22632E6Fa;\n\t\tcrowdsaleBurnAddress = 0xDF1CAf03FA89AfccdAbDd55bAF5C9C4b9b1ceBaB;\n\n\t\taddToBalance(privatesaleAddress, privatesaleSupply);\n\t\taddToBalance(presaleAddress, presaleSupply);\n\t\taddToBalance(crowdsaleAddress, crowdsaleSupply);\n\t\taddToBalance(teamSupplyAddress, teamSupply);\n\t\taddToBalance(ecoSupplyAddress, ecoSupply);\n\n\t\t// 12/01/2018 @ 12:00am (UTC)\n\t\tfirstVestStartsAt = 1543622400;\n\t\t// 06/01/2019 @ 12:00am (UTC)\n\t\tsecondVestStartsAt = 1559347200;\n\t}\n\n\t// Transfer\n\tfunction transfer(address _to, uint256 _amount) public canItoSend returns (bool success) {\n\t\trequire(balanceOf(msg.sender) >= _amount);\n\t\taddToBalance(_to, _amount);\n\t\tdecrementBalance(msg.sender, _amount);\n\t\tTransfer(msg.sender, _to, _amount);\n\t\treturn true;\n\t}\n\n\t// Transfer from one address to another\n\tfunction transferFrom(address _from, address _to, uint256 _amount) public canItoSend returns (bool success) {\n\t\trequire(allowance(_from, msg.sender) >= _amount);\n\t\tdecrementBalance(_from, _amount);\n\t\taddToBalance(_to, _amount);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n\t\tTransfer(_from, _to, _amount);\n\t\treturn true;\n\t}\n\n\t// Function for token sell contract to call on transfers\n\tfunction transferFromTokenSell(address _to, address _from, uint256 _amount) external onlyTokenSale returns (bool success) {\n\t\trequire(_amount > 0);\n\t\trequire(_to != 0x0);\n\t\trequire(balanceOf(_from) >= _amount);\n\t\tdecrementBalance(_from, _amount);\n\t\taddToBalance(_to, _amount);\n\t\tTransfer(_from, _to, _amount);\n\t\treturn true;\n\t}\n\n\t// Approve another address a certain amount of TTT\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\trequire((_value == 0) || (allowance(msg.sender, _spender) == 0));\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t// Get an address's TTT allowance\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t// Get TTT balance of an address\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n\t// Return total supply\n\tfunction totalSupply() public view returns (uint256 totalSupply) {\n\t\treturn totalSupply_;\n\t}\n\n\t// Set the tokenSell contract address, can only be set once\n\tfunction setTokenSaleAddress(address _tokenSaleAddress) external onlyOwner {\n\t\trequire(tokenSaleAddress == 0x0);\n\t\ttokenSaleAddress = _tokenSaleAddress;\n\t\tTokensaleAddressSet(tokenSaleAddress, msg.sender);\n\t}\n\n\t// Finalize private. If there are leftover TTT, overflow to presale\n\tfunction finalizePrivatesale() external onlyTokenSale returns (bool success) {\n\t\trequire(privatesaleFinalized == false);\n\t\tuint256 amount = balanceOf(privatesaleAddress);\n\t\tif (amount != 0) {\n\t\t\taddToBalance(presaleAddress, amount);\n\t\t\tdecrementBalance(privatesaleAddress, amount);\n\t\t}\n\t\tprivatesaleFinalized = true;\n\t\tPrivatesaleFinalized(amount);\n\t\treturn true;\n\t}\n\n\t// Finalize presale. If there are leftover TTT, overflow to crowdsale\n\tfunction finalizePresale() external onlyTokenSale returns (bool success) {\n\t\trequire(presaleFinalized == false && privatesaleFinalized == true);\n\t\tuint256 amount = balanceOf(presaleAddress);\n\t\tif (amount != 0) {\n\t\t\taddToBalance(crowdsaleAddress, amount);\n\t\t\tdecrementBalance(presaleAddress, amount);\n\t\t}\n\t\tpresaleFinalized = true;\n\t\tPresaleFinalized(amount);\n\t\treturn true;\n\t}\n\n\t// Finalize crowdsale. If there are leftover TTT, add 10% to airdrop, 20% to ecosupply, burn 70% at a later date\n\tfunction finalizeCrowdsale(uint256 _burnAmount, uint256 _ecoAmount, uint256 _airdropAmount) external onlyTokenSale returns(bool success) {\n\t\trequire(presaleFinalized == true && crowdsaleFinalized == false);\n\t\tuint256 amount = balanceOf(crowdsaleAddress);\n\t\tassert((_burnAmount.add(_ecoAmount).add(_airdropAmount)) == amount);\n\t\tif (amount > 0) {\n\t\t\tcrowdsaleBurnAmount = _burnAmount;\n\t\t\taddToBalance(ecoSupplyAddress, _ecoAmount);\n\t\t\taddToBalance(crowdsaleBurnAddress, crowdsaleBurnAmount);\n\t\t\taddToBalance(crowdsaleAirdropAddress, _airdropAmount);\n\t\t\tdecrementBalance(crowdsaleAddress, amount);\n\t\t\tassert(balanceOf(crowdsaleAddress) == 0);\n\t\t}\n\t\tcrowdsaleFinalized = true;\n\t\tCrowdsaleFinalized(amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Burns a specific amount of tokens. * added onlyOwner, as this will only happen from owner, if there are crowdsale leftovers\n\t* @param _value The amount of token to be burned.\n\t* @dev imported from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/BurnableToken.sol\n\t*/\n\tfunction burn(uint256 _value) public onlyOwner {\n\t\trequire(_value <= balances[msg.sender]);\n\t\trequire(crowdsaleFinalized == true);\n\t\t// no need to require value <= totalSupply, since that would imply the\n\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\t\taddress burner = msg.sender;\n\t\tbalances[burner] = balances[burner].sub(_value);\n\t\ttotalSupply_ = totalSupply_.sub(_value);\n\t\tBurn(burner, _value);\n\t\tTransfer(burner, address(0), _value);\n\t}\n\n\t// Transfer tokens from the vested address. 50% available 12/01/2018, the rest available 06/01/2019\n\tfunction transferFromVest(uint256 _amount) public onlyOwner {\n\t\trequire(block.timestamp > firstVestStartsAt);\n\t\trequire(crowdsaleFinalized == true);\n\t\trequire(_amount > 0);\n\t\tif(block.timestamp > secondVestStartsAt) {\n\t\t\t// all tokens available for vest withdrawl\n\t\t\trequire(_amount <= teamSupply);\n\t\t\trequire(_amount <= balanceOf(teamSupplyAddress));\n\t\t} else {\n\t\t\t// only first vest available\n\t\t\trequire(_amount <= (firstVestAmount - currentVestedAmount));\n\t\t\trequire(_amount <= balanceOf(teamSupplyAddress));\n\t\t}\n\t\tcurrentVestedAmount = currentVestedAmount.add(_amount);\n\t\taddToBalance(msg.sender, _amount);\n\t\tdecrementBalance(teamSupplyAddress, _amount);\n\t\tTransfer(teamSupplyAddress, msg.sender, _amount);\n\t}\n\n\t// Add to balance\n\tfunction addToBalance(address _address, uint _amount) internal {\n\t\tbalances[_address] = balances[_address].add(_amount);\n\t}\n\n\t// Remove from balance\n\tfunction decrementBalance(address _address, uint _amount) internal {\n\t\tbalances[_address] = balances[_address].sub(_amount);\n\t}\n\n}",
  "bytecode": "60806040526012600060146101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060149054906101000a900460ff1660ff16600a0a6323c3460002600381905550600060149054906101000a900460ff1660ff16600a0a63055d4a8002600681905550600060149054906101000a900460ff1660ff16600a0a6307270e0002600481905550600060149054906101000a900460ff1660ff16600a0a630aba950002600581905550600060149054906101000a900460ff1660ff16600a0a63055d4a8002600981905550600060149054906101000a900460ff1660ff16600a0a6307270e000260088190555062000160600260085462000521640100000000026200247b179091906401000000009004565b600c81905550600c54600d819055506000600e8190555073e67ee1935bf160b48ba331074bb743630ee8aaea601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550734a41d67748d16aeb12708e88270d342751223870601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550732edf855e5a90df003a5c1039becf4a721c9c3f9b601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073c4146ece2645038fbccf79784a6dcbe3c6586c03601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dba99b92a18930da39d1e4b52177f84a0c27c8ee601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550736bcb947a8e8e895d1258c1b2fc84a5d22632e6fa601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073df1caf03fa89afccdabdd55baf5c9c4b9b1cebab601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000409601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660065462000538640100000000026401000000009004565b62000448601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660045462000538640100000000026401000000009004565b62000487601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660055462000538640100000000026401000000009004565b620004c6601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660085462000538640100000000026401000000009004565b62000505601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660095462000538640100000000026401000000009004565b635c01cf00600a81905550635cf1c000600b81905550620005fe565b600081838115156200052f57fe5b04905092915050565b6200059a81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620005e1640100000000026200245f179091906401000000009004565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008183019050828110151515620005f557fe5b80905092915050565b6124bd806200060e6000396000f300608060405260043610610204576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610209578063095ea7b314610299578063122fe685146102fe57806313ff962a146103555780631448b3ca1461038057806318160ddd146103d757806323b872dd14610402578063258b5c06146104875780632cfac6ec146104e0578063313ce5671461050b57806331d2f8911461053c578063324536eb1461059357806339c5a13e146105be5780633c5e270f146105e957806342966c6814610640578063597d46011461066d5780635afe52071461069c57806362205bd8146106df5780636323b5261461070e5780636d4980931461079357806370a08231146107c25780637348ac1f146108195780637588f82b146108705780638da5cb5b1461089b57806395d89b41146108f2578063a0a6e94014610982578063a1e7e21c146109b1578063a757ac4b146109dc578063a9059cbb14610a33578063aa30abf114610a98578063b3a196e914610aef578063b9689cf314610b1a578063c4694ec614610b71578063caee330514610b9c578063cdcb3cdb14610bc7578063d02e140a14610bf2578063d15334a514610c21578063d22b1a0f14610c4c578063d8c97f3414610c77578063dd62ed3e14610ca4578063f2fde38b14610d1b578063fb3ed5c714610d5e575b600080fd5b34801561021557600080fd5b5061021e610d89565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025e578082015181840152602081019050610243565b50505050905090810190601f16801561028b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a557600080fd5b506102e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dc2565b604051808215151515815260200191505060405180910390f35b34801561030a57600080fd5b50610313610ed6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036157600080fd5b5061036a610efc565b6040518082815260200191505060405180910390f35b34801561038c57600080fd5b50610395610f02565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e357600080fd5b506103ec610f28565b6040518082815260200191505060405180910390f35b34801561040e57600080fd5b5061046d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f32565b604051808215151515815260200191505060405180910390f35b34801561049357600080fd5b506104c6600480360381019080803590602001909291908035906020019092919080359060200190929190505050611178565b604051808215151515815260200191505060405180910390f35b3480156104ec57600080fd5b506104f56113cb565b6040518082815260200191505060405180910390f35b34801561051757600080fd5b506105206113d1565b604051808260ff1660ff16815260200191505060405180910390f35b34801561054857600080fd5b506105516113e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561059f57600080fd5b506105a861140a565b6040518082815260200191505060405180910390f35b3480156105ca57600080fd5b506105d3611410565b6040518082815260200191505060405180910390f35b3480156105f557600080fd5b506105fe611416565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064c57600080fd5b5061066b6004803603810190808035906020019092919050505061143c565b005b34801561067957600080fd5b50610682611674565b604051808215151515815260200191505060405180910390f35b3480156106a857600080fd5b506106dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611687565b005b3480156106eb57600080fd5b506106f4611826565b604051808215151515815260200191505060405180910390f35b34801561071a57600080fd5b50610779600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611839565b604051808215151515815260200191505060405180910390f35b34801561079f57600080fd5b506107a8611967565b604051808215151515815260200191505060405180910390f35b3480156107ce57600080fd5b50610803600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061197a565b6040518082815260200191505060405180910390f35b34801561082557600080fd5b5061082e6119c3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561087c57600080fd5b506108856119e9565b6040518082815260200191505060405180910390f35b3480156108a757600080fd5b506108b06119ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108fe57600080fd5b50610907611a14565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561094757808201518184015260208101905061092c565b50505050905090810190601f1680156109745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561098e57600080fd5b50610997611a4d565b604051808215151515815260200191505060405180910390f35b3480156109bd57600080fd5b506109c6611bd7565b6040518082815260200191505060405180910390f35b3480156109e857600080fd5b506109f1611bdd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a3f57600080fd5b50610a7e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c03565b604051808215151515815260200191505060405180910390f35b348015610aa457600080fd5b50610aad611d38565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610afb57600080fd5b50610b04611d5e565b6040518082815260200191505060405180910390f35b348015610b2657600080fd5b50610b2f611d64565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b7d57600080fd5b50610b86611d8a565b6040518082815260200191505060405180910390f35b348015610ba857600080fd5b50610bb1611d90565b6040518082815260200191505060405180910390f35b348015610bd357600080fd5b50610bdc611d96565b6040518082815260200191505060405180910390f35b348015610bfe57600080fd5b50610c07611d9c565b604051808215151515815260200191505060405180910390f35b348015610c2d57600080fd5b50610c36611f07565b6040518082815260200191505060405180910390f35b348015610c5857600080fd5b50610c61611f0d565b6040518082815260200191505060405180910390f35b348015610c8357600080fd5b50610ca260048036038101908080359060200190929190505050611f13565b005b348015610cb057600080fd5b50610d05600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612132565b6040518082815260200191505060405180910390f35b348015610d2757600080fd5b50610d5c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121b9565b005b348015610d6a57600080fd5b50610d7361230e565b6040518082815260200191505060405180910390f35b6040805190810160405280600d81526020017f5468652054697020546f6b656e0000000000000000000000000000000000000081525081565b600080821480610ddb57506000610dd93385612132565b145b1515610de657600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b600060011515601760169054906101000a900460ff1615151480610fc2575060001515601760169054906101000a900460ff161515148015610fc15750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b5b1515610fcd57600080fd5b81610fd88533612132565b10151515610fe557600080fd5b610fef8483612314565b610ff983836123ad565b61108882600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111d757600080fd5b60011515601760159054906101000a900460ff16151514801561120d575060001515601760169054906101000a900460ff161515145b151561121857600080fd5b611243601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661197a565b90508061126b8461125d878961245f90919063ffffffff16565b61245f90919063ffffffff16565b14151561127457fe5b600081111561136d5784600f819055506112b0601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856123ad565b6112de601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600f546123ad565b61130a601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846123ad565b611336601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612314565b6000611363601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661197a565b14151561136c57fe5b5b6001601760166101000a81548160ff0219169083151502179055507ffdce249bb5494d2b556b2a29c2058ed83479e6c487605b5f9726b8f82a27e6cb816040518082815260200191505060405180910390a160019150509392505050565b60085481565b600060149054906101000a900460ff1681565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600d5481565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561149957600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156114e757600080fd5b60011515601760169054906101000a900460ff16151514151561150957600080fd5b33905061155e82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244690919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115b68260035461244690919063ffffffff16565b6003819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b601760169054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116e257600080fd5b6000601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561172957600080fd5b80601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2e89f1eb44ea4d17129cacefd630726705f95be31ab4538d64054834f33dc262601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b601760149054906101000a900460ff1681565b6000601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561189757600080fd5b6000821115156118a657600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff16141515156118cc57600080fd5b816118d68461197a565b101515156118e357600080fd5b6118ed8383612314565b6118f784836123ad565b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601760159054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f545454000000000000000000000000000000000000000000000000000000000081525081565b600080601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aac57600080fd5b60001515601760159054906101000a900460ff161515148015611ae2575060011515601760149054906101000a900460ff161515145b1515611aed57600080fd5b611b18601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661197a565b9050600081141515611b7d57611b50601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826123ad565b611b7c601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612314565b5b6001601760156101000a81548160ff0219169083151502179055507fba77ddc9e26933f19061480be65d8ea3dcf88fb70efd476df9515333cabee8c4816040518082815260200191505060405180910390a1600191505090565b600f5481565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060011515601760169054906101000a900460ff1615151480611c93575060001515601760169054906101000a900460ff161515148015611c925750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b5b1515611c9e57600080fd5b81611ca83361197a565b10151515611cb557600080fd5b611cbf83836123ad565b611cc93383612314565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600a5481565b60055481565b600080601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dfb57600080fd5b60001515601760149054906101000a900460ff161515141515611e1d57600080fd5b611e48601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661197a565b9050600081141515611ead57611e80601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826123ad565b611eac601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612314565b5b6001601760146101000a81548160ff0219169083151502179055507f3b80683c9980176c21081652987df44d5f29314308fac7e98404e8db4155b710816040518082815260200191505060405180910390a1600191505090565b600c5481565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f6e57600080fd5b600a5442111515611f7e57600080fd5b60011515601760169054906101000a900460ff161515141515611fa057600080fd5b600081111515611faf57600080fd5b600b54421115612008576008548111151515611fca57600080fd5b611ff5601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661197a565b811115151561200357600080fd5b612057565b600e54600c5403811115151561201d57600080fd5b612048601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661197a565b811115151561205657600080fd5b5b61206c81600e5461245f90919063ffffffff16565b600e8190555061207c33826123ad565b6120a8601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612314565b3373ffffffffffffffffffffffffffffffffffffffff16601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561221457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561225057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60075481565b61236681600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244690919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6123ff81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461245f90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600082821115151561245457fe5b818303905092915050565b6000818301905082811015151561247257fe5b80905092915050565b6000818381151561248857fe5b049050929150505600a165627a7a723058208f71ce502c5620926f4674d985447bc818b0163e3eefe9b2b3193115dee200b30029"
}