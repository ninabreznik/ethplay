{
  "address": "0xd1b2ab9a53aef0685a7086b029386f0fba4c1789",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-21\n*/\n\npragma solidity ^0.4.25;\n\n// Author: Securypto Team | Iceman\n// Telegram: ice_man0\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n   constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner)public onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n}\n\n/**\n * @title Token\n * @dev API interface for interacting with the DSGT contract \n */\ninterface Token {\n  function transfer(address _to, uint256 _value)external returns (bool);\n  function balanceOf(address _owner)external view returns (uint256 balance);\n}\n\ncontract Crowdsale is Ownable {\n\n  using SafeMath for uint256;\n\n  Token public token;\n\n  uint256 public raisedETH; // ETH raised\n  uint256 public soldTokens; // Tokens Sold\n  uint256 public saleMinimum = 0.1 * 1 ether;\n  uint256 public price;\n\n  address public beneficiary;\n\n  // They'll be represented by their index numbers i.e \n  // if the state is Dormant, then the value should be 0 \n  // Dormant:0, Active:1, , Successful:2\n  enum State {Dormant, Active,  Successful }\n\n  State public state;\n \n  event ActiveState();\n  event DormantState();\n  event SuccessfulState();\n\n  event BoughtTokens(\n      address indexed who, \n      uint256 tokensBought, \n      uint256 investedETH\n      );\n  \n  constructor() \n              public \n              {\n                token = Token(0x2Ed92cae08B7E24d7C01A11049750498ebCAe8E0);\n                beneficiary = msg.sender;\n    }\n\n    /**\n     * Fallback function\n     *\n     * @dev This function will be called whenever anyone sends funds to a contract,\n     * throws if the sale isn't Active or the sale minimum isn't met\n     */\n    function () public payable {\n        require(msg.value >= saleMinimum);\n        require(state == State.Active);\n        require(token.balanceOf(this) > 0);\n        \n        buyTokens();\n      }\n\n  /**\n  * @dev Function that sells available tokens\n  */\n  function buyTokens() public payable  {\n    \n    uint256 invested = msg.value;\n    \n    uint256 numberOfTokens = invested.mul(price);\n    \n    beneficiary.transfer(msg.value);\n    \n    token.transfer(msg.sender, numberOfTokens);\n    \n    raisedETH = raisedETH.add(msg.value);\n    \n    soldTokens = soldTokens.add(numberOfTokens);\n\n    emit BoughtTokens(msg.sender, numberOfTokens, invested);\n    \n    }\n\n\n  /**\n   * @dev Change the price during the different rounds\n   */\n  function changeRate(uint256 _newPrice) public onlyOwner {\n      price = _newPrice;\n  }    \n\n  /**\n   *  @dev Change the sale minimum\n   */\n  function changeSaleMinimum(uint256 _newAmount) public onlyOwner {\n      saleMinimum = _newAmount;\n  }\n\n  /**\n   * @dev Ends the sale\n   */\n  function endSale() public onlyOwner {\n    require(state == State.Active || state == State.Dormant);\n    \n    state = State.Successful;\n    emit SuccessfulState();\n\n    selfdestruct(owner);\n\n  }\n  \n   /**\n   * @dev Makes the sale dormant, no deposits are allowed\n   */\n  function pauseSale() public onlyOwner {\n      require(state == State.Active);\n      \n      state = State.Dormant;\n      emit DormantState();\n  }\n  \n  /**\n   * @dev Makes the sale active, thus funds can be received\n   */\n  function openSale() public onlyOwner {\n      require(state == State.Dormant);\n      \n      state = State.Active;\n      emit ActiveState();\n  }\n  \n  /**\n   *  @dev Returns the number of tokens in contract\n   */\n  function tokensAvailable() public view returns(uint256) {\n      return token.balanceOf(this);\n  }\n\n}",
  "bytecode": "608060405267016345785d8a000060045534801561001c57600080fd5b506000805433600160a060020a03199182168117835560018054732ed92cae08b7e24d7c01a11049750498ebcae8e09084161790556006805490921617905561087290819061006b90396000f3006080604052600436106100e55763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663167ff46f81146101bd57806318898452146101d25780632a486a28146101f9578063380d831b1461020e57806338af3eed1461022357806355367ba9146102545780635ed9ebfc1461026957806360659a921461027e57806374e7493b146102935780638da5cb5b146102ab578063a035b1fe146102c0578063c19d93fb146102d5578063d0febe4c146101b3578063ef069ae31461030e578063f2fde38b14610326578063fc0c546a14610347575b6004543410156100f457600080fd5b600160065460a060020a900460ff16600281111561010e57fe5b1461011857600080fd5b600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b505050506040513d60208110156101a757600080fd5b5051116101b357600080fd5b6101bb61035c565b005b3480156101c957600080fd5b506101bb6104b3565b3480156101de57600080fd5b506101e761053d565b60408051918252519081900360200190f35b34801561020557600080fd5b506101e7610543565b34801561021a57600080fd5b506101bb610549565b34801561022f57600080fd5b50610238610614565b60408051600160a060020a039092168252519081900360200190f35b34801561026057600080fd5b506101bb610623565b34801561027557600080fd5b506101e76106a7565b34801561028a57600080fd5b506101e76106ad565b34801561029f57600080fd5b506101bb600435610743565b3480156102b757600080fd5b5061023861075f565b3480156102cc57600080fd5b506101e761076e565b3480156102e157600080fd5b506102ea610774565b604051808260028111156102fa57fe5b60ff16815260200191505060405180910390f35b34801561031a57600080fd5b506101bb600435610784565b34801561033257600080fd5b506101bb600160a060020a03600435166107a0565b34801561035357600080fd5b506102386107fb565b600554349060009061037590839063ffffffff61080a16565b600654604051919250600160a060020a0316903480156108fc02916000818181858888f193505050501580156103af573d6000803e3d6000fd5b50600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b505050506040513d602081101561044757600080fd5b505060025461045c903463ffffffff61083916565b600255600354610472908263ffffffff61083916565b6003556040805182815260208101849052815133927fff617f3e2f581705274c96e449cb6db5e8766c51e0a0fa4e9c425db2398cfb6c928290030190a25050565b600054600160a060020a031633146104ca57600080fd5b600060065460a060020a900460ff1660028111156104e457fe5b146104ee57600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f9518cf09296a53bd6425318a1bb2f75e6b4a7763de9c9645e39650720cc0fbc090600090a1565b60045481565b60025481565b600054600160a060020a0316331461056057600080fd5b600160065460a060020a900460ff16600281111561057a57fe5b148061059d5750600060065460a060020a900460ff16600281111561059b57fe5b145b15156105a857600080fd5b6006805474ff00000000000000000000000000000000000000001916740200000000000000000000000000000000000000001790556040517fb77dce65b9a69e49e280fb65a73b6a5ac28ff3fca33d3593c699d7b122255f3790600090a1600054600160a060020a0316ff5b600654600160a060020a031681565b600054600160a060020a0316331461063a57600080fd5b600160065460a060020a900460ff16600281111561065457fe5b1461065e57600080fd5b6006805474ff0000000000000000000000000000000000000000191690556040517f5aee40760045acbaad05b245492541e94bc13fe7a57cc335042e20194d83380590600090a1565b60035481565b600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561071257600080fd5b505af1158015610726573d6000803e3d6000fd5b505050506040513d602081101561073c57600080fd5b5051905090565b600054600160a060020a0316331461075a57600080fd5b600555565b600054600160a060020a031681565b60055481565b60065460a060020a900460ff1681565b600054600160a060020a0316331461079b57600080fd5b600455565b600054600160a060020a031633146107b757600080fd5b600160a060020a03811615156107cc57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a031681565b600082151561081b57506000610833565b5081810281838281151561082b57fe5b041461083357fe5b92915050565b8181018281101561083357fe00a165627a7a72305820d7e93e689dea9a835d29fbdc68fdec8995c29b905d15e1879ac0983539d5578a0029"
}