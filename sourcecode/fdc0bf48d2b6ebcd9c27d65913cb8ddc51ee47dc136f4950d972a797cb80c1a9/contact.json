{
  "address": "0xcfcd43d7ee21416a71c2eb9888587d52716fc77a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HashRushICO",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-13\n*/\n\npragma solidity ^0.4.24;\n\n/**\n\n* Audited by VZ Chains (vzchains.com)\n\n* HashRushICO.sol creates the client's token for crowdsale and allows for subsequent token sales and minting of tokens\n\n*   Crowdsale contracts edited from original contract code at https://www.ethereum.org/crowdsale#crowdfund-your-idea\n\n*   Additional crowdsale contracts, functions, libraries from OpenZeppelin\n\n*       at https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/token\n\n*   Token contract edited from original contract code at https://www.ethereum.org/token\n\n*   ERC20 interface and certain token functions adapted from https://github.com/ConsenSys/Tokens\n\n**/\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    //Sets events and functions for ERC20 token\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _owner) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function approve(address _spender, uint256 _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n}\n\n/**\n * @title Owned\n * @dev The Owned contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Owned {\n    address public owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n}\n\n\ncontract HashRush is ERC20, Owned {\n    // Applies SafeMath library to uint256 operations\n    using SafeMath for uint256;\n\n    // Public variables\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n\n    // Variables\n    uint256 totalSupply_;\n    uint256 multiplier;\n\n    // Arrays for balances & allowance\n    mapping (address => uint256) balance;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Modifier to prevent short address attack\n    modifier onlyPayloadSize(uint size) {\n        if(msg.data.length < size.add(4)) revert();\n        _;\n    }\n\n    constructor(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 decimalMultiplier) public {\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n        multiplier = decimalMultiplier;\n    }\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balance[_owner];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balance[msg.sender]);\n\n        if ((balance[msg.sender] >= _value)\n            && (balance[_to].add(_value) > balance[_to])\n        ) {\n            balance[msg.sender] = balance[msg.sender].sub(_value);\n            balance[_to] = balance[_to].add(_value);\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balance[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        if ((balance[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balance[_to].add(_value) > balance[_to])) {\n            balance[_to] = balance[_to].add(_value);\n            balance[_from] = balance[_from].sub(_value);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n            emit Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n\ncontract HashRushICO is Owned, HashRush {\n    // Applies SafeMath library to uint256 operations\n    using SafeMath for uint256;\n\n    // Public Variables\n    address public multiSigWallet;\n    uint256 public amountRaised;\n    uint256 public startTime;\n    uint256 public stopTime;\n    uint256 public fixedTotalSupply;\n    uint256 public price;\n    uint256 public minimumInvestment;\n    uint256 public crowdsaleTarget;\n\n    // Variables\n    bool crowdsaleClosed = true;\n    string tokenName = \"HashRush\";\n    string tokenSymbol = \"RUSH\";\n    uint256 multiplier = 100000000;\n    uint8 decimalUnits = 8;\n\n    // Initializes the token\n    constructor()\n        HashRush(tokenName, tokenSymbol, decimalUnits, multiplier) public {\n            multiSigWallet = msg.sender;\n            fixedTotalSupply = 70000000;\n            fixedTotalSupply = fixedTotalSupply.mul(multiplier);\n    }\n\n    /**\n     * @dev Fallback function creates tokens and sends to investor when crowdsale is open\n     */\n    function () public payable {\n        require(!crowdsaleClosed\n            && (now < stopTime)\n            && (msg.value >= minimumInvestment)\n            && (amountRaised.add(msg.value.div(1 ether)) <= crowdsaleTarget)\n        );\n\n        amountRaised = amountRaised.add(msg.value.div(1 ether));\n\n        multiSigWallet.transfer(msg.value);\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param target The address that will receive the minted tokens.\n     * @param amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintToken(address target, uint256 amount) onlyOwner public returns (bool) {\n        require(amount > 0);\n        require(totalSupply_.add(amount) <= fixedTotalSupply);\n        uint256 addTokens = amount;\n        balance[target] = balance[target].add(addTokens);\n        totalSupply_ = totalSupply_.add(addTokens);\n        emit Transfer(0, target, addTokens);\n        return true;\n    }\n\n    /**\n     * @dev Function to set token price\n     * @param newPriceperEther New price.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setPrice(uint256 newPriceperEther) onlyOwner public returns (uint256) {\n        require(newPriceperEther > 0);\n        price = newPriceperEther;\n        return price;\n    }\n\n    /**\n     * @dev Function to set the multisig wallet for a crowdsale\n     * @param wallet Wallet address.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setMultiSigWallet(address wallet) onlyOwner public returns (bool) {\n        multiSigWallet = wallet;\n        return true;\n    }\n\n    /**\n     * @dev Function to set the minimum investment to participate in crowdsale\n     * @param minimum minimum amount in wei.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setMinimumInvestment(uint256 minimum) onlyOwner public returns (bool) {\n        minimumInvestment = minimum;\n        return true;\n    }\n\n    /**\n     * @dev Function to set the crowdsale target\n     * @param target Target amount in ETH.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setCrowdsaleTarget(uint256 target) onlyOwner public returns (bool) {\n        crowdsaleTarget = target;\n        return true;\n    }\n\n    /**\n     * @dev Function to start the crowdsale specifying startTime and stopTime\n     * @param saleStart Sale start timestamp.\n     * @param saleStop Sale stop timestamo.\n     * @param salePrice Token price per ether.\n     * @param setBeneficiary Beneficiary address.\n     * @param minInvestment Minimum investment to participate in crowdsale (wei).\n     * @param saleTarget Crowdsale target in ETH\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function startSale(uint256 saleStart, uint256 saleStop, uint256 salePrice, address setBeneficiary, uint256 minInvestment, uint256 saleTarget) onlyOwner public returns (bool) {\n        require(saleStop > now);\n        startTime = saleStart;\n        stopTime = saleStop;\n        amountRaised = 0;\n        crowdsaleClosed = false;\n        setPrice(salePrice);\n        setMultiSigWallet(setBeneficiary);\n        setMinimumInvestment(minInvestment);\n        setCrowdsaleTarget(saleTarget);\n        return true;\n    }\n\n    /**\n     * @dev Function that allows owner to stop the crowdsale immediately\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function stopSale() onlyOwner public returns (bool) {\n        stopTime = now;\n        crowdsaleClosed = true;\n        return true;\n    }\n}",
  "bytecode": "6010805460ff1916600117905560c0604052600860808190527f486173685275736800000000000000000000000000000000000000000000000060a09081526200004d9160119190620002ad565b506040805180820190915260048082527f525553480000000000000000000000000000000000000000000000000000000060209092019182526200009491601291620002ad565b506305f5e1006013556014805460ff19166008179055348015620000b757600080fd5b506011805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015620001425780601f10620001165761010080835404028352916020019162000142565b820191906000526020600020905b8154815290600101906020018083116200012457829003601f168201915b505060128054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815295509193509150830182828015620001d45780601f10620001a857610100808354040283529160200191620001d4565b820191906000526020600020905b815481529060010190602001808311620001b657829003601f168201915b505060145460135460008054600160a060020a03191633179055865160ff909216945092506200020d91506001906020870190620002ad565b50825162000223906002906020860190620002ad565b5060ff909116600355600555505060088054600160a060020a0319163317905563042c1d80600c8190556013546200026a919064010000000062000dc36200027382021704565b600c5562000352565b600080831515620002885760009150620002a6565b508282028284828115156200029957fe5b0414620002a257fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002f057805160ff191683800117855562000320565b8280016001018555821562000320579182015b828111156200032057825182559160200191906001019062000303565b506200032e92915062000332565b5090565b6200034f91905b808211156200032e576000815560010162000339565b90565b610e1a80620003626000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303ff5e73811461021157806306fdde0314610238578063095ea7b3146102c257806313643605146102fa57806318160ddd1461030f5780631b4c19ac1461032457806323b872dd146103545780632b925b251461037e578063313ce5671461039357806345f826da146103a85780634b8feb4f146103c057806370a08231146103f157806378e979251461041257806379c65068146104275780637b3e5e7b1461044b5780638da5cb5b1461046057806391b7f5ed1461047557806395d89b411461048d578063a035b1fe146104a2578063a5d572c4146104b7578063a9059cbb146104cc578063dd62ed3e146104f0578063e36b0b3714610517578063f03b0c0b1461052c578063f2fde38b1461054d578063fa65924614610570575b60105460ff161580156101675750600b5442105b80156101755750600e543410155b80156101ac5750600f546101a961019a34670de0b6b3a764000063ffffffff61058816565b6009549063ffffffff6105b016565b11155b15156101b757600080fd5b6101d261019a34670de0b6b3a764000063ffffffff61058816565b600955600854604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015801561020e573d6000803e3d6000fd5b50005b34801561021d57600080fd5b506102266105c6565b60408051918252519081900360200190f35b34801561024457600080fd5b5061024d6105cc565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028757818101518382015260200161026f565b50505050905090810190601f1680156102b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ce57600080fd5b506102e6600160a060020a0360043516602435610659565b604080519115158252519081900360200190f35b34801561030657600080fd5b506102266106bf565b34801561031b57600080fd5b506102266106c5565b34801561033057600080fd5b506102e6600435602435604435600160a060020a036064351660843560a4356106cb565b34801561036057600080fd5b506102e6600160a060020a036004358116906024351660443561073d565b34801561038a57600080fd5b5061022661095c565b34801561039f57600080fd5b50610226610962565b3480156103b457600080fd5b506102e6600435610968565b3480156103cc57600080fd5b506103d5610989565b60408051600160a060020a039092168252519081900360200190f35b3480156103fd57600080fd5b50610226600160a060020a0360043516610998565b34801561041e57600080fd5b506102266109b3565b34801561043357600080fd5b506102e6600160a060020a03600435166024356109b9565b34801561045757600080fd5b50610226610aa7565b34801561046c57600080fd5b506103d5610aad565b34801561048157600080fd5b50610226600435610abc565b34801561049957600080fd5b5061024d610aea565b3480156104ae57600080fd5b50610226610b42565b3480156104c357600080fd5b50610226610b48565b3480156104d857600080fd5b506102e6600160a060020a0360043516602435610b4e565b3480156104fc57600080fd5b50610226600160a060020a0360043581169060243516610ca3565b34801561052357600080fd5b506102e6610cce565b34801561053857600080fd5b506102e6600160a060020a0360043516610cfe565b34801561055957600080fd5b5061056e600160a060020a0360043516610d48565b005b34801561057c57600080fd5b506102e6600435610d8e565b60008080831161059757600080fd5b82848115156105a257fe5b0490508091505b5092915050565b6000828201838110156105bf57fe5b9392505050565b600b5481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106515780601f1061062657610100808354040283529160200191610651565b820191906000526020600020905b81548152906001019060200180831161063457829003601f168201915b505050505081565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600f5481565b60045490565b60008054600160a060020a031633146106e357600080fd5b4286116106ef57600080fd5b600a879055600b86905560006009556010805460ff1916905561071185610abc565b5061071b84610cfe565b5061072583610968565b5061072f82610d8e565b506001979650505050505050565b6000606061075281600463ffffffff6105b016565b36101561075e57600080fd5b600160a060020a038416151561077357600080fd5b600160a060020a03851660009081526006602052604090205483111561079857600080fd5b600160a060020a03851660009081526007602090815260408083203384529091529020548311156107c857600080fd5b600160a060020a03851660009081526006602052604090205483118015906108135750600160a060020a03851660009081526007602090815260408083203384529091529020548311155b80156108455750600160a060020a038416600090815260066020526040902054610843818563ffffffff6105b016565b115b1561094f57600160a060020a038416600090815260066020526040902054610873908463ffffffff6105b016565b600160a060020a0380861660009081526006602052604080822093909355908716815220546108a8908463ffffffff610daf16565b600160a060020a03861660009081526006602090815260408083209390935560078152828220338352905220546108e5908463ffffffff610daf16565b600160a060020a03808716600081815260076020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a360019150610954565b600091505b509392505050565b600e5481565b60035481565b60008054600160a060020a0316331461098057600080fd5b50600e55600190565b600854600160a060020a031681565b600160a060020a031660009081526006602052604090205490565b600a5481565b600080548190600160a060020a031633146109d357600080fd5b600083116109e057600080fd5b600c546004546109f6908563ffffffff6105b016565b1115610a0157600080fd5b50600160a060020a0383166000908152600660205260409020548290610a2d908263ffffffff6105b016565b600160a060020a038516600090815260066020526040902055600454610a59908263ffffffff6105b016565b600455604080518281529051600160a060020a038616916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019392505050565b60095481565b600054600160a060020a031681565b60008054600160a060020a03163314610ad457600080fd5b60008211610ae157600080fd5b50600d81905590565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106515780601f1061062657610100808354040283529160200191610651565b600d5481565b600c5481565b60006040610b6381600463ffffffff6105b016565b361015610b6f57600080fd5b600160a060020a0384161515610b8457600080fd5b33600090815260066020526040902054831115610ba057600080fd5b336000908152600660205260409020548311801590610be55750600160a060020a038416600090815260066020526040902054610be3818563ffffffff6105b016565b115b15610c9a5733600090815260066020526040902054610c0a908463ffffffff610daf16565b3360009081526006602052604080822092909255600160a060020a03861681522054610c3c908463ffffffff6105b016565b600160a060020a0385166000818152600660209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3600191506105a9565b600091506105a9565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b60008054600160a060020a03163314610ce657600080fd5b5042600b556010805460ff1916600190811790915590565b60008054600160a060020a03163314610d1657600080fd5b5060088054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600054600160a060020a03163314610d5f57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a03163314610da657600080fd5b50600f55600190565b60008083831115610dbc57fe5b5050900390565b600080831515610dd657600091506105a9565b50828202828482811515610de657fe5b04146105bf57fe00a165627a7a723058208c97454a375d733b147530ddc33905e57d9a5e0056d16299bfb7c7456d7f4b630029"
}