{
  "address": "0x5c8d1812c67fa3ccea6b27e2bbd0b7bdd08d4315",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Utility",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity >=0.4.21 <0.6.0;\n\ncontract AdminRole {\n    using Roles for Roles.Role;\n\n    event AdminAdded(address indexed account);\n    event AdminRemoved(address indexed account);\n\n    Roles.Role private _Admins;\n    address private _owner;\n\n    constructor () internal {\n        _addAdmin(msg.sender);\n        _owner = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    function addAdmin(address account) public onlyOwner {\n        _addAdmin(account);\n    }\n\n    function removeAdmin(address account) public onlyOwner {\n        _removeAdmin(account);\n    }\n\n    function transferOwnership(address account) public onlyOwner returns (bool) {\n        _Admins.add(account);\n        _owner = account;\n        return true;\n    }\n\n    function isAdmin(address account) public view returns (bool) {\n        return _Admins.has(account);\n    }\n\n    function _addAdmin(address account) internal {\n        _Admins.add(account);\n        emit AdminAdded(account);\n    }\n\n    function _removeAdmin(address account) internal {\n        _Admins.remove(account);\n        emit AdminRemoved(account);\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) internal _allowed;\n\n    uint256 internal _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\ncontract Utility is ERC20, AdminRole {\n\n    string private _name;\n    string private _symbol;\n    uint8  private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _totalSupply = 0;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n    * @dev Destroy the contract\n    */\n    function Destroy() public onlyAdmin returns (bool) {\n        selfdestruct(msg.sender);\n        return true;\n    }\n\n    /**\n    * @dev sudo Transfer tokens\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function sudoTransfer(address from, address to, uint256 value) public onlyAdmin returns (bool) {\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n    * @dev Mint tokens\n    * @param to The address to mint in.\n    * @param value The amount to be minted.\n    */\n    function Mint(address to, uint256 value) public onlyAdmin returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n\n    /**\n    * @dev Burn tokens\n    * @param from The address to burn in.\n    * @param value The amount to be burned.\n    */\n    function Burn(address from, uint256 value) public onlyAdmin returns (bool) {\n        _burn(from, value);\n        return true;\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162000fcf38038062000fcf833981018060405260608110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b50506020918201519093509150620000e990339062000148811b901c565b600480546001600160a01b0319163317905582516200011090600590602086019062000226565b5081516200012690600690602085019062000226565b506007805460ff191660ff9290921691909117905550506000600255620002cb565b620001638160036200019a60201b62000c341790919060201c565b6040516001600160a01b038216907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a250565b6001600160a01b038116620001ae57600080fd5b620001c08282620001f060201b60201c565b15620001cb57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166200020657600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026957805160ff191683800117855562000299565b8280016001018555821562000299579182015b82811115620002995782518255916020019190600101906200027c565b50620002a7929150620002ab565b5090565b620002c891905b80821115620002a75760008155600101620002b2565b90565b610cf480620002db6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806339509351116100ad578063a9059cbb11610071578063a9059cbb146103ad578063cc16f5db146103d9578063dd62ed3e14610405578063f2fde38b14610433578063f58fef8e1461045957610121565b80633950935114610301578063704802751461032d57806370a082311461035357806395d89b4114610379578063a457c2d71461038157610121565b806318160ddd116100f457806318160ddd146102375780631988513b1461025157806323b872dd1461028757806324d7806c146102bd578063313ce567146102e357610121565b806306fdde0314610126578063095ea7b3146101a35780630f6798a5146101e35780631785f53c1461020f575b600080fd5b61012e610461565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360408110156101b957600080fd5b506001600160a01b0381351690602001356104f7565b604080519115158252519081900360200190f35b6101cf600480360360408110156101f957600080fd5b506001600160a01b038135169060200135610573565b6102356004803603602081101561022557600080fd5b50356001600160a01b031661059a565b005b61023f6105bd565b60408051918252519081900360200190f35b6101cf6004803603606081101561026757600080fd5b506001600160a01b038135811691602081013590911690604001356105c3565b6101cf6004803603606081101561029d57600080fd5b506001600160a01b038135811691602081013590911690604001356105ec565b6101cf600480360360208110156102d357600080fd5b50356001600160a01b03166106b5565b6102eb6106ce565b6040805160ff9092168252519081900360200190f35b6101cf6004803603604081101561031757600080fd5b506001600160a01b0381351690602001356106d7565b6102356004803603602081101561034357600080fd5b50356001600160a01b0316610785565b61023f6004803603602081101561036957600080fd5b50356001600160a01b03166107a5565b61012e6107c0565b6101cf6004803603604081101561039757600080fd5b506001600160a01b038135169060200135610821565b6101cf600480360360408110156103c357600080fd5b506001600160a01b03813516906020013561086a565b6101cf600480360360408110156103ef57600080fd5b506001600160a01b038135169060200135610877565b61023f6004803603604081101561041b57600080fd5b506001600160a01b0381358116916020013516610895565b6101cf6004803603602081101561044957600080fd5b50356001600160a01b03166108c0565b6101cf610910565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104ed5780601f106104c2576101008083540402835291602001916104ed565b820191906000526020600020905b8154815290600101906020018083116104d057829003601f168201915b5050505050905090565b60006001600160a01b03831661050c57600080fd5b3360008181526001602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600061057e336106b5565b61058757600080fd5b6105918383610927565b50600192915050565b6004546001600160a01b031633146105b157600080fd5b6105ba816109cf565b50565b60025490565b60006105ce336106b5565b6105d757600080fd5b6105e2848484610a17565b5060019392505050565b6001600160a01b0383166000908152600160209081526040808320338452909152812054610620908363ffffffff610ae216565b6001600160a01b038516600090815260016020908152604080832033845290915290205561064f848484610a17565b6001600160a01b0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60006106c860038363ffffffff610af716565b92915050565b60075460ff1690565b60006001600160a01b0383166106ec57600080fd5b3360009081526001602090815260408083206001600160a01b0387168452909152902054610720908363ffffffff610b2c16565b3360008181526001602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6004546001600160a01b0316331461079c57600080fd5b6105ba81610b45565b6001600160a01b031660009081526020819052604090205490565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104ed5780601f106104c2576101008083540402835291602001916104ed565b60006001600160a01b03831661083657600080fd5b3360009081526001602090815260408083206001600160a01b0387168452909152902054610720908363ffffffff610ae216565b6000610591338484610a17565b6000610882336106b5565b61088b57600080fd5b6105918383610b8d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6004546000906001600160a01b031633146108da57600080fd5b6108eb60038363ffffffff610c3416565b50600480546001600160a01b0383166001600160a01b03199091161790556001919050565b600061091b336106b5565b61092457600080fd5b33ff5b6001600160a01b03821661093a57600080fd5b60025461094d908263ffffffff610b2c16565b6002556001600160a01b038216600090815260208190526040902054610979908263ffffffff610b2c16565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6109e060038263ffffffff610c8016565b6040516001600160a01b038216907fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f90600090a250565b6001600160a01b038216610a2a57600080fd5b6001600160a01b038316600090815260208190526040902054610a53908263ffffffff610ae216565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610a88908263ffffffff610b2c16565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610af157600080fd5b50900390565b60006001600160a01b038216610b0c57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b600082820183811015610b3e57600080fd5b9392505050565b610b5660038263ffffffff610c3416565b6040516001600160a01b038216907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a250565b6001600160a01b038216610ba057600080fd5b600254610bb3908263ffffffff610ae216565b6002556001600160a01b038216600090815260208190526040902054610bdf908263ffffffff610ae216565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6001600160a01b038116610c4757600080fd5b610c518282610af7565b15610c5b57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b038116610c9357600080fd5b610c9d8282610af7565b610ca657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff1916905556fea165627a7a72305820cd9281455bba02ade1c97633af3442fcdc5438fc9acafbfb917c89261d2d2ff20029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a4d4952495320436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d49520000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a4d4952495320436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d49520000000000000000000000000000000000000000000000000000000000"
}