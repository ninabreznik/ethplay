{
  "address": "0x4270bb238f6dd8b1c3ca01f96ca65b2647c06d3c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LockedToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-12\n*/\n\npragma solidity ^0.4.18;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool ok){\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) \n        public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}\n\ncontract SafeMath {\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal  pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n}\n\ncontract LockedToken is owned, TokenERC20, SafeMath {\n\n    struct TokenLocked {\n        uint256 amount;\n        uint256 startDate;\n        uint256 lastDate;  \n        uint256 batches;\n    }\n\n    mapping (address => TokenLocked) internal lockedTokenOf;\n    mapping (address => bool) internal isLocked;\n\n    modifier canTransfer(address _sender, uint256 _value) {\n        require(_value <= spendableBalanceOf(_sender));\n        _;\n    }   \n\n    function LockedToken (\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    )TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    function transfer(address _to, uint256 _value)\n            canTransfer(msg.sender, _value)\n            public\n            returns (bool success) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)\n            canTransfer(_from, _value)\n            public\n            returns (bool success) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transferAndLock(\n            address _to, \n            uint256 _value,\n            uint256 _startDate,\n            uint256 _lastDate,\n            uint256 _batches) \n            onlyOwner public {\n        //doLock\n        require(_to != 0x0);\n        require(_startDate < _lastDate);\n        require(_batches > 0);\n        TokenLocked memory tokenLocked = TokenLocked(_value, _startDate, _lastDate, _batches);\n        lockedTokenOf[_to] = tokenLocked;\n        isLocked[_to] = true;\n\n        //doTransfer\n        super.transfer(_to, _value);\n    }\n\n    function spendableBalanceOf(address _holder) constant public returns (uint) {\n        return transferableTokens(_holder, uint64(now));\n    }\n\n    function transferableTokens(address holder, uint256 time) constant public returns (uint256) {\n        \n        TokenLocked storage tokenLocked = lockedTokenOf[holder];\n\n        if (!isLocked[holder]) return balanceOf[holder];\n\n        uint256 amount = tokenLocked.amount;\n        uint256 startDate = tokenLocked.startDate;\n        uint256 lastDate = tokenLocked.lastDate;\n        uint256 batches = tokenLocked.batches;\n\n        if (time < startDate) return 0;\n        if (time >= lastDate) return balanceOf[holder]; \n\n        //caculate transferableTokens     \n        uint256 originalTransferableTokens = safeMul(safeDiv(amount, batches), \n                                        safeDiv(\n                                        safeMul(safeSub(time, startDate), batches),\n                                        safeSub(lastDate, startDate)\n                                        ));\n\n        uint256 lockedAmount = safeSub(amount, originalTransferableTokens);\n\n        if (balanceOf[holder] <= lockedAmount) return 0;\n\n        uint256 actualTransferableTokens = safeSub(balanceOf[holder], lockedAmount);                             \n\n        return  actualTransferableTokens;\n    }\n\n    function  lastTokenIsTransferableDate(address holder) constant public returns(uint256 date) {\n        date = uint256(now);\n        if (!isLocked[holder]) return date;\n        \n        TokenLocked storage tokenLocked = lockedTokenOf[holder];       \n        return tokenLocked.lastDate;\n    }\n\n    function ()  payable public {\n        revert();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"spendableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_lastDate\",\"type\":\"uint256\"},{\"name\":\"_batches\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460ff19166012179055341561001c57600080fd5b604051610f51380380610f51833981016040528080519190602001805182019190602001805160008054600160a060020a033316600160a060020a03199091168117825560035460ff16600a0a870260048190559082526005602052604090912055909101905082828260018280516100999291602001906100b9565b5060028180516100ad9291602001906100b9565b50505050505050610154565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fa57805160ff1916838001178555610127565b82800160010185558215610127579182015b8281111561012757825182559160200191906001019061010c565b50610133929150610137565b5090565b61015191905b80821115610133576000815560010161013d565b90565b610dee806101636000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a5780630f8f8b83146101c057806318160ddd146101f157806323b872dd14610204578063313ce5671461022c57806342966c681461025557806367ecb82d1461026b5780636c182e991461029857806370a08231146102b757806379cc6790146102d65780637fdb5031146102f85780638da5cb5b1461031a57806395d89b4114610349578063a9059cbb1461035c578063cae9ca511461037e578063dd62ed3e146103e3578063f2fde38b14610408575b600080fd5b341561010b57600080fd5b610113610427565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014f578082015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019557600080fd5b6101ac600160a060020a03600435166024356104c5565b604051901515815260200160405180910390f35b34156101cb57600080fd5b6101df600160a060020a03600435166104f5565b60405190815260200160405180910390f35b34156101fc57600080fd5b6101df610511565b341561020f57600080fd5b6101ac600160a060020a0360043581169060243516604435610517565b341561023757600080fd5b61023f610545565b60405160ff909116815260200160405180910390f35b341561026057600080fd5b6101ac60043561054e565b341561027657600080fd5b610296600160a060020a03600435166024356044356064356084356105d9565b005b34156102a357600080fd5b6101df600160a060020a03600435166106c3565b34156102c257600080fd5b6101df600160a060020a0360043516610714565b34156102e157600080fd5b6101ac600160a060020a0360043516602435610726565b341561030357600080fd5b6101df600160a060020a0360043516602435610802565b341561032557600080fd5b61032d610956565b604051600160a060020a03909116815260200160405180910390f35b341561035457600080fd5b610113610965565b341561036757600080fd5b6101ac600160a060020a03600435166024356109d0565b341561038957600080fd5b6101ac60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506109fc95505050505050565b34156103ee57600080fd5b6101df600160a060020a0360043581169060243516610b2e565b341561041357600080fd5b610296600160a060020a0360043516610b4b565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bd5780601f10610492576101008083540402835291602001916104bd565b820191906000526020600020905b8154815290600101906020018083116104a057829003601f168201915b505050505081565b600160a060020a033381166000908152600660209081526040808320938616835292905220819055600192915050565b600061050b824267ffffffffffffffff16610802565b92915050565b60045481565b60008382610524826104f5565b81111561053057600080fd5b61053b868686610b95565b9695505050505050565b60035460ff1681565b600160a060020a0333166000908152600560205260408120548290101561057457600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b6105e1610d99565b60005433600160a060020a039081169116146105fc57600080fd5b600160a060020a038616151561061157600080fd5b82841061061d57600080fd5b6000821161062a57600080fd5b60806040519081016040908152868252602080830187905281830186905260608301859052600160a060020a03891660009081526007909152209091508190815181556020820151816001015560408201518160020155606082015160039091015550600160a060020a0386166000908152600860205260409020805460ff191660011790556106ba8686610c0c565b50505050505050565b600160a060020a03811660009081526008602052604081205442919060ff1615156106ed5761070e565b5050600160a060020a03811660009081526007602052604090206002810154905b50919050565b60056020526000908152604090205481565b600160a060020a0382166000908152600560205260408120548290101561074c57600080fd5b600160a060020a038084166000908152600660209081526040808320339094168352929052205482111561077f57600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556006825280832033909516835293905282902080548590039055600480548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b600160a060020a03821660009081526007602090815260408083206008909252822054829081908190819081908190819060ff16151561085c57600160a060020a038b166000908152600560205260409020549850610948565b87600001549650876001015495508760020154945087600301549350858a10156108895760009850610948565b848a106108b057600160a060020a038b166000908152600560205260409020549850610948565b6108e76108bd8886610c22565b6108e26108d36108cd8e8b610c5d565b88610c6f565b6108dd898b610c5d565b610c22565b610c6f565b92506108f38784610c5d565b600160a060020a038c1660009081526005602052604090205490925082901161091f5760009850610948565b600160a060020a038b166000908152600560205260409020546109429083610c5d565b90508098505b505050505050505092915050565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bd5780601f10610492576101008083540402835291602001916104bd565b600033826109dd826104f5565b8111156109e957600080fd5b6109f38585610c0c565b95945050505050565b600083610a0981856104c5565b15610b265780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610abf578082015183820152602001610aa7565b50505050905090810190601f168015610aec5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610b0d57600080fd5b6102c65a03f11515610b1e57600080fd5b505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a03908116911614610b6657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03808416600090815260066020908152604080832033909416835292905290812054821115610bca57600080fd5b600160a060020a0380851660009081526006602090815260408083203390941683529290522080548390039055610c02848484610c93565b5060019392505050565b6000610c19338484610c93565b50600192915050565b600080808311610c2e57fe5b8284811515610c3957fe5b0490508284811515610c4757fe5b068184020184141515610c5657fe5b9392505050565b600082821115610c6957fe5b50900390565b6000828202831580610c8b5750828482811515610c8857fe5b04145b1515610c5657fe5b6000600160a060020a0383161515610caa57600080fd5b600160a060020a03841660009081526005602052604090205482901015610cd057600080fd5b600160a060020a03831660009081526005602052604090205482810111610cf657600080fd5b50600160a060020a0380831660008181526005602052604080822080549488168084528284208054888103909155938590528154870190915591909301927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600160a060020a03808416600090815260056020526040808220549287168252902054018114610d9357fe5b50505050565b6080604051908101604052806000815260200160008152602001600081526020016000815250905600a165627a7a723058202dea85e5398bdc942f053f0e59129a1191682b4f1d1a4bc91d3efacc2e6c28770029000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004464f5441000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004464f544100000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004464f5441000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004464f544100000000000000000000000000000000000000000000000000000000"
}