{
  "address": "0x9219cc5b6f22bb9e60729eb38d792643b658e7c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVesting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "1000000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\n/* solium-disable security/no-block-members */\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\n  using SafeMath for uint256;\n\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    // safeApprove should only be called when setting an initial allowance, \n    // or when resetting it to zero. To increase and decrease it, use \n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n    require(token.approve(spender, value));\n  }\n\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n    require(token.approve(spender, newAllowance));\n  }\n\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n    require(token.approve(spender, newAllowance));\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period.\n *\n * Note you do not want to transfer tokens you have withdrawn back to this contract. This will\n * result in some fraction of your transferred tokens being locked up again.\n *\n * Code taken from OpenZeppelin/openzeppelin-solidity at commit 4115686b4f8c1abf29f1f855eb15308076159959.\n * (Revocation options removed by Reserve.)\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  event TokensReleased(address token, uint256 amount);\n\n  // beneficiary of tokens after they are released\n  address private _beneficiary;\n\n  uint256 private _cliff;\n  uint256 private _start;\n  uint256 private _duration;\n\n  mapping (address => uint256) private _released;\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * beneficiary, gradually in a linear fashion until start + duration. By then all\n   * of the balance will have vested.\n   * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\n   * @param start the time (as Unix time) at which point vesting starts\n   * @param duration duration in seconds of the period in which the tokens will vest\n   */\n  constructor(\n    address beneficiary,\n    uint256 start,\n    uint256 cliffDuration,\n    uint256 duration\n  )\n    public\n  {\n    require(beneficiary != address(0));\n    require(cliffDuration <= duration);\n    require(duration > 0);\n    require(start.add(duration) > block.timestamp);\n\n    _beneficiary = beneficiary;\n    _duration = duration;\n    _cliff = start.add(cliffDuration);\n    _start = start;\n  }\n\n  /**\n   * @return the beneficiary of the tokens.\n   */\n  function beneficiary() public view returns(address) {\n    return _beneficiary;\n  }\n\n  /**\n   * @return the cliff time of the token vesting.\n   */\n  function cliff() public view returns(uint256) {\n    return _cliff;\n  }\n\n  /**\n   * @return the start time of the token vesting.\n   */\n  function start() public view returns(uint256) {\n    return _start;\n  }\n\n  /**\n   * @return the duration of the token vesting.\n   */\n  function duration() public view returns(uint256) {\n    return _duration;\n  }\n\n  /**\n   * @return the amount of the token released.\n   */\n  function released(address token) public view returns(uint256) {\n    return _released[token];\n  }\n\n  /**\n   * @return the amount of token that can be released at the current block timestamp.\n   */\n  function releasable(address token) public view returns(uint256) {\n    return _releasableAmount(IERC20(token));\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(IERC20 token) public {\n    uint256 unreleased = _releasableAmount(token);\n\n    require(unreleased > 0);\n\n    _released[token] = _released[token].add(unreleased);\n\n    token.safeTransfer(_beneficiary, unreleased);\n\n    emit TokensReleased(token, unreleased);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   * @param token ERC20 token which is being vested\n   */\n  function _releasableAmount(IERC20 token) private view returns (uint256) {\n    return _vestedAmount(token).sub(_released[token]);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   * @param token ERC20 token which is being vested\n   */\n  function _vestedAmount(IERC20 token) private view returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(_released[token]);\n\n    if (block.timestamp < _cliff) {\n      return 0;\n    } else if (block.timestamp >= _start.add(_duration)) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516080806109ac833981016040818152825160208401519184015160609094015160008054600160a060020a0319163317808255929593949192600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600160a060020a038416151561009157600080fd5b8082111561009e57600080fd5b600081116100ab57600080fd5b426100c384836401000000006104b461011282021704565b116100cd57600080fd5b60018054600160a060020a031916600160a060020a0386161790556004819055610104838364010000000061011281026104b41704565b60025550506003555061012b565b60008282018381101561012457600080fd5b9392505050565b6108728061013a6000396000f3006080604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630fb5a6b481146100b357806313d033c0146100da57806319165587146100ef57806338af3eed1461011f578063715018a61461015d5780638da5cb5b146101725780638f32d59b146101875780639852595c146101b0578063a3f8eace146101de578063be9a65551461020c578063f2fde38b14610221575b600080fd5b3480156100bf57600080fd5b506100c861024f565b60408051918252519081900360200190f35b3480156100e657600080fd5b506100c8610255565b3480156100fb57600080fd5b5061011d73ffffffffffffffffffffffffffffffffffffffff6004351661025b565b005b34801561012b57600080fd5b5061013461033f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561016957600080fd5b5061011d61035b565b34801561017e57600080fd5b506101346103dd565b34801561019357600080fd5b5061019c6103f9565b604080519115158252519081900360200190f35b3480156101bc57600080fd5b506100c873ffffffffffffffffffffffffffffffffffffffff60043516610417565b3480156101ea57600080fd5b506100c873ffffffffffffffffffffffffffffffffffffffff6004351661043f565b34801561021857600080fd5b506100c8610450565b34801561022d57600080fd5b5061011d73ffffffffffffffffffffffffffffffffffffffff60043516610456565b60045490565b60025490565b600061026682610475565b90506000811161027557600080fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260409020546102ab908263ffffffff6104b416565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600560205260409020929092556001546102ea9291168363ffffffff6104d116565b6040805173ffffffffffffffffffffffffffffffffffffffff841681526020810183905281517fc7798891864187665ac6dd119286e44ec13f014527aeeb2b8eb3fd413df93179929181900390910190a15050565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b6103636103f9565b151561036e57600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff16331490565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205490565b600061044a82610475565b92915050565b60035490565b61045e6103f9565b151561046957600080fd5b610472816105b0565b50565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604081205461044a906104a88461065f565b9063ffffffff6107de16565b6000828201838110156104c657600080fd5b8091505b5092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b505050506040513d602081101561059e57600080fd5b505115156105ab57600080fd5b505050565b73ffffffffffffffffffffffffffffffffffffffff811615156105d257600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156106ff57600080fd5b505af1158015610713573d6000803e3d6000fd5b505050506040513d602081101561072957600080fd5b505173ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205490925061076590839063ffffffff6104b416565b905060025442101561077a57600092506107d7565b60045460035461078f9163ffffffff6104b416565b421061079d578092506107d7565b6107d46004546107c86107bb600354426107de90919063ffffffff16565b849063ffffffff6107f516565b9063ffffffff61082316565b92505b5050919050565b600080838311156107ee57600080fd5b5050900390565b60008083151561080857600091506104ca565b5082820282848281151561081857fe5b04146104c657600080fd5b60008080831161083257600080fd5b828481151561083d57fe5b049493505050505600a165627a7a72305820095037c61597656ea2c7f72aeb0be83248b63fc1e654e1d5aaadcc86002ac2680029000000000000000000000000dc1985eb6c06ba0533463c27f8b4320ac9ba26e1000000000000000000000000000000000000000005092ecd7013b376cf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066ea1cdfe5a4a3c000000",
  "constructorArguments": "000000000000000000000000dc1985eb6c06ba0533463c27f8b4320ac9ba26e1000000000000000000000000000000000000000005092ecd7013b376cf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066ea1cdfe5a4a3c000000"
}