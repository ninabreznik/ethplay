{
  "address": "0x95daaab98046846bf4b2853e23cba236fa394a31",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Etheremon Token",
  "contractName": "EtheremonToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-27\n*/\n\npragma solidity ^0.4.16;\n\n// copyright [emailÂ protected]\n\ncontract SafeMath {\n\n    /* function assert(bool assertion) internal { */\n    /*   if (!assertion) { */\n    /*     throw; */\n    /*   } */\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\n\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\n      uint256 z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\n      assert(x >= y);\n      uint256 z = x - y;\n      return z;\n    }\n\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\n      uint256 z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n}\n\ncontract BasicAccessControl {\n    address public owner;\n    // address[] public moderators;\n    uint16 public totalModerators = 0;\n    mapping (address => bool) public moderators;\n    bool public isMaintaining = true;\n\n    function BasicAccessControl() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyModerators() {\n        require(msg.sender == owner || moderators[msg.sender] == true);\n        _;\n    }\n\n    modifier isActive {\n        require(!isMaintaining);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) onlyOwner public {\n        if (_newOwner != address(0)) {\n            owner = _newOwner;\n        }\n    }\n\n\n    function AddModerator(address _newModerator) onlyOwner public {\n        if (moderators[_newModerator] == false) {\n            moderators[_newModerator] = true;\n            totalModerators += 1;\n        }\n    }\n    \n    function RemoveModerator(address _oldModerator) onlyOwner public {\n        if (moderators[_oldModerator] == true) {\n            moderators[_oldModerator] = false;\n            totalModerators -= 1;\n        }\n    }\n\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n        isMaintaining = _isMaintaining;\n    }\n}\n\ninterface TokenRecipient { \n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n}\n\ncontract TokenERC20 {\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true; \n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        TokenRecipient spender = TokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(_from, _value);\n        return true;\n    }\n}\n\ncontract PaymentInterface {\n    function createCastle(address _trainer, uint _tokens, string _name, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) public returns(uint);\n    function catchMonster(address _trainer, uint _tokens, uint32 _classId, string _name) public returns(uint);\n    function payService(address _trainer, uint _tokens, uint32 _type, string _text, uint64 _param1, uint64 _param2, uint64 _param3, uint64 _param4, uint64 _param5, uint64 _param6) public returns(uint);\n}\n\ncontract EtheremonToken is BasicAccessControl, TokenERC20 {\n    // metadata\n    string public constant name = \"EtheremonToken\";\n    string public constant symbol = \"EMONT\";\n    uint256 public constant decimals = 8;\n    string public version = \"1.0\";\n    \n    // deposit address\n    address public inGameRewardAddress;\n    address public userGrowPoolAddress;\n    address public developerAddress;\n    \n    // Etheremon payment\n    address public paymentContract;\n    \n    // for future feature\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n    bool public trading = false;\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n    \n    modifier isTrading {\n        require(trading == true || msg.sender == owner);\n        _;\n    }\n    \n    modifier requirePaymentContract {\n        require(paymentContract != address(0));\n        _;        \n    }\n    \n    function () payable public {}\n\n    // constructor    \n    function EtheremonToken(address _inGameRewardAddress, address _userGrowPoolAddress, address _developerAddress, address _paymentContract) public {\n        require(_inGameRewardAddress != address(0));\n        require(_userGrowPoolAddress != address(0));\n        require(_developerAddress != address(0));\n        inGameRewardAddress = _inGameRewardAddress;\n        userGrowPoolAddress = _userGrowPoolAddress;\n        developerAddress = _developerAddress;\n\n        balanceOf[inGameRewardAddress] = 14000000 * 10**uint(decimals);\n        balanceOf[userGrowPoolAddress] = 5000000 * 10**uint(decimals);\n        balanceOf[developerAddress] = 1000000 * 10**uint(decimals);\n        totalSupply = balanceOf[inGameRewardAddress] + balanceOf[userGrowPoolAddress] + balanceOf[developerAddress];\n        paymentContract = _paymentContract;\n    }\n    \n    // moderators\n    function setAddress(address _inGameRewardAddress, address _userGrowPoolAddress, address _developerAddress, address _paymentContract) onlyModerators external {\n        inGameRewardAddress = _inGameRewardAddress;\n        userGrowPoolAddress = _userGrowPoolAddress;\n        developerAddress = _developerAddress;\n        paymentContract = _paymentContract;\n    }\n    \n    // public\n    function withdrawEther(address _sendTo, uint _amount) onlyModerators external {\n        if (_amount > this.balance) {\n            revert();\n        }\n        _sendTo.transfer(_amount);\n    }\n    \n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);\n        require (balanceOf[_from] >= _value);\n        require (balanceOf[_to] + _value > balanceOf[_to]);\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n    }\n    \n    function freezeAccount(address _target, bool _freeze) onlyOwner public {\n        frozenAccount[_target] = _freeze;\n        FrozenFunds(_target, _freeze);\n    }\n    \n    function buy() payable isTrading public {\n        uint amount = msg.value / buyPrice;\n        _transfer(this, msg.sender, amount);\n    }\n\n    function sell(uint256 amount) isTrading public {\n        require(this.balance >= amount * sellPrice);\n        _transfer(msg.sender, this, amount);\n        msg.sender.transfer(amount * sellPrice);\n    }\n    \n    // Etheremon \n    function createCastle(uint _tokens, string _name, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) isActive requirePaymentContract external {\n        if (_tokens > balanceOf[msg.sender])\n            revert();\n        PaymentInterface payment = PaymentInterface(paymentContract);\n        uint deductedTokens = payment.createCastle(msg.sender, _tokens, _name, _a1, _a2, _a3, _s1, _s2, _s3);\n        if (deductedTokens == 0 || deductedTokens > _tokens)\n            revert();\n        _transfer(msg.sender, inGameRewardAddress, deductedTokens);\n    }\n    \n    function catchMonster(uint _tokens, uint32 _classId, string _name) isActive requirePaymentContract external {\n        if (_tokens > balanceOf[msg.sender])\n            revert();\n        PaymentInterface payment = PaymentInterface(paymentContract);\n        uint deductedTokens = payment.catchMonster(msg.sender, _tokens, _classId, _name);\n        if (deductedTokens == 0 || deductedTokens > _tokens)\n            revert();\n        _transfer(msg.sender, inGameRewardAddress, deductedTokens);\n    }\n    \n    function payService(uint _tokens, uint32 _type, string _text, uint64 _param1, uint64 _param2, uint64 _param3, uint64 _param4, uint64 _param5, uint64 _param6) isActive requirePaymentContract external {\n        if (_tokens > balanceOf[msg.sender])\n            revert();\n        PaymentInterface payment = PaymentInterface(paymentContract);\n        uint deductedTokens = payment.payService(msg.sender, _tokens, _type, _text, _param1, _param2, _param3, _param4, _param5, _param6);\n        if (deductedTokens == 0 || deductedTokens > _tokens)\n            revert();\n        _transfer(msg.sender, inGameRewardAddress, deductedTokens);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"catchMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userGrowPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inGameRewardAddress\",\"type\":\"address\"},{\"name\":\"_userGrowPoolAddress\",\"type\":\"address\"},{\"name\":\"_developerAddress\",\"type\":\"address\"},{\"name\":\"_paymentContract\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_a1\",\"type\":\"uint64\"},{\"name\":\"_a2\",\"type\":\"uint64\"},{\"name\":\"_a3\",\"type\":\"uint64\"},{\"name\":\"_s1\",\"type\":\"uint64\"},{\"name\":\"_s2\",\"type\":\"uint64\"},{\"name\":\"_s3\",\"type\":\"uint64\"}],\"name\":\"createCastle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inGameRewardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint32\"},{\"name\":\"_text\",\"type\":\"string\"},{\"name\":\"_param1\",\"type\":\"uint64\"},{\"name\":\"_param2\",\"type\":\"uint64\"},{\"name\":\"_param3\",\"type\":\"uint64\"},{\"name\":\"_param4\",\"type\":\"uint64\"},{\"name\":\"_param5\",\"type\":\"uint64\"},{\"name\":\"_param6\",\"type\":\"uint64\"}],\"name\":\"payService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_inGameRewardAddress\",\"type\":\"address\"},{\"name\":\"_userGrowPoolAddress\",\"type\":\"address\"},{\"name\":\"_developerAddress\",\"type\":\"address\"},{\"name\":\"_paymentContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "606060409081526000805460a060020a61ffff02191690556002805460ff191660011790558051908101604052600381527f312e300000000000000000000000000000000000000000000000000000000000602082015260069080516200006b929160200190620001c2565b50600d805460ff1916905534156200008257600080fd5b604051608080620018af8339810160405280805191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a0390811691909117909155909250851615159050620000df57600080fd5b600160a060020a0383161515620000f557600080fd5b600160a060020a03821615156200010b57600080fd5b60078054600160a060020a0319908116600160a060020a039687161780835560088054831696881696909617865560098054831695881695909517855586166000908152600460205260408082206604f94ae6af800090558654881682528082206601c6bf526340009055855488168252808220655af3107a400090559454871681528481205495548716815284812054925487168152939093205401909201600355600a80549091169190921617905562000267565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020557805160ff191683800117855562000235565b8280016001018555821562000235579182015b828111156200023557825182559160200191906001019062000218565b506200024392915062000247565b5090565b6200026491905b808211156200024357600081556001016200024e565b90565b61163880620002776000396000f3006060604052600436106101b35763ffffffff60e060020a60003504166306fdde0381146101b5578063095ea7b31461023f5780630976e9a71461027557806314d0f1ba146102a157806318160ddd146102c057806323b872dd146102e5578063313ce5671461030d57806342966c681461032057806348ef5aa8146103365780634b7503341461034e5780634efb023e14610361578063522f68151461038b57806354fd4d50146103ad57806357128ec1146103c05780636c81fd6d146103ef57806370a082311461040e57806379cc67901461042d5780638620410b1461044f5780638da5cb5b1461046257806395d89b41146104755780639608088c146104885780639c91dd56146104b9578063a6f2ae3a146104cc578063a9059cbb146104d4578063b414d4b6146104f6578063b85d627514610515578063caccd7f714610534578063cae9ca5114610547578063d8381df0146105ac578063dd62ed3e146105f9578063e4849b321461061e578063e724529c14610634578063ec44acf214610658578063ee4e44161461066b578063f0a2c4301461067e578063f285329214610691578063f8788382146106b0575b005b34156101c057600080fd5b6101c8610709565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102045780820151838201526020016101ec565b50505050905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024a57600080fd5b610261600160a060020a0360043516602435610740565b604051901515815260200160405180910390f35b341561028057600080fd5b6101b360048035906024803563ffffffff1691604435918201910135610770565b34156102ac57600080fd5b610261600160a060020a03600435166108b9565b34156102cb57600080fd5b6102d36108ce565b60405190815260200160405180910390f35b34156102f057600080fd5b610261600160a060020a03600435811690602435166044356108d4565b341561031857600080fd5b6102d361094b565b341561032b57600080fd5b610261600435610950565b341561034157600080fd5b6101b360043515156109db565b341561035957600080fd5b6102d3610a09565b341561036c57600080fd5b610374610a0f565b60405161ffff909116815260200160405180910390f35b341561039657600080fd5b6101b3600160a060020a0360043516602435610a31565b34156103b857600080fd5b6101c8610ac3565b34156103cb57600080fd5b6103d3610b61565b604051600160a060020a03909116815260200160405180910390f35b34156103fa57600080fd5b6101b3600160a060020a0360043516610b70565b341561041957600080fd5b6102d3600160a060020a0360043516610c1a565b341561043857600080fd5b610261600160a060020a0360043516602435610c2c565b341561045a57600080fd5b6102d3610d08565b341561046d57600080fd5b6103d3610d0e565b341561048057600080fd5b6101c8610d1d565b341561049357600080fd5b6101b3600160a060020a0360043581169060243581169060443581169060643516610d54565b34156104c457600080fd5b6103d3610df7565b6101b3610e06565b34156104df57600080fd5b6101b3600160a060020a0360043516602435610e53565b341561050157600080fd5b610261600160a060020a0360043516610e5e565b341561052057600080fd5b6101b3600160a060020a0360043516610e73565b341561053f57600080fd5b6103d3610f1d565b341561055257600080fd5b61026160048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610f2c95505050505050565b34156105b757600080fd5b6101b360048035906024803590810191013567ffffffffffffffff60443581169060643581169060843581169060a43581169060c43581169060e43516611045565b341561060457600080fd5b6102d3600160a060020a03600435811690602435166111c0565b341561062957600080fd5b6101b36004356111dd565b341561063f57600080fd5b6101b3600160a060020a03600435166024351515611269565b341561066357600080fd5b6102616112f5565b341561067657600080fd5b6102616112fe565b341561068957600080fd5b6103d3611307565b341561069c57600080fd5b6101b3600160a060020a0360043516611316565b34156106bb57600080fd5b6101b360048035906024803563ffffffff169160443591820191013560643567ffffffffffffffff9081169060843581169060a43581169060c43581169060e435811690610104351661136d565b60408051908101604052600e81527f4574686572656d6f6e546f6b656e000000000000000000000000000000000000602082015281565b600160a060020a033381166000908152600560209081526040808320938616835292905220819055600192915050565b600254600090819060ff161561078557600080fd5b600a54600160a060020a0316151561079c57600080fd5b600160a060020a0333166000908152600460205260409020548611156107c157600080fd5b600a54600160a060020a03169150816382d559de33888888886000604051602001526040518663ffffffff1660e060020a0281526004018086600160a060020a0316600160a060020a031681526020018581526020018463ffffffff1663ffffffff16815260200180602001828103825284848281815260200192508082843782019150509650505050505050602060405180830381600087803b151561086757600080fd5b6102c65a03f1151561087857600080fd5b505050604051805191505080158061088f57508581115b1561089957600080fd5b6007546108b1903390600160a060020a0316836114f5565b505050505050565b60016020526000908152604090205460ff1681565b60035481565b600160a060020a0380841660009081526005602090815260408083203390941683529290529081205482111561090957600080fd5b600160a060020a03808516600090815260056020908152604080832033909416835292905220805483900390556109418484846114f5565b5060019392505050565b600881565b600160a060020a0333166000908152600460205260408120548290101561097657600080fd5b600160a060020a03331660008181526004602052604090819020805485900390556003805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60005433600160a060020a039081169116146109f657600080fd5b6002805460ff1916911515919091179055565b600b5481565b60005474010000000000000000000000000000000000000000900461ffff1681565b60005433600160a060020a0390811691161480610a6c5750600160a060020a03331660009081526001602081905260409091205460ff161515145b1515610a7757600080fd5b30600160a060020a031631811115610a8e57600080fd5b600160a060020a03821681156108fc0282604051600060405180830381858888f193505050501515610abf57600080fd5b5050565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b595780601f10610b2e57610100808354040283529160200191610b59565b820191906000526020600020905b815481529060010190602001808311610b3c57829003601f168201915b505050505081565b600854600160a060020a031681565b60005433600160a060020a03908116911614610b8b57600080fd5b600160a060020a03811660009081526001602052604090205460ff161515610c1757600160a060020a03811660009081526001602081905260408220805460ff191682179055815461ffff7401000000000000000000000000000000000000000080830482169093011690910275ffff0000000000000000000000000000000000000000199091161790555b50565b60046020526000908152604090205481565b600160a060020a03821660009081526004602052604081205482901015610c5257600080fd5b600160a060020a0380841660009081526005602090815260408083203390941683529290522054821115610c8557600080fd5b600160a060020a038084166000818152600460209081526040808320805488900390556005825280832033909516835293905282902080548590039055600380548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b600c5481565b600054600160a060020a031681565b60408051908101604052600581527f454d4f4e54000000000000000000000000000000000000000000000000000000602082015281565b60005433600160a060020a0390811691161480610d8f5750600160a060020a03331660009081526001602081905260409091205460ff161515145b1515610d9a57600080fd5b60078054600160a060020a0395861673ffffffffffffffffffffffffffffffffffffffff199182161790915560088054948616948216949094179093556009805492851692841692909217909155600a8054919093169116179055565b600a54600160a060020a031681565b600d5460009060ff16151560011480610e2d575060005433600160a060020a039081169116145b1515610e3857600080fd5b600c5434811515610e4557fe5b049050610c173033836114f5565b610abf3383836114f5565b600e6020526000908152604090205460ff1681565b60005433600160a060020a03908116911614610e8e57600080fd5b600160a060020a03811660009081526001602081905260409091205460ff1615151415610c1757600160a060020a03166000908152600160205260408120805460ff19169055805475ffff0000000000000000000000000000000000000000198116740100000000000000000000000000000000000000009182900461ffff9081166000190116909102179055565b600954600160a060020a031681565b600083610f398185610740565b1561103d5780600160a060020a0316638f4ffcb1338630876040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fd6578082015183820152602001610fbe565b50505050905090810190601f1680156110035780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561102457600080fd5b6102c65a03f1151561103557600080fd5b505050600191505b509392505050565b600254600090819060ff161561105a57600080fd5b600a54600160a060020a0316151561107157600080fd5b600160a060020a0333166000908152600460205260409020548b111561109657600080fd5b600a54600160a060020a0316915081635abcc417338d8d8d8d8d8d8d8d8d60006040516020015260405160e060020a63ffffffff8d16028152600160a060020a038b1660048201908152602482018b905267ffffffffffffffff8089166064840152878116608484015286811660a484015285811660c484015284811660e484015283166101048301526101206044830190815261012483018a90529091610144018a8a8082843782019150509b505050505050505050505050602060405180830381600087803b151561116957600080fd5b6102c65a03f1151561117a57600080fd5b505050604051805191505080158061119157508a81115b1561119b57600080fd5b6007546111b3903390600160a060020a0316836114f5565b5050505050505050505050565b600560209081526000928352604080842090915290825290205481565b600d5460ff16151560011480611201575060005433600160a060020a039081169116145b151561120c57600080fd5b600b548102600160a060020a03301631101561122757600080fd5b6112323330836114f5565b33600160a060020a03166108fc600b5483029081150290604051600060405180830381858888f193505050501515610c1757600080fd5b60005433600160a060020a0390811691161461128457600080fd5b600160a060020a0382166000908152600e602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b600d5460ff1681565b60025460ff1681565b600754600160a060020a031681565b60005433600160a060020a0390811691161461133157600080fd5b600160a060020a03811615610c175760008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b600254600090819060ff161561138257600080fd5b600a54600160a060020a0316151561139957600080fd5b600160a060020a0333166000908152600460205260409020548c11156113be57600080fd5b600a54600160a060020a03169150816330a95aa7338e8e8e8e8e8e8e8e8e8e60006040516020015260405163ffffffff8d811660e060020a028252600160a060020a038d1660048301908152602483018d9052908b16604483015267ffffffffffffffff888116608484015287811660a484015286811660c484015285811660e484015284811661010484015283166101248301526101406064830190815261014483018a90529091610164018a8a8082843782019150509c50505050505050505050505050602060405180830381600087803b151561149d57600080fd5b6102c65a03f115156114ae57600080fd5b50505060405180519150508015806114c557508b81115b156114cf57600080fd5b6007546114e7903390600160a060020a0316836114f5565b505050505050505050505050565b600160a060020a038216151561150a57600080fd5b600160a060020a0383166000908152600460205260409020548190101561153057600080fd5b600160a060020a0382166000908152600460205260409020548181011161155657600080fd5b600160a060020a0383166000908152600e602052604090205460ff161561157c57600080fd5b600160a060020a0382166000908152600e602052604090205460ff16156115a257600080fd5b600160a060020a038084166000818152600460205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505600a165627a7a7230582098ba791040985599863934aabf1be318767a1320ac905e4c8f33e33f800aadbd0029000000000000000000000000e0a66218c40230967d4240d25f6220a28e52c7ff000000000000000000000000d3b6d520906bb14c0eab0faf7a8b13fe31f8cbda0000000000000000000000004231a648b93c86923c578409558b1d6d8d726d52000000000000000000000000721da477f68c71788a262d58853fe6977d86535e",
  "constructorArguments": "000000000000000000000000e0a66218c40230967d4240d25f6220a28e52c7ff000000000000000000000000d3b6d520906bb14c0eab0faf7a8b13fe31f8cbda0000000000000000000000004231a648b93c86923c578409558b1d6d8d726d52000000000000000000000000721da477f68c71788a262d58853fe6977d86535e"
}