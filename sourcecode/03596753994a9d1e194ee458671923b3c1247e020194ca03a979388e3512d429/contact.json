{
  "address": "0xb577c2dff0394efeaaa27d8c28d2ee1a115a00dd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VortixTokenUSD",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-25\n*/\n\npragma solidity ^0.4.21;\n\n//import \"./zeppelin/StandardToken.sol\";\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract VortixTokenUSD is StandardToken, Ownable {\n    \n  // EVENTS\n  event Mint(address indexed to, uint256 amount, uint256 priceUsd);\n  event MintFinished();\n  event TransferableChanged(bool transferable);\n  // PUBLIC FUNCTIONS\n\n  // Only owner can send ether to this contract (If required)\n  function() public onlyOwner {}\n\n  // Check transfer ability and sender address before transfer\n  function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  // Check transfer ability and sender address before transfer\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /// @dev Function to mint tokens.\n  /// @param _to The address that will receive the minted tokens.\n  /// @param _amount The amount of tokens to mint.\n  /// @param _priceUsd The price of minted token at moment of purchase in USD with 18 decimals.\n  /// @return A boolean that indicates if the operation was successful.\n  function mint(address _to, uint256 _amount, uint256 _priceUsd) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    if (_priceUsd != 0) {\n      uint256 amountUsd = _amount.mul(_priceUsd).div(10**18);\n      totalCollected = totalCollected.add(amountUsd);\n    }\n    emit Mint(_to, _amount, _priceUsd);\n    emit Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /// @dev Function to stop minting new tokens.\n  /// @return A boolean that indicates if the operation was successful.\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n\n  /// @dev Change ability to transfer tokens by users.\n  /// @return A boolean that indicates if the operation was successful.\n  function setTransferable(bool _transferable) onlyOwner public returns (bool) {\n    require(transferable != _transferable);\n    transferable = _transferable;\n    emit TransferableChanged(transferable);\n    return true;\n  }\n\n  // MODIFIERS\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier canTransfer() {\n    require(transferable || msg.sender == owner);\n    _;\n  }\n\n  // FIELDS\n\n  // Standard fields used to describe the token\n  string public name = \"VortixTokenUSD\";\n  string public symbol = \"VTX\";\n  string public version = \"H0.1\";\n  uint8 public decimals = 8;\n\n  // At the start of the token existence token is not transferable\n  bool public transferable = false;\n\n  // Will be set to true when minting tokens will be finished\n  bool public mintingFinished = false;\n\n  // Amount of USD (with 8 decimals) collected during sale phase\n  uint256 private totalCollected;\n}",
  "bytecode": "606060405260408051908101604052600e81527f566f72746978546f6b656e5553440000000000000000000000000000000000006020820152600490805161004b929160200190610111565b5060408051908101604052600381527f565458000000000000000000000000000000000000000000000000000000000060208201526005908051610093929160200190610111565b5060408051908101604052600481527f48302e3100000000000000000000000000000000000000000000000000000000602082015260069080516100db929160200190610111565b5060078054600860ff199091161762ffff001916905560038054600160a060020a03191633600160a060020a03161790556101ac565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015257805160ff191683800117855561017f565b8280016001018555821561017f579182015b8281111561017f578251825591602001919060010190610164565b5061018b92915061018f565b5090565b6101a991905b8082111561018b5760008155600101610195565b90565b610eae80620001bc6000396000f3006060604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012e57806306fdde0314610155578063095ea7b3146101df578063156e29f61461020157806318160ddd1461022657806323b872dd1461024b578063313ce5671461027357806354fd4d501461029c57806366188463146102af57806370a08231146102d15780637d64bcb4146102f05780638da5cb5b1461030357806392ff0d311461033257806395d89b41146103455780639cd2370714610358578063a9059cbb14610370578063d73dd62314610392578063dd62ed3e146103b4578063f2fde38b146103d9575b341561011157600080fd5b60035433600160a060020a0390811691161461012c57600080fd5b005b341561013957600080fd5b6101416103f8565b604051901515815260200160405180910390f35b341561016057600080fd5b610168610407565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a457808201518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ea57600080fd5b610141600160a060020a03600435166024356104a5565b341561020c57600080fd5b610141600160a060020a0360043516602435604435610511565b341561023157600080fd5b610239610675565b60405190815260200160405180910390f35b341561025657600080fd5b610141600160a060020a036004358116906024351660443561067b565b341561027e57600080fd5b6102866106c0565b60405160ff909116815260200160405180910390f35b34156102a757600080fd5b6101686106c9565b34156102ba57600080fd5b610141600160a060020a0360043516602435610734565b34156102dc57600080fd5b610239600160a060020a0360043516610830565b34156102fb57600080fd5b61014161084b565b341561030e57600080fd5b6103166108c2565b604051600160a060020a03909116815260200160405180910390f35b341561033d57600080fd5b6101416108d1565b341561035057600080fd5b6101686108df565b341561036357600080fd5b610141600435151561094a565b341561037b57600080fd5b610141600160a060020a03600435166024356109e0565b341561039d57600080fd5b610141600160a060020a0360043516602435610a23565b34156103bf57600080fd5b610239600160a060020a0360043581169060243516610ac7565b34156103e457600080fd5b61012c600160a060020a0360043516610af2565b60075462010000900460ff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561049d5780601f106104725761010080835404028352916020019161049d565b820191906000526020600020905b81548152906001019060200180831161048057829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600354600090819033600160a060020a0390811691161461053157600080fd5b60075462010000900460ff161561054757600080fd5b60015461055a908563ffffffff610b8d16565b600155600160a060020a038516600090815260208190526040902054610586908563ffffffff610b8d16565b600160a060020a03861660009081526020819052604090205582156105e7576105cd670de0b6b3a76400006105c1868663ffffffff610b9c16565b9063ffffffff610bc716565b6008549091506105e3908263ffffffff610b8d16565b6008555b84600160a060020a03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f858560405191825260208201526040908101905180910390a284600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3506001949350505050565b60015490565b600754600090610100900460ff16806106a2575060035433600160a060020a039081169116145b15156106ad57600080fd5b6106b8848484610bde565b949350505050565b60075460ff1681565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561049d5780601f106104725761010080835404028352916020019161049d565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561079157600160a060020a0333811660009081526002602090815260408083209388168352929052908120556107c8565b6107a1818463ffffffff610d5e16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a031660009081526020819052604090205490565b60035460009033600160a060020a0390811691161461086957600080fd5b60075462010000900460ff161561087f57600080fd5b6007805462ff00001916620100001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b600754610100900460ff1681565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561049d5780601f106104725761010080835404028352916020019161049d565b60035460009033600160a060020a0390811691161461096857600080fd5b60075460ff610100909104161515821515141561098457600080fd5b6007805461ff001916610100841515810291909117918290557f6488c20eb299903c41aa1b53c3ad5a3140aca395935e57cc52c1cc8dae8d9e179160ff91900416604051901515815260200160405180910390a1506001919050565b600754600090610100900460ff1680610a07575060035433600160a060020a039081169116145b1515610a1257600080fd5b610a1c8383610d70565b9392505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610a5b908363ffffffff610b8d16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610b0d57600080fd5b600160a060020a0381161515610b2257600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820183811015610a1c57fe5b600080831515610baf5760009150610829565b50828202828482811515610bbf57fe5b0414610a1c57fe5b6000808284811515610bd557fe5b04949350505050565b6000600160a060020a0383161515610bf557600080fd5b600160a060020a038416600090815260208190526040902054821115610c1a57600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610c4d57600080fd5b600160a060020a038416600090815260208190526040902054610c76908363ffffffff610d5e16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610cab908363ffffffff610b8d16565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610cf1908363ffffffff610d5e16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600082821115610d6a57fe5b50900390565b6000600160a060020a0383161515610d8757600080fd5b600160a060020a033316600090815260208190526040902054821115610dac57600080fd5b600160a060020a033316600090815260208190526040902054610dd5908363ffffffff610d5e16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610e0a908363ffffffff610b8d16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3506001929150505600a165627a7a7230582006b4c1a3d59f66f6877bae517008d53171fee8663e58f48598abefc131bdb4220029"
}