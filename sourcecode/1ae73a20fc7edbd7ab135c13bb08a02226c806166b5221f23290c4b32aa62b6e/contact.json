{
  "address": "0x9e88613418cf03dca54d6a2cf6ad934a78c7a17a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Swarm Fund Token",
  "contractName": "SwarmToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-19\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount)\n        returns(bool);\n}\n\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    function Controlled() { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController {\n        controller = _newController;\n    }\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n}\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    function MiniMeTokenFactory() {\n    }\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) returns (MiniMeToken) \n    {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) \n    Controlled()\n    {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        require(transfersEnabled);\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < _amount) return false;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal returns(bool) {\n\n           if (_amount == 0) {\n               return true;\n           }\n\n           require(parentSnapShotBlock < block.number);\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to != 0) && (_to != address(this)));\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer returns false\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\n           if (previousBalanceFrom < _amount) {\n               return false;\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           var previousBalanceTo = balanceOfAt(_to, block.number);\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           Transfer(_from, _to, _amount);\n\n           return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) constant\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () payable {\n        // Fail any transfers into the token contract\n        require(false);\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) onlyController {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n/**\n * This contract inherits from the MinimeToken and adds minting capability.\n * When the sale is started, the token ownership is handed over to the Crowsdale contract.\n * The crowdsale contract will not call the \"generateTokens()\" call directly in the MinimeToken, \n * but will instead use the minting functionality here.\n */\ncontract MiniMeMintableToken is MiniMeToken {\n  using SafeMath for uint256;\n\n  // Events to notify about Minting\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  // Flag to track whether minting is still allowed.\n  bool public mintingFinished = false;\n\n  // This map will keep track of how many tokens were issued during the token sale.\n  // This value will then be used for vesting calculations from the point where the token contract is finished minting.\n  mapping (address => uint256) issuedTokens;\n\n  // Modifier to allow minting of tokens.\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  // Pass through consructor\n  function MiniMeMintableToken(\n    address _tokenFactory,\n    address _parentToken,\n    uint _parentSnapShotBlock,\n    string _tokenName,\n    uint8 _decimalUnits,\n    string _tokenSymbol,\n    bool _transfersEnabled\n  ) \n  MiniMeToken(\n    _tokenFactory,\n    _parentToken,\n    _parentSnapShotBlock,\n    _tokenName,\n    _decimalUnits,\n    _tokenSymbol,\n    _transfersEnabled\n  )\n  {\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyController canMint returns (bool) {\n\n    // First, generate the tokens in the base Minime class balances.\n    generateTokens(_to, _amount);\n\n    // Save off the amount that this account has been issued during the minting period so vesting can be calculated.\n    issuedTokens[_to] = issuedTokens[_to].add(_amount);\n\n    // Trigger the minting event notification\n    Mint(_to, _amount);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyController canMint returns (bool) {\n\n    // Set the minting finished so that tokens can be transferred once vested.\n    // This flag will prevent new tokens from being minted in the future.\n    mintingFinished = true;\n\n    // Trigger the notification that minting has finished.\n    MintFinished();\n    \n    return true;\n  }\n}\n\n/**\n * This contract defines the tokens for the SWARM platform.\n * It inherits from the MiniMeToken contract which allows sub-tokens to be created.\n * This token also implements a vesting schedule on any tokens that are minted during the pre-sale.\n * The MintableToken contract is adapted from the Open Zeppelin contract.\n */\ncontract MiniMeVestedToken is MiniMeMintableToken {\n  using SafeMath for uint256;\n\n  // This value will keep track of the time when the minting is finished after the crowd sale ends.\n  // Vesting will start accruing at this point in time.\n  uint256 public vestingStartTime = 0;\n\n  // Default vesting period is 42 days, with a max of 8 periods\n  uint256 public vestingPeriodTime = 42 days;\n  uint256 public vestingTotalPeriods = 8;\n\n  // Pass through consructor\n  function MiniMeVestedToken(\n    address _tokenFactory,\n    address _parentToken,\n    uint _parentSnapShotBlock,\n    string _tokenName,\n    uint8 _decimalUnits,\n    string _tokenSymbol,\n    bool _transfersEnabled\n  ) \n  MiniMeMintableToken(\n    _tokenFactory,\n    _parentToken,\n    _parentSnapShotBlock,\n    _tokenName,\n    _decimalUnits,\n    _tokenSymbol,\n    _transfersEnabled\n  )\n  {\n  }\n\n////////////////////\n// Token Transfers\n////////////////////\n\n  /**\n   * Modifier to functions to see if the vested balance is higher than requested transfer amount.\n   * Also enforces that the minting phase of the sale is over.\n   */\n  modifier canTransfer(address _sender, uint _value) {\n    require(mintingFinished);\n    require(_value <= vestedBalanceOf(_sender));\n    _;\n  }\n\n  /**\n   * Override the base transfer class to enforce vesting requirement is met\n   */\n  function transfer(address _to, uint _value)\n    canTransfer(msg.sender, _value)\n    public\n    returns (bool success)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  /**\n   * Override the base transferFrom class to enforce vesting requirement is met\n   */\n  function transferFrom(address _from, address _to, uint _value)\n    canTransfer(_from, _value)\n    public\n    returns (bool success)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n////////////////////\n// Token Vesting\n///////////////////\n\n  /**\n   * Allow vesting schedule params to be overridden.\n   */\n  function setVestingParams(uint256 _vestingStartTime, uint256 _vestingTotalPeriods, uint256 _vestingPeriodTime) onlyController {\n    vestingStartTime = _vestingStartTime;\n    vestingTotalPeriods = _vestingTotalPeriods;\n    vestingPeriodTime = _vestingPeriodTime;\n  }\n\n  /**\n    * Gets the number of vesting periods that have completed from the start time to the current time.\n    */\n  function getVestingPeriodsCompleted(uint256 _vestingStartTime, uint256 _currentTime) public constant returns (uint256) {\n      return _currentTime.sub(_vestingStartTime).div(vestingPeriodTime);\n  }\n\n  /**\n    * Gets the vested balance for an account.\n    * initialBalance - The amount that was allocated at the start of vesting.\n    * currentBalance - The amount that is currently in the account.\n    * vestingStartTime - The time stamp (seconds since unix epoch) when vesting started.\n    * currentTime - The current time stamp (seconds since unix epoch).\n    */\n  function getVestedBalance(uint256 _initialBalance, uint256 _currentBalance, uint256 _vestingStartTime, uint256 _currentTime)\n      public constant returns (uint256)\n  {\n      // Short-cut if vesting hasn't started yet\n      if (_currentTime < _vestingStartTime) {\n        return 0;\n      }\n      \n      // Short-cut the vesting calculations if the vesting periods are completed\n      if (_currentTime >= _vestingStartTime.add(vestingPeriodTime.mul(vestingTotalPeriods))) {\n          return _currentBalance;\n      }\n\n      // First, get the number of vesting periods completed\n      uint256 vestedPeriodsCompleted = getVestingPeriodsCompleted(_vestingStartTime, _currentTime);\n\n      // Calculate the amount that should be withheld.\n      uint256 vestingPeriodsRemaining = vestingTotalPeriods.sub(vestedPeriodsCompleted);\n      uint256 unvestedBalance = _initialBalance.mul(vestingPeriodsRemaining).div(vestingTotalPeriods);\n\n      // Return the current balance minus any that is still unvested.\n      return _currentBalance.sub(unvestedBalance);\n  }\n\n  /**\n   * Convenience method - Get the vested balance of the address.\n   */\n  function vestedBalanceOf(address _owner) public constant returns (uint256 balance) {\n    return getVestedBalance(issuedTokens[_owner], balanceOf(_owner), vestingStartTime, block.timestamp);\n  }\n\n  /**\n   * At the end of the sale, this should be called to trigger the vesting to start.\n   * Tokens cannot be transferred prior to this being called.\n   */\n  function finishMinting() onlyController canMint returns (bool) {\n    // Set the time stamp for tokens to start vesting\n    vestingStartTime = block.timestamp;\n\n    return super.finishMinting();\n  }\n}\n\ncontract SwarmToken is MiniMeVestedToken {\n\n  /**\n   * Constructor to initialize Swarm Token.\n   * Factory is pre-deployed and passed in.\n   *\n   * @author poole_party via tokensoft.io\n   */\n  function SwarmToken(address _tokenFactory)\n    MiniMeVestedToken(\n      _tokenFactory,\n      0x0,\n      0,\n      \"Swarm Fund Token\",\n      18,\n      \"SWM\",\n      true\n    )\n    {}    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"name\":\"getVestingPeriodsCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"name\":\"_vestingTotalPeriods\",\"type\":\"uint256\"},{\"name\":\"_vestingPeriodTime\",\"type\":\"uint256\"}],\"name\":\"setVestingParams\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingTotalPeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_initialBalance\",\"type\":\"uint256\"},{\"name\":\"_currentBalance\",\"type\":\"uint256\"},{\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"name\":\"getVestedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPeriodTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600781527f4d4d545f302e3100000000000000000000000000000000000000000000000000602082015260049080516200004d929160200190620001e0565b50600b805460a860020a60ff02191690556000600d5562375f00600e556008600f5534156200007b57600080fd5b604051602080620021d4833981016040528080519150505b806000806040805190810160405280601081526020017f537761726d2046756e6420546f6b656e00000000000000000000000000000000815250601260408051908101604052600381527f53574d0000000000000000000000000000000000000000000000000000000000602082015260015b868686868686865b868686868686865b5b60008054600160a060020a03191633600160a060020a03161790555b600b805461010060a860020a031916610100600160a060020a038a1602179055600184805162000168929160200190620001e0565b506002805460ff191660ff851617905560038280516200018d929160200190620001e0565b5060058054600160a060020a031916600160a060020a0388161790556006859055600b805460ff1916821515179055436007555b505050505050505b505050505050505b505050505050505b506200028a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022357805160ff191683800117855562000253565b8280016001018555821562000253579182015b828111156200025357825182559160200191906001019062000236565b5b506200026292915062000266565b5090565b6200028791905b808211156200026257600081556001016200026d565b5090565b90565b611f3a806200029a6000396000f3006060604052361561019b5763ffffffff60e060020a60003504166305d2035b81146101a457806306fdde03146101cb578063095ea7b3146102565780630e2d1a2a1461028c57806317634514146102bd57806318160ddd146102e257806323b872dd1461030757806328f68d39146103435780632b2f4d841461036e578063313ce5671461038c5780633cebb823146103b557806340c10f19146103d65780634ee2cd7e1461040c57806354fd4d50146104405780636638c087146104cb57806370a082311461058f5780637d64bcb4146105c057806380a54001146105e7578063827f32c014610616578063843cfb9e1461064c5780638cadd6a21461067157806395d89b41146106a2578063981b24d01461072d578063a8660a7814610755578063a9059cbb1461077a578063b2d27832146107b0578063bef97c87146107d5578063c5bcc4f1146107fc578063cae9ca5114610821578063d3ce77fe1461089a578063dd62ed3e146108d0578063df8de3e714610907578063e77772fe14610928578063f41e60c514610957578063f77c479114610971575b5b600080fd5b5b005b34156101af57600080fd5b6101b76109a0565b604051901515815260200160405180910390f35b34156101d657600080fd5b6101de6109b0565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561021b5780820151818401525b602001610202565b50505050905090810190601f1680156102485780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026157600080fd5b6101b7600160a060020a0360043516602435610a4e565b604051901515815260200160405180910390f35b341561029757600080fd5b6102ab600160a060020a0360043516610b07565b60405190815260200160405180910390f35b34156102c857600080fd5b6102ab610b3e565b60405190815260200160405180910390f35b34156102ed57600080fd5b6102ab610b44565b60405190815260200160405180910390f35b341561031257600080fd5b6101b7600160a060020a0360043581169060243516604435610b55565b604051901515815260200160405180910390f35b341561034e57600080fd5b6102ab600435602435610ba1565b60405190815260200160405180910390f35b341561037957600080fd5b6101a1600435602435604435610bd0565b005b341561039757600080fd5b61039f610c01565b60405160ff909116815260200160405180910390f35b34156103c057600080fd5b6101a1600160a060020a0360043516610c0a565b005b34156103e157600080fd5b6101b7600160a060020a0360043516602435610c52565b604051901515815260200160405180910390f35b341561041757600080fd5b6102ab600160a060020a0360043516602435610d17565b60405190815260200160405180910390f35b341561044b57600080fd5b6101de610e5d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561021b5780820151818401525b602001610202565b50505050905090810190601f1680156102485780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104d657600080fd5b61057360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650508435946020013515159350610efb92505050565b604051600160a060020a03909116815260200160405180910390f35b341561059a57600080fd5b6102ab600160a060020a036004351661112b565b60405190815260200160405180910390f35b34156105cb57600080fd5b6101b761113f565b604051901515815260200160405180910390f35b34156105f257600080fd5b610573611186565b604051600160a060020a03909116815260200160405180910390f35b341561062157600080fd5b6101b7600160a060020a0360043516602435611195565b604051901515815260200160405180910390f35b341561065757600080fd5b6102ab611268565b60405190815260200160405180910390f35b341561067c57600080fd5b6102ab60043560243560443560643561126e565b60405190815260200160405180910390f35b34156106ad57600080fd5b6101de611320565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561021b5780820151818401525b602001610202565b50505050905090810190601f1680156102485780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073857600080fd5b6102ab6004356113be565b60405190815260200160405180910390f35b341561076057600080fd5b6102ab6114b6565b60405190815260200160405180910390f35b341561078557600080fd5b6101b7600160a060020a03600435166024356114bc565b604051901515815260200160405180910390f35b34156107bb57600080fd5b6102ab611506565b60405190815260200160405180910390f35b34156107e057600080fd5b6101b761150c565b604051901515815260200160405180910390f35b341561080757600080fd5b6102ab611515565b60405190815260200160405180910390f35b341561082c57600080fd5b6101b760048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061151b95505050505050565b604051901515815260200160405180910390f35b34156108a557600080fd5b6101b7600160a060020a0360043516602435611639565b604051901515815260200160405180910390f35b34156108db57600080fd5b6102ab600160a060020a0360043581169060243516611706565b60405190815260200160405180910390f35b341561091257600080fd5b6101a1600160a060020a0360043516611733565b005b341561093357600080fd5b6105736118e0565b604051600160a060020a03909116815260200160405180910390f35b341561096257600080fd5b6101a160043515156118f4565b005b341561097c57600080fd5b610573611922565b604051600160a060020a03909116815260200160405180910390f35b600b5460a860020a900460ff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b505050505081565b600b5460009060ff161515610a6257600080fd5b811580610a925750600160a060020a03338116600090815260096020908152604080832093871683529290522054155b1515610a9d57600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600160a060020a0381166000908152600c6020526040812054610b3690610b2d8461112b565b600d544261126e565b90505b919050565b60075481565b6000610b4f436113be565b90505b90565b60008382600b60159054906101000a900460ff161515610b7457600080fd5b610b7d82610b07565b811115610b8957600080fd5b610b94868686611931565b92505b5b50509392505050565b600e54600090610bc790610bbb848663ffffffff6119d316565b9063ffffffff6119ea16565b90505b92915050565b60005433600160a060020a03908116911614610beb57600080fd5b600d839055600f829055600e8190555b5b505050565b60025460ff1681565b60005433600160a060020a03908116911614610c2557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000805433600160a060020a03908116911614610c6e57600080fd5b600b5460a860020a900460ff1615610c8557600080fd5b610c8f8383611195565b50600160a060020a0383166000908152600c6020526040902054610cb9908363ffffffff611a0616565b600160a060020a0384166000818152600c60205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a25060015b5b5b92915050565b600160a060020a0382166000908152600860205260408120541580610d775750600160a060020a038316600090815260086020526040812080548492908110610d5c57fe5b906000526020600020900160005b50546001608060020a0316115b15610e2d57600554600160a060020a031615610e2057600554600654600160a060020a0390911690634ee2cd7e908590610db2908690611a20565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610dfe57600080fd5b6102c65a03f11515610e0f57600080fd5b505050604051805190509050610b01565b506000610b01565b610b01565b600160a060020a0383166000908152600860205260409020610e4f9083611a3a565b9050610b01565b5b92915050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b505050505081565b600080831515610f09574393505b600b546101009004600160a060020a0316635b7b72c130868a8a8a8960006040516020015260405160e060020a63ffffffff8916028152600160a060020a038716600482019081526024820187905260ff8516606483015282151560a483015260c0604483019081529091608481019060c40187818151815260200191508051906020019080838360005b83811015610fad5780820151818401525b602001610f94565b50505050905090810190601f168015610fda5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156110115780820151818401525b602001610ff8565b50505050905090810190601f16801561103e5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b151561106257600080fd5b6102c65a03f1151561107357600080fd5b5050506040518051915050600160a060020a038116633cebb8233360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156110cc57600080fd5b6102c65a03f115156110dd57600080fd5b50505080600160a060020a03167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade8560405190815260200160405180910390a28091505b5095945050505050565b6000610b368243610d17565b90505b919050565b6000805433600160a060020a0390811691161461115b57600080fd5b600b5460a860020a900460ff161561117257600080fd5b42600d55610b4f611bae565b90505b5b5b90565b600554600160a060020a031681565b600080548190819033600160a060020a039081169116146111b557600080fd5b6111bd610b44565b9150838201829010156111cf57600080fd5b6111d88561112b565b9050838101819010156111ea57600080fd5b6111f7600a858401611c3b565b600160a060020a038516600090815260086020526040902061121b90828601611c3b565b84600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b5b505092915050565b600f5481565b600080600080858510156112855760009350611315565b6112ac61129f600f54600e54611d3e90919063ffffffff16565b879063ffffffff611a0616565b85106112ba57869350611315565b6112c48686610ba1565b600f549093506112da908463ffffffff6119d316565b600f5490925061130090610bbb8a8563ffffffff611d3e16565b9063ffffffff6119ea16565b9050611312878263ffffffff6119d316565b93505b505050949350505050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b505050505081565b600a5460009015806113f7575081600a60008154811015156113dc57fe5b906000526020600020900160005b50546001608060020a0316115b1561149e57600554600160a060020a03161561149157600554600654600160a060020a039091169063981b24d090611430908590611a20565b60006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561146f57600080fd5b6102c65a03f1151561148057600080fd5b505050604051805190509050610b39565b506000610b39565b610b39565b6114a9600a83611a3a565b9050610b39565b5b919050565b600d5481565b60003382600b60159054906101000a900460ff1615156114db57600080fd5b6114e482610b07565b8111156114f057600080fd5b6114fa8585611d6d565b92505b5b505092915050565b600e5481565b600b5460ff1681565b60065481565b60006115278484610a4e565b151561153257600080fd5b83600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115cb5780820151818401525b6020016115b2565b50505050905090810190601f1680156115f85780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561161957600080fd5b6102c65a03f1151561162a57600080fd5b505050600190505b9392505050565b600080548190819033600160a060020a0390811691161461165957600080fd5b611661610b44565b91508382101561167057600080fd5b6116798561112b565b90508381101561168857600080fd5b611695600a858403611c3b565b600160a060020a03851660009081526008602052604090206116b990858303611c3b565b600085600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b5b505092915050565b600160a060020a038083166000908152600960209081526040808320938516835292905220545b92915050565b60008054819033600160a060020a0390811691161461175157600080fd5b600160a060020a038316151561179f57600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561179a57600080fd5b610bfb565b82915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156117f957600080fd5b6102c65a03f1151561180a57600080fd5b505050604051805160008054919350600160a060020a03808616935063a9059cbb92169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561187a57600080fd5b6102c65a03f1151561188b57600080fd5b50505060405180515050600054600160a060020a039081169084167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c8360405190815260200160405180910390a35b5b505050565b600b546101009004600160a060020a031681565b60005433600160a060020a0390811691161461190f57600080fd5b600b805460ff19168215151790555b5b50565b600054600160a060020a031681565b6000805433600160a060020a039081169116146119be57600b5460ff16151561195957600080fd5b600160a060020a03808516600090815260096020908152604080832033909416835292905220548290101561199057506000611632565b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b6119c9848484611d95565b90505b9392505050565b6000828211156119df57fe5b508082035b92915050565b60008082848115156119f857fe5b0490508091505b5092915050565b600082820183811015611a1557fe5b8091505b5092915050565b6000818310611a2f5781610bc7565b825b90505b92915050565b600080600080858054905060001415611a565760009350611ba5565b855486906000198101908110611a6857fe5b906000526020600020900160005b50546001608060020a03168510611acd57855486906000198101908110611a9957fe5b906000526020600020900160005b505470010000000000000000000000000000000090046001608060020a03169350611ba5565b856000815481101515611adc57fe5b906000526020600020900160005b50546001608060020a0316851015611b055760009350611ba5565b8554600093506000190191505b82821115611b675760026001838501015b049050848682815481101515611b3557fe5b906000526020600020900160005b50546001608060020a031611611b5b57809250611b62565b6001810391505b611b12565b8583815481101515611b7557fe5b906000526020600020900160005b505470010000000000000000000000000000000090046001608060020a031693505b50505092915050565b6000805433600160a060020a03908116911614611bca57600080fd5b600b5460a860020a900460ff1615611be157600080fd5b600b805475ff000000000000000000000000000000000000000000191660a860020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b5b90565b815460009081901580611c7857508354439085906000198101908110611c5d57fe5b906000526020600020900160005b50546001608060020a0316105b15611cee5783548490611c8e8260018301611ec3565b81548110611c9857fe5b906000526020600020900160005b5080546001608060020a03858116700100000000000000000000000000000000024382166fffffffffffffffffffffffffffffffff1990931692909217161781559150611d37565b835484906000198101908110611d0057fe5b906000526020600020900160005b5080546001608060020a0380861670010000000000000000000000000000000002911617815590505b5b50505050565b6000828202831580611d5a5750828482811515611d5757fe5b04145b1515611a1557fe5b8091505b5092915050565b600b5460009060ff161515611d8157600080fd5b610bc7338484611d95565b90505b92915050565b60008080831515611da95760019250610b97565b600654439010611db857600080fd5b600160a060020a03851615801590611de2575030600160a060020a031685600160a060020a031614155b1515611ded57600080fd5b611df78643610d17565b915083821015611e0a5760009250610b97565b600160a060020a0386166000908152600860205260409020611e2e90858403611c3b565b611e388543610d17565b905083810181901015611e4a57600080fd5b600160a060020a0385166000908152600860205260409020611e6e90828601611c3b565b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b50509392505050565b815481835581811511610bfb57600083815260209020610bfb918101908301611eed565b5b505050565b610b5291905b80821115611f075760008155600101611ef3565b5090565b905600a165627a7a72305820d6138bbb1454d36904341954f7aeb7da4c13131facb8916fd8937b07d731396800290000000000000000000000007a951603a189708ae7ad9aa6c4883ce5ceb24a11",
  "constructorArguments": "0000000000000000000000007a951603a189708ae7ad9aa6c4883ce5ceb24a11"
}