{
  "address": "0x76239a2c934344c747826c484673bc6102ac2482",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FairSocialSystem",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-04\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ninterface tokenRecipient\n{\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n}\n\n\ninterface IERC20 \n{\n\tfunction totalSupply() external view returns (uint256);\n\tfunction balanceOf(address who) external view returns (uint256);\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\tfunction approve(address spender, uint256 value) external returns (bool);\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC223Rtc \n{\n\tevent Transfer(address indexed from, address indexed to, uint256 value,bytes _data);\n\tevent tFallback(address indexed _contract,address indexed _from, uint256 _value,bytes _data);\n\tevent tRetrive(address indexed _contract,address indexed _to, uint256 _value);\n\t\n\t\n\tmapping (address => bool) internal _tokenFull;\t\n\t//\tcontract => user => balance\n\tmapping (address => mapping (address => uint256)) internal _tokenInContract;\n\t\n\t/// @notice entry to receve tokens\n\tfunction tokenFallback(address _from, uint _value, bytes memory _data) public\n\t{\n        \t_tokenFull[msg.sender]=true;\n\t\t_tokenInContract[msg.sender][_from]=_value;\n\t\temit tFallback(msg.sender,_from, _value, _data);\n\t}\n\n\tfunction balanceOfToken(address _contract,address _owner) public view returns(uint256)\n\t{\n\t\tIERC20 cont=IERC20(_contract);\n\t\tuint256 tBal = cont.balanceOf(address(this));\n\t\tif(_tokenFull[_contract]==true)\t\t//full info\n\t\t{\n\t\t\tuint256 uBal=_tokenInContract[_contract][_owner];\t// user balans on contract\n\t\t\trequire(tBal >= uBal);\n\t\t\treturn(uBal);\n\t\t}\n\t\t\n\t\treturn(tBal);\n\t}\n\n\t\n\tfunction tokeneRetrive(address _contract, address _to, uint _value) public\n\t{\n\t\tIERC20 cont=IERC20(_contract);\n\t\t\n\t\tuint256 tBal = cont.balanceOf(address(this));\n\t\trequire(tBal >= _value);\n\t\t\n\t\tif(_tokenFull[_contract]==true)\t\t//full info\n\t\t{\n\t\t\tuint256 uBal=_tokenInContract[_contract][msg.sender];\t// user balans on contract\n\t\t\trequire(uBal >= _value);\n\t\t\t_tokenInContract[_contract][msg.sender]-=_value;\n\t\t}\n\t\t\n\t\tcont.transfer(_to, _value);\n\t\temit tRetrive(_contract, _to, _value);\n\t}\n\t\n\t//test contract is or not\n\tfunction isContract(address _addr) internal view returns (bool)\n\t{\n        \tuint length;\n        \tassembly\n        \t{\n\t\t\t//retrieve the size of the code on target address, this needs assembly\n\t\t\tlength := extcodesize(_addr)\n\t\t}\n\t\treturn (length>0);\n\t}\n\t\n\tfunction transfer(address _to, uint _value, bytes memory _data) public returns(bool) \n\t{\n\t\tif(isContract(_to))\n        \t{\n\t\t\tERC223Rtc receiver = ERC223Rtc(_to);\n\t\t\treceiver.tokenFallback(msg.sender, _value, _data);\n\t\t}\n        \t_transfer(msg.sender, _to, _value);\n        \temit Transfer(msg.sender, _to, _value, _data);\n\t\treturn true;        \n\t}\n\t\n\tfunction _transfer(address _from, address _to, uint _value) internal \n\t{\n\t\t// virtual must be defined later\n\t\tbytes memory empty;\n\t\temit Transfer(_from, _to, _value,empty);\n\t}\n}\n\ncontract FairSocialSystem is IERC20,ERC223Rtc\n{\n\t// Public variables of the token\n\tstring\tinternal _name;\n\tstring\tinternal _symbol;\n\tuint8\tinternal _decimals;\n\tuint256\tinternal _totalS;\n\n\t\n\t// Private variables of the token\n\taddress\tpayable internal _mainOwner;\n\tuint\tinternal _maxPeriodVolume;\t\t//max volume for period\n\tuint\tinternal _minPeriodVolume;\t\t//min volume for period\n\tuint\tinternal _currentPeriodVolume;\n\tuint\tinternal _startPrice;\n\tuint\tinternal _currentPrice;\n\tuint\tinternal _bonusPrice;\n\n\n\tuint16\tinternal _perUp;\t\t//percent / 2^20\n\tuint16\tinternal _perDown;\t\t//99 & 98 \n\tuint8\tinternal _bonus;\t\t//for test price up\n\tbool\tinternal _way;\t\t\t// buy or sell \n\n\n\t// This creates an array with all balances and allowance\n\tmapping (address => uint256) internal _balance;\n\tmapping (address => mapping (address => uint256)) internal _allowed;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\tevent Sell(address indexed owner, uint256 value);\n\tevent Buy (address indexed owner, uint256 value);\n\n\n\tconstructor() public \n\t{\n\t\t_name=\"Fair Social System\";\t// Set the name for display purposes\n\t\t_symbol=\"FSS\";\t\t\t// Set the symbol for display purposes\n\t\t_decimals=2;                 \t//start total = 128*1024*1024\n\t\t_totalS=13421772800;\t\t// Update total supply with the decimal amount\n\t\t_currentPrice=0.00000001 ether;\t\n\n\n\t\t_startPrice=_currentPrice;\n\t\t_bonusPrice=_currentPrice<<1;\t//*2\n\t\t_maxPeriodVolume=132864000;\t//for period\n\t\t_minPeriodVolume=131532800;\n\t\t_currentPeriodVolume=0;\n\n\n\t\t_mainOwner=0x394b570584F2D37D441E669e74563CD164142930;\n\t\t_balance[_mainOwner]=(_totalS*5)/100;\t// Give the creator 5% \n\t\t_perUp=10380;\t\t\t//percent / 2^20\n\t\t_perDown=10276;\t\t//99 & 98 \n\n\n\t\temit Transfer(address(this), _mainOwner, _balance[_mainOwner]);\n\t}\n\n\tfunction _calcPercent(uint mn1,uint mn2) internal pure returns (uint)\t//calc % by 2^20\n\t{\n\t\tuint res=mn1*mn2;\n\t\treturn res>>20;\n\t}\n\n\tfunction _initPeriod(bool way) internal\n\t{                   //main logic\n\t\tif(way)\t\t//true == sell\n\t\t{\n\t\t\t_totalS=_totalS-_maxPeriodVolume;\n\t\t\t_maxPeriodVolume=_minPeriodVolume;\n\t\t\t_minPeriodVolume=_minPeriodVolume-_calcPercent(_minPeriodVolume,_perUp);\n\n\t\t\t_currentPeriodVolume=_minPeriodVolume;\n\t\t\t_currentPrice=_currentPrice-_calcPercent(_currentPrice,_perUp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_minPeriodVolume=_maxPeriodVolume;\n\t\t\t_maxPeriodVolume=_maxPeriodVolume+_calcPercent(_maxPeriodVolume,_perDown);\n\t\t\t_totalS=_totalS+_maxPeriodVolume;\n\t\t\t_currentPeriodVolume=0;\n\t\t\t_currentPrice=_currentPrice+_calcPercent(_currentPrice,_perDown);\n\t\t}\n\t\tif(_currentPrice>_bonusPrice)\t\t//bonus\n\t\t{\n\t\t\t_bonusPrice=_bonusPrice<<1;\t//next stage\n\t\t\tuint addBal=_totalS/100;\n\t\t\t_balance[_mainOwner]=_balance[_mainOwner]+addBal;\n\t\t\t_totalS=_totalS+addBal;\n\t\t\temit Transfer(address(this), _mainOwner, addBal);\n\t\t}\n\t}\n\n\n\tfunction getPrice() public view returns (uint,uint,uint) \n\t{\n\t\treturn (_currentPrice,_startPrice,_bonusPrice);\n\t}\n\n\tfunction getVolume() public view returns (uint,uint,uint) \n\t{\n\t\treturn (_currentPeriodVolume,_minPeriodVolume,_maxPeriodVolume);\n\t}\n\n\tfunction restartPrice() public\n\t{\n\t\trequire(address(msg.sender)==_mainOwner);\n\t\tif(_currentPrice<_startPrice)\n\t\t{\n\t\t\trequire(_balance[_mainOwner]>100);\n\t\t\t_currentPrice=address(this).balance/_balance[_mainOwner];\n\t\t\t_startPrice=_currentPrice;\n\t\t\t_bonusPrice=_startPrice<<1;\n\t\t}\n\t}\n\n\n\t//for all income\n\tfunction () external payable \n\t{        \n\t\tbuy();\n\t}\n\n\t// entry to buy tokens\n\tfunction buy() public payable\n\t{\n\t\t// reject contract buyer to avoid breaking interval limit\n\t\trequire(!isContract(msg.sender));\n\t\t\n\t\tuint ethAm=msg.value;\n\t\tuint amount=ethAm/_currentPrice;\n\t\tuint tAmount=0;\t\n\t\tuint cAmount=_maxPeriodVolume-_currentPeriodVolume;\t//for sell now \n\n\t\twhile (amount>=cAmount)\n\t\t{\n\t\t\ttAmount=tAmount+cAmount;\n\t\t\tethAm=ethAm-cAmount*_currentPrice;\n\t\t\t_initPeriod(false);\t//set new params from buy\n\t\t\tamount=ethAm/_currentPrice;\n\t\t\tcAmount=_maxPeriodVolume;\n\t\t}\n\t\tif(amount>0)\t\n\t\t{\n\t\t\t_currentPeriodVolume=_currentPeriodVolume+amount;\n\t\t\ttAmount=tAmount+amount;\n\t\t}\n\t\t_balance[msg.sender]+=tAmount;\n\t\temit Buy(msg.sender, tAmount);\t\t\n\t\temit Transfer(address(this), msg.sender, tAmount);\n\t}\n\n\n\t// entry to sell tokens\n\tfunction sell(uint _amount) public\n\t{\n\t\trequire(_balance[msg.sender] >= _amount);\n\n\t\tuint ethAm=0;\t\t//total \n\t\tuint tAmount=_amount;\t//for encounting\n//\t\taddress payble internal userAddr;\n\n\t\twhile (tAmount>=_currentPeriodVolume)\n\t\t{\n\t\t\tethAm=ethAm+_currentPeriodVolume*_currentPrice;\n\t\t\ttAmount=tAmount-_currentPeriodVolume;\n\t\t\t_initPeriod(true);\t//set new params from sell\n\t\t}\n\t\tif(tAmount>0)       //may be 0 \n\t\t{\n\t\t\t_currentPeriodVolume=_currentPeriodVolume-tAmount;\n\t\t\tethAm=ethAm+tAmount*_currentPrice;\n\t\t}\n\t\t\n//\t\tuserAddr=msg.sender;\n//\t\tuserAddr.transfer(ethAm);\n\t\t_balance[msg.sender] -= _amount;\n\t\tmsg.sender.transfer(ethAm);\n\t\temit Sell(msg.sender, _amount);\n\t\temit Transfer(msg.sender,address(this),_amount);\n\t}\n\n\n\n\t\n\t/**\n\t* Internal transfer, only can be called by this contract\n\t*/\n\tfunction _transfer(address _from, address _to, uint _value) internal \n\t{\n\t\t// Prevent transfer to 0x0 address\n\t\trequire(_to != address(0x0));\n\t\t\n\t\t\n\t\t// Check if the sender has enough\n\t\trequire(_balance[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(_balance[_to] + _value > _balance[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint256 previousBalances = _balance[_from] + _balance[_to];\n\t\t// Subtract from the sender\n\t\t_balance[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\t_balance[_to] += _value;\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\trequire(_balance[_from] + _balance[_to] == previousBalances);\n\t\n\t\temit Transfer(_from, _to, _value);\n\t}\n\n\t\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n\t{\n\t\trequire(_allowed[_from][msg.sender] >= _value);\n        \n\t\t_allowed[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\temit Approval(_from, msg.sender, _allowed[_from][msg.sender]);\n\t\treturn true;\n\t}\n\t\n\t\n\tfunction transfer(address _to, uint256 _value) public returns(bool) \n\t{\n\t\tif (_to==address(this))\t\t//sell token \n\t\t{\n\t\t\tsell(_value);\n\t\t\treturn true;\n\t\t}\n\n\t\tbytes memory empty;\n\t\tif(isContract(_to))\n\t\t{\n\t\t\tERC223Rtc receiver = ERC223Rtc(_to);\n\t\t\treceiver.tokenFallback(msg.sender, _value, empty);\n\t\t}\n\t\t\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\t\n\t\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool)\n\t{\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value))\n\t\t{\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\n\tfunction approve(address _spender, uint256 _value) public returns(bool)\n\t{\n\t\trequire(_spender != address(0));\n\t\t_allowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t//check the amount of tokens that an owner allowed to a spender\n\tfunction allowance(address owner, address spender) public view returns (uint256)\n\t{\n\t\treturn _allowed[owner][spender];\n\t}\n\n\t//balance of the specified address with interest\n\tfunction balanceOf(address _addr) public view returns(uint256)\n\t{\n\t\treturn _balance[_addr];\n\t}\n\n    \t// Function to access total supply of tokens .\n\tfunction totalSupply() public view returns(uint256) \n\t{\n\t\treturn _totalS;\n\t}\n\n\n\t// the name of the token.\n\tfunction name() public view returns (string memory)\n\t{\n\t\treturn _name;\n\t}\n\n\t//the symbol of the token\n\tfunction symbol() public view returns (string memory) \n\t{\n\t\treturn _symbol;\n\t}\n\n\t//number of decimals of the token\n\tfunction decimals() public view returns (uint8) \n\t{\n\t\treturn _decimals;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokeneRetrive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tFallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tRetrive\",\"type\":\"event\"}]",
  "bytecode": ""
}