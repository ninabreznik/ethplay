{
  "address": "0xa33e729bf4fdeb868b534e1f20523463d9c46bee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "ICOCoin",
  "contractName": "MyAdvancedToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-04\n*/\n\npragma solidity ^0.4.2;\ncontract owned {\n  address public owner;\n\n  function owned() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    if (msg.sender != owner) throw;\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner {\n    owner = newOwner;\n  }\n}\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract token {\n  /* Public variables of the token */\n  string public standard = 'Token 0.1';\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  uint256 public totalSupply;\n\n  /* This creates an array with all balances */\n  mapping (address => uint256) public balanceOf;\n  mapping (address => mapping (address => uint256)) public allowance;\n\n  /* This generates a public event on the blockchain that will notify clients */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /* Initializes contract with initial supply tokens to the creator of the contract */\n  function token(\n  uint256 initialSupply,\n  string tokenName,\n  uint8 decimalUnits,\n  string tokenSymbol\n  ) {\n    balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n    totalSupply = initialSupply;                        // Update total supply\n    name = tokenName;                                   // Set the name for display purposes\n    symbol = tokenSymbol;                               // Set the symbol for display purposes\n    decimals = decimalUnits;                            // Amount of decimals for display purposes\n  }\n\n  /* Send coins */\n  function transfer(address _to, uint256 _value) {\n    if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n    if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n    balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n    balanceOf[_to] += _value;                            // Add the same to the recipient\n    Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n  }\n\n  /* Allow another contract to spend some tokens in your behalf */\n  function approve(address _spender, uint256 _value)\n  returns (bool success) {\n    allowance[msg.sender][_spender] = _value;\n    return true;\n  }\n\n  /* Approve and then communicate the approved contract in a single tx */\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n  returns (bool success) {\n    tokenRecipient spender = tokenRecipient(_spender);\n    if (approve(_spender, _value)) {\n      spender.receiveApproval(msg.sender, _value, this, _extraData);\n      return true;\n    }\n  }\n\n  /* A contract attempts to get the coins */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n    if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n    if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n    balanceOf[_from] -= _value;                          // Subtract from the sender\n    balanceOf[_to] += _value;                            // Add the same to the recipient\n    allowance[_from][msg.sender] -= _value;\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /* This unnamed function is called whenever someone tries to send ether to it */\n  function () {\n    throw;     // Prevents accidental sending of ether\n  }\n}\n\ncontract MyAdvancedToken is owned, token {\n\n  uint256 public sellPrice;\n  uint256 public buyPrice;\n\n  mapping (address => bool) public frozenAccount;\n\n  /* This generates a public event on the blockchain that will notify clients */\n  event FrozenFunds(address target, bool frozen);\n\n  /* This notifies clients about the amount burnt */\n  event Burn(address indexed from, uint256 value);\n\n  /* Initializes contract with initial supply tokens to the creator of the contract */\n  function MyAdvancedToken(\n  uint256 initialSupply,\n  string tokenName,\n  uint8 decimalUnits,\n  string tokenSymbol\n  ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n\n  /* Send coins */\n  function transfer(address _to, uint256 _value) {\n    if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n    if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n    if (frozenAccount[msg.sender]) throw;                // Check if frozen\n    balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n    balanceOf[_to] += _value;                            // Add the same to the recipient\n    Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n  }\n\n\n  /* A contract attempts to get the coins */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    if (frozenAccount[_from]) throw;                        // Check if frozen\n    if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n    if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n    if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n    balanceOf[_from] -= _value;                          // Subtract from the sender\n    balanceOf[_to] += _value;                            // Add the same to the recipient\n    allowance[_from][msg.sender] -= _value;\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function mintToken(address target, uint256 mintedAmount) onlyOwner {\n    balanceOf[target] += mintedAmount;\n    totalSupply += mintedAmount;\n    Transfer(0, this, mintedAmount);\n    Transfer(this, target, mintedAmount);\n  }\n\n  function freezeAccount(address target, bool freeze) onlyOwner {\n    frozenAccount[target] = freeze;\n    FrozenFunds(target, freeze);\n  }\n\n  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n    sellPrice = newSellPrice;\n    buyPrice = newBuyPrice;\n  }\n\n  function buy() payable {\n    uint amount = msg.value / buyPrice;                // calculates the amount\n    if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\n    balanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance\n    balanceOf[this] -= amount;                         // subtracts amount from seller's balance\n    Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n  }\n\n  function sell(uint256 amount) {\n    if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\n    balanceOf[this] += amount;                         // adds the amount to owner's balance\n    balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance\n    if (!msg.sender.send(amount * sellPrice)) {        // sends ether to the seller. It's important\n      throw;                                         // to do this last to avoid recursion attacks\n    } else {\n      Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\n    }\n  }\n\n  function burn(uint256 amount) onlyOwner returns (bool success) {\n    if (balanceOf[msg.sender] < amount) throw;            // Check if the sender has enough\n    balanceOf[msg.sender] -= amount;                      // Subtract from the sender\n    totalSupply -= amount;                                // Updates totalSupply\n    Burn(msg.sender, amount);\n    return true;\n  }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60a0604052600960608190527f546f6b656e20302e31000000000000000000000000000000000000000000000060809081526200004091600191906200010a565b5034156200004a57fe5b6040516200111f3803806200111f833981016040908152815160208301519183015160608401519193928301929091015b838383835b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a033316600090815260066020908152604090912085905560058590558351620000d491600291908601906200010a565b508051620000ea9060039060208401906200010a565b506004805460ff191660ff84161790555b505050505b50505050620001b4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014d57805160ff19168380011785556200017d565b828001600101855582156200017d579182015b828111156200017d57825182559160200191906001019062000160565b5b506200018c92915062000190565b5090565b620001b191905b808211156200018c576000815560010162000197565b5090565b90565b610f5b80620001c46000396000f300606060405236156101255763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda7811461013b57806306fdde0314610153578063095ea7b3146101e357806318160ddd1461021657806323b872dd14610238578063313ce5671461027157806342966c68146102975780634b750334146102be5780635a3b7e42146102e057806370a082311461037057806379c650681461039e5780638620410b146103bf5780638da5cb5b146103e157806395d89b411461040d578063a6f2ae3a1461049d578063a9059cbb146104a7578063b414d4b6146104c8578063cae9ca51146104f8578063dd62ed3e1461056f578063e4849b32146105a3578063e724529c146105b8578063f2fde38b146105db575b341561012d57fe5b6101395b60006000fd5b565b005b341561014357fe5b6101396004356024356105f9565b005b341561015b57fe5b610163610625565b6040805160208082528351818301528351919283929083019185019080838382156101a9575b8051825260208311156101a957601f199092019160209182019101610189565b505050905090810190601f1680156101d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101eb57fe5b610202600160a060020a03600435166024356106b0565b604080519115158252519081900360200190f35b341561021e57fe5b6102266106e1565b60408051918252519081900360200190f35b341561024057fe5b610202600160a060020a03600435811690602435166044356106e7565b604080519115158252519081900360200190f35b341561027957fe5b61028161080b565b6040805160ff9092168252519081900360200190f35b341561029f57fe5b610202600435610814565b604080519115158252519081900360200190f35b34156102c657fe5b6102266108bf565b60408051918252519081900360200190f35b34156102e857fe5b6101636108c5565b6040805160208082528351818301528351919283929083019185019080838382156101a9575b8051825260208311156101a957601f199092019160209182019101610189565b505050905090810190601f1680156101d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037857fe5b610226600160a060020a0360043516610952565b60408051918252519081900360200190f35b34156103a657fe5b610139600160a060020a0360043516602435610964565b005b34156103c757fe5b610226610a0e565b60408051918252519081900360200190f35b34156103e957fe5b6103f1610a14565b60408051600160a060020a039092168252519081900360200190f35b341561041557fe5b610163610a23565b6040805160208082528351818301528351919283929083019185019080838382156101a9575b8051825260208311156101a957601f199092019160209182019101610189565b505050905090810190601f1680156101d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610139610ab1565b005b34156104af57fe5b610139600160a060020a0360043516602435610b47565b005b34156104d057fe5b610202600160a060020a0360043516610c17565b604080519115158252519081900360200190f35b341561050057fe5b604080516020600460443581810135601f8101849004840285018401909552848452610202948235600160a060020a0316946024803595606494929391909201918190840183828082843750949650610c2c95505050505050565b604080519115158252519081900360200190f35b341561057757fe5b610226600160a060020a0360043581169060243516610d66565b60408051918252519081900360200190f35b34156105ab57fe5b610139600435610d83565b005b34156105c057fe5b610139600160a060020a03600435166024351515610e44565b005b34156105e357fe5b610139600160a060020a0360043516610ec6565b005b60005433600160a060020a039081169116146106155760006000fd5b600882905560098190555b5b5050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106a85780601f1061067d576101008083540402835291602001916106a8565b820191906000526020600020905b81548152906001019060200180831161068b57829003601f168201915b505050505081565b600160a060020a03338116600090815260076020908152604080832093861683529290522081905560015b92915050565b60055481565b600160a060020a0383166000908152600a602052604081205460ff161561070e5760006000fd5b600160a060020a038416600090815260066020526040902054829010156107355760006000fd5b600160a060020a038316600090815260066020526040902054828101101561075d5760006000fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220548211156107915760006000fd5b600160a060020a0380851660008181526006602090815260408083208054889003905587851680845281842080548901905584845260078352818420339096168452948252918290208054879003905581518681529151600080516020610f108339815191529281900390910190a35060015b9392505050565b60045460ff1681565b6000805433600160a060020a039081169116146108315760006000fd5b600160a060020a033316600090815260066020526040902054829010156108585760006000fd5b600160a060020a03331660008181526006602090815260409182902080548690039055600580548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a25060015b5b919050565b60085481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a85780601f1061067d576101008083540402835291602001916106a8565b820191906000526020600020905b81548152906001019060200180831161068b57829003601f168201915b505050505081565b60066020526000908152604090205481565b60005433600160a060020a039081169116146109805760006000fd5b600160a060020a0380831660009081526006602090815260408083208054860190556005805486019055805185815290513090941693600080516020610f10833981519152929181900390910190a381600160a060020a031630600160a060020a0316600080516020610f10833981519152836040518082815260200191505060405180910390a35b5b5050565b60095481565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a85780601f1061067d576101008083540402835291602001916106a8565b820191906000526020600020905b81548152906001019060200180831161068b57829003601f168201915b505050505081565b600060095434811515610ac057fe5b600160a060020a033016600090815260066020526040902054919004915081901015610aec5760006000fd5b600160a060020a0333811660008181526006602090815260408083208054870190553090941680835291849020805486900390558351858152935192939192600080516020610f108339815191529281900390910190a35b50565b600160a060020a03331660009081526006602052604090205481901015610b6e5760006000fd5b600160a060020a0382166000908152600660205260409020548181011015610b965760006000fd5b600160a060020a0333166000908152600a602052604090205460ff1615610bbd5760006000fd5b600160a060020a0333811660008181526006602090815260408083208054879003905593861680835291849020805486019055835185815293519193600080516020610f10833981519152929081900390910190a35b5050565b600a6020526000908152604090205460ff1681565b600083610c3981856106b0565b15610d5d5780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360008314610cfd575b805182526020831115610cfd57601f199092019160209182019101610cdd565b505050905090810190601f168015610d295780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610d4757fe5b6102c65a03f11515610d5557fe5b505050600191505b5b509392505050565b600760209081526000928352604080842090915290825290205481565b600160a060020a03331660009081526006602052604090205481901015610daa5760006000fd5b600160a060020a03308116600090815260066020526040808220805485019055339092168082528282208054859003905560085492519092840280156108fc0292909190818181858888f193505050501515610e065760006000fd5b30600160a060020a031633600160a060020a0316600080516020610f10833981519152836040518082815260200191505060405180910390a35b5b50565b60005433600160a060020a03908116911614610e605760006000fd5b600160a060020a0382166000818152600a6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15b5b5050565b60005433600160a060020a03908116911614610ee25760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820b1b255a9d9307ce7aa965a267e8631d7f845c4c5acb0723b3815bce1323d253c00290000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000349434f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c2a2000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000349434f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c2a2000000000000000000000000000000000000000000000000000000000000"
}