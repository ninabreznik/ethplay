{
  "address": "0xf9005ecab0b976d0bd502147078274b83cc7c412",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MovieCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(owner, balance);\n  }\n\n}\n\n// File: contracts/MovieCoin.sol\n\ncontract MovieCoin is StandardToken, CanReclaimToken {\n    string constant public symbol = \"MOV\";\n    string constant public name = \"\\\"MovieCoin\\\" project utility token\";\n    uint8 constant public decimals = 18;\n    string constant public version = \"1.0\";\n\n    constructor() public {\n        totalSupply_ = 2000000000 * (10 ** uint256(decimals));\n\t\t\n\t\tbalances[0xfDC3881F0a0b7a086f8A9A461eB624c02622e9eB]=0.6e9*1e18;\n\t\tbalances[0xb1AcA46DE8bff379Aae7bBee4f675845dB81745d]=0.6e9*1e18;\n\t\tbalances[0x7b6293f76b1e85eab7671dBfe299757fD3CEF20D]=0.25e9*1e18;\n\t\tbalances[0x8cE01936208706468692a49a31fB571B1A61D509]=0.25e9*1e18;\n\t\tbalances[0x78091b201E26CDb3b2e8004Fb961c3FB1FF59d50]=0.2e9*1e18;\n\t\tbalances[0xef0eA48627d1b3d851998B2a13898E32f0470248]=0.05e9*1e18;\n\t\tbalances[0x150175f0D5c5A505bF4aF49a2DEdD68946E103fb]=0.05e9*1e18;\n\t\t\n\t\t\n        emit Transfer(address(0), msg.sender, totalSupply_);\n\t\temit Transfer(address(msg.sender), 0xfDC3881F0a0b7a086f8A9A461eB624c02622e9eB, 0.6e9*1e18);\n\t\temit Transfer(address(msg.sender), 0xb1AcA46DE8bff379Aae7bBee4f675845dB81745d, 0.6e9*1e18);\n\t\temit Transfer(address(msg.sender), 0x7b6293f76b1e85eab7671dBfe299757fD3CEF20D, 0.25e9*1e18);\n\t\temit Transfer(address(msg.sender), 0x8cE01936208706468692a49a31fB571B1A61D509, 0.25e9*1e18);\n\t\temit Transfer(address(msg.sender), 0x78091b201E26CDb3b2e8004Fb961c3FB1FF59d50, 0.2e9*1e18);\n\t\temit Transfer(address(msg.sender), 0xef0eA48627d1b3d851998B2a13898E32f0470248, 0.05e9*1e18);\n\t\temit Transfer(address(msg.sender), 0x150175f0D5c5A505bF4aF49a2DEdD68946E103fb, 0.05e9*1e18);\t\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060038054600160a060020a031916339081179091556b06765c793fa10079d00000006001819055600060208181526b01f04ef12cb04cf1580000007f8218a59707260f847c2131a6ec4cccc7a611d9f2680d4ea27ca3e978b1dcd12a8190557f2ed0be81fa9086792dc278fe57c23c5830f3e594a57f4b7520dc0b11ef5aea53556acecb8f27f4200f3a0000007f8767a1b7248b0839ec5be32c1460ec2e6d60355aa4878765c7d5ef4421e823b48190557fa0af03bc47580e01f94f31a75b819e8c7db8d3ffec2c3588a2500e74f3186e84556aa56fa5b99019a5c80000007f4bf3f59a8d72e144820d3bfa354401107b41e8fd3b9410e6ed62bcf2ee6fc2cf556a295be96e640669720000007fa98a4471f89a96457a9c0e6f04a10999faa5cbcd4ecba7d6b9745937e93c9e6e81905573150175f0d5c5a505bf4af49a2dedd68946e103fb83527fd2c967b322f04788a42ae5c608ecc8e1cfa2e7240379eb73938c8f7abb15c54b5560408051938452519192600080516020610f71833981519152929081900390910190a3604080516b01f04ef12cb04cf1580000008152905173fdc3881f0a0b7a086f8a9a461eb624c02622e9eb913391600080516020610f718339815191529181900360200190a3604080516b01f04ef12cb04cf1580000008152905173b1aca46de8bff379aae7bbee4f675845db81745d913391600080516020610f718339815191529181900360200190a3604080516acecb8f27f4200f3a00000081529051737b6293f76b1e85eab7671dbfe299757fd3cef20d913391600080516020610f718339815191529181900360200190a3604080516acecb8f27f4200f3a00000081529051738ce01936208706468692a49a31fb571b1a61d509913391600080516020610f718339815191529181900360200190a3604080516aa56fa5b99019a5c8000000815290517378091b201e26cdb3b2e8004fb961c3fb1ff59d50913391600080516020610f718339815191529181900360200190a3604080516a295be96e640669720000008152905173ef0ea48627d1b3d851998b2a13898e32f0470248913391600080516020610f718339815191529181900360200190a3604080516a295be96e640669720000008152905173150175f0d5c5a505bf4af49a2dedd68946e103fb913391600080516020610f718339815191529181900360200190a3610be68061038b6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806317ffc320146101ac57806318160ddd146101cf57806323b872dd146101f6578063313ce5671461022057806354fd4d501461024b578063661884631461026057806370a0823114610284578063715018a6146102a55780638da5cb5b146102ba57806395d89b41146102eb578063a9059cbb14610300578063d73dd62314610324578063dd62ed3e14610348578063f2fde38b1461036f575b600080fd5b3480156100f657600080fd5b506100ff610390565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a03600435166024356103f0565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101cd600160a060020a0360043516610456565b005b3480156101db57600080fd5b506101e4610524565b60408051918252519081900360200190f35b34801561020257600080fd5b50610198600160a060020a036004358116906024351660443561052a565b34801561022c57600080fd5b5061023561069f565b6040805160ff9092168252519081900360200190f35b34801561025757600080fd5b506100ff6106a4565b34801561026c57600080fd5b50610198600160a060020a03600435166024356106db565b34801561029057600080fd5b506101e4600160a060020a03600435166107ca565b3480156102b157600080fd5b506101cd6107e5565b3480156102c657600080fd5b506102cf610853565b60408051600160a060020a039092168252519081900360200190f35b3480156102f757600080fd5b506100ff610862565b34801561030c57600080fd5b50610198600160a060020a0360043516602435610899565b34801561033057600080fd5b50610198600160a060020a0360043516602435610978565b34801561035457600080fd5b506101e4600160a060020a0360043581169060243516610a11565b34801561037b57600080fd5b506101cd600160a060020a0360043516610a3c565b606060405190810160405280602181526020017f224d6f766965436f696e222070726f6a656374207574696c69747920746f6b6581526020017f6e0000000000000000000000000000000000000000000000000000000000000081525081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600354600090600160a060020a0316331461047057600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b505050506040513d60208110156104fb57600080fd5b505160035490915061052090600160a060020a0384811691168363ffffffff610a5f16565b5050565b60015490565b600160a060020a03831660009081526020819052604081205482111561054f57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561057f57600080fd5b600160a060020a038316151561059457600080fd5b600160a060020a0384166000908152602081905260409020546105bd908363ffffffff610b1716565b600160a060020a0380861660009081526020819052604080822093909355908516815220546105f2908363ffffffff610b2916565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610634908363ffffffff610b1716565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b60408051808201909152600381527f312e300000000000000000000000000000000000000000000000000000000000602082015281565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061072f57336000908152600260209081526040808320600160a060020a0388168452909152812055610764565b61073f818463ffffffff610b1716565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146107fc57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a031681565b60408051808201909152600381527f4d4f560000000000000000000000000000000000000000000000000000000000602082015281565b336000908152602081905260408120548211156108b557600080fd5b600160a060020a03831615156108ca57600080fd5b336000908152602081905260409020546108ea908363ffffffff610b1716565b3360009081526020819052604080822092909255600160a060020a0385168152205461091c908363ffffffff610b2916565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546109ac908363ffffffff610b2916565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610a5357600080fd5b610a5c81610b3c565b50565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610adb57600080fd5b505af1158015610aef573d6000803e3d6000fd5b505050506040513d6020811015610b0557600080fd5b50511515610b1257600080fd5b505050565b600082821115610b2357fe5b50900390565b81810182811015610b3657fe5b92915050565b600160a060020a0381161515610b5157600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582069ba9f78468c629d6a4cf82d055dc8475a0f0ea7ee52bcb21bb918dd4de5fd400029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}