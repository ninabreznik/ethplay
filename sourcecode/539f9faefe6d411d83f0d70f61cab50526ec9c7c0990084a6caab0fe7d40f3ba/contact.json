{
  "address": "0x399a0e6fbeb3d74c85357439f4c8aed9678a5cbf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DisledgerToken",
  "contractName": "DISLEDGERDCL",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-09\n*/\n\npragma solidity ^0.4.11;\n\ninterface IERC20{\n   function totalSupply() constant returns (uint256 totalSupply);\n   function balanceOf(address _owner) constant returns (uint256 balance);\n   function transfer(address _to, uint256 _value) returns (bool success);\n   function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n   function approve(address _spender, uint256 _value) returns (bool success);\n   function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n   event Transfer(address indexed _from, address indexed _to, uint256 _value);\n   event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\npragma solidity ^0.4.11;\n\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n   uint256 c = a * b;\n   assert(a == 0 || c / a == b);\n   return c;\n }\n\n function div(uint256 a, uint256 b) internal constant returns (uint256) {\n   // assert(b > 0); // Solidity automatically throws when dividing by 0\n   uint256 c = a / b;\n   // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n   return c;\n }\n\n function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n   assert(b <= a);\n   return a - b;\n }\n\n function add(uint256 a, uint256 b) internal constant returns (uint256) {\n   uint256 c = a + b;\n   assert(c >= a);\n   return c;\n }\n}\n\npragma solidity ^0.4.11;\n\n// DisLedger Intellectual Property License Agreement is incorporated by reference and is available in Exhibit A of https://www.disledger.com/DisLedger_PublicSale_TPA.pdf\n\n\n\n\n\n    contract owned {\n        address public owner;\n\n        function owned() {\n            owner = msg.sender;\n        }\n\n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n\n        function transferOwnership(address newOwner) onlyOwner {\n            owner = newOwner;\n        }\n    }\n    \ncontract DISLEDGERDCL is owned {\n   \n   using SafeMath for uint256;\n   \n   uint public constant _totalSupply = 30000000000;\n   \n   string public constant symbol = \"DCL\";\n   string public constant name = \"DISLEDGER\";\n   uint8 public constant decimals = 3;\n\n   mapping(address => uint256) balances;\n   mapping(address => mapping (address => uint256)) allowed;\n   \n   function DISLEDGERDCL(){\n       balances[msg.sender] = _totalSupply;\n   }\n   function totalSupply() constant returns (uint256 totalSupply){\n       return _totalSupply;\n   }\n   function balanceOf(address _owner) constant returns (uint256 balance){\n       return balances[_owner];\n   }\n   function transfer(address _to, uint256 _value) returns (bool success){\n       require(\n           balances[msg.sender] >= _value\n           && _value > 0\n       );\n           balances[msg.sender] = balances[msg.sender].sub(_value);\n           balances[_to] = balances[_to].add(_value);\n           Transfer(msg.sender, _to, _value);\n           return true;\n   }\n   function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n       require(\n           allowed[_from][msg.sender] >= _value\n           && balances [_from] >= _value\n           && _value > 0\n       );\n       balances[_from] = balances[_from].sub(_value);\n       balances[_to] = balances[_to].add(_value);\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n       Transfer(_from, _to, _value);\n       return true;\n   }\n   function approve(address _spender, uint256 _value) returns (bool success){\n       allowed[msg.sender][_spender] = _value;\n       Approval(msg.sender, _spender, _value);\n       return true;\n   }\n   function allowance(address _owner, address _spender) constant returns (uint256 remaining){\n       return allowed[_owner][_spender];\n   }\n   event Transfer(address indexed _from, address indexed _to, uint256 _value);\n   event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506406fc23ac00600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc7806100a76000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014d57806318160ddd146101a757806323b872dd146101d0578063313ce567146102495780633eaaf86b1461027857806370a08231146102a15780638da5cb5b146102ee57806395d89b4114610343578063a9059cbb146103d1578063dd62ed3e1461042b578063f2fde38b14610497575b600080fd5b34156100ca57600080fd5b6100d26104d0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101125780820151818401526020810190506100f7565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015857600080fd5b61018d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610509565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ba6105fb565b6040518082815260200191505060405180910390f35b34156101db57600080fd5b61022f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610608565b604051808215151515815260200191505060405180910390f35b341561025457600080fd5b61025c610995565b604051808260ff1660ff16815260200191505060405180910390f35b341561028357600080fd5b61028b61099a565b6040518082815260200191505060405180910390f35b34156102ac57600080fd5b6102d8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109a3565b6040518082815260200191505060405180910390f35b34156102f957600080fd5b6103016109ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034e57600080fd5b610356610a11565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039657808201518184015260208101905061037b565b50505050905090810190601f1680156103c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103dc57600080fd5b610411600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a4a565b604051808215151515815260200191505060405180910390f35b341561043657600080fd5b610481600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c3f565b6040518082815260200191505060405180910390f35b34156104a257600080fd5b6104ce600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cc6565b005b6040805190810160405280600981526020017f4449534c4544474552000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006406fc23ac00905090565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156106d5575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156106e15750600082115b15156106ec57600080fd5b61073e82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d6490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107d382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d7d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108a582600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d6490919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600381565b6406fc23ac0081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f44434c000000000000000000000000000000000000000000000000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610a9b5750600082115b1515610aa657600080fd5b610af882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d6490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b8d82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d7d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d2157600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515610d7257fe5b818303905092915050565b6000808284019050838110151515610d9157fe5b80915050929150505600a165627a7a723058204171f0eee4029190a0fccb7ffc911794deab1c12d611156e7a4234bf65a94b160029"
}