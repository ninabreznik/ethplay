{
  "address": "0x673b6f0c00a4700b7616808adb380ac2ac91ebda",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ServiceRegistry",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.5.1;\n\ncontract LockRequestable {\n\n        // MEMBERS\n        /// @notice  the count of all invocations of `generateLockId`.\n        uint256 public lockRequestCount;\n\n        constructor() public {\n                lockRequestCount = 0;\n        }\n\n        // FUNCTIONS\n        /** @notice  Returns a fresh unique identifier.\n            *\n            * @dev the generation scheme uses three components.\n            * First, the blockhash of the previous block.\n            * Second, the deployed address.\n            * Third, the next value of the counter.\n            * This ensure that identifiers are unique across all contracts\n            * following this scheme, and that future identifiers are\n            * unpredictable.\n            *\n            * @return a 32-byte unique identifier.\n            */\n        function generateLockId() internal returns (bytes32 lockId) {\n                return keccak256(\n                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)\n                );\n        }\n}\n\ncontract CustodianUpgradeable is LockRequestable {\n\n        // TYPES\n        /// @dev  The struct type for pending custodian changes.\n        struct CustodianChangeRequest {\n                address proposedNew;\n        }\n\n        // MEMBERS\n        /// @dev  The address of the account or contract that acts as the custodian.\n        address public custodian;\n\n        /// @dev  The map of lock ids to pending custodian changes.\n        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\n\n        constructor(address _custodian) public LockRequestable() {\n                custodian = _custodian;\n        }\n\n        // MODIFIERS\n        modifier onlyCustodian {\n                require(msg.sender == custodian);\n                _;\n        }\n\n        /** @notice  Requests a change of the custodian associated with this contract.\n            *\n            * @dev  Returns a unique lock id associated with the request.\n            * Anyone can call this function, but confirming the request is authorized\n            * by the custodian.\n            *\n            * @param  _proposedCustodian  The address of the new custodian.\n            * @return  lockId  A unique identifier for this request.\n            */\n        function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\n                require(_proposedCustodian != address(0));\n\n                lockId = generateLockId();\n\n                custodianChangeReqs[lockId] = CustodianChangeRequest({\n                        proposedNew: _proposedCustodian\n                });\n\n                emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\n        }\n\n        /** @notice  Confirms a pending change of the custodian associated with this contract.\n            *\n            * @dev  When called by the current custodian with a lock id associated with a\n            * pending custodian change, the `address custodian` member will be updated with the\n            * requested address.\n            *\n            * @param  _lockId  The identifier of a pending change request.\n            */\n        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\n                custodian = getCustodianChangeReq(_lockId);\n\n                delete custodianChangeReqs[_lockId];\n\n                emit CustodianChangeConfirmed(_lockId, custodian);\n        }\n\n        // PRIVATE FUNCTIONS\n        function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\n                CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\n\n                // reject ‘null’ results from the map lookup\n                // this can only be the case if an unknown `_lockId` is received\n                require(changeRequest.proposedNew != address(0));\n\n                return changeRequest.proposedNew;\n        }\n\n        /// @dev  Emitted by successful `requestCustodianChange` calls.\n        event CustodianChangeRequested(\n                bytes32 _lockId,\n                address _msgSender,\n                address _proposedCustodian\n        );\n\n        /// @dev Emitted by successful `confirmCustodianChange` calls.\n        event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\n}\n\ncontract ServiceRegistry is CustodianUpgradeable {\n    mapping (string => address) services;\n\n    event ServiceReplaced(string indexed _name, address _oldAddr, address _newAddr);\n\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\n    }\n\n    function replaceService(string calldata _name, address _newAddr) external onlyCustodian withContract(_newAddr) {\n        address _prevAddr = services[_name];\n        services[_name] = _newAddr;\n        emit ServiceReplaced(_name, _prevAddr, _newAddr);\n    }\n\n    function getService(string memory _name) public view returns (address) {\n        return services[_name];\n    }\n\n    modifier withContract(address _addr) {\n        uint length;\n        assembly { length := extcodesize(_addr) }\n        require(length > 0);\n        _;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"replaceService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getService\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"ServiceReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610b108339810180604052602081101561003057600080fd5b8101908080519060200190929190505050806000808190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610a758061009b6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063536236171161005b5780635362361714610152578063794758be146101eb578063cb81fecf146102e6578063cf6e4488146103045761007d565b806315b2108214610082578063375b74c3146100da5780633a8343ee14610124575b600080fd5b6100c46004803603602081101561009857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610372565b6040518082815260200191505060405180910390f35b6100e26104dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101506004803603602081101561013a57600080fd5b8101908080359060200190929190505050610503565b005b6101e96004803603604081101561016857600080fd5b810190808035906020019064010000000081111561018557600080fd5b82018360208201111561019757600080fd5b803590602001918460018302840111640100000000831117156101b957600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610673565b005b6102a46004803603602081101561020157600080fd5b810190808035906020019064010000000081111561021e57600080fd5b82018360208201111561023057600080fd5b8035906020019184600183028401116401000000008311171561025257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610851565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102ee6108e4565b6040518082815260200191505060405180910390f35b6103306004803603602081101561031a57600080fd5b81019080803590602001909291905050506108ea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156103ad57600080fd5b6103b5610928565b905060405180602001604052808373ffffffffffffffffffffffffffffffffffffffff168152506002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fd76fc900a7e1a6fcf11d54b7ba943918df6c53a3128140658c389b3da1e997ba813384604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461055d57600080fd5b610566816109a6565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060026000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f9a99272c0f6b7a30ef9e76e684a7cd408bfd4f11a72f36a8e276253c920e442d81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cd57600080fd5b806000813b9050600081116106e157600080fd5b600060038686604051808383808284378083019250505092505050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508360038787604051808383808284378083019250505092505050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858560405180838380828437808301925050509250505060405180910390207f1d79e9fb6955b0da2ca8e3a46f0165dec2c89500aff1d9f904bf039bc4b397ff8286604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a2505050505050565b60006003826040518082805190602001908083835b602083106108895780518252602082019150602081019050602083039250610866565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60005481565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b60006001430340306000808154600101919050819055604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001935050505060405160208183030381529060405280519060200120905090565b600080600260008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a1c57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505091905056fea165627a7a723058206cd13f20c1c552eb0525da63a27bc58dadcfc7d38569062f6b429a29437f77ab002900000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f",
  "constructorArguments": "00000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f"
}