{
  "address": "0x77fb56889bde82e5ca756e84dae7b3d6c955d085",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "exForward",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-01\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20 {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract exForward{\n    address public owner;\n    event eth_deposit(address sender, uint amount);\n    event erc_deposit(address from, address ctr, address to, uint amount);\n    constructor() public {\n        owner = 0x50D569AF6610C017DDE11A7F66DF3FE831F989FA;\n    }\n    function trToken(address tokenContract, uint tokens) public{\n        ERC20(tokenContract).transfer(owner, tokens);\n        emit erc_deposit(msg.sender, tokenContract, owner, tokens);\n    }\n    function() payable public {\n        uint256 ethAmount = (msg.value * 8) / 10;\n        owner.transfer(ethAmount);\n        emit eth_deposit(msg.sender,msg.value);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319167350d569af6610c017dde11a7f66df3fe831f989fa17905561029d806100466000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b81146100d7578063ce7be2d614610115575b60008054604051600a34600802049273ffffffffffffffffffffffffffffffffffffffff909216916108fc841502918491818181858888f19350505050158015610099573d6000803e3d6000fd5b506040805133815234602082015281517f472bccb9396df361f6a549719bf654b921fe12fbf49168a6a314cf71ac2faf58929181900390910190a150005b3480156100e357600080fd5b506100ec610148565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561012157600080fd5b5061014673ffffffffffffffffffffffffffffffffffffffff60043516602435610164565b005b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60008054604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810185905290519185169263a9059cbb926044808401936020939083900390910190829087803b1580156101e157600080fd5b505af11580156101f5573d6000803e3d6000fd5b505050506040513d602081101561020b57600080fd5b50506000546040805133815273ffffffffffffffffffffffffffffffffffffffff80861660208301529092168282015260608201839052517fa4a78035a9350286d6a0665d9bd4e141f41f3513d3fcdbcef369cef00bf0fb919181900360800190a150505600a165627a7a7230582040675bd7e965c3e6a34ba924a3817be887f1454a55e8d56dbed16c87caf56d2a0029"
}