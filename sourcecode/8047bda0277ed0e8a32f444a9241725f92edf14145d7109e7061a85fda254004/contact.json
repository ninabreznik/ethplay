{
  "address": "0x7906cdac57b29ef289c4887eb7811c2a641a2b75",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Sale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable  {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract NIX is StandardToken, Pausable {\n\n    string public name; \n    string public symbol;\n    uint8 public decimals;\n    //token available for reserved\n    uint256 public TOKEN_RESERVED = 35e5 * 10 **18;\n    uint256 public TOKEN_FOUNDERS_TEAMS = 525e4 * 10 **18;\n    uint256 public TOKEN_ADVISORS = 175e4 * 10 **18;\n    uint256 public TOKEN_MARKETING = 175e3 * 10 **18;\n\n   constructor () public {\n        name = \"Encrypt Index\";\n        symbol = \"NIX\";\n        decimals = 18;\n        totalSupply_ = 35e6 * 10  **  uint256(decimals); //35 millions\n        balances[owner] = totalSupply_;\n   }\n}\n\ncontract Sale is NIX{\n\n    using SafeMath for uint256;\n    // To indicate Sale status; saleStatus=0 => sale not started; saleStatus=1=> sale started; saleStatus=2=> sale finished\n    uint256 public saleStatus; \n    // To store sale type; saleType=0 => private sale ,saleType=1 => PreSale; saleType=2 => public sale\n    uint256 public saleType; \n    //price of token in cents\n    uint256 public tokenCostPrivate = 8; //5 cents i.e., .5$\n    //price of token in cents\n    uint256 public tokenCostPre = 9; //5 cents i.e., .5$\n    //price of token in cents\n    uint256 public tokenCostPublic = 10; //5 cents i.e., .5$\n    //1 eth = usd in cents, eg: 1 eth = 107.91$ so, 1 eth = =107,91 cents\n    uint256 public ETH_USD;\n    //min contribution \n    uint256 public minContribution = 1000000; //10000,00 cents i.e., 10000.00$\n    //coinbase account\n    address public wallet;\n    //soft cap\n    uint256 public softCap = 500000000; //$5 million\n    //hard cap\n    uint256 public hardCap = 1500000000; //$15 million\n    //store total wei raised\n    uint256 public weiRaised;\n    //initially whitelisting is false  \n    bool public whitelistingEnabled = false;\n\n    //Structure to store token sent and wei received by the buyer of tokens\n    struct Investor {\n        uint256 weiReceived;\n        uint256 tokenSent;\n    }\n\n    //investors indexed by their ETH address\n    mapping(address => Investor) public investors;\n    //whitelisting address\n    mapping (address => bool) public whitelisted;\n\n    \n    /*\n    * constructor invoked with wallet and eth_usd parameter\n    */\n    constructor (address _wallet, uint256 _ETH_USD) public{\n      require(_wallet != address(0x0), \"wallet address must not be zero\");\n      wallet = _wallet;\n      ETH_USD = _ETH_USD;\n    }\n    \n    /*\n    * fallback function to create tokens\n    */\n    function () external payable{\n        createTokens(msg.sender);\n    }\n\n    /*\n    * function to change wallet\n    */\n    function changeWallet(address _wallet) public onlyOwner{\n      require(_wallet != address(0x0), \"wallet address must not be zero\");\n      wallet = _wallet;\n    }\n\n    /*\n    * drain ethers from contract\n    */\n    function drain() external onlyOwner{\n      wallet.transfer(address(this).balance);\n    }\n\n    /*\n    * function to change whitelisting status\n    */\n    function toggleWhitelist() public onlyOwner{\n        whitelistingEnabled = !whitelistingEnabled;\n    }\n\n    /*\n    * function to change eth usd rate\n    */\n    function changeETH_USD(uint256 _ETH_USD) public onlyOwner{\n        ETH_USD = _ETH_USD;\n    }\n\n    /*\n    * function to add user to whitelist\n    */\n    function whitelistAddress(address investor) public onlyOwner{\n        require(!whitelisted[investor], \"users is already whitelisted\");\n        whitelisted[investor] = true;\n    }\n\n    /*\n    * To start private sale\n    */\n    function startPrivateSale(uint256 _ETH_USD) public onlyOwner{\n      require (saleStatus == 0);\n      ETH_USD = _ETH_USD;\n      saleStatus = 1;\n    }\n\n    /*\n    * To start pre sale\n    */\n    function startPreSale(uint256 _ETH_USD) public onlyOwner{\n      require (saleStatus == 1 && saleType == 0);\n      ETH_USD = _ETH_USD;\n      saleType = 1;\n    }\n\n    /*\n    * To start public sale\n    */\n    function startPublicSale(uint256 _ETH_USD) public onlyOwner{\n      require (saleStatus == 1 && saleType == 1);\n      ETH_USD = _ETH_USD;\n      saleType = 2;\n    }\n\n    /**\n    * Set new minimum contribution\n    * _minContribution minimum contribution in cents\n    *\n    */\n    function changeMinContribution(uint256 _minContribution) public onlyOwner {\n        require(_minContribution > 0, \"min contribution should be greater than 0\");\n        minContribution = _minContribution;\n    }\n\n    /*\n    * To create NIX Token and assign to transaction initiator\n    */\n    function createTokens(address _beneficiary) internal {\n       _preValidatePurchase(_beneficiary, msg.value);\n      //Calculate NIX Token to send\n      uint256 totalNumberOfTokenTransferred = _getTokenAmount(msg.value);\n\n      //transfer tokens to investor\n      transferTokens(_beneficiary, totalNumberOfTokenTransferred);\n\n      //initializing structure for the address of the beneficiary\n      Investor storage _investor = investors[_beneficiary];\n      //Update investor's balance\n      _investor.tokenSent = _investor.tokenSent.add(totalNumberOfTokenTransferred);\n      _investor.weiReceived = _investor.weiReceived.add(msg.value);\n      weiRaised = weiRaised.add(msg.value);\n      wallet.transfer(msg.value);\n    }\n    \n    function transferTokens(address toAddr, uint256 value) private{\n        balances[owner] = balances[owner].sub(value);\n        balances[toAddr] = balances[toAddr].add(value);\n        emit Transfer(owner, toAddr, value);\n    }\n\n    /**\n    * function to create number of tokens to be transferred\n    *\n    */\n\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n      if(saleType == 0){\n        return (_weiAmount.mul(ETH_USD).mul(100)).div((tokenCostPrivate).mul(80)); // 20% discount\n      }else if(saleType == 1){\n        return (_weiAmount.mul(ETH_USD).mul(100)).div((tokenCostPrivate).mul(90)); // 10% discount\n      }else if (saleType == 2){\n        return (_weiAmount.mul(ETH_USD).mul(100)).div((tokenCostPrivate).mul(95)); //5% discount\n      }\n    }\n\n    /**\n    * validatess sale requirement before creating tokens\n    *\n    */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) whenNotPaused internal view{\n      require(_beneficiary != address(0), \"beneficiary address must not be zero\");\n      require(whitelistingEnabled == false || whitelisted[_beneficiary],\n                \"whitelisting should be disabled or users should be whitelisted\");\n      //Make sure Sale is running\n      assert(saleStatus == 1);\n      require(_weiAmount >= getMinContributionInWei(), \"amount is less than min contribution\" );\n    }\n\n    /**\n    * gives minimum contribution in wei\n    * the min contribution value in wei\n    *\n    */\n    function getMinContributionInWei() public view returns(uint256){\n      return (minContribution.mul(1e18)).div(ETH_USD);\n    }\n\n    /**\n    * gives usd raised based on wei raised\n    * the usd value in cents\n    *\n    */\n    function usdRaised() public view returns (uint256) {\n      return weiRaised.mul(ETH_USD).div(1e18);\n    }\n\n    /**\n    * tell soft cap reached or not\n    * bool true=> if reached\n    *\n    */\n    function isSoftCapReached() public view returns (bool) {\n      if(usdRaised() >= softCap){\n        return true;\n      }\n    }\n\n    /**\n    * tell hard cap reached or not\n    * bool true=> if reached\n    *\n    */\n    function isHardCapReached() public view returns (bool) {\n      if(usdRaised() >= hardCap){\n        return true;\n      }\n    }\n\n}",
  "bytecode": "60806040526000600360146101000a81548160ff0219169083151502179055506a02e5276153cd3fb38000006007556a0457bb11fdb3df8d4000006008556a017293b0a9e69fd9c0000060095569250ec4ddca432f600000600a556008600d556009600e55600a600f55620f4240601155631dcd65006013556359682f006014556000601660006101000a81548160ff021916908315150217905550348015620000a857600080fd5b5060405160408062003313833981018060405281019080805190602001909291908051906020019092919050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600d81526020017f456e637279707420496e6465780000000000000000000000000000000000000081525060049080519060200190620001649291906200034e565b506040805190810160405280600381526020017f4e4958000000000000000000000000000000000000000000000000000000000081525060059080519060200190620001b29291906200034e565b506012600660006101000a81548160ff021916908360ff160217905550600660009054906101000a900460ff1660ff16600a0a6302160ec002600181905550600154600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620002fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f77616c6c65742061646472657373206d757374206e6f74206265207a65726f0081525060200191505060405180910390fd5b81601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806010819055505050620003fd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039157805160ff1916838001178555620003c2565b82800160010185558215620003c2579182015b82811115620003c1578251825591602001919060010190620003a4565b5b509050620003d19190620003d5565b5090565b620003fa91905b80821115620003f6576000816000905550600101620003dc565b5090565b90565b612f06806200040d6000396000f300608060405260043610610246576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610251578063095ea7b3146102e157806318160ddd1461034657806323b872dd14610371578063313ce567146103f65780633f4ba83a146104275780634042b66f1461043e5780634156658514610469578063521eb273146104ac5780635654e122146105035780635b0c29eb1461052e5780635b91c5101461055d5780635bcc79281461058a5780635c5e6ae2146105b55780635c975abb146105e05780636260f55b1461060f578063661884631461063a57806366ef77ed1461069f578063688d3922146106cc57806368e18bd2146106fb5780636f7bc9be1461072657806370a0823114610784578063715018a6146107db57806374817d9b146107f25780637e15144b1461081f57806380d32f85146108365780638456cb59146108655780638da5cb5b1461087c5780638ecf2875146108d3578063906a26e0146108fe57806395d89b41146109295780639890220b146109b957806398b9a2dc146109d0578063a089de2f14610a13578063a167271714610a40578063a813fcb814610a6b578063a9059cbb14610a96578063aaffadf314610afb578063b3b81d3814610b26578063be404afa14610b53578063cc2c15f514610b7e578063d73dd62314610ba9578063d936547e14610c0e578063dd62ed3e14610c69578063eadd94ec14610ce0578063f2fde38b14610d0b578063f9020e3314610d4e578063fb86a40414610d79575b61024f33610da4565b005b34801561025d57600080fd5b50610266610ece565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a657808201518184015260208101905061028b565b50505050905090810190601f1680156102d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ed57600080fd5b5061032c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6c565b604051808215151515815260200191505060405180910390f35b34801561035257600080fd5b5061035b61105e565b6040518082815260200191505060405180910390f35b34801561037d57600080fd5b506103dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611068565b604051808215151515815260200191505060405180910390f35b34801561040257600080fd5b5061040b611423565b604051808260ff1660ff16815260200191505060405180910390f35b34801561043357600080fd5b5061043c611436565b005b34801561044a57600080fd5b506104536114f6565b6040518082815260200191505060405180910390f35b34801561047557600080fd5b506104aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114fc565b005b3480156104b857600080fd5b506104c1611675565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050f57600080fd5b5061051861169b565b6040518082815260200191505060405180910390f35b34801561053a57600080fd5b506105436116a1565b604051808215151515815260200191505060405180910390f35b34801561056957600080fd5b50610588600480360381019080803590602001909291905050506116b4565b005b34801561059657600080fd5b5061059f611741565b6040518082815260200191505060405180910390f35b3480156105c157600080fd5b506105ca611747565b6040518082815260200191505060405180910390f35b3480156105ec57600080fd5b506105f561174d565b604051808215151515815260200191505060405180910390f35b34801561061b57600080fd5b50610624611760565b6040518082815260200191505060405180910390f35b34801561064657600080fd5b50610685600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611766565b604051808215151515815260200191505060405180910390f35b3480156106ab57600080fd5b506106ca600480360381019080803590602001909291905050506119f8565b005b3480156106d857600080fd5b506106e1611a5e565b604051808215151515815260200191505060405180910390f35b34801561070757600080fd5b50610710611a7f565b6040518082815260200191505060405180910390f35b34801561073257600080fd5b50610767600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a85565b604051808381526020018281526020019250505060405180910390f35b34801561079057600080fd5b506107c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aa9565b6040518082815260200191505060405180910390f35b3480156107e757600080fd5b506107f0611af1565b005b3480156107fe57600080fd5b5061081d60048036038101908080359060200190929190505050611bf6565b005b34801561082b57600080fd5b50610834611c83565b005b34801561084257600080fd5b5061084b611d0b565b604051808215151515815260200191505060405180910390f35b34801561087157600080fd5b5061087a611d2c565b005b34801561088857600080fd5b50610891611ded565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108df57600080fd5b506108e8611e13565b6040518082815260200191505060405180910390f35b34801561090a57600080fd5b50610913611e19565b6040518082815260200191505060405180910390f35b34801561093557600080fd5b5061093e611e1f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561097e578082015181840152602081019050610963565b50505050905090810190601f1680156109ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109c557600080fd5b506109ce611ebd565b005b3480156109dc57600080fd5b50610a11600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f9b565b005b348015610a1f57600080fd5b50610a3e600480360381019080803590602001909291905050506120e0565b005b348015610a4c57600080fd5b50610a5561215f565b6040518082815260200191505060405180910390f35b348015610a7757600080fd5b50610a80612197565b6040518082815260200191505060405180910390f35b348015610aa257600080fd5b50610ae1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061219d565b604051808215151515815260200191505060405180910390f35b348015610b0757600080fd5b50610b10612334565b6040518082815260200191505060405180910390f35b348015610b3257600080fd5b50610b516004803603810190808035906020019092919050505061233a565b005b348015610b5f57600080fd5b50610b6861243e565b6040518082815260200191505060405180910390f35b348015610b8a57600080fd5b50610b93612444565b6040518082815260200191505060405180910390f35b348015610bb557600080fd5b50610bf4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061244a565b604051808215151515815260200191505060405180910390f35b348015610c1a57600080fd5b50610c4f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612646565b604051808215151515815260200191505060405180910390f35b348015610c7557600080fd5b50610cca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612666565b6040518082815260200191505060405180910390f35b348015610cec57600080fd5b50610cf56126ed565b6040518082815260200191505060405180910390f35b348015610d1757600080fd5b50610d4c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612725565b005b348015610d5a57600080fd5b50610d6361278d565b6040518082815260200191505060405180910390f35b348015610d8557600080fd5b50610d8e612793565b6040518082815260200191505060405180910390f35b600080610db18334612799565b610dba34612a3c565b9150610dc68383612b66565b601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610e1e828260010154612d5b90919063ffffffff16565b8160010181905550610e3d348260000154612d5b90919063ffffffff16565b8160000181905550610e5a34601554612d5b90919063ffffffff16565b601581905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610ec8573d6000803e3d6000fd5b50505050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f645780601f10610f3957610100808354040283529160200191610f64565b820191906000526020600020905b815481529060010190602001808311610f4757829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156110b757600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561114257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561117e57600080fd5b6111cf826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7790919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611262826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d5b90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061133382600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600660009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561149257600080fd5b600360149054906101000a900460ff1615156114ad57600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60155481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561155857600080fd5b601860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561161a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f757365727320697320616c72656164792077686974656c69737465640000000081525060200191505060405180910390fd5b6001601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b601660009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171057600080fd5b6001600b5414801561172457506000600c54145b151561172f57600080fd5b806010819055506001600c8190555050565b600c5481565b60075481565b600360149054906101000a900460ff1681565b60105481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515611878576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061190c565b61188b8382612d7790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a5457600080fd5b8060108190555050565b6000601454611a6b6126ed565b101515611a7b5760019050611a7c565b5b90565b60085481565b60176020528060005260406000206000915090508060000154908060010154905082565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4d57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5257600080fd5b6001600b54148015611c6657506001600c54145b1515611c7157600080fd5b806010819055506002600c8190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cdf57600080fd5b601660009054906101000a900460ff1615601660006101000a81548160ff021916908315150217905550565b6000601354611d186126ed565b101515611d285760019050611d29565b5b90565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d8857600080fd5b600360149054906101000a900460ff16151515611da457600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b60135481565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611eb55780601f10611e8a57610100808354040283529160200191611eb5565b820191906000526020600020905b815481529060010190602001808311611e9857829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f1957600080fd5b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611f98573d6000803e3d6000fd5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ff757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561209c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f77616c6c65742061646472657373206d757374206e6f74206265207a65726f0081525060200191505060405180910390fd5b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561213c57600080fd5b6000600b5414151561214d57600080fd5b806010819055506001600b8190555050565b6000612192601054612184670de0b6b3a7640000601154612d9090919063ffffffff16565b612dc890919063ffffffff16565b905090565b600d5481565b60006121f0826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7790919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612283826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d5b90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60115481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561239657600080fd5b600081111515612434576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f6d696e20636f6e747269627574696f6e2073686f756c6420626520677265617481526020017f6572207468616e2030000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8060118190555050565b600a5481565b60095481565b60006124db82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d5b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60186020528060005260406000206000915054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000612720670de0b6b3a7640000612712601054601554612d9090919063ffffffff16565b612dc890919063ffffffff16565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561278157600080fd5b61278a81612dde565b50565b600b5481565b60145481565b600360149054906101000a900460ff161515156127b557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612880576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f62656e65666963696172792061646472657373206d757374206e6f742062652081526020017f7a65726f0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60001515601660009054906101000a900460ff16151514806128eb5750601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e8152602001807f77686974656c697374696e672073686f756c642062652064697361626c65642081526020017f6f722075736572732073686f756c642062652077686974656c6973746564000081525060400191505060405180910390fd5b6001600b5414151561299357fe5b61299b61215f565b8110151515612a38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f616d6f756e74206973206c657373207468616e206d696e20636f6e747269627581526020017f74696f6e0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5050565b600080600c541415612a9e57612a97612a616050600d54612d9090919063ffffffff16565b612a896064612a7b60105487612d9090919063ffffffff16565b612d9090919063ffffffff16565b612dc890919063ffffffff16565b9050612b61565b6001600c541415612aff57612af8612ac2605a600d54612d9090919063ffffffff16565b612aea6064612adc60105487612d9090919063ffffffff16565b612d9090919063ffffffff16565b612dc890919063ffffffff16565b9050612b61565b6002600c541415612b6057612b59612b23605f600d54612d9090919063ffffffff16565b612b4b6064612b3d60105487612d9090919063ffffffff16565b612d9090919063ffffffff16565b612dc890919063ffffffff16565b9050612b61565b5b919050565b612bd981600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7790919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c8e816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d5b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008183019050828110151515612d6e57fe5b80905092915050565b6000828211151515612d8557fe5b818303905092915050565b600080831415612da35760009050612dc2565b8183029050818382811515612db457fe5b04141515612dbe57fe5b8090505b92915050565b60008183811515612dd557fe5b04905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612e1a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820956ba6fa1d39bc6aa996f7250fd11c9b2a6fd0f055a76e42868586c3305cbbda002900000000000000000000000009d2ba98ccb097e8c99738a223c729ef5bcbd6f900000000000000000000000000000000000000000000000000000000000042a4",
  "constructorArguments": "00000000000000000000000009d2ba98ccb097e8c99738a223c729ef5bcbd6f900000000000000000000000000000000000000000000000000000000000042a4"
}