{
  "address": "0x956eba6cc01941b50c36cf6c5c0480a14f0d669c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InstaCompound",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity ^0.5.7;\n\ninterface CTokenInterface {\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n    function exchangeRateCurrent() external returns (uint);\n    function getCash() external view returns (uint);\n    function totalBorrowsCurrent() external returns (uint);\n    function borrowRatePerBlock() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n    function totalReserves() external view returns (uint);\n    function reserveFactorMantissa() external view returns (uint);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function allowance(address, address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\ninterface CERC20Interface {\n    function mint(uint mintAmount) external returns (uint); // For ERC20\n    function repayBorrow(uint repayAmount) external returns (uint); // For ERC20\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\n    function borrowBalanceCurrent(address account) external returns (uint);\n}\n\ninterface CETHInterface {\n    function mint() external payable; // For ETH\n    function repayBorrow() external payable; // For ETH\n    function repayBorrowBehalf(address borrower) external payable; // For ETH\n    function borrowBalanceCurrent(address account) external returns (uint);\n}\n\ninterface ERC20Interface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\ninterface ComptrollerInterface {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cTokenAddress) external returns (uint);\n    function getAssetsIn(address account) external view returns (address[] memory);\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n\n    /**\n     * @dev setting allowance to compound for the \"user proxy\" if required\n     */\n    function setApproval(address erc20, uint srcAmt, address to) internal {\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\n        if (srcAmt > tokenAllowance) {\n            erc20Contract.approve(to, 2**255);\n        }\n    }\n\n    /**\n     * @dev get ethereum address for trade\n     */\n    function getAddressETH() public pure returns (address eth) {\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n\n    /**\n     * @dev get Compound Comptroller Address\n     */\n    function getComptrollerAddress() public pure returns (address troller) {\n        troller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n        // troller = 0x2EAa9D77AE4D8f9cdD9FAAcd44016E746485bddb; // Rinkeby\n        // troller = 0x3CA5a0E85aD80305c2d2c4982B2f2756f1e747a5; // Kovan\n    }\n\n    /**\n     * @dev Transfer ETH/ERC20 to user\n     */\n    function transferToken(address erc20) internal {\n        if (erc20 == getAddressETH()) {\n            msg.sender.transfer(address(this).balance);\n        } else {\n            ERC20Interface erc20Contract = ERC20Interface(erc20);\n            uint srcBal = erc20Contract.balanceOf(address(this));\n            if (srcBal > 0) {\n                erc20Contract.transfer(msg.sender, srcBal);\n            }\n        }\n    }\n\n    function enterMarket(address cErc20) internal {\n        ComptrollerInterface troller = ComptrollerInterface(getComptrollerAddress());\n        address[] memory markets = troller.getAssetsIn(address(this));\n        bool isEntered = false;\n        for (uint i = 0; i < markets.length; i++) {\n            if (markets[i] == cErc20) {\n                isEntered = true;\n            }\n        }\n        if (!isEntered) {\n            address[] memory toEnter = new address[](1);\n            toEnter[0] = cErc20;\n            troller.enterMarkets(toEnter);\n        }\n    }\n\n}\n\n\ncontract CompoundResolver is Helpers {\n\n    event LogMint(address erc20, address cErc20, uint tokenAmt, address owner);\n    event LogRedeem(address erc20, address cErc20, uint tokenAmt, address owner);\n    event LogBorrow(address erc20, address cErc20, uint tokenAmt, address owner);\n    event LogRepay(address erc20, address cErc20, uint tokenAmt, address owner);\n\n    /**\n     * @dev Deposit ETH/ERC20 and mint Compound Tokens\n     */\n    function mintCToken(address erc20, address cErc20, uint tokenAmt) external payable {\n        enterMarket(cErc20);\n        if (erc20 == getAddressETH()) {\n            CETHInterface cToken = CETHInterface(cErc20);\n            cToken.mint.value(msg.value)();\n        } else {\n            ERC20Interface token = ERC20Interface(erc20);\n            uint toDeposit = token.balanceOf(msg.sender);\n            if (toDeposit > tokenAmt) {\n                toDeposit = tokenAmt;\n            }\n            token.transferFrom(msg.sender, address(this), toDeposit);\n            CERC20Interface cToken = CERC20Interface(cErc20);\n            setApproval(erc20, toDeposit, cErc20);\n            assert(cToken.mint(toDeposit) == 0);\n        }\n        emit LogMint(\n            erc20,\n            cErc20,\n            tokenAmt,\n            msg.sender\n        );\n    }\n\n    /**\n     * @dev Redeem ETH/ERC20 and burn Compound Tokens\n     * @param cTokenAmt Amount of CToken To burn\n     */\n    function redeemCToken(address erc20, address cErc20, uint cTokenAmt) external {\n        CTokenInterface cToken = CTokenInterface(cErc20);\n        uint toBurn = cToken.balanceOf(address(this));\n        if (toBurn > cTokenAmt) {\n            toBurn = cTokenAmt;\n        }\n        setApproval(cErc20, toBurn, cErc20);\n        require(cToken.redeem(toBurn) == 0, \"something went wrong\");\n        transferToken(erc20);\n        uint tokenReturned = wmul(toBurn, cToken.exchangeRateCurrent());\n        emit LogRedeem(\n            erc20,\n            cErc20,\n            tokenReturned,\n            address(this)\n        );\n    }\n\n    /**\n     * @dev Redeem ETH/ERC20 and mint Compound Tokens\n     * @param tokenAmt Amount of token To Redeem\n     */\n    function redeemUnderlying(address erc20, address cErc20, uint tokenAmt) external {\n        CTokenInterface cToken = CTokenInterface(cErc20);\n        setApproval(cErc20, 10**50, cErc20);\n        uint toBurn = cToken.balanceOf(address(this));\n        uint tokenToReturn = wmul(toBurn, cToken.exchangeRateCurrent());\n        if (tokenToReturn > tokenAmt) {\n            tokenToReturn = tokenAmt;\n        }\n        require(cToken.redeemUnderlying(tokenToReturn) == 0, \"something went wrong\");\n        transferToken(erc20);\n        emit LogRedeem(\n            erc20,\n            cErc20,\n            tokenToReturn,\n            address(this)\n        );\n    }\n\n    /**\n     * @dev borrow ETH/ERC20\n     */\n    function borrow(address erc20, address cErc20, uint tokenAmt) external {\n        enterMarket(cErc20);\n        require(CTokenInterface(cErc20).borrow(tokenAmt) == 0, \"got collateral?\");\n        transferToken(erc20);\n        emit LogBorrow(\n            erc20,\n            cErc20,\n            tokenAmt,\n            address(this)\n        );\n    }\n\n    /**\n     * @dev Pay Debt ETH/ERC20\n     */\n    function repayToken(address erc20, address cErc20, uint tokenAmt) external payable {\n        if (erc20 == getAddressETH()) {\n            CETHInterface cToken = CETHInterface(cErc20);\n            uint toRepay = msg.value;\n            uint borrows = cToken.borrowBalanceCurrent(address(this));\n            if (toRepay > borrows) {\n                toRepay = borrows;\n                msg.sender.transfer(msg.value - toRepay);\n            }\n            cToken.repayBorrow.value(toRepay)();\n            emit LogRepay(\n                erc20,\n                cErc20,\n                toRepay,\n                address(this)\n            );\n        } else {\n            CERC20Interface cToken = CERC20Interface(cErc20);\n            ERC20Interface token = ERC20Interface(erc20);\n            uint toRepay = token.balanceOf(msg.sender);\n            uint borrows = cToken.borrowBalanceCurrent(address(this));\n            if (toRepay > tokenAmt) {\n                toRepay = tokenAmt;\n            }\n            if (toRepay > borrows) {\n                toRepay = borrows;\n            }\n            setApproval(erc20, toRepay, cErc20);\n            token.transferFrom(msg.sender, address(this), toRepay);\n            require(cToken.repayBorrow(toRepay) == 0, \"transfer approved?\");\n            emit LogRepay(\n                erc20,\n                cErc20,\n                toRepay,\n                address(this)\n            );\n        }\n    }\n\n    /**\n     * @dev Pay Debt for someone else\n     */\n    function repaytokenBehalf(\n        address borrower,\n        address erc20,\n        address cErc20,\n        uint tokenAmt\n    ) external payable\n    {\n        if (erc20 == getAddressETH()) {\n            CETHInterface cToken = CETHInterface(cErc20);\n            uint toRepay = msg.value;\n            uint borrows = cToken.borrowBalanceCurrent(address(this));\n            if (toRepay > borrows) {\n                toRepay = borrows;\n                msg.sender.transfer(msg.value - toRepay);\n            }\n            cToken.repayBorrowBehalf.value(toRepay)(borrower);\n            emit LogRepay(\n                erc20,\n                cErc20,\n                toRepay,\n                address(this)\n            );\n        } else {\n            CERC20Interface cToken = CERC20Interface(cErc20);\n            ERC20Interface token = ERC20Interface(erc20);\n            uint toRepay = token.balanceOf(msg.sender);\n            uint borrows = cToken.borrowBalanceCurrent(address(this));\n            if (toRepay > tokenAmt) {\n                toRepay = tokenAmt;\n            }\n            if (toRepay > borrows) {\n                toRepay = borrows;\n            }\n            setApproval(erc20, toRepay, cErc20);\n            token.transferFrom(msg.sender, address(this), toRepay);\n            require(cToken.repayBorrowBehalf(borrower, tokenAmt) == 0, \"transfer approved?\");\n            emit LogRepay(\n                erc20,\n                cErc20,\n                toRepay,\n                address(this)\n            );\n        }\n    }\n\n}\n\n\ncontract InstaCompound is CompoundResolver {\n\n    uint public version;\n\n    /**\n     * @dev setting up variables on deployment\n     * 1...2...3 versioning in each subsequent deployments\n     */\n    constructor(uint _version) public {\n        version = _version;\n    }\n\n    function() external payable {}\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"cErc20\",\"type\":\"address\"},{\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"mintCToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComptrollerAddress\",\"outputs\":[{\"name\":\"troller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"cErc20\",\"type\":\"address\"},{\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"cErc20\",\"type\":\"address\"},{\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"repayToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"cErc20\",\"type\":\"address\"},{\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"cErc20\",\"type\":\"address\"},{\"name\":\"cTokenAmt\",\"type\":\"uint256\"}],\"name\":\"redeemCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"name\":\"eth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"borrower\",\"type\":\"address\"},{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"cErc20\",\"type\":\"address\"},{\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"repaytokenBehalf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cErc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cErc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cErc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cErc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogRepay\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516020806128af8339810180604052602081101561003057600080fd5b81019080805190602001909291905050508060008190555050612857806100586000396000f3fe6080604052600436106100865760003560e01c806360ea59a21161005957806360ea59a2146101f3578063935642cf1461026157806396be724c146102dc578063ab1be68614610357578063af7c7cb4146103ae57610086565b8063176279c0146100885780634ee9159a146100f65780635224372c1461014d57806354fd4d50146101c8575b005b6100f46004803603606081101561009e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061043c565b005b34801561010257600080fd5b5061010b610833565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561015957600080fd5b506101c66004803603606081101561017057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061084f565b005b3480156101d457600080fd5b506101dd610a3c565b6040518082815260200191505060405180910390f35b61025f6004803603606081101561020957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a42565b005b34801561026d57600080fd5b506102da6004803603606081101561028457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611154565b005b3480156102e857600080fd5b50610355600480360360608110156102ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114b8565b005b34801561036357600080fd5b5061036c611807565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61043a600480360360808110156103c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611823565b005b61044582611fa1565b61044d611807565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104ec5760008290508073ffffffffffffffffffffffffffffffffffffffff16631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104cd57600080fd5b505af11580156104e1573d6000803e3d6000fd5b50505050505061075b565b600083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561057057600080fd5b505afa158015610584573d6000803e3d6000fd5b505050506040513d602081101561059a57600080fd5b81019080805190602001909291905050509050828111156105b9578290505b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d602081101561069e57600080fd5b81019080805190602001909291905050505060008490506106c08683876122dd565b60008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b505050506040513d602081101561073f57600080fd5b81019080805190602001909291905050501461075757fe5b5050505b7f252c64862cdd4fb87064b61720da12074c8fdddf7233c8d163c925c85072c42c83838333604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b905090565b61085882611fa1565b60008273ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b505050506040513d60208110156108d757600080fd5b81019080805190602001909291905050501461095b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f676f7420636f6c6c61746572616c3f000000000000000000000000000000000081525060200191505060405180910390fd5b610964836124a1565b7f9f31c249eb0814475f16a619e1fdf5e62f46db8cb233ff1b951adddcf7133b9583838330604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050565b60005481565b610a4a611807565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cd6576000829050600034905060008273ffffffffffffffffffffffffffffffffffffffff166317bfdfbc306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b505050506040513d6020811015610b3257600080fd5b8101908080519060200190929190505050905080821115610b9a578091503373ffffffffffffffffffffffffffffffffffffffff166108fc8334039081150290604051600060405180830381858888f19350505050158015610b98573d6000803e3d6000fd5b505b8273ffffffffffffffffffffffffffffffffffffffff16634e4d9fea836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610be257600080fd5b505af1158015610bf6573d6000803e3d6000fd5b50505050507ff9c0c8ae7fcb0ae66722c0fd985dd186c5f04475693482e4836363ea60e00de286868430604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a150505061114f565b6000829050600084905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d6020811015610d8957600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff166317bfdfbc306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610e1d57600080fd5b505af1158015610e31573d6000803e3d6000fd5b505050506040513d6020811015610e4757600080fd5b8101908080519060200190929190505050905084821115610e66578491505b80821115610e72578091505b610e7d8783886122dd565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b505050506040513d6020811015610f6257600080fd5b81019080805190602001909291905050505060008473ffffffffffffffffffffffffffffffffffffffff16630e752702846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610fc957600080fd5b505af1158015610fdd573d6000803e3d6000fd5b505050506040513d6020811015610ff357600080fd5b810190808051906020019092919050505014611077576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f7472616e7366657220617070726f7665643f000000000000000000000000000081525060200191505060405180910390fd5b7ff9c0c8ae7fcb0ae66722c0fd985dd186c5f04475693482e4836363ea60e00de287878430604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505b505050565b60008290506111798374446c3b15f9926687d2c40534fdb564000000000000856122dd565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156111f857600080fd5b505afa15801561120c573d6000803e3d6000fd5b505050506040513d602081101561122257600080fd5b8101908080519060200190929190505050905060006112c3828473ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561128357600080fd5b505af1158015611297573d6000803e3d6000fd5b505050506040513d60208110156112ad57600080fd5b81019080805190602001909291905050506126d3565b9050838111156112d1578390505b60008373ffffffffffffffffffffffffffffffffffffffff1663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561132657600080fd5b505af115801561133a573d6000803e3d6000fd5b505050506040513d602081101561135057600080fd5b8101908080519060200190929190505050146113d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f736f6d657468696e672077656e742077726f6e6700000000000000000000000081525060200191505060405180910390fd5b6113dd866124a1565b7fd985ae7abab418a80621f7b292cdc98b964715f22de84b4f4c9183795b47d14b86868330604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050565b600082905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561153c57600080fd5b505afa158015611550573d6000803e3d6000fd5b505050506040513d602081101561156657600080fd5b8101908080519060200190929190505050905082811115611585578290505b6115908482866122dd565b60008273ffffffffffffffffffffffffffffffffffffffff1663db006a75836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156115e557600080fd5b505af11580156115f9573d6000803e3d6000fd5b505050506040513d602081101561160f57600080fd5b810190808051906020019092919050505014611693576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f736f6d657468696e672077656e742077726f6e6700000000000000000000000081525060200191505060405180910390fd5b61169c856124a1565b600061172a828473ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156116ea57600080fd5b505af11580156116fe573d6000803e3d6000fd5b505050506040513d602081101561171457600080fd5b81019080805190602001909291905050506126d3565b90507fd985ae7abab418a80621f7b292cdc98b964715f22de84b4f4c9183795b47d14b86868330604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee905090565b61182b611807565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611aee576000829050600034905060008273ffffffffffffffffffffffffffffffffffffffff166317bfdfbc306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156118e957600080fd5b505af11580156118fd573d6000803e3d6000fd5b505050506040513d602081101561191357600080fd5b810190808051906020019092919050505090508082111561197b578091503373ffffffffffffffffffffffffffffffffffffffff166108fc8334039081150290604051600060405180830381858888f19350505050158015611979573d6000803e3d6000fd5b505b8273ffffffffffffffffffffffffffffffffffffffff1663e597461983896040518363ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b1580156119fa57600080fd5b505af1158015611a0e573d6000803e3d6000fd5b50505050507ff9c0c8ae7fcb0ae66722c0fd985dd186c5f04475693482e4836363ea60e00de286868430604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050611f9b565b6000829050600084905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611b7757600080fd5b505afa158015611b8b573d6000803e3d6000fd5b505050506040513d6020811015611ba157600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff166317bfdfbc306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611c3557600080fd5b505af1158015611c49573d6000803e3d6000fd5b505050506040513d6020811015611c5f57600080fd5b8101908080519060200190929190505050905084821115611c7e578491505b80821115611c8a578091505b611c958783886122dd565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611d5057600080fd5b505af1158015611d64573d6000803e3d6000fd5b505050506040513d6020811015611d7a57600080fd5b81019080805190602001909291905050505060008473ffffffffffffffffffffffffffffffffffffffff16632608f8188a886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050506040513d6020811015611e3f57600080fd5b810190808051906020019092919050505014611ec3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f7472616e7366657220617070726f7665643f000000000000000000000000000081525060200191505060405180910390fd5b7ff9c0c8ae7fcb0ae66722c0fd985dd186c5f04475693482e4836363ea60e00de287878430604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505b50505050565b6000611fab610833565b905060608173ffffffffffffffffffffffffffffffffffffffff1663abfceffc306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561202c57600080fd5b505afa158015612040573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561206a57600080fd5b81019080805164010000000081111561208257600080fd5b8281019050602081018481111561209857600080fd5b81518560208202830111640100000000821117156120b557600080fd5b50509291905050509050600080905060008090505b825181101561212c578473ffffffffffffffffffffffffffffffffffffffff168382815181106120f657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561211f57600191505b80806001019150506120ca565b50806122d757606060016040519080825280602002602001820160405280156121645781602001602082028038833980820191505090505b509050848160008151811061217557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663c2998238826040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b8381101561221e578082015181840152602081019050612203565b5050505090500192505050600060405180830381600087803b15801561224357600080fd5b505af1158015612257573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561228157600080fd5b81019080805164010000000081111561229957600080fd5b828101905060208101848111156122af57600080fd5b81518560208202830111640100000000821117156122cc57600080fd5b505092919050505050505b50505050565b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561239557600080fd5b505afa1580156123a9573d6000803e3d6000fd5b505050506040513d60208110156123bf57600080fd5b810190808051906020019092919050505090508084111561249a578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847f80000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561248157600080fd5b505af1158015612495573d6000803e3d6000fd5b505050505b5050505050565b6124a9611807565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561253f573373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612539573d6000803e3d6000fd5b506126d0565b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156125c357600080fd5b505afa1580156125d7573d6000803e3d6000fd5b505050506040513d60208110156125ed57600080fd5b8101908080519060200190929190505050905060008111156126cd578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561269057600080fd5b505af11580156126a4573d6000803e3d6000fd5b505050506040513d60208110156126ba57600080fd5b8101908080519060200190929190505050505b50505b50565b6000670de0b6b3a76400006127036126eb8585612713565b6002670de0b6b3a7640000816126fd57fe5b046127a8565b8161270a57fe5b04905092915050565b600080821480612730575082828385029250828161272d57fe5b04145b6127a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b6000828284019150811015612825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b9291505056fea165627a7a72305820978271f550387095d5e66eb6254dd00d1cdb71ba9353c959a19dfe99ddd47cf500290000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001"
}