{
  "address": "0x0ff1c3dd4b262a0324910a6e30caa182204d9163",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AtomicSwap",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-19\n*/\n\npragma solidity ^0.4.19;\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract AtomicSwap {\n  struct Swap {\n    uint expiration;\n    address initiator;\n    address participant;\n    uint256 value;\n    bool isToken;\n    address token;\n    bool exists;\n  }\n\n  event InitiateSwap(address _initiator, address _participant, uint _expiration, bytes20 _hash, address _token, bool _isToken, uint256 _value);\n  event RedeemSwap(address indexed _participant, bytes20 indexed _hash, bytes32 _secret);\n  event RefundSwap(address _initiator, address _participant, bytes20 _hash);\n  // maps the redeemer and bytes20 hash to a swap    \n  mapping(address => mapping(bytes20 => Swap)) public swaps;\n\n  function initiate(uint _expiration, bytes20 _hash, address _participant, address _token, bool _isToken, uint256 _value) payable public {\n    Swap storage s = swaps[_participant][_hash];\n    // make sure you aren't overwriting a pre-existing swap\n    // (so the original initiator can't rewrite the terms)\n    require (s.exists == false);\n    // don't allow the creation of already expired swaps\n    require (now < _expiration);\n\n    if (_isToken) {\n      // require that the sender has allowed the tokens to be withdrawn from their account\n      ERC20 token = ERC20(_token);\n      require(token.allowance(msg.sender, this) == _value);\n      token.transferFrom(msg.sender, this, _value);\n    }\n    // create the new swap\n    swaps[_participant][_hash] = Swap(_expiration, msg.sender, _participant, _isToken ? _value : msg.value, _isToken, _token, true);\n    InitiateSwap(msg.sender, _participant, _expiration, _hash, _token, _isToken, _isToken ? _value : msg.value);\n  }\n\n  function redeem(bytes32 _secret) public {\n    // get a swap from the mapping. we can do it directly because there is no way to \n    // fake the secret.\n    bytes20 hash = ripemd160(_secret);\n    Swap storage s = swaps[msg.sender][hash];\n    \n    // make sure the swap was not redeemed or refunded\n    require(s.exists);\n    // make sure the swap did not expire already\n    require(now < s.expiration);\n    \n    // clean up and send\n    s.exists = false;\n    if (s.isToken) {\n      ERC20 token = ERC20(s.token);\n      token.transfer(msg.sender, s.value);\n    } else {\n      msg.sender.transfer(s.value);\n    }\n\n    RedeemSwap(msg.sender, hash, _secret);\n  }\n\n  function refund(bytes20 _hash, address _participant) public {\n    Swap storage s = swaps[_participant][_hash];\n    // don't allow refund if swap did not expire\n    require(now > s.expiration);\n    // don't allow refunds if the caller is not the initator\n    require(msg.sender == s.initiator);\n    // make sure the swap was not redeemed or refunded\n    require(s.exists);\n\n    s.exists = false;\n    if (s.isToken) {\n      ERC20 token = ERC20(s.token);\n      token.transfer(msg.sender, s.value);\n    } else {\n      msg.sender.transfer(s.value);\n    }\n\n    RefundSwap(msg.sender, s.participant, _hash);\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_hash\",\"type\":\"bytes20\"},{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_isToken\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"swaps\",\"outputs\":[{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"initiator\",\"type\":\"address\"},{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"isToken\",\"type\":\"bool\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes20\"},{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isToken\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"InitiateSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_hash\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"RedeemSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes20\"}],\"name\":\"RefundSwap\",\"type\":\"event\"}]",
  "bytecode": ""
}