{
  "address": "0x6c01283d9ce3bfe307d4269225720e049c9be46e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OneledgerTokenVesting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-13\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\n/**\n* @title OneledgerToken\n* @dev this is the oneledger token\n*/\ncontract OneledgerToken is MintableToken {\n    using SafeMath for uint256;\n\n    string public name = \"Oneledger Token\";\n    string public symbol = \"OLT\";\n    uint8 public decimals = 18;\n    bool public active = false;\n    /**\n     * @dev restrict function to be callable when token is active\n     */\n    modifier activated() {\n        require(active == true);\n        _;\n    }\n\n    /**\n     * @dev activate token transfers\n     */\n    function activate() public onlyOwner {\n        active = true;\n    }\n\n    /**\n     * @dev transfer    ERC20 standard transfer wrapped with `activated` modifier\n     */\n    function transfer(address to, uint256 value) public activated returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    /**\n     * @dev transfer    ERC20 standard transferFrom wrapped with `activated` modifier\n     */\n    function transferFrom(address from, address to, uint256 value) public activated returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n}\n\ncontract ICO is Ownable {\n    using SafeMath for uint256;\n\n    struct WhiteListRecord {\n        uint256 offeredWei;\n        uint256 lastPurchasedTimestamp;\n    }\n\n    OneledgerToken public token;\n    address public wallet; // Address where funds are collected\n    uint256 public rate;   // How many token units a buyer gets per eth\n    mapping (address => WhiteListRecord) public whiteList;\n    uint256 public initialTime;\n    bool public saleClosed;\n    uint256 public weiCap;\n    uint256 public weiRaised;\n\n    uint256 public TOTAL_TOKEN_SUPPLY = 1000000000 * (10 ** 18);\n\n    event BuyTokens(uint256 weiAmount, uint256 rate, uint256 token, address beneficiary);\n    event UpdateRate(uint256 rate);\n    event UpdateWeiCap(uint256 weiCap);\n    /**\n    * @dev constructor\n    */\n    constructor(address _wallet, uint256 _rate, uint256 _startDate, uint256 _weiCap) public {\n        require(_rate > 0);\n        require(_wallet != address(0));\n        require(_weiCap.mul(_rate) <= TOTAL_TOKEN_SUPPLY);\n\n        wallet = _wallet;\n        rate = _rate;\n        initialTime = _startDate;\n        saleClosed = false;\n        weiCap = _weiCap;\n        weiRaised = 0;\n\n        token = new OneledgerToken();\n    }\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     */\n    function() external payable {\n        buyTokens();\n    }\n\n    /**\n     * @dev update the rate\n     */\n    function updateRate(uint256 rate_) public onlyOwner {\n      require(now <= initialTime);\n      rate = rate_;\n      emit UpdateRate(rate);\n    }\n\n    /**\n     * @dev update the weiCap\n     */\n    function updateWeiCap(uint256 weiCap_) public onlyOwner {\n      require(now <= initialTime);\n      weiCap = weiCap_;\n      emit UpdateWeiCap(weiCap_);\n    }\n\n    /**\n     * @dev buy tokens\n     */\n    function buyTokens() public payable {\n        validatePurchase(msg.value);\n        uint256 tokenToBuy = msg.value.mul(rate);\n        whiteList[msg.sender].lastPurchasedTimestamp = now;\n        weiRaised = weiRaised.add(msg.value);\n        token.mint(msg.sender, tokenToBuy);\n        wallet.transfer(msg.value);\n        emit BuyTokens(msg.value, rate, tokenToBuy, msg.sender);\n    }\n\n    /**\n    * @dev add to white list\n    * param addresses the list of address added to white list\n    * param weiPerContributor the wei can be transfer per contributor\n    * param capWei for the user in this list\n    */\n    function addToWhiteList(address[] addresses, uint256 weiPerContributor) public onlyOwner {\n        for (uint32 i = 0; i < addresses.length; i++) {\n            whiteList[addresses[i]] = WhiteListRecord(weiPerContributor, 0);\n        }\n    }\n\n    /**\n     * @dev mint token to new address, either contract or a wallet\n     * param OneledgerTokenVesting vesting contract\n     * param uint256 total token number to mint\n    */\n    function mintToken(address target, uint256 tokenToMint) public onlyOwner {\n      token.mint(target, tokenToMint);\n    }\n\n    /**\n     * @dev close the ICO\n     */\n    function closeSale() public onlyOwner {\n        saleClosed = true;\n        if (TOTAL_TOKEN_SUPPLY > token.totalSupply()) {\n          token.mint(owner, TOTAL_TOKEN_SUPPLY.sub(token.totalSupply()));\n        }\n        token.finishMinting();\n        token.transferOwnership(owner);\n    }\n\n    function validatePurchase(uint256 weiPaid) internal view{\n        require(!saleClosed);\n        require(initialTime <= now);\n        require(whiteList[msg.sender].offeredWei > 0);\n        require(weiPaid <= weiCap.sub(weiRaised));\n        // can only purchase once every 24 hours\n        require(now.sub(whiteList[msg.sender].lastPurchasedTimestamp) > 24 hours);\n        uint256 elapsedTime = now.sub(initialTime);\n        // check day 1 buy limit\n        require(elapsedTime > 24 hours || msg.value <= whiteList[msg.sender].offeredWei);\n        // check day 2 buy limit\n        require(elapsedTime > 48 hours || msg.value <= whiteList[msg.sender].offeredWei.mul(2));\n    }\n}\n\n\ncontract OneledgerTokenVesting is Ownable{\n    using SafeMath for uint256;\n\n    event Released(uint256 amount);\n\n    // beneficiary of tokens after they are released\n    address public beneficiary;\n\n    uint256 public startFrom;\n    uint256 public period;\n    uint256 public tokensReleasedPerPeriod;\n\n    uint256 public elapsedPeriods;\n\n    OneledgerToken private token;\n\n    /**\n     * @dev Creates a vesting contract for OneledgerToken\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _startFrom Datetime when the vesting will begin\n     * @param _period The preiod to release the token\n     * @param _tokensReleasedPerPeriod the token to release per period\n     */\n    constructor(\n        address _beneficiary,\n        uint256 _startFrom,\n        uint256 _period,\n        uint256 _tokensReleasedPerPeriod,\n        OneledgerToken _token\n    ) public {\n        require(_beneficiary != address(0));\n        require(_startFrom >= now);\n\n        beneficiary = _beneficiary;\n        startFrom = _startFrom;\n        period = _period;\n        tokensReleasedPerPeriod = _tokensReleasedPerPeriod;\n        elapsedPeriods = 0;\n        token = _token;\n    }\n\n    /**\n     *  @dev getToken this may be more convinience for user\n     *        to check if their vesting contract is binded with a right token\n     * return OneledgerToken\n     */\n     function getToken() public view returns(OneledgerToken) {\n       return token;\n     }\n\n    /**\n     * @dev release\n     * param _token Oneledgertoken that will be released to beneficiary\n     */\n    function release() public {\n        require(msg.sender == owner || msg.sender == beneficiary);\n        require(token.balanceOf(this) >= 0 && now >= startFrom);\n        uint256 elapsedTime = now.sub(startFrom);\n        uint256 periodsInCurrentRelease = elapsedTime.div(period).sub(elapsedPeriods);\n        uint256 tokensReadyToRelease = periodsInCurrentRelease.mul(tokensReleasedPerPeriod);\n        uint256 amountToTransfer = tokensReadyToRelease > token.balanceOf(this) ? token.balanceOf(this) : tokensReadyToRelease;\n        require(amountToTransfer > 0);\n        elapsedPeriods = elapsedPeriods.add(periodsInCurrentRelease);\n        token.transfer(beneficiary, amountToTransfer);\n        emit Released(amountToTransfer);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160a0806107ba8339810160409081528151602083015191830151606084015160809094015160008054600160a060020a0319163317905591939091600160a060020a038516151561006457600080fd5b4284101561007157600080fd5b60018054600160a060020a03968716600160a060020a0319918216179091556002949094556003929092556004556000600555600680549190931691161790556106fa806100c06000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631e924bf881146100a8578063208904c7146100cf57806321df0da7146100e457806338af3eed14610115578063692345ee1461012a578063715018a61461013f57806386d1a69f146101565780638da5cb5b1461016b578063ef78d4fd14610180578063f2fde38b14610195575b600080fd5b3480156100b457600080fd5b506100bd6101b6565b60408051918252519081900360200190f35b3480156100db57600080fd5b506100bd6101bc565b3480156100f057600080fd5b506100f96101c2565b60408051600160a060020a039092168252519081900360200190f35b34801561012157600080fd5b506100f96101d1565b34801561013657600080fd5b506100bd6101e0565b34801561014b57600080fd5b506101546101e6565b005b34801561016257600080fd5b50610154610252565b34801561017757600080fd5b506100f96105b7565b34801561018c57600080fd5b506100bd6105c6565b3480156101a157600080fd5b50610154600160a060020a03600435166105cc565b60045481565b60025481565b600654600160a060020a031690565b600154600160a060020a031681565b60055481565b600054600160a060020a031633146101fd57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008054819081908190600160a060020a031633148061027c5750600154600160a060020a031633145b151561028757600080fd5b600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b1580156102ec57600080fd5b505af1158015610300573d6000803e3d6000fd5b505050506040513d602081101561031657600080fd5b50511080159061032857506002544210155b151561033357600080fd5b60025461034790429063ffffffff6105ef16565b93506103706005546103646003548761060690919063ffffffff16565b9063ffffffff6105ef16565b92506103876004548461061b90919063ffffffff16565b600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051929450600160a060020a03909116916370a08231916024808201926020929091908290030181600087803b1580156103f057600080fd5b505af1158015610404573d6000803e3d6000fd5b505050506040513d602081101561041a57600080fd5b5051821161042857816104bb565b600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561048e57600080fd5b505af11580156104a2573d6000803e3d6000fd5b505050506040513d60208110156104b857600080fd5b50515b9050600081116104ca57600080fd5b6005546104dd908463ffffffff61064416565b600555600654600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050506040513d602081101561057c57600080fd5b50506040805182815290517ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659181900360200190a150505050565b600054600160a060020a031681565b60035481565b600054600160a060020a031633146105e357600080fd5b6105ec81610651565b50565b6000828211156105fb57fe5b508082035b92915050565b6000818381151561061357fe5b049392505050565b600082151561062c57506000610600565b5081810281838281151561063c57fe5b041461060057fe5b8181018281101561060057fe5b600160a060020a038116151561066657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058205019fd52739168c0ecc1c0fe487173d3b9d4186dbf6bfda6cf06a77d6881b0f400290000000000000000000000002a8d73a95aa816e55027df0086010fae8965c37f000000000000000000000000000000000000000000000000000000005b2179180000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000001b4c634279a74ba4000000000000000000000000000064a60493d888728cf42616e034a0dfeae38efcf0",
  "constructorArguments": "0000000000000000000000002a8d73a95aa816e55027df0086010fae8965c37f000000000000000000000000000000000000000000000000000000005b2179180000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000001b4c634279a74ba4000000000000000000000000000064a60493d888728cf42616e034a0dfeae38efcf0"
}