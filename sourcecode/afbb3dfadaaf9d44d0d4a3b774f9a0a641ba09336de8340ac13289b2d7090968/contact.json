{
  "address": "0xa8dcbe27f75a5cfda9e073c0205685d12888eb79",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OwnedUpgradeabilityProxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-02\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Proxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\ncontract Proxy {\n    /**\n    * @dev Tells the address of the implementation where every call will be delegated.\n    * @return address of the implementation to which it will be delegated\n    */\n    function implementation() public view returns (address);\n\n    /**\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n    * This function will return whatever the implementation call returns\n    */\n    function () public payable {\n        address _impl = implementation();\n        require(_impl != address(0), \"address invalid\");\n\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize)\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n            let size := returndatasize\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n */\ncontract UpgradeabilityProxy is Proxy {\n    /**\n    * @dev This event will be emitted every time the implementation gets upgraded\n    * @param implementation representing the address of the upgraded implementation\n    */\n    event Upgraded(address indexed implementation);\n\n    // Storage position of the address of the current implementation\n    bytes32 private constant implementationPosition = keccak256(\"you are the lucky man.proxy\");\n\n    /**\n    * @dev Constructor function\n    */\n    constructor() public {}\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address impl) {\n        bytes32 position = implementationPosition;\n        assembly {\n            impl := sload(position)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the current implementation\n    * @param newImplementation address representing the new implementation to be set\n    */\n    function setImplementation(address newImplementation) internal {\n        bytes32 position = implementationPosition;\n        assembly {\n            sstore(position, newImplementation)\n        }\n    }\n\n    /**\n    * @dev Upgrades the implementation address\n    * @param newImplementation representing the address of the new implementation to be set\n    */\n    function _upgradeTo(address newImplementation) internal {\n        address currentImplementation = implementation();\n        require(currentImplementation != newImplementation, \"new address is the same\");\n        setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n}\n\n/**\n * @title OwnedUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n */\ncontract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\n\n    // Storage position of the owner of the contract\n    bytes32 private constant proxyOwnerPosition = keccak256(\"you are the lucky man.proxy.owner\");\n\n    /**\n    * @dev the constructor sets the original owner of the contract to the sender account.\n    */\n    constructor() public {\n        setUpgradeabilityOwner(msg.sender);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyProxyOwner() {\n        require(msg.sender == proxyOwner(), \"owner only\");\n        _;\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function proxyOwner() public view returns (address owner) {\n        bytes32 position = proxyOwnerPosition;\n        assembly {\n            owner := sload(position)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function setUpgradeabilityOwner(address newProxyOwner) internal {\n        bytes32 position = proxyOwnerPosition;\n        assembly {\n            sstore(position, newProxyOwner)\n        }\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\n        require(newOwner != address(0), \"address is invalid\");\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\n        setUpgradeabilityOwner(newOwner);\n    }\n\n    /**\n    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n    * @param implementation representing the address of the new implementation to be set.\n    */\n    function upgradeTo(address implementation) public onlyProxyOwner {\n        _upgradeTo(implementation);\n    }\n\n    /**\n    * @dev Allows the proxy owner to upgrade the current version of the proxy and call the new implementation\n    * to initialize whatever is needed through a low level call.\n    * @param implementation representing the address of the new implementation to be set.\n    * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\n    * signature of the implementation to be called with the needed payload\n    */\n    function upgradeToAndCall(address implementation, bytes data) public payable onlyProxyOwner {\n        upgradeTo(implementation);\n        require(address(this).call.value(msg.value)(data), \"data is invalid\");\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5061002333640100000000610028810204565b610083565b604080517f796f752061726520746865206c75636b79206d616e2e70726f78792e6f776e6581527f72000000000000000000000000000000000000000000000000000000000000006020820152905190819003602101902055565b6106b0806100926000396000f30060806040526004361061006c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146100fd5780633659cfe61461012e5780634f1ef286146101515780635c60da1b146101ab578063f1739cae146101c0575b60006100766101e1565b9050600160a060020a03811615156100d8576040805160e560020a62461bcd02815260206004820152600f60248201527f6164647265737320696e76616c69640000000000000000000000000000000000604482015290519081900360640190fd5b60405136600082376000803683855af43d806000843e8180156100f9578184f35b8184fd5b34801561010957600080fd5b50610112610217565b60408051600160a060020a039092168252519081900360200190f35b34801561013a57600080fd5b5061014f600160a060020a0360043516610273565b005b60408051602060046024803582810135601f810185900485028601850190965285855261014f958335600160a060020a03169536956044949193909101919081908401838280828437509497506102e69650505050505050565b3480156101b757600080fd5b506101126101e1565b3480156101cc57600080fd5b5061014f600160a060020a0360043516610428565b604080517f796f752061726520746865206c75636b79206d616e2e70726f787900000000008152905190819003601b0190205490565b604080517f796f752061726520746865206c75636b79206d616e2e70726f78792e6f776e6581527f7200000000000000000000000000000000000000000000000000000000000000602082015290519081900360210190205490565b61027b610217565b600160a060020a031633146102da576040805160e560020a62461bcd02815260206004820152600a60248201527f6f776e6572206f6e6c7900000000000000000000000000000000000000000000604482015290519081900360640190fd5b6102e381610543565b50565b6102ee610217565b600160a060020a0316331461034d576040805160e560020a62461bcd02815260206004820152600a60248201527f6f776e6572206f6e6c7900000000000000000000000000000000000000000000604482015290519081900360640190fd5b61035682610273565b30600160a060020a0316348260405180828051906020019080838360005b8381101561038c578181015183820152602001610374565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1925050501515610424576040805160e560020a62461bcd02815260206004820152600f60248201527f6461746120697320696e76616c69640000000000000000000000000000000000604482015290519081900360640190fd5b5050565b610430610217565b600160a060020a0316331461048f576040805160e560020a62461bcd02815260206004820152600a60248201527f6f776e6572206f6e6c7900000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03811615156104ef576040805160e560020a62461bcd02815260206004820152601260248201527f6164647265737320697320696e76616c69640000000000000000000000000000604482015290519081900360640190fd5b7f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd9610518610217565b60408051600160a060020a03928316815291841660208301528051918290030190a16102e3816105f4565b600061054d6101e1565b9050600160a060020a0380821690831614156105b3576040805160e560020a62461bcd02815260206004820152601760248201527f6e65772061646472657373206973207468652073616d65000000000000000000604482015290519081900360640190fd5b6105bc8261064f565b604051600160a060020a038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b604080517f796f752061726520746865206c75636b79206d616e2e70726f78792e6f776e6581527f72000000000000000000000000000000000000000000000000000000000000006020820152905190819003602101902055565b604080517f796f752061726520746865206c75636b79206d616e2e70726f787900000000008152905190819003601b019020555600a165627a7a72305820fed495a7fb24cfe1a4eebbcba7767c59ac799ece1174411f1a31d6ef40af0b250029"
}