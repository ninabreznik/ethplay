{
  "address": "0x99092a458b405fb8c06c5a3aa01cffd826019568",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XRT",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-29\n*/\n\npragma solidity ^0.4.21;\ncontract ERC20 {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256 _user){}\n  function transfer(address to, uint256 value) public returns (bool success){}\n  function allowance(address owner, address spender) public view returns (uint256 value){}\n  function transferFrom(address from, address to, uint256 value) public returns (bool success){}\n  function approve(address spender, uint256 value) public returns (bool success){}\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n  \n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\n    uint c = a + b;\n    assert(c>=a);\n    return c;\n  }\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n}\n\ncontract OnlyOwner {\n  address public owner;\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function OnlyOwner() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner. \n   */\n  modifier isOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n}\n\ncontract StandardToken is ERC20{\n\tusing SafeMath for uint256;\n\n  \tmapping(address => uint256) balances;\n  \tmapping (address => mapping (address => uint256)) allowed;\n\n  \tevent Minted(address receiver, uint256 amount);\n  \t\n  \t\n\n  \t\n\n  \tfunction _transfer(address _from, address _to, uint256 _value) internal view returns (bool success){\n  \t\t//prevent sending of tokens from genesis address or to self\n\t    require(_from != address(0) && _from != _to);\n\t    require(_to != address(0));\n\t    //subtract tokens from the sender on transfer\n\t    balances[_from] = balances[_from].safeSub(_value);\n\t    //add tokens to the receiver on reception\n\t    balances[_to] = balances[_to].safeAdd(_value);\n\t    return true;\n  \t}\n\n\tfunction transfer(address _to, uint256 _value) onlyPayloadSize(2*32) returns (bool success) \n\t{ \n\t\trequire(_value <= balances[msg.sender]);\n\t    _transfer(msg.sender,_to,_value);\n\t    Transfer(msg.sender, _to, _value);\n\t    return true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    \tuint256 _allowance = allowed[_from][msg.sender];\n    \t//value must be less than allowed value\n    \trequire(_value <= _allowance);\n    \t//balance of sender + token value transferred by sender must be greater than balance of sender\n    \trequire(balances[_to] + _value > balances[_to]);\n    \t//call transfer function\n    \t_transfer(_from,_to,_value);\n    \t//subtract the amount allowed to the sender \n     \tallowed[_from][msg.sender] = _allowance.safeSub(_value);\n     \t//trigger Transfer event\n    \tTransfer(_from, _to, _value);\n    \treturn true;\n  \t}\n\n  \tfunction balanceOf(address _owner) public constant returns (uint balance) {\n    \treturn balances[_owner];\n  \t}\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n   /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].safeAdd(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.safeSub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  modifier onlyPayloadSize(uint size) {\n\t\tassert(msg.data.length == size + 4);\n\t\t_;\n\t} \n\n}\n\ncontract XRT is StandardToken, OnlyOwner{\n\tuint8 public constant decimals = 18;\n    uint256 private constant multiplier = billion*10**18;\n  \tstring public constant name = \"XRT Token\";\n  \tstring public constant symbol = \"XRT\";\n  \tstring public version = \"X1.0\";\n  \tuint256 private billion = 10*10**8;\n  \tuint256 private maxSupply = multiplier;\n    uint256 public totalSupply = (50*maxSupply)/100;\n  \t\n  \tfunction XRT() public{\n  \t    balances[msg.sender] = totalSupply;\n  \t}\n  \t\n  \tfunction maximumToken() isOwner returns (uint){\n  \t    return maxSupply;\n  \t}\n  \t\n  \tevent Mint(address indexed to, uint256 amount);\n  \tevent MintFinished();\n    \n \tbool public mintingFinished = false;\n\n\n\tmodifier canMint() {\n\t\trequire(!mintingFinished);\n\t\trequire(totalSupply <= maxSupply);\n\t\t_;\n\t}\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n\tfunction mint(address _to, uint256 _amount) isOwner canMint public returns (bool) {\n\t    uint256 newAmount = _amount.safeMul(multiplier.safeDiv(100));\n\t    require(totalSupply <= maxSupply.safeSub(newAmount));\n\t    totalSupply = totalSupply.safeAdd(newAmount);\n\t\tbalances[_to] = balances[_to].safeAdd(newAmount);\n\t\tMint(_to, newAmount);\n\t\tTransfer(address(0), _to, newAmount);\n\t\treturn true;\n\t}\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  \tfunction finishMinting() isOwner canMint public returns (bool) {\n    \tmintingFinished = true;\n    \tMintFinished();\n    \treturn true;\n  \t}\n}",
  "bytecode": "60606040526040805190810160405260048082527f58312e3000000000000000000000000000000000000000000000000000000000602083015290805161004a9291602001906100be565b50633b9aca006005556b033b2e3c9fd0803ce80000006006556b019d971e4fe8401e740000006007556008805460ff19169055341561008857600080fd5b60038054600160a060020a03191633600160a060020a031690811790915560075460009182526001602052604090912055610159565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ff57805160ff191683800117855561012c565b8280016001018555821561012c579182015b8281111561012c578251825591602001919060010190610111565b5061013892915061013c565b5090565b61015691905b808211156101385760008155600101610142565b90565b610bf5806101686000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100f557806306fdde031461011c578063095ea7b3146101a657806318160ddd146101c857806323b872dd146101ed578063313ce5671461021557806340c10f191461023e57806354fd4d5014610260578063661884631461027357806370a08231146102955780637d64bcb4146102b45780638da5cb5b146102c757806395d89b41146102f6578063a9059cbb14610309578063b8d5b7f01461032b578063d73dd6231461033e578063dd62ed3e14610360575b600080fd5b341561010057600080fd5b610108610385565b604051901515815260200160405180910390f35b341561012757600080fd5b61012f61038e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016b578082015183820152602001610153565b50505050905090810190601f1680156101985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b157600080fd5b610108600160a060020a03600435166024356103c5565b34156101d357600080fd5b6101db610431565b60405190815260200160405180910390f35b34156101f857600080fd5b610108600160a060020a0360043581169060243516604435610437565b341561022057600080fd5b61022861051d565b60405160ff909116815260200160405180910390f35b341561024957600080fd5b610108600160a060020a0360043516602435610522565b341561026b57600080fd5b61012f610692565b341561027e57600080fd5b610108600160a060020a0360043516602435610730565b34156102a057600080fd5b6101db600160a060020a036004351661082a565b34156102bf57600080fd5b610108610845565b34156102d257600080fd5b6102da6108c3565b604051600160a060020a03909116815260200160405180910390f35b341561030157600080fd5b61012f6108d2565b341561031457600080fd5b610108600160a060020a0360043516602435610909565b341561033657600080fd5b6101db610999565b341561034957600080fd5b610108600160a060020a03600435166024356109be565b341561036b57600080fd5b6101db600160a060020a0360043581169060243516610a62565b60085460ff1681565b60408051908101604052600981527f58525420546f6b656e0000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60075481565b600160a060020a038084166000908152600260209081526040808320339094168352929052908120548083111561046d57600080fd5b600160a060020a0384166000908152600160205260409020548381011161049357600080fd5b61049e858585610a8d565b506104af818463ffffffff610b5f16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b600354600090819033600160a060020a0390811691161461054257600080fd5b60085460ff161561055257600080fd5b600654600754111561056357600080fd5b6005546105929061058590670de0b6b3a764000002606463ffffffff610b7116565b849063ffffffff610b8816565b6006549091506105a8908263ffffffff610b5f16565b60075411156105b657600080fd5b6007546105c9908263ffffffff610bba16565b600755600160a060020a0384166000908152600160205260409020546105f5908263ffffffff610bba16565b600160a060020a0385166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859083905190815260200160405180910390a2600160a060020a03841660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3600191505b5092915050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107285780601f106106fd57610100808354040283529160200191610728565b820191906000526020600020905b81548152906001019060200180831161070b57829003601f168201915b505050505081565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561078d57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556107c4565b61079d818463ffffffff610b5f16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461086357600080fd5b60085460ff161561087357600080fd5b600654600754111561088457600080fd5b6008805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600381527f5852540000000000000000000000000000000000000000000000000000000000602082015281565b600060403660441461091757fe5b600160a060020a03331660009081526001602052604090205483111561093c57600080fd5b610947338585610a8d565b5083600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a35060019392505050565b60035460009033600160a060020a039081169116146109b757600080fd5b5060065490565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546109f6908363ffffffff610bba16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000600160a060020a03841615801590610ab9575082600160a060020a031684600160a060020a031614155b1515610ac457600080fd5b600160a060020a0383161515610ad957600080fd5b600160a060020a038416600090815260016020526040902054610b02908363ffffffff610b5f16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610b37908363ffffffff610bba16565b600160a060020a03841660009081526001602081905260409091209190915590509392505050565b600082821115610b6b57fe5b50900390565b6000808284811515610b7f57fe5b04949350505050565b600080831515610b9b576000915061068b565b50828202828482811515610bab57fe5b0414610bb357fe5b9392505050565b600082820183811015610bb357fe00a165627a7a72305820cdd8fc08922155c0e2f5a23d367e8094297242e2d8c89f9da49e6c1df900d8aa0029"
}