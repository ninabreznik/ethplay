{
  "address": "0xf44745fbd41f6a1ba151df190db0564c5fcc4410",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Copytrack: Old Token",
  "contractName": "Token",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-19\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n//\n// CPYToken is a standard ERC20 token with additional functionality:\n// - tokenSaleContract receives the whole balance for distribution\n// - Tokens are only transferable by the tokenSaleContract until finalization\n// - Token holders can burn their tokens after finalization\n//\ncontract Token is StandardToken {\n\n    string  public constant name   = \"COPYTRACK Token\";\n    string  public constant symbol = \"CPY\";\n\n    uint8 public constant   decimals = 18;\n\n    uint256 constant EXA       = 10 ** 18;\n    uint256 public totalSupply = 100 * 10 ** 6 * EXA;\n\n    bool public finalized = false;\n\n    address public tokenSaleContract;\n\n    //\n    // EVENTS\n    //\n    event Finalized();\n\n    event Burnt(address indexed _from, uint256 _amount);\n\n\n    // Initialize the token with the tokenSaleContract and transfer the whole balance to it\n    function Token(address _tokenSaleContract)\n        public\n    {\n        // Make sure address is set\n        require(_tokenSaleContract != 0);\n\n        balances[_tokenSaleContract] = totalSupply;\n\n        tokenSaleContract = _tokenSaleContract;\n    }\n\n\n    // Implementation of the standard transfer method that takes the finalize flag into account\n    function transfer(address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        checkTransferAllowed(msg.sender);\n\n        return super.transfer(_to, _value);\n    }\n\n\n    // Implementation of the standard transferFrom method that takes into account the finalize flag\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        checkTransferAllowed(msg.sender);\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    function checkTransferAllowed(address _sender)\n        private\n        view\n    {\n        if (finalized) {\n            // Every token holder should be allowed to transfer tokens once token was finalized\n            return;\n        }\n\n        // Only allow tokenSaleContract to transfer tokens before finalization\n        require(_sender == tokenSaleContract);\n    }\n\n\n    // Finalize method marks the point where token transfers are finally allowed for everybody\n    function finalize()\n        external\n        returns (bool success)\n    {\n        require(!finalized);\n        require(msg.sender == tokenSaleContract);\n\n        finalized = true;\n\n        Finalized();\n\n        return true;\n    }\n\n\n    // Implement a burn function to permit msg.sender to reduce its balance which also reduces totalSupply\n    function burn(uint256 _value)\n        public\n        returns (bool success)\n    {\n        require(finalized);\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n\n        Burnt(msg.sender, _value);\n\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenSaleContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526a52b7d2dcc80cd2e40000006003556004805460ff19169055341561002857600080fd5b604051602080610b4083398101604052808051915050600160a060020a038116151561005357600080fd5b600354600160a060020a039091166000818152600160205260409020919091556004805461010090920261010060a860020a0319909216919091179055610aa18061009f6000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd1461019f57806323b872dd146101c4578063313ce567146101ec57806342966c68146102155780634bb278f31461022b5780635d5aa2771461023e578063661884631461026d57806370a082311461028f57806395d89b41146102ae578063a9059cbb146102c1578063b3f05b97146102e3578063d73dd623146102f6578063dd62ed3e14610318575b600080fd5b34156100ea57600080fd5b6100f261033d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012e578082015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017457600080fd5b61018b600160a060020a0360043516602435610374565b604051901515815260200160405180910390f35b34156101aa57600080fd5b6101b26103e0565b60405190815260200160405180910390f35b34156101cf57600080fd5b61018b600160a060020a03600435811690602435166044356103e6565b34156101f757600080fd5b6101ff610404565b60405160ff909116815260200160405180910390f35b341561022057600080fd5b61018b600435610409565b341561023657600080fd5b61018b6104df565b341561024957600080fd5b610251610551565b604051600160a060020a03909116815260200160405180910390f35b341561027857600080fd5b61018b600160a060020a0360043516602435610565565b341561029a57600080fd5b6101b2600160a060020a036004351661065f565b34156102b957600080fd5b6100f261067a565b34156102cc57600080fd5b61018b600160a060020a03600435166024356106b1565b34156102ee57600080fd5b61018b6106cd565b341561030157600080fd5b61018b600160a060020a03600435166024356106d6565b341561032357600080fd5b6101b2600160a060020a036004358116906024351661077a565b60408051908101604052600f81527f434f5059545241434b20546f6b656e0000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035481565b60006103f1336107a5565b6103fc8484846107d7565b949350505050565b601281565b60045460009060ff16151561041d57600080fd5b600160a060020a03331660009081526001602052604090205482111561044257600080fd5b600160a060020a03331660009081526001602052604090205461046b908363ffffffff61095916565b600160a060020a033316600090815260016020526040902055600354610497908363ffffffff61095916565b600355600160a060020a0333167f919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b18360405190815260200160405180910390a2506001919050565b60045460009060ff16156104f257600080fd5b60045433600160a060020a03908116610100909204161461051257600080fd5b6004805460ff191660011790557f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a150600190565b6004546101009004600160a060020a031681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156105c257600160a060020a0333811660009081526002602090815260408083209388168352929052908120556105f9565b6105d2818463ffffffff61095916565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60408051908101604052600381527f4350590000000000000000000000000000000000000000000000000000000000602082015281565b60006106bc336107a5565b6106c6838361096b565b9392505050565b60045460ff1681565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461070e908363ffffffff610a6616565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60045460ff16156107b5576107d4565b600454600160a060020a0382811661010090920416146107d457600080fd5b50565b6000600160a060020a03831615156107ee57600080fd5b600160a060020a03841660009081526001602052604090205482111561081357600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561084657600080fd5b600160a060020a03841660009081526001602052604090205461086f908363ffffffff61095916565b600160a060020a0380861660009081526001602052604080822093909355908516815220546108a4908363ffffffff610a6616565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546108ec908363ffffffff61095916565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60008282111561096557fe5b50900390565b6000600160a060020a038316151561098257600080fd5b600160a060020a0333166000908152600160205260409020548211156109a757600080fd5b600160a060020a0333166000908152600160205260409020546109d0908363ffffffff61095916565b600160a060020a033381166000908152600160205260408082209390935590851681522054610a05908363ffffffff610a6616565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6000828201838110156106c657fe00a165627a7a723058200bda04732c67142e533d8019370cd6c5ef97c1206b5378b38930d806da8859a90029000000000000000000000000f04436b2edaa1b777045e1eefc6dba8bd2aebab8",
  "constructorArguments": "000000000000000000000000f04436b2edaa1b777045e1eefc6dba8bd2aebab8"
}