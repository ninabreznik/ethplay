{
  "address": "0x96422fa3f9cc8ecbf1e092881c74dd3cc8e70b36",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Whitelist",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-05\n*/\n\npragma solidity 0.4.24;\n\n// File: contracts/lib/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"only owner is able to call this function\");\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/Whitelist.sol\n\n/**\n * @title Whitelist - crowdsale whitelist contract\n * @author Gustavo Guimaraes - <[emailÂ protected]>\n */\ncontract Whitelist is Ownable {\n    mapping(address => bool) public allowedAddresses;\n\n    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\n\n    /**\n    * @dev Adds single address to whitelist.\n    * @param _address Address to be added to the whitelist\n    */\n    function addToWhitelist(address _address) external onlyOwner {\n        allowedAddresses[_address] = true;\n        emit WhitelistUpdated(now, \"Added\", _address);\n    }\n\n    /**\n     * @dev add various whitelist addresses\n     * @param _addresses Array of ethereum addresses\n     */\n    function addManyToWhitelist(address[] _addresses) external onlyOwner {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            allowedAddresses[_addresses[i]] = true;\n            emit WhitelistUpdated(now, \"Added\", _addresses[i]);\n        }\n    }\n\n    /**\n     * @dev remove whitelist addresses\n     * @param _addresses Array of ethereum addresses\n     */\n    function removeManyFromWhitelist(address[] _addresses) public onlyOwner {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            allowedAddresses[_addresses[i]] = false;\n            emit WhitelistUpdated(now, \"Removed\", _addresses[i]);\n        }\n    }\n}",
  "bytecode": "608060405260008054600160a060020a03191633179055610778806100256000396000f3006080604052600436106100825763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634120657a8114610087578063715018a6146100bc5780638c10671c146100d35780638da5cb5b146100f3578063e43252d714610124578063f2fde38b14610145578063f674d79914610166575b600080fd5b34801561009357600080fd5b506100a8600160a060020a03600435166101bb565b604080519115158252519081900360200190f35b3480156100c857600080fd5b506100d16101d0565b005b3480156100df57600080fd5b506100d16004803560248101910135610289565b3480156100ff57600080fd5b506101086103d0565b60408051600160a060020a039092168252519081900360200190f35b34801561013057600080fd5b506100d1600160a060020a03600435166103df565b34801561015157600080fd5b506100d1600160a060020a03600435166104d1565b34801561017257600080fd5b50604080516020600480358082013583810280860185019096528085526100d1953695939460249493850192918291850190849080828437509497506105419650505050505050565b60016020526000908152604090205460ff1681565b600054600160a060020a03163314610234576040805160e560020a62461bcd028152602060048201526028602482015260008051602061070d833981519152604482015260008051602061072d833981519152606482015290519081900360840190fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008054600160a060020a031633146102ee576040805160e560020a62461bcd028152602060048201526028602482015260008051602061070d833981519152604482015260008051602061072d833981519152606482015290519081900360840190fd5b5060005b818110156103cb57600180600085858581811061030b57fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff191691151591909117905582828281811061034857fe5b6040805142815260208181018390526005828401527f416464656400000000000000000000000000000000000000000000000000000060608301529151600160a060020a0392909302949094013516927fbebda5b98dbe667d32bbef7f217a2f6e5fe897de5e9a388d9f8472f88478efce925081900360800190a26001016102f2565b505050565b600054600160a060020a031681565b600054600160a060020a03163314610443576040805160e560020a62461bcd028152602060048201526028602482015260008051602061070d833981519152604482015260008051602061072d833981519152606482015290519081900360840190fd5b600160a060020a038116600081815260016020818152604092839020805460ff191690921790915581514281529081018290526005818301527f4164646564000000000000000000000000000000000000000000000000000000606082015290517fbebda5b98dbe667d32bbef7f217a2f6e5fe897de5e9a388d9f8472f88478efce9181900360800190a250565b600054600160a060020a03163314610535576040805160e560020a62461bcd028152602060048201526028602482015260008051602061070d833981519152604482015260008051602061072d833981519152606482015290519081900360840190fd5b61053e8161068f565b50565b60008054600160a060020a031633146105a6576040805160e560020a62461bcd028152602060048201526028602482015260008051602061070d833981519152604482015260008051602061072d833981519152606482015290519081900360840190fd5b5060005b815181101561068b5760006001600084848151811015156105c757fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055815182908290811061060757fe5b6020908102909101810151604080514281529283018190526007838201527f52656d6f76656400000000000000000000000000000000000000000000000000606084015251600160a060020a03909116917fbebda5b98dbe667d32bbef7f217a2f6e5fe897de5e9a388d9f8472f88478efce919081900360800190a26001016105aa565b5050565b600160a060020a03811615156106a457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556006f6e6c79206f776e65722069732061626c6520746f2063616c6c20746869732066756e6374696f6e000000000000000000000000000000000000000000000000a165627a7a72305820027d5bfa42d56ebb193ce851b975fe1458afe13fe441d5dce5644b309b5a546e0029"
}