{
  "address": "0x5d60d8d7ef6d37e16ebabc324de3be57f135e0bc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "MyBit Token",
  "contractName": "ERC20",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-08\n*/\n\npragma solidity 0.4.23;\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Receive approval and then execute function\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint tokens, address token, bytes data) public;\n}\n\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n// Note: Div only\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// ------------------------------------------------------------------------\n// Standard ERC20 Token Contract.\n// Fixed Supply with burn capabilities\n// ------------------------------------------------------------------------\ncontract ERC20 is ERC20Interface{\n    using SafeMath for uint; \n\n    // ------------------------------------------------------------------------\n    /// Token supply, balances and allowance\n    // ------------------------------------------------------------------------\n    uint internal supply;\n    mapping (address => uint) internal balances;\n    mapping (address => mapping (address => uint)) internal allowed;\n\n    // ------------------------------------------------------------------------\n    // Token Information\n    // ------------------------------------------------------------------------\n    string public name;                   // Full Token name\n    uint8 public decimals;                // How many decimals to show\n    string public symbol;                 // An identifier\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor(uint _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) \n    public {\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n        supply = _initialAmount;                        // Update total supply\n        name = _tokenName;                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n        emit Transfer(address(0), msg.sender, _initialAmount);    // Transfer event indicating token creation\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer _amount tokens to address _to \n    // Sender must have enough tokens. Cannot send to 0x0.\n    // ------------------------------------------------------------------------\n    function transfer(address _to, uint _amount) \n    public \n    returns (bool success) {\n        require(_to != address(0));         // Use burn() function instead\n        require(_to != address(this));\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer _amount of tokens if _from has allowed msg.sender to do so\n    //  _from must have enough tokens + must have approved msg.sender \n    // ------------------------------------------------------------------------\n    function transferFrom(address _from, address _to, uint _amount) \n    public \n    returns (bool success) {\n        require(_to != address(0)); \n        require(_to != address(this)); \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    // ------------------------------------------------------------------------\n    function approve(address _spender, uint _amount) \n    public \n    returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token holder can notify a contract that it has been approved\n    // to spend _amount of tokens\n    // ------------------------------------------------------------------------\n    function approveAndCall(address _spender, uint _amount, bytes _data) \n    public \n    returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _amount, this, _data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Removes senders tokens from supply.\n    // Lowers user balance and totalSupply by _amount\n    // ------------------------------------------------------------------------   \n    function burn(uint _amount) \n    public \n    returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        supply = supply.sub(_amount);\n        emit LogBurn(msg.sender, _amount);\n        emit Transfer(msg.sender, address(0), _amount);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // An approved sender can burn _amount tokens of user _from\n    // Lowers user balance and supply by _amount \n    // ------------------------------------------------------------------------    \n    function burnFrom(address _from, uint _amount) \n    public \n    returns (bool success) {\n        balances[_from] = balances[_from].sub(_amount);                         // Subtract from the targeted balance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);             // Subtract from the sender's allowance\n        supply = supply.sub(_amount);                              // Update supply\n        emit LogBurn(_from, _amount);\n        emit Transfer(_from, address(0), _amount);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the number of tokens in circulation\n    // ------------------------------------------------------------------------\n    function totalSupply()\n    public \n    view \n    returns (uint tokenSupply) { \n        return supply; \n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the token balance of user\n    // ------------------------------------------------------------------------\n    function balanceOf(address _tokenHolder) \n    public \n    view \n    returns (uint balance) {\n        return balances[_tokenHolder];\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns amount of tokens _spender is allowed to transfer or burn\n    // ------------------------------------------------------------------------\n    function allowance(address _tokenHolder, address _spender) \n    public \n    view \n    returns (uint remaining) {\n        return allowed[_tokenHolder][_spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Fallback function\n    // Won't accept ETH\n    // ------------------------------------------------------------------------\n    function () \n    public \n    payable {\n        revert();\n    }\n\n    // ------------------------------------------------------------------------\n    // Event: Logs the amount of tokens burned and the address of the burner\n    // ------------------------------------------------------------------------\n    event LogBurn(address indexed _burner, uint indexed _amountBurned); \n}\n\n// ------------------------------------------------------------------------\n// This contract is in-charge of receiving old MyBit tokens and returning\n// New MyBit tokens to users.\n// Note: Old tokens have 8 decimal places, while new tokens have 18 decimals\n// 1.00000000 OldMyBit == 36.000000000000000000 NewMyBit\n// ------------------------------------------------------------------------  \ncontract TokenSwap { \n  using SafeMath for uint256; \n\n\n  // ------------------------------------------------------------------------\n  // Token addresses\n  // ------------------------------------------------------------------------  \n  address public oldTokenAddress;\n  ERC20 public newToken; \n\n  // ------------------------------------------------------------------------\n  // Token Transition Info\n  // ------------------------------------------------------------------------  \n  uint256 public scalingFactor = 36;          // 1 OldMyBit = 36 NewMyBit\n  uint256 public tenDecimalPlaces = 10**10; \n\n\n  // ------------------------------------------------------------------------\n  // Old Token Supply \n  // ------------------------------------------------------------------------  \n  uint256 public oldCirculatingSupply;      // Old MyBit supply in circulation (8 decimals)\n\n\n  // ------------------------------------------------------------------------\n  // New Token Supply\n  // ------------------------------------------------------------------------  \n  uint256 public totalSupply = 18000000000000000 * tenDecimalPlaces;      // New token supply. (Moving from 8 decimal places to 18)\n  uint256 public circulatingSupply = 10123464384447336 * tenDecimalPlaces;   // New user supply. \n  uint256 public foundationSupply = totalSupply - circulatingSupply;      // Foundation supply. \n\n  // ------------------------------------------------------------------------\n  // Distribution numbers \n  // ------------------------------------------------------------------------\n  uint256 public tokensRedeemed = 0;    // Total number of new tokens redeemed.\n\n\n  // ------------------------------------------------------------------------\n  // Double check that all variables are set properly before swapping tokens\n  // ------------------------------------------------------------------------\n  constructor(address _myBitFoundation, address _oldTokenAddress)\n  public { \n    oldTokenAddress = _oldTokenAddress; \n    oldCirculatingSupply = ERC20Interface(oldTokenAddress).totalSupply(); \n    assert ((circulatingSupply.div(oldCirculatingSupply.mul(tenDecimalPlaces))) == scalingFactor);\n    assert (oldCirculatingSupply.mul(scalingFactor.mul(tenDecimalPlaces)) == circulatingSupply); \n    newToken = new ERC20(totalSupply, \"MyBit\", 18, \"MYB\"); \n    newToken.transfer(_myBitFoundation, foundationSupply);\n  }\n\n  // ------------------------------------------------------------------------\n  // Users can trade old MyBit tokens for new MyBit tokens here \n  // Must approve this contract as spender to swap tokens\n  // ------------------------------------------------------------------------\n  function swap(uint256 _amount) \n  public \n  noMint\n  returns (bool){ \n    require(ERC20Interface(oldTokenAddress).transferFrom(msg.sender, this, _amount));\n    uint256 newTokenAmount = _amount.mul(scalingFactor).mul(tenDecimalPlaces);   // Add 10 more decimals to number of tokens\n    assert(tokensRedeemed.add(newTokenAmount) <= circulatingSupply);       // redeemed tokens should never exceed circulatingSupply\n    tokensRedeemed = tokensRedeemed.add(newTokenAmount);\n    require(newToken.transfer(msg.sender, newTokenAmount));\n    emit LogTokenSwap(msg.sender, _amount, block.timestamp);\n    return true;\n  }\n\n  // ------------------------------------------------------------------------\n  // Alias for swap(). Called by old token contract when approval to transfer \n  // tokens has been given. \n  // ------------------------------------------------------------------------\n  function receiveApproval(address _from, uint256 _amount, address _token, bytes _data)\n  public \n  noMint\n  returns (bool){ \n    require(_token == oldTokenAddress);\n    require(ERC20Interface(oldTokenAddress).transferFrom(_from, this, _amount));\n    uint256 newTokenAmount = _amount.mul(scalingFactor).mul(tenDecimalPlaces);   // Add 10 more decimals to number of tokens\n    assert(tokensRedeemed.add(newTokenAmount) <= circulatingSupply);    // redeemed tokens should never exceed circulatingSupply\n    tokensRedeemed = tokensRedeemed.add(newTokenAmount);\n    require(newToken.transfer(_from, newTokenAmount));\n    emit LogTokenSwap(_from, _amount, block.timestamp);\n    return true;\n  }\n\n  // ------------------------------------------------------------------------\n  // Events \n  // ------------------------------------------------------------------------\n  event LogTokenSwap(address indexed _sender, uint256 indexed _amount, uint256 indexed _timestamp); \n\n\n  // ------------------------------------------------------------------------\n  // Modifiers \n  // ------------------------------------------------------------------------\n\n\n  // ------------------------------------------------------------------------\n  // This ensures that the owner of the previous token doesn't mint more \n  // tokens during swap\n  // ------------------------------------------------------------------------\n  modifier noMint { \n    require(oldCirculatingSupply == ERC20Interface(oldTokenAddress).totalSupply());\n    _;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amountBurned\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604051620016a0380380620016a08339810180604052810190808051906020019092919080518201929190602001805190602001909291908051820192919050505083600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836000819055508260039080519060200190620000b79291906200015c565b5081600460006101000a81548160ff021916908360ff1602179055508060059080519060200190620000eb9291906200015c565b503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3505050506200020b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019f57805160ff1916838001178555620001d0565b82800160010185558215620001d0579182015b82811115620001cf578251825591602001919060010190620001b2565b5b509050620001df9190620001e3565b5090565b6200020891905b8082111562000204576000816000905550600101620001ea565b5090565b90565b611485806200021b6000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014f57806318160ddd146101b457806323b872dd146101df578063313ce5671461026457806342966c681461029557806370a08231146102da57806379cc67901461033157806395d89b4114610396578063a9059cbb14610426578063cae9ca511461048b578063dd62ed3e14610536575b600080fd5b3480156100cb57600080fd5b506100d46105ad565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101145780820151818401526020810190506100f9565b50505050905090810190601f1680156101415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015b57600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061064b565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101c961073d565b6040518082815260200191505060405180910390f35b3480156101eb57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610746565b604051808215151515815260200191505060405180910390f35b34801561027057600080fd5b50610279610a67565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102a157600080fd5b506102c060048036038101908080359060200190929190505050610a7a565b604051808215151515815260200191505060405180910390f35b3480156102e657600080fd5b5061031b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bdf565b6040518082815260200191505060405180910390f35b34801561033d57600080fd5b5061037c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c28565b604051808215151515815260200191505060405180910390f35b3480156103a257600080fd5b506103ab610e9d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103eb5780820151818401526020810190506103d0565b50505050905090810190601f1680156104185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043257600080fd5b50610471600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f3b565b604051808215151515815260200191505060405180910390f35b34801561049757600080fd5b5061051c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061114c565b604051808215151515815260200191505060405180910390f35b34801561054257600080fd5b50610597600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061139b565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561078357600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107be57600080fd5b61081082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461142290919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108e282600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461142290919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109b482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461143b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600460009054906101000a900460ff1681565b6000610ace82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461142290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b268260005461142290919063ffffffff16565b600081905550813373ffffffffffffffffffffffffffffffffffffffff167f38d762ef507761291a578e921acfe29c1af31a7331ea03e391cf16cfc4d4f58160405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610c7c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461142290919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d4e82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461142290919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610de38260005461142290919063ffffffff16565b600081905550818373ffffffffffffffffffffffffffffffffffffffff167f38d762ef507761291a578e921acfe29c1af31a7331ea03e391cf16cfc4d4f58160405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f335780601f10610f0857610100808354040283529160200191610f33565b820191906000526020600020905b815481529060010190602001808311610f1657829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f7857600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610fb357600080fd5b61100582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461142290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061109a82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461143b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561132957808201518184015260208101905061130e565b50505050905090810190601f1680156113565780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561137857600080fd5b505af115801561138c573d6000803e3d6000fd5b50505050600190509392505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561143057fe5b818303905092915050565b600080828401905083811015151561144f57fe5b80915050929150505600a165627a7a723058201482116ec0ae1ef825988d2297a0bee6965b7ac319a20a8eab98c8a02395c61a002900000000000000000000000000000000000000000094e47b8d681715340000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000054d7942697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d59420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000094e47b8d681715340000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000054d7942697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d59420000000000000000000000000000000000000000000000000000000000"
}