{
  "address": "0x48d8f22d45e40f34cb7c10799f31246f134e9b7f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherFlipGold",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-14\n*/\n\n// <ORACLIZE_API>\n/*\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016 Oraclize LTD\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\npragma solidity ^0.4.11;//please import oraclizeAPI_pre0.4.sol when solidity < 0.4.0\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) payable returns (bytes32 _id);\n    function getPrice(string _datasource) returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\n    function useCoupon(string _coupon);\n    function setProofType(byte _proofType);\n    function setConfig(bytes32 _config);\n    function setCustomGasPrice(uint _gasPrice);\n    function randomDS_getSessionPubKeyHash() returns(bytes32);\n}\ncontract OraclizeAddrResolverI {\n    function getAddress() returns (address _addr);\n}\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofType_Android = 0x20;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR;\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork();\n        oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        oraclize.useCoupon(code);\n        _;\n    }\n\n    function oraclize_setNetwork() internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            oraclize_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            oraclize_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n\n    function __callback(bytes32 myid, string result) {\n        __callback(myid, result, new bytes(0));\n    }\n    function __callback(bytes32 myid, string result, bytes proof) {\n        myid;\n        result;\n        proof;\n    }\n    \n    function oraclize_useCoupon(string code) oraclizeAPI internal {\n        oraclize.useCoupon(code);\n    }\n\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource);\n    }\n\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];       \n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];       \n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(gasPrice);\n    }\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\n        return oraclize.setConfig(config);\n    }\n    \n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n        \n        _addr;\n        _size;\n    }\n\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string _a, string _b) internal returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n    function indexOf(string _haystack, string _needle) internal returns (int) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n            return -1;\n        else if(h.length > (2**128 -1))\n            return -1;\n        else\n        {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i ++)\n            {\n                if (h[i] == n[0])\n                {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n                    {\n                        subindex++;\n                    }\n                    if(subindex == n.length)\n                        return int(i);\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b > 0) mint *= 10**_b;\n        return mint;\n    }\n\n    function uint2str(uint i) internal returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n    \n    function stra2cbor(string[] arr) internal returns (bytes) {\n            uint arrlen = arr.length;\n\n            // get correct cbor output length\n            uint outputlen = 0;\n            bytes[] memory elemArray = new bytes[](arrlen);\n            for (uint i = 0; i < arrlen; i++) {\n                elemArray[i] = (bytes(arr[i]));\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n            }\n            uint ctr = 0;\n            uint cborlen = arrlen + 0x80;\n            outputlen += byte(cborlen).length;\n            bytes memory res = new bytes(outputlen);\n\n            while (byte(cborlen).length > ctr) {\n                res[ctr] = byte(cborlen)[ctr];\n                ctr++;\n            }\n            for (i = 0; i < arrlen; i++) {\n                res[ctr] = 0x5F;\n                ctr++;\n                for (uint x = 0; x < elemArray[i].length; x++) {\n                    // if there's a bug with larger strings, this may be the culprit\n                    if (x % 23 == 0) {\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n                        elemcborlen += 0x40;\n                        uint lctr = ctr;\n                        while (byte(elemcborlen).length > ctr - lctr) {\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n                            ctr++;\n                        }\n                    }\n                    res[ctr] = elemArray[i][x];\n                    ctr++;\n                }\n                res[ctr] = 0xFF;\n                ctr++;\n            }\n            return res;\n        }\n\n    function ba2cbor(bytes[] arr) internal returns (bytes) {\n            uint arrlen = arr.length;\n\n            // get correct cbor output length\n            uint outputlen = 0;\n            bytes[] memory elemArray = new bytes[](arrlen);\n            for (uint i = 0; i < arrlen; i++) {\n                elemArray[i] = (bytes(arr[i]));\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n            }\n            uint ctr = 0;\n            uint cborlen = arrlen + 0x80;\n            outputlen += byte(cborlen).length;\n            bytes memory res = new bytes(outputlen);\n\n            while (byte(cborlen).length > ctr) {\n                res[ctr] = byte(cborlen)[ctr];\n                ctr++;\n            }\n            for (i = 0; i < arrlen; i++) {\n                res[ctr] = 0x5F;\n                ctr++;\n                for (uint x = 0; x < elemArray[i].length; x++) {\n                    // if there's a bug with larger strings, this may be the culprit\n                    if (x % 23 == 0) {\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n                        elemcborlen += 0x40;\n                        uint lctr = ctr;\n                        while (byte(elemcborlen).length > ctr - lctr) {\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n                            ctr++;\n                        }\n                    }\n                    res[ctr] = elemArray[i][x];\n                    ctr++;\n                }\n                res[ctr] = 0xFF;\n                ctr++;\n            }\n            return res;\n        }\n        \n        \n    string oraclize_network_name;\n    function oraclize_setNetworkName(string _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n    \n    function oraclize_getNetworkName() internal returns (string) {\n        return oraclize_network_name;\n    }\n    \n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        sessionKeyHash_bytes32;\n        assembly {\n            mstore(unonce, 0x20)\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes[3] memory args = [unonce, nbytes, sessionKeyHash]; \n        bytes32 queryId = oraclize_query(_delay, \"random\", args, _customGasLimit);\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\n        return queryId;\n    }\n    \n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n        oraclize_randomDS_args[queryId] = commitment;\n    }\n    \n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n        bool sigok;\n        address signer;\n        \n        bytes32 sigr;\n        bytes32 sigs;\n        \n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n        \n        \n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n        if (address(sha3(pubkey)) == signer) return true;\n        else {\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n            return (address(sha3(pubkey)) == signer);\n        }\n    }\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n        bool sigok;\n        \n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n        \n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n        \n        bytes memory tosign2 = new bytes(1+65+32);\n        tosign2[0] = 1; //role\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n        \n        if (sigok == false) return false;\n        \n        \n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n        \n        bytes memory tosign3 = new bytes(1+65);\n        tosign3[0] = 0xFE;\n        copyBytes(proof, 3, 65, tosign3, 1);\n        \n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n        \n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n        \n        return sigok;\n    }\n    \n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\n        \n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) throw;\n        \n        _;\n    }\n    \n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n        \n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) return 2;\n        \n        return 0;\n    }\n    \n    function matchBytes32Prefix(bytes32 content, bytes prefix) internal returns (bool){\n        bool match_ = true;\n        \n        for (var i=0; i<prefix.length; i++){\n            if (content[i] != prefix[i]) match_ = false;\n        }\n        \n        return match_;\n    }\n\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n        bool checkok;\n        \n        \n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\n        if (checkok == false) return false;\n        \n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n        \n        \n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n        checkok = matchBytes32Prefix(sha256(sig1), result);\n        if (checkok == false) return false;\n        \n        \n        // Step 4: commitment match verification, sha3(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n        \n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n        \n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[queryId];\n        } else return false;\n        \n        \n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32+8+1+32);\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n        checkok = verifySig(sha256(tosign1), sig1, sessionPubkey);\n        if (checkok == false) return false;\n        \n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n        }\n        \n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n\n    \n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal returns (bytes) {\n        uint minLength = length + toOffset;\n\n        if (to.length < minLength) {\n            // Buffer too small\n            throw; // Should be a better way?\n        }\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint i = 32 + fromOffset;\n        uint j = 32 + toOffset;\n\n        while (i < (32 + fromOffset + length)) {\n            assembly {\n                let tmp := mload(add(from, i))\n                mstore(add(to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n\n        from;\n        return to;\n    }\n    \n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        // FIXME: inline assembly can't access return values\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n        \n        hash;\n        r;\n        v;\n        s;\n        return (ret, addr);\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (sig.length != 65)\n          return (false, 0);\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n        // to match the YP range of [27, 28]\n        //\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27)\n          v += 27;\n\n        if (v != 27 && v != 28)\n            return (false, 0);\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n        \n}\n// </ORACLIZE_API>\n\n// EtherFlipGold\n\ncontract token { function transfer(address receiver, uint amount){ receiver; amount; } }\n\ncontract EtherFlipGold is usingOraclize {\n    \n    modifier ownerAction {\n         if (msg.sender != owner) throw;\n         _;\n    }\n    \n    modifier oraclizeAction {\n        if (msg.sender != oraclize_cbAddress()) throw;\n        _;\n    }\n    \n    //~ Events\n    event newRandomValue(uint roll, address player, uint amount, uint gameType); //GameType = 1\n    event proofFailed(address player, uint amount, uint gameType); //GameType = 1\n    \n    //~ Tokens\n    token public tokenReward;\n    token public bonusToken;\n    token public sponsoredBonusToken;\n\n    //~ Base setup\n    address public owner;\n    \n    //~ EtherFlipGold Properties\n    uint public generatedBytes;\n    uint public multiplier = 500;\n    uint public maxBet = (20000000000000000 * 1 wei);\n    uint public minBet = (10000000000000000 * 1 wei);\n    uint public rewardAmount = 1;\n    uint public bonusAmount;\n    uint public sponsoredBonusAmount;\n    uint public callbackGas = 250000;\n    \n    //~ Comparables\n    uint public baseComparable = 65527;\n    uint public bonusMin;\n    uint public bonusMax;\n    uint public sponsoredBonusMin;\n    uint public sponsoredBonusMax;\n\n    //~ Address & Amount hashes to accurately send transactions/winnings\n    mapping (bytes32 => address) playerAddress;\n    mapping (bytes32 => uint) playerAmount;\n\n    function EtherFlipGold() {\n        owner = msg.sender;\n        oraclize_setProof(proofType_Ledger);\n    }\n    \n    function () payable {\n        if (msg.sender != owner) {\n            if (msg.value > maxBet || msg.value < minBet) throw;\n        \n            oraclize_setProof(proofType_Ledger);\n            uint numberOfBytes = 2;\n            uint delay = 0;\n            bytes32 queryId = oraclize_newRandomDSQuery(delay, numberOfBytes, callbackGas); \n            playerAddress[queryId] = msg.sender;\n            playerAmount[queryId] = msg.value;\n        }\n    }\n    \n    function __callback(bytes32 _queryId, string _result, bytes _proof) oraclizeAction { \n        uint amount = playerAmount[_queryId];\n        if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) != 0 || _proof.length == 0) {\n            // the proof verification has failed\n            proofFailed(playerAddress[_queryId], amount, 1);\n            playerAddress[_queryId].transfer(amount);\n            delete playerAddress[_queryId];\n            delete playerAmount[_queryId];\n        } else {\n            generatedBytes = uint(sha3(_result)) % 2**(2 *8);\n            newRandomValue(generatedBytes, playerAddress[_queryId], amount, 1);\n\n            if (generatedBytes > baseComparable) {\n                playerAddress[_queryId].transfer(amount * multiplier);\n            } \n            \n            if (generatedBytes <= baseComparable && rewardAmount > 0) {\n                tokenReward.transfer(playerAddress[_queryId], rewardAmount);\n            } \n        \n            if (generatedBytes >= bonusMin && generatedBytes <= bonusMax && bonusAmount > 0) {\n                bonusToken.transfer(playerAddress[_queryId], bonusAmount);\n            }\n        \n            if (generatedBytes >= sponsoredBonusMin && generatedBytes <= sponsoredBonusMax && sponsoredBonusAmount > 0) {\n                sponsoredBonusToken.transfer(playerAddress[_queryId], sponsoredBonusAmount);\n            }\n        \n            delete playerAddress[_queryId];\n            delete playerAmount[_queryId];\n        }\n    }\n    \n    function updateMaxMinComparables(uint updatedMaxBet, uint updatedMinBet, uint updatedBaseComparable) ownerAction {\n        maxBet = updatedMaxBet * 1 wei;\n        minBet = updatedMinBet * 1 wei;\n        baseComparable = updatedBaseComparable;\n    }  \n    \n    function updateOwner(address updatedOwner) ownerAction {\n        owner = updatedOwner;\n    }\n    \n    function updateRewardToken(address updatedToken, uint updatedRewardAmount) ownerAction {\n        tokenReward = token(updatedToken);\n        rewardAmount = updatedRewardAmount;\n    }\n    \n    function refundTransfer(address outboundAddress, uint amount) ownerAction {        \n        outboundAddress.transfer(amount);\n    }\n    \n    function walletSend(address tokenAddress, uint amount, address outboundAddress) ownerAction {\n        token chosenToken = token(tokenAddress);\n        chosenToken.transfer(outboundAddress, amount);\n    }\n    \n    function updateGameSpecifics(uint newGas, uint newMultiplier) ownerAction {\n        callbackGas = newGas;\n        multiplier = newMultiplier;\n    }\n    \n    function setBonusToken(address newBonusToken, uint newBonusAmount, uint newBonusMin, uint newBonusMax, address newSponsoredBonusToken, uint newSponsoredBonusAmount, uint newSBonusMin, uint newSBonusMax) ownerAction {\n        bonusToken = token(newBonusToken);\n        bonusAmount = newBonusAmount;\n        bonusMin = newBonusMin;\n        bonusMax = newBonusMax;\n        \n        sponsoredBonusToken = token(newSponsoredBonusToken);\n        sponsoredBonusAmount = newSponsoredBonusAmount;\n        sponsoredBonusMin = newSBonusMin;\n        sponsoredBonusMax = newSBonusMax;\n    }\n}",
  "bytecode": "60606040526101f4600a5566470de4df820000600b55662386f26fc10000600c556001600d556203d09060105561fff760115534156200003b57fe5b5b60088054600160a060020a03191633600160a060020a0316179055620000907f30000000000000000000000000000000000000000000000000000000000000006401000000006200009781026200063f1704565b5b620006f2565b600054600160a060020a03161580620000d25750600054620000d090600160a060020a0316640100000000620011b96200022782021704565b155b15620000f257620000f0640100000000620011c16200022f82021704565b505b600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b15156200016757fe5b6102c65a03f115156200017657fe5b505060408051805160018054600160a060020a031916600160a060020a0392831617908190557f688dcfd70000000000000000000000000000000000000000000000000000000083527fff000000000000000000000000000000000000000000000000000000000000008616600484015292519216925063688dcfd791602480830192600092919082900301818387803b15156200021057fe5b6102c65a03f115156200021f57fe5b5050505b5b50565b803b5b919050565b6000806200025f731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620011b96200022782021704565b1115620002e25760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152620002d99064010000000062001a5c6200062e82021704565b5060016200062b565b60006200031173c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620011b96200022782021704565b1115620003945760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152620002d99064010000000062001a5c6200062e82021704565b5060016200062b565b6000620003c373b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620011b96200022782021704565b1115620004465760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152620002d99064010000000062001a5c6200062e82021704565b5060016200062b565b60006200047573146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620011b96200022782021704565b1115620004f85760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152620002d99064010000000062001a5c6200062e82021704565b5060016200062b565b600062000527736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620011b96200022782021704565b11156200055d575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016200062b565b60006200058c7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620011b96200022782021704565b1115620005c2575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016200062b565b6000620005f17351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620011b96200022782021704565b111562000627575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016200062b565b5060005b90565b80516200064390600290602084019062000648565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200068b57805160ff1916838001178555620006bb565b82800160010185558215620006bb579182015b82811115620006bb5782518255916020019190600101906200069e565b5b50620006ca929150620006ce565b5090565b6200062b91905b80821115620006ca5760008155600101620006d5565b5090565b90565b612fe380620007026000396000f300606060405236156101385763ffffffff60e060020a6000350416631b3ed72281146101f25780631b87d58a1461021457806323d32d6a1461023657806327dc297e146102585780632e5b2168146102b15780632e6b2662146102d357806338bbfa50146102f55780633b5e53761461038b5780633e4b20cf146103ad57806341d4a1ab146103c55780636e66f6e9146103f15780637aba86d21461041d578063880cdc311461043f5780638da5cb5b1461045d5780639619367d14610489578063a10132ad146104ab578063a824e636146104cd578063abadaf9a146104f5578063b65b4c9a14610517578063ba82c89714610539578063c8d52ee31461055a578063cbd5131b1461057b578063e0f8da971461059d578063e2e9e6e8146105c9578063f7b2a7be146105e4578063ff3af97f14610606575b6101f05b6008546000908190819033600160a060020a039081169116146101ea57600b5434118061016a5750600c5434105b156101755760006000fd5b61019e7f300000000000000000000000000000000000000000000000000000000000000061063f565b60029250600091506101b38284601054610790565b60008181526016602090815260408083208054600160a060020a03191633600160a060020a03161790556017909152902034905590505b5b505050565b005b34156101fa57fe5b610202610aa1565b60408051918252519081900360200190f35b341561021c57fe5b610202610aa7565b60408051918252519081900360200190f35b341561023e57fe5b610202610aad565b60408051918252519081900360200190f35b341561026057fe5b60408051602060046024803582810135601f81018590048502860185019096528585526101f09583359593946044949392909201918190840183828082843750949650610ab395505050505050565b005b34156102b957fe5b610202610ae3565b60408051918252519081900360200190f35b34156102db57fe5b610202610ae9565b60408051918252519081900360200190f35b34156102fd57fe5b60408051602060046024803582810135601f81018590048502860185019096528585526101f0958335959394604494939290920191819084018382808284375050604080516020601f89358b01803591820183900483028401830190945280835297999881019791965091820194509250829150840183828082843750949650610aef95505050505050565b005b341561039357fe5b610202610f22565b60408051918252519081900360200190f35b34156103b557fe5b6101f0600435602435610f28565b005b34156103cd57fe5b6103d5610f54565b60408051600160a060020a039092168252519081900360200190f35b34156103f957fe5b6103d5610f63565b60408051600160a060020a039092168252519081900360200190f35b341561042557fe5b610202610f72565b60408051918252519081900360200190f35b341561044757fe5b6101f0600160a060020a0360043516610f78565b005b341561046557fe5b6103d5610fb4565b60408051600160a060020a039092168252519081900360200190f35b341561049157fe5b610202610fc3565b60408051918252519081900360200190f35b34156104b357fe5b610202610fc9565b60408051918252519081900360200190f35b34156104d557fe5b6101f0600160a060020a036004358116906024359060443516610fcf565b005b34156104fd57fe5b610202611059565b60408051918252519081900360200190f35b341561051f57fe5b61020261105f565b60408051918252519081900360200190f35b341561054157fe5b6101f0600160a060020a0360043516602435611065565b005b341561056257fe5b6101f0600160a060020a03600435166024356110a7565b005b341561058357fe5b6102026110f6565b60408051918252519081900360200190f35b34156105a557fe5b6103d56110fc565b60408051600160a060020a039092168252519081900360200190f35b34156105d157fe5b6101f060043560243560443561110b565b005b34156105ec57fe5b61020261113d565b60408051918252519081900360200190f35b341561060e57fe5b6101f0600160a060020a036004358116906024359060443590606435906084351660a43560c43560e435611143565b005b600054600160a060020a03161580610669575060005461066790600160a060020a03166111b9565b155b15610678576106766111c1565b505b600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316000604051602001526040518163ffffffff1660e060020a028152600401809050602060405180830381600087803b15156106d357fe5b6102c65a03f115156106e157fe5b505060408051805160018054600160a060020a031916600160a060020a0392831617908190557f688dcfd70000000000000000000000000000000000000000000000000000000083527fff000000000000000000000000000000000000000000000000000000000000008616600484015292519216925063688dcfd791602480830192600092919082900301818387803b151561077a57fe5b6102c65a03f1151561078857fe5b5050505b5b50565b600061079a612ea1565b6107a2612ea1565b6107aa612ea1565b60006107b4612eb3565b60008815806107c35750602089115b156107ce5760006000fd5b60016040518059106107dd5750595b908082528060200260200182016040525b5095508860f860020a0286600081518110151561080757fe5b906020010190600160f860020a031916908160001a905350602060405180591061082e5750595b908082528060200260200182016040525b50945060206040518059106108515750595b908082528060200260200182016040525b50935061086d611503565b9250602085524241186001430340186020860152602084528260208501526060604051908101604052808681526020018781526020018581525091506108eb8a604060405190810160405280600681526020017f72616e646f6d0000000000000000000000000000000000000000000000000000815250848b61163f565b9050610a908178010000000000000000000000000000000000000000000000008c028460015b602002015160028660005b60200201516000604051602001526040518082805190602001908083835b602083106109595780518252601f19909201916020918201910161093a565b51815160209384036101000a6000190180199092169116179052604051919093019450919250508083038160008661646e5a03f1151561099557fe5b5050604051518660025b6020020151604051808577ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260080184805190602001908083835b60208310610a0f5780518252601f1990920191602091820191016109f0565b51815160209384036101000a60001901801990921691161790529201858152845190830192850191508083835b60208310610a5b5780518252601f199092019160209182019101610a3c565b6001836020036101000a03801982511681845116808217855250505050505090500194505050505060405180910390206117d7565b8096505b5050505050509392505050565b600a5481565b60125481565b60095481565b610ade82826000604051805910610ac75750595b908082528060200260200182016040525b50610aef565b5b5050565b600b5481565b60145481565b6000610af96117ed565b600160a060020a031633600160a060020a0316141515610b195760006000fd5b50600083815260176020526040902054610b34848484611929565b60ff16151580610b4357508151155b15610c0957600084815260166020908152604091829020548251600160a060020a03909116815290810183905260018183015290517fab61787a93a28d94fd000833bfd75dfa8a6ef7765fc99e6276ca8630acd68dc79181900360600190a1600084815260166020526040808220549051600160a060020a039091169183156108fc02918491818181858888f193505050501515610bdd57fe5b60008481526016602090815260408083208054600160a060020a03191690556017909152812055610788565b62010000836040518082805190602001908083835b60208310610c3d5780518252601f199092019160209182019101610c1e565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912092505050811515610c7357fe5b066009819055600085815260166020908152604091829020548251938452600160a060020a03169083015281810183905260016060830152517f18476db4762558939327c1cf9f6d85c3228e226f14aeb8ab602154ce22dddec19181900360800190a16011546009541115610d245760008481526016602052604080822054600a549151600160a060020a039091169291840280156108fc0292909190818181858888f193505050501515610d2457fe5b5b60115460095411158015610d3b57506000600d54115b15610db45760055460008581526016602052604080822054600d54825160e060020a63a9059cbb028152600160a060020a0392831660048201526024810191909152915193169263a9059cbb9260448084019391929182900301818387803b1515610da257fe5b6102c65a03f11515610db057fe5b5050505b60125460095410158015610dcc575060135460095411155b8015610dda57506000600e54115b15610e535760065460008581526016602052604080822054600e54825160e060020a63a9059cbb028152600160a060020a0392831660048201526024810191909152915193169263a9059cbb9260448084019391929182900301818387803b1515610e4157fe5b6102c65a03f11515610e4f57fe5b5050505b60145460095410158015610e6b575060155460095411155b8015610e7957506000600f54115b15610ef25760075460008581526016602052604080822054600f54825160e060020a63a9059cbb028152600160a060020a0392831660048201526024810191909152915193169263a9059cbb9260448084019391929182900301818387803b1515610ee057fe5b6102c65a03f11515610eee57fe5b5050505b60008481526016602090815260408083208054600160a060020a031916905560179091528120555b5b5b50505050565b60115481565b60085433600160a060020a03908116911614610f445760006000fd5b6010829055600a8190555b5b5050565b600654600160a060020a031681565b600554600160a060020a031681565b60135481565b60085433600160a060020a03908116911614610f945760006000fd5b60088054600160a060020a031916600160a060020a0383161790555b5b50565b600854600160a060020a031681565b600c5481565b60105481565b60085460009033600160a060020a03908116911614610fee5760006000fd5b506040805160e060020a63a9059cbb028152600160a060020a038381166004830152602482018590529151859283169163a9059cbb91604480830192600092919082900301818387803b151561104057fe5b6102c65a03f1151561104e57fe5b5050505b5b50505050565b600e5481565b60155481565b60085433600160a060020a039081169116146110815760006000fd5b60058054600160a060020a031916600160a060020a038416179055600d8190555b5b5050565b60085433600160a060020a039081169116146110c35760006000fd5b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501515610ade57fe5b5b5b5050565b600f5481565b600754600160a060020a031681565b60085433600160a060020a039081169116146111275760006000fd5b600b839055600c82905560118190555b5b505050565b600d5481565b60085433600160a060020a0390811691161461115f5760006000fd5b60068054600160a060020a03808b16600160a060020a031992831617909255600e899055601288905560138790556007805492871692909116919091179055600f839055601482905560158190555b5b5050505050505050565b803b5b919050565b600060006111e2731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6111b9565b11156112535760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e6574000000000000000000000000000000000000000000602082015261124b90611a5c565b506001611500565b600061127273c03a2615d5efaf5f49f60b7bb6583eaec212fdf16111b9565b11156112e35760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e330000000000000000000000000000000000000000602082015261124b90611a5c565b506001611500565b600061130273b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6111b9565b11156113735760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e0000000000000000000000000000000000000000000000602082015261124b90611a5c565b506001611500565b600061139273146500cfd35b22e4a392fe0adc06de1a1368ed486111b9565b11156114035760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b656279000000000000000000000000000000000000000000602082015261124b90611a5c565b506001611500565b6000611422736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756111b9565b1115611456575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751790556001611500565b60006114757320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6111b9565b11156114a9575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1790556001611500565b60006114c87351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6111b9565b11156114fc575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1790556001611500565b5060005b90565b60008054600160a060020a0316158061152e575060005461152c90600160a060020a03166111b9565b155b1561153d5761153b6111c1565b505b600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316000604051602001526040518163ffffffff1660e060020a028152600401809050602060405180830381600087803b151561159857fe5b6102c65a03f115156115a657fe5b505060408051805160018054600160a060020a031916600160a060020a0392831617908190556000602093840181905284517fabaa5f3e000000000000000000000000000000000000000000000000000000008152945191909216945063abaa5f3e9360048082019493918390030190829087803b151561162357fe5b6102c65a03f1151561163157fe5b5050604051519150505b5b90565b6000611649612ea1565b600054600160a060020a03161580611673575060005461167190600160a060020a03166111b9565b155b15611682576116806111c1565b505b600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316000604051602001526040518163ffffffff1660e060020a028152600401809050602060405180830381600087803b15156116dd57fe5b6102c65a03f115156116eb57fe5b5050604051805160018054600160a060020a031916600160a060020a039092169190911790556003915080591061171f5750595b90808252806020026020018201604052801561175557816020015b611742612ea1565b81526020019060019003908161173a5790505b5090508360005b602002015181600081518110151561177057fe5b602090810290910101528360015b602002015181600181518110151561179257fe5b602090810290910101528360025b60200201518160028151811015156117b457fe5b602090810290910101526117ca86868386611a74565b91505b5b50949350505050565b60008281526003602052604090208190555b5050565b60008054600160a060020a03161580611818575060005461181690600160a060020a03166111b9565b155b15611827576118256111c1565b505b600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316000604051602001526040518163ffffffff1660e060020a028152600401809050602060405180830381600087803b151561188257fe5b6102c65a03f1151561189057fe5b505060408051805160018054600160a060020a031916600160a060020a0392831617908190556000602093840181905284517fc281d19e000000000000000000000000000000000000000000000000000000008152945191909216945063c281d19e9360048082019493918390030190829087803b151561162357fe5b6102c65a03f1151561163157fe5b5050604051519150505b5b90565b6000600082600081518110151561193c57fe5b90602001015160f860020a900460f860020a02600160f860020a0319167f4c000000000000000000000000000000000000000000000000000000000000001415806119d2575082600181518110151561199157fe5b90602001015160f860020a900460f860020a02600160f860020a0319167f500000000000000000000000000000000000000000000000000000000000000014155b80611a1c57508260028151811015156119e757fe5b01602001517fff0000000000000000000000000000000000000000000000000000000000000060f860020a9182900482021614155b15611a2a5760019150611a54565b611a3d838686611a38611dd0565b611e66565b9050801515611a4f5760029150611a54565b600091505b509392505050565b8051610ade906002906020840190612f05565b505b50565b60006000611a80612ea1565b600054600160a060020a03161580611aaa5750600054611aa890600160a060020a03166111b9565b155b15611ab957611ab76111c1565b505b600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316000604051602001526040518163ffffffff1660e060020a028152600401809050602060405180830381600087803b1515611b1457fe5b6102c65a03f11515611b2257fe5b505060408051805160018054600160a060020a031916600160a060020a039283161790819055600060209384015283517f2ef3accc000000000000000000000000000000000000000000000000000000008152602481018a9052600481019485528b5160448201528b51919092169450632ef3accc938b938a9391928392606401918601908083838215611bd1575b805182526020831115611bd157601f199092019160209182019101611bb1565b505050905090810190601f168015611bfd5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1515611c1957fe5b6102c65a03f11515611c2757fe5b505060405151925050670de0b6b3a76400003a850201821115611c4d5760009250611dc5565b611c56856123d6565b9050600160009054906101000a9004600160a060020a0316600160a060020a031663c55c1cb683898985896000604051602001526040518663ffffffff1660e060020a028152600401808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360008314611cf7575b805182526020831115611cf757601f199092019160209182019101611cd7565b505050905090810190601f168015611d235780820380516001836020036101000a031916815260200191505b5083810382528551815285516020918201918701908083838215611d62575b805182526020831115611d6257601f199092019160209182019101611d42565b505050905090810190601f168015611d8e5780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b1515611dac57fe5b6125ee5a03f11515611dba57fe5b505060405151945050505b5b5050949350505050565b611dd8612ea1565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015611e5b5780601f10611e3057610100808354040283529160200191611e5b565b820191906000526020600020905b815481529060010190602001808311611e3e57829003601f168201915b505050505090505b90565b600060006000611e74612ea1565b611e7c612ea1565b611e84612ea1565b611e8c612ea1565b60006000611e98612ea1565b8d6045815181101515611ea757fe5b90602001015160f860020a900460f860020a0260f860020a900460020160440160200197506020604051805910611edb5750595b908082528060200260200182016040525b509650611efe8e8960208a600061277b565b5060028b8e6000604051602001526040518083805190602001908083835b60208310611f3b5780518252601f199092019160209182019101611f1c565b51815160209384036101000a60001901801990921691161790529201938452506040518382019450909290915081900382018160008661646e5a03f11515611f7f57fe5b50506040516020808220895190928a92909182918401908083835b60208310611fb95780518252601f199092019160209182019101611f9a565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120939093149b508b9250611ffb91505057600099506123c5565b8d518e90604a8a0190811061200c57fe5b90602001015160f860020a900460f860020a0260f860020a90046002016040518059106120365750595b908082528060200260200182016040525b50955061205c8e89604901885189600061277b565b506120e36002876000604051602001526040518082805190602001908083835b6020831061209b5780518252601f19909201916020918201910161207c565b51815160209384036101000a6000190180199092169116179052604051919093019450919250508083038160008661646e5a03f115156120d757fe5b5050604051518d6127d9565b98508815156120f557600099506123c5565b60296040518059106121045750595b908082528060200260200182016040525b50945061212a8e89602001602988600061277b565b50604060405180591061213a5750595b908082528060200260200182016040525b50935085518860200160290101604101925061216f8e60408503604087600061277b565b506002846000604051602001526040518082805190602001908083835b602083106121ab5780518252601f19909201916020918201910161218c565b51815160209384036101000a6000190180199092169116179052604051919093019450919250508083038160008661646e5a03f115156121e757fe5b50506040518051865190935086918491819060208501908083835b602083106122215780518252601f199092019160209182019101612202565b6001836020036101000a038019825116818451168082178552505050505050905001826000191660001916815260200192505050604051809103902060001916600360008f600019166000191681526020019081526020016000205460001916141561229b5760008d8152600360205260408120556122a4565b600099506123c5565b60496040518059106122b35750595b908082528060200260200182016040525b5090506122d68e89604984600061277b565b5061235e6002826000604051602001526040518082805190602001908083835b602083106123155780518252601f1990920191602091820191016122f6565b51815160209384036101000a6000190180199092169116179052604051919093019450919250508083038160008661646e5a03f1151561235157fe5b505060405151878661285c565b985088151561237057600099506123c5565b60008281526004602052604090205460ff1615156123b0576123928e84612a88565b6000838152600460205260409020805460ff19169115159190911790555b60008281526004602052604090205460ff1699505b505050505050505050949350505050565b6123de612ea1565b600060006123ea612ea1565b6000600060006123f8612ea1565b6000600060008b51995060009850896040518059106124145750595b90808252806020026020018201604052801561244a57816020015b612437612ea1565b81526020019060019003908161242f5790505b509750600096505b898710156124e2578b8781518110151561246857fe5b90602001906020020151888881518110151561248057fe5b9060200190602002018190525060176001898981518110151561249f57fe5b9060200190602002015151038115156124b457fe5b0488888151811015156124c357fe5b906020019060200201515101600301890198505b600190960195612452565b60009550896080019450600160ff1689019850886040518059106125035750595b908082528060200260200182016040525b5093505b60018690111561256c5760f860020a8502866001811061253457fe5b1a60f860020a02848781518110151561254957fe5b906020010190600160f860020a031916908160001a905350600190950194612518565b600096505b898710156127685783517f5f00000000000000000000000000000000000000000000000000000000000000908590889081106125a957fe5b906020010190600160f860020a031916908160001a905350600190950194600092505b87878151811015156125da57fe5b906020019060200201515183101561270e576017835b06151561269d57601883898981518110151561260857fe5b906020019060200201515103101561263a5782888881518110151561262957fe5b90602001906020020151510361263d565b60175b60400191508590505b8086036001111561269d5760f860020a82028187036001811061266557fe5b1a60f860020a02848781518110151561267a57fe5b906020010190600160f860020a031916908160001a905350600190950194612646565b5b87878151811015156126ac57fe5b90602001906020020151838151811015156126c357fe5b90602001015160f860020a900460f860020a0284878151811015156126e457fe5b906020010190600160f860020a031916908160001a9053506001909501945b6001909201916125cc565b83517fff000000000000000000000000000000000000000000000000000000000000009085908890811061273e57fe5b906020010190600160f860020a031916908160001a9053506001909501945b600190960195612571565b839a505b50505050505050505050919050565b612783612ea1565b6000600060008487019250828651101561279d5760006000fd5b505060208087019084015b8688602001018210156127c9578882015186820152602091820191016127a8565b8593505b50505095945050505050565b60006001815b83518160ff16101561285057838160ff168151811015156127fc57fe5b90602001015160f860020a900460f860020a02600160f860020a031916858260ff1660208110151561282a57fe5b1a60f860020a02600160f860020a03191614151561284757600091505b5b6001016127df565b8192505b505092915050565b6000600060006000600061286e612ea1565b6000612878612ea1565b60206040518059106128875750595b908082528060200260200182016040525b50925060208a60038151811015156128ac57fe5b90602001015160f860020a900460f860020a0260f860020a90040360040191506128db8a83602086600061277b565b925060206040518059106128ec5750595b908082528060200260200182016040525b5090506022820191506129448a60208c6001860381518110151561291d57fe5b90602001015160f860020a900460f860020a0260f860020a9004038401602084600061277b565b905060208301519450602081015193506129618b601b8787612e5a565b809750819850505085600160a060020a0316896040518082805190602001908083835b602083106129a35780518252601f199092019160209182019101612984565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004600160a060020a031614156129ec5760019750612a79565b6129f98b601c8787612e5a565b809750819850505085600160a060020a0316896040518082805190602001908083835b60208310612a3b5780518252601f199092019160209182019101612a1c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004600160a060020a03161497505b5b505050505050509392505050565b60006000612a94612ea1565b612a9c612ea1565b612aa4612ea1565b612aac612ea1565b612ab4612ea1565b612abc612ea1565b612ac4612ea1565b8a8a600101815181101515612ad557fe5b90602001015160f860020a900460f860020a0260f860020a9004600201604051805910612aff5750595b908082528060200260200182016040525b509650612b228b8b89518a600061277b565b506040604051805910612b325750595b908082528060200260200182016040525b509550612b568b6004604089600061277b565b506062604051805910612b665750595b908082528060200260200182016040525b509450600160f860020a02856000815181101515612b9157fe5b906020010190600160f860020a031916908160001a905350612bbb8b60418c03604188600161277b565b50604060405190810160405280602081526020017ffd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c8152509350612c05846000602088604261277b565b50612c8d6002866000604051602001526040518082805190602001908083835b60208310612c445780518252601f199092019160209182019101612c25565b51815160209384036101000a6000190180199092169116179052604051919093019450919250508083038160008661646e5a03f11515612c8057fe5b505060405151888861285c565b9750871515612c9f5760009850612e4c565b606060405190810160405280604081526020017f7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e881526020017f537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e481525092506042604051805910612d0d5750595b908082528060200260200182016040525b50915060fe60f860020a02826000815181101515612d3857fe5b906020010190600160f860020a031916908160001a905350612d608b6003604185600161277b565b508a6045815181101515612d7057fe5b90602001015160f860020a900460f860020a0260f860020a9004600201604051805910612d9a5750595b908082528060200260200182016040525b509050612dbe8b6044835184600061277b565b50612e466002836000604051602001526040518082805190602001908083835b60208310612dfd5780518252601f199092019160209182019101612dde565b51815160209384036101000a6000190180199092169116179052604051919093019450919250508083038160008661646e5a03f11515612e3957fe5b505060405151828561285c565b97508798505b505050505050505092915050565b600060006000600060405188815287602082015286604082015285606082015260208160808360006001610bb8f1925080519150508181935093505b505094509492505050565b60408051602081019091526000815290565b6060604051908101604052806003905b612ecb612ea1565b815260200190600190039081612ec35790505090565b60408051602081019091526000815290565b60408051602081019091526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f4657805160ff1916838001178555612f73565b82800160010185558215612f73579182015b82811115612f73578251825591602001919060010190612f58565b5b50612f80929150612f96565b5090565b60408051602081019091526000815290565b61150091905b80821115612f805760008155600101612f9c565b5090565b905600a165627a7a723058207215d7f8be776f269395e5e0da0d02ac35bdafd8617fb5ed52a73f69a7fbcf180029"
}