{
  "address": "0x6b94047cdd2356b73bcd809980a0c10b5a178c99",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JewelryLeaseToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.4.18;\n\ncontract owned {\naddress public owner;\n\nfunction owned() public {\nowner = msg.sender;\n}\n\nmodifier onlyOwner {\nrequire(msg.sender == owner);\n_;\n}\n\nfunction transferOwnership(address newOwner) onlyOwner public {\nowner = newOwner;\n}\n}\n\nlibrary SafeMath {\nfunction mul(uint a, uint b) internal pure returns (uint) {\nif (a == 0) {\nreturn 0;\n}\n\nuint c = a * b;\nassert(c / a == b);\nreturn c;\n}\n\nfunction sub(uint a, uint b) internal pure returns (uint) {\nassert(b <= a);\nreturn a - b;\n}\n\nfunction add(uint a, uint b) internal pure returns (uint) {\nuint c = a + b;\nassert(c >= a);\nreturn c;\n}\n\nfunction div(uint a, uint b) internal pure returns (uint256) {\nassert(b > 0); // Solidity automatically throws when dividing by 0\nuint c = a / b;\nassert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\nusing SafeMath for uint256;\n// Public variables of the token\nstring public name;\nstring public symbol;\nuint8 public decimals;\n// 18 decimals is the strongly suggested default, avoid changing it\nuint256 public totalSupply;\n\nstring public version = 'J1.0';\n\n// This creates an array with all balances\nmapping (address => uint256) public balanceOf;\nmapping (address => mapping (address => uint256)) public allowance;\n\n// This generates a public event on the blockchain that will notify clients\nevent Transfer(address indexed from, address indexed to, uint256 value);\n\n// This notifies clients about the amount burnt\nevent Burn(address indexed from, uint256 value);\n\n/**\n* Constrctor function\n*\n* Initializes contract with initial supply tokens to the creator of the contract\n*/\nfunction TokenERC20(\nuint256 initialSupply,\nuint8 _decimalUnits,\nstring tokenName,\nstring tokenSymbol\n) public {\ntotalSupply = initialSupply; // Update total supply with the decimal amount\nbalanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\ndecimals = _decimalUnits; // Amount of decimals for display purposes\nname = tokenName; // Set the name for display purposes\nsymbol = tokenSymbol; // Set the symbol for display purposes\n}\n\n/**\n* Internal transfer, only can be called by this contract\n*/\nfunction _transfer(address _from, address _to, uint _value) internal {\n// Prevent transfer to 0x0 address. Use burn() instead\nrequire(_to != 0x0);\n// Check if the sender has enough\nrequire(balanceOf[_from] >= _value);\n// Check for overflows\nrequire(balanceOf[_to].add(_value) > balanceOf[_to]);\n// Save this for an assertion in the future\nuint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n// Subtract from the sender\nbalanceOf[_from] = balanceOf[_from].sub(_value);\n// Add the same to the recipient\nbalanceOf[_to] =balanceOf[_to].add(_value);\nTransfer(_from, _to, _value);\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\nassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n}\n\n/**\n* Transfer tokens\n*\n* Send `_value` tokens to `_to` from your account\n*\n* @param _to The address of the recipient\n* @param _value the amount to send\n*/\nfunction transfer(address _to, uint256 _value) public {\n_transfer(msg.sender, _to, _value);\n}\n\n/**\n* Transfer tokens from other address\n*\n* Send `_value` tokens to `_to` in behalf of `_from`\n*\n* @param _from The address of the sender\n* @param _to The address of the recipient\n* @param _value the amount to send\n*/\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\nallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n_transfer(_from, _to, _value);\nreturn true;\n}\n\n/**\n* Set allowance for other address\n*\n* Allows `_spender` to spend no more than `_value` tokens in your behalf\n*\n* @param _spender The address authorized to spend\n* @param _value the max amount they can spend\n*/\nfunction approve(address _spender, uint256 _value) public\nreturns (bool success) {\nallowance[msg.sender][_spender] = _value;\nreturn true;\n}\n\n/**\n* Set allowance for other address and notify\n*\n* Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n*\n* @param _spender The address authorized to spend\n* @param _value the max amount they can spend\n* @param _extraData some extra information to send to the approved contract\n*/\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\npublic\nreturns (bool success) {\ntokenRecipient spender = tokenRecipient(_spender);\nif (approve(_spender, _value)) {\nspender.receiveApproval(msg.sender, _value, this, _extraData);\nreturn true;\n}\n}\n\n/**\n* Destroy tokens\n*\n* Remove `_value` tokens from the system irreversibly\n*\n* @param _value the amount of money to burn\n*/\nfunction burn(uint256 _value) public returns (bool success) {\nrequire(balanceOf[msg.sender] >= _value); // Check if the sender has enough\nbalanceOf[msg.sender] -= _value; // Subtract from the sender\ntotalSupply -= _value; // Updates totalSupply\nBurn(msg.sender, _value);\nreturn true;\n}\n\n/**\n* Destroy tokens from other account\n*\n* Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n*\n* @param _from the address of the sender\n* @param _value the amount of money to burn\n*/\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\nrequire(balanceOf[_from] >= _value); // Check if the targeted balance is enough\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\nbalanceOf[_from] -= _value; // Subtract from the targeted balance\nallowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\ntotalSupply -= _value; // Update totalSupply\nBurn(_from, _value);\nreturn true;\n}\n}\n\n\n\ncontract JewelryLeaseToken is owned, TokenERC20 {\nusing SafeMath for uint256;\n\nmapping (address => bool) public frozenAccount;\n\n/* This generates a public event on the blockchain that will notify clients */\nevent FrozenFunds(address target, bool frozen);\n\n/* Initializes contract with initial supply tokens to the creator of the contract */\nfunction JewelryLeaseToken(\nuint256 initialSupply,\nuint8 decimalUnits,\nstring tokenName,\nstring tokenSymbol\n\n) TokenERC20(initialSupply, decimalUnits,tokenName, tokenSymbol) public {}\n\n/* Internal transfer, only can be called by this contract */\nfunction _transfer(address _from, address _to, uint _value) internal {\nrequire (_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\nrequire (balanceOf[_from] >= _value); // Check if the sender has enough\nrequire (balanceOf[_to].add(_value) > balanceOf[_to]); // Check for overflows\nrequire(!frozenAccount[_from]); // Check if sender is frozen\nrequire(!frozenAccount[_to]); // Check if recipient is frozen\nbalanceOf[_from] = balanceOf[_from].sub(_value); // Subtract from the sender\nbalanceOf[_to] = balanceOf[_to].add(_value); // Add the same to the recipient\nTransfer(_from, _to, _value);\n}\n\n/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n/// @param target Address to be frozen\n/// @param freeze either to freeze it or not\nfunction freezeAccount(address target, bool freeze) onlyOwner public {\nfrozenAccount[target] = freeze;\nFrozenFunds(target, freeze);\n}\n\n}",
  "bytecode": "60606040526040805190810160405280600481526020017f4a312e3000000000000000000000000000000000000000000000000000000000815250600590805190602001906200005192919062000183565b5034156200005e57600080fd5b6040516200183a3803806200183a8339810160405280805190602001909190805190602001909190805182019190602001805182019190505083838383336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600481905550600454600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600360006101000a81548160ff021916908360ff16021790555081600190805190602001906200015b92919062000183565b5080600290805190602001906200017492919062000183565b50505050505050505062000232565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c657805160ff1916838001178555620001f7565b82800160010185558215620001f7579182015b82811115620001f6578251825591602001919060010190620001d9565b5b5090506200020691906200020a565b5090565b6200022f91905b808211156200022b57600081600090555060010162000211565b5090565b90565b6115f880620002426000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018457806318160ddd146101de57806323b872dd14610207578063313ce5671461028057806342966c68146102af57806354fd4d50146102ea57806370a082311461037857806379cc6790146103c55780638da5cb5b1461041f57806395d89b4114610474578063a9059cbb14610502578063b414d4b614610544578063cae9ca5114610595578063dd62ed3e14610632578063e724529c1461069e578063f2fde38b146106e2575b600080fd5b341561010157600080fd5b61010961071b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018f57600080fd5b6101c4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107b9565b604051808215151515815260200191505060405180910390f35b34156101e957600080fd5b6101f1610846565b6040518082815260200191505060405180910390f35b341561021257600080fd5b610266600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061084c565b604051808215151515815260200191505060405180910390f35b341561028b57600080fd5b6102936109fe565b604051808260ff1660ff16815260200191505060405180910390f35b34156102ba57600080fd5b6102d06004808035906020019091905050610a11565b604051808215151515815260200191505060405180910390f35b34156102f557600080fd5b6102fd610b15565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033d578082015181840152602081019050610322565b50505050905090810190601f16801561036a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038357600080fd5b6103af600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bb3565b6040518082815260200191505060405180910390f35b34156103d057600080fd5b610405600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bcb565b604051808215151515815260200191505060405180910390f35b341561042a57600080fd5b610432610de5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047f57600080fd5b610487610e0a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104c75780820151818401526020810190506104ac565b50505050905090810190601f1680156104f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561050d57600080fd5b610542600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ea8565b005b341561054f57600080fd5b61057b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610eb7565b604051808215151515815260200191505060405180910390f35b34156105a057600080fd5b610618600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ed7565b604051808215151515815260200191505060405180910390f35b341561063d57600080fd5b610688600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611055565b6040518082815260200191505060405180910390f35b34156106a957600080fd5b6106e0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035151590602001909190505061107a565b005b34156106ed57600080fd5b610719600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061119f565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107b15780601f10610786576101008083540402835291602001916107b1565b820191906000526020600020905b81548152906001019060200180831161079457829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60045481565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156108d957600080fd5b61096882600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461123d90919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109f3848484611256565b600190509392505050565b600360009054906101000a900460ff1681565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a6157600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bab5780601f10610b8057610100808354040283529160200191610bab565b820191906000526020600020905b815481529060010190602001808311610b8e57829003601f168201915b505050505081565b60066020528060005260406000206000915090505481565b600081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610c1b57600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ca657600080fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ea05780601f10610e7557610100808354040283529160200191610ea0565b820191906000526020600020905b815481529060010190602001808311610e8357829003601f168201915b505050505081565b610eb3338383611256565b5050565b60086020528060005260406000206000915054906101000a900460ff1681565b600080849050610ee785856107b9565b1561104c578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fe1578082015181840152602081019050610fc6565b50505050905090810190601f16801561100e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561102f57600080fd5b6102c65a03f1151561104057600080fd5b5050506001915061104d565b5b509392505050565b6007602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d557600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111fa57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561124b57fe5b818303905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561127c57600080fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156112ca57600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135c82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115ae90919063ffffffff16565b11151561136857600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156113c157600080fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561141a57600080fd5b61146c81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461123d90919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061150181600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115ae90919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101515156115c257fe5b80915050929150505600a165627a7a723058203a9d64235bdff2bae269b756a20c507c48eebc530a4ae18bbd86c000512516fc00290000000000000000000000000000000000000000204fce5e3e250261100000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000013274a6577656c72794c65617365546f6b656e27000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005274a4c5427000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000204fce5e3e250261100000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000013274a6577656c72794c65617365546f6b656e27000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005274a4c5427000000000000000000000000000000000000000000000000000000"
}