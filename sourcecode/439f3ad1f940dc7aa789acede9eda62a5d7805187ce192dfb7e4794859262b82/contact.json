{
  "address": "0x9c025c5eab68f658c6c6c3a7f6a9e1b24616ef0a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NeutrinoTokenStandard",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-11\n*/\n\npragma solidity ^0.4.25;\n\n/*\n [Rules]\n\n [✓] 10% Deposit fee\n            33% => referrer (or contract owner, if none)\n            10% => contract owner\n            57% => dividends\n [✓] 1% Withdraw fee\n           100% => contract owner\n*/\n\ncontract NeutrinoTokenStandard {\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    string public name = \"Neutrino Token Standard\";\n    string public symbol = \"NTS\";\n    address constant internal boss = 0x10d915C0B3e01090C7B5f80eF2D9CdB616283853;\n    uint8 constant public decimals = 18;\n    uint8 constant internal entryFee_ = 10;\n    uint8 constant internal exitFee_ = 1;\n    uint8 constant internal refferalFee_ = 33;\n    uint8 constant internal ownerFee1 = 10;\n    uint8 constant internal ownerFee2 = 25;\n    uint32 holdTimeInBlocks = 558000;\n    uint256 constant internal tokenPrice = 0.001 ether;\n    \n    uint256 constant internal magnitude = 2 ** 64;\n    uint256 public stakingRequirement = 50e18;\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) public since;\n\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n\n    function buy(address _referredBy) public payable returns (uint256) {\n        return purchaseTokens(msg.value, _referredBy);\n    }\n\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    function reinvest() onlyStronghands public {\n        uint256 _dividends = myDividends(false);\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    function exit() public {\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n        withdraw();\n    }\n\n    function withdraw() onlyStronghands public {\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false);\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        _customerAddress.transfer(_dividends);\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n\n        uint8 applyFee = exitFee_;\n        if (since[msg.sender] + holdTimeInBlocks < block.number) applyFee = 20;\n\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, applyFee), 100);\n        uint256 forBoss = SafeMath.div(SafeMath.mul(_dividends, ownerFee2), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        _dividends = SafeMath.sub(_dividends, forBoss);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);\n\n        if (tokenSupply_ > 0) {\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n    function totalEthereumBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    function sellPrice() public pure returns (uint256) {\n        uint256 _ethereum = tokensToEthereum_(1e18);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        return _taxedEthereum;\n    }\n\n    function buyPrice() public pure returns (uint256) {\n        uint256 _ethereum = tokensToEthereum_(1e18);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n        return _taxedEthereum;\n    }\n\n    function calculateTokensReceived(uint256 _ethereumToSpend) public pure returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint8 applyFee = exitFee_;\n        if (since[msg.sender] + holdTimeInBlocks > block.number) applyFee = 20;\n        \n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, applyFee), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 forBoss = SafeMath.div(SafeMath.mul(_undividedDividends, ownerFee1), 100);\n        uint256 _dividends = SafeMath.sub(SafeMath.sub(_undividedDividends, _referralBonus), forBoss);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        if (\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n            _referredBy != _customerAddress &&\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n            emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n        } else {\n            referralBalance_[boss] = SafeMath.add(referralBalance_[boss], _referralBonus);\n            emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, 0x0, now, buyPrice());\n        }\n\n        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);\n\n        if (tokenSupply_ > 0) {\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        if (since[msg.sender] == 0) since[msg.sender] = block.number;\n\n        return _amountOfTokens;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) public pure returns (uint256) {\n        uint256 _tokensReceived = SafeMath.div(SafeMath.mul(_ethereum, 1e18), tokenPrice);\n\n        return _tokensReceived;\n    }\n\n    function tokensToEthereum_(uint256 _tokens) public pure returns (uint256) {\n        uint256 _etherReceived = SafeMath.div(SafeMath.mul(_tokens, tokenPrice), 1e18);\n\n        return _etherReceived;\n    }\n\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60c0604052601760808190527f4e65757472696e6f20546f6b656e205374616e6461726400000000000000000060a0908152620000409160009190620000bb565b506040805180820190915260038082527f4e5453000000000000000000000000000000000000000000000000000000000060209092019182526200008791600191620000bb565b506002805463ffffffff1916620883b01790556802b5e3af16b1880000600355348015620000b457600080fd5b5062000160565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000fe57805160ff19168380011785556200012e565b828001600101855582156200012e579182015b828111156200012e57825182559160200191906001019062000111565b506200013c92915062000140565b5090565b6200015d91905b808211156200013c576000815560010162000147565b90565b610f7280620001706000396000f3006080604052600436106101265763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461013457806306fdde031461016757806310d0ffdd146101f157806318160ddd14610209578063226093731461021e5780632a9121c714610236578063313ce5671461024e5780633ccfd60b146102795780634b7503341461029057806356d399e8146102a5578063688abbf7146102ba5780636b2f4632146102d457806370a08231146102e95780638620410b1461030a578063949e8acd1461031f57806395d89b4114610334578063bf3b397b14610349578063e4849b3214610361578063e9fad8ee14610379578063eaec2b431461038e578063f088d547146103af578063fdb5a03e146103c3575b6101313460006103d8565b50005b34801561014057600080fd5b50610155600160a060020a036004351661078d565b60408051918252519081900360200190f35b34801561017357600080fd5b5061017c6107c8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b657818101518382015260200161019e565b50505050905090810190601f1680156101e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101fd57600080fd5b50610155600435610856565b34801561021557600080fd5b50610155610889565b34801561022a57600080fd5b5061015560043561088f565b34801561024257600080fd5b50610155600435610908565b34801561025a57600080fd5b50610263610934565b6040805160ff9092168252519081900360200190f35b34801561028557600080fd5b5061028e610939565b005b34801561029c57600080fd5b50610155610a0c565b3480156102b157600080fd5b50610155610a47565b3480156102c657600080fd5b506101556004351515610a4d565b3480156102e057600080fd5b50610155610a8d565b3480156102f557600080fd5b50610155600160a060020a0360043516610a92565b34801561031657600080fd5b50610155610aad565b34801561032b57600080fd5b50610155610ae0565b34801561034057600080fd5b5061017c610af2565b34801561035557600080fd5b50610155600435610b4c565b34801561036d57600080fd5b5061028e600435610b71565b34801561038557600080fd5b5061028e610d9c565b34801561039a57600080fd5b50610155600160a060020a0360043516610dc9565b610155600160a060020a0360043516610ddb565b3480156103cf57600080fd5b5061028e610ded565b60003381808080808080806103f86103f18d600a610ea3565b6064610edc565b97506104086103f1896021610ea3565b96506104186103f189600a610ea3565b955061042d6104278989610eff565b87610eff565b94506104398c89610eff565b935061044484610908565b9250680100000000000000008502915060008311801561046e575060085461046c8482610f14565b115b151561047957600080fd5b600160a060020a038b16158015906104a3575088600160a060020a03168b600160a060020a031614155b80156104c95750600354600160a060020a038c1660009081526004602052604090205410155b1561056657600160a060020a038b166000908152600560205260409020546104f19088610f14565b600160a060020a03808d166000818152600560205260409020929092558a167f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e864261053c610aad565b604080519485526020850193909352838301919091526060830152519081900360800190a361062b565b7310d915c0b3e01090c7b5f80ef2d9cdb6162838536000526005602052600080516020610f278339815191525461059d9088610f14565b7310d915c0b3e01090c7b5f80ef2d9cdb61628385360009081526005602052600080516020610f2783398151915291909155600160a060020a038a167f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e8642610605610aad565b604080519485526020850193909352838301919091526060830152519081900360800190a35b7310d915c0b3e01090c7b5f80ef2d9cdb6162838536000526005602052600080516020610f27833981519152546106629087610f14565b7310d915c0b3e01090c7b5f80ef2d9cdb61628385360009081526005602052600080516020610f278339815191529190915560085411156106f6576106a960085484610f14565b60088190556801000000000000000086028115156106c357fe5b600980549290910490910190556008546801000000000000000086028115156106e857fe5b0483028203820391506106fc565b60088390555b600160a060020a03891660009081526004602052604090205461071f9084610f14565b600160a060020a038a166000908152600460209081526040808320939093556009546006825283832080549188028790039182019055338352600790915291902054909150151561077d573360009081526007602052604090204390555b50909a9950505050505050505050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600954680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561084e5780601f106108235761010080835404028352916020019161084e565b820191906000526020600020905b81548152906001019060200180831161083157829003601f168201915b505050505081565b60008080806108696103f186600a610ea3565b92506108758584610eff565b915061088082610908565b95945050505050565b60085490565b600080600080600060085486111515156108a857600080fd5b6108b186610b4c565b60025433600090815260076020526040902054919550600194504363ffffffff90911690910111156108e257601492505b6108f26103f1858560ff16610ea3565b91506108fe8483610eff565b9695505050505050565b60008061092d61092084670de0b6b3a7640000610ea3565b66038d7ea4c68000610edc565b9392505050565b601281565b60008060006109486001610a4d565b1161095257600080fd5b33915061095f6000610a4d565b600160a060020a038316600081815260066020908152604080832080546801000000000000000087020190556005909152808220805490839055905193019350909183156108fc0291849190818181858888f193505050501580156109c8573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b600080600080610a23670de0b6b3a7640000610b4c565b9250610a336103f1846001610ea3565b9150610a3f8383610eff565b949350505050565b60035481565b60003382610a6357610a5e8161078d565b61092d565b600160a060020a038116600090815260056020526040902054610a858261078d565b019392505050565b303190565b600160a060020a031660009081526004602052604090205490565b600080600080610ac4670de0b6b3a7640000610b4c565b9250610ad46103f184600a610ea3565b9150610a3f8383610f14565b600033610aec81610a92565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561084e5780601f106108235761010080835404028352916020019161084e565b60008061092d610b638466038d7ea4c68000610ea3565b670de0b6b3a7640000610edc565b6000806000806000806000806000610b87610ae0565b11610b9157600080fd5b33600081815260046020526040902054909850891115610bb057600080fd5b889650610bbc87610b4c565b60025433600090815260076020526040902054919750600196504363ffffffff9091169091011015610bed57601494505b610bfd6103f1878760ff16610ea3565b9350610c0d6103f1856019610ea3565b9250610c198685610eff565b9150610c258484610eff565b9350610c3360085488610eff565b600855600160a060020a038816600090815260046020526040902054610c599088610eff565b600160a060020a038916600090815260046020908152604080832093909355600954600682529282208054938b02680100000000000000008702019384900390557310d915c0b3e01090c7b5f80ef2d9cdb61628385390915260059052600080516020610f2783398151915254909150610cd39084610f14565b7310d915c0b3e01090c7b5f80ef2d9cdb61628385360009081526005602052600080516020610f27833981519152919091556008541115610d3657610d32600954600854680100000000000000008702811515610d2c57fe5b04610f14565b6009555b87600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e888442610d6c610aad565b604080519485526020850193909352838301919091526060830152519081900360800190a2505050505050505050565b3360008181526004602052604081205490811115610dbd57610dbd81610b71565b610dc5610939565b5050565b60076020526000908152604090205481565b6000610de734836103d8565b92915050565b600080600080610dfd6001610a4d565b11610e0757600080fd5b610e116000610a4d565b33600081815260066020908152604080832080546801000000000000000087020190556005909152812080549082905590920194509250610e539084906103d8565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080831515610eb65760009150610ed5565b50828202828482811515610ec657fe5b0414610ed157600080fd5b8091505b5092915050565b600080808311610eeb57600080fd5b8284811515610ef657fe5b04949350505050565b600082821115610f0e57600080fd5b50900390565b600082820183811015610ed157600080fd003da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9a165627a7a723058201db17b783af1cb61eb192846fbec08ce57bc1274070f4182d7b9c4226546e8c80029"
}