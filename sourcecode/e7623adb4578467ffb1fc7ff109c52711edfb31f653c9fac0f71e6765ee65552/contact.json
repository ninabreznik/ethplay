{
  "address": "0x602087badcb6ed10cc0dff3301b50d6f1993f3b3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ArtifactCoin",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-10\n*/\n\npragma solidity ^0.4.21;\n\n/* 要約\nアーティファクトチェーン（ArtifactChain）は次世代デジタル資産銀行であり、世界初の暗号化デジタル資産業界のビジネス応用に力を注いでいるパブリックチェーンプロジェクトであり、ブロックチェーンネットワークに基づくグローバルコーディネーションを行い、また、全世界ユーザーに精確にデジタル資産発行、取引及び管理関連サービスを提供する分散型スマート金融プラットフォームである。私達はアーティファクトチェーンを通じて、資産のデジタル化過程に生じるデジタル資産発行の煩雑さ、デジタル資産の紛失し易さ、パブリックチェーン容量の有限さ、ブロックチェーン取引費用の高過ぎさ、ユーザープライバシー保護の欠如、オンチェーンデジタル資産と実物資産との連動における真実性と一致性の欠如などの問題を解決したいと考えている。アーティファクトチェーンはビジネス用ブロックチェーンに無限の容量、極めて低いコスト及び商業機密を保護する能力を持たせる。アーティファクトチェーンは最終的にブロックチェーン技術によって、異なる国家間の業務とシーンを結び付け、全世界範囲内での効果的な協調を実現したいと願っている。私達は将来的にデータスマート技術を利用して、全世界のいかなるユーザーに精確に必要とする各種デジタル金融サービスを提供できると望んでいる。アーティファクトチェーンは次世代デジタル資産銀行であり、次世代知能金融生態圏を構築するために生まれたものである。\n */\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n *      ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n    function balanceOf(address who) public view returns (uint);\n\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function decimals() public view returns (uint8 _decimals);\n    function totalSupply() public view returns (uint256 _supply);\n\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed burner, uint256 value);\n}\n\n\ncontract ContractReceiver {\n     \n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n    \n    \n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n      TKN memory tkn;\n      tkn.sender = _from;\n      tkn.value = _value;\n      tkn.data = _data;\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n      tkn.sig = bytes4(u);\n      \n      /* tkn variable is analogue of msg variable of Ether transaction\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n      *  tkn.data is data of token transaction   (analogue of msg.data)\n      *  tkn.sig is 4 bytes signature of function\n      *  if data of token transaction is a function execution\n      */\n    }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\n\n\ncontract ArtifactCoin is ERC223  {\n    \n    using SafeMath for uint256;\n    using SafeMath for uint;\n    address public owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n    mapping (address => uint256) public unlockUnixTime;\n    string internal name_= \"ArtifactCoin\";\n    string public Information= \"アーティファクトチェーン\";\n    string internal symbol_ = \"3A\";\n    uint8 internal decimals_= 18;\n    bool public canTransfer = true;\n    uint256 public etherGetBase=6000000;\n    uint256 internal totalSupply_= 2000000000e18;\n    uint256 public OfficalHolding = totalSupply_.mul(30).div(100);\n    uint256 public totalRemaining = totalSupply_;\n    uint256 public totalDistributed = 0;\n    uint256 internal freeGiveBase = 300e17;\n    uint256 public lowEth = 1e14;\n    bool public distributionFinished = false;\n    bool public endFreeGet = false;\n    bool public endEthGet = false;    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier canTrans() {\n        require(canTransfer == true);\n        _;\n    }    \n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    function ArtifactCoin (address offical) public {\n        owner = msg.sender;\n        distr(offical, OfficalHolding);\n    }\n\n    // Function to access name of token .\n    function name() public view returns (string _name) {\n      return name_;\n    }\n    // Function to access symbol of token .\n    function symbol() public view returns (string _symbol) {\n      return symbol_;\n    }\n    // Function to access decimals of token .\n    function decimals() public view returns (uint8 _decimals) {\n      return decimals_;\n    }\n    // Function to access total supply of tokens .\n    function totalSupply() public view returns (uint256 _totalSupply) {\n      return totalSupply_;\n    }\n\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) canTrans public returns (bool success) {\n      \n    if(isContract(_to)) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n        Transfer(msg.sender, _to, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n    }\n\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data) canTrans public returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n    }\n\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) canTrans public returns (bool success) {\n      \n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n\n    //function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    return true;\n    }\n\n    //function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    return true;\n    }\n\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n    return balances[_owner];\n    }\n\n    \n    function changeOwner(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n      }\n\n    \n    function enableWhitelist(address[] addresses) onlyOwner public {\n        require(addresses.length <= 255);\n        for (uint8 i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = false;\n        }\n    }\n\n    function disableWhitelist(address[] addresses) onlyOwner public {\n        require(addresses.length <= 255);\n        for (uint8 i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = true;\n        }\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        return true;\n    }\n    function startDistribution() onlyOwner  public returns (bool) {\n        distributionFinished = false;\n        return true;\n    }\n    function finishFreeGet() onlyOwner canDistr public returns (bool) {\n        endFreeGet = true;\n        return true;\n    }\n    function finishEthGet() onlyOwner canDistr public returns (bool) {\n        endEthGet = true;\n        return true;\n    }\n    function startFreeGet() onlyOwner canDistr public returns (bool) {\n        endFreeGet = false;\n        return true;\n    }\n    function startEthGet() onlyOwner canDistr public returns (bool) {\n        endEthGet = false;\n        return true;\n    }\n    function startTransfer() onlyOwner  public returns (bool) {\n        canTransfer = true;\n        return true;\n    }\n    function stopTransfer() onlyOwner  public returns (bool) {\n        canTransfer = false;\n        return true;\n    }\n    function changeBaseValue(uint256 _freeGiveBase,uint256 _etherGetBase,uint256 _lowEth) onlyOwner public returns (bool) {\n        freeGiveBase = _freeGiveBase;\n        etherGetBase=_etherGetBase;\n        lowEth=_lowEth;\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        require(totalRemaining >= 0);\n        require(_amount<=totalRemaining);\n        totalDistributed = totalDistributed.add(_amount);\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n    \n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n        \n        require(addresses.length <= 255);\n        require(amount <= totalRemaining);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            require(amount <= totalRemaining);\n            distr(addresses[i], amount);\n        }\n  \n        if (totalDistributed >= totalSupply_) {\n            distributionFinished = true;\n        }\n    }\n    \n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            require(amounts[i] <= totalRemaining);\n            distr(addresses[i], amounts[i]);\n            \n            if (totalDistributed >= totalSupply_) {\n                distributionFinished = true;\n            }\n        }\n    }\n    \n    function () external payable {\n            get();\n     }   \n    function get() payable canDistr onlyWhitelist public {\n\n        \n        if (freeGiveBase > totalRemaining) {\n            freeGiveBase = totalRemaining;\n        }\n        address investor = msg.sender;\n        uint256 etherValue=msg.value;\n        uint256 value;\n        uint256 gasPrice=tx.gasprice;\n        \n        if(etherValue>lowEth){\n            require(endEthGet==false);\n            value=etherValue.mul(etherGetBase);\n            value=value.add(freeGiveBase.mul(gasPrice.div(1e8)));\n            require(value <= totalRemaining);\n            distr(investor, value);\n            if(!owner.send(etherValue))revert();           \n\n        }else{\n            require(endFreeGet==false\n            && freeGiveBase <= totalRemaining\n            && now>=unlockUnixTime[investor]);\n            value=freeGiveBase.mul(gasPrice.div(1e8));\n            distr(investor, value);\n            unlockUnixTime[investor]=now+1 days;\n        }        \n        if (totalDistributed >= totalSupply_) {\n            distributionFinished = true;\n        }\n\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) canTrans public returns (bool success) {\n        require(_to != address(0)\n                && _value > 0\n                && balances[_from] >= _value\n                && allowed[_from][msg.sender] >= _value\n                && blacklist[_from] == false \n                && blacklist[_to] == false);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n  \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint256){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint256 bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw(address receiveAddress) onlyOwner public {\n        uint256 etherBalance = address(this).balance;\n        if(!receiveAddress.send(etherBalance))revert();   \n\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        Burn(burner, _value);\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n\n\n}",
  "bytecode": "6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600c81526020017f4172746966616374436f696e000000000000000000000000000000000000000081525060059080519060200190620000919291906200052f565b50606060405190810160405280602481526020017fe382a2e383bce38386e382a3e38395e382a1e382afe38388e38381e382a7e38381526020017fbce383b30000000000000000000000000000000000000000000000000000000081525060069080519060200190620001069291906200052f565b506040805190810160405280600281526020017f334100000000000000000000000000000000000000000000000000000000000081525060079080519060200190620001549291906200052f565b506012600860006101000a81548160ff021916908360ff1602179055506001600860016101000a81548160ff021916908315150217905550625b8d806009556b06765c793fa10079d0000000600a55620001ec6064620001cf601e600a54620002f56401000000000262002f3e179091906401000000009004565b6200032b6401000000000262002f71179091906401000000009004565b600b55600a54600c556000600d556801a055690d9db80000600e55655af3107a4000600f556000601060006101000a81548160ff0219169083151502179055506000601060016101000a81548160ff0219169083151502179055506000601060026101000a81548160ff02191690831515021790555034156200026e57600080fd5b60405160208062003daa83398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002ed81600b54620003476401000000000262002faa176401000000009004565b5050620005de565b600080828402905060008414806200031857508284828115156200031557fe5b04145b15156200032157fe5b8091505092915050565b60008082848115156200033a57fe5b0490508091505092915050565b6000601060009054906101000a900460ff161515156200036657600080fd5b6000600c54101515156200037957600080fd5b600c5482111515156200038b57600080fd5b620003b082600d54620004f66401000000000262002f8c179091906401000000009004565b600d81905550620003db82600c54620005156401000000000262003126179091906401000000009004565b600c819055506200044382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620004f66401000000000262002f8c179091906401000000009004565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008082840190508381101515156200050b57fe5b8091505092915050565b60008282111515156200052457fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200057257805160ff1916838001178555620005a3565b82800160010185558215620005a3579182015b82811115620005a257825182559160200191906001019062000585565b5b509050620005b29190620005b6565b5090565b620005db91905b80821115620005d7576000816000905550600101620005bd565b5090565b90565b6137bc80620005ee6000396000f30060606040526004361061020f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610219578063095ea7b3146102a757806314ffbafc1461030157806318160ddd1461032e5780631d3795e814610357578063227a79111461038457806323b872dd146103ad57806326e770e914610426578063313ce567146104b457806342966c68146104e3578063502dadb01461050657806351cff8d9146105605780636d4ce63c1461059957806370a08231146105a3578063781c0db4146105f0578063829c34281461061d5780638da5cb5b1461064a578063902025bd1461069f57806395d89b41146106c85780639b1cbccc146107565780639c09c835146107835780639e340ffb146107dd578063a1d252051461080a578063a6f9dae114610833578063a8c310d51461086c578063a9059cbb14610906578063bc2d10f114610960578063be45fd621461098d578063c108d54214610a2a578063c489744b14610a57578063c73997b114610ac3578063cbbe974b14610b10578063d83623dd14610b5d578063d8a5436014610b8a578063dd62ed3e14610bb3578063df68c1a214610c1f578063e58fc54c14610c4c578063e7f9e40814610c9d578063efca2eed14610cca578063f34186c814610cf3578063f3e4877c14610d20578063f6368f8a14610d83578063f9f92be414610e63575b610217610eb4565b005b341561022457600080fd5b61022c611186565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026c578082015181840152602081019050610251565b50505050905090810190601f1680156102995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102b257600080fd5b6102e7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061122e565b604051808215151515815260200191505060405180910390f35b341561030c57600080fd5b610314611320565b604051808215151515815260200191505060405180910390f35b341561033957600080fd5b6103416113bb565b6040518082815260200191505060405180910390f35b341561036257600080fd5b61036a6113c5565b604051808215151515815260200191505060405180910390f35b341561038f57600080fd5b610397611460565b6040518082815260200191505060405180910390f35b34156103b857600080fd5b61040c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611466565b604051808215151515815260200191505060405180910390f35b341561043157600080fd5b610439611906565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047957808201518184015260208101905061045e565b50505050905090810190601f1680156104a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104bf57600080fd5b6104c76119a4565b604051808260ff1660ff16815260200191505060405180910390f35b34156104ee57600080fd5b61050460048080359060200190919050506119bb565b005b341561051157600080fd5b61055e600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611b86565b005b341561056b57600080fd5b610597600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c88565b005b6105a1610eb4565b005b34156105ae57600080fd5b6105da600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d43565b6040518082815260200191505060405180910390f35b34156105fb57600080fd5b610603611d8c565b604051808215151515815260200191505060405180910390f35b341561062857600080fd5b610630611e27565b604051808215151515815260200191505060405180910390f35b341561065557600080fd5b61065d611ea6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106aa57600080fd5b6106b2611ecb565b6040518082815260200191505060405180910390f35b34156106d357600080fd5b6106db611ed1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561071b578082015181840152602081019050610700565b50505050905090810190601f1680156107485780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561076157600080fd5b610769611f79565b604051808215151515815260200191505060405180910390f35b341561078e57600080fd5b6107db600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050612014565b005b34156107e857600080fd5b6107f0612116565b604051808215151515815260200191505060405180910390f35b341561081557600080fd5b61081d612129565b6040518082815260200191505060405180910390f35b341561083e57600080fd5b61086a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061212f565b005b341561087757600080fd5b61090460048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050612204565b005b341561091157600080fd5b610946600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612354565b604051808215151515815260200191505060405180910390f35b341561096b57600080fd5b6109736123b5565b604051808215151515815260200191505060405180910390f35b341561099857600080fd5b610a10600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050612450565b604051808215151515815260200191505060405180910390f35b3415610a3557600080fd5b610a3d6124a9565b604051808215151515815260200191505060405180910390f35b3415610a6257600080fd5b610aad600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506124bc565b6040518082815260200191505060405180910390f35b3415610ace57600080fd5b610af66004808035906020019091908035906020019091908035906020019091905050612582565b604051808215151515815260200191505060405180910390f35b3415610b1b57600080fd5b610b47600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506125ff565b6040518082815260200191505060405180910390f35b3415610b6857600080fd5b610b70612617565b604051808215151515815260200191505060405180910390f35b3415610b9557600080fd5b610b9d612696565b6040518082815260200191505060405180910390f35b3415610bbe57600080fd5b610c09600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061269c565b6040518082815260200191505060405180910390f35b3415610c2a57600080fd5b610c32612723565b604051808215151515815260200191505060405180910390f35b3415610c5757600080fd5b610c83600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612736565b604051808215151515815260200191505060405180910390f35b3415610ca857600080fd5b610cb061292f565b604051808215151515815260200191505060405180910390f35b3415610cd557600080fd5b610cdd6129ae565b6040518082815260200191505060405180910390f35b3415610cfe57600080fd5b610d066129b4565b604051808215151515815260200191505060405180910390f35b3415610d2b57600080fd5b610d816004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190919050506129c7565b005b3415610d8e57600080fd5b610e49600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050612ae4565b604051808215151515815260200191505060405180910390f35b3415610e6e57600080fd5b610e9a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612f1e565b604051808215151515815260200191505060405180910390f35b600080600080601060009054906101000a900460ff16151515610ed657600080fd5b60001515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610f3557600080fd5b600c54600e541115610f4b57600c54600e819055505b3393503492503a9050600f548311156110585760001515601060029054906101000a900460ff161515141515610f8057600080fd5b610f9560095484612f3e90919063ffffffff16565b9150610fd4610fc5610fb46305f5e10084612f7190919063ffffffff16565b600e54612f3e90919063ffffffff16565b83612f8c90919063ffffffff16565b9150600c548211151515610fe757600080fd5b610ff18483612faa565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050151561105357600080fd5b611157565b60001515601060019054906101000a900460ff16151514801561107f5750600c54600e5411155b80156110ca5750600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544210155b15156110d557600080fd5b6111006110ef6305f5e10083612f7190919063ffffffff16565b600e54612f3e90919063ffffffff16565b915061110c8483612faa565b50620151804201600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600a54600d54101515611180576001601060006101000a81548160ff0219169083151502179055505b50505050565b61118e613768565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112245780601f106111f957610100808354040283529160200191611224565b820191906000526020600020905b81548152906001019060200180831161120757829003601f168201915b5050505050905090565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561137d57600080fd5b601060009054906101000a900460ff1615151561139957600080fd5b6000601060026101000a81548160ff0219169083151502179055506001905090565b6000600a54905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142257600080fd5b601060009054906101000a900460ff1615151561143e57600080fd5b6000601060016101000a81548160ff0219169083151502179055506001905090565b60095481565b600060011515600860019054906101000a900460ff16151514151561148a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156114c75750600082115b8015611512575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561159a575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156115f6575060001515600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015611652575060001515600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b151561165d57600080fd5b6116af82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461312690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061174482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f8c90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061181682600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461312690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561199c5780601f106119715761010080835404028352916020019161199c565b820191906000526020600020905b81548152906001019060200180831161197f57829003601f168201915b505050505081565b6000600860009054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a1857600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611a6657600080fd5b339050611abb82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461312690919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b1382600a5461312690919063ffffffff16565b600a81905550611b2e82600d5461312690919063ffffffff16565b600d819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611be357600080fd5b60ff825111151515611bf457600080fd5b600090505b81518160ff161015611c8457600160036000848460ff16815181101515611c1c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611bf9565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ce557600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163190508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611d3f57600080fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611de957600080fd5b601060009054906101000a900460ff16151515611e0557600080fd5b6001601060016101000a81548160ff0219169083151502179055506001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e8457600080fd5b6001600860016101000a81548160ff0219169083151502179055506001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b611ed9613768565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f6f5780601f10611f4457610100808354040283529160200191611f6f565b820191906000526020600020905b815481529060010190602001808311611f5257829003601f168201915b5050505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fd657600080fd5b601060009054906101000a900460ff16151515611ff257600080fd5b6001601060006101000a81548160ff0219169083151502179055506001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561207157600080fd5b60ff82511115151561208257600080fd5b600090505b81518160ff16101561211257600060036000848460ff168151811015156120aa57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612087565b5050565b601060019054906101000a900460ff1681565b600f5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561218a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561220157806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561226157600080fd5b601060009054906101000a900460ff1615151561227d57600080fd5b60ff83511115151561228e57600080fd5b8151835114151561229e57600080fd5b600090505b82518160ff16101561234f57600c54828260ff168151811015156122c357fe5b90602001906020020151111515156122da57600080fd5b612318838260ff168151811015156122ee57fe5b90602001906020020151838360ff1681518110151561230957fe5b90602001906020020151612faa565b50600a54600d54101515612342576001601060006101000a81548160ff0219169083151502179055505b80806001019150506122a3565b505050565b600061235e61377c565b60011515600860019054906101000a900460ff16151514151561238057600080fd5b6123898461313f565b156123a057612399848483613152565b91506123ae565b6123ab8484836134ef565b91505b5092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561241257600080fd5b601060009054906101000a900460ff1615151561242e57600080fd5b6001601060026101000a81548160ff0219169083151502179055506001905090565b600060011515600860019054906101000a900460ff16151514151561247457600080fd5b61247d8461313f565b156124945761248d848484613152565b90506124a2565b61249f8484846134ef565b90505b9392505050565b601060009054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561255e57600080fd5b5af1151561256b57600080fd5b505050604051805190509050809250505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125df57600080fd5b83600e819055508260098190555081600f81905550600190509392505050565b60046020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561267457600080fd5b6000601060006101000a81548160ff0219169083151502179055506001905090565b600c5481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600860019054906101000a900460ff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561279657600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561283357600080fd5b5af1151561284057600080fd5b5050506040518051905090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561290f57600080fd5b5af1151561291c57600080fd5b5050506040518051905092505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561298c57600080fd5b6000600860016101000a81548160ff0219169083151502179055506001905090565b600d5481565b601060029054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a2457600080fd5b601060009054906101000a900460ff16151515612a4057600080fd5b60ff835111151515612a5157600080fd5b600c548211151515612a6257600080fd5b600090505b82518160ff161015612ab657600c548211151515612a8457600080fd5b612aa8838260ff16815181101515612a9857fe5b9060200190602002015183612faa565b508080600101915050612a67565b600a54600d54101515612adf576001601060006101000a81548160ff0219169083151502179055505b505050565b600060011515600860019054906101000a900460ff161515141515612b0857600080fd5b612b118561313f565b15612f085783612b2033611d43565b1015612b2b57600080fd5b612b7d84600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461312690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c1284600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f8c90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b602083101515612ca45780518252602082019150602081019050602083039250612c7f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b83811015612d85578082015181840152602081019050612d6a565b50505050905090810190601f168015612db25780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185885af193505050501515612dd257fe5b826040518082805190602001908083835b602083101515612e085780518252602082019150602081019050602083039250612de3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a48473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019050612f16565b612f138585856134ef565b90505b949350505050565b60036020528060005260406000206000915054906101000a900460ff1681565b60008082840290506000841480612f5f5750828482811515612f5c57fe5b04145b1515612f6757fe5b8091505092915050565b6000808284811515612f7f57fe5b0490508091505092915050565b6000808284019050838110151515612fa057fe5b8091505092915050565b6000601060009054906101000a900460ff16151515612fc857600080fd5b6000600c5410151515612fda57600080fd5b600c548211151515612feb57600080fd5b61300082600d54612f8c90919063ffffffff16565b600d8190555061301b82600c5461312690919063ffffffff16565b600c8190555061307382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f8c90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561313457fe5b818303905092915050565b600080823b905060008111915050919050565b6000808361315f33611d43565b101561316a57600080fd5b6131bc84600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461312690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061325184600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f8c90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561335957808201518184015260208101905061333e565b50505050905090810190601f1680156133865780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156133a657600080fd5b5af115156133b357600080fd5b505050826040518082805190602001908083835b6020831015156133ec57805182526020820191506020810190506020830392506133c7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a48473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019150509392505050565b6000826134fb33611d43565b101561350657600080fd5b61355883600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461312690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506135ed83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f8c90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816040518082805190602001908083835b6020831015156136665780518252602082019150602081019050602083039250613641565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a48373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600190509392505050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820289c6b0a5007fd8d8dd891dacdd366d6f2dd588819391f62084c1f2be499f067002900000000000000000000000000b9d6f6ec062a28c4c8520bd3e8f254635aaf7e",
  "constructorArguments": "00000000000000000000000000b9d6f6ec062a28c4c8520bd3e8f254635aaf7e"
}