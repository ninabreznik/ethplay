{
  "address": "0x82aa987a16deafd8b4fab73ec316f94f4df43020",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthCash_V2",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-20\n*/\n\npragma solidity ^0.4.24;\n\n/*\n*\n* EthCash_V2 Contract Source\n*~~~~~~~~~~~~~~~~~~~~~~~\n* Web: ethcash.online\n* Web mirrors: ethcash.global | ethcash.club\n* Email: [emailÂ protected]\n* Telergam: ETHCash_Online\n*~~~~~~~~~~~~~~~~~~~~~~~\n*  - GAIN 3,50% PER 24 HOURS\n*  - Life-long payments\n*  - Minimal 0.03 ETH\n*  - Can payouts yourself every 30 minutes - send 0 eth (> 0.001 ETH must accumulate on balance)\n*  - Affiliate 7.00%\n*    -- 3.50% Cashback (first payment with ref adress DATA)\n*~~~~~~~~~~~~~~~~~~~~~~~\n* RECOMMENDED GAS LIMIT: 250000\n* RECOMMENDED GAS PRICE: ethgasstation.info\n*\n*/\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if(a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b != 0);\n\n        return a % b;\n    }\n}\n\ncontract EthCash_V2 {\n    using SafeMath for uint;\n\n    struct Investor {\n        uint id;\n        uint deposit;\n        uint deposits;\n        uint date;\n        address referrer;\n    }\n\n    uint private MIN_INVEST = 0.03 ether;\n    uint private OWN_COMMISSION_PERCENT = 15;\n    uint private COMPENSATION_COMMISSION_PERCENT = 5;\n    uint private REF_BONUS_PERCENT = 7;\n    uint private CASHBACK_PERCENT = 35;\n    uint private PAYOUT_INTERVAL = 10 minutes;\n    uint private PAYOUT_SELF_INTERVAL = 30 minutes;\n    uint private INTEREST = 35;\n\n    address constant public ADMIN_COMMISSION_ADDRESS = 0x54E14eaaCffF244c82a1EDc3778F9A0391E7e615;\n    address constant public COMPENSATION_COMMISSION_ADDRESS = 0x8e30A300c73CD8107280f5Af04E90C1F815086E1;\n    uint public depositAmount;\n    uint public payoutDate;\n    uint public paymentDate;\n\n    address[] public addresses;\n    mapping(address => Investor) public investors;\n\n    event Invest(address holder, uint amount);\n    event ReferrerBonus(address holder, uint amount);\n    event Cashback(address holder, uint amount);\n    event PayoutCumulative(uint amount, uint txs);\n    event PayoutSelf(address addr, uint amount);\n\n    constructor() public {\n        payoutDate = now;\n    }\n\n    function() payable public {\n\n        if (0 == msg.value) {\n            payoutSelf();\n            return;\n        }\n\n        require(msg.value >= MIN_INVEST, \"Too small amount\");\n\n        Investor storage user = investors[msg.sender];\n\n        if(user.id == 0) {\n            user.id = addresses.length + 1;\n            addresses.push(msg.sender);\n\n            address ref = bytesToAddress(msg.data);\n            if(investors[ref].deposit > 0 && ref != msg.sender) {\n                user.referrer = ref;\n            }\n        }\n\n        user.deposit = user.deposit.add(msg.value);\n        user.deposits = user.deposits.add(1);\n        user.date = now;\n        emit Invest(msg.sender, msg.value);\n\n        paymentDate = now;\n        depositAmount = depositAmount.add(msg.value);\n\n        uint own_com = msg.value.div(100).mul(OWN_COMMISSION_PERCENT);\n        uint com_com = msg.value.div(100).mul(COMPENSATION_COMMISSION_PERCENT);\n        ADMIN_COMMISSION_ADDRESS.transfer(own_com);\n        COMPENSATION_COMMISSION_ADDRESS.transfer(com_com);\n\n        if(user.referrer != address(0)) {\n            uint bonus = msg.value.div(100).mul(REF_BONUS_PERCENT);\n            user.referrer.transfer(bonus);\n            emit ReferrerBonus(user.referrer, bonus);\n\n            if(user.deposits == 1) {\n                uint cashback = msg.value.div(1000).mul(CASHBACK_PERCENT);\n                msg.sender.transfer(cashback);\n                emit Cashback(msg.sender, cashback);\n            }\n        }\n    }\n\n    function payout(uint limit) public {\n\n        require(now >= payoutDate + PAYOUT_INTERVAL, \"Too fast payout request\");\n\n        uint sum;\n        uint txs;\n\n        for(uint i = addresses.length ; i > 0; i--) {\n            address addr = addresses[i - 1];\n\n            if(investors[addr].date + 20 hours > now) continue;\n\n            uint amount = getInvestorUnPaidAmount(addr);\n            investors[addr].date = now;\n\n            if(address(this).balance < amount) {\n                return;\n            }\n\n            addr.transfer(amount);\n\n            sum = sum.add(amount);\n\n            if(++txs >= limit) break;\n        }\n\n        payoutDate = now;\n\n        emit PayoutCumulative(sum, txs);\n    }\n\n    function payoutSelf() public {\n        address addr = msg.sender;\n\n        require(investors[addr].deposit > 0, \"Deposit not found\");\n        require(now >= investors[addr].date + PAYOUT_SELF_INTERVAL, \"Too fast payout request\");\n\n        uint amount = getInvestorUnPaidAmount(addr);\n        require(amount >= 1 finney, \"Too small unpaid amount\");\n\n        investors[addr].date = now;\n\n        if(address(this).balance < amount) {\n            return;\n        }\n\n        addr.transfer(amount);\n\n        emit PayoutSelf(addr, amount);\n    }\n\n    function bytesToAddress(bytes bys) private pure returns(address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    function getInvestorUnPaidAmount(address addr) public view returns(uint) {\n        return investors[addr].deposit.div(1000).mul(INTEREST).div(100).mul(now.sub(investors[addr].date).mul(100)).div(1 days);\n    }\n\n    function getInvestorCount() public view returns(uint) { return addresses.length; }\n}",
  "bytecode": "6080604052666a94d74f430000600055600f600155600560025560076003556023600455610258600555610708600655602360075534801561004057600080fd5b50426009819055506112db806100576000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063090f44651461076557806326f951a414610790578063419759f5146107e75780635561ae62146108125780636f7bc9be1461083d578063702510be146108dc578063960524e3146108f35780639e4ece801461091e578063bf6a2a2214610975578063e1152343146109cc578063edf26d9b146109f9575b60008060008060008034600014156100ce576100c9610a66565b61075d565b6000543410151515610148576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f546f6f20736d616c6c20616d6f756e740000000000000000000000000000000081525060200191505060405180910390fd5b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209550600086600001541415610313576001600b80549050018660000181905550600b3390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102496000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050610d90565b94506000600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541180156102c957503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b1561031257848660040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b61032a348760010154610d9e90919063ffffffff16565b866001018190555061034a60018760020154610d9e90919063ffffffff16565b86600201819055504286600301819055507fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a142600a819055506103e234600854610d9e90919063ffffffff16565b600881905550610410600154610402606434610dbf90919063ffffffff16565b610de990919063ffffffff16565b935061043a60025461042c606434610dbf90919063ffffffff16565b610de990919063ffffffff16565b92507354e14eaacfff244c82a1edc3778f9a0391e7e61573ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015610496573d6000803e3d6000fd5b50738e30a300c73cd8107280f5af04e90c1f815086e173ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156104f1573d6000803e3d6000fd5b50600073ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561075c57610574600354610566606434610dbf90919063ffffffff16565b610de990919063ffffffff16565b91508560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156105e0573d6000803e3d6000fd5b507fde0dc28f8ee97765057c702eab8bd50ea5e6cf57795d86aebaa90cd1d2daf54a8660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160018660020154141561075b576106a66004546106986103e834610dbf90919063ffffffff16565b610de990919063ffffffff16565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106ee573d6000803e3d6000fd5b507fe523757eee9c213543af9b06c96e0629da383d3149173f4a03ab96d8ff5267603382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5b505050505050005b34801561077157600080fd5b5061077a610e27565b6040518082815260200191505060405180910390f35b34801561079c57600080fd5b506107a5610e2d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107f357600080fd5b506107fc610e45565b6040518082815260200191505060405180910390f35b34801561081e57600080fd5b50610827610e4b565b6040518082815260200191505060405180910390f35b34801561084957600080fd5b5061087e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e51565b604051808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390f35b3480156108e857600080fd5b506108f1610a66565b005b3480156108ff57600080fd5b50610908610ea7565b6040518082815260200191505060405180910390f35b34801561092a57600080fd5b5061095f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eb4565b6040518082815260200191505060405180910390f35b34801561098157600080fd5b5061098a610fc9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109d857600080fd5b506109f760048036038101908080359060200190929190505050610fe1565b005b348015610a0557600080fd5b50610a2460048036038101908080359060200190929190505050611250565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000803391506000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154111515610b26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4465706f736974206e6f7420666f756e6400000000000000000000000000000081525060200191505060405180910390fd5b600654600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154014210151515610be4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546f6f2066617374207061796f7574207265717565737400000000000000000081525060200191505060405180910390fd5b610bed82610eb4565b905066038d7ea4c680008110151515610c6e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546f6f20736d616c6c20756e7061696420616d6f756e7400000000000000000081525060200191505060405180910390fd5b42600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550803073ffffffffffffffffffffffffffffffffffffffff16311015610cd957610d8c565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d1f573d6000803e3d6000fd5b507ffd2f2b8ea97d71bc161986cb5d2af11fca3dafc45071344594e0cc8161ef375c8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5050565b600060148201519050919050565b6000808284019050838110151515610db557600080fd5b8091505092915050565b600080600083111515610dd157600080fd5b8284811515610ddc57fe5b0490508091505092915050565b6000806000841415610dfe5760009150610e20565b8284029050828482811515610e0f57fe5b04141515610e1c57600080fd5b8091505b5092915050565b60095481565b7354e14eaacfff244c82a1edc3778f9a0391e7e61581565b60085481565b600a5481565b600c6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b6000600b80549050905090565b6000610fc262015180610fb4610f286064610f1a600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301544261128e90919063ffffffff16565b610de990919063ffffffff16565b610fa66064610f98600754610f8a6103e8600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610dbf90919063ffffffff16565b610de990919063ffffffff16565b610dbf90919063ffffffff16565b610de990919063ffffffff16565b610dbf90919063ffffffff16565b9050919050565b738e30a300c73cd8107280f5af04e90c1f815086e181565b6000806000806000600554600954014210151515611067576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546f6f2066617374207061796f7574207265717565737400000000000000000081525060200191505060405180910390fd5b600b8054905092505b600083111561120157600b6001840381548110151561108b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691504262011940600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401111561110c576111f3565b61111582610eb4565b905042600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550803073ffffffffffffffffffffffffffffffffffffffff1631101561118257611248565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156111c8573d6000803e3d6000fd5b506111dc8186610d9e90919063ffffffff16565b945085846001019450841015156111f257611201565b5b828060019003935050611070565b426009819055507f2495041791cabab13dcf477f0e49b751a103e843b09287746194310bd1dee80c8585604051808381526020018281526020019250505060405180910390a15b505050505050565b600b8181548110151561125f57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808383111515156112a057600080fd5b828403905080915050929150505600a165627a7a72305820dc216952bb2a672619b8221066fd73ffec441710a2b1086071eae04c130e18ff0029"
}