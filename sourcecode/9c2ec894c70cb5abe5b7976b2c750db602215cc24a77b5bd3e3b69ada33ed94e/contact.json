{
  "address": "0x1543d0f83489e82a1344df6827b23d541f235a50",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AIgathaToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-09\n*/\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n/**\n * @title tokenRecipient\n * @dev An interface capable of calling `receiveApproval`, which is used by `approveAndCall` to notify the contract from this interface\n */\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\n/**\n * @title TokenERC20\n * @author Jun-You Liu, Ping Chen\n * @dev A simple ERC20 standard token with burnable function\n */\ncontract TokenERC20 {\n  using SafeMath for uint256;\n\n  uint256 public totalSupply;\n  bool public transferable;\n\n  // This creates an array with all balances\n  mapping(address => uint256) public balances;\n  mapping(address => mapping(address => uint256)) public allowed;\n\n  // This notifies clients about the amount burnt\n  event Burn(address indexed from, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  function balanceOf(address _owner) view public returns(uint256) {\n    return balances[_owner];\n  }\n\n  function allowance(address _owner, address _spender) view public returns(uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Basic transfer of all transfer-related functions\n   * @param _from The address of sender\n   * @param _to The address of recipient\n   * @param _value The amount sender want to transfer to recipient\n   */\n  function _transfer(address _from, address _to, uint _value) internal {\n  \trequire(transferable);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer( _from, _to, _value);\n  }\n\n  /**\n   * @notice Transfer tokens\n   * @dev Send `_value` tokens to `_to` from your account\n   * @param _to The address of the recipient\n   * @param _value The amount to send\n   * @return True if the transfer is done without error\n   */\n  function transfer(address _to, uint256 _value) public returns(bool) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @notice Transfer tokens from other address\n   * @dev Send `_value` tokens to `_to` on behalf of `_from`\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value The amount to send\n   * @return True if the transfer is done without error\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @notice Set allowance for other address\n   * @dev Allows `_spender` to spend no more than `_value` tokens on your behalf\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   * @return True if the approval is done without error\n   */\n  function approve(address _spender, uint256 _value) public returns(bool) {\n    // Avoid the front-running attack\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @notice Set allowance for other address and notify\n   * @dev Allows contract `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n   * @param _spender The contract address authorized to spend\n   * @param _value the max amount they can spend\n   * @param _extraData some extra information to send to the approved contract\n   * @return True if it is done without error\n   */\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n    tokenRecipient spender = tokenRecipient(_spender);\n    if (approve(_spender, _value)) {\n      spender.receiveApproval(msg.sender, _value, this, _extraData);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @notice Destroy tokens\n   * @dev Remove `_value` tokens from the system irreversibly\n   * @param _value The amount of money will be burned\n   * @return True if `_value` is burned successfully\n   */\n  function burn(uint256 _value) public returns(bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    emit Burn(msg.sender, _value);\n    return true;\n  }\n\n  /**\n   * @notice Destroy tokens from other account\n   * @dev Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n   * @param _from The address of the sender\n   * @param _value The amount of money will be burned\n   * @return True if `_value` is burned successfully\n   */\n  function burnFrom(address _from, uint256 _value) public returns(bool) {\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    balances[_from] = balances[_from].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    emit Burn(_from, _value);\n    return true;\n  }\n}\n\n\n/**\n * @title AIgathaToken\n * @author Jun-You Liu, Ping Chen, (auditors Hans Lin, Luka Chen)\n * @dev The AIgatha Token which is comply with burnable erc20 standard, referred to Cobinhood token contract: https://etherscan.io/address/0xb2f7eb1f2c37645be61d73953035360e768d81e6#code\n */\ncontract AIgathaToken is TokenERC20, Ownable {\n  using SafeMath for uint256;\n\n  // Token Info.\n  string public constant name = \"AIgatha Token\";\n  string public constant symbol = \"ATH\";\n  uint8 public constant decimals = 18;\n\n  // Sales period.\n  uint256 public startDate;\n  uint256 public endDate;\n\n  // Token Cap for each rounds\n  uint256 public saleCap;\n\n  // Address where funds are collected.\n  address public wallet;\n\n  // Amount of raised money in wei.\n  uint256 public weiRaised;\n\n  // Threshold of sold amount\n  uint256 public threshold;\n\n  // Whether in the extended period\n  bool public extended;\n\n  // Event\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n  event PreICOTokenPushed(address indexed buyer, uint256 amount);\n  event UserIDChanged(address owner, bytes32 user_id);\n\n  /**\n   * @dev Constructor of Aigatha Token\n   * @param _wallet The address where funds are collected\n   * @param _saleCap The token cap in public round\n   * @param _totalSupply The total amount of token\n   * @param _threshold The percentage of selling amount need to achieve at least e.g. 40% -> _threshold = 40\n   * @param _start The start date in seconds\n   * @param _end The end date in seconds\n   */\n  function AIgathaToken(address _wallet, uint256 _saleCap, uint256 _totalSupply, uint256 _threshold, uint256 _start, uint256 _end) public {\n    wallet = _wallet;\n    saleCap = _saleCap * (10 ** uint256(decimals));\n    totalSupply = _totalSupply * (10 ** uint256(decimals));\n    startDate = _start;\n    endDate = _end;\n\n    threshold = _threshold * totalSupply / 2 / 100;\n    balances[0xbeef] = saleCap;\n    balances[wallet] = totalSupply.sub(saleCap);\n  }\n\n  function supply() internal view returns (uint256) {\n    return balances[0xbeef];\n  }\n\n  function saleActive() public view returns (bool) {\n    return (now >= startDate &&\n            now <= endDate && supply() > 0);\n  }\n\n  function extendSaleTime() onlyOwner public {\n    require(!saleActive());\n    require(!extended);\n    require((saleCap-supply()) < threshold); //check\n    extended = true;\n    endDate += 60 days;\n  }\n\n  /**\n   * @dev Get the rate of exchange according to the purchase date\n   * @param at The date converted into seconds\n   * @return The corresponding rate\n   */\n  function getRateAt(uint256 at) public view returns (uint256) {\n    if (at < startDate) {\n      return 0;\n    }\n    else if (at < (startDate + 15 days)) { //check\n      return 10500;\n    }\n    else {\n      return 10000;\n    }\n  }\n\n  /**\n   * @dev Fallback function can be used to buy tokens\n   */\n  function () payable public{\n    buyTokens(msg.sender, msg.value);\n  }\n\n  /**\n   * @dev For pushing pre-ICO records\n   * @param buyer The address of buyer in pre-ICO\n   * @param amount The amount of token bought\n   */\n  function push(address buyer, uint256 amount) onlyOwner public {\n    require(balances[wallet] >= amount);\n    balances[wallet] = balances[wallet].sub(amount);\n    balances[buyer] = balances[buyer].add(amount);\n    emit PreICOTokenPushed(buyer, amount);\n  }\n\n  /**\n   * @dev Buy tokens\n   * @param sender The address of buyer\n   * @param value The amount of token bought\n   */\n  function buyTokens(address sender, uint256 value) internal {\n    require(saleActive());\n\n    uint256 weiAmount = value;\n    uint256 updatedWeiRaised = weiRaised.add(weiAmount);\n\n    // Calculate token amount to be purchased\n    uint256 actualRate = getRateAt(now);\n    uint256 amount = weiAmount.mul(actualRate);\n\n    // We have enough token to sale\n    require(supply() >= amount);\n\n    // Transfer\n    balances[0xbeef] = balances[0xbeef].sub(amount);\n    balances[sender] = balances[sender].add(amount);\n    emit TokenPurchase(sender, weiAmount, amount);\n\n    // Update state.\n    weiRaised = updatedWeiRaised;\n  }\n\n  /**\n   * @dev Withdraw all ether in this contract back to the wallet\n   */\n  function withdraw() onlyOwner public {\n    wallet.transfer(address(this).balance);\n  }\n\n  /**\n   * @dev Collect all the remain token which is unsold after the selling period and make this token can be tranferred\n   */\n  function finalize() onlyOwner public {\n    require(!saleActive());\n    balances[wallet] = balances[wallet].add(balances[0xbeef]);\n    balances[0xbeef] = 0;\n    transferable = true;\n  }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000ca7aeb423e79e85a734931af9503b84e81a4b2740000000000000000000000000000000000000000000000000000000029b927000000000000000000000000000000000000000000000000000000000077359400000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000005b37a900000000000000000000000000000000000000000000000000000000005b60877f"
}