{
  "address": "0xc13dfb79ad78ea5dab5452299730431771802fc4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GenesisCryptoTechnology",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity 0.4.23;\n\n//\n// This source file is part of the current-contracts open source project\n// Copyright 2018 Zerion LLC\n// Licensed under Apache License v2.0\n//\n\n\n// @title Abstract ERC20 token interface\ncontract AbstractToken {\n\tfunction balanceOf(address owner) public view returns (uint256 balance);\n\tfunction transfer(address to, uint256 value) public returns (bool success);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool success);\n\tfunction approve(address spender, uint256 value) public returns (bool success);\n\tfunction allowance(address owner, address spender) public view returns (uint256 remaining);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Owned {\n\n\taddress public owner = msg.sender;\n\taddress public potentialOwner;\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tmodifier onlyPotentialOwner {\n\t\trequire(msg.sender == potentialOwner);\n\t\t_;\n\t}\n\n\tevent NewOwner(address old, address current);\n\tevent NewPotentialOwner(address old, address potential);\n\n\tfunction setOwner(address _new)\n\t\tpublic\n\t\tonlyOwner\n\t{\n\t\temit NewPotentialOwner(owner, _new);\n\t\tpotentialOwner = _new;\n\t}\n\n\tfunction confirmOwnership()\n\t\tpublic\n\t\tonlyPotentialOwner\n\t{\n\t\temit NewOwner(owner, potentialOwner);\n\t\towner = potentialOwner;\n\t\tpotentialOwner = address(0);\n\t}\n}\n\n// @title SafeMath contract - Math operations with safety checks.\n// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\ncontract SafeMath {\n\t/**\n\t* @dev Multiplies two numbers, throws on overflow.\n\t*/\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Integer division of two numbers, truncating the quotient.\n\t*/\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn a / b;\n\t}\n\n\t/**\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t* @dev Adds two numbers, throws on overflow.\n\t*/\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Raises `a` to the `b`th power, throws on overflow.\n\t*/\n\tfunction pow(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a ** b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\ncontract StandardToken is AbstractToken, Owned, SafeMath {\n\n\t/*\n\t *  Data structures\n\t */\n\tmapping (address => uint256) internal balances;\n\tmapping (address => mapping (address => uint256)) internal allowed;\n\tuint256 public totalSupply;\n\n\t/*\n\t *  Read and write storage functions\n\t */\n\t/// @dev Transfers sender's tokens to a given address. Returns success.\n\t/// @param _to Address of token receiver.\n\t/// @param _value Number of tokens to transfer.\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\treturn _transfer(msg.sender, _to, _value);\n\t}\n\n\t/// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n\t/// @param _from Address from where tokens are withdrawn.\n\t/// @param _to Address to where tokens are sent.\n\t/// @param _value Number of tokens to transfer.\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(allowed[_from][msg.sender] >= _value);\n\t\tallowed[_from][msg.sender] -= _value;\n\n\t\treturn _transfer(_from, _to, _value);\n\t}\n\n\t/// @dev Returns number of tokens owned by given address.\n\t/// @param _owner Address of token owner.\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n\t/// @dev Sets approved amount of tokens for spender. Returns success.\n\t/// @param _spender Address of allowed account.\n\t/// @param _value Number of approved tokens.\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/*\n\t * Read storage functions\n\t */\n\t/// @dev Returns number of allowed tokens for given address.\n\t/// @param _owner Address of token owner.\n\t/// @param _spender Address of token spender.\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t/**\n\t* @dev Private transfer, can only be called by this contract.\n\t* @param _from The address of the sender.\n\t* @param _to The address of the recipient.\n\t* @param _value The amount to send.\n\t* @return success True if the transfer was successful, or throws.\n\t*/\n\tfunction _transfer(address _from, address _to, uint256 _value) private returns (bool success) {\n\t\trequire(_to != address(0));\n\t\trequire(balances[_from] >= _value);\n\t\tbalances[_from] -= _value;\n\t\tbalances[_to] = add(balances[_to], _value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n}\n\n/// @title Token contract - Implements Standard ERC20 with additional features.\n/// @author Zerion - <[email protected]>\ncontract Token is StandardToken {\n\n\t// Time of the contract creation\n\tuint256 public creationTime;\n\n\tfunction Token() public {\n\t\t/* solium-disable-next-line security/no-block-members */\n\t\tcreationTime = now;\n\t}\n\n\t/// @dev Owner can transfer out any accidentally sent ERC20 tokens\n\tfunction transferERC20Token(AbstractToken _token, address _to, uint256 _value)\n\t\tpublic\n\t\tonlyOwner\n\t\treturns (bool success)\n\t{\n\t\trequire(_token.balanceOf(address(this)) >= _value);\n\t\tuint256 receiverBalance = _token.balanceOf(_to);\n\t\trequire(_token.transfer(_to, _value));\n\n\t\tuint256 receiverNewBalance = _token.balanceOf(_to);\n\t\tassert(receiverNewBalance == add(receiverBalance, _value));\n\n\t\treturn true;\n\t}\n\n\t/// @dev Increases approved amount of tokens for spender. Returns success.\n\tfunction increaseApproval(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _value);\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\t/// @dev Decreases approved amount of tokens for spender. Returns success.\n\tfunction decreaseApproval(address _spender, uint256 _value) public returns (bool success) {\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\n\t\tif (_value > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t\tallowed[msg.sender][_spender] = sub(oldValue, _value);\n\t\t}\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n}\n\n// @title Token contract - Implements Standard ERC20 Token for GCT project.\n/// @author Zerion - <[email protected]>\ncontract GenesisCryptoTechnology is Token {\n\n\t/// TOKEN META DATA\n\tstring constant public name = 'GenesisCryptoTechnology';\n\tstring constant public symbol = 'GCT';\n\tuint8  constant public decimals = 8;\n uint256 public exchangeRate = 5880; \n\n\t/// ALOCATIONS\n\t// To calculate vesting periods we assume that 1 month is always equal to 30 days \n\n\n\t/*** Initial Investors' tokens ***/\n\n\t// 600,000,00 (60%) tokens are distributed among initial investors\n\t// These tokens will be distributed without vesting\n\n\taddress public investorsAllocation = address(0x55f6074046b1fA3210E350CF520033F629f686d1);\n\tuint256 public investorsTotal = 60000000e8;\n\n\n\t/*** Overdraft Reserves ***/\n\n\t// 200,000,00 (20%) tokens will be eventually available for overdraft\n\t// These tokens will be distributed monthly with a 6 month cliff within a year\n\t// 41,666,666 tokens will be unlocked every month after the cliff\n\t// 4 tokens will be unlocked without vesting to ensure that total amount sums up to 250,000,000.\n\n\taddress public overdraftAllocation = address(0x93F233fdF9d0Ea73c87AA0EDB3e4FB417Fb50145);\n\tuint256 public overdraftTotal = 20000000e8;\n\tuint256 public overdraftPeriodAmount = 41666666e8;\n\tuint256 public overdraftUnvested = 4e8;\n\tuint256 public overdraftCliff = 5 * 30 days;\n\tuint256 public overdraftPeriodLength = 810 days;\n\tuint8   public overdraftPeriodsNumber = 6;\n\n\n\t/*** Tokens reserved for Founders and Team ***/\n\n\t// 150,000,00 (15%) tokens will be eventually available for the team\n\t// These tokens will be distributed every 3 month without a cliff within 4 years\n\t// 7,031,250 tokens will be unlocked every 3 month\n\n\taddress public teamAllocation  = address(0x1258c8C124dCAdf8122117EbF1968FFC54bFBFa6);\n\tuint256 public teamTotal = 15000000e8;\n\tuint256 public teamPeriodAmount = 7031250e8;\n\tuint256 public teamUnvested = 0;\n\tuint256 public teamCliff = 0;\n\tuint256 public teamPeriodLength = 3 * 810 days;\n\tuint8   public teamPeriodsNumber = 16;\n\n\n\n\t/*** Tokens reserved for Community Building and Airdrop Campaigns ***/\n\n\t// 40,000,00 (4%) tokens will be eventually available for the community\n\t// 10,000,002 tokens will be available instantly without vesting\n\t// 49,999,998 tokens will be distributed every 3 month without a cliff within 18 months\n\t// 8,333,333 tokens will be unlocked every 3 month\n\n\n\taddress public communityAllocation  = address(0xa4d82eb18d2Bca1A3A2443324F0Beea0A0DC23C8);\n\tuint256 public communityTotal = 4000000e8;\n\tuint256 public communityPeriodAmount = 8333333e8;\n\tuint256 public communityUnvested = 10000002e8;\n\tuint256 public communityCliff = 0;\n\tuint256 public communityPeriodLength = 3 * 810 days;\n\tuint8   public communityPeriodsNumber = 6;\n\n\n\n\t/*** Tokens reserved for Advisors, Legal and PR ***/\n\n\t// 10,000,00 (1%) tokens will be eventually available for advisers\n\t// 25,000,008 tokens will be available instantly without vesting\n\t// 27 499 992 tokens will be distributed monthly without a cliff within 12 months\n\t// 2,291,666 tokens will be unlocked every month\n\n\taddress public advisersAllocation  = address(0xa020d6Ca8738B18727dEFbe49fC22e3eF7110163);\n\tuint256 public advisersTotal = 1000000e8;\n\tuint256 public advisersPeriodAmount = 2291666e8;\n\tuint256 public advisersUnvested = 25000008e8;\n\tuint256 public advisersCliff = 0;\n\tuint256 public advisersPeriodLength = 1 days;\n\tuint8   public advisersPeriodsNumber = 12;\n\n\n\t/// CONSTRUCTOR\n\n\tfunction GenesisCryptoTechnology() public {\n\t\t//  Overall, 1,000,000,00 tokens exist\n\t\ttotalSupply = 100000000e8;\n\n\t\tbalances[investorsAllocation] = investorsTotal;\n\t\tbalances[overdraftAllocation] = overdraftTotal;\n\t\tbalances[teamAllocation] = teamTotal;\n\t\tbalances[communityAllocation] = communityTotal;\n\t\tbalances[advisersAllocation] = advisersTotal;\n\n\t\t// Unlock some tokens without vesting\n\t\tallowed[investorsAllocation][msg.sender] = investorsTotal;\n\t\tallowed[overdraftAllocation][msg.sender] = overdraftUnvested;\n\t\tallowed[communityAllocation][msg.sender] = communityUnvested;\n\t\tallowed[advisersAllocation][msg.sender] = advisersUnvested;\n\t}\n\n\t/// DISTRIBUTION\n\n\tfunction distributeInvestorsTokens(address _to, uint256 _amountWithDecimals)\n\t\tpublic\n\t\tonlyOwner\n\t{\n\t\trequire(transferFrom(investorsAllocation, _to, _amountWithDecimals));\n\t}\n\n\t/// VESTING\n\n\tfunction withdrawOverdraftTokens(address _to, uint256 _amountWithDecimals)\n\t\tpublic\n\t\tonlyOwner\n\t{\n\t\tallowed[overdraftAllocation][msg.sender] = allowance(overdraftAllocation, msg.sender);\n\t\trequire(transferFrom(overdraftAllocation, _to, _amountWithDecimals));\n\t}\n\n\tfunction withdrawTeamTokens(address _to, uint256 _amountWithDecimals)\n\t\tpublic\n\t\tonlyOwner \n\t{\n\t\tallowed[teamAllocation][msg.sender] = allowance(teamAllocation, msg.sender);\n\t\trequire(transferFrom(teamAllocation, _to, _amountWithDecimals));\n\t}\n\n\tfunction withdrawCommunityTokens(address _to, uint256 _amountWithDecimals)\n\t\tpublic\n\t\tonlyOwner \n\t{\n\t\tallowed[communityAllocation][msg.sender] = allowance(communityAllocation, msg.sender);\n\t\trequire(transferFrom(communityAllocation, _to, _amountWithDecimals));\n\t}\n\n\tfunction withdrawAdvisersTokens(address _to, uint256 _amountWithDecimals)\n\t\tpublic\n\t\tonlyOwner \n\t{\n\t\tallowed[advisersAllocation][msg.sender] = allowance(advisersAllocation, msg.sender);\n\t\trequire(transferFrom(advisersAllocation, _to, _amountWithDecimals));\n\t}\n\n\t/// @dev Overrides StandardToken.sol function\n\tfunction allowance(address _owner, address _spender)\n\t\tpublic\n\t\tview\n\t\treturns (uint256 remaining)\n\t{   \n\t\tif (_spender != owner) {\n\t\t\treturn allowed[_owner][_spender];\n\t\t}\n\n\t\tuint256 unlockedTokens;\n\t\tuint256 spentTokens;\n\n\t\tif (_owner == overdraftAllocation) {\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\n\t\t\t\toverdraftCliff,\n\t\t\t\toverdraftPeriodLength,\n\t\t\t\toverdraftPeriodAmount,\n\t\t\t\toverdraftPeriodsNumber,\n\t\t\t\toverdraftUnvested\n\t\t\t);\n\t\t\tspentTokens = sub(overdraftTotal, balanceOf(overdraftAllocation));\n\t\t} else if (_owner == teamAllocation) {\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\n\t\t\t\tteamCliff,\n\t\t\t\tteamPeriodLength,\n\t\t\t\tteamPeriodAmount,\n\t\t\t\tteamPeriodsNumber,\n\t\t\t\tteamUnvested\n\t\t\t);\n\t\t\tspentTokens = sub(teamTotal, balanceOf(teamAllocation));\n\t\t} else if (_owner == communityAllocation) {\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\n\t\t\t\tcommunityCliff,\n\t\t\t\tcommunityPeriodLength,\n\t\t\t\tcommunityPeriodAmount,\n\t\t\t\tcommunityPeriodsNumber,\n\t\t\t\tcommunityUnvested\n\t\t\t);\n\t\t\tspentTokens = sub(communityTotal, balanceOf(communityAllocation));\n\t\t} else if (_owner == advisersAllocation) {\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\n\t\t\t\tadvisersCliff,\n\t\t\t\tadvisersPeriodLength,\n\t\t\t\tadvisersPeriodAmount,\n\t\t\t\tadvisersPeriodsNumber,\n\t\t\t\tadvisersUnvested\n\t\t\t);\n\t\t\tspentTokens = sub(advisersTotal, balanceOf(advisersAllocation));\n\t\t} else {\n\t\t\treturn allowed[_owner][_spender];\n\t\t}\n\n\t\treturn sub(unlockedTokens, spentTokens);\n\t}\n\n\t/// @dev Overrides Owned.sol function\n\tfunction confirmOwnership()\n\t\tpublic\n\t\tonlyPotentialOwner\n\t{   \n\t\t// Forbid the old owner to distribute investors' tokens\n\t\tallowed[investorsAllocation][owner] = 0;\n\n\t\t// Allow the new owner to distribute investors' tokens\n\t\tallowed[investorsAllocation][msg.sender] = balanceOf(investorsAllocation);\n\n\t\t// Forbid the old owner to withdraw any tokens from the reserves\n\t\tallowed[overdraftAllocation][owner] = 0;\n\t\tallowed[teamAllocation][owner] = 0;\n\t\tallowed[communityAllocation][owner] = 0;\n\t\tallowed[advisersAllocation][owner] = 0;\n\n\t\tsuper.confirmOwnership();\n\t}\n\n\tfunction _calculateUnlockedTokens(\n\t\tuint256 _cliff,\n\t\tuint256 _periodLength,\n\t\tuint256 _periodAmount,\n\t\tuint8 _periodsNumber,\n\t\tuint256 _unvestedAmount\n\t)\n\t\tprivate\n\t\tview\n\t\treturns (uint256) \n\t{\n\t\t/* solium-disable-next-line security/no-block-members */\n\t\tif (now < add(creationTime, _cliff)) {\n\t\t\treturn _unvestedAmount;\n\t\t}\n\t\t/* solium-disable-next-line security/no-block-members */\n\t\tuint256 periods = div(sub(now, add(creationTime, _cliff)), _periodLength);\n\t\tperiods = periods > _periodsNumber ? _periodsNumber : periods;\n\t\treturn add(_unvestedAmount, mul(periods, _periodAmount));\n\t}\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506116f86006557355f6074046b1fa3210e350cf520033f629f686d1600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550661550f7dca700006008557393f233fdf9d0ea73c87aa0edb3e4fb417fb50145600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066071afd498d0000600a55660ecd8faa972a00600b556317d78400600c5562c5c100600d5563042bdf00600e556006600f60006101000a81548160ff021916908360ff160217905550731258c8c124dcadf8122117ebf1968ffc54bfbfa6600f60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506605543df729c00060105566027f7d0bdb920060115560006012556000601355630c839d006014556010601560006101000a81548160ff021916908360ff16021790555073a4d82eb18d2bca1a3a2443324f0beea0a0dc23c8601560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066016bcc41e900006016556602f5e98753750060175566038d7eb0b242006018556000601955630c839d00601a556006601b60006101000a81548160ff021916908360ff16021790555073a020d6ca8738b18727defbe49fc22e3ef7110163601b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550655af3107a4000601c5565d06d01c99200601d556608e1bccb9f4800601e556000601f5562015180602055600c602160006101000a81548160ff021916908360ff16021790555034801561032857600080fd5b5042600581905550662386f26fc1000060048190555060085460026000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a5460026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060105460026000600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060165460026000601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601c5460026000601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060085460036000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c5460036000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060185460036000601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601e5460036000601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061335d806107e96000396000f30060806040526004361061027d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304b92b7d1461028257806306fdde03146102d9578063075bf77214610369578063095ea7b31461039457806313af4035146103f957806317031f9c1461043c57806318160ddd146104675780631cb252fe14610492578063205e0e26146104bd57806323b872dd146104e8578063313ce5671461056d5780633879c9f31461059e5780633ba0b9a9146105c95780633e4b2570146105f4578063417d5fb41461064b5780634a09d3cf1461067c5780634ad1cbad146106c95780634ce02a33146107165780634d16dd411461074157806351eb5e931461076c5780635ad1854b146107975780635b53d291146107c25780635e8f6597146107ed5780636078b87e1461083a57806362b96a1814610865578063660ef82d1461089057806366188463146108e75780636816521a1461094c57806370a08231146109a357806375766294146109fa5780637762df2514610a2557806377e5d8f814610a7c5780638c3c00aa14610aa75780638da5cb5b14610ad257806392940bf914610b295780639333cf5e14610bae57806395d89b4114610bd95780639649725814610c69578063a01729a414610cb6578063a84f3e5a14610ce1578063a9059cbb14610d0c578063abadeb0614610d71578063af44e48714610da2578063c14e61ba14610dd3578063c31051fe14610dfe578063d53b4ab414610e29578063d5d1e77014610e80578063d73dd62314610e97578063d8270dce14610efc578063d98b094c14610f27578063dd62ed3e14610f58578063f05ad9f314610fcf578063f854d74c14610ffa575b600080fd5b34801561028e57600080fd5b50610297611047565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e557600080fd5b506102ee61106d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032e578082015181840152602081019050610313565b50505050905090810190601f16801561035b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037557600080fd5b5061037e6110a6565b6040518082815260200191505060405180910390f35b3480156103a057600080fd5b506103df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110ac565b604051808215151515815260200191505060405180910390f35b34801561040557600080fd5b5061043a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061119e565b005b34801561044857600080fd5b506104516112f5565b6040518082815260200191505060405180910390f35b34801561047357600080fd5b5061047c6112fb565b6040518082815260200191505060405180910390f35b34801561049e57600080fd5b506104a7611301565b6040518082815260200191505060405180910390f35b3480156104c957600080fd5b506104d2611307565b6040518082815260200191505060405180910390f35b3480156104f457600080fd5b50610553600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061130d565b604051808215151515815260200191505060405180910390f35b34801561057957600080fd5b50610582611438565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105aa57600080fd5b506105b361143d565b6040518082815260200191505060405180910390f35b3480156105d557600080fd5b506105de611443565b6040518082815260200191505060405180910390f35b34801561060057600080fd5b50610609611449565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065757600080fd5b5061066061146f565b604051808260ff1660ff16815260200191505060405180910390f35b34801561068857600080fd5b506106c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611482565b005b3480156106d557600080fd5b50610714600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115e7565b005b34801561072257600080fd5b5061072b61174c565b6040518082815260200191505060405180910390f35b34801561074d57600080fd5b50610756611752565b6040518082815260200191505060405180910390f35b34801561077857600080fd5b50610781611758565b6040518082815260200191505060405180910390f35b3480156107a357600080fd5b506107ac61175e565b6040518082815260200191505060405180910390f35b3480156107ce57600080fd5b506107d7611764565b6040518082815260200191505060405180910390f35b3480156107f957600080fd5b50610838600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061176a565b005b34801561084657600080fd5b5061084f611801565b6040518082815260200191505060405180910390f35b34801561087157600080fd5b5061087a611807565b6040518082815260200191505060405180910390f35b34801561089c57600080fd5b506108a561180d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108f357600080fd5b50610932600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611833565b604051808215151515815260200191505060405180910390f35b34801561095857600080fd5b50610961611abb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109af57600080fd5b506109e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ae1565b6040518082815260200191505060405180910390f35b348015610a0657600080fd5b50610a0f611b2a565b6040518082815260200191505060405180910390f35b348015610a3157600080fd5b50610a3a611b30565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a8857600080fd5b50610a91611b56565b6040518082815260200191505060405180910390f35b348015610ab357600080fd5b50610abc611b5c565b6040518082815260200191505060405180910390f35b348015610ade57600080fd5b50610ae7611b62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b3557600080fd5b50610b94600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b87565b604051808215151515815260200191505060405180910390f35b348015610bba57600080fd5b50610bc3611f85565b6040518082815260200191505060405180910390f35b348015610be557600080fd5b50610bee611f8b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c2e578082015181840152602081019050610c13565b50505050905090810190601f168015610c5b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c7557600080fd5b50610cb4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fc4565b005b348015610cc257600080fd5b50610ccb612129565b6040518082815260200191505060405180910390f35b348015610ced57600080fd5b50610cf661212f565b6040518082815260200191505060405180910390f35b348015610d1857600080fd5b50610d57600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612135565b604051808215151515815260200191505060405180910390f35b348015610d7d57600080fd5b50610d8661214a565b604051808260ff1660ff16815260200191505060405180910390f35b348015610dae57600080fd5b50610db761215d565b604051808260ff1660ff16815260200191505060405180910390f35b348015610ddf57600080fd5b50610de8612170565b6040518082815260200191505060405180910390f35b348015610e0a57600080fd5b50610e13612176565b6040518082815260200191505060405180910390f35b348015610e3557600080fd5b50610e3e61217c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e8c57600080fd5b50610e956121a2565b005b348015610ea357600080fd5b50610ee2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506126ae565b604051808215151515815260200191505060405180910390f35b348015610f0857600080fd5b50610f116128a1565b6040518082815260200191505060405180910390f35b348015610f3357600080fd5b50610f3c6128a7565b604051808260ff1660ff16815260200191505060405180910390f35b348015610f6457600080fd5b50610fb9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128ba565b6040518082815260200191505060405180910390f35b348015610fdb57600080fd5b50610fe4612d19565b6040518082815260200191505060405180910390f35b34801561100657600080fd5b50611045600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612d1f565b005b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280601781526020017f47656e6573697343727970746f546563686e6f6c6f677900000000000000000081525081565b60105481565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111f957600080fd5b7f8a95addc59dddee94a894365b5c66c6c2473b7084d3fd1df9f503db4a2cd6dcc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60205481565b60045481565b60085481565b601f5481565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561139a57600080fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061142f848484612e84565b90509392505050565b600881565b60135481565b60065481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602160009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114dd57600080fd5b611509601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336128ba565b60036000601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d8601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838361130d565b15156115e357600080fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164257600080fd5b61166e600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336128ba565b60036000600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061173d600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838361130d565b151561174857600080fd5b5050565b600d5481565b60185481565b600e5481565b601d5481565b601c5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117c557600080fd5b6117f2600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838361130d565b15156117fd57600080fd5b5050565b601a5481565b60125481565b601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611944576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119cf565b61194e8184613058565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60115481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601e5481565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611be757600080fd5b838673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611c8357600080fd5b505af1158015611c97573d6000803e3d6000fd5b505050506040513d6020811015611cad57600080fd5b810190808051906020019092919050505010151515611ccb57600080fd5b8573ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d6657600080fd5b505af1158015611d7a573d6000803e3d6000fd5b505050506040513d6020811015611d9057600080fd5b810190808051906020019092919050505091508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e4657600080fd5b505af1158015611e5a573d6000803e3d6000fd5b505050506040513d6020811015611e7057600080fd5b81019080805190602001909291905050501515611e8c57600080fd5b8573ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611f2757600080fd5b505af1158015611f3b573d6000803e3d6000fd5b505050506040513d6020811015611f5157600080fd5b81019080805190602001909291905050509050611f6e8285613071565b81141515611f7857fe5b6001925050509392505050565b60175481565b6040805190810160405280600381526020017f474354000000000000000000000000000000000000000000000000000000000081525081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561201f57600080fd5b61204b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336128ba565b60036000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061211a600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838361130d565b151561212557600080fd5b5050565b60195481565b600c5481565b6000612142338484612e84565b905092915050565b601560009054906101000a900460ff1681565b600f60009054906101000a900460ff1681565b600a5481565b60145481565b601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121fe57600080fd5b600060036000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122ee600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ae1565b60036000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060036000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060036000600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060036000601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060036000601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126ac61308f565b565b6000612736600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483613071565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60055481565b601b60009054906101000a900460ff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151561299957600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250612d11565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612a5257612a13600d54600e54600b54600f60009054906101000a900460ff16600c5461326b565b9150612a4b600a54612a46600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ae1565b613058565b9050612d04565b600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612b0b57612acc601354601454601154601560009054906101000a900460ff1660125461326b565b9150612b04601054612aff600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ae1565b613058565b9050612d03565b601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612bc457612b85601954601a54601754601b60009054906101000a900460ff1660185461326b565b9150612bbd601654612bb8601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ae1565b613058565b9050612d02565b601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612c7d57612c3e601f54602054601d54602160009054906101000a900460ff16601e5461326b565b9150612c76601c54612c71601b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ae1565b613058565b9050612d01565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250612d11565b5b5b5b612d0e8282613058565b92505b505092915050565b60165481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d7a57600080fd5b612da6601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336128ba565b60036000601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e75601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838361130d565b1515612e8057600080fd5b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612ec157600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612f0f57600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550612fa5600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483613071565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600082821115151561306657fe5b818303905092915050565b600080828401905083811015151561308557fe5b8091505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156130eb57600080fd5b7f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b23646000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008061327a60055488613071565b421015613289578291506132d6565b6132a76132a14261329c6005548b613071565b613058565b876132e0565b90508360ff1681116132b957806132be565b8360ff165b90506132d3836132ce83886132f6565b613071565b91505b5095945050505050565b600081838115156132ed57fe5b04905092915050565b600080600084141561330b576000915061332a565b828402905082848281151561331c57fe5b0414151561332657fe5b8091505b50929150505600a165627a7a7230582050d717bc6a6c93663c650b60f2563e7053ae1d3a70d8076af72a9a55e1e76d070029"
}