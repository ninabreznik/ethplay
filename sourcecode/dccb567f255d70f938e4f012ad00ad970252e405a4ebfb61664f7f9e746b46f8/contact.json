{
  "address": "0x6ee10c4c566166135c8de574ce63f583afc6d2b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ortp",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Detailed.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts\\lib\\lifecycle\\Pausable.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Paused(address account);\n    event Unpaused(address account);\n    event PausableRenounced(address account);\n\n    bool private _paused;\n    bool private _pausable;\n\n    constructor () internal {\n        _paused = false;\n        _pausable = true;\n    }\n\n    /**\n     * @return True if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @return True if the contract is pausable, false otherwise.\n     */\n    function pausable() public view returns (bool) {\n        return _pausable;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not pausable.\n     */\n    modifier whenNotPausable() {\n        require(!_pausable);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is pausable.\n     */\n    modifier whenPausable() {\n        require(_pausable);\n        _;\n    }\n\n    /**\n     * @dev Called by the owner to pause.\n     */\n    function pause() public onlyOwner whenPausable whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Called by the owner to unpause.\n     */\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    /**\n     * @dev Called by the owner to unpause.\n     */\n    function renouncePausable() public onlyOwner whenPausable {\n        _pausable = false;\n        emit PausableRenounced(msg.sender);\n    }\n}\n\n// File: contracts\\lib\\token\\ERC20Pausable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }     \n}\n\n// File: contracts\\lib\\lifecycle\\WalletPausable.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title WalletPausable\n * @dev Base contract which allows children to implement an emergency stop mechanism for wallets.\n */\ncontract WalletPausable is Ownable {\n    event WalletPaused(address account, address wallet);\n    event WalletUnpaused(address account, address wallet);\n    event WalletPausableRenounced(address account);\n\n    mapping (address => bool) private _walletPaused;\n    bool private _walletPausable;\n\n    constructor () internal {\n        _walletPausable = true;\n    }     \n \n    /**\n     * @return True if the wallet is paused, false otherwise.\n     */\n    function walletPaused(address _wallet) public view returns (bool) {\n        return _walletPaused[_wallet];\n    }\n\n    /**\n     * @return True if the wallets are pausable, false otherwise.\n     */\n    function walletPausable() public view returns (bool) {\n        return _walletPausable;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the wallet is not paused.\n     */\n    modifier whenWalletNotPaused(address _wallet) {\n        require(!_walletPaused[_wallet]);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the wallet is paused.\n     */\n    modifier whenWalletPaused(address _wallet) {\n        require(_walletPaused[_wallet]);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the wallets are not pausable.\n     */\n    modifier whenWalletNotPausable() {\n        require(!_walletPausable);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the wallets are pausable.\n     */\n    modifier whenWalletPausable() {\n        require(_walletPausable);\n        _;\n    }\n\n    /**\n     * @dev Called by owner to pause wallet.\n     */\n    function pauseWallet(address _wallet) public onlyOwner whenWalletPausable whenWalletNotPaused(_wallet) {\n        _pauseWallet(_wallet);\n    }\n\n    /**\n     * @dev Pauses the wallet.\n     */\n    function _pauseWallet(address _wallet) internal {\n        _walletPaused[_wallet] = true;\n        emit WalletPaused(msg.sender, _wallet);\n    }\n\n    /**\n     * @dev Called by owner to unpause wallet.\n     */\n    function unpauseWallet(address _wallet) public onlyOwner whenWalletPaused(_wallet) {\n        _unpauseWallet(_wallet);\n    }\n\n    /**\n     * @dev Unpauses the wallet.\n     */\n    function _unpauseWallet(address _wallet) internal {\n        _walletPaused[_wallet] = false;\n        emit WalletUnpaused(msg.sender, _wallet);\n    }\n\n    /**\n     * @dev Called by owner to renounce the pausability of wallets.\n     */\n    function renounceWalletPausable() public onlyOwner whenWalletPausable {\n        _walletPausable = false;\n        emit WalletPausableRenounced(msg.sender);\n    }\n}\n\n// File: contracts\\lib\\token\\ERC20WalletPausable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Token with pausable wallets\n * @dev ERC20 modified with wallet pausable transfers.\n */\ncontract ERC20WalletPausable is ERC20, WalletPausable {\n    function transfer(address to, uint256 value) public whenWalletNotPaused(msg.sender) returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenWalletNotPaused(from) returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenWalletNotPaused(msg.sender) returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenWalletNotPaused(msg.sender) returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenWalletNotPaused(msg.sender) returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }     \n}\n\n// File: contracts\\lib\\lifecycle\\TransferAndPause.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title TransferAndPause\n * @dev Base contract which allows children to implement transfer and pause.\n */\ncontract TransferAndPause is Ownable {\n    event TransferAndPauseRenounced(address account);\n\n    bool private _transferAndPauseEnabled;\n\n    constructor () internal {\n        _transferAndPauseEnabled = true;\n    }     \n \n    /**\n     * @return True if the transfer and pause mechanism is enabled, false otherwise.\n     */\n    function transferAndPauseEnabled() public view returns (bool) {\n        return _transferAndPauseEnabled;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the transfer and pause mechanism is not enabled.\n     */\n    modifier whenTransferAndPauseNotEnabled() {\n        require(!_transferAndPauseEnabled);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the transfer and pause mechanism is enabled.\n     */\n    modifier whenTransferAndPauseEnabled() {\n        require(_transferAndPauseEnabled);\n        _;\n    }\n\n    /**\n     * @dev Called by owner to renounce the pausability of transfers.\n     */\n    function renounceTransferAndPause() public onlyOwner whenTransferAndPauseEnabled {\n        _transferAndPauseEnabled = false;\n        emit TransferAndPauseRenounced(msg.sender);\n    }\n}\n\n// File: contracts\\Ortp.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n\n\n\ncontract Ortp is ERC20, ERC20Detailed, Ownable, ERC20Pausable, ERC20WalletPausable, TransferAndPause {\n    uint8 public constant DECIMALS = 18;\n    uint256 public constant INITIAL_SUPPLY = 40000000000 * (10 ** uint256(DECIMALS));\n\n    constructor () public ERC20Detailed(\"Orientum Plus\", \"ORTP\", DECIMALS) {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function renounceOwnership() public onlyOwner {\n        revert();\n    } \n\n    function transferAndPause(address to, uint256 value) public whenNotPaused whenWalletNotPaused(msg.sender) whenTransferAndPauseEnabled returns (bool) {\n        require(value > 0);\n        require(transfer(to, value));\n        _pauseWallet(to);\n        return true;\n    }\n\n    function transferFromAndPause(address from, address to, uint256 value) public whenNotPaused whenWalletNotPaused(from) whenTransferAndPauseEnabled returns (bool) {\n        require(value > 0);\n        require(transferFrom(from, to, value));\n        _pauseWallet(to);\n        return true;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604080518082018252600d81527f4f7269656e74756d20506c75730000000000000000000000000000000000000060208083019182528351808501909452600484527f4f525450000000000000000000000000000000000000000000000000000000009084015281519192916012916200009091600391906200024f565b508151620000a69060049060208501906200024f565b506005805460ff191660ff929092169190911761010060a860020a0319166101003381029190911791829055604051600160a060020a0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36005805460a860020a61ffff0219167601000000000000000000000000000000000000000000001790556007805461ff001960ff199091166001171661010017905562000170336b813f3978f89409844000000064010000000062000176810204565b620002f4565b600160a060020a03821615156200018c57600080fd5b600254620001a99082640100000000620011436200023582021704565b600255600160a060020a038216600090815260208190526040902054620001df9082640100000000620011436200023582021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156200024857600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029257805160ff1916838001178555620002c2565b82800160010185558215620002c2579182015b82811115620002c2578251825591602001919060010190620002a5565b50620002d0929150620002d4565b5090565b620002f191905b80821115620002d05760008155600101620002db565b90565b61118180620003046000396000f3fe608060405234801561001057600080fd5b5060043610610202576000357c0100000000000000000000000000000000000000000000000000000000900480635c975abb1161012c578063a457c2d7116100bf578063dd62ed3e1161008e578063dd62ed3e14610536578063e11d6bea14610564578063f2fde38b1461056c578063fdbffc811461059257610202565b8063a457c2d7146104b0578063a9059cbb146104dc578063ad6a6ba314610508578063bb835bc01461052e57610202565b80638c49292d116100fb5780638c49292d146104465780638da5cb5b1461047c5780638f32d59b146104a057806395d89b41146104a857610202565b80635c975abb1461040857806370a0823114610410578063715018a6146104365780638456cb591461043e57610202565b80632e0f2625116101a4578063395093511161017357806339509351146103825780633bd00650146103ae5780633f4ba83a146103d45780635b271caa146103dc57610202565b80632e0f26251461034c5780632ff2e9dc1461036a578063313ce56714610372578063367758471461037a57610202565b806315ad8722116101e057806315ad8722146102ea57806318160ddd146102f45780631879ec5f1461030e57806323b872dd1461031657610202565b806306fdde0314610207578063095ea7b31461028457806315686293146102c4575b600080fd5b61020f61059a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610249578181015183820152602001610231565b50505050905090810190601f1680156102765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102b06004803603604081101561029a57600080fd5b50600160a060020a038135169060200135610630565b604080519115158252519081900360200190f35b6102b0600480360360208110156102da57600080fd5b5035600160a060020a0316610662565b6102f2610680565b005b6102fc610713565b60408051918252519081900360200190f35b6102f2610719565b6102b06004803603606081101561032c57600080fd5b50600160a060020a03813581169160208101359091169060400135610782565b6103546107be565b6040805160ff9092168252519081900360200190f35b6102fc6107c3565b6103546107d3565b6102b06107dc565b6102b06004803603604081101561039857600080fd5b50600160a060020a0381351690602001356107ff565b6102f2600480360360208110156103c457600080fd5b5035600160a060020a0316610829565b6102f2610872565b6102b0600480360360408110156103f257600080fd5b50600160a060020a0381351690602001356108f1565b6102b0610973565b6102fc6004803603602081101561042657600080fd5b5035600160a060020a0316610983565b6102f261099e565b6102f26109b1565b6102b06004803603606081101561045c57600080fd5b50600160a060020a03813581169160208101359091169060400135610a60565b610484610aef565b60408051600160a060020a039092168252519081900360200190f35b6102b0610b03565b61020f610b19565b6102b0600480360360408110156104c657600080fd5b50600160a060020a038135169060200135610b7a565b6102b0600480360360408110156104f257600080fd5b50600160a060020a038135169060200135610ba4565b6102f26004803603602081101561051e57600080fd5b5035600160a060020a0316610bce565b6102b0610c23565b6102fc6004803603604081101561054c57600080fd5b50600160a060020a0381358116916020013516610c31565b6102f2610c5c565b6102f26004803603602081101561058257600080fd5b5035600160a060020a0316610cbf565b6102b0610cde565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106265780601f106105fb57610100808354040283529160200191610626565b820191906000526020600020905b81548152906001019060200180831161060957829003601f168201915b5050505050905090565b3360008181526006602052604081205490919060ff161561065057600080fd5b61065a8484610ce7565b949350505050565b600160a060020a031660009081526006602052604090205460ff1690565b610688610b03565b151561069357600080fd5b600554760100000000000000000000000000000000000000000000900460ff1615156106be57600080fd5b6005805476ff00000000000000000000000000000000000000000000191690556040805133815290517f6411781bdd3e552259accf9cf4197fcb37e8dfc0ffd256e79d6fd4bf3ff5f8c39181900360200190a1565b60025490565b610721610b03565b151561072c57600080fd5b600754610100900460ff16151561074257600080fd5b6007805461ff00191690556040805133815290517f15f60cbf700f569cb7982ff70d37c6d716bec07744ee20eb443e40c5a21f09f69181900360200190a1565b600160a060020a038316600090815260066020526040812054849060ff16156107aa57600080fd5b6107b5858585610d12565b95945050505050565b601281565b6b813f3978f89409844000000081565b60055460ff1690565b600554760100000000000000000000000000000000000000000000900460ff1690565b3360008181526006602052604081205490919060ff161561081f57600080fd5b61065a8484610d37565b610831610b03565b151561083c57600080fd5b600160a060020a038116600090815260066020526040902054819060ff16151561086557600080fd5b61086e82610d5b565b5050565b61087a610b03565b151561088557600080fd5b60055460a860020a900460ff16151561089d57600080fd5b6005805475ff000000000000000000000000000000000000000000191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60055460009060a860020a900460ff161561090b57600080fd5b3360008181526006602052604090205460ff161561092857600080fd5b600754610100900460ff16151561093e57600080fd5b6000831161094b57600080fd5b6109558484610ba4565b151561096057600080fd5b61096984610dba565b5060019392505050565b60055460a860020a900460ff1690565b600160a060020a031660009081526020819052604090205490565b6109a6610b03565b151561020257600080fd5b6109b9610b03565b15156109c457600080fd5b600554760100000000000000000000000000000000000000000000900460ff1615156109ef57600080fd5b60055460a860020a900460ff1615610a0657600080fd5b6005805475ff000000000000000000000000000000000000000000191660a860020a1790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60055460009060a860020a900460ff1615610a7a57600080fd5b600160a060020a038416600090815260066020526040902054849060ff1615610aa257600080fd5b600754610100900460ff161515610ab857600080fd5b60008311610ac557600080fd5b610ad0858585610782565b1515610adb57600080fd5b610ae484610dba565b506001949350505050565b6005546101009004600160a060020a031690565b6005546101009004600160a060020a0316331490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106265780601f106105fb57610100808354040283529160200191610626565b3360008181526006602052604081205490919060ff1615610b9a57600080fd5b61065a8484610e1c565b3360008181526006602052604081205490919060ff1615610bc457600080fd5b61065a8484610e40565b610bd6610b03565b1515610be157600080fd5b60075460ff161515610bf257600080fd5b600160a060020a038116600090815260066020526040902054819060ff1615610c1a57600080fd5b61086e82610dba565b600754610100900460ff1690565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b610c64610b03565b1515610c6f57600080fd5b60075460ff161515610c8057600080fd5b6007805460ff191690556040805133815290517f84618193ddcc95d0f2b5cf967ae20680bedf37a249b93cd36787fe0656ba291d9181900360200190a1565b610cc7610b03565b1515610cd257600080fd5b610cdb81610e64565b50565b60075460ff1690565b60055460009060a860020a900460ff1615610d0157600080fd5b610d0b8383610eed565b9392505050565b60055460009060a860020a900460ff1615610d2c57600080fd5b61065a848484610f03565b60055460009060a860020a900460ff1615610d5157600080fd5b610d0b8383610f50565b600160a060020a038116600081815260066020908152604091829020805460ff1916905581513381529081019290925280517ff7abde712d1d6d8e5b6fedaef4b3c5589079052dacd8fadcb6f500cadc4a42fd9281900390910190a150565b600160a060020a038116600081815260066020908152604091829020805460ff1916600117905581513381529081019290925280517fbe2a12cdfac987ece3abea7e2d9a976110bbc577c8a41fcddac25a995f0898cc9281900390910190a150565b60055460009060a860020a900460ff1615610e3657600080fd5b610d0b8383610f8c565b60055460009060a860020a900460ff1615610e5a57600080fd5b610d0b8383610fc8565b600160a060020a0381161515610e7957600080fd5b600554604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360058054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000610efa338484610fd5565b50600192915050565b6000610f10848484611061565b600160a060020a038416600090815260016020908152604080832033808552925290912054610969918691610f4b908663ffffffff61112e16565b610fd5565b336000818152600160209081526040808320600160a060020a03871684529091528120549091610efa918590610f4b908663ffffffff61114316565b336000818152600160209081526040808320600160a060020a03871684529091528120549091610efa918590610f4b908663ffffffff61112e16565b6000610efa338484611061565b600160a060020a0382161515610fea57600080fd5b600160a060020a0383161515610fff57600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a038216151561107657600080fd5b600160a060020a03831660009081526020819052604090205461109f908263ffffffff61112e16565b600160a060020a0380851660009081526020819052604080822093909355908416815220546110d4908263ffffffff61114316565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561113d57600080fd5b50900390565b600082820183811015610d0b57600080fdfea165627a7a7230582075654fb3ff64d4e0f65c59a1e338f9ba7fbde41e80f3169faeee15ce311fd7a40029"
}