{
  "address": "0xb3698313be9db9b5b3d55f456e6c74610308aac4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Capsule",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-11\n*/\n\npragma solidity ^0.4.8;\n\n// an interface to ERC20 contracts\n// only adds the signatures for the methods we need for withdrawals\ncontract ERC20 {\n  function balanceOf(address _owner) public constant returns (uint balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n}\n\ncontract Capsule {\n    // store the eventual recipient of the capsule\n    // who will be allowed to withdraw when the time comes\n    address public recipient;\n    // the date of the eventual excavation store in seconds from epoch\n    uint public excavation;\n    // your friends at ETHCapsule, thanks for your support!\n    address public company = 0x46D99c89AE7529DDBAC80BEA2e8Ae017471Fc630;\n    // percentage of funds shared at withdrawal\n    uint public percent = 2;\n\n    // event for capsule creation with pertinent details\n    event CapsuleCreated(\n        uint _excavation,\n        address _recipient\n    );\n\n    // constructor for the capsule\n    // must put in an eventual excavation date and the recipient address\n    // also allows sending ETH as well as listing new tokens\n    function Capsule(uint _excavation, address _recipient) payable public {\n      require(_excavation < (block.timestamp + 100 years));\n      recipient = _recipient;\n      excavation = _excavation;\n      CapsuleCreated(_excavation, _recipient);\n    }\n\n    // event for a fallback payable deposit\n    event Deposit(\n        uint _amount,\n        address _sender\n    );\n\n    // this method accepts ether at any point as a way\n    // of facilitating groups pooling their resources\n    function () payable public {\n      Deposit(msg.value, msg.sender);\n    }\n\n    // The event any ether is withdrawn\n    event EtherWithdrawal(\n      uint _amount\n    );\n\n    // The event any time an ERC20 token is withdrawn\n    event TokenWithdrawal(\n      address _tokenAddress,\n      uint _amount\n    );\n\n    // allows for the withdrawal of ECR20 tokens and Ether!\n    // must be the intended recipient after the excavation date\n    function withdraw(address[] _tokens) public {\n      require(msg.sender == recipient);\n      require(block.timestamp > excavation);\n\n      // withdraw ether\n      if(this.balance > 0) {\n        uint ethShare = this.balance / (100 / percent);\n        company.transfer(ethShare);\n        uint ethWithdrawal = this.balance;\n        msg.sender.transfer(ethWithdrawal);\n        EtherWithdrawal(ethWithdrawal);\n      }\n\n      // withdraw listed ERC20 tokens\n      for(uint i = 0; i < _tokens.length; i++) {\n        ERC20 token = ERC20(_tokens[i]);\n        uint tokenBalance = token.balanceOf(this);\n        if(tokenBalance > 0) {\n          uint tokenShare = tokenBalance / (100 / percent);\n          token.transfer(company, tokenShare);\n          uint tokenWithdrawal = token.balanceOf(this);\n          token.transfer(recipient, tokenWithdrawal);\n          TokenWithdrawal(_tokens[i], tokenWithdrawal);\n        }\n      }\n    }\n}",
  "bytecode": "60606040527346d99c89ae7529ddbac80bea2e8ae017471fc630600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600355604051604080610a028339810160405280805190602001909190805190602001909190505063bbf81e0042018210151561009757600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816001819055507f7f2fc24f69fc16073db18320d8f3c4a27067588e906b12be0abb81a7a4953f678282604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150506108a88061015a6000396000f30060606040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634710c63c146100da57806366d003ac146101035780636904c94d1461015857806370ba1113146101ad578063bd5dec98146101d6575b7f4bcc17093cdf51079c755de089be5a85e70fa374ec656c194480fbdcda224a533433604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1005b34156100e557600080fd5b6100ed610230565b6040518082815260200191505060405180910390f35b341561010e57600080fd5b610116610236565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561016357600080fd5b61016b61025b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101b857600080fd5b6101c0610281565b6040518082815260200191505060405180910390f35b34156101e157600080fd5b61022e600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610287565b005b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60008060008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102ed57600080fd5b600154421115156102fd57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631111561044457600354606481151561032b57fe5b043073ffffffffffffffffffffffffffffffffffffffff163181151561034d57fe5b049650600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc889081150290604051600060405180830381858888f1935050505015156103b257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163195503373ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050151561040c57600080fd5b7f1c372e00c65a07879f6f0931cde0a016339ce6d111c23383caa9922c1c2aab7b866040518082815260200191505060405180910390a15b600094505b875185101561087257878581518110151561046057fe5b9060200190602002015193508373ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561050f57600080fd5b6102c65a03f1151561052057600080fd5b505050604051805190509250600083111561086557600354606481151561054357fe5b048381151561054e57fe5b0491508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561061e57600080fd5b6102c65a03f1151561062f57600080fd5b50505060405180519050508373ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156106dd57600080fd5b6102c65a03f115156106ee57600080fd5b5050506040518051905090508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156107c657600080fd5b6102c65a03f115156107d757600080fd5b50505060405180519050507feddb53e10e60b3a2396b4222b3db092137bdbf7a6fecceaf2b0b438ff0ddc66e888681518110151561081157fe5b9060200190602002015182604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b8480600101955050610449565b50505050505050505600a165627a7a72305820afb8873fd5d10457152c805391bf4da6e2205f7b75dc19f3872a7d4fd5f7565f0029000000000000000000000000000000000000000000000000000000005c68ea50000000000000000000000000735be26c540c9d5428ffdb274980c0f732979eac",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005c68ea50000000000000000000000000735be26c540c9d5428ffdb274980c0f732979eac"
}