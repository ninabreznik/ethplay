{
  "address": "0x2cc1060de78aa44e3e6a86102fac93f1de49adb2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UbexCrowdsale",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-21\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n    using SafeMath for uint256;\n\n    // The token being sold\n    ERC20 public token;\n\n    // Address where funds are collected\n    address public wallet;\n\n    // How many token units a buyer gets per wei\n    uint256 public rate;\n\n    // Amount of wei raised\n    uint256 public weiRaised;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    /**\n     * @param _rate Number of token units a buyer gets per wei\n     * @param _wallet Address where collected funds will be forwarded to\n     * @param _token Address of the token being sold\n     */\n    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n        require(_rate > 0);\n        require(_wallet != address(0));\n        require(_token != address(0));\n\n        rate = _rate;\n        wallet = _wallet;\n        token = _token;\n    }\n\n    // -----------------------------------------\n    // Crowdsale external interface\n    // -----------------------------------------\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * @param _beneficiary Address performing the token purchase\n     */\n    function buyTokens(address _beneficiary) public payable {\n\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(_beneficiary, weiAmount);\n\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n\n        _processPurchase(_beneficiary, tokens);\n        emit TokenPurchase(\n        msg.sender,\n        _beneficiary,\n        weiAmount,\n        tokens\n        );\n\n        _updatePurchasingState(_beneficiary, weiAmount);\n\n        _forwardFunds();\n        _postValidatePurchase(_beneficiary, weiAmount);\n    }\n\n    // -----------------------------------------\n    // Internal interface (extensible)\n    // -----------------------------------------\n\n    /**\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n     * @param _beneficiary Address performing the token purchase\n     * @param _weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n    }\n\n    /**\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n     * @param _beneficiary Address performing the token purchase\n     * @param _weiAmount Value in wei involved in the purchase\n     */\n    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n        // optional override\n    }\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n     * @param _beneficiary Address performing the token purchase\n     * @param _tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n        token.transfer(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n     * @param _beneficiary Address receiving the tokens\n     * @param _tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n     * @param _beneficiary Address receiving the tokens\n     * @param _weiAmount Value in wei involved in the purchase\n     */\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n        // optional override\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param _weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        return _weiAmount.mul(rate);\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n/**\n * @title UbexCrowdsale\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\n */\ncontract UbexCrowdsale is Crowdsale, Ownable {\n    using SafeMath for uint256;\n\n    // Map of all purchaiser's balances (doesn't include bounty amounts)\n    mapping(address => uint256) public balances;\n\n    // Amount of issued tokens\n    uint256 public tokensIssued;\n\n    // Bonus tokens rate multiplier x1000 (i.e. 1200 is 1.2 x 1000 = 120% x1000 = +20% bonus)\n    uint256 public bonusMultiplier;\n\n    // Is a crowdsale closed?\n    bool public closed;\n\n    /**\n     * Event for token withdrawal logging\n     * @param receiver who receive the tokens\n     * @param amount amount of tokens sent\n     */\n    event TokenDelivered(address indexed receiver, uint256 amount);\n\n    /**\n   * Event for token adding by referral program\n   * @param beneficiary who got the tokens\n   * @param amount amount of tokens added\n   */\n    event TokenAdded(address indexed beneficiary, uint256 amount);\n\n    /**\n    * Init crowdsale by setting its params\n    *\n    * @param _rate Number of token units a buyer gets per wei\n    * @param _wallet Address where collected funds will be forwarded to\n    * @param _token Address of the token being sold\n    * @param _bonusMultiplier bonus tokens rate multiplier x1000\n    */\n    function UbexCrowdsale(\n        uint256 _rate,\n        address _wallet,\n        ERC20 _token,\n        uint256 _bonusMultiplier\n    ) Crowdsale(\n        _rate,\n        _wallet,\n        _token\n    ) {\n        bonusMultiplier = _bonusMultiplier;\n    }\n\n    /**\n     * @dev Withdraw tokens only after crowdsale ends.\n     */\n    function withdrawTokens() public {\n        _withdrawTokensFor(msg.sender);\n    }\n\n    /**\n     * @dev Overrides parent by storing balances instead of issuing tokens right away.\n     * @param _beneficiary Token purchaser\n     * @param _tokenAmount Amount of tokens purchased\n     */\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        require(!hasClosed());\n        balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n        tokensIssued = tokensIssued.add(_tokenAmount);\n    }\n\n    /**\n   * @dev Overrides the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        return _weiAmount.mul(rate).mul(bonusMultiplier).div(1000);\n    }\n\n    /**\n     * @dev Deliver tokens to receiver_ after crowdsale ends.\n     */\n    function withdrawTokensFor(address receiver_) public onlyOwner {\n        _withdrawTokensFor(receiver_);\n    }\n\n    /**\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n     * @return Whether crowdsale period has elapsed\n     */\n    function hasClosed() public view returns (bool) {\n        return closed;\n    }\n\n    /**\n     * @dev Closes the period in which the crowdsale is open.\n     */\n    function closeCrowdsale(bool closed_) public onlyOwner {\n        closed = closed_;\n    }\n\n    /**\n     * @dev set the bonus multiplier.\n     */\n    function setBonusMultiplier(uint256 bonusMultiplier_) public onlyOwner {\n        bonusMultiplier = bonusMultiplier_;\n    }\n\n    /**\n     * @dev Withdraw tokens excess on the contract after crowdsale.\n     */\n    function postCrowdsaleWithdraw(uint256 _tokenAmount) public onlyOwner {\n        token.transfer(wallet, _tokenAmount);\n    }\n\n    /**\n     * @dev Add tokens for specified beneficiary (referral system tokens, for example).\n     * @param _beneficiary Token purchaser\n     * @param _tokenAmount Amount of tokens added\n     */\n    function addTokens(address _beneficiary, uint256 _tokenAmount) public onlyOwner {\n        balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n        tokensIssued = tokensIssued.add(_tokenAmount);\n        emit TokenAdded(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Withdraw tokens for receiver_ after crowdsale ends.\n     */\n    function _withdrawTokensFor(address receiver_) internal {\n        require(hasClosed());\n        uint256 amount = balances[receiver_];\n        require(amount > 0);\n        balances[receiver_] = 0;\n        emit TokenDelivered(receiver_, amount);\n        _deliverTokens(receiver_, amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"withdrawTokensFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"closed_\",\"type\":\"bool\"}],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"postCrowdsaleWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonusMultiplier_\",\"type\":\"uint256\"}],\"name\":\"setBonusMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_bonusMultiplier\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051608080610a2483398101604090815281516020830151918301516060909301519092908383836000831161004757600080fd5b600160a060020a038216151561005c57600080fd5b600160a060020a038116151561007157600080fd5b60029290925560018054600160a060020a03928316600160a060020a0319918216179091556000805493831693821693909317909255600480543390921691909216179055600755505050610959806100cb6000396000f3006080604052600436106100fb5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631515bc2b811461010657806327e235e31461012f5780632c4e722e146101625780634042b66f14610177578063521eb2731461018c578063597e1fb5146101bd5780636039fbdb146101d25780637c48bbda146101f65780638d8f2adb1461020b5780638da5cb5b1461022057806392df61e814610235578063a8b973a114610256578063ec8ac4d81461026b578063ecba18c01461027f578063f2fde38b14610299578063fc0c546a146102ba578063fc512b92146102cf578063fd58e63a146102e7575b610104336102ff565b005b34801561011257600080fd5b5061011b6103ac565b604080519115158252519081900360200190f35b34801561013b57600080fd5b50610150600160a060020a03600435166103b5565b60408051918252519081900360200190f35b34801561016e57600080fd5b506101506103c7565b34801561018357600080fd5b506101506103cd565b34801561019857600080fd5b506101a16103d3565b60408051600160a060020a039092168252519081900360200190f35b3480156101c957600080fd5b5061011b6103e2565b3480156101de57600080fd5b50610104600160a060020a03600435166024356103eb565b34801561020257600080fd5b506101506104a1565b34801561021757600080fd5b506101046104a7565b34801561022c57600080fd5b506101a16104b2565b34801561024157600080fd5b50610104600160a060020a03600435166104c1565b34801561026257600080fd5b506101506104e8565b610104600160a060020a03600435166102ff565b34801561028b57600080fd5b5061010460043515156104ee565b3480156102a557600080fd5b50610104600160a060020a036004351661051c565b3480156102c657600080fd5b506101a16105b5565b3480156102db57600080fd5b506101046004356105c4565b3480156102f357600080fd5b5061010460043561067e565b34600061030c838361069e565b610315826106c3565b60035490915061032b908363ffffffff61070416565b6003556103388382610711565b82600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a361039583836106bf565b61039d61077f565b6103a783836106bf565b505050565b60085460ff1690565b60056020526000908152604090205481565b60025481565b60035481565b600154600160a060020a031681565b60085460ff1681565b60045433600160a060020a0390811691161461040657600080fd5b600160a060020a03821660009081526005602052604090205461042f908263ffffffff61070416565b600160a060020a03831660009081526005602052604090205560065461045b908263ffffffff61070416565b600655604080518281529051600160a060020a038416917ff4c563a3ea86ff1f4275e8c207df0375a51963f2b831b7bf4da8be938d92876c919081900360200190a25050565b60065481565b6104b0336107b8565b565b600454600160a060020a031681565b60045433600160a060020a039081169116146104dc57600080fd5b6104e5816107b8565b50565b60075481565b60045433600160a060020a0390811691161461050957600080fd5b6008805460ff1916911515919091179055565b60045433600160a060020a0390811691161461053757600080fd5b600160a060020a038116151561054c57600080fd5b600454604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b60045433600160a060020a039081169116146105df57600080fd5b60008054600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018690529051919092169263a9059cbb92604480820193602093909283900390910190829087803b15801561065457600080fd5b505af1158015610668573d6000803e3d6000fd5b505050506040513d60208110156103a757600080fd5b60045433600160a060020a0390811691161461069957600080fd5b600755565b600160a060020a03821615156106b357600080fd5b8015156106bf57600080fd5b5050565b60006106fe6103e86106f26007546106e66002548761084d90919063ffffffff16565b9063ffffffff61084d16565b9063ffffffff61087616565b92915050565b818101828110156106fe57fe5b6107196103ac565b1561072357600080fd5b600160a060020a03821660009081526005602052604090205461074c908263ffffffff61070416565b600160a060020a038316600090815260056020526040902055600654610778908263ffffffff61070416565b6006555050565b600154604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156104e5573d6000803e3d6000fd5b60006107c26103ac565b15156107cd57600080fd5b50600160a060020a0381166000908152600560205260408120549081116107f357600080fd5b600160a060020a038216600081815260056020908152604080832092909255815184815291517f06fd92518610d6cbeff50af5cfc376de1de0809bc0d255140eb20715f25af9519281900390910190a26106bf828261088b565b600082151561085e575060006106fe565b5081810281838281151561086e57fe5b04146106fe57fe5b6000818381151561088357fe5b049392505050565b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169263a9059cbb92604480820193602093909283900390910190829087803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b505050506040513d602081101561092757600080fd5b505050505600a165627a7a72305820baa4a37d3da925cedb264518049ba932aa27e3e212c088d5d74050730d847f75002900000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000f8eed1ae306a07d8899de8dabc3783974a6808300000000000000000000000006704b673c70de9bf74c8fba4b4bd748f0e2190e100000000000000000000000000000000000000000000000000000000000004b0",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000f8eed1ae306a07d8899de8dabc3783974a6808300000000000000000000000006704b673c70de9bf74c8fba4b4bd748f0e2190e100000000000000000000000000000000000000000000000000000000000004b0"
}