{
  "address": "0x979e4a97d610b83348c5af04d836ce8b968bcc68",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherPrime",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-31\n*/\n\n// Written by Jesse Busman ([emailÂ protected]) in january 2018 and june 2018 and december 2018 and january 2019 and february 2019\n// This is the back end of https://etherprime.jesbus.com/\n\npragma solidity 0.5.4;\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ninterface ERC20\n{\n    function totalSupply() external view returns (uint);\n    function balanceOf(address tokenOwner) external view returns (uint balance);\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function approve(address spender, uint tokens) external returns (bool success);\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    \n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n}\n\n\ninterface ERC165\n{\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\n}\n\n\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd\ninterface ERC721 /*is ERC165*/\n{\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    \n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n    \n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    \n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n    \n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    \n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external returns (bool);\n    \n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\"\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external returns (bool);\n    \n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external returns (bool);\n    \n    /// @notice Set or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external returns (bool);\n    \n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets.\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///  multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external returns (bool);\n    \n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n    \n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\ninterface ERC721Enumerable\n{\n    function totalSupply() external view returns (uint256);\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _tokenId);\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ninterface ERC721Metadata\n{\n    function name() external pure returns (string memory _name);\n    function symbol() external pure returns (string memory _symbol);\n    function tokenURI(uint256 _tokenId) external view returns (string memory _uri);\n}\n\n\ninterface ERC721TokenReceiver\n{\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the\n    /// recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\n    /// of other than the magic value MUST result in the transaction being reverted.\n    /// @notice The contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    /// unless throwing\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\n}\n\n\n\n\ninterface ERC223\n{\n    function balanceOf(address who) external view returns (uint256);\n    \n    function name() external pure returns (string memory _name);\n    function symbol() external pure returns (string memory _symbol);\n    function decimals() external pure returns (uint8 _decimals);\n    function totalSupply() external view returns (uint256 _supply);\n    \n    function transfer(address to, uint value) external returns (bool ok);\n    function transfer(address to, uint value, bytes calldata data) external returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n\n\ninterface ERC223Receiver\n{\n    function tokenFallback(address _from, uint256 _value, bytes calldata _data) external;\n}\n\n\n\ninterface ERC777TokensRecipient\n{\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n\n\ninterface ERC777TokensSender\n{\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n\n\n\n\ncontract EtherPrime is ERC20, ERC721, ERC721Enumerable, ERC721Metadata, ERC165, ERC223\n{\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////          State variables           ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // Array of definite prime numbers\n    uint256[] public definitePrimes;\n    \n    // Array of probable primes\n    uint256[] public probablePrimes;\n    \n    // Allowances\n    mapping(uint256 => address) public primeToAllowedAddress;\n    \n    // Allowed operators\n    mapping(address => mapping(address => bool)) private ownerToOperators;\n    \n    // Ownership of primes\n    mapping(address => uint256[]) private ownerToPrimes;\n    \n    // Number data contains:\n    // - Index of prime in ownerToPrimes array\n    // - Index of prime in definitePrimes or probablePrimes array\n    // - NumberType\n    // - Owner of prime\n    mapping(uint256 => bytes32) private numberToNumberdata;\n    \n    // Store known non-2 divisors of non-primes\n    mapping(uint256 => uint256) private numberToNonTwoDivisor;\n    \n    // List of all participants\n    address[] public participants;\n    mapping(address => uint256) private addressToParticipantsArrayIndex;\n    \n    // Statistics\n    mapping(address => uint256) public addressToGasSpent;\n    mapping(address => uint256) public addressToEtherSpent;\n    mapping(address => uint256) public addressToProbablePrimesClaimed;\n    mapping(address => uint256) public addressToProbablePrimesDisprovenBy;\n    mapping(address => uint256) public addressToProbablePrimesDisprovenFrom;\n\n    // Prime calculator state\n    uint256 public numberBeingTested;\n    uint256 public divisorIndexBeingTested;\n    \n    // Prime trading\n    mapping(address => uint256) public addressToEtherBalance;\n    mapping(uint256 => uint256) public primeToSellOrderPrice;\n    mapping(uint256 => BuyOrder[]) private primeToBuyOrders;\n\n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////               Events               ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // Prime generation\n    event DefinitePrimeDiscovered(uint256 indexed prime, address indexed discoverer, uint256 indexed definitePrimesArrayIndex);\n    event ProbablePrimeDiscovered(uint256 indexed prime, address indexed discoverer, uint256 indexed probablePrimesArrayIndex);\n    event ProbablePrimeDisproven(uint256 indexed prime, uint256 divisor, address indexed owner, address indexed disprover, uint256 probablePrimesArrayIndex);\n    \n    // Token\n    event Transfer(address indexed from, address indexed to, uint256 prime);\n    event Approval(address indexed owner, address indexed spender, uint256 prime);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n    \n    // Trading\n    event BuyOrderCreated(address indexed buyer, uint256 indexed prime, uint256 indexed buyOrdersArrayIndex, uint256 bid);\n    event BuyOrderDestroyed(address indexed buyer, uint256 indexed prime, uint256 indexed buyOrdersArrayIndex);\n    event SellPriceSet(address indexed seller, uint256 indexed prime, uint256 price);\n    event PrimeTraded(address indexed seller, address indexed buyer, uint256 indexed prime, uint256 buyOrdersArrayIndex, uint256 price);\n    event EtherDeposited(address indexed depositer, uint256 amount);\n    event EtherWithdrawn(address indexed withdrawer, uint256 amount);\n    \n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////  Internal functions that write to  ////////////\n    ////////////          state variables           ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    function _addParticipant(address _newParticipant) private\n    {\n        // Add the participant to the list, but only if they are not 0x0 and they are not already in the list.\n        if (_newParticipant != address(0x0) && addressToParticipantsArrayIndex[_newParticipant] == 0)\n        {\n            addressToParticipantsArrayIndex[_newParticipant] = participants.length;\n            participants.push(_newParticipant);\n        }\n    }\n    \n    ////////////////////////////////////\n    //////// Internal functions to change ownership of a prime\n    \n    function _removePrimeFromOwnerPrimesArray(uint256 _prime) private\n    {\n        bytes32 numberdata = numberToNumberdata[_prime];\n        uint256[] storage ownerPrimes = ownerToPrimes[numberdataToOwner(numberdata)];\n        uint256 primeIndex = numberdataToOwnerPrimesIndex(numberdata);\n        \n        // Move the last one backwards into the freed slot\n        uint256 otherPrimeBeingMoved = ownerPrimes[ownerPrimes.length-1];\n        ownerPrimes[primeIndex] = otherPrimeBeingMoved;\n        _numberdataSetOwnerPrimesIndex(otherPrimeBeingMoved, uint40(primeIndex));\n        \n        // Refund gas by setting the now unused array slot to 0\n        // Advantage: Current transaction gets a gas refund of 15000\n        // Disadvantage: Next transaction that gives a prime to this owner will cost 15000 more gas\n        ownerPrimes[ownerPrimes.length-1] = 0; // Refund some gas\n        \n        // Decrease the length of the array\n        ownerPrimes.length--;\n    }\n    \n    function _setOwner(uint256 _prime, address _newOwner) private\n    {\n        _setOwner(_prime, _newOwner, \"\", address(0x0), \"\");\n    }\n    \n    function _setOwner(uint256 _prime, address _newOwner, bytes memory _data, address _operator, bytes memory _operatorData) private\n    {\n        // getOwner does not throw, so previousOwner can be 0x0\n        address previousOwner = getOwner(_prime);\n        \n        if (_operator == address(0x0))\n        {\n            _operator = previousOwner;\n        }\n        \n        // Shortcut in case we don't need to do anything\n        if (previousOwner == _newOwner)\n        {\n            return;\n        }\n        \n        // Delete _prime from ownerToPrimes[previousOwner]\n        if (previousOwner != address(0x0))\n        {\n            _removePrimeFromOwnerPrimesArray(_prime);\n        }\n        \n        // Store the new ownerPrimes array index and the new owner in the numberdata\n        _numberdataSetOwnerAndOwnerPrimesIndex(_prime, _newOwner, uint40(ownerToPrimes[_newOwner].length));\n        \n        // Add _prime to ownerToPrimes[_newOwner]\n        ownerToPrimes[_newOwner].push(_prime);\n        \n        // Delete any existing allowance\n        if (primeToAllowedAddress[_prime] != address(0x0))\n        {\n            primeToAllowedAddress[_prime] = address(0x0);\n        }\n        \n        // Delete any existing sell order\n        if (primeToSellOrderPrice[_prime] != 0)\n        {\n            primeToSellOrderPrice[_prime] = 0;\n            emit SellPriceSet(_newOwner, _prime, 0);\n        }\n        \n        // Add the new owner to the list of EtherPrime participants\n        _addParticipant(_newOwner);\n        \n        // If the new owner is a contract, try to notify them of the received token.\n        if (isContract(_newOwner))\n        {\n            bool success;\n            bytes32 returnValue;\n            \n            // Try to call onERC721Received (as per ERC721)\n            \n            (success, returnValue) = _tryCall(_newOwner, abi.encodeWithSelector(ERC721TokenReceiver(_newOwner).onERC721Received.selector, _operator, previousOwner, _prime, _data));\n            \n            if (!success || returnValue != bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")))\n            {\n                // If ERC721::onERC721Received failed, try to call tokenFallback (as per ERC223)\n                \n                (success, returnValue) = _tryCall(_newOwner, abi.encodeWithSelector(ERC223Receiver(_newOwner).tokenFallback.selector, previousOwner, _prime, 0x0));\n                \n                if (!success)\n                {\n                    // If ERC223::tokenFallback failed, try to call tokensReceived (as per ERC777)\n                    \n                    (success, returnValue) = _tryCall(_newOwner, abi.encodeWithSelector(ERC777TokensRecipient(_newOwner).tokensReceived.selector, _operator, previousOwner, _newOwner, _prime, _data, _operatorData));\n                    \n                    if (!success)\n                    {\n                        // If all token fallback calls failed, give up and just give them their token.\n                        return;\n                    }\n                }\n            }\n        }\n        \n        emit Transfer(previousOwner, _newOwner, _prime);\n    }\n    \n    function _createPrime(uint256 _prime, address _owner, bool _isDefinitePrime) private\n    {\n        // Create the prime\n        _numberdataSetAllPrimesIndexAndNumberType(\n            _prime,\n            uint48(_isDefinitePrime ? definitePrimes.length : probablePrimes.length),\n            _isDefinitePrime ? NumberType.DEFINITE_PRIME : NumberType.PROBABLE_PRIME\n        );\n        if (_isDefinitePrime)\n        {\n            emit DefinitePrimeDiscovered(_prime, msg.sender, definitePrimes.length);\n            definitePrimes.push(_prime);\n        }\n        else\n        {\n            emit ProbablePrimeDiscovered(_prime, msg.sender, probablePrimes.length);\n            probablePrimes.push(_prime);\n        }\n        \n        // Give it to its new owner\n        _setOwner(_prime, _owner);\n    }\n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////    Bitwise stuff on numberdata     ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    enum NumberType\n    {\n        NOT_PRIME_IF_PASSED,\n        NOT_PRIME,\n        PROBABLE_PRIME,\n        DEFINITE_PRIME\n    }\n    \n    // Number data format:\n    \n    // MSB                                                                                                                                           LSB\n    // [  40 bits for owner primes array index  ] [  48 bits for all primes array index  ] [  8 bits for number type  ] [  160 bits for owner address  ]\n    //   ^                                            ^                                               ^                            ^\n    //   ^ the index in ownerToPrimes array           ^ index in definitePrimes or probablePrimes     ^ a NumberType value         ^ owner of the number\n    \n    uint256 private constant NUMBERDATA_OWNER_PRIME_INDEX_SIZE = 40;\n    uint256 private constant NUMBERDATA_OWNER_PRIME_INDEX_SHIFT = NUMBERDATA_ALL_PRIME_INDEX_SHIFT + NUMBERDATA_ALL_PRIME_INDEX_SIZE;\n    bytes32 private constant NUMBERDATA_OWNER_PRIME_INDEX_MASK = bytes32(uint256(~uint40(0)) << NUMBERDATA_OWNER_PRIME_INDEX_SHIFT);\n    \n    uint256 private constant NUMBERDATA_ALL_PRIME_INDEX_SIZE = 48;\n    uint256 private constant NUMBERDATA_ALL_PRIME_INDEX_SHIFT = NUMBERDATA_NUMBER_TYPE_SHIFT + NUMBERDATA_NUMBER_TYPE_SIZE;\n    bytes32 private constant NUMBERDATA_ALL_PRIME_INDEX_MASK = bytes32(uint256(~uint48(0)) << NUMBERDATA_ALL_PRIME_INDEX_SHIFT);\n    \n    uint256 private constant NUMBERDATA_NUMBER_TYPE_SIZE = 8;\n    uint256 private constant NUMBERDATA_NUMBER_TYPE_SHIFT = NUMBERDATA_OWNER_ADDRESS_SHIFT + NUMBERDATA_OWNER_ADDRESS_SIZE;\n    bytes32 private constant NUMBERDATA_NUMBER_TYPE_MASK = bytes32(uint256(~uint8(0)) << NUMBERDATA_NUMBER_TYPE_SHIFT);\n    \n    uint256 private constant NUMBERDATA_OWNER_ADDRESS_SIZE = 160;\n    uint256 private constant NUMBERDATA_OWNER_ADDRESS_SHIFT = 0;\n    bytes32 private constant NUMBERDATA_OWNER_ADDRESS_MASK = bytes32(uint256(~uint160(0)) << NUMBERDATA_OWNER_ADDRESS_SHIFT);\n    \n    function numberdataToOwnerPrimesIndex(bytes32 _numberdata) private pure returns (uint40)\n    {\n        return uint40(uint256(_numberdata & NUMBERDATA_OWNER_PRIME_INDEX_MASK) >> NUMBERDATA_OWNER_PRIME_INDEX_SHIFT);\n    }\n    \n    function numberdataToAllPrimesIndex(bytes32 _numberdata) private pure returns (uint48)\n    {\n        return uint48(uint256(_numberdata & NUMBERDATA_ALL_PRIME_INDEX_MASK) >> NUMBERDATA_ALL_PRIME_INDEX_SHIFT);\n    }\n    \n    function numberdataToNumberType(bytes32 _numberdata) private pure returns (NumberType)\n    {\n        return NumberType(uint256(_numberdata & NUMBERDATA_NUMBER_TYPE_MASK) >> NUMBERDATA_NUMBER_TYPE_SHIFT);\n    }\n    \n    function numberdataToOwner(bytes32 _numberdata) private pure returns (address)\n    {\n        return address(uint160(uint256(_numberdata & NUMBERDATA_OWNER_ADDRESS_MASK) >> NUMBERDATA_OWNER_ADDRESS_SHIFT));\n    }\n    \n    function ownerPrimesIndex_allPrimesIndex_numberType_owner__toNumberdata(uint40 _ownerPrimesIndex, uint48 _allPrimesIndex, NumberType _numberType, address _owner) private pure returns (bytes32)\n    {\n        return\n            bytes32(\n                (uint256(_ownerPrimesIndex) << NUMBERDATA_OWNER_PRIME_INDEX_SHIFT) |\n                (uint256(_allPrimesIndex) << NUMBERDATA_ALL_PRIME_INDEX_SHIFT) |\n                (uint256(uint8(_numberType)) << NUMBERDATA_NUMBER_TYPE_SHIFT) |\n                (uint256(uint160(_owner)) << NUMBERDATA_OWNER_ADDRESS_SHIFT)\n            );\n    }\n    \n    function _numberdataSetOwnerPrimesIndex(uint256 _number, uint40 _ownerPrimesIndex) private\n    {\n        bytes32 numberdata = numberToNumberdata[_number];\n        numberdata &= ~NUMBERDATA_OWNER_PRIME_INDEX_MASK;\n        numberdata |= bytes32(uint256(_ownerPrimesIndex)) << NUMBERDATA_OWNER_PRIME_INDEX_SHIFT;\n        numberToNumberdata[_number] = numberdata;\n    }\n    \n    function _numberdataSetAllPrimesIndex(uint256 _number, uint48 _allPrimesIndex) private\n    {\n        bytes32 numberdata = numberToNumberdata[_number];\n        numberdata &= ~NUMBERDATA_ALL_PRIME_INDEX_MASK;\n        numberdata |= bytes32(uint256(_allPrimesIndex)) << NUMBERDATA_ALL_PRIME_INDEX_SHIFT;\n        numberToNumberdata[_number] = numberdata;\n    }\n    \n    function _numberdataSetNumberType(uint256 _number, NumberType _numberType) private\n    {\n        bytes32 numberdata = numberToNumberdata[_number];\n        numberdata &= ~NUMBERDATA_NUMBER_TYPE_MASK;\n        numberdata |= bytes32(uint256(uint8(_numberType))) << NUMBERDATA_NUMBER_TYPE_SHIFT;\n        numberToNumberdata[_number] = numberdata;\n    }\n    \n    /*function _numberdataSetOwner(uint256 _number, address _owner) private\n    {\n        bytes32 numberdata = numberToNumberdata[_number];\n        numberdata &= ~NUMBERDATA_OWNER_ADDRESS_MASK;\n        numberdata |= bytes32(uint256(uint160(_owner))) << NUMBERDATA_OWNER_ADDRESS_SHIFT;\n        numberToNumberdata[_number] = numberdata;\n    }*/\n    \n    function _numberdataSetOwnerAndOwnerPrimesIndex(uint256 _number, address _owner, uint40 _ownerPrimesIndex) private\n    {\n        bytes32 numberdata = numberToNumberdata[_number];\n        \n        numberdata &= ~NUMBERDATA_OWNER_ADDRESS_MASK;\n        numberdata |= bytes32(uint256(uint160(_owner))) << NUMBERDATA_OWNER_ADDRESS_SHIFT;\n        \n        numberdata &= ~NUMBERDATA_OWNER_PRIME_INDEX_MASK;\n        numberdata |= bytes32(uint256(_ownerPrimesIndex)) << NUMBERDATA_OWNER_PRIME_INDEX_SHIFT;\n        \n        numberToNumberdata[_number] = bytes32(numberdata);\n    }\n\n    function _numberdataSetAllPrimesIndexAndNumberType(uint256 _number, uint48 _allPrimesIndex, NumberType _numberType) private\n    {\n        bytes32 numberdata = numberToNumberdata[_number];\n        \n        numberdata &= ~NUMBERDATA_ALL_PRIME_INDEX_MASK;\n        numberdata |= bytes32(uint256(_allPrimesIndex)) << NUMBERDATA_ALL_PRIME_INDEX_SHIFT;\n        \n        numberdata &= ~NUMBERDATA_NUMBER_TYPE_MASK;\n        numberdata |= bytes32(uint256(uint8(_numberType))) << NUMBERDATA_NUMBER_TYPE_SHIFT;\n        \n        numberToNumberdata[_number] = bytes32(numberdata);\n    }\n    \n\n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////       Utility functions for        ////////////\n    ////////////       ERC721 implementation        ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    function isValidNFT(uint256 _prime) private view returns (bool)\n    {\n        NumberType numberType = numberdataToNumberType(numberToNumberdata[_prime]);\n        return numberType == NumberType.PROBABLE_PRIME || numberType == NumberType.DEFINITE_PRIME;\n    }\n    \n    function isApprovedFor(address _operator, uint256 _prime) private view returns (bool)\n    {\n        address owner = getOwner(_prime);\n        \n        return\n            (owner == _operator) ||\n            (primeToAllowedAddress[_prime] == _operator) ||\n            (ownerToOperators[owner][_operator] == true);\n    }\n    \n    function isContract(address _addr) private view returns (bool)\n    {\n        uint256 addrCodesize;\n        assembly { addrCodesize := extcodesize(_addr) }\n        return addrCodesize != 0;\n    }\n    \n    function _tryCall(address _contract, bytes memory _selectorAndArguments) private returns (bool _success, bytes32 _returnData)\n    {\n        bytes32[1] memory returnDataArray;\n        uint256 dataLengthBytes = _selectorAndArguments.length;\n        \n        assembly\n        {\n            // call(gas, address, value, arg_ptr, arg_size, return_ptr, return_max_size)\n            _success := call(gas(), _contract, 0, _selectorAndArguments, dataLengthBytes, returnDataArray, 32)\n        }\n        \n        _returnData = returnDataArray[0];\n    }\n    \n    // Does not throw if prime does not exist or has no owner\n    function getOwner(uint256 _prime) public view returns (address)\n    {\n        return numberdataToOwner(numberToNumberdata[_prime]);\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////        Token implementation        ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    function name() external pure returns (string memory)\n    {\n        return \"Prime number\";\n    }\n    \n    function symbol() external pure returns (string memory)\n    {\n        return \"PRIME\";\n    }\n    \n    function decimals() external pure returns (uint8)\n    {\n        return 0;\n    }\n    \n    function tokenURI(uint256 _tokenId) external view returns (string memory _uri)\n    {\n        require(isValidNFT(_tokenId));\n        \n        _uri = \"https://etherprime.jesbus.com/#search:\";\n        \n        uint256 baseURIlen = bytes(_uri).length;\n\n        // Count the amount of digits required to represent the prime number\n        uint256 digits = 0;\n        uint256 _currentNum = _tokenId;\n        while (_currentNum != 0)\n        {\n            _currentNum /= 10;\n            digits++;\n        }\n        \n        uint256 divisor = 10 ** (digits-1);\n        _currentNum = _tokenId;\n        \n        for (uint256 i=0; i<digits; i++)\n        {\n            uint8 digit = 0x30 + uint8(_currentNum / divisor);\n            \n            assembly { mstore8(add(add(_uri, 0x20), add(baseURIlen, i)), digit) }\n            \n            _currentNum %= divisor;\n            divisor /= 10;\n        }\n        \n        assembly { mstore(_uri, add(baseURIlen, digits)) }\n    }\n    \n    function totalSupply() external view returns (uint256)\n    {\n        return definitePrimes.length + probablePrimes.length;\n    }\n    \n    function balanceOf(address _owner) external view returns (uint256)\n    {\n        // According to ERC721 we should throw on queries about the 0x0 address\n        require(_owner != address(0x0), \"balanceOf error: owner may not be 0x0\");\n        \n        return ownerToPrimes[_owner].length;\n    }\n    \n    function addressPrimeCount(address _owner) external view returns (uint256)\n    {\n        return ownerToPrimes[_owner].length;\n    }\n    \n    function allowance(address _owner, address _spender) external view returns (uint256)\n    {\n        uint256 total = 0;\n        uint256[] storage primes = ownerToPrimes[_owner];\n        uint256 primesLength = primes.length;\n        for (uint256 i=0; i<primesLength; i++)\n        {\n            uint256 prime = primes[i];\n            if (primeToAllowedAddress[prime] == _spender)\n            {\n                total += prime;\n            }\n        }\n        return total;\n    }\n    \n    // Throws if prime has no owner or does not exist\n    function ownerOf(uint256 _prime) external view returns (address)\n    {\n        address owner = getOwner(_prime);\n        require(owner != address(0x0), \"ownerOf error: owner is set to 0x0\");\n        return owner;\n    }\n    \n    function safeTransferFrom(address _from, address _to, uint256 _prime, bytes memory _data) public returns (bool)\n    {\n        require(getOwner(_prime) == _from, \"safeTransferFrom error: from address does not own that prime\");\n        require(isApprovedFor(msg.sender, _prime), \"safeTransferFrom error: you do not have approval from the owner of that prime\");\n        _setOwner(_prime, _to, _data, msg.sender, \"\");\n        return true;\n    }\n    \n    function safeTransferFrom(address _from, address _to, uint256 _prime) external returns (bool)\n    {\n        return safeTransferFrom(_from, _to, _prime, \"\");\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _prime) external returns (bool)\n    {\n        return safeTransferFrom(_from, _to, _prime, \"\");\n    }\n    \n    function approve(address _to, uint256 _prime) external returns (bool)\n    {\n        require(isApprovedFor(msg.sender, _prime), \"approve error: you do not have approval from the owner of that prime\");\n        primeToAllowedAddress[_prime] = _to;\n        emit Approval(msg.sender, _to, _prime);\n        return true;\n    }\n    \n    function setApprovalForAll(address _operator, bool _allowed) external returns (bool)\n    {\n        ownerToOperators[msg.sender][_operator] = _allowed;\n        emit ApprovalForAll(msg.sender, _operator, _allowed);\n        return true;\n    }\n    \n    function getApproved(uint256 _prime) external view returns (address)\n    {\n        require(isValidNFT(_prime), \"getApproved error: prime does not exist\");\n        return primeToAllowedAddress[_prime];\n    }\n    \n    function isApprovedForAll(address _owner, address _operator) external view returns (bool)\n    {\n        return ownerToOperators[_owner][_operator];\n    }\n    \n    function takeOwnership(uint256 _prime) external returns (bool)\n    {\n        require(isApprovedFor(msg.sender, _prime), \"takeOwnership error: you do not have approval from the owner of that prime\");\n        _setOwner(_prime, msg.sender);\n        return true;\n    }\n    \n    function transfer(address _to, uint256 _prime) external returns (bool)\n    {\n        require(isApprovedFor(msg.sender, _prime), \"transfer error: you do not have approval from the owner of that prime\");\n        _setOwner(_prime, _to);\n        return true;\n    }\n    \n    function transfer(address _to, uint _prime, bytes calldata _data) external returns (bool ok)\n    {\n        require(isApprovedFor(msg.sender, _prime), \"transfer error: you do not have approval from the owner of that prime\");\n        _setOwner(_prime, _to, _data, msg.sender, \"\");\n        return true;\n    }\n    \n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256)\n    {\n        uint256[] storage ownerPrimes = ownerToPrimes[_owner];\n        require(_index < ownerPrimes.length, \"tokenOfOwnerByIndex: index out of bounds\");\n        return ownerPrimes[_index];\n    }\n    \n    function tokenByIndex(uint256 _index) external view returns (uint256)\n    {\n        if (_index < definitePrimes.length) return definitePrimes[_index];\n        else if (_index < definitePrimes.length + probablePrimes.length) return probablePrimes[_index - definitePrimes.length];\n        else revert(\"tokenByIndex error: index out of bounds\");\n    }\n    \n    function tokensOf(address _owner) external view returns (uint256[] memory)\n    {\n        return ownerToPrimes[_owner];\n    }\n    \n    function implementsERC721() external pure returns (bool)\n    {\n        return true;\n    }\n    \n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool)\n    {\n        \n        if (_interfaceID == 0x01ffc9a7) return true; // ERC165\n        if (_interfaceID == 0x80ac58cd) return true; // ERC721\n        if (_interfaceID == 0x5b5e139f) return true; // ERC721Metadata\n        if (_interfaceID == 0x780e9d63) return true; // ERC721Enumerable\n        return false;\n    }\n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////           View functions           ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // numberToDivisor returns 0 if no divisor was found\n    function numberToDivisor(uint256 _number) public view returns (uint256)\n    {\n        if (_number == 0) return 0;\n        else if ((_number & 1) == 0) return 2;\n        else return numberToNonTwoDivisor[_number];\n    }\n    \n    function isPrime(uint256 _number) public view returns (Booly)\n    {\n        NumberType numberType = numberdataToNumberType(numberToNumberdata[_number]);\n        if (numberType == NumberType.DEFINITE_PRIME) return DEFINITELY;\n        else if (numberType == NumberType.PROBABLE_PRIME) return PROBABLY;\n        else if (numberType == NumberType.NOT_PRIME_IF_PASSED)\n        {\n            if (_number < numberBeingTested)\n            {\n                return DEFINITELY_NOT;\n            }\n            else\n            {\n                return UNKNOWN;\n            }\n        }\n        else if (numberType == NumberType.NOT_PRIME) return DEFINITELY_NOT;\n        else revert();\n    }\n    \n    function getPrimeFactors(uint256 _number) external view returns (bool _success, uint256[] memory _primeFactors)\n    {\n        _primeFactors = new uint256[](0);\n        if (_number == 0) { _success = false; return (_success, _primeFactors); }\n        \n        // Track length of primeFactors array\n        uint256 amount = 0;\n        \n        \n        uint256 currentNumber = _number;\n        \n        while (true)\n        {\n            // If we've divided to 1, we're done :)\n            if (currentNumber == 1) { _success = true; return (_success, _primeFactors); }\n            \n            uint256 divisor = numberToDivisor(currentNumber);\n            \n            if (divisor == 0)\n            {\n                if (isPrime(currentNumber) == DEFINITELY)\n                {\n                    // If we couldn't find a divisor and the current number is a definite prime,\n                    // then the current prime is itself the divisor.\n                    // It will be added to primeFactors, currentNumber will go to one,\n                    // and we will exit successfully on the next iteration.\n                    divisor = currentNumber;\n                }\n                else\n                {\n                    // If we don't know a divisor and we don't know for sure that the\n                    // current number is a definite prime, exit with failure.\n                    _success = false;\n                    return (_success, _primeFactors);\n                }\n            }\n            else\n            {\n                while (isPrime(divisor) != DEFINITELY)\n                {\n                    divisor = numberToDivisor(divisor);\n                    if (divisor == 0) { _success = false; return (_success, _primeFactors); }\n                }\n            }\n            \n            currentNumber /= divisor;\n            \n            // This in effect does: primeFactors.push(primeFactor)\n            {\n                amount++;\n                assembly\n                {\n                    mstore(0x40, add(mload(0x40), 0x20)) // dirty: extend usable memory\n                    mstore(_primeFactors, amount) // dirty: set memory array size\n                }\n                _primeFactors[amount-1] = divisor;\n            }\n        }\n    }\n    \n    /*function isKnownNotPrime(uint256 _number) external view returns (bool)\n    {\n        return numberdataToNumberType(numberToNumberdata[_number]) == NumberType.NOT_PRIME;\n    }\n    \n    function isKnownDefinitePrime(uint256 _number) public view returns (bool)\n    {\n        return numberdataToNumberType(numberToNumberdata[_number]) == NumberType.DEFINITE_PRIME;\n    }\n    \n    function isKnownProbablePrime(uint256 _number) public view returns (bool)\n    {\n        return numberdataToNumberType(numberToNumberdata[_number]) == NumberType.PROBABLE_PRIME;\n    }*/\n\n    function amountOfParticipants() external view returns (uint256)\n    {\n        return participants.length;\n    }\n    \n    function amountOfPrimesOwnedByOwner(address owner) external view returns (uint256)\n    {\n        return ownerToPrimes[owner].length;\n    }\n    \n    function amountOfPrimesFound() external view returns (uint256)\n    {\n        return definitePrimes.length + probablePrimes.length;\n    }\n    \n    function amountOfDefinitePrimesFound() external view returns (uint256)\n    {\n        return definitePrimes.length;\n    }\n    \n    function amountOfProbablePrimesFound() external view returns (uint256)\n    {\n        return probablePrimes.length;\n    }\n    \n    function largestDefinitePrimeFound() public view returns (uint256)\n    {\n        return definitePrimes[definitePrimes.length-1];\n    }\n    \n    function getInsecureRandomDefinitePrime() external view returns (uint256)\n    {\n        return definitePrimes[insecureRand()%definitePrimes.length];\n    }\n    \n    function getInsecureRandomProbablePrime() external view returns (uint256)\n    {\n        return probablePrimes[insecureRand()%probablePrimes.length];\n    }\n\n\n\n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////            Constructor             ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    constructor() public\n    {\n        participants.push(address(0x0));\n        \n        // Let's start with 2.\n        _createPrime(2, msg.sender, true);\n        \n        // The next one up for prime checking will be 3.\n        numberBeingTested = 3;\n        divisorIndexBeingTested = 0;\n        \n        new EtherPrimeChat(this);\n    }\n    \n    \n\n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////     Definite prime generation      ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // Call these function to help calculate prime numbers.\n    // The reward shall be your immortalized glory.\n    \n    uint256 private constant DEFAULT_PRIMES_TO_MEMORIZE = 0;\n    uint256 private constant DEFAULT_LOW_LEVEL_GAS = 200000;\n    \n    function () external\n    {\n        computeWithParams(definitePrimes.length/2, DEFAULT_LOW_LEVEL_GAS, msg.sender);\n    }\n    \n    function compute() external\n    {\n        computeWithParams(definitePrimes.length/2, DEFAULT_LOW_LEVEL_GAS, msg.sender);\n    }\n    \n    function computeAndGiveTo(address _recipient) external\n    {\n        computeWithParams(definitePrimes.length/2, DEFAULT_LOW_LEVEL_GAS, _recipient);\n    }\n    \n    function computeWithPrimesToMemorize(uint256 _primesToMemorize) external\n    {\n        computeWithParams(_primesToMemorize, DEFAULT_LOW_LEVEL_GAS, msg.sender);\n    }\n    \n    function computeWithPrimesToMemorizeAndLowLevelGas(uint256 _primesToMemorize, uint256 _lowLevelGas) external\n    {\n        computeWithParams(_primesToMemorize, _lowLevelGas, msg.sender);\n    }\n    \n    function computeWithParams(uint256 _primesToMemorize, uint256 _lowLevelGas, address _recipient) public\n    {\n        require(_primesToMemorize <= definitePrimes.length, \"computeWithParams error: _primesToMemorize out of bounds\");\n        \n        uint256 startGas = gasleft();\n        \n        // We need to continue where we stopped last time.\n        uint256 number = numberBeingTested;\n        uint256 divisorIndex = divisorIndexBeingTested;\n        \n        // Read this in advance so we don't have to keep SLOAD'ing it\n        uint256 totalPrimes = definitePrimes.length;\n        \n        // Load some discovered definite primes into memory\n        uint256[] memory definitePrimesCache = new uint256[](_primesToMemorize);\n        for (uint256 i=0; i<_primesToMemorize; i++)\n        {\n            definitePrimesCache[i] = definitePrimes[i];\n        }\n        \n        for (; ; number += 2)\n        {\n            // Save state and stop if remaining gas is too low\n            if (gasleft() < _lowLevelGas)\n            {\n                numberBeingTested = number;\n                divisorIndexBeingTested = divisorIndex;\n                uint256 gasSpent = startGas - gasleft();\n                addressToGasSpent[msg.sender] += gasSpent;\n                addressToEtherSpent[msg.sender] += gasSpent * tx.gasprice;\n                return;\n            }\n            \n            if (isPrime(number) != DEFINITELY_NOT)\n            {\n                uint256 sqrtNumberRoundedDown = sqrtRoundedDown(number);\n                \n                bool numberCanStillBePrime = true;\n                uint256 divisor;\n                \n                for (; divisorIndex<totalPrimes; divisorIndex++)\n                {\n                    // Save state and stop if remaining gas is too low\n                    if (gasleft() < _lowLevelGas)\n                    {\n                        numberBeingTested = number;\n                        divisorIndexBeingTested = divisorIndex;\n                        uint256 gasSpent = startGas - gasleft();\n                        addressToGasSpent[msg.sender] += gasSpent;\n                        addressToEtherSpent[msg.sender] += gasSpent * tx.gasprice;\n                        return;\n                    }\n                    \n                    if (divisorIndex < definitePrimesCache.length) divisor = definitePrimesCache[divisorIndex];\n                    else divisor = definitePrimes[divisorIndex];\n                    \n                    if (number % divisor == 0)\n                    {\n                        numberCanStillBePrime = false;\n                        break;\n                    }\n                    \n                    // We don't have to try to divide by numbers higher than the\n                    // square root of the number. Why? Well, suppose you're testing\n                    // if 29 is prime. You've already tried dividing by 2, 3, 4, 5\n                    // and found that you couldn't, so now you move on to 6.\n                    // Trying to divide it by 6 is futile, because if 29 were\n                    // divisible by 6, it would logically also be divisible by 29/6\n                    // which you should already have found at that point, because\n                    // 29/6 < 6, because 6 > sqrt(29)\n                    if (divisor > sqrtNumberRoundedDown)\n                    {\n                        break;\n                    }\n                }\n                \n                if (numberCanStillBePrime)\n                {\n                    _createPrime(number, _recipient, true);\n                    totalPrimes++;\n                }\n                else\n                {\n                    numberToNonTwoDivisor[number] = divisor;\n                }\n                \n                // Start trying to divide by 3.\n                // We skip all the even numbers so we don't have to bother dividing by 2.\n                divisorIndex = 1;\n            }\n        }\n        \n        // This point should be unreachable.\n        revert(\"computeWithParams error: This point should never be reached.\");\n    }\n    \n    // https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n    function sqrtRoundedDown(uint256 x) private pure returns (uint256 y)\n    {\n        if (x == ~uint256(0)) return 340282366920938463463374607431768211455;\n        \n        uint256 z = (x + 1) >> 1;\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((x / z) + z) >> 1;\n        }\n        return y;\n    }\n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////            Prime classes           ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // Balanced primes are exactly in the middle between the two surrounding primes\n    function isBalancedPrime(uint256 _prime) external view returns (Booly result, uint256 lowerPrime, uint256 higherPrime)\n    {\n        Booly primality = isPrime(_prime);\n        if (primality == DEFINITELY_NOT)\n        {\n            return (DEFINITELY_NOT, 0, 0);\n        }\n        else if (primality == PROBABLY_NOT)\n        {\n            return (PROBABLY_NOT, 0, 0);\n        }\n        else if (primality == UNKNOWN)\n        {\n            return (UNKNOWN, 0, 0);\n        }\n        else if (primality == PROBABLY)\n        {\n            return (UNKNOWN, 0, 0);\n        }\n        else if (primality == DEFINITELY)\n        {\n            uint256 index = numberdataToAllPrimesIndex(numberToNumberdata[_prime]);\n            if (index == 0)\n            {\n                // 2 is not a balanced prime, because there is no prime before it\n                return (DEFINITELY_NOT, 0, 0);\n            }\n            else if (index == definitePrimes.length-1)\n            {\n                // We cannot determine this property for the last prime we've found\n                return (UNKNOWN, 0, 0);\n            }\n            else\n            {\n                uint256 primeBefore = definitePrimes[index-1];\n                uint256 primeAfter = definitePrimes[index+1];\n                if (_prime - primeBefore == primeAfter - _prime) return (DEFINITELY, primeBefore, primeAfter);\n                else return (DEFINITELY_NOT, primeBefore, primeAfter);\n            }\n        }\n        else\n        {\n            revert();\n        }\n    }\n    \n    // NTuple mersenne primes:\n    // n=0 => primes                                            returns []\n    // n=1 => mersenne primes of form 2^p-1                     returns [p]\n    // n=2 => double mersenne primes of form 2^(2^p-1)-1        returns [2^p-1, p]\n    // n=3 => triple mersenne primes of form 2^(2^(2^p-1)-1)-1  returns [2^(2^p-1)-1, 2^p-1, p]\n    // etc..\n    function isNTupleMersennePrime(uint256 _number, uint256 _n) external view returns (Booly _result, uint256[] memory _powers)\n    {\n        _powers = new uint256[](_n);\n        \n        // Prevent overflow on _number+1\n        if (_number+1 < _number) return (UNKNOWN, _powers);\n        \n        _result = isPrime(_number);\n        if (_result == DEFINITELY_NOT) { return (DEFINITELY_NOT, _powers); }\n        \n        uint256 currentNumber = _number;\n        \n        for (uint256 i=0; i<_n; i++)\n        {\n            Booly powerOf2ity = isPowerOf2(currentNumber+1) ? DEFINITELY : DEFINITELY_NOT;\n            if (powerOf2ity == DEFINITELY_NOT) { return (DEFINITELY_NOT, _powers); }\n            \n            _powers[i] = currentNumber = log2ofPowerOf2(currentNumber+1);\n        }\n        \n        return (_result, _powers);\n    }\n    \n    // A good prime's square is greater than the product of all equally distant (by index) primes\n    function isGoodPrime(uint256 _number) external view returns (Booly)\n    {\n        // 2 is defined not to be a good prime.\n        if (_number == 2) return DEFINITELY_NOT;\n        \n        Booly primality = isPrime(_number);\n        if (primality == DEFINITELY)\n        {\n            uint256 index = numberdataToAllPrimesIndex(numberToNumberdata[_number]);\n            \n            if (index*2 >= definitePrimes.length)\n            {\n                // We haven't found enough definite primes yet to determine this property\n                return UNKNOWN;\n            }\n            else\n            {\n                uint256 squareOfInput;\n                bool mulSuccess;\n                \n                (squareOfInput, mulSuccess) = TRY_MUL(_number, _number);\n                if (!mulSuccess) return UNKNOWN;\n                \n                for (uint256 i=1; i<=index; i++)\n                {\n                    uint256 square;\n                    (square, mulSuccess) = TRY_MUL(definitePrimes[index-i], definitePrimes[index+i]);\n                    if (!mulSuccess) return UNKNOWN;\n                    if (square >= squareOfInput)\n                    {\n                        return DEFINITELY_NOT;\n                    }\n                }\n                return DEFINITELY;\n            }\n        }\n        else if (primality == PROBABLY || primality == UNKNOWN)\n        {\n            // We can't determine it\n            return UNKNOWN;\n        }\n        else if (primality == DEFINITELY_NOT)\n        {\n            return DEFINITELY_NOT;\n        }\n        else if (primality == PROBABLY_NOT)\n        {\n            return PROBABLY_NOT;\n        }\n        else\n        {\n            // This should never happen\n            revert();\n        }\n    }\n    \n    // Factorial primes are of the form n!+delta where delta = +1 or delta = -1\n    function isFactorialPrime(uint256 _number) external view returns (Booly _result, uint256 _n, int256 _delta)\n    {\n        // Prevent underflow on _number-1\n        if (_number == 0) return (DEFINITELY_NOT, 0, 0);\n        \n        // Prevent overflow on _number+1\n        if (_number == ~uint256(0)) return (DEFINITELY_NOT, 0, 0);\n        \n        \n        Booly primality = isPrime(_number);\n        \n        if (primality == DEFINITELY_NOT) return (DEFINITELY_NOT, 0, 0);\n        \n        bool factorialityOfPrimePlus1;\n        uint256 primePlus1n;\n\n        // Detect factorial primes of the form n!-1\n        (primePlus1n, factorialityOfPrimePlus1) = reverseFactorial(_number+1);\n        if (factorialityOfPrimePlus1) return (AND(primality, factorialityOfPrimePlus1), primePlus1n, -1);\n\n        bool factorialityOfPrimeMinus1;\n        uint256 primeMinus1n;\n        \n        (primeMinus1n, factorialityOfPrimeMinus1) = reverseFactorial(_number-1);\n        if (factorialityOfPrimeMinus1) return (AND(primality, factorialityOfPrimeMinus1), primeMinus1n, 1);\n        \n        return (DEFINITELY_NOT, 0, 0);\n    }\n    \n    // Cullen primes are of the form n * 2^n + 1\n    function isCullenPrime(uint256 _number) external pure returns (Booly _result, uint256 _n)\n    {\n        // There are only two cullen primes that fit in a 256-bit integer\n        if (_number == 3)  // n = 1\n        {\n            return (DEFINITELY, 1);\n        }\n        else if (_number == 393050634124102232869567034555427371542904833) // n = 141\n        {\n            return (DEFINITELY, 141);\n        }\n        else\n        {\n            return (DEFINITELY_NOT, 0);\n        }\n    }\n    \n    // Fermat primes are of the form 2^(2^n)+1\n    // Conjecturally, 3, 5, 17, 257, 65537 are the only ones\n    function isFermatPrime(uint256 _number) external view returns (Booly result, uint256 _2_pow_n, uint256 _n)\n    {\n        // Prevent underflow on _number-1\n        if (_number == 0) return (DEFINITELY_NOT, 0, 0);\n        \n        \n        Booly primality = isPrime(_number);\n        \n        if (primality == DEFINITELY_NOT) return (DEFINITELY_NOT, 0, 0);\n        \n        bool is__2_pow_2_pow_n__powerOf2 = isPowerOf2(_number-1);\n        \n        if (!is__2_pow_2_pow_n__powerOf2) return (DEFINITELY_NOT, 0, 0);\n        \n        _2_pow_n = log2ofPowerOf2(_number-1);\n        \n        bool is__2_pow_n__powerOf2 = isPowerOf2(_2_pow_n);\n        \n        if (!is__2_pow_n__powerOf2) return (DEFINITELY_NOT, _2_pow_n, 0);\n        \n        _n = log2ofPowerOf2(_2_pow_n);\n    }\n    \n    // Super-primes are primes with a prime index in the sequence of prime numbers. (indexed starting with 1)\n    function isSuperPrime(uint256 _number) public view returns (Booly _result, uint256 _indexStartAtOne)\n    {\n        Booly primality = isPrime(_number);\n        if (primality == DEFINITELY)\n        {\n            _indexStartAtOne = numberdataToAllPrimesIndex(numberToNumberdata[_number]) + 1;\n            _result = isPrime(_indexStartAtOne);\n            return (_result, _indexStartAtOne);\n        }\n        else if (primality == DEFINITELY_NOT)\n        {\n            return (DEFINITELY_NOT, 0);\n        }\n        else if (primality == UNKNOWN)\n        {\n            return (UNKNOWN, 0);\n        }\n        else if (primality == PROBABLY)\n        {\n            return (UNKNOWN, 0);\n        }\n        else if (primality == PROBABLY_NOT)\n        {\n            return (PROBABLY_NOT, 0);\n        }\n        else\n        {\n            revert();\n        }\n    }\n    \n    function isFibonacciPrime(uint256 _number) public view returns (Booly _result)\n    {\n        return AND_F(isPrime, isFibonacciNumber, _number);\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////          Number classes            ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    function isFibonacciNumber(uint256 _number) public pure returns (Booly _result)\n    {\n        // If _number doesn't fit inside a uint126, we can't perform the computations necessary to check fibonaccality.\n        // We need to be able to square it, multiply by 5 then add 4.\n        // Adding 4 removes 1 bit of room: uint256 -> uint255\n        // Multiplying by 5 removes 3 bits of room: uint255 -> uint252\n        // Squaring removes 50% of room: uint252 -> uint126\n        // Rounding down to the nearest solidity type: uint126 -> uint120\n\n        if (uint256(uint120(_number)) != _number) return UNKNOWN;\n        \n        uint256 squareOfNumber = _number * _number;\n        uint256 squareTimes5 = squareOfNumber * 5;\n        uint256 squareTimes5plus4 = squareTimes5 + 4;\n        \n        bool squareTimes5plus4squarality;\n        (squareTimes5plus4squarality, ) = isSquareNumber(squareTimes5plus4);\n        \n        if (squareTimes5plus4squarality) return DEFINITELY;\n        \n        uint256 squareTimes5minus4 = squareTimes5 - 4;\n        \n        bool squareTimes5minus4squarality;\n        \n        // Check underflow\n        if (squareTimes5minus4 > squareTimes5) \n        {\n            squareTimes5minus4squarality = false;\n        }\n        else\n        {\n            (squareTimes5minus4squarality, ) = isSquareNumber(squareTimes5minus4);\n        }\n        \n        return (squareTimes5plus4squarality || squareTimes5minus4squarality) ? DEFINITELY : DEFINITELY_NOT;\n    }\n    \n    function isSquareNumber(uint256 _number) private pure returns (bool _result, uint256 _squareRoot)\n    {\n        uint256 rootRoundedDown = sqrtRoundedDown(_number);\n        return (rootRoundedDown * rootRoundedDown == _number, rootRoundedDown);\n    }\n    \n\n\n\n\n\n\n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////           Math functions           ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    function reverseFactorial(uint256 _number) private pure returns (uint256 output, bool success)\n    {\n        // 0 = immediate failure\n        if (_number == 0) return (0, false);\n        \n        uint256 divisor = 1;\n        while (_number > 1)\n        {\n            divisor++;\n            uint256 remainder = _number % divisor;\n            if (remainder != 0) return (divisor, false);\n            _number /= divisor;\n        }\n        \n        return (divisor, true);\n    }\n    \n    function isPowerOf2(uint256 _number) private pure returns (bool)\n    {\n        if (_number == 0) return false;\n        else return ((_number-1) & _number) == 0;\n    }\n    \n    // Performs a log2 on a power of 2.\n    // This function will throw if the input was not a power of 2.\n    function log2ofPowerOf2(uint256 _powerOf2) private pure returns (uint256)\n    {\n        require(_powerOf2 != 0, \"log2ofPowerOf2 error: 0 is not a power of 2\");\n        uint256 iterations = 0;\n        while (true)\n        {\n            if (_powerOf2 == 1) return iterations;\n            require((_powerOf2 & 1) == 0, \"log2ofPowerOf2 error: argument is not a power of 2\"); // The current number must be divisible by 2\n            _powerOf2 >>= 1; // Divide by 2\n            iterations++;\n        }\n    }\n    \n    // Generate a random number with low gas cost.\n    // This RNG is not secure and can be influenced!\n    function insecureRand() private view returns (uint256)\n    {\n        return uint256(keccak256(abi.encodePacked(\n            largestDefinitePrimeFound(),\n            probablePrimes.length,\n            block.coinbase,\n            block.timestamp,\n            block.number,\n            block.difficulty,\n            tx.origin,\n            tx.gasprice,\n            msg.sender,\n            now,\n            gasleft()\n        )));\n    }\n    \n    // TRY_POW_MOD function defines 0^0 % n = 1\n    function TRY_POW_MOD(uint256 _base, uint256 _power, uint256 _modulus) private pure returns (uint256 result, bool success)\n    {\n        if (_modulus == 0) return (0, false);\n        \n        bool mulSuccess;\n        _base %= _modulus;\n        result = 1;\n        while (_power > 0)\n        {\n            if (_power & uint256(1) != 0)\n            {\n                (result, mulSuccess) = TRY_MUL(result, _base);\n                if (!mulSuccess) return (0, false);\n                result %= _modulus;\n            }\n            (_base, mulSuccess) = TRY_MUL(_base, _base);\n            if (!mulSuccess) return (0, false);\n            _base = _base % _modulus;\n            _power >>= 1;\n        }\n        success = true;\n    }\n    \n    function TRY_MUL(uint256 _i, uint256 _j) private pure returns (uint256 result, bool success)\n    {\n        if (_i == 0) { return (0, true); }\n        uint256 ret = _i * _j;\n        if (ret / _i == _j) return (ret, true);\n        else return (ret, false);\n    }\n\n\n\n\n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////           Miller-rabin             ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // This function runs one trial. It returns false if n is\n    // definitely composite and true if n is probably prime.\n    // d must be an odd number such that d*2^r = n-1 for some r >= 1\n    function probabilisticTest(uint256 d, uint256 _number, uint256 _random) private pure returns (bool result, bool success)\n    {\n        // Check d\n        assert(d & 1 == 1); // d is odd\n        assert((_number-1) % d == 0); // n-1 divisible by d\n        uint256 nMinusOneOverD = (_number-1) / d;\n        assert(isPowerOf2(nMinusOneOverD)); // (n-1)/d is power of 2\n        assert(nMinusOneOverD >= 1); // 2^r >= 2 therefore r >= 1\n        \n        // Make sure we can subtract 4 from _number\n        if (_number < 4) return (false, false);\n        \n        // Pick a random number in [2..n-2]\n        uint256 a = 2 + _random % (_number - 4);\n        \n        // Compute a^d % n\n        uint256 x;\n        (x, success) = TRY_POW_MOD(a, d, _number);\n        if (!success) return (false, false);\n        \n        if (x == 1 || x == _number-1)\n        {\n            return (true, true);\n        }\n        \n        // Keep squaring x while one of the following doesn't\n        // happen\n        // (i)   d does not reach n-1\n        // (ii)  (x^2) % n is not 1\n        // (iii) (x^2) % n is not n-1\n        while (d != _number-1)\n        {\n            (x, success) = TRY_MUL(x, x);\n            if (!success) return (false, false);\n            \n            x %= _number;\n            \n            (d, success) = TRY_MUL(d, 2);\n            if (!success) return (false, false);\n            \n            \n            if (x == 1) return (false, true);\n            if (x == _number-1) return (true, true);\n        }\n     \n        // Return composite\n        return (false, true);\n    }\n    \n    // This functions runs multiple miller-rabin trials.\n    // It returns false if _number is definitely composite and\n    // true if _number is probably prime.\n    function isPrime_probabilistic(uint256 _number) public view returns (Booly)\n    {\n        // 40 iterations is heuristically enough for extremely high certainty\n        uint256 probabilistic_iterations = 40;\n        \n        // Corner cases\n        if (_number == 0 || _number == 1 || _number == 4)  return DEFINITELY_NOT;\n        if (_number == 2 || _number == 3) return DEFINITELY;\n        \n        // Find d such that _number == 2^d * r + 1 for some r >= 1\n        uint256 d = _number - 1;\n        while ((d & 1) == 0)\n        {\n            d >>= 1;\n        }\n        \n        uint256 random = insecureRand();\n        \n        // Run the probabilistic test many times with different randomness\n        for (uint256 i = 0; i < probabilistic_iterations; i++)\n        {\n            bool result;\n            bool success;\n            (result, success) = probabilisticTest(d, _number, random);\n            if (success == false)\n            {\n                return UNKNOWN;\n            }\n            if (result == false)\n            {\n                return DEFINITELY_NOT;\n            }\n            \n            // Shuffle bits\n            random *= 22777;\n            random ^= (random >> 7);\n            random *= 71879;\n            random ^= (random >> 11);\n        }\n        \n        return PROBABLY;\n    }\n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////  Claim & disprove probable primes  ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    function claimProbablePrime(uint256 _number) public\n    {\n        require(tryClaimProbablePrime(_number), \"claimProbablePrime error: that number is not prime or has already been claimed\");\n    }\n    \n    function tryClaimProbablePrime(uint256 _number) public returns (bool _success)\n    {\n        uint256 startGas = gasleft();\n        \n        Booly primality = isPrime(_number);\n        \n        // If we already have knowledge about the provided number, cancel the claim attempt.\n        if (primality != UNKNOWN)\n        {\n            _success = false;\n        }\n        else\n        {\n            primality = isPrime_probabilistic(_number);\n            \n            if (primality == DEFINITELY_NOT)\n            {\n                // If it's not prime, remember it as such\n                _numberdataSetNumberType(_number, NumberType.NOT_PRIME);\n                \n                 _success = false;\n            }\n            else if (primality == PROBABLY)\n            {\n                _createPrime(_number, msg.sender, false);\n                \n                addressToProbablePrimesClaimed[msg.sender]++;\n                \n                 _success = true;\n            }\n            else\n            {\n                 _success = false;\n            }\n        }\n        \n        uint256 gasSpent = startGas - gasleft();\n        addressToGasSpent[msg.sender] += gasSpent;\n        addressToEtherSpent[msg.sender] += gasSpent * tx.gasprice;\n    }\n    \n    function disproveProbablePrime(uint256 _prime, uint256 _divisor) external\n    {\n        require(_divisor > 1 && _divisor < _prime, \"disproveProbablePrime error: divisor must be greater than 1 and smaller than prime\");\n        \n        bytes32 numberdata = numberToNumberdata[_prime];\n        \n        // If _prime is a probable prime...\n        require(numberdataToNumberType(numberdata) == NumberType.PROBABLE_PRIME, \"disproveProbablePrime error: that prime is not a probable prime\");\n        \n        // ... and _prime is divisible by _divisor ...\n        require((_prime % _divisor) == 0, \"disproveProbablePrime error: that prime is not divisible by that divisor\");\n        \n        address owner = numberdataToOwner(numberdata);\n        \n        // Statistics\n        addressToProbablePrimesDisprovenFrom[owner]++;\n        addressToProbablePrimesDisprovenBy[msg.sender]++;\n        \n        _setOwner(_prime, address(0x0));\n        \n        _numberdataSetNumberType(_prime, NumberType.NOT_PRIME);\n        \n        // Remove it from the probablePrimes array\n        uint256 primeIndex = numberdataToAllPrimesIndex(numberdata);\n        \n        // If the prime we're removing is not the last one in the probablePrimes array...\n        if (primeIndex < probablePrimes.length-1)\n        {\n            // ...move the last one back into its slot.\n            uint256 otherPrimeBeingMoved = probablePrimes[probablePrimes.length-1];\n            _numberdataSetAllPrimesIndex(otherPrimeBeingMoved, uint48(primeIndex));\n            probablePrimes[primeIndex] = otherPrimeBeingMoved;\n        }\n        probablePrimes[probablePrimes.length-1] = 0; // Refund some gas\n        probablePrimes.length--;\n        \n        // Broadcast event\n        emit ProbablePrimeDisproven(_prime, _divisor, owner, msg.sender, primeIndex);\n        \n        // Store the divisor\n        numberToNonTwoDivisor[_prime] = _divisor;\n    }\n    \n    function claimProbablePrimeInRange(uint256 _start, uint256 _end) external returns (bool _success, uint256 _prime)\n    {\n        for (uint256 currentNumber = _start; currentNumber <= _end; currentNumber++)\n        {\n            if (tryClaimProbablePrime(currentNumber)) { return (true, currentNumber); }\n        }\n        return (false, 0);\n    }\n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////      Try to stop people from       ////////////\n    ////////////    accidentally sending tokens     ////////////\n    ////////////         to this contract           ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    function onERC721Received(address, address, uint256, bytes calldata) external pure // ERC721\n    {\n        revert(\"EtherPrime contract should not receive tokens\");\n    }\n    \n    function tokenFallback(address, uint256, bytes calldata) external pure // ERC223\n    {\n        revert(\"EtherPrime contract should not receive tokens\");\n    }\n    \n    function tokensReceived(address, address, address, uint, bytes calldata, bytes calldata) external pure // ERC777\n    {\n        revert(\"EtherPrime contract should not receive tokens\");\n    }\n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////            Booly stuff             ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // Penta-state logic implementation\n    \n    enum Booly\n    {\n        DEFINITELY_NOT,\n        PROBABLY_NOT,\n        UNKNOWN,\n        PROBABLY,\n        DEFINITELY\n    }\n    \n    Booly public constant DEFINITELY_NOT = Booly.DEFINITELY_NOT;\n    Booly public constant PROBABLY_NOT = Booly.PROBABLY_NOT;\n    Booly public constant UNKNOWN = Booly.UNKNOWN;\n    Booly public constant PROBABLY = Booly.PROBABLY;\n    Booly public constant DEFINITELY = Booly.DEFINITELY;\n    \n    function OR(Booly a, Booly b) internal pure returns (Booly)\n    {\n        if (a == DEFINITELY || b == DEFINITELY) return DEFINITELY;\n        else if (a == PROBABLY || b == PROBABLY) return PROBABLY;\n        else if (a == UNKNOWN || b == UNKNOWN) return UNKNOWN;\n        else if (a == PROBABLY_NOT || b == PROBABLY_NOT) return PROBABLY_NOT;\n        else if (a == DEFINITELY_NOT && b == DEFINITELY_NOT) return DEFINITELY_NOT;\n        else revert();\n    }\n    \n    function NOT(Booly a) internal pure returns (Booly)\n    {\n        if (a == DEFINITELY_NOT) return DEFINITELY;\n        else if (a == PROBABLY_NOT) return PROBABLY;\n        else if (a == UNKNOWN) return UNKNOWN;\n        else if (a == PROBABLY) return PROBABLY_NOT;\n        else if (a == DEFINITELY) return DEFINITELY_NOT;\n        else revert();\n    }\n    \n    function AND(Booly a, Booly b) internal pure returns (Booly)\n    {\n        if (a == DEFINITELY_NOT || b == DEFINITELY_NOT) return DEFINITELY_NOT;\n        else if (a == PROBABLY_NOT || b == PROBABLY_NOT) return PROBABLY_NOT;\n        else if (a == UNKNOWN || b == UNKNOWN) return UNKNOWN;\n        else if (a == PROBABLY || b == PROBABLY) return PROBABLY;\n        else if (a == DEFINITELY && b == DEFINITELY) return DEFINITELY;\n        else revert();\n    }\n    \n    function AND(Booly a, bool b) internal pure returns (Booly)\n    {\n        if (b == true) return a;\n        else return DEFINITELY_NOT;\n    }\n    \n    function XOR(Booly a, Booly b) internal pure returns (Booly)\n    {\n        return AND(OR(a, b), NOT(AND(a, b)));\n    }\n    \n    function NAND(Booly a, Booly b) internal pure returns (Booly)\n    {\n        return NOT(AND(a, b));\n    }\n    \n    function NOR(Booly a, Booly b) internal pure returns (Booly)\n    {\n        return NOT(OR(a, b));\n    }\n    \n    function XNOR(Booly a, Booly b) internal pure returns (Booly)\n    {\n        return NOT(XOR(a, b));\n    }\n    \n    function AND_F(function(uint256)view returns(Booly) aFunc, function(uint256)view returns(Booly) bFunc, uint256 _arg) internal view returns (Booly)\n    {\n        Booly a = aFunc(_arg);\n        if (a == DEFINITELY_NOT) return DEFINITELY_NOT;\n        else\n        {\n            Booly b = bFunc(_arg);\n            if (b == DEFINITELY_NOT) return DEFINITELY_NOT;\n            else if (a == PROBABLY_NOT) return PROBABLY_NOT;\n            else if (b == PROBABLY_NOT) return PROBABLY_NOT;\n            else if (a == UNKNOWN || b == UNKNOWN) return UNKNOWN;\n            else if (a == PROBABLY || b == PROBABLY) return PROBABLY;\n            else if (a == DEFINITELY && b == DEFINITELY) return DEFINITELY;\n            else revert();\n        }\n    }\n    \n    function OR_F(function(uint256)view returns(Booly) aFunc, function(uint256)view returns(Booly) bFunc, uint256 _arg) internal view returns (Booly)\n    {\n        Booly a = aFunc(_arg);\n        if (a == DEFINITELY) return DEFINITELY;\n        else\n        {\n            Booly b = bFunc(_arg);\n            if (b == DEFINITELY) return DEFINITELY;\n            else if (a == PROBABLY || b == PROBABLY) return PROBABLY;\n            else if (a == UNKNOWN || b == UNKNOWN) return UNKNOWN;\n            else if (a == PROBABLY_NOT || b == PROBABLY_NOT) return PROBABLY_NOT;\n            else if (a == DEFINITELY_NOT && b == DEFINITELY_NOT) return DEFINITELY_NOT;\n            else revert();\n        }\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////           Trading stuff            ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // depositEther() should only be called at the start of 'external payable' functions.\n    function depositEther() public payable\n    {\n        addressToEtherBalance[msg.sender] += msg.value;\n        \n        emit EtherDeposited(msg.sender, msg.value);\n    }\n    \n    function withdrawEther(uint256 _amount) public\n    {\n        require(addressToEtherBalance[msg.sender] >= _amount, \"withdrawEther error: insufficient balance to withdraw that much ether\");\n        addressToEtherBalance[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n        \n        emit EtherWithdrawn(msg.sender, _amount);\n    }\n    \n    struct BuyOrder\n    {\n        address buyer;\n        uint256 bid;\n    }\n    \n    function depositEtherAndCreateBuyOrder(uint256 _prime, uint256 _bid, uint256 _indexHint) external payable\n    {\n        depositEther();\n        \n        require(_bid > 0, \"createBuyOrder error: bid must be greater than 0\");\n        require(_prime >= 2, \"createBuyOrder error: prime must be greater than or equal to 2\");\n        \n        BuyOrder[] storage buyOrders = primeToBuyOrders[_prime];\n\n        uint256 _index;\n        \n        if (_indexHint == buyOrders.length)\n        {\n            _index = _indexHint;\n        }\n        else if (_indexHint < buyOrders.length &&\n                 buyOrders[_indexHint].buyer == address(0x0) &&\n                 buyOrders[_indexHint].bid == 0)\n        {\n            _index = _indexHint;\n        }\n        else\n        {\n            _index = findFreeBuyOrderSlot(_prime);\n        }\n        \n        if (_index == buyOrders.length)\n        {\n            buyOrders.length++;\n        }\n        \n        BuyOrder storage buyOrder = buyOrders[_index];\n        \n        buyOrder.buyer = msg.sender;\n        buyOrder.bid = _bid;\n        \n        emit BuyOrderCreated(msg.sender, _prime, _index, _bid);\n        \n        tryMatchSellAndBuyOrdersRange(_prime, _index, _index);\n    }\n    \n    function modifyBuyOrder(uint256 _prime, uint256 _index, uint256 _newBid) external\n    {\n        BuyOrder[] storage buyOrders = primeToBuyOrders[_prime];\n        require(_index < buyOrders.length, \"modifyBuyOrder error: index out of bounds\");\n        \n        BuyOrder storage buyOrder = buyOrders[_index];\n        require(buyOrder.buyer == msg.sender, \"modifyBuyOrder error: you do not own that buy order\");\n        \n        emit BuyOrderDestroyed(msg.sender, _prime, _index);\n        \n        buyOrder.bid = _newBid;\n        \n        emit BuyOrderCreated(msg.sender, _prime, _index, _newBid);\n    }\n    \n\n    function tryCancelBuyOrders(uint256[] memory _primes, uint256[] memory _buyOrderIndices) public returns (uint256 _amountCancelled)\n    {\n        require(_primes.length == _buyOrderIndices.length, \"tryCancelBuyOrders error: invalid input, arrays are not the same length\");\n        \n        _amountCancelled = 0;\n        \n        for (uint256 i=0; i<_primes.length; i++)\n        {\n            uint256 index = _buyOrderIndices[i];\n            uint256 prime = _primes[i];\n            \n            BuyOrder[] storage buyOrders = primeToBuyOrders[prime];\n            if (index < buyOrders.length)\n            {\n                BuyOrder storage buyOrder = buyOrders[index];\n                if (buyOrder.buyer == msg.sender)\n                {\n                    emit BuyOrderDestroyed(msg.sender, prime, index);\n                    \n                    buyOrder.buyer = address(0x0);\n                    buyOrder.bid = 0;\n                    \n                    _amountCancelled++;\n                }\n            }\n        }\n    }\n\n    function setSellPrice(uint256 _prime, uint256 _price, uint256 _matchStartBuyOrderIndex, uint256 _matchEndBuyOrderIndex) external returns (bool _sold)\n    {\n        require(isApprovedFor(msg.sender, _prime), \"createSellOrder error: you do not have ownership of or approval for that prime\");\n        \n        primeToSellOrderPrice[_prime] = _price;\n        \n        emit SellPriceSet(msg.sender, _prime, _price);\n        \n        if (_matchStartBuyOrderIndex != ~uint256(0))\n        {\n            return tryMatchSellAndBuyOrdersRange(_prime, _matchStartBuyOrderIndex, _matchEndBuyOrderIndex);\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    function tryMatchSellAndBuyOrdersRange(uint256 _prime, uint256 _startBuyOrderIndex, uint256 _endBuyOrderIndex) public returns (bool _sold)\n    {\n        uint256 sellOrderPrice = primeToSellOrderPrice[_prime];\n        address seller = getOwner(_prime);\n        \n        if (sellOrderPrice == 0 ||\n            seller == address(0x0))\n        {\n            return false;\n        }\n        else\n        {\n            BuyOrder[] storage buyOrders = primeToBuyOrders[_prime];\n            \n            uint256 buyOrders_length = buyOrders.length;\n\n            if (_startBuyOrderIndex > _endBuyOrderIndex ||\n                _endBuyOrderIndex >= buyOrders.length)\n            {\n                return false;\n            }\n            else\n            {\n                for (uint256 i=_startBuyOrderIndex; i<=_endBuyOrderIndex && i<buyOrders_length; i++)\n                {\n                    BuyOrder storage buyOrder = buyOrders[i];\n                    address buyer = buyOrder.buyer;\n                    uint256 bid = buyOrder.bid;\n                    \n                    if (bid >= sellOrderPrice &&\n                        addressToEtherBalance[buyer] >= bid)\n                    {\n                        addressToEtherBalance[buyer] -= bid;\n                        addressToEtherBalance[seller] += bid;\n                        \n                        _setOwner(_prime, buyer); // _setOwner sets primeToSellOrderPrice[_prime] = 0\n                        \n                        emit BuyOrderDestroyed(buyer, _prime, i);\n                        emit PrimeTraded(seller, buyer, _prime, i, bid);\n                        \n                        buyOrder.buyer = address(0x0);\n                        buyOrder.bid = 0;\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////       Trading view functions       ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    function countPrimeBuyOrders(uint256 _prime) external view returns (uint256 _amountOfBuyOrders)\n    {\n        _amountOfBuyOrders = 0;\n        \n        BuyOrder[] storage buyOrders = primeToBuyOrders[_prime];\n        for (uint256 i=0; i<buyOrders.length; i++)\n        {\n            if (buyOrders[i].buyer != address(0x0))\n            {\n                _amountOfBuyOrders++;\n            }\n        }\n    }\n    \n    function lengthOfPrimeBuyOrdersArray(uint256 _prime) external view returns (uint256 _lengthOfPrimeBuyOrdersArray)\n    {\n        return primeToBuyOrders[_prime].length;\n    }\n    \n    function getPrimeBuyOrder(uint256 _prime, uint256 _index) external view returns (address _buyer, uint256 _bid, bool _buyerHasEnoughFunds)\n    {\n       BuyOrder storage buyOrder = primeToBuyOrders[_prime][_index];\n       \n       _buyer = buyOrder.buyer;\n       _bid = buyOrder.bid;\n       \n       require(_buyer != address(0x0) && _bid != 0);\n       \n       _buyerHasEnoughFunds = addressToEtherBalance[_buyer] >= _bid;\n    }\n    \n    function findFreeBuyOrderSlot(uint256 _prime) public view returns (uint256 _buyOrderSlotIndex)\n    {\n        BuyOrder[] storage buyOrders = primeToBuyOrders[_prime];\n        uint256 len = buyOrders.length;\n        \n        for (uint256 i=0; i<len; i++)\n        {\n            if (buyOrders[i].buyer == address(0x0) &&\n                buyOrders[i].bid == 0)\n            {\n                return i;\n            }\n        }\n        \n        return len;\n    }  \n\n    function findHighestBidBuyOrder(uint256 _prime) public view returns (bool _found, uint256 _buyOrderIndex, address _buyer, uint256 _bid)\n    {\n        BuyOrder[] storage buyOrders = primeToBuyOrders[_prime];\n        uint256 highestBidBuyOrderIndexFound = 0;\n        uint256 highestBidFound = 0;\n        address highestBidAddress = address(0x0);\n        for (uint256 i=0; i<buyOrders.length; i++)\n        {\n            BuyOrder storage buyOrder = buyOrders[i];\n            if (buyOrder.bid > highestBidFound &&\n                addressToEtherBalance[buyOrder.buyer] >= buyOrder.bid)\n            {\n                highestBidBuyOrderIndexFound = i;\n                highestBidFound = buyOrder.bid;\n                highestBidAddress = buyOrder.buyer;\n            }\n        }\n        if (highestBidFound == 0)\n        {\n            return (false, 0, address(0x0), 0);\n        }\n        else\n        {\n            return (true, highestBidBuyOrderIndexFound, highestBidAddress, highestBidFound);\n        }\n    }\n    \n    function findBuyOrdersOfUserOnPrime(address _user, uint256 _prime) external view returns (uint256[] memory _buyOrderIndices, uint256[] memory _bids)\n    {\n        BuyOrder[] storage buyOrders = primeToBuyOrders[_prime];\n        \n        _buyOrderIndices = new uint256[](buyOrders.length);\n        _bids = new uint256[](buyOrders.length);\n        \n        uint256 amountOfBuyOrdersFound = 0;\n\n        for (uint256 i=0; i<buyOrders.length; i++)\n        {\n            BuyOrder storage buyOrder = buyOrders[i];\n            if (buyOrder.buyer == _user)\n            {\n                _buyOrderIndices[amountOfBuyOrdersFound] = i;\n                _bids[amountOfBuyOrdersFound] = buyOrder.bid;\n                amountOfBuyOrdersFound++;\n            }\n        }\n        \n        assembly\n        {\n            // _buyOrderIndices.length = amountOfBuyOrdersFound;\n            mstore(_buyOrderIndices, amountOfBuyOrdersFound)\n            \n            // _bids.length = amountOfBuyOrdersFound;\n            mstore(_bids, amountOfBuyOrdersFound)\n        }\n    }\n    \n    function findBuyOrdersOnUsersPrimes(address _user) external view returns (uint256[] memory _primes, uint256[] memory _buyOrderIndices, address[] memory _buyers, uint256[] memory _bids, bool[] memory _buyersHaveEnoughFunds)\n    {\n        uint256[] storage userPrimes = ownerToPrimes[_user];\n        \n        _primes = new uint256[](userPrimes.length);\n        _buyOrderIndices = new uint256[](userPrimes.length);\n        _buyers = new address[](userPrimes.length);\n        _bids = new uint256[](userPrimes.length);\n        _buyersHaveEnoughFunds = new bool[](userPrimes.length);\n        \n        uint256 amountOfBuyOrdersFound = 0;\n\n        for (uint256 i=0; i<userPrimes.length; i++)\n        {\n            uint256 prime = userPrimes[i];\n            \n            bool found; uint256 buyOrderIndex; address buyer; uint256 bid;\n            (found, buyOrderIndex, buyer, bid) = findHighestBidBuyOrder(prime);\n            \n            if (found == true)\n            {\n                _primes[amountOfBuyOrdersFound] = prime;\n                _buyers[amountOfBuyOrdersFound] = buyer;\n                _buyOrderIndices[amountOfBuyOrdersFound] = buyOrderIndex;\n                _bids[amountOfBuyOrdersFound] = bid;\n                _buyersHaveEnoughFunds[amountOfBuyOrdersFound] = addressToEtherBalance[buyer] >= bid;\n                amountOfBuyOrdersFound++;\n            }\n        }\n        \n        assembly\n        {\n            // _primes.length = amountOfBuyOrdersFound;\n            mstore(_primes, amountOfBuyOrdersFound)\n            \n            // _buyOrderIndices.length = amountOfBuyOrdersFound;\n            mstore(_buyOrderIndices, amountOfBuyOrdersFound)\n            \n            // _buyers.length = amountOfBuyOrdersFound;\n            mstore(_buyers, amountOfBuyOrdersFound)\n            \n            // _bids.length = amountOfBuyOrdersFound;\n            mstore(_bids, amountOfBuyOrdersFound)\n            \n            // _buyersHaveEnoughFunds.length = amountOfBuyOrdersFound;\n            mstore(_buyersHaveEnoughFunds, amountOfBuyOrdersFound)\n        }\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    ////////////                                    ////////////\n    ////////////   Trading convenience functions    ////////////\n    ////////////                                    ////////////\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    \n    // These functions don't directly modify state variables.\n    // They only serve as a wrapper for other functions.\n    // They do not introduce new state transitions.\n    \n    /*function withdrawAllEther() external\n    {\n        withdrawEther(addressToEtherBalance[msg.sender]);\n    }*/\n    \n    /*function cancelBuyOrders(uint256[] calldata _primes, uint256[] calldata _buyOrderIndices) external\n    {\n        require(tryCancelBuyOrders(_primes, _buyOrderIndices) == _primes.length, \"cancelBuyOrders error: not all buy orders could be cancelled\");\n    }*/\n    \n    function tryCancelBuyOrdersAndWithdrawEther(uint256[] calldata _primes, uint256[] calldata _buyOrderIndices, uint256 _amountToWithdraw) external returns (uint256 _amountCancelled)\n    {\n        withdrawEther(_amountToWithdraw);\n        return tryCancelBuyOrders(_primes, _buyOrderIndices);\n    }\n}\n\ncontract EtherPrimeChat\n{\n    EtherPrime etherPrime;\n    \n    constructor(EtherPrime _etherPrime) public\n    {\n        etherPrime = _etherPrime;\n    }\n    \n    // Social\n    mapping(address => bytes32) public addressToUsername;\n    mapping(bytes32 => address) public usernameToAddress;\n    mapping(address => uint256) public addressToGasUsedTowardsChatMessage;\n    uint256 public constant GAS_PER_CHAT_MESSAGE = 1000000;\n    address[] public chatMessageSenders;\n    uint256[] public chatMessageReplyToIndices;\n    string[] public chatMessages;\n    \n    event UsernameSet(address user, bytes32 username);\n    event ChatMessageSent(address indexed sender, uint256 indexed index, uint256 indexed replyToIndex);\n    \n    function setUsername(bytes32 _username) external\n    {\n        require(_username[0] != 0x00);\n        \n        bool seen0x00 = false;\n        for (uint256 i=0; i<32; i++)\n        {\n            if (_username[i] == 0x00)\n            {\n                seen0x00 = true;\n            }\n            \n            // If there's a non-0x00 after an 0x00, this is not a valid string.\n            else if (seen0x00)\n            {\n                revert(\"setUsername error: invalid string; character present after null terminator\");\n            }\n        }\n        \n        require(usernameToAddress[_username] == address(0x0), \"setUsername error: that username already exists\");\n        \n        usernameToAddress[_username] = msg.sender;\n        addressToUsername[msg.sender] = _username;\n        \n        emit UsernameSet(msg.sender, _username);\n    }\n    \n    function amountOfChatMessages() external view returns (uint256)\n    {\n        return chatMessages.length;\n    }\n    \n    function getChatMessage(uint256 _index) external view returns (address _sender, string memory _message, uint256 _replyToIndex)\n    {\n        require(_index < chatMessages.length, \"getChatMessage error: index out of bounds\");\n        \n        _sender = chatMessageSenders[_index];\n        _message = chatMessages[_index];\n        _replyToIndex = chatMessageReplyToIndices[_replyToIndex];\n    }\n    \n    function sendChatMessage(string calldata _message, uint256 _replyToIndex) external\n    {\n        require(etherPrime.addressToGasSpent(msg.sender) - addressToGasUsedTowardsChatMessage[msg.sender] >= GAS_PER_CHAT_MESSAGE, \"sendChatMessage error: you need to spend more gas on compute() to send a chat message\");\n        require(_replyToIndex == ~uint256(0) || _replyToIndex < chatMessages.length, \"sendChatMessage error: invalid reply index\");\n        \n        addressToGasUsedTowardsChatMessage[msg.sender] += GAS_PER_CHAT_MESSAGE;\n        \n        emit ChatMessageSent(msg.sender, chatMessages.length, _replyToIndex);\n        \n        chatMessageReplyToIndices.push(_replyToIndex);\n        chatMessageSenders.push(msg.sender);\n        chatMessages.push(_message);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "6f6e455243373231526563656976656428616464726573732c616464726573732c75696e743235362c627974657329a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688"
}