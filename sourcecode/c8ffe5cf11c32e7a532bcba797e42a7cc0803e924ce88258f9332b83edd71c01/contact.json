{
  "address": "0x6f6deb5db0c4994a8283a01d6cfeeb27fc3bbe9c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SmartBillions Token",
  "contractName": "SmartBillions",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-09\n*/\n\npragma solidity ^0.4.17;\n\nlibrary SafeMath {\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  address public owner; //owner\n  address public animator; //animator\n  function balanceOf(address who) constant public returns (uint);\n  function transfer(address to, uint value) public;\n  event Transfer(address indexed from, address indexed to, uint value);\n  function commitDividend(address who) internal; // pays remaining dividend\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant public returns (uint);\n  function transferFrom(address from, address to, uint value) public;\n  function approve(address spender, uint value) public;\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint;\n  mapping(address => uint) balances;\n\n  modifier onlyPayloadSize(uint size) {\n     assert(msg.data.length >= size + 4);\n     _;\n  }\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n    commitDividend(msg.sender);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    if(_to == address(this)) {\n        commitDividend(owner);\n        balances[owner] = balances[owner].add(_value);\n        Transfer(msg.sender, owner, _value);\n    }\n    else {\n        commitDividend(_to);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n    }\n  }\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant public returns (uint balance) {\n    return balances[_owner];\n  }\n}\n\ncontract StandardToken is BasicToken, ERC20 {\n  mapping (address => mapping (address => uint)) allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amount of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n    commitDividend(_from);\n    commitDividend(_to);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(_from, _to, _value);\n  }\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint _value) public {\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant public returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title SmartBillions contract\n */\ncontract SmartBillions is StandardToken {\n\n    // metadata\n    string public constant name = \"SmartBillions Token\";\n    string public constant symbol = \"Smart\"; // changed due to conflicts\n    uint public constant decimals = 0;\n\n    // contract state\n    struct Wallet {\n        uint208 balance; // current balance of user\n    \tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\n    \tuint32 nextWithdrawTime; // next withdrawal possible after this timestamp\n    }\n    mapping (address => Wallet) wallets;\n    struct Bet {\n        uint192 value; // bet size\n        uint32 betHash; // selected numbers\n        uint32 blockNum; // blocknumber when lottery runs\n    }\n    mapping (address => Bet) bets;\n\n    uint public walletBalance = 0; // sum of funds in wallets\n\n    // investment parameters\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\n    uint public investBalance = 0; // funding from investors\n    uint public investBalanceGot = 0; // funding collected\n    uint public investBalanceMax = 200000 ether; // maximum funding\n    uint public dividendPeriod = 1;\n    uint[] public dividends; // dividens collected per period, growing array\n\n    // betting parameters\n    uint public maxWin = 0; // maximum prize won\n    uint public hashFirst = 0; // start time of building hashes database\n    uint public hashLast = 0; // last saved block of hashes\n    uint public hashNext = 0; // next available bet block.number\n    uint public hashBetSum = 0; // used bet volume of next block\n    uint public hashBetMax = 5 ether; // maximum bet size per block\n    uint[] public hashes; // space for storing lottery results\n\n    // constants\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\n    uint public coldStoreLast = 0 ; // timestamp of last cold store transfer\n\n    // events\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\n    event LogLoss(address indexed player, uint bethash, uint hash);\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\n    event LogRecordWin(address indexed player, uint amount);\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\n    event LogDividend(address indexed investor, uint amount, uint period);\n\n    modifier onlyOwner() {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyAnimator() {\n        assert(msg.sender == animator);\n        _;\n    }\n\n    // constructor\n    function SmartBillions() public {\n        owner = msg.sender;\n        animator = msg.sender;\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\n        dividends.push(0); // not used\n        dividends.push(0); // current dividend\n    }\n\n/* getters */\n    \n    /**\n     * @dev Show length of allocated swap space\n     */\n    function hashesLength() constant external returns (uint) {\n        return uint(hashes.length);\n    }\n    \n    /**\n     * @dev Show balance of wallet\n     * @param _owner The address of the account.\n     */\n    function walletBalanceOf(address _owner) constant external returns (uint) {\n        return uint(wallets[_owner].balance);\n    }\n    \n    /**\n     * @dev Show last dividend period processed\n     * @param _owner The address of the account.\n     */\n    function walletPeriodOf(address _owner) constant external returns (uint) {\n        return uint(wallets[_owner].lastDividendPeriod);\n    }\n    \n    /**\n     * @dev Show block number when withdraw can continue\n     * @param _owner The address of the account.\n     */\n    function walletTimeOf(address _owner) constant external returns (uint) {\n        return uint(wallets[_owner].nextWithdrawTime);\n    }\n    \n    /**\n     * @dev Show bet size.\n     * @param _owner The address of the player.\n     */\n    function betValueOf(address _owner) constant external returns (uint) {\n        return uint(bets[_owner].value);\n    }\n    \n    /**\n     * @dev Show block number of lottery run for the bet.\n     * @param _owner The address of the player.\n     */\n    function betHashOf(address _owner) constant external returns (uint) {\n        return uint(bets[_owner].betHash);\n    }\n    \n    /**\n     * @dev Show block number of lottery run for the bet.\n     * @param _owner The address of the player.\n     */\n    function betBlockNumberOf(address _owner) constant external returns (uint) {\n        return uint(bets[_owner].blockNum);\n    }\n    \n    /**\n     * @dev Print number of block till next expected dividend payment\n     */\n    function dividendsBlocks() constant external returns (uint) {\n        if(investStart > 0) {\n            return(0);\n        }\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\n        if(period > dividendPeriod) {\n            return(0);\n        }\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\n    }\n\n/* administrative functions */\n\n    /**\n     * @dev Change owner.\n     * @param _who The address of new owner.\n     */\n    function changeOwner(address _who) external onlyOwner {\n        assert(_who != address(0));\n        commitDividend(msg.sender);\n        commitDividend(_who);\n        owner = _who;\n    }\n\n    /**\n     * @dev Change animator.\n     * @param _who The address of new animator.\n     */\n    function changeAnimator(address _who) external onlyAnimator {\n        assert(_who != address(0));\n        commitDividend(msg.sender);\n        commitDividend(_who);\n        animator = _who;\n    }\n\n    /**\n     * @dev Set ICO Start block.\n     * @param _when The block number of the ICO.\n     */\n    function setInvestStart(uint _when) external onlyOwner {\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\n        investStart = _when;\n    }\n\n    /**\n     * @dev Set maximum bet size per block\n     * @param _maxsum The maximum bet size in wei.\n     */\n    function setBetMax(uint _maxsum) external onlyOwner {\n        hashBetMax = _maxsum;\n    }\n\n    /**\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\n     */\n    function resetBet() external onlyOwner {\n        hashNext = block.number + 3;\n        hashBetSum = 0;\n    }\n\n    /**\n     * @dev Move funds to cold storage\n     * @dev investBalance and walletBalance is protected from withdraw by owner\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weekly\n     * @param _amount The amount of wei to move to cold storage\n     */\n    function coldStore(uint _amount) external onlyOwner {\n        houseKeeping();\n        require(_amount > 0 && this.balance >= (investBalance * 9 / 10) + walletBalance + _amount);\n        if(investBalance >= investBalanceGot / 2){ // additional jackpot protection\n            require((_amount <= this.balance / 400) && coldStoreLast + 60 * 60 * 24 * 7 <= block.timestamp);\n        }\n        msg.sender.transfer(_amount);\n        coldStoreLast = block.timestamp;\n    }\n\n    /**\n     * @dev Move funds to contract jackpot\n     */\n    function hotStore() payable external {\n        walletBalance += msg.value;\n        wallets[msg.sender].balance += uint208(msg.value);\n        houseKeeping();\n    }\n\n/* housekeeping functions */\n\n    /**\n     * @dev Update accounting\n     */\n    function houseKeeping() public {\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\n            investStart = 0; // start dividend payments\n        }\n        else {\n            if(hashFirst > 0){\n\t\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\n                if(period > dividends.length - 2) {\n                    dividends.push(0);\n                }\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\n                    dividendPeriod++;\n                }\n            }\n        }\n    }\n\n/* payments */\n\n    /**\n     * @dev Pay balance from wallet\n     */\n    function payWallet() public {\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawTime <= block.timestamp){\n            uint balance = wallets[msg.sender].balance;\n            wallets[msg.sender].balance = 0;\n            walletBalance -= balance;\n            pay(balance);\n        }\n    }\n\n    function pay(uint _amount) private {\n        uint maxpay = this.balance / 2;\n        if(maxpay >= _amount) {\n            msg.sender.transfer(_amount);\n            if(_amount > 1 finney) {\n                houseKeeping();\n            }\n        }\n        else {\n            uint keepbalance = _amount - maxpay;\n            walletBalance += keepbalance;\n            wallets[msg.sender].balance += uint208(keepbalance);\n            wallets[msg.sender].nextWithdrawTime = uint32(block.timestamp + 60 * 60 * 24 * 30); // wait 1 month for more funds\n            msg.sender.transfer(maxpay);\n        }\n    }\n\n/* investment functions */\n\n    /**\n     * @dev Buy tokens\n     */\n    function investDirect() payable external {\n        invest(owner);\n    }\n\n    /**\n     * @dev Buy tokens with affiliate partner\n     * @param _partner Affiliate partner\n     */\n    function invest(address _partner) payable public {\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\n        uint investing = msg.value;\n        if(investing > investBalanceMax - investBalance) {\n            investing = investBalanceMax - investBalance;\n            investBalance = investBalanceMax;\n            investBalanceGot = investBalanceMax;\n            investStart = 0; // close investment round\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\n        }\n        else{\n            investBalance += investing;\n            investBalanceGot += investing;\n        }\n        if(_partner == address(0) || _partner == owner){\n            walletBalance += investing / 10;\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\n        else{\n            walletBalance += (investing * 5 / 100) * 2;\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\n        uint senderBalance = investing / 10**15;\n        uint ownerBalance = investing * 16 / 10**17  ;\n        uint animatorBalance = investing * 10 / 10**17  ;\n        balances[msg.sender] += senderBalance;\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\n        Transfer(address(0),msg.sender,senderBalance); // for etherscan\n        Transfer(address(0),owner,ownerBalance); // for etherscan\n        Transfer(address(0),animator,animatorBalance); // for etherscan\n        LogInvestment(msg.sender,_partner,investing);\n    }\n\n    /**\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\n     */\n    function disinvest() external {\n        require(investStart == 0);\n        commitDividend(msg.sender);\n        uint initialInvestment = balances[msg.sender] * 10**15;\n        Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\n        investBalance -= initialInvestment;\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\n        payWallet();\n    }\n\n    /**\n     * @dev Pay unpaid dividends\n     */\n    function payDividends() external {\n        require(investStart == 0);\n        commitDividend(msg.sender);\n        payWallet();\n    }\n\n    /**\n     * @dev Commit remaining dividends before transfer of tokens\n     */\n    function commitDividend(address _who) internal {\n        uint last = wallets[_who].lastDividendPeriod;\n        if((balances[_who]==0) || (last==0)){\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\n            return;\n        }\n        if(last==dividendPeriod) {\n            return;\n        }\n        uint share = balances[_who] * 0xffffffff / totalSupply;\n        uint balance = 0;\n        for(;last<dividendPeriod;last++) {\n            balance += share * dividends[last];\n        }\n        balance = (balance / 0xffffffff);\n        walletBalance += balance;\n        wallets[_who].balance += uint208(balance);\n        wallets[_who].lastDividendPeriod = uint16(last);\n        LogDividend(_who,balance,last);\n    }\n\n/* lottery functions */\n\n    function betPrize(Bet _player, uint24 _hash) constant private returns (uint) { // house fee 13.85%\n        uint24 bethash = uint24(_player.betHash);\n        uint24 hit = bethash ^ _hash;\n        uint24 matches =\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\n        if(matches == 6){\n            return(uint(_player.value) * 7000000);\n        }\n        if(matches == 5){\n            return(uint(_player.value) * 20000);\n        }\n        if(matches == 4){\n            return(uint(_player.value) * 500);\n        }\n        if(matches == 3){\n            return(uint(_player.value) * 25);\n        }\n        if(matches == 2){\n            return(uint(_player.value) * 3);\n        }\n        return(0);\n    }\n    \n    /**\n     * @dev Check if won in lottery\n     */\n    function betOf(address _who) constant external returns (uint)  {\n        Bet memory player = bets[_who];\n        if( (player.value==0) ||\n            (player.blockNum<=1) ||\n            (block.number<player.blockNum) ||\n            (block.number>=player.blockNum + (10 * hashesSize))){\n            return(0);\n        }\n        if(block.number<player.blockNum+256){\n            return(betPrize(player,uint24(block.blockhash(player.blockNum))));\n        }\n        if(hashFirst>0){\n            uint32 hash = getHash(player.blockNum);\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\n                return(uint(player.value));\n            }\n            else{\n                return(betPrize(player,uint24(hash)));\n            }\n\t}\n        return(0);\n    }\n\n    /**\n     * @dev Check if won in lottery\n     */\n    function won() public {\n        Bet memory player = bets[msg.sender];\n        if(player.blockNum==0){ // create a new player\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\n            return;\n        }\n        if((player.value==0) || (player.blockNum==1)){\n            payWallet();\n            return;\n        }\n        require(block.number>player.blockNum); // if there is an active bet, throw()\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\n            LogLate(msg.sender,player.blockNum,block.number);\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\n            return;\n        }\n        uint prize = 0;\n        uint32 hash = 0;\n        if(block.number<player.blockNum+256){\n            hash = uint24(block.blockhash(player.blockNum));\n            prize = betPrize(player,uint24(hash));\n        }\n        else {\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\n                hash = getHash(player.blockNum);\n                if(hash == 0x1000000) { // load hash failed :-(\n                    //prize = uint(player.value); no refunds anymore\n                    LogLate(msg.sender,player.blockNum,block.number);\n                    bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\n                    return();\n                }\n                else{\n                    prize = betPrize(player,uint24(hash));\n                }\n\t    }\n            else{\n                LogLate(msg.sender,player.blockNum,block.number);\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\n                return();\n            }\n        }\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\n        if(prize>0) {\n            LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\n            if(prize > maxWin){\n                maxWin = prize;\n                LogRecordWin(msg.sender,prize);\n            }\n            pay(prize);\n        }\n        else{\n            LogLoss(msg.sender,uint(player.betHash),uint(hash));\n        }\n    }\n\n    /**\n     * @dev Send ether to buy tokens during ICO\n     * @dev or send less than 1 ether to contract to play\n     * @dev or send 0 to collect prize\n     */\n    function () payable external {\n        if(msg.value > 0){\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\n                invest(owner);\n            }\n            else{ // if not ICO running payment to contract is treated as play\n                play();\n            }\n            return;\n        }\n        //check for dividends and other assets\n        if(investStart == 0 && balances[msg.sender]>0){\n            commitDividend(msg.sender);}\n        won(); // will run payWallet() if nothing else available\n    }\n\n    /**\n     * @dev Play in lottery\n     */\n    function play() payable public returns (uint) {\n        return playSystem(uint(keccak256(msg.sender,block.number)), address(0));\n    }\n\n    /**\n     * @dev Play in lottery with random numbers\n     * @param _partner Affiliate partner\n     */\n    function playRandom(address _partner) payable public returns (uint) {\n        return playSystem(uint(keccak256(msg.sender,block.number)), _partner);\n    }\n\n    /**\n     * @dev Play in lottery with own numbers\n     * @param _partner Affiliate partner\n     */\n    function playSystem(uint _hash, address _partner) payable public returns (uint) {\n        won(); // check if player did not win \n        uint24 bethash = uint24(_hash);\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\n        if(msg.value > 0){\n            if(investStart==0) { // dividends only after investment finished\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\n            }\n            if(_partner != address(0)) {\n                uint fee = msg.value / 100;\n                walletBalance += fee;\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\n            }\n            if(hashNext < block.number + 3) {\n                hashNext = block.number + 3;\n                hashBetSum = msg.value;\n            }\n            else{\n                if(hashBetSum > hashBetMax) {\n                    hashNext++;\n                    hashBetSum = msg.value;\n                }\n                else{\n                    hashBetSum += msg.value;\n                }\n            }\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\n            LogBet(msg.sender,uint(bethash),hashNext,msg.value);\n        }\n        putHashes(25); // players help collecing data, now much more than in last contract\n        return(hashNext);\n    }\n\n/* database functions */\n\n    /**\n     * @dev Create hash data swap space\n     * @param _sadd Number of hashes to add (<=256)\n     */\n    function addHashes(uint _sadd) public returns (uint) {\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\n        uint n = hashes.length;\n        if(n + _sadd > hashesSize){\n            hashes.length = hashesSize;\n        }\n        else{\n            hashes.length += _sadd;\n        }\n        for(;n<hashes.length;n++){ // make sure to burn gas\n            hashes[n] = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        }\n        if(hashes.length>=hashesSize) { // assume block.number > 10\n            hashFirst = block.number - ( block.number % 10);\n            hashLast = hashFirst;\n        }\n        return(hashes.length);\n    }\n\n    /**\n     * @dev Create hash data swap space, add 128 hashes\n     */\n    function addHashes128() external returns (uint) {\n        return(addHashes(128));\n    }\n\n    function calcHashes(uint32 _lastb, uint32 _delta) constant private returns (uint) {\n        // assert(!(_lastb % 10)); this is required\n        return( ( uint(block.blockhash(_lastb  )) & 0xFFFFFF )\n            | ( ( uint(block.blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\n            | ( ( uint(block.blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\n            | ( ( uint(block.blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\n            | ( ( uint(block.blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\n            | ( ( uint(block.blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\n            | ( ( uint(block.blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\n            | ( ( uint(block.blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\n            | ( ( uint(block.blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\n            | ( ( uint(block.blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\n            | ( ( uint(_delta) / hashesSize) << 240)); \n    }\n\n    function getHash(uint _block) constant private returns (uint32) {\n        uint delta = (_block - hashFirst) / 10;\n        uint hash = hashes[delta % hashesSize];\n        if(delta / hashesSize != hash >> 240) {\n            return(0x1000000); // load failed, incorrect data in hashes\n        }\n        uint slotp = (_block - hashFirst) % 10; \n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\n    }\n    \n    /**\n     * @dev Fill hash data\n     */\n    function putHash() public returns (bool) {\n        uint lastb = hashLast;\n        if(lastb == 0 || block.number <= lastb + 10) {\n            return(false);\n        }\n        if(lastb < block.number - 245) {\n            uint num = block.number - 245;\n            lastb = num - (num % 10);\n        }\n        uint delta = (lastb - hashFirst) / 10;\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\n        hashLast = lastb + 10;\n        return(true);\n    }\n\n    /**\n     * @dev Fill hash data many times\n     * @param _num Number of iterations\n     */\n    function putHashes(uint _num) public {\n        uint n=0;\n        for(;n<_num;n++){\n            if(!putHash()){\n                return;\n            }\n        }\n    }\n    \n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxsum\",\"type\":\"uint256\"}],\"name\":\"setBetMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"won\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"putHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashesSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sadd\",\"type\":\"uint256\"}],\"name\":\"addHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betValueOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeAnimator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"putHashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"betOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashFirst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investBalanceGot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashNext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betBlockNumberOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betHashOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addHashes128\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashLast\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hotStore\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashBetMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investDirect\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investBalanceMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"coldStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldStoreLast\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"houseKeeping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashBetSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletPeriodOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"setInvestStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betsize\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"LogLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"LogWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRecordWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogLate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"LogDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600755600160085560006009556000600a55692a5a058fc295ed000000600b556001600c556000600e556000600f55600060105560006011556000601255674563918244f40000601355600060155534156200006157600080fd5b60018054600160a060020a03338116600160a060020a0319928316811780855560028054909416909117909255600c5491166000908152600560205260409020805461ffff9092167a0100000000000000000000000000000000000000000000000000000260d060020a61ffff0219909216919091179055600d805490918101620000ed83826200011f565b506000918252602082200155600d8054600181016200010d83826200011f565b5060009182526020822001556200016f565b8154818355818115116200014657600083815260209020620001469181019083016200014b565b505050565b6200016c91905b8082111562000168576000815560010162000152565b5090565b90565b6128fc806200017f6000396000f3006060604052361561028d5763ffffffff60e060020a60003504166303f9c793811461030857806306fdde031461031c5780630751076d146103a6578063095ea7b3146103bc57806312c8052f146103de57806313e4b51f146103e957806316d190e31461041057806318160ddd1461043557806323b872dd146104485780632406e9fa146104705780632669957614610484578063313ce5671461049b57806331c2b6e6146104ae57806337c43088146104dd578063380f3087146104f05780633de8d340146105065780633e43b6521461051957806340c73d1714610538578063413e90e7146105575780634288d7591461056d57806343146f361461058c578063501895ae1461059f57806366ce3bd2146105b55780636b486818146105d45780636cc7d828146105e757806370a08231146105fa57806370ccd928146106195780637227c7ce1461062c578063814b3fe01461063f5780638da5cb5b146106555780638eecddcf14610668578063904d22481461068757806393e84cd9146106a657806395d89b41146106ae5780639ce962ca146106c1578063a367d99a146106d4578063a6f9dae1146106e7578063a9059cbb14610706578063b3470e9714610728578063bc8517181461073b578063be1eefbf1461074e578063bfba902914610756578063c27509cf14610769578063c3c59aa914610771578063c416436514610790578063cd0a314b146107a3578063cd88333e146107b6578063d6d25008146107cc578063d9fa9335146107df578063dd62ed3e146107f2578063de46907114610817578063de88a3421461082a578063df12b94e1461083d578063df1ead8214610850578063e4cc98a514610863578063e73cc2eb14610876578063e76ece0114610895575b60003411156102ca57600160085411156102bb576001546102b690600160a060020a03166108ab565b6102c5565b6102c3610be8565b505b610306565b6008541580156102f05750600160a060020a033316600090815260036020526040812054115b156102fe576102fe33610c2d565b610306610df0565b005b610306600160a060020a03600435166108ab565b341561032757600080fd5b61032f61145e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561036b578082015183820152602001610353565b50505050905090810190601f1680156103985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103b157600080fd5b610306600435611495565b34156103c757600080fd5b610306600160a060020a03600435166024356114b2565b34156102fe57600080fd5b34156103f457600080fd5b6103fc611550565b604051901515815260200160405180910390f35b341561041b57600080fd5b6104236115d5565b60405190815260200160405180910390f35b341561044057600080fd5b6104236115db565b341561045357600080fd5b610306600160a060020a03600435811690602435166044356115e1565b610423600160a060020a0360043516611703565b610423600435600160a060020a0360243516611747565b34156104a657600080fd5b610423611975565b34156104b957600080fd5b6104c161197a565b604051600160a060020a03909116815260200160405180910390f35b34156104e857600080fd5b610423611989565b34156104fb57600080fd5b61042360043561198f565b341561051157600080fd5b610423611a49565b341561052457600080fd5b610423600160a060020a0360043516611a97565b341561054357600080fd5b610306600160a060020a0360043516611abb565b341561056257600080fd5b610306600435611b26565b341561057857600080fd5b610423600160a060020a0360043516611b50565b341561059757600080fd5b610306611c9d565b34156105aa57600080fd5b610423600435611cc3565b34156105c057600080fd5b610423600160a060020a0360043516611ce2565b34156105df57600080fd5b610423611d06565b34156105f257600080fd5b610423611d0c565b341561060557600080fd5b610423600160a060020a0360043516611d12565b341561062457600080fd5b610423611d2d565b341561063757600080fd5b610423611d33565b341561064a57600080fd5b610423600435611d39565b341561066057600080fd5b6104c1611d47565b341561067357600080fd5b610423600160a060020a0360043516611d56565b341561069257600080fd5b610423600160a060020a0360043516611d7e565b610423610be8565b34156106b957600080fd5b61032f611da6565b34156106cc57600080fd5b610306611ddd565b34156106df57600080fd5b610423611e83565b34156106f257600080fd5b610306600160a060020a0360043516611e89565b341561071157600080fd5b610306600160a060020a0360043516602435611ef4565b341561073357600080fd5b61042361206d565b341561074657600080fd5b610423612079565b61030661207f565b341561076157600080fd5b6104236120ce565b6103066120d4565b341561077c57600080fd5b610423600160a060020a03600435166120e9565b341561079b57600080fd5b610423612111565b34156107ae57600080fd5b610423612117565b34156107c157600080fd5b61030660043561211d565b34156107d757600080fd5b6104236121f2565b34156107ea57600080fd5b6103066121f8565b34156107fd57600080fd5b610423600160a060020a03600435811690602435166122a0565b341561082257600080fd5b6104236122cb565b341561083557600080fd5b6103066122d1565b341561084857600080fd5b6104236122ef565b341561085b57600080fd5b6103066122f5565b341561086e57600080fd5b6104236123c2565b341561088157600080fd5b610423600160a060020a03600435166123c8565b34156108a057600080fd5b6103066004356123ee565b60008060008060016008541180156108c95750600854620140000143105b80156108d85750600b54600954105b15156108e357600080fd5b349350600954600b54038411156109545760098054600b5491829055600a829055600060085590039350600160a060020a0333166108fc61092a348763ffffffff61243516565b9081150290604051600060405180830381858888f19350505050151561094f57600080fd5b610965565b6009805485019055600a8054850190555b600160a060020a03851615806109885750600154600160a060020a038681169116145b156109dc5760078054600a8604908101909155600154600160a060020a031660009081526005602052604090208054600160d060020a03198116600160d060020a0391821690930116919091179055610a4e565b60078054606460058781029190910460028102909201909255600154600160a060020a03908116600090815260209390935260408084208054600160d060020a0319808216600160d060020a039283168701831617909255928a16855293208054938416938216909201169190911790555b600c54600160a060020a0333166000908152600560205260409020805461ffff90921660d060020a027bffff00000000000000000000000000000000000000000000000000001990921691909117905566038d7ea4c680008404925067016345785d8a00006010850204915067016345785d8a0000600a8502600160a060020a0333811660008181526003602052604080822080548a019055600154841682528082208054890190556002549093168152828120805495909404948501909355825486880185010183559293506000805160206128b18339815191529086905190815260200160405180910390a3600154600160a060020a031660006000805160206128b18339815191528460405190815260200160405180910390a3600254600160a060020a031660006000805160206128b18339815191528360405190815260200160405180910390a384600160a060020a031633600160a060020a03167f36a013c86c271c703c54dee591bc768e347954a0a9a1937dd17f5a29e9a8e6458660405190815260200160405180910390a35050505050565b6000610c273343604051600160a060020a03929092166c0100000000000000000000000002825260148201526034016040519081900390206000611747565b90505b90565b600160a060020a038116600090815260056020908152604080832054600390925282205460d060020a90910461ffff16919081901580610c6b575082155b15610cc557600c54600160a060020a0385166000908152600560205260409020805461ffff90921660d060020a027bffff000000000000000000000000000000000000000000000000000019909216919091179055610dea565b600c54831415610cd457610dea565b60008054600160a060020a0386168252600360205260409091205463ffffffff02811515610cfe57fe5b049150600090505b600c54831015610d3857600d805484908110610d1e57fe5b600091825260209091200154600190930192820201610d06565b6007805463ffffffff9092049182019055600160a060020a038416600081815260056020526040908190208054600160d060020a03198116600160d060020a039182168601909116177bffff0000000000000000000000000000000000000000000000000000191660d060020a61ffff8816021790557fe1e87f40e4de2a6b68365d854f85940aad44d84933d399007702c6d340da445f90839086905191825260208201526040908101905180910390a25b50505050565b610df8612857565b600160a060020a03331660009081526006602052604080822082916060905190810160409081529154600160c060020a038116825263ffffffff60c060020a82048116602084015260e060020a9091041691810191825293505163ffffffff161515610efe576060604051908101604090815260008083526020808401829052600183850152600160a060020a0333168252600690522081518154600160c060020a031916600160c060020a03919091161781556020820151815463ffffffff9190911660c060020a0260c060020a63ffffffff02199091161781556040820151815463ffffffff9190911660e060020a02600160e060020a0390911617905550611459565b8251600160c060020a03161580610f1f5750826040015163ffffffff166001145b15610f3157610f2c611ddd565b611459565b826040015163ffffffff164311610f4757600080fd5b4362028000604085015163ffffffff16011161104c5733600160a060020a03167f770d64c654906ebab085526dd881064f61f0e5990caa94c94167eb29bc4645c684604001514360405163ffffffff909216825260208201526040908101905180910390a26060604051908101604090815260008083526020808401829052600183850152600160a060020a0333168252600690522081518154600160c060020a031916600160c060020a03919091161781556020820151815463ffffffff9190911660c060020a0260c060020a63ffffffff02199091161781556040820151815463ffffffff9190911660e060020a02600160e060020a0390911617905550611459565b50600090508060408301516101000163ffffffff1643101561109057826040015163ffffffff16406001900462ffffff1690506110898382612447565b91506112aa565b6000600f5411156111bb576110ae836040015163ffffffff1661259c565b90508063ffffffff16630100000014156111b15733600160a060020a03167f770d64c654906ebab085526dd881064f61f0e5990caa94c94167eb29bc4645c684604001514360405163ffffffff909216825260208201526040908101905180910390a26060604051908101604090815260008083526020808401829052600183850152600160a060020a0333168252600690522081518154600160c060020a031916600160c060020a03919091161781556020820151815463ffffffff9190911660c060020a0260c060020a63ffffffff02199091161781556040820151815463ffffffff9190911660e060020a02600160e060020a0390911617905550611459565b6110898382612447565b33600160a060020a03167f770d64c654906ebab085526dd881064f61f0e5990caa94c94167eb29bc4645c684604001514360405163ffffffff909216825260208201526040908101905180910390a26060604051908101604090815260008083526020808401829052600183850152600160a060020a0333168252600690522081518154600160c060020a031916600160c060020a03919091161781556020820151815463ffffffff9190911660c060020a0260c060020a63ffffffff02199091161781556040820151815463ffffffff9190911660e060020a02600160e060020a0390911617905550611459565b6060604051908101604090815260008083526020808401829052600183850152600160a060020a0333168252600690522081518154600160c060020a031916600160c060020a03919091161781556020820151815463ffffffff9190911660c060020a0260c060020a63ffffffff02199091161781556040820151815463ffffffff9190911660e060020a02600160e060020a039091161790555060008211156114045733600160a060020a03167e362509948ea59afac5c6fa93fea5327b624bc705a6574f4e9f26e9d8bd7ccc846020015163ffffffff168363ffffffff168560405180848152602001838152602001828152602001935050505060405180910390a2600e548211156113fb57600e829055600160a060020a0333167f955214d16f858518f04c701d01a6e2f5668548b6be3c6f2f0f8981f77f2cfc068360405190815260200160405180910390a25b610f2c82612634565b33600160a060020a03167f7375ed8230669ea9d64a9db629d7ce9501779604a67c95c0111377cf09f5b9b9846020015163ffffffff168363ffffffff1660405191825260208201526040908101905180910390a25b505050565b60408051908101604052601381527f536d61727442696c6c696f6e7320546f6b656e00000000000000000000000000602082015281565b60015433600160a060020a039081169116146114ad57fe5b601355565b80158015906114e55750600160a060020a0333811660009081526004602090815260408083209386168352929052205415155b156114ec57fe5b600160a060020a03338116600081815260046020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b6010546000908180821580611568575082600a014311155b1561157657600093506115cf565b60f543038310156115915760f41943019150600a8206820392505b50600f54600a908303046115a5838261271e565b6014805461400084069081106115b757fe5b600091825260209091200155600a8301601055600193505b50505090565b600e5481565b60005481565b6000606060643610156115f057fe5b600160a060020a0380861660009081526004602090815260408083203390941683529290522054915061162285610c2d565b61162b84610c2d565b61163b828463ffffffff61243516565b600160a060020a038087166000818152600460209081526040808320339095168352938152838220949094559081526003909252902054611682908463ffffffff61243516565b600160a060020a0380871660009081526003602052604080822093909355908616815220546116b7908463ffffffff61284116565b600160a060020a03808616600081815260036020526040908190209390935591908716906000805160206128b18339815191529086905190815260200160405180910390a35050505050565b60006117413343604051600160a060020a03929092166c01000000000000000000000000028252601482015260340160405190819003902083611747565b92915050565b6000806000611754610df0565b849150670de0b6b3a76400003411158015611770575060135434105b151561177b57600080fd5b600034111561195f5760085415156117b55760143404600d600c548154811015156117a257fe5b6000918252602090912001805490910190555b600160a060020a0384161561180b57506007805460643404908101909155600160a060020a03841660009081526005602052604090208054600160d060020a03808216840116600160d060020a03199091161790555b43600301601154101561182857600343016011553460125561184f565b6013546012541115611846576011805460010190553460125561184f565b60128054340190555b60606040519081016040908152600160c060020a033416825262ffffff841660208084019190915260115463ffffffff1682840152600160a060020a033316600090815260069091522081518154600160c060020a031916600160c060020a03919091161781556020820151815463ffffffff9190911660c060020a0260c060020a63ffffffff02199091161781556040820151815463ffffffff9190911660e060020a02600160e060020a0390911617905550601154600160a060020a033316907f063f4540040cf99a22f577ef321c170763020e6277e47275ed9b3d17ec14e13d9062ffffff8516903460405180848152602001838152602001828152602001935050505060405180910390a25b6119696019611b26565b50506011549392505050565b600081565b600254600160a060020a031681565b61400081565b600080600f5460001480156119a45750600083115b80156119b257506140008311155b15156119bd57600080fd5b5060145461400083820111156119e1576140006119db601482612877565b506119f4565b601480548401906119f29082612877565b505b601454811015611a2457600019601482815481101515611a1057fe5b6000918252602090912001556001016119f4565b6014546140009010611a3f57600a43064303600f8190556010555b5050601454919050565b60008060006008541115611a605760009150611a93565b600f5462028000904303049050600c54811115611a805760009150611a93565b600f546202800090430306620280000391505b5090565b600160a060020a0316600090815260066020526040902054600160c060020a031690565b60025433600160a060020a03908116911614611ad357fe5b600160a060020a0381161515611ae557fe5b611aee33610c2d565b611af781610c2d565b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005b81811015611b4c57611b39611550565b1515611b4457611b4c565b600101611b29565b5050565b6000611b5a612857565b600160a060020a038316600090815260066020526040808220906060905190810160409081529154600160c060020a038116825263ffffffff60c060020a82048116602084015260e060020a909104169181019190915291508151600160c060020a03161580611bd557506001826040015163ffffffff1611155b80611be95750816040015163ffffffff1643105b80611c03575062028000604083015163ffffffff16014310155b15611c115760009250611c96565b81604001516101000163ffffffff16431015611c4357611c3c82836040015163ffffffff1640612447565b9250611c96565b6000600f541115611c9157611c61826040015163ffffffff1661259c565b90508063ffffffff1663010000001415611c87578151600160c060020a03169250611c96565b611c3c8282612447565b600092505b5050919050565b60015433600160a060020a03908116911614611cb557fe5b600343016011556000601255565b6014805482908110611cd157fe5b600091825260209091200154905081565b600160a060020a0316600090815260056020526040902054600160d060020a031690565b600f5481565b600a5481565b600160a060020a031660009081526003602052604090205490565b60145490565b60115481565b600d805482908110611cd157fe5b600154600160a060020a031681565b600160a060020a031660009081526006602052604090205460e060020a900463ffffffff1690565b600160a060020a031660009081526006602052604090205460c060020a900463ffffffff1690565b60408051908101604052600581527f536d617274000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260056020526040812054600160d060020a03168190118015611e34575033600160a060020a03166000908152600560205260409020544260e060020a90910463ffffffff1611155b15611e805750600160a060020a03331660009081526005602052604090208054600160d060020a0319811690915560078054600160d060020a03909216918290039055611e8081612634565b50565b60085481565b60015433600160a060020a03908116911614611ea157fe5b600160a060020a0381161515611eb357fe5b611ebc33610c2d565b611ec581610c2d565b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60406044361015611f0157fe5b611f0a33610c2d565b600160a060020a033316600090815260036020526040902054611f33908363ffffffff61243516565b600160a060020a03338116600090815260036020526040902091909155838116309091161415611ff057600154611f7290600160a060020a0316610c2d565b600154600160a060020a0316600090815260036020526040902054611f9d908363ffffffff61284116565b60018054600160a060020a039081166000908152600360205260409081902093909355905481169133909116906000805160206128b18339815191529085905190815260200160405180910390a3611459565b611ff983610c2d565b600160a060020a038316600090815260036020526040902054612022908363ffffffff61284116565b600160a060020a0380851660008181526003602052604090819020939093559133909116906000805160206128b18339815191529085905190815260200160405180910390a3505050565b6000610c27608061198f565b60105481565b600780543490810190915533600160a060020a031660009081526005602052604090208054600160d060020a03198116600160d060020a03918216909301169190911790556120cc6121f8565b565b60135481565b6001546120cc90600160a060020a03166108ab565b600160a060020a031660009081526005602052604090205460e060020a900463ffffffff1690565b600b5481565b60075481565b60015433600160a060020a0390811691161461213557fe5b61213d6121f8565b60008111801561216e575080600754600a60095460090281151561215d57fe5b04010130600160a060020a03163110155b151561217957600080fd5b600a54600290046009541015156121ba57610190600160a060020a033016310481111580156121af57504260155462093a800111155b15156121ba57600080fd5b600160a060020a03331681156108fc0282604051600060405180830381858888f1935050505015156121eb57600080fd5b5042601555565b60155481565b60006001600854118015612213575060085462014000014310155b15612222576000600855611e80565b6000600f541115611e8057600f5462028000904303600d5491900491506001190181111561226957600d80546001810161225c8382612877565b5060009182526020822001555b600c548111801561227a5750600854155b801561228f57506001600d8054905003600c54105b15611e8057600c8054600101905550565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60125481565b600854156122de57600080fd5b6122e733610c2d565b6120cc611ddd565b60095481565b6008546000901561230557600080fd5b61230e33610c2d565b50600160a060020a0333166000818152600360205260408082205466038d7ea4c68000810293916000805160206128b183398151915291905190815260200160405180910390a3600160a060020a033316600090815260036020526040812055600980548290038155600a90820233600160a060020a031660009081526005602052604090208054600160d060020a0319811693909204600160d060020a0392831601909116919091179055611e80611ddd565b600c5481565b600160a060020a031660009081526005602052604090205460d060020a900461ffff1690565b60015433600160a060020a0390811691161461240657fe5b600854600114801561241a57506000600f54115b801561242557508043105b151561243057600080fd5b600855565b60008282111561244157fe5b50900390565b60008060008085602001519250848318915062f0000082161561246b57600061246e565b60015b620f0000831615612480576000612483565b60015b61f000841615612494576000612497565b60015b610f008516156124a85760006124ab565b60015b60f08616156124bb5760006124be565b60015b600f8716156124ce5760006124d1565b60015b010101010160ff1690508062ffffff1660061415612500578551600160c060020a0316626acfc0029350612593565b8062ffffff1660051415612524578551600160c060020a0316614e20029350612593565b8062ffffff1660041415612548578551600160c060020a03166101f4029350612593565b8062ffffff166003141561256b578551600160c060020a03166019029350612593565b8062ffffff166002141561258e578551600160c060020a03166003029350612593565b600093505b50505092915050565b600080600080600a600f5486038115156125b257fe5b049250601461400084068154811015156125c857fe5b60009182526020909120015491507e01000000000000000000000000000000000000000000000000000000000000820461400084041461260e576301000000935061262c565b600f54600a90860306905080601802829060020a900462ffffff1693505b505050919050565b600230600160a060020a03163104600082821061269357600160a060020a03331683156108fc0284604051600060405180830381858888f19350505050151561267c57600080fd5b66038d7ea4c68000831115610f2c57610f2c6121f8565b506007805482840390810190915533600160a060020a0316600081815260056020526040908190208054600160d060020a03198116600160d060020a03918216860190911617600160e060020a031660e060020a4262278d000163ffffffff16021790556108fc84150290849051600060405180830381858888f19350505050151561145957600080fd5b600060f061400063ffffffff841663ffffffff8087164062ffffff908116630100000060018a0184164083160217660100000000000060028a810185164084169190910291909117690100000000000000000060038b01851640841602176c0100000000000000000000000060048b01851640841602176f0100000000000000000000000000000060058b0185164084160217720100000000000000000000000000000000000060068b0185164084160217750100000000000000000000000000000000000000000060078b018516408416021760c060020a60088b01851640841602177b0100000000000000000000000000000000000000000000000000000060098b01949094164092909216929092021793900a9190040217905092915050565b60008282018381101561285057fe5b9392505050565b606060405190810160409081526000808352602083018190529082015290565b81548183558181151161145957600083815260209020611459918101908301610c2a91905b80821115611a93576000815560010161289c5600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204ba6d7642977dbac7f5692df6ca567d139dd60cd35c059046bb665715a1b25130029"
}