{
  "address": "0xc8ffd394421e09cb48b620dda56168171ca35ab7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "etherecash",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-14\n*/\n\npragma solidity 0.4.18;\n\n/**\n * Contract \"Math\"\n * Purpose: Math operations with safety checks\n * Status : Complete\n * \n */\ncontract Math {\n\n    /**\n    * Multiplication with safety check\n    */\n    function Mul(uint a, uint b) pure internal returns (uint) {\n      uint c = a * b;\n      //check result should not be other wise until a=0\n      assert(a == 0 || c / a == b);\n      return c;\n    }\n\n    /**\n    * Division with safety check\n    */\n    function Div(uint a, uint b) pure internal returns (uint) {\n      //overflow check; b must not be 0\n      assert(b > 0);\n      uint c = a / b;\n      assert(a == b * c + a % b);\n      return c;\n    }\n\n    /**\n    * Subtraction with safety check\n    */\n    function Sub(uint a, uint b) pure internal returns (uint) {\n      //b must be greater that a as we need to store value in unsigned integer\n      assert(b <= a);\n      return a - b;\n    }\n\n    /**\n    * Addition with safety check\n    */\n    function Add(uint a, uint b) pure internal returns (uint) {\n      uint c = a + b;\n      //result must be greater as a or b can not be negative\n      assert(c>=a && c>=b);\n      return c;\n    }\n}\n\n  contract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address who)public view returns (uint256);\n  function allowance(address owner, address spender)public view returns (uint);\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\n  function approve(address spender, uint value)public returns (bool ok);\n  function transfer(address to, uint value)public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ncontract etherecash is ERC20,Math\n{\n   string public constant symbol = \"ECH\";\n     string public constant name = \"EtherEcash\";\n     uint8 public constant decimals = 18;\n     uint256 _totalSupply = Mul(360000000,(10 **18));\n     \n     // Owner of this contract\n     address public owner;\n     \n     address central_account;\n  \n     // Balances for each account\n     mapping(address => uint256) balances;\n  \n     // Owner of account approves the transfer of an amount to another account\n     mapping(address => mapping (address => uint256)) allowed;\n     \n     \n  \n     // Functions with this modifier can only be executed by the owner\n     modifier onlyOwner() {\n         require (msg.sender == owner);\n         _;\n     }\n      modifier onlycentralAccount {\n        require(msg.sender == central_account);\n        _;\n    }\n  \n     // Constructor\n     function etherecash() public {\n         owner = msg.sender;\n         balances[owner] = _totalSupply;\n     }\n  \n  function set_centralAccount(address central_Acccount) external onlyOwner\n    {\n        require(central_Acccount != 0x0);\n        central_account = central_Acccount;\n    }\n    \n    // what is the total supply of the ech tokens\n     function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = _totalSupply;\n     }\n  \n     // What is the balance of a particular account?\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\n         require( _to != 0x0);\n         require(balances[msg.sender] >= _amount \n             && _amount >= 0\n             && balances[_to] + _amount >= balances[_to]);\n           balances[msg.sender] = Sub(balances[msg.sender], _amount);\n             balances[_to] = Add(balances[_to], _amount);\n             Transfer(msg.sender, _to, _amount);\n             return true;\n        \n     }\n  \n     // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     )public returns (bool success) {\n        require(_to != 0x0); \n         require(balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount >= 0\n             && balances[_to] + _amount >= balances[_to]);\n        balances[_from] = Sub(balances[_from], _amount);\n             allowed[_from][msg.sender] = Sub(allowed[_from][msg.sender], _amount);\n             balances[_to] = Add(balances[_to], _amount);\n             Transfer(_from, _to, _amount);\n             return true;\n             }\n \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n   }\n   \n   event check1(uint taxtoken, uint totalToken);\n   event check2(uint comtoken, uint totalToken);\n   //  0.01 % = 1 and 100% = 10000\n    function zero_fee_transaction(address _from, address _to, uint256 _amount, uint tax) external onlycentralAccount returns(bool success) {\n        require(_to != 0x0 && tax >=0);\n\n      uint256 taxToken = Div((Mul(tax,  _amount)), 10000); \n      uint256 totalToken = Add(_amount, taxToken);\n      check1(taxToken,totalToken);\n       require (balances[_from] >= totalToken  &&\n            totalToken > 0 &&\n            balances[_to] + totalToken > balances[_to]);\n            balances[_from] = Sub(balances[_from], totalToken);\n            balances[_to] = Add(balances[_to], _amount);\n            balances[owner] = Add(balances[owner], taxToken);\n            Transfer(_from, _to, _amount);\n            Transfer(_from, owner, taxToken);\n            return true;\n           }\n\n   // .01 % = 1 and 100% = 10000\n    function com_fee_transaction(address _from,address _to,address _taxCollector, uint256 _amount, uint commision) external onlycentralAccount returns(bool success) {\n      require(_to != 0x0 && _taxCollector != 0x0 && commision >=0); \n      uint256 comToken = Div((Mul(commision,  _amount)), 10000); \n      uint256 totalToken = Sub(_amount, comToken);\n       check1(comToken,totalToken);\n      require (balances[_from] >= _amount &&\n            totalToken >=0 &&\n        balances[_to] + totalToken > balances[_to]);\n           balances[_from] = Sub(balances[_from], _amount);\n           balances[_to] = Add(balances[_to], totalToken);\n            balances[_taxCollector] = Add(balances[_taxCollector], comToken);\n            Transfer(_from, _to, totalToken);\n            Transfer(_from, _taxCollector, comToken);\n            return true;\n       }\n\n \n    \n\t//In case the ownership needs to be transferred\n\tfunction transferOwnership(address newOwner)public onlyOwner\n\t{\n\t    require( newOwner != 0x0);\n\t    balances[newOwner] = Add(balances[newOwner],balances[owner]);\n\t    balances[owner] = 0;\n\t    owner = newOwner;\n\t}\n\n}",
  "bytecode": "606060405261002d6315752a00670de0b6b3a76400006100e964010000000002611b96176401000000009004565b600055341561003b57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061011c565b6000808284029050600084148061010a575082848281151561010757fe5b04145b151561011257fe5b8091505092915050565b611c36806200012c6000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063095ea7b31461016357806318160ddd146101bd57806323b872dd146101e6578063313ce5671461025f57806370a082311461028e5780638da5cb5b146102db57806395d89b411461033057806397668720146103be578063a9059cbb146103f7578063bafc7fe914610451578063dd62ed3e146104d3578063e1f578461461053f578063f2fde38b146105e0575b600080fd5b34156100e057600080fd5b6100e8610619565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012857808201518184015260208101905061010d565b50505050905090810190601f1680156101555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016e57600080fd5b6101a3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610652565b604051808215151515815260200191505060405180910390f35b34156101c857600080fd5b6101d0610744565b6040518082815260200191505060405180910390f35b34156101f157600080fd5b610245600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061074d565b604051808215151515815260200191505060405180910390f35b341561026a57600080fd5b610272610b71565b604051808260ff1660ff16815260200191505060405180910390f35b341561029957600080fd5b6102c5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b76565b6040518082815260200191505060405180910390f35b34156102e657600080fd5b6102ee610bbf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561033b57600080fd5b610343610be5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610383578082015181840152602081019050610368565b50505050905090810190601f1680156103b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103c957600080fd5b6103f5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c1e565b005b341561040257600080fd5b610437600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ce4565b604051808215151515815260200191505060405180910390f35b341561045c57600080fd5b6104b9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610f79565b604051808215151515815260200191505060405180910390f35b34156104de57600080fd5b610529600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611436565b6040518082815260200191505060405180910390f35b341561054a57600080fd5b6105c6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080359060200190919050506114bd565b604051808215151515815260200191505060405180910390f35b34156105eb57600080fd5b610617600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611939565b005b6040805190810160405280600a81526020017f457468657245636173680000000000000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561077457600080fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561083f575081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561084c575060008210155b80156108d85750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110155b15156108e357600080fd5b61092c600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611b53565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109f5600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611b53565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610abe600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611b6c565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f454348000000000000000000000000000000000000000000000000000000000081525081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7a57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515610ca057600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610d0b57600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610d5b575060008210155b8015610de75750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110155b1515610df257600080fd5b610e3b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611b53565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ec7600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611b6c565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fda57600080fd5b60008673ffffffffffffffffffffffffffffffffffffffff1614158015611002575060008410155b151561100d57600080fd5b61102261101a8587611b96565b612710611bc9565b915061102e8583611b6c565b90507ffdf1aba0425ed5197faf61e2781179ca12c7b337c552583a07e082d6f0394e808282604051808381526020018281526020019250505060405180910390a180600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110be5750600081115b80156111495750600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b151561115457600080fd5b61119d600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611b53565b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611229600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611b6c565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112d760036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611b6c565b60036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600192505050949350505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561151e57600080fd5b60008773ffffffffffffffffffffffffffffffffffffffff161415801561155c575060008673ffffffffffffffffffffffffffffffffffffffff1614155b8015611569575060008410155b151561157457600080fd5b6115896115818587611b96565b612710611bc9565b91506115958583611b53565b90507ffdf1aba0425ed5197faf61e2781179ca12c7b337c552583a07e082d6f0394e808282604051808381526020018281526020019250505060405180910390a184600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611626575060008110155b80156116b15750600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15156116bc57600080fd5b611705600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611b53565b600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611791600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611b6c565b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061181d600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611b6c565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019250505095945050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561199557600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141515156119bb57600080fd5b611a65600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b6c565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060036000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515611b6157fe5b818303905092915050565b6000808284019050838110158015611b845750828110155b1515611b8c57fe5b8091505092915050565b60008082840290506000841480611bb75750828482811515611bb457fe5b04145b1515611bbf57fe5b8091505092915050565b600080600083111515611bd857fe5b8284811515611be357fe5b0490508284811515611bf157fe5b068184020184141515611c0057fe5b80915050929150505600a165627a7a723058205cfed90d7817430ef08f3d60bc440d4f25e711e4dea564ce0b5f797ebe2bf8490029"
}