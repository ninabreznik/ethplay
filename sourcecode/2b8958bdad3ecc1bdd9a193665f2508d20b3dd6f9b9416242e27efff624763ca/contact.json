{
  "address": "0x468b8809ec8e0ab8cd56050f820b028417218ef3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BlacklistStore",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\n// File: contracts/Ownable.sol\n\npragma solidity 0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address private _owner;\n    address private _pendingOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev The constructor sets the original owner of the contract to the sender account.\n     */\n    constructor() public {\n        setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == _pendingOwner, \"msg.sender should be onlyPendingOwner\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"msg.sender should be owner\");\n        _;\n    }\n\n    /**\n     * @dev Tells the address of the pendingOwner\n     * @return The address of the pendingOwner\n     */\n    function pendingOwner() public view returns (address) {\n        return _pendingOwner;\n    }\n    \n    /**\n     * @dev Tells the address of the owner\n     * @return the address of the owner\n     */\n    function owner() public view returns (address ) {\n        return _owner;\n    }\n    \n    /**\n    * @dev Sets a new owner address\n    * @param _newOwner The newOwner to set\n    */\n    function setOwner(address _newOwner) internal {\n        _owner = _newOwner;\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _pendingOwner = _newOwner;\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(_owner, _pendingOwner);\n        _owner = _pendingOwner;\n        _pendingOwner = address(0); \n    }\n    \n}\n\n// File: contracts/Operable.sol\n\npragma solidity 0.5.0;\n\n\ncontract Operable is Ownable {\n\n    address private _operator; \n\n    event OperatorChanged(address indexed previousOperator, address indexed newOperator);\n\n    /**\n     * @dev Tells the address of the operator\n     * @return the address of the operator\n     */\n    function operator() external view returns (address) {\n        return _operator;\n    }\n    \n    /**\n     * @dev Only the operator can operate store\n     */\n    modifier onlyOperator() {\n        require(msg.sender == _operator, \"msg.sender should be operator\");\n        _;\n    }\n\n    /**\n     * @dev update the storgeOperator\n     * @param _newOperator The newOperator to update  \n     */\n    function updateOperator(address _newOperator) public onlyOwner {\n        require(_newOperator != address(0), \"Cannot change the newOperator to the zero address\");\n        emit OperatorChanged(_operator, _newOperator);\n        _operator = _newOperator;\n    }\n\n}\n\n// File: contracts/BlacklistStore.sol\n\npragma solidity 0.5.0;\n\n\ncontract BlacklistStore is Operable {\n\n    mapping (address => uint256) public blacklisted;\n\n    /**\n     * @dev Checks if account is blacklisted\n     * @param _account The address to check\n     * @param _status The address status    \n     */\n    function setBlacklist(address _account, uint256 _status) public onlyOperator {\n        blacklisted[_account] = _status;\n    }\n\n}",
  "bytecode": "608060405261001c33610021640100000000026401000000009004565b610064565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610a63806100736000396000f3fe60806040526004361061008d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062dc4cf7146100925780634e71e0c8146100ed578063570ca735146101045780638da5cb5b1461015b578063ac7475ed146101b2578063dbac26e914610203578063e30c397814610268578063f2fde38b146102bf575b600080fd5b34801561009e57600080fd5b506100eb600480360360408110156100b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610310565b005b3480156100f957600080fd5b5061010261041d565b005b34801561011057600080fd5b5061011961064b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016757600080fd5b50610170610675565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101be57600080fd5b50610201600480360360208110156101d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061069e565b005b34801561020f57600080fd5b506102526004803603602081101561022657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108ed565b6040518082815260200191505060405180910390f35b34801561027457600080fd5b5061027d610905565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102cb57600080fd5b5061030e600480360360208110156102e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061092f565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6d73672e73656e6465722073686f756c64206265206f70657261746f7200000081525060200191505060405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f6d73672e73656e6465722073686f756c64206265206f6e6c7950656e64696e6781526020017f4f776e657200000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6d73672e73656e6465722073686f756c64206265206f776e657200000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561082d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f43616e6e6f74206368616e676520746865206e65774f70657261746f7220746f81526020017f20746865207a65726f206164647265737300000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd58299b712891143e76310d5e664c4203c940a67db37cf856bdaa3c5c76a802c60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915090505481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6d73672e73656e6465722073686f756c64206265206f776e657200000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a7230582038f5dccec3e9505a9a18eb7a3e92f3355c5e8f3fcdfef153fa7fbaf67f8db7620029"
}