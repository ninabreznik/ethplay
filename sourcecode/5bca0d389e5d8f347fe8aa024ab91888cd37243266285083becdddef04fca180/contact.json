{
  "address": "0x91bbbef2236595718b958b5c983187482f66000f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EOSC",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-13\n*/\n\npragma solidity ^0.4.22;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;       \n    }       \n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier onlyNewOwner() {\n        require(msg.sender != address(0));\n        require(msg.sender == newOwner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public onlyNewOwner returns(bool) {\n        emit OwnershipTransferred(owner, newOwner);        \n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \n}\n\n\ncontract EOSC is ERC20, Ownable, Pausable {\n\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 constant public decimals =8;\n    uint256 internal initialSupply;\n    uint256 internal totalSupply_;\n\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    constructor() public {\n        name = \"EOS CLASSIC\";\n        symbol = \"EOSC\";\n        initialSupply = 9900000000000;\n        totalSupply_ = initialSupply * 10 ** uint(decimals);\n        balances[owner] = totalSupply_;\n        emit Transfer(address(0), owner, totalSupply_);\n    }\n\n    function () public payable {\n        revert();\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        \n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        \n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _holder) public view returns (uint256 balance) {\n        return balances[_holder];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        \n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        require(isContract(_spender));\n        TokenRecipient spender = TokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool)\n    {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function allowance(address _holder, address _spender) public view returns (uint256) {\n        return allowed[_holder][_spender];\n    }\n\n    function claimToken(ERC20 token, address _to, uint256 _value) public onlyOwner returns (bool) {\n        token.transfer(_to, _value);\n        return true;\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        uint size;\n        assembly{size := extcodesize(addr)}\n        return size > 0;\n    }\n\n}",
  "bytecode": "60806040526001805460a060020a60ff021916905534801561002057600080fd5b5060008054600160a060020a0319908116331790915560018054909116905560408051808201909152600b8082527f454f5320434c415353494300000000000000000000000000000000000000000060209092019182526100839160029161013e565b506040805180820190915260048082527f454f53430000000000000000000000000000000000000000000000000000000060209092019182526100c89160039161013e565b5065090105fbb8006004556835ab028ac154b80000600581905560008054600160a060020a0390811682526006602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101d9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017f57805160ff19168380011785556101ac565b828001600101855582156101ac579182015b828111156101ac578251825591602001919060010190610191565b506101b89291506101bc565b5090565b6101d691905b808211156101b857600081556001016101c2565b90565b610ea380620001e96000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a0578063125bfb66146101d857806318160ddd1461020257806323b872dd14610229578063313ce567146102535780633f4ba83a1461027e5780635c975abb1461029557806366188463146102aa57806370a08231146102ce57806379ba5097146102ef5780638456cb59146103045780638da5cb5b1461031957806395d89b411461034a578063a9059cbb1461035f578063cae9ca5114610383578063d4ee1d90146103ec578063d73dd62314610401578063dd62ed3e14610425578063f2fde38b1461044c575b600080fd5b34801561012257600080fd5b5061012b61046d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101c4600160a060020a03600435166024356104f8565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101c4600160a060020a0360043581169060243516604435610579565b34801561020e57600080fd5b50610217610643565b60408051918252519081900360200190f35b34801561023557600080fd5b506101c4600160a060020a0360043581169060243516604435610649565b34801561025f57600080fd5b506102686107da565b6040805160ff9092168252519081900360200190f35b34801561028a57600080fd5b506102936107df565b005b3480156102a157600080fd5b506101c4610857565b3480156102b657600080fd5b506101c4600160a060020a0360043516602435610867565b3480156102da57600080fd5b50610217600160a060020a0360043516610956565b3480156102fb57600080fd5b506101c4610971565b34801561031057600080fd5b50610293610a08565b34801561032557600080fd5b5061032e610a85565b60408051600160a060020a039092168252519081900360200190f35b34801561035657600080fd5b5061012b610a94565b34801561036b57600080fd5b506101c4600160a060020a0360043516602435610aef565b34801561038f57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101c4948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610bea9650505050505050565b3480156103f857600080fd5b5061032e610d19565b34801561040d57600080fd5b506101c4600160a060020a0360043516602435610d28565b34801561043157600080fd5b50610217600160a060020a0360043581169060243516610dc1565b34801561045857600080fd5b50610293600160a060020a0360043516610dec565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104f05780601f106104c5576101008083540402835291602001916104f0565b820191906000526020600020905b8154815290600101906020018083116104d357829003601f168201915b505050505081565b60015460009060a060020a900460ff161561051257600080fd5b336000818152600760209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60008054600160a060020a0316331461059157600080fd5b83600160a060020a031663a9059cbb84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561060d57600080fd5b505af1158015610621573d6000803e3d6000fd5b505050506040513d602081101561063757600080fd5b50600195945050505050565b60055490565b60015460009060a060020a900460ff161561066357600080fd5b600160a060020a038316151561067857600080fd5b600160a060020a03841660009081526006602052604090205482111561069d57600080fd5b600160a060020a03841660009081526007602090815260408083203384529091529020548211156106cd57600080fd5b600160a060020a0384166000908152600660205260409020546106f6908363ffffffff610e4716565b600160a060020a03808616600090815260066020526040808220939093559085168152205461072b908363ffffffff610e5916565b600160a060020a03808516600090815260066020908152604080832094909455918716815260078252828120338252909152205461076f908363ffffffff610e4716565b600160a060020a03808616600081815260076020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600881565b600054600160a060020a031633146107f657600080fd5b60015460a060020a900460ff16151561080e57600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60015460a060020a900460ff1681565b336000908152600760209081526040808320600160a060020a03861684529091528120548083106108bb57336000908152600760209081526040808320600160a060020a03881684529091528120556108f0565b6108cb818463ffffffff610e4716565b336000908152600760209081526040808320600160a060020a03891684529091529020555b336000818152600760209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526006602052604090205490565b600033151561097f57600080fd5b600154600160a060020a0316331461099657600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a0384161790915516905590565b600054600160a060020a03163314610a1f57600080fd5b60015460a060020a900460ff1615610a3657600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104f05780601f106104c5576101008083540402835291602001916104f0565b60015460009060a060020a900460ff1615610b0957600080fd5b600160a060020a0383161515610b1e57600080fd5b33600090815260066020526040902054821115610b3a57600080fd5b33600090815260066020526040902054610b5a908363ffffffff610e4716565b3360009081526006602052604080822092909255600160a060020a03851681522054610b8c908363ffffffff610e5916565b600160a060020a0384166000818152600660209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600080610bf685610e6f565b1515610c0157600080fd5b5083610c0d81856104f8565b15610d11576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610ca5578181015183820152602001610c8d565b50505050905090810190601f168015610cd25780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610cf457600080fd5b505af1158015610d08573d6000803e3d6000fd5b50505050600191505b509392505050565b600154600160a060020a031681565b336000908152600760209081526040808320600160a060020a0386168452909152812054610d5c908363ffffffff610e5916565b336000818152600760209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600054600160a060020a03163314610e0357600080fd5b600160a060020a0381161515610e1857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610e5357fe5b50900390565b600082820183811015610e6857fe5b9392505050565b6000903b11905600a165627a7a7230582004c5cca5f4f56c540dd80f0fb22599cfd9d1e2297d113c6fab66a7edec9abec20029"
}