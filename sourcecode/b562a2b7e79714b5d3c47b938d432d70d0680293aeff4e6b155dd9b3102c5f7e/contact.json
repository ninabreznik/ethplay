{
  "address": "0x8218a33eb15901ce71b3b8123e58b7e312ce638a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZUR",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-02\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/ZUR.sol\n\n/**\n * Holders of ZUR can claim COE as it is mined using the claimTokens()\n * function. This contract will be fed COE automatically by the COE ERC20\n * contract.\n */\ncontract ZUR is MintableToken {\n  using SafeMath for uint;\n\n  string public constant name = \"ZUR Check by Zurcoin\";\n  string public constant symbol = \"ZUR\";\n  uint8 public constant decimals = 0;\n\n  address public admin;\n  uint public cap = 35*10**13;\n  uint public totalEthReleased = 0;\n\n  mapping(address => uint) public ethReleased;\n  address[] public trackedTokens;\n  mapping(address => bool) public isTokenTracked;\n  mapping(address => uint) public totalTokensReleased;\n  mapping(address => mapping(address => uint)) public tokensReleased;\n\n  constructor() public {\n    owner = this;\n    admin = msg.sender;\n  }\n\n  function () public payable {}\n\n  modifier onlyAdmin() {\n    require(msg.sender == admin);\n    _;\n  }\n\n  function changeAdmin(address _receiver) onlyAdmin public {\n    admin = _receiver;\n  }\n\n  /**\n   * Claim your eth.\n   */\n  function claimEth() public {\n    claimEthFor(msg.sender);\n  }\n\n  // Claim eth for address\n  function claimEthFor(address payee) public {\n    require(balances[payee] > 0);\n\n    uint totalReceived = address(this).balance.add(totalEthReleased);\n    uint payment = totalReceived.mul(\n      balances[payee]).div(\n        cap).sub(\n          ethReleased[payee]\n    );\n\n    require(payment != 0);\n    require(address(this).balance >= payment);\n\n    ethReleased[payee] = ethReleased[payee].add(payment);\n    totalEthReleased = totalEthReleased.add(payment);\n\n    payee.transfer(payment);\n  }\n\n  // Claim your tokens\n  function claimMyTokens() public {\n    claimTokensFor(msg.sender);\n  }\n\n  // Claim on behalf of payee address\n  function claimTokensFor(address payee) public {\n    require(balances[payee] > 0);\n\n    for (uint16 i = 0; i < trackedTokens.length; i++) {\n      claimToken(trackedTokens[i], payee);\n    }\n  }\n\n  /**\n   * Transfers the unclaimed token amount for the given token and address\n   * @param _tokenAddr The address of the ERC20 token\n   * @param _payee The address of the payee (ZUR holder)\n   */\n  function claimToken(address _tokenAddr, address _payee) public {\n    require(balances[_payee] > 0);\n    require(isTokenTracked[_tokenAddr]);\n\n    uint payment = getUnclaimedTokenAmount(_tokenAddr, _payee);\n    if (payment == 0) {\n      return;\n    }\n\n    ERC20 Token = ERC20(_tokenAddr);\n    require(Token.balanceOf(address(this)) >= payment);\n    tokensReleased[address(Token)][_payee] = tokensReleased[address(Token)][_payee].add(payment);\n    totalTokensReleased[address(Token)] = totalTokensReleased[address(Token)].add(payment);\n    Token.transfer(_payee, payment);\n  }\n\n  /**\n   * Returns the amount of a token (tokenAddr) that payee can claim\n   * @param tokenAddr The address of the ERC20 token\n   * @param payee The address of the payee\n   */\n  function getUnclaimedTokenAmount(address tokenAddr, address payee) public view returns (uint) {\n    ERC20 Token = ERC20(tokenAddr);\n    uint totalReceived = Token.balanceOf(address(this)).add(totalTokensReleased[address(Token)]);\n    uint payment = totalReceived.mul(\n      balances[payee]).div(\n        cap).sub(\n          tokensReleased[address(Token)][payee]\n    );\n    return payment;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(msg.sender != _to);\n    uint startingBalance = balances[msg.sender];\n    require(super.transfer(_to, _value));\n\n    transferChecks(msg.sender, _to, _value, startingBalance);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n    require(_from != _to);\n    uint startingBalance = balances[_from];\n    require(super.transferFrom(_from, _to, _value));\n\n    transferChecks(_from, _to, _value, startingBalance);\n    return true;\n  }\n\n  function transferChecks(address from, address to, uint checks, uint startingBalance) internal {\n\n    // proportional amount of eth released already\n    uint claimedEth = ethReleased[from].mul(\n      checks).div(\n        startingBalance\n    );\n\n    // increment to's released eth\n    ethReleased[to] = ethReleased[to].add(claimedEth);\n\n    // decrement from's released eth\n    ethReleased[from] = ethReleased[from].sub(claimedEth);\n\n    for (uint16 i = 0; i < trackedTokens.length; i++) {\n      address tokenAddr = trackedTokens[i];\n\n      // proportional amount of token released already\n      uint claimed = tokensReleased[tokenAddr][from].mul(\n        checks).div(\n          startingBalance\n      );\n\n      // increment to's released token\n      tokensReleased[tokenAddr][to] = tokensReleased[tokenAddr][to].add(claimed);\n\n      // decrement from's released token\n      tokensReleased[tokenAddr][from] = tokensReleased[tokenAddr][from].sub(claimed);\n    }\n  }\n\n  /**\n   * @dev Add a new payee to the contract.\n   * @param _payees The addresses of the payees to add.\n   * @param _checks The array of number of checks owned by the payee.\n   */\n  function addPayees(address[] _payees, uint[] _checks) onlyAdmin external {\n    require(_payees.length == _checks.length);\n    require(_payees.length > 0);\n\n    for (uint i = 0; i < _payees.length; i++) {\n      addPayee(_payees[i], _checks[i]);\n    }\n\n  }\n\n  /**\n   * @dev Add a new payee to the contract.\n   * @param _payee The address of the payee to add.\n   * @param _checks The number of _checks owned by the payee.\n   */\n  function addPayee(address _payee, uint _checks) onlyAdmin canMint public {\n    require(_payee != address(0));\n    require(_checks > 0);\n    require(balances[_payee] == 0);\n\n    MintableToken(this).mint(_payee, _checks);\n  }\n\n  // irreversibly close the adding of checks\n  function finishedLoading() onlyAdmin canMint public {\n    MintableToken(this).finishMinting();\n  }\n\n  function trackToken(address _addr) onlyAdmin public {\n    require(_addr != address(0));\n    require(!isTokenTracked[_addr]);\n    trackedTokens.push(_addr);\n    isTokenTracked[_addr] = true;\n  }\n\n  /*\n   * However unlikely, it is possible that the number of tracked tokens\n   * reaches the point that would make the gas cost of transferring ZUR\n   * exceed the block gas limit. This function allows the admin to remove\n   * a token from the tracked token list thus reducing the number of loops\n   * required in transferChecks, lowering the gas cost of transfer. The\n   * remaining balance of this token is sent back to the token's contract.\n   *\n   * Removal is irreversible.\n   *\n   * @param _addr The address of the ERC token to untrack\n   * @param _position The index of the _addr in the trackedTokens array.\n   * Use web3 to cycle through and find the index position.\n   */\n  function unTrackToken(address _addr, uint16 _position) onlyAdmin public {\n    require(isTokenTracked[_addr]);\n    require(trackedTokens[_position] == _addr);\n\n    ERC20(_addr).transfer(_addr, ERC20(_addr).balanceOf(address(this)));\n    trackedTokens[_position] = trackedTokens[trackedTokens.length-1];\n    delete trackedTokens[trackedTokens.length-1];\n    trackedTokens.length--;\n  }\n}",
  "bytecode": ""
}