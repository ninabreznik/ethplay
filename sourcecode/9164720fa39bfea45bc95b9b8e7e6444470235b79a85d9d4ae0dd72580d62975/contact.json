{
  "address": "0x8678b5fb41d87f4bec43b3142bce852366100336",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GOeureka",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-01\n*/\n\npragma solidity ^0.4.23;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\ncontract GoConfig {\n    string public constant NAME = \"GOeureka\";\n    string public constant SYMBOL = \"GOT\";\n    uint8 public constant DECIMALS = 18;\n    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n    uint public constant TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\n}\n\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\ncontract WhiteListedBasic {\n    function addWhiteListed(address[] addrs) external;\n    function removeWhiteListed(address addr) external;\n    function isWhiteListed(address addr) external view returns (bool);\n}\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract OperatableBasic {\n    function setMinter (address addr) external;\n    function setWhiteLister (address addr) external;\n}\ncontract gotTokenSaleConfig is GoConfig {\n    uint public constant MIN_PRESALE = 5 ether;\n    uint public constant MIN_PRESALE2 = 1 ether;\n    \n\n    uint public constant VESTING_AMOUNT = 100000000 * DECIMALSFACTOR;\n    address public constant VESTING_WALLET = 0x8B6EB396eF85D2a9ADbb79955dEB5d77Ee61Af88;\n        \n    uint public constant RESERVE_AMOUNT = 300000000 * DECIMALSFACTOR;\n    address public constant RESERVE_WALLET = 0x8B6EB396eF85D2a9ADbb79955dEB5d77Ee61Af88;\n\n    uint public constant PRESALE_START = 1529035246; // Friday, June 15, 2018 12:00:46 PM GMT+08:00\n    uint public constant SALE_START = PRESALE_START + 4 weeks;\n        \n    uint public constant SALE_CAP = 600000000 * DECIMALSFACTOR;\n\n    address public constant MULTISIG_ETH = RESERVE_WALLET;\n\n}\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract Operatable is Claimable, OperatableBasic {\n    address public minter;\n    address public whiteLister;\n    address public launcher;\n\n    event NewMinter(address newMinter);\n    event NewWhiteLister(address newwhiteLister);\n\n    modifier canOperate() {\n        require(msg.sender == minter || msg.sender == whiteLister || msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        minter = owner;\n        whiteLister = owner;\n        launcher = owner;\n    }\n\n    function setMinter (address addr) external onlyOwner {\n        minter = addr;\n        emit NewMinter(minter);\n    }\n\n    function setWhiteLister (address addr) external onlyOwner {\n        whiteLister = addr;\n        emit NewWhiteLister(whiteLister);\n    }\n\n    modifier ownerOrMinter()  {\n        require ((msg.sender == minter) || (msg.sender == owner));\n        _;\n    }\n\n    modifier onlyLauncher()  {\n        require (msg.sender == launcher);\n        _;\n    }\n\n    modifier onlyWhiteLister()  {\n        require (msg.sender == whiteLister);\n        _;\n    }\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract Salvageable is Operatable {\n    // Salvage other tokens that are accidentally sent into this token\n    function emergencyERC20Drain(ERC20 oddToken, uint amount) public onlyLauncher {\n        if (address(oddToken) == address(0)) {\n            launcher.transfer(amount);\n            return;\n        }\n        oddToken.transfer(launcher, amount);\n    }\n}\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract GOeureka is  Salvageable, PausableToken, BurnableToken, GoConfig {\n    using SafeMath for uint;\n \n    string public name = NAME;\n    string public symbol = SYMBOL;\n    uint8 public decimals = DECIMALS;\n    bool public mintingFinished = false;\n\n    event Mint(address indexed to, uint amount);\n    event MintFinished();\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    constructor() public {\n        paused = true;\n    }\n\n    function mint(address _to, uint _amount) ownerOrMinter canMint public returns (bool) {\n        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    function finishMinting() ownerOrMinter canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n    function sendBatchCS(address[] _recipients, uint[] _values) external ownerOrMinter returns (bool) {\n        require(_recipients.length == _values.length);\n        uint senderBalance = balances[msg.sender];\n        for (uint i = 0; i < _values.length; i++) {\n            uint value = _values[i];\n            address to = _recipients[i];\n            require(senderBalance >= value);        \n            senderBalance = senderBalance - value;\n            balances[to] += value;\n            emit Transfer(msg.sender, to, value);\n        }\n        balances[msg.sender] = senderBalance;\n        return true;\n    }\n\n    // Lifted from ERC827\n\n      /**\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n   * @dev address and execute a call with the sent data on the same transaction\n   *\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes _data\n    )\n    public\n    payable\n    whenNotPaused\n    returns (bool)\n    {\n        require(_to != address(this));\n\n        super.transfer(_to, _value);\n\n        // solium-disable-next-line security/no-call-value\n        require(_to.call.value(msg.value)(_data));\n        return true;\n    }\n\n\n}\n\ncontract GOeurekaSale is Claimable, gotTokenSaleConfig, Pausable, Salvageable {\n    using SafeMath for uint256;\n\n    // The token being sold\n    GOeureka public token;\n\n    WhiteListedBasic public whiteListed;\n\n    uint256 public presaleEnd;\n    uint256 public saleEnd;\n\n    // Minimum contribution is now calculated\n    uint256 public minContribution;\n\n    // address where funds are collected\n    address public multiSig;\n\n    // amount of raised funds in wei from private, presale and main sale\n    uint256 public weiRaised;\n\n    // amount of raised tokens\n    uint256 public tokensRaised;\n\n    // number of participants\n    mapping(address => uint256) public contributions;\n    uint256 public numberOfContributors = 0;\n\n    //  for rate\n    uint public basicRate;\n \n    // EVENTS\n\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n    event SaleClosed();\n    event HardcapReached();\n    event NewCapActivated(uint256 newCap);\n\n \n    // CONSTRUCTOR\n\n    constructor(GOeureka token_, WhiteListedBasic _whiteListed) public {\n\n        basicRate = 3000;  // TokensPerEther\n        calculateRates();\n        \n        presaleEnd = 1536508800; //20180910 00:00 +8\n        saleEnd = 1543593600; //20181201 00:00 +8\n\n        multiSig = MULTISIG_ETH;\n\n        // NOTE - toke\n        token = token_;\n\n        whiteListed = _whiteListed;\n    }\n\n    // This sale contract must be the minter before we mintAllocations or do anything else.\n    //\n    bool allocated = false;\n    function mintAllocations() external onlyOwner {\n        require(!allocated);\n        allocated = true;\n        token.mint(VESTING_WALLET,VESTING_AMOUNT);\n        token.mint(RESERVE_WALLET,RESERVE_AMOUNT);\n    }\n\n    function setWallet(address _newWallet) public onlyOwner {\n        multiSig = _newWallet;\n    } \n\n\n    // @return true if crowdsale event has ended\n    function hasEnded() public view returns (bool) {\n        if (now > saleEnd)\n            return true;\n        if (tokensRaised >= SALE_CAP)\n            return true; // if we reach the tokensForSale\n        return false;\n    }\n\n    // Buyer must be whitelisted\n    function isWhiteListed(address beneficiary) internal view returns (bool) {\n        return whiteListed.isWhiteListed(beneficiary);\n    }\n\n    modifier onlyAuthorised(address beneficiary) {\n        require(isWhiteListed(beneficiary),\"Not authorised\");\n        \n        require (!hasEnded(),\"ended\");\n        require (multiSig != 0x0,\"MultiSig empty\");\n        require ((msg.value > minContribution) || (tokensRaised.add(getTokens(msg.value)) == SALE_CAP),\"Value too small\");\n        _;\n    }\n\n    function setNewRate(uint newRate) onlyOwner public {\n        require(weiRaised == 0);\n        require(1000 < newRate && newRate < 10000);\n        basicRate = newRate;\n        calculateRates();\n    }\n\n    function calculateRates() internal {\n        minContribution = uint(100 * DECIMALSFACTOR).div(basicRate);\n    }\n\n\n    function getTokens(uint256 amountInWei) \n    internal\n    view\n    returns (uint256 tokens)\n    {\n        if (now <= presaleEnd) {\n            uint theseTokens = amountInWei.mul(basicRate).mul(1125).div(1000);\n            require((amountInWei >= 1 ether) || (tokensRaised.add(theseTokens)==SALE_CAP));\n            return (theseTokens);\n        }\n        if (now <= saleEnd) { \n            return (amountInWei.mul(basicRate));\n        }\n        revert();\n    }\n\n  \n    // low level token purchase function\n    function buyTokens(address beneficiary, uint256 value)\n        internal\n        onlyAuthorised(beneficiary) \n        whenNotPaused\n    {\n        uint256 newTokens;\n \n        newTokens = getTokens(value);\n        weiRaised = weiRaised.add(value);\n        // if we have bridged two tranches....\n        if (contributions[beneficiary] == 0) {\n            numberOfContributors++;\n        }\n        contributions[beneficiary] = contributions[beneficiary].add(value);\n        tokensRaised = tokensRaised.add(newTokens);\n        token.mint(beneficiary,newTokens);\n        emit TokenPurchase(beneficiary, value, newTokens);\n        multiSig.transfer(value);\n    }\n\n    function placeTokens(address beneficiary, uint256 tokens) \n        public       \n        onlyOwner\n    {\n        require(!hasEnded());\n        tokensRaised = tokensRaised.add(tokens);\n        token.mint(beneficiary,tokens);\n    }\n\n\n    // Complete the sale\n    function finishSale() public onlyOwner {\n        require(hasEnded());\n        token.finishMinting();\n        emit SaleClosed();\n    }\n\n    // fallback function can be used to buy tokens\n    function () public payable {\n        buyTokens(msg.sender, msg.value);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTALSUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhiteLister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendBatchCS\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteLister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newwhiteLister\",\"type\":\"address\"}],\"name\":\"NewWhiteLister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6007805460a060020a60ff021916905560c0604052600860808190527f474f657572656b6100000000000000000000000000000000000000000000000060a09081526200004e91908162000120565b506040805180820190915260038082527f474f5400000000000000000000000000000000000000000000000000000000006020909201918252620000959160099162000120565b50600a805461ff001960ff19909116601217169055348015620000b757600080fd5b506003805433600160a060020a0319918216179182905560058054600160a060020a0390931692821683179055600680548216831790556007805474010000000000000000000000000000000000000000921690921760a060020a60ff021916179055620001c5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016357805160ff191683800117855562000193565b8280016001018555821562000193579182015b828111156200019357825182559160200191906001019062000176565b50620001a1929150620001a5565b5090565b620001c291905b80821115620001a15760008155600101620001ac565b90565b6116f780620001d56000396000f3006080604052600436106101c15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146101c657806306fdde03146101ef5780630754617214610279578063095ea7b3146102aa57806316eebd1e146102ce57806318160ddd146102e357806323b872dd1461030a5780632e0f262514610334578063313ce5671461035f5780633f4ba83a146103745780634000aea01461038b57806340c10f19146103e757806342966c681461040b5780634e71e0c8146104235780635c975abb14610438578063661884631461044d57806370a0823114610471578063715018a6146104925780637d64bcb4146104a75780638456cb59146104bc5780638bc04eb7146104d15780638da5cb5b146104e657806394a08c69146104fb5780639576bfbd1461051057806395d89b41146105315780639c1d979014610546578063a3f4df7e14610572578063a9059cbb14610587578063d73dd623146105ab578063db0e16f1146105cf578063dd62ed3e146105f3578063e30c39781461061a578063ef26e41d1461062f578063f2fde38b14610644578063f76f8d7814610665578063fca3b5aa1461067a575b600080fd5b3480156101d257600080fd5b506101db61069b565b604080519115158252519081900360200190f35b3480156101fb57600080fd5b506102046106a9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023e578181015183820152602001610226565b50505050905090810190601f16801561026b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028557600080fd5b5061028e610737565b60408051600160a060020a039092168252519081900360200190f35b3480156102b657600080fd5b506101db600160a060020a0360043516602435610746565b3480156102da57600080fd5b5061028e610771565b3480156102ef57600080fd5b506102f8610780565b60408051918252519081900360200190f35b34801561031657600080fd5b506101db600160a060020a0360043581169060243516604435610786565b34801561034057600080fd5b506103496107b3565b6040805160ff9092168252519081900360200190f35b34801561036b57600080fd5b506103496107b8565b34801561038057600080fd5b506103896107c1565b005b604080516020600460443581810135601f81018490048402850184019095528484526101db948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108399650505050505050565b3480156103f357600080fd5b506101db600160a060020a0360043516602435610901565b34801561041757600080fd5b50610389600435610a3a565b34801561042f57600080fd5b50610389610a47565b34801561044457600080fd5b506101db610ad1565b34801561045957600080fd5b506101db600160a060020a0360043516602435610ae1565b34801561047d57600080fd5b506102f8600160a060020a0360043516610b05565b34801561049e57600080fd5b50610389610b20565b3480156104b357600080fd5b506101db610b8e565b3480156104c857600080fd5b50610389610c12565b3480156104dd57600080fd5b506102f8610c8f565b3480156104f257600080fd5b5061028e610c9b565b34801561050757600080fd5b506102f8610caa565b34801561051c57600080fd5b50610389600160a060020a0360043516610cba565b34801561053d57600080fd5b50610204610d38565b34801561055257600080fd5b506101db6024600480358281019290820135918135918201910135610d93565b34801561057e57600080fd5b50610204610eaa565b34801561059357600080fd5b506101db600160a060020a0360043516602435610ee1565b3480156105b757600080fd5b506101db600160a060020a0360043516602435610f05565b3480156105db57600080fd5b50610389600160a060020a0360043516602435610f29565b3480156105ff57600080fd5b506102f8600160a060020a0360043581169060243516611030565b34801561062657600080fd5b5061028e61105b565b34801561063b57600080fd5b5061028e61106a565b34801561065057600080fd5b50610389600160a060020a0360043516611079565b34801561067157600080fd5b506102046110bf565b34801561068657600080fd5b50610389600160a060020a03600435166110f6565b600a54610100900460ff1681565b6008805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561072f5780601f106107045761010080835404028352916020019161072f565b820191906000526020600020905b81548152906001019060200180831161071257829003601f168201915b505050505081565b600554600160a060020a031681565b60075460009060a060020a900460ff161561076057600080fd5b61076a8383611174565b9392505050565b600754600160a060020a031681565b60015490565b60075460009060a060020a900460ff16156107a057600080fd5b6107ab8484846111da565b949350505050565b601281565b600a5460ff1681565b600354600160a060020a031633146107d857600080fd5b60075460a060020a900460ff1615156107f057600080fd5b6007805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60075460009060a060020a900460ff161561085357600080fd5b600160a060020a03841630141561086957600080fd5b6108738484610ee1565b5083600160a060020a0316348360405180828051906020019080838360005b838110156108aa578181015183820152602001610892565b50505050905090810190601f1680156108d75780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af19250505015156108f757600080fd5b5060019392505050565b600554600090600160a060020a03163314806109275750600354600160a060020a031633145b151561093257600080fd5b600a54610100900460ff161561094757600080fd5b6001546b033b2e3c9fd0803ce800000090610968908463ffffffff61133f16565b111561097357600080fd5b600154610986908363ffffffff61133f16565b600155600160a060020a0383166000908152602081905260409020546109b2908363ffffffff61133f16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206116ac8339815191529181900360200190a350600192915050565b610a443382611352565b50565b600454600160a060020a03163314610a5e57600080fd5b600454600354604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600480546003805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60075460a060020a900460ff1681565b60075460009060a060020a900460ff1615610afb57600080fd5b61076a8383611441565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610b3757600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600554600090600160a060020a0316331480610bb45750600354600160a060020a031633145b1515610bbf57600080fd5b600a54610100900460ff1615610bd457600080fd5b600a805461ff0019166101001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a03163314610c2957600080fd5b60075460a060020a900460ff1615610c4057600080fd5b6007805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b670de0b6b3a764000081565b600354600160a060020a031681565b6b033b2e3c9fd0803ce800000081565b600354600160a060020a03163314610cd157600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f09ebea9685d3394fb080028f682138bd6bc97e571259a0cc21bedf3395096dfc916020908290030190a150565b6009805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561072f5780601f106107045761010080835404028352916020019161072f565b6005546000908190819081908190600160a060020a0316331480610dc15750600354600160a060020a031633145b1515610dcc57600080fd5b878614610dd857600080fd5b33600090815260208190526040812054945092505b85831015610e8957868684818110610e0157fe5b9050602002013591508888848181101515610e1857fe5b90506020020135600160a060020a03169050818410151515610e3957600080fd5b600160a060020a0381166000818152602081815260409182902080548601905581518581529151968590039633926000805160206116ac83398151915292908290030190a3600190920191610ded565b50503360009081526020819052604090209190915550600195945050505050565b60408051808201909152600881527f474f657572656b61000000000000000000000000000000000000000000000000602082015281565b60075460009060a060020a900460ff1615610efb57600080fd5b61076a8383611531565b60075460009060a060020a900460ff1615610f1f57600080fd5b61076a8383611600565b600754600160a060020a03163314610f4057600080fd5b600160a060020a0382161515610f9057600754604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610f8a573d6000803e3d6000fd5b5061102c565b600754604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519184169163a9059cbb916044808201926020929091908290030181600087803b158015610fff57600080fd5b505af1158015611013573d6000803e3d6000fd5b505050506040513d602081101561102957600080fd5b50505b5050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600454600160a060020a031681565b600654600160a060020a031681565b600354600160a060020a0316331461109057600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60408051808201909152600381527f474f540000000000000000000000000000000000000000000000000000000000602082015281565b600354600160a060020a0316331461110d57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc973916020908290030190a150565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a03831615156111f157600080fd5b600160a060020a03841660009081526020819052604090205482111561121657600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561124657600080fd5b600160a060020a03841660009081526020819052604090205461126f908363ffffffff61169916565b600160a060020a0380861660009081526020819052604080822093909355908516815220546112a4908363ffffffff61133f16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546112e6908363ffffffff61169916565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391926000805160206116ac833981519152929181900390910190a35060019392505050565b8181018281101561134c57fe5b92915050565b600160a060020a03821660009081526020819052604090205481111561137757600080fd5b600160a060020a0382166000908152602081905260409020546113a0908263ffffffff61169916565b600160a060020a0383166000908152602081905260409020556001546113cc908263ffffffff61169916565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206116ac8339815191529181900360200190a35050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561149657336000908152600260209081526040808320600160a060020a03881684529091528120556114cb565b6114a6818463ffffffff61169916565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561154857600080fd5b3360009081526020819052604090205482111561156457600080fd5b33600090815260208190526040902054611584908363ffffffff61169916565b3360009081526020819052604080822092909255600160a060020a038516815220546115b6908363ffffffff61133f16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206116ac8339815191529281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054611634908363ffffffff61133f16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000828211156116a557fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202bd9395573dbf51820eeb581632a5369a6d4591f3cc5636a6fabf974ecd8f17b0029"
}