{
  "address": "0x8e2a84d6ade1e7fffee039a35ef5f19f13057152",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Maker: Contract 8",
  "contractName": "DSChief",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-17\n*/\n\n// hevm: flattened sources of src/chief.sol\npragma solidity ^0.4.17;\n\n////// lib/ds-roles/lib/ds-auth/src/auth.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() public {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n////// lib/ds-roles/src/roles.sol\n// roles.sol - roled based authentication\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import 'ds-auth/auth.sol'; */\n\ncontract DSRoles is DSAuth, DSAuthority\n{\n    mapping(address=>bool) _root_users;\n    mapping(address=>bytes32) _user_roles;\n    mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;\n    mapping(address=>mapping(bytes4=>bool)) _public_capabilities;\n\n    function getUserRoles(address who)\n        public\n        view\n        returns (bytes32)\n    {\n        return _user_roles[who];\n    }\n\n    function getCapabilityRoles(address code, bytes4 sig)\n        public\n        view\n        returns (bytes32)\n    {\n        return _capability_roles[code][sig];\n    }\n\n    function isUserRoot(address who)\n        public\n        view\n        returns (bool)\n    {\n        return _root_users[who];\n    }\n\n    function isCapabilityPublic(address code, bytes4 sig)\n        public\n        view\n        returns (bool)\n    {\n        return _public_capabilities[code][sig];\n    }\n\n    function hasUserRole(address who, uint8 role)\n        public\n        view\n        returns (bool)\n    {\n        bytes32 roles = getUserRoles(who);\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n        return bytes32(0) != roles & shifted;\n    }\n\n    function canCall(address caller, address code, bytes4 sig)\n        public\n        view\n        returns (bool)\n    {\n        if( isUserRoot(caller) || isCapabilityPublic(code, sig) ) {\n            return true;\n        } else {\n            var has_roles = getUserRoles(caller);\n            var needs_one_of = getCapabilityRoles(code, sig);\n            return bytes32(0) != has_roles & needs_one_of;\n        }\n    }\n\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\n        return (input ^ bytes32(uint(-1)));\n    }\n\n    function setRootUser(address who, bool enabled)\n        public\n        auth\n    {\n        _root_users[who] = enabled;\n    }\n\n    function setUserRole(address who, uint8 role, bool enabled)\n        public\n        auth\n    {\n        var last_roles = _user_roles[who];\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n        if( enabled ) {\n            _user_roles[who] = last_roles | shifted;\n        } else {\n            _user_roles[who] = last_roles & BITNOT(shifted);\n        }\n    }\n\n    function setPublicCapability(address code, bytes4 sig, bool enabled)\n        public\n        auth\n    {\n        _public_capabilities[code][sig] = enabled;\n    }\n\n    function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)\n        public\n        auth\n    {\n        var last_roles = _capability_roles[code][sig];\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n        if( enabled ) {\n            _capability_roles[code][sig] = last_roles | shifted;\n        } else {\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\n        }\n\n    }\n\n}\n\n////// lib/ds-thing/lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// lib/ds-thing/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n////// lib/ds-thing/src/thing.sol\n// thing.sol - `auth` with handy mixins. your things should be DSThings\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import 'ds-auth/auth.sol'; */\n/* import 'ds-note/note.sol'; */\n/* import 'ds-math/math.sol'; */\n\ncontract DSThing is DSAuth, DSNote, DSMath {\n\n    function S(string s) internal pure returns (bytes4) {\n        return bytes4(keccak256(s));\n    }\n\n}\n\n////// lib/ds-token/lib/ds-stop/src/stop.sol\n/// stop.sol -- mixin for enable/disable functionality\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import \"ds-auth/auth.sol\"; */\n/* import \"ds-note/note.sol\"; */\n\ncontract DSStop is DSNote, DSAuth {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped);\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\n////// lib/ds-token/lib/erc20/src/erc20.sol\n/// erc20.sol -- API for the ERC20 token standard\n\n// See <https://github.com/ethereum/EIPs/issues/20>.\n\n// This file likely does not meet the threshold of originality\n// required for copyright to apply.  As a result, this is free and\n// unencumbered software belonging to the public domain.\n\n/* pragma solidity ^0.4.8; */\n\ncontract ERC20Events {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\ncontract ERC20 is ERC20Events {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address guy) public view returns (uint);\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public returns (bool);\n}\n\n////// lib/ds-token/src/base.sol\n/// base.sol -- basic ERC20 implementation\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import \"erc20/erc20.sol\"; */\n/* import \"ds-math/math.sol\"; */\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n\n    function DSTokenBase(uint supply) public {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _supply;\n    }\n    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) public view returns (uint) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n}\n\n////// lib/ds-token/src/token.sol\n/// token.sol -- ERC20 implementation with minting and burning\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import \"ds-stop/stop.sol\"; */\n\n/* import \"./base.sol\"; */\n\ncontract DSToken is DSTokenBase(0), DSStop {\n\n    bytes32  public  symbol;\n    uint256  public  decimals = 18; // standard token precision. override to customize\n\n    function DSToken(bytes32 symbol_) public {\n        symbol = symbol_;\n    }\n\n    event Mint(address indexed guy, uint wad);\n    event Burn(address indexed guy, uint wad);\n\n    function approve(address guy) public stoppable returns (bool) {\n        return super.approve(guy, uint(-1));\n    }\n\n    function approve(address guy, uint wad) public stoppable returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        stoppable\n        returns (bool)\n    {\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function push(address dst, uint wad) public {\n        transferFrom(msg.sender, dst, wad);\n    }\n    function pull(address src, uint wad) public {\n        transferFrom(src, msg.sender, wad);\n    }\n    function move(address src, address dst, uint wad) public {\n        transferFrom(src, dst, wad);\n    }\n\n    function mint(uint wad) public {\n        mint(msg.sender, wad);\n    }\n    function burn(uint wad) public {\n        burn(msg.sender, wad);\n    }\n    function mint(address guy, uint wad) public auth stoppable {\n        _balances[guy] = add(_balances[guy], wad);\n        _supply = add(_supply, wad);\n        Mint(guy, wad);\n    }\n    function burn(address guy, uint wad) public auth stoppable {\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n        }\n\n        _balances[guy] = sub(_balances[guy], wad);\n        _supply = sub(_supply, wad);\n        Burn(guy, wad);\n    }\n\n    // Optional token name\n    bytes32   public  name = \"\";\n\n    function setName(bytes32 name_) public auth {\n        name = name_;\n    }\n}\n\n////// src/chief.sol\n// chief.sol - select an authority by consensus\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.17; */\n\n/* import 'ds-token/token.sol'; */\n/* import 'ds-roles/roles.sol'; */\n/* import 'ds-thing/thing.sol'; */\n\n// The right way to use this contract is probably to mix it with some kind\n// of `DSAuthority`, like with `ds-roles`.\n//   SEE DSChief\ncontract DSChiefApprovals is DSThing {\n    mapping(bytes32=>address[]) public slates;\n    mapping(address=>bytes32) public votes;\n    mapping(address=>uint256) public approvals;\n    mapping(address=>uint256) public deposits;\n    DSToken public GOV; // voting token that gets locked up\n    DSToken public IOU; // non-voting representation of a token, for e.g. secondary voting mechanisms\n    address public hat; // the chieftain's hat\n\n    uint256 public MAX_YAYS;\n\n    event Etch(bytes32 indexed slate);\n\n    // IOU constructed outside this contract reduces deployment costs significantly\n    // lock/free/vote are quite sensitive to token invariants. Caution is advised.\n    function DSChiefApprovals(DSToken GOV_, DSToken IOU_, uint MAX_YAYS_) public\n    {\n        GOV = GOV_;\n        IOU = IOU_;\n        MAX_YAYS = MAX_YAYS_;\n    }\n\n    function lock(uint wad)\n        public\n        note\n    {\n        GOV.pull(msg.sender, wad);\n        IOU.mint(msg.sender, wad);\n        deposits[msg.sender] = add(deposits[msg.sender], wad);\n        addWeight(wad, votes[msg.sender]);\n    }\n\n    function free(uint wad)\n        public\n        note\n    {\n        deposits[msg.sender] = sub(deposits[msg.sender], wad);\n        subWeight(wad, votes[msg.sender]);\n        IOU.burn(msg.sender, wad);\n        GOV.push(msg.sender, wad);\n    }\n\n    function etch(address[] yays)\n        public\n        note\n        returns (bytes32 slate)\n    {\n        require( yays.length <= MAX_YAYS );\n        requireByteOrderedSet(yays);\n\n        bytes32 hash = keccak256(yays);\n        slates[hash] = yays;\n        Etch(hash);\n        return hash;\n    }\n\n    function vote(address[] yays) public returns (bytes32)\n        // note  both sub-calls note\n    {\n        var slate = etch(yays);\n        vote(slate);\n        return slate;\n    }\n\n    function vote(bytes32 slate)\n        public\n        note\n    {\n        uint weight = deposits[msg.sender];\n        subWeight(weight, votes[msg.sender]);\n        votes[msg.sender] = slate;\n        addWeight(weight, votes[msg.sender]);\n    }\n\n    // like `drop`/`swap` except simply \"elect this address if it is higher than current hat\"\n    function lift(address whom)\n        public\n        note\n    {\n        require(approvals[whom] > approvals[hat]);\n        hat = whom;\n    }\n\n    function addWeight(uint weight, bytes32 slate)\n        internal\n    {\n        var yays = slates[slate];\n        for( uint i = 0; i < yays.length; i++) {\n            approvals[yays[i]] = add(approvals[yays[i]], weight);\n        }\n    }\n\n    function subWeight(uint weight, bytes32 slate)\n        internal\n    {\n        var yays = slates[slate];\n        for( uint i = 0; i < yays.length; i++) {\n            approvals[yays[i]] = sub(approvals[yays[i]], weight);\n        }\n    }\n\n    // Throws unless the array of addresses is a ordered set.\n    function requireByteOrderedSet(address[] yays)\n        internal\n        pure\n    {\n        if( yays.length == 0 || yays.length == 1 ) {\n            return;\n        }\n        for( uint i = 0; i < yays.length - 1; i++ ) {\n            // strict inequality ensures both ordering and uniqueness\n            require(uint(bytes32(yays[i])) < uint256(bytes32(yays[i+1])));\n        }\n    }\n}\n\n\n// `hat` address is unique root user (has every role) and the\n// unique owner of role 0 (typically 'sys' or 'internal')\ncontract DSChief is DSRoles, DSChiefApprovals {\n\n    function DSChief(DSToken GOV, DSToken IOU, uint MAX_YAYS)\n             DSChiefApprovals (GOV, IOU, MAX_YAYS)\n        public\n    {\n        authority = this;\n        owner = 0;\n    }\n\n    function setOwner(address owner_) public {\n        owner_;\n        revert();\n    }\n\n    function setAuthority(DSAuthority authority_) public {\n        authority_;\n        revert();\n    }\n\n    function isUserRoot(address who)\n        public\n        constant\n        returns (bool)\n    {\n        return (who == hat);\n    }\n    function setRootUser(address who, bool enabled) public {\n        who; enabled;\n        revert();\n    }\n}\n\ncontract DSChiefFab {\n    function newChief(DSToken gov, uint MAX_YAYS) public returns (DSChief chief) {\n        DSToken iou = new DSToken('IOU');\n        chief = new DSChief(gov, iou, MAX_YAYS);\n        iou.setOwner(chief);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"IOU\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOV\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"getCapabilityRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"isCapabilityPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_YAYS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whom\",\"type\":\"address\"}],\"name\":\"lift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yays\",\"type\":\"address[]\"}],\"name\":\"etch\",\"outputs\":[{\"name\":\"slate\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"uint8\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setUserRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"role\",\"type\":\"uint8\"},{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRoleCapability\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"hasUserRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slate\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPublicCapability\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRootUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yays\",\"type\":\"address[]\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isUserRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"GOV\",\"type\":\"address\"},{\"name\":\"IOU\",\"type\":\"address\"},{\"name\":\"MAX_YAYS\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"slate\",\"type\":\"bytes32\"}],\"name\":\"Etch\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b6040516060806112fb83398101604052808051919060200180519190602001805160018054600160a060020a03191633600160a060020a0316908117909155909250849150839083907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2600a8054600160a060020a0319908116600160a060020a0395861617909155600b8054821693851693909317909255600d556000805482163090931692909217825560018054909116905561121993508392506100e29150396000f3006060604052600436106101505763ffffffff60e060020a600035041663046c472f811461015557806306a36aee1461018457806313af4035146101b5578063180cb47f146101d657806327538e90146101e95780632f47571f14610215578063362344b8146102555780633c278bd5146102685780635123e1fa146102875780635d0341ba146102d657806367aff484146102f55780637a9e5e4b146101b55780637d40583d1461031f5780638da5cb5b14610356578063a078f73714610369578063a69beaba1461038e578063b7009613146103a4578063bf7e214f146103d6578063c2ffc7bb146103e9578063c6b0263e14610402578063d381ba7c14610433578063d8bff5a514610457578063d8ccd0f314610476578063dd4670641461048c578063ed081329146104a2578063fbf80773146104f1578063fc7e286d14610510578063fe95a5ce1461052f575b600080fd5b341561016057600080fd5b610168610542565b604051600160a060020a03909116815260200160405180910390f35b341561018f57600080fd5b6101a3600160a060020a0360043516610551565b60405190815260200160405180910390f35b34156101c057600080fd5b6101d4600160a060020a0360043516610150565b005b34156101e157600080fd5b61016861056c565b34156101f457600080fd5b6101a3600160a060020a0360043516600160e060020a03196024351661057b565b341561022057600080fd5b610241600160a060020a0360043516600160e060020a0319602435166105b0565b604051901515815260200160405180910390f35b341561026057600080fd5b6101a36105e7565b341561027357600080fd5b6101d4600160a060020a03600435166105ed565b341561029257600080fd5b6101a360046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496506106a495505050505050565b34156102e157600080fd5b6101a3600160a060020a03600435166107ad565b341561030057600080fd5b6101d4600160a060020a036004351660ff6024351660443515156107bf565b341561032a57600080fd5b6101d460ff60043516600160a060020a0360243516600160e060020a031960443516606435151561085b565b341561036157600080fd5b610168610937565b341561037457600080fd5b610241600160a060020a036004351660ff60243516610946565b341561039957600080fd5b6101d460043561096a565b34156103af57600080fd5b610241600160a060020a0360043581169060243516600160e060020a031960443516610a1d565b34156103e157600080fd5b610168610a71565b34156103f457600080fd5b610168600435602435610a80565b341561040d57600080fd5b6101d4600160a060020a0360043516600160e060020a0319602435166044351515610ab7565b341561043e57600080fd5b6101d4600160a060020a03600435166024351515610150565b341561046257600080fd5b6101a3600160a060020a0360043516610b19565b341561048157600080fd5b6101d4600435610b2b565b341561049757600080fd5b6101d4600435610ca6565b34156104ad57600080fd5b6101a36004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610e2995505050505050565b34156104fc57600080fd5b610241600160a060020a0360043516610e40565b341561051b57600080fd5b6101a3600160a060020a0360043516610e54565b341561053a57600080fd5b610168610e66565b600b54600160a060020a031681565b600160a060020a031660009081526003602052604090205490565b600a54600160a060020a031681565b600160a060020a0382166000908152600460209081526040808320600160e060020a0319851684529091529020545b92915050565b600160a060020a0382166000908152600560209081526040808320600160e060020a03198516845290915290205460ff1692915050565b600d5481565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4600c54600160a060020a039081166000908152600860205260408082205492861682529020541161067357600080fd5b5050600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806004356024358082600160a060020a033316600160e060020a031986351634873660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4600d548551111561070a57600080fd5b61071385610e75565b8460405180828051906020019060200280838360005b83811015610741578082015183820152602001610729565b505050509050019150506040519081900390206000818152600660205260409020909350858051610776929160200190611145565b50827f4f0892983790f53eea39a7a496f6cb40e8811b313871337b6a761efc6c67bb1f60405160405180910390a250909392505050565b60086020526000908152604090205481565b6000806107d833600035600160e060020a031916610ef7565b15156107e357600080fd5b5050600160a060020a03831660009081526003602052604090205460ff831660020a821561082d57600160a060020a03851660009081526003602052604090208282179055610854565b61083681610fee565b600160a060020a038616600090815260036020526040902090831690555b5050505050565b60008061087433600035600160e060020a031916610ef7565b151561087f57600080fd5b5050600160a060020a0383166000908152600460209081526040808320600160e060020a03198616845290915290205460ff851660020a82156108f357600160a060020a0385166000908152600460209081526040808320600160e060020a0319881684529091529020828217905561092f565b6108fc81610fee565b600160a060020a0386166000908152600460209081526040808320600160e060020a031989168452909152902090831690555b505050505050565b600154600160a060020a031681565b600080600061095485610551565b60ff9490941660020a9093161515949350505050565b60006004356024358082600160a060020a033316600160e060020a031986351634873660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4600160a060020a0333166000908152600960209081526040808320546007909252909120549093506109f2908490610ff5565b600160a060020a0333166000908152600760205260409020849055610a17838561108d565b50505050565b6000806000610a2b86610e40565b80610a3b5750610a3b85856105b0565b15610a495760019250610a68565b610a5286610551565b9150610a5e858561057b565b8281161515935090505b50509392505050565b600054600160a060020a031681565b600660205281600052604060002081815481101515610a9b57fe5b600091825260209091200154600160a060020a03169150829050565b610acd33600035600160e060020a031916610ef7565b1515610ad857600080fd5b600160a060020a039092166000908152600560209081526040808320600160e060020a0319909416835292905220805491151560ff19909216919091179055565b60076020526000908152604090205481565b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4600160a060020a033316600090815260096020526040902054610ba49084611125565b600160a060020a033316600090815260096020908152604080832093909355600790522054610bd4908490610ff5565b600b54600160a060020a0316639dc29fac338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610c2a57600080fd5b6102c65a03f11515610c3b57600080fd5b5050600a54600160a060020a0316905063b753a98c338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610c9557600080fd5b6102c65a03f1151561092f57600080fd5b600435602435808233600160a060020a031660008035600160e060020a0319169034903660405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a4600a54600160a060020a031663f2d5d56b338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610d5257600080fd5b6102c65a03f11515610d6357600080fd5b5050600b54600160a060020a031690506340c10f19338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610dbd57600080fd5b6102c65a03f11515610dce57600080fd5b505050600160a060020a033316600090815260096020526040902054610df49084611135565b600160a060020a033316600090815260096020908152604080832093909355600790522054610e2490849061108d565b505050565b600080610e35836106a4565b90506105aa8161096a565b600c54600160a060020a0390811691161490565b60096020526000908152604090205481565b600c54600160a060020a031681565b600081511580610e86575081516001145b15610e9057610ef3565b5060005b6001825103811015610ef357818160010181518110610eaf57fe5b90602001906020020151600160a060020a0316828281518110610ece57fe5b90602001906020020151600160a060020a031610610eeb57600080fd5b600101610e94565b5050565b600030600160a060020a031683600160a060020a03161415610f1b575060016105aa565b600154600160a060020a0384811691161415610f39575060016105aa565b600054600160a060020a03161515610f53575060006105aa565b60008054600160a060020a03169063b7009613908590309086906040516020015260405160e060020a63ffffffff8616028152600160a060020a039384166004820152919092166024820152600160e060020a03199091166044820152606401602060405180830381600087803b1515610fcc57600080fd5b6102c65a03f11515610fdd57600080fd5b5050506040518051905090506105aa565b6000191890565b6000818152600660205260408120905b8154811015610a175761104e60086000848481548110151561102357fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205485611125565b60086000848481548110151561106057fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902055600101611005565b6000818152600660205260408120905b8154811015610a17576110e66008600084848154811015156110bb57fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205485611135565b6008600084848154811015156110f857fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205560010161109d565b808203828111156105aa57600080fd5b808201828110156105aa57600080fd5b8280548282559060005260206000209081019282156111a9579160200282015b828111156111a9578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039190911617825560209290920191600190910190611165565b506111b59291506111b9565b5090565b6111ea91905b808211156111b557805473ffffffffffffffffffffffffffffffffffffffff191681556001016111bf565b905600a165627a7a72305820c51e76da33edd9577fc684da56e5585a52c0b6edb0a0627885dd8fbeade927fa00290000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000009aed7a25f2d928225e6fb2388055c7363ad6727b0000000000000000000000000000000000000000000000000000000000000005",
  "constructorArguments": "0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000009aed7a25f2d928225e6fb2388055c7363ad6727b0000000000000000000000000000000000000000000000000000000000000005"
}