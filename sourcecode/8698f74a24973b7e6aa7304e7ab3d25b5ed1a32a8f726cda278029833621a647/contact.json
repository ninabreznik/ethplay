{
  "address": "0x3d63da14a12a559ad081f291ae3a6f34d69be159",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-24\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ninterface GACR {\n    function transfer(address to, uint256 value) external returns (bool);\n    function mint(address _to, uint256 _amount) external returns (bool);\n    function finishMinting() external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function setTeamAddress(address _teamFund) external;\n    function transferOwnership(address newOwner) external;\n}\n\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n\n    // ICO stage\n    enum CrowdsaleStage { PreICO, ICO }\n    CrowdsaleStage public stage = CrowdsaleStage.PreICO; // By default it's Pre Sale\n\n    // Token distribution\n    uint256 public constant maxTokens           = 50000000*1e18;    // max of GACR tokens\n    uint256 public constant tokensForSale       = 28500000*1e18;    // 57%\n    uint256 public constant tokensForBounty     = 1500000*1e18;     // 3%\n    uint256 public constant tokensForAdvisors   = 3000000*1e18;     // 6%\n    uint256 public constant tokensForTeam       = 9000000*1e18;     // 18%\n    uint256 public tokensForEcosystem           = 8000000*1e18;     // 16%\n\n    // Start & End time of Crowdsale\n    uint256 startTime   = 1522494000;   // 2018-03-31T11:00:00\n    uint256 endTime     = 1539169200;   // 2018-10-10T11:00:00\n\n    // The token being sold\n    GACR public token;\n\n    // Address where funds are collected\n    address public wallet;\n\n    // How many token units a buyer gets per wei\n    uint256 public rate;\n\n    // Amount of wei raised\n    uint256 public weiRaised;\n\n    // Limit for total contributions\n    uint256 public cap;\n\n    // KYC for ICO\n    mapping(address => bool) public whitelist;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    /**\n     * @dev Event for whitelist update\n     * @param purchaser who add to whitelist\n     * @param status of purchased for whitelist\n     */\n    event WhitelistUpdate(address indexed purchaser, bool status);\n\n    /**\n     * @dev Event for crowdsale finalize\n     */\n    event Finalized();\n\n    /**\n     * @param _cap ether cap for Crowdsale\n     * @param _rate Number of token units a buyer gets per wei\n     * @param _wallet Address where collected funds will be forwarded to\n     */\n    constructor(uint256 _cap, uint256 _rate, address _wallet, address _token) public {\n        require(_cap > 0);\n        require(_rate > 0);\n        require(_wallet != address(0));\n\n        cap = _cap;\n        rate = _rate;\n        wallet = _wallet;\n        token = GACR(_token);\n    }\n\n    /**\n     * @dev Check that sale is on\n     */\n    modifier saleIsOn() {\n        require(now > startTime && now < endTime);\n        _;\n    }\n\n    //note: only for test\n    //function setNowTime(uint value) public onlyOwner {\n    //    require(value != 0);\n    //    _nowTime = value;\n    //}\n\n    /**\n     * @dev Buy tokens\n     */\n    function buyTokens(address _beneficiary) saleIsOn public payable {\n        uint256 _weiAmount = msg.value;\n\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n        require(weiRaised.add(_weiAmount) <= cap);\n\n        require(stage==CrowdsaleStage.PreICO ||\n               (stage==CrowdsaleStage.ICO && isWhitelisted(_beneficiary)));\n\n        // calculate token amount to be created\n        uint256 _tokenAmount = _weiAmount.mul(rate);\n\n        // bonus calculation\n        uint256 bonusTokens = 0;\n        if (stage == CrowdsaleStage.PreICO) {\n            if (_tokenAmount >= 50e18 && _tokenAmount < 3000e18) {\n                bonusTokens = _tokenAmount.mul(23).div(100);\n            } else if (_tokenAmount >= 3000e18 && _tokenAmount < 15000e18) {\n                bonusTokens = _tokenAmount.mul(27).div(100);\n            } else if (_tokenAmount >= 15000e18 && _tokenAmount < 30000e18) {\n                bonusTokens = _tokenAmount.mul(30).div(100);\n            } else if (_tokenAmount >= 30000e18) {\n                bonusTokens = _tokenAmount.mul(35).div(100);\n            }\n        } else if (stage == CrowdsaleStage.ICO) {\n            uint256 _nowTime = now;\n\n            if (_nowTime >= 1531486800 && _nowTime < 1532696400) {\n                bonusTokens = _tokenAmount.mul(18).div(100);\n            } else if (_nowTime >= 1532696400 && _nowTime < 1533906000) {\n                bonusTokens = _tokenAmount.mul(15).div(100);\n            } else if (_nowTime >= 1533906000 && _nowTime < 1535115600) {\n                bonusTokens = _tokenAmount.mul(12).div(100);\n            } else if (_nowTime >= 1535115600 && _nowTime < 1536325200) {\n                bonusTokens = _tokenAmount.mul(9).div(100);\n            } else if (_nowTime >= 1536325200 && _nowTime < 1537534800) {\n                bonusTokens = _tokenAmount.mul(6).div(100);\n            } else if (_nowTime >= 1537534800 && _nowTime < endTime) {\n                bonusTokens = _tokenAmount.mul(3).div(100);\n            }\n        }\n        _tokenAmount += bonusTokens;\n\n        // check limit for sale\n        require(tokensForSale >= (token.totalSupply() + _tokenAmount));\n\n        // update state\n        weiRaised = weiRaised.add(_weiAmount);\n        token.mint(_beneficiary, _tokenAmount);\n\n        emit TokenPurchase(msg.sender, _beneficiary, _weiAmount, _tokenAmount);\n\n        wallet.transfer(_weiAmount);\n    }\n\n    /**\n     * @dev Payable function\n     */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @dev Change Crowdsale Stage.\n     * Options: PreICO, ICO\n     */\n    function setCrowdsaleStage(uint value) public onlyOwner {\n\n        CrowdsaleStage _stage;\n\n        if (uint256(CrowdsaleStage.PreICO) == value) {\n            _stage = CrowdsaleStage.PreICO;\n        } else if (uint256(CrowdsaleStage.ICO) == value) {\n            _stage = CrowdsaleStage.ICO;\n        }\n\n        stage = _stage;\n    }\n\n    /**\n     * @dev Set new rate (protection from strong volatility)\n     */\n    function setNewRate(uint _newRate) public onlyOwner {\n        require(_newRate > 0);\n        rate = _newRate;\n    }\n\n    /**\n     * @dev Set hard cap (protection from strong volatility)\n     */\n    function setHardCap(uint256 _newCap) public onlyOwner {\n        require(_newCap > 0);\n        cap = _newCap;\n    }\n\n    /**\n     * @dev Set new wallet\n     */\n    function changeWallet(address _newWallet) public onlyOwner {\n        require(_newWallet != address(0));\n        wallet = _newWallet;\n    }\n\n    /**\n     * @dev Add/Remove to whitelist array of addresses based on boolean status\n     */\n    function updateWhitelist(address[] addresses, bool status) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            address contributorAddress = addresses[i];\n            whitelist[contributorAddress] = status;\n            emit WhitelistUpdate(contributorAddress, status);\n        }\n    }\n\n    /**\n     * @dev Check that address is exist in whitelist\n     */\n    function isWhitelisted(address contributor) public constant returns (bool) {\n        return whitelist[contributor];\n    }\n\n    /**\n     * @dev Function to mint tokens\n     */\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n        return token.mint(_to, _amount);\n    }\n\n    /**\n     * @dev Return ownership to previous owner\n     */\n    function returnOwnership() onlyOwner public returns (bool) {\n        token.transferOwnership(owner);\n    }\n\n    /**\n     * @dev Finish Crowdsale\n     */\n    function finish(address _bountyFund, address _advisorsFund, address _ecosystemFund, address _teamFund) public onlyOwner {\n        require(_bountyFund != address(0));\n        require(_advisorsFund != address(0));\n        require(_ecosystemFund != address(0));\n        require(_teamFund != address(0));\n\n        emit Finalized();\n\n        // unsold tokens to ecosystem (perhaps further they will be burnt)\n        uint256 unsoldTokens = tokensForSale - token.totalSupply();\n        if (unsoldTokens > 0) {\n            tokensForEcosystem = tokensForEcosystem + unsoldTokens;\n        }\n\n        // distribute\n        token.mint(_bountyFund,tokensForBounty);\n        token.mint(_advisorsFund,tokensForAdvisors);\n        token.mint(_ecosystemFund,tokensForEcosystem);\n        token.mint(_teamFund,tokensForTeam);\n\n        // finish\n        token.finishMinting();\n\n        // freeze team tokens\n        token.setTeamAddress(_teamFund);\n    }\n}",
  "bytecode": "608060405260008060146101000a81548160ff0219169083600181111561002257fe5b02179055506a069e10de76676d08000000600155635abf6a30600255635bbddbb060035534801561005257600080fd5b506040516080806122cb83398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000841115156100e257600080fd5b6000831115156100f157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561012d57600080fd5b836008819055508260068190555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506120fb806101d06000396000f300608060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312aef8c314610154578063297d1a341461017f5780632c4e722e146101ae5780632d483bec146101d9578063355274ea1461020657806335b6a6c6146102315780633af32abf1461025c5780634042b66f146102b757806340c10f19146102e25780634c4cfc3b14610347578063521eb27314610372578063644280e2146103c95780638da5cb5b146103f457806398b9a2dc1461044b5780639b19251a1461048e578063a997f82f146104e9578063aff177ca14610516578063c040e6b814610588578063d18d944b146105c1578063e76b8126146105ee578063e831574214610691578063ec8ac4d8146106bc578063f2fde38b146106f2578063fc0c546a14610735578063fde83a341461078c575b610152336107b7565b005b34801561016057600080fd5b50610169610f16565b6040518082815260200191505060405180910390f35b34801561018b57600080fd5b50610194610f25565b604051808215151515815260200191505060405180910390f35b3480156101ba57600080fd5b506101c361107b565b6040518082815260200191505060405180910390f35b3480156101e557600080fd5b5061020460048036038101908080359060200190929190505050611081565b005b34801561021257600080fd5b5061021b6110f5565b6040518082815260200191505060405180910390f35b34801561023d57600080fd5b506102466110fb565b6040518082815260200191505060405180910390f35b34801561026857600080fd5b5061029d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061110a565b604051808215151515815260200191505060405180910390f35b3480156102c357600080fd5b506102cc611160565b6040518082815260200191505060405180910390f35b3480156102ee57600080fd5b5061032d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611166565b604051808215151515815260200191505060405180910390f35b34801561035357600080fd5b5061035c6112cb565b6040518082815260200191505060405180910390f35b34801561037e57600080fd5b506103876112d1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103d557600080fd5b506103de6112f7565b6040518082815260200191505060405180910390f35b34801561040057600080fd5b50610409611306565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045757600080fd5b5061048c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061132b565b005b34801561049a57600080fd5b506104cf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611406565b604051808215151515815260200191505060405180910390f35b3480156104f557600080fd5b5061051460048036038101908080359060200190929190505050611426565b005b34801561052257600080fd5b50610586600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035151590602001909291905050506114e0565b005b34801561059457600080fd5b5061059d611622565b604051808260018111156105ad57fe5b60ff16815260200191505060405180910390f35b3480156105cd57600080fd5b506105ec60048036038101908080359060200190929190505050611635565b005b3480156105fa57600080fd5b5061068f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116a9565b005b34801561069d57600080fd5b506106a6611ecc565b6040518082815260200191505060405180910390f35b6106f0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107b7565b005b3480156106fe57600080fd5b50610733600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611edb565b005b34801561074157600080fd5b5061074a612030565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079857600080fd5b506107a1612056565b6040518082815260200191505060405180910390f35b600080600080600254421180156107cf575060035442105b15156107da57600080fd5b349350600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561081957600080fd5b6000841415151561082957600080fd5b6008546108418560075461206590919063ffffffff16565b1115151561084e57600080fd5b6000600181111561085b57fe5b600060149054906101000a900460ff16600181111561087657fe5b14806108b7575060018081111561088957fe5b600060149054906101000a900460ff1660018111156108a457fe5b1480156108b657506108b58561110a565b5b5b15156108c257600080fd5b6108d76006548561208190919063ffffffff16565b925060009150600060018111156108ea57fe5b600060149054906101000a900460ff16600181111561090557fe5b1415610a4f576802b5e3af16b1880000831015801561092c575068a2a15d09519be0000083105b1561095f57610958606461094a60178661208190919063ffffffff16565b6120b990919063ffffffff16565b9150610a4a565b68a2a15d09519be000008310158015610981575069032d26d12e980b60000083105b156109b4576109ad606461099f601b8661208190919063ffffffff16565b6120b990919063ffffffff16565b9150610a49565b69032d26d12e980b60000083101580156109d7575069065a4da25d3016c0000083105b15610a0a57610a0360646109f5601e8661208190919063ffffffff16565b6120b990919063ffffffff16565b9150610a48565b69065a4da25d3016c0000083101515610a4757610a446064610a3660238661208190919063ffffffff16565b6120b990919063ffffffff16565b91505b5b5b5b610c3c565b600180811115610a5b57fe5b600060149054906101000a900460ff166001811115610a7657fe5b1415610c3b57429050635b48a2508110158015610a965750635b5b175081105b15610ac957610ac26064610ab460128661208190919063ffffffff16565b6120b990919063ffffffff16565b9150610c3a565b635b5b17508110158015610ae05750635b6d8c5081105b15610b1357610b0c6064610afe600f8661208190919063ffffffff16565b6120b990919063ffffffff16565b9150610c39565b635b6d8c508110158015610b2a5750635b80015081105b15610b5d57610b566064610b48600c8661208190919063ffffffff16565b6120b990919063ffffffff16565b9150610c38565b635b8001508110158015610b745750635b92765081105b15610ba757610ba06064610b9260098661208190919063ffffffff16565b6120b990919063ffffffff16565b9150610c37565b635b9276508110158015610bbe5750635ba4eb5081105b15610bf157610bea6064610bdc60068661208190919063ffffffff16565b6120b990919063ffffffff16565b9150610c36565b635ba4eb508110158015610c06575060035481105b15610c3557610c326064610c2460038661208190919063ffffffff16565b6120b990919063ffffffff16565b91505b5b5b5b5b5b5b5b818301925082600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b505050506040513d6020811015610cf257600080fd5b8101908080519060200190929190505050016a17931c1885d0746c80000010151515610d1d57600080fd5b610d328460075461206590919063ffffffff16565b600781905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1986856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610dfd57600080fd5b505af1158015610e11573d6000803e3d6000fd5b505050506040513d6020811015610e2757600080fd5b8101908080519060200190929190505050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188686604051808381526020018281526020019250505060405180910390a3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015610f0e573d6000803e3d6000fd5b505050505050565b6a17931c1885d0746c80000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f8257600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561106057600080fd5b505af1158015611074573d6000803e3d6000fd5b5050505090565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110dc57600080fd5b6000811115156110eb57600080fd5b8060068190555050565b60085481565b6a027b46536c66c8e300000081565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60075481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c357600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561128857600080fd5b505af115801561129c573d6000803e3d6000fd5b505050506040513d60208110156112b257600080fd5b8101908080519060200190929190505050905092915050565b60015481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6a013da329b633647180000081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561138657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156113c257600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60096020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561148357600080fd5b816000600181111561149157fe5b14156114a057600090506114b9565b816001808111156114ad57fe5b14156114b857600190505b5b80600060146101000a81548160ff021916908360018111156114d757fe5b02179055505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561153e57600080fd5b600091505b835182101561161c57838281518110151561155a57fe5b90602001906020020151905082600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fe79695dad1622e5cfb085702e2abebcb33fd471154ab1504f4c883df61e3e53b84604051808215151515815260200191505060405180910390a28180600101925050611543565b50505050565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561169057600080fd5b60008111151561169f57600080fd5b8060088190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561174257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561177e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156117ba57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156117f657600080fd5b7f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a1600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118a857600080fd5b505af11580156118bc573d6000803e3d6000fd5b505050506040513d60208110156118d257600080fd5b81019080805190602001909291905050506a17931c1885d0746c80000003905060008111156119075780600154016001819055505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19866a013da329b63364718000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156119d757600080fd5b505af11580156119eb573d6000803e3d6000fd5b505050506040513d6020811015611a0157600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19856a027b46536c66c8e30000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611ae357600080fd5b505af1158015611af7573d6000803e3d6000fd5b505050506040513d6020811015611b0d57600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19846001546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611be657600080fd5b505af1158015611bfa573d6000803e3d6000fd5b505050506040513d6020811015611c1057600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19836a0771d2fa45345aa90000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611cf257600080fd5b505af1158015611d06573d6000803e3d6000fd5b505050506040513d6020811015611d1c57600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d64bcb46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611db457600080fd5b505af1158015611dc8573d6000803e3d6000fd5b505050506040513d6020811015611dde57600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636690864e836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611ead57600080fd5b505af1158015611ec1573d6000803e3d6000fd5b505050505050505050565b6a295be96e6406697200000081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f3657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f7257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6a0771d2fa45345aa900000081565b6000818301905082811015151561207857fe5b80905092915050565b60008083141561209457600090506120b3565b81830290508183828115156120a557fe5b041415156120af57fe5b8090505b92915050565b600081838115156120c657fe5b049050929150505600a165627a7a723058209eb8daaf59735983ff79b60f43ef281a25094ee99d0befee9cb508d1fb79e92b0029000000000000000000000000000000000000000000000f1678619d52360800000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000dfc4bccf1aec515932c2d1ae499f92bb4ce041130000000000000000000000009b60f708738ac99d6b2e298651612f174be475ba",
  "constructorArguments": "000000000000000000000000000000000000000000000f1678619d52360800000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000dfc4bccf1aec515932c2d1ae499f92bb4ce041130000000000000000000000009b60f708738ac99d6b2e298651612f174be475ba"
}