{
  "address": "0x51452ac082539e7ca5da9a814123550208b7fb46",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-17\n*/\n\npragma solidity ^0.4.16;\n \ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n/**\n * owned是合约的管理者\n */\ncontract owned {\n    address public owner;\n \n    /**\n     * 初台化构造函数\n     */\n    function owned () public {\n        owner = msg.sender;\n    }\n \n    /**\n     * 判断当前合约调用者是否是合约的所有者\n     */\n    modifier onlyOwner {\n        require (msg.sender == owner);\n        _;\n    }\n \n    /**\n     * 合约的所有者指派一个新的管理员\n     * @param  newOwner address 新的管理员帐户地址\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n        owner = newOwner;\n      }\n    }\n}\n \n/**\n * 基础代币合约\n */\ncontract TokenERC20 {\n    string public name; //发行的代币名称\n    string public symbol; //发行的代币符号\n    uint8 public decimals = 18;  //代币单位，展示的小数点后面多少个0。\n    uint256 public totalSupply; //发行的代币总量\n \n    /*记录所有余额的映射*/\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n \n    /* 在区块链上创建一个事件，用以通知客户端*/\n    //转帐通知事件\n    event Transfer(address indexed from, address indexed to, uint256 value);  \n    event Burn(address indexed from, uint256 value);  //减去用户余额事件\n \n    /* 初始化合约，并且把初始的所有代币都给这合约的创建者\n     * @param initialSupply 代币的总数\n     * @param tokenName 代币名称\n     * @param tokenSymbol 代币符号\n     */\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n        //初始化总量\n        totalSupply = initialSupply * 10 ** uint256(decimals);   \n        //给指定帐户初始化代币总量，初始化用于奖励合约创建者\n        balanceOf[msg.sender] = totalSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n    }\n \n \n    /**\n     * 私有方法从一个帐户发送给另一个帐户代币\n     * @param  _from address 发送代币的地址\n     * @param  _to address 接受代币的地址\n     * @param  _value uint256 接受代币的数量\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n \n      //避免转帐的地址是0x0\n      require(_to != 0x0);\n \n      //检查发送者是否拥有足够余额\n      require(balanceOf[_from] >= _value);\n \n      //检查是否溢出\n      require(balanceOf[_to] + _value > balanceOf[_to]);\n \n      //保存数据用于后面的判断\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\n \n      //从发送者减掉发送额\n      balanceOf[_from] -= _value;\n \n      //给接收者加上相同的量\n      balanceOf[_to] += _value;\n \n      //通知任何监听该交易的客户端\n      Transfer(_from, _to, _value);\n \n      //判断买、卖双方的数据是否和转换前一致\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n \n    }\n \n    /**\n     * 从主帐户合约调用者发送给别人代币\n     * @param  _to address 接受代币的地址\n     * @param  _value uint256 接受代币的数量\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n \n    /**\n     * 从某个指定的帐户中，向另一个帐户发送代币\n     * 调用过程，会检查设置的允许最大交易额\n     * @param  _from address 发送者地址\n     * @param  _to address 接受者地址\n     * @param  _value uint256 要转移的代币数量\n     * @return success        是否交易成功\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        //检查发送者是否拥有足够余额\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n \n    /**\n     * 设置帐户允许支付的最大金额\n     * 一般在智能合约的时候，避免支付过多，造成风险\n     * @param _spender 帐户地址\n     * @param _value 金额\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n \n    /**\n     * 设置帐户允许支付的最大金额\n     * 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作\n     * @param _spender 帐户地址\n     * @param _value 金额\n     * @param _extraData 操作的时间\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n \n    /**\n     * 减少代币调用者的余额\n     * 操作以后是不可逆的\n     * @param _value 要删除的数量\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        //检查帐户余额是否大于要减去的值\n        require(balanceOf[msg.sender] >= _value);\n        //给指定帐户减去余额\n        balanceOf[msg.sender] -= _value;\n        //代币问题做相应扣除\n        totalSupply -= _value;\n        Burn(msg.sender, _value);\n        return true;\n    }\n \n    /**\n     * 删除帐户的余额（含其他帐户）\n     * 删除以后是不可逆的\n     * @param _from 要操作的帐户地址\n     * @param _value 要减去的数量\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        //检查帐户余额是否大于要减去的值\n        require(balanceOf[_from] >= _value);\n        //检查 其他帐户 的余额是否够使用\n        require(_value <= allowance[_from][msg.sender]);\n        //减掉代币\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        //更新总量\n        totalSupply -= _value;\n        Burn(_from, _value);\n        return true;\n    }\n}\n \n/**\n * 代币增发、\n * 代币冻结、\n * 代币自动销售和购买、\n * 高级代币功能\n */\ncontract MyAdvancedToken is owned, TokenERC20 {\n \n    //卖出的汇率,一个代币，可以卖出多少个以太币，单位是wei\n    uint256 public sellPrice;\n \n    //买入的汇率,1个以太币，可以买几个代币\n    uint256 public buyPrice;\n \n    //是否冻结帐户的列表\n    mapping (address => bool) public frozenAccount;\n \n    //定义一个事件，当有资产被冻结的时候，通知正在监听事件的客户端\n    event FrozenFunds(address target, bool frozen);\n \n \n    /*初始化合约，并且把初始的所有的令牌都给这合约的创建者\n     * @param initialSupply 所有币的总数\n     * @param tokenName 代币名称\n     * @param tokenSymbol 代币符号\n     */\n        function MyAdvancedToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n \n \n    /**\n     * 私有方法，从指定帐户转出余额\n     * @param  _from address 发送代币的地址\n     * @param  _to address 接受代币的地址\n     * @param  _value uint256 接受代币的数量\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n \n        //避免转帐的地址是0x0\n        require (_to != 0x0);\n \n        //检查发送者是否拥有足够余额\n        require (balanceOf[_from] > _value);\n \n        //检查是否溢出\n        require (balanceOf[_to] + _value > balanceOf[_to]);\n \n        //检查 冻结帐户\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n \n        //从发送者减掉发送额\n        balanceOf[_from] -= _value;\n \n        //给接收者加上相同的量\n        balanceOf[_to] += _value;\n \n        //通知任何监听该交易的客户端\n        Transfer(_from, _to, _value);\n \n    }\n \n    /**\n     * 合约拥有者，可以为指定帐户创造一些代币\n     * @param  target address 帐户地址\n     * @param  mintedAmount uint256 增加的金额(单位是wei)\n     */\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n \n        //给指定地址增加代币，同时总量也相加\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n \n \n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n \n    /**\n     * 增加冻结帐户名称\n     *\n     * 你可能需要监管功能以便你能控制谁可以/谁不可以使用你创建的代币合约\n     *\n     * @param  target address 帐户地址\n     * @param  freeze bool    是否冻结\n     */\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n \n    /**\n     * 设置买卖价格\n     *\n     * 如果你想让ether(或其他代币)为你的代币进行背书,以便可以市场价自动化买卖代币,我们可以这么做。如果要使用浮动的价格，也可以在这里设置\n     *\n     * @param newSellPrice 新的卖出价格\n     * @param newBuyPrice 新的买入价格\n     */\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n \n    /**\n     * 使用以太币购买代币\n     */\n    function buy() payable public {\n      uint amount = msg.value / buyPrice;\n \n      _transfer(this, msg.sender, amount);\n    }\n \n    /**\n     * @dev 卖出代币\n     * @return 要卖出的数量(单位是wei)\n     */\n    function sell(uint256 amount) public {\n \n        //检查合约的余额是否充足\n        require(this.balance >= amount * sellPrice);\n \n        _transfer(msg.sender, this, amount);\n \n        msg.sender.transfer(amount * sellPrice);\n    }\n}",
  "bytecode": "60606040526012600260006101000a81548160ff021916908360ff16021790555034156200002c57600080fd5b6040516200122f3803806200122f833981016040528080519060200190919080518201919060200180518201919050505b600260009054906101000a900460ff1660ff16600a0a8302600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160009080519060200190620000d9929190620000fd565b508060019080519060200190620000f2929190620000fd565b505b505050620001ac565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014057805160ff191683800117855562000171565b8280016001018555821562000171579182015b828111156200017057825182559160200191906001019062000153565b5b50905062000180919062000184565b5090565b620001a991905b80821115620001a55760008160009055506001016200018b565b5090565b90565b61107380620001bc6000396000f300606060405236156100b8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bd578063095ea7b31461014c57806318160ddd146101a657806323b872dd146101cf578063313ce5671461024857806342966c681461027757806370a08231146102b257806379cc6790146102ff57806395d89b4114610359578063a9059cbb146103e8578063cae9ca511461042a578063dd62ed3e146104c7575b600080fd5b34156100c857600080fd5b6100d0610533565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101115780820151818401525b6020810190506100f5565b50505050905090810190601f16801561013e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015757600080fd5b61018c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105d1565b604051808215151515815260200191505060405180910390f35b34156101b157600080fd5b6101b961065f565b6040518082815260200191505060405180910390f35b34156101da57600080fd5b61022e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610665565b604051808215151515815260200191505060405180910390f35b341561025357600080fd5b61025b610793565b604051808260ff1660ff16815260200191505060405180910390f35b341561028257600080fd5b61029860048080359060200190919050506107a6565b604051808215151515815260200191505060405180910390f35b34156102bd57600080fd5b6102e9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ab565b6040518082815260200191505060405180910390f35b341561030a57600080fd5b61033f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108c3565b604051808215151515815260200191505060405180910390f35b341561036457600080fd5b61036c610ade565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ad5780820151818401525b602081019050610391565b50505050905090810190601f1680156103da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f357600080fd5b610428600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b7c565b005b341561043557600080fd5b6104ad600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b8c565b604051808215151515815260200191505060405180910390f35b34156104d257600080fd5b61051d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d0b565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105c95780601f1061059e576101008083540402835291602001916105c9565b820191906000526020600020905b8154815290600101906020018083116105ac57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106f257600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610787848484610d30565b600190505b9392505050565b600260009054906101000a900460ff1681565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156107f657600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b919050565b60046020528060005260406000206000915090505481565b600081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561091357600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561099e57600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b92915050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b745780601f10610b4957610100808354040283529160200191610b74565b820191906000526020600020905b815481529060010190602001808311610b5757829003601f168201915b505050505081565b610b87338383610d30565b5b5050565b600080849050610b9c85856105d1565b15610d02578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c975780820151818401525b602081019050610c7b565b50505050905090810190601f168015610cc45780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610ce557600080fd5b6102c65a03f11515610cf657600080fd5b50505060019150610d03565b5b509392505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610d5757600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610da557600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610e3357600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540114151561104057fe5b5b505050505600a165627a7a72305820c08bc901fc4bf43268c7ac3c765df42985119bf0712811c7e700a35d63e69a9f00290000000000000000000000000000000000000000000000000000000001406f40000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000085a69446f6e67426900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035a44420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000001406f40000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000085a69446f6e67426900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035a44420000000000000000000000000000000000000000000000000000000000"
}