{
  "address": "0x2396fbc0e2e3ae4b7206ebdb5706e2a5920349cb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Color Coin",
  "contractName": "ColorCoin",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-14\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract ERC20 {\n\n    // Get the total token supply\n    function totalSupply() public view returns (uint256);\n\n    // Get the account balance of another account with address _owner\n    function balanceOf(address who) public view returns (uint256);\n\n    // Send _value amount of tokens to address _to\n    function transfer(address to, uint256 value) public returns (bool);\n\n    // Send _value amount of tokens from address _from to address _to\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    // this function is required for some DEX functionality\n    function approve(address spender, uint256 value) public returns (bool);\n\n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address owner, address spender) public view returns (uint256);\n\n    // Triggered when tokens are transferred.\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed owner,address indexed spender,uint256 value);\n}\n\n\n/// @title Implementation of basic ERC20 function.\n/// @notice The only difference from most other ERC20 contracts is that we introduce 2 superusers - the founder and the admin.\ncontract _Base20 is ERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  mapping(address => uint256) internal accounts;\n\n  address internal admin;\n\n  address payable internal founder;\n\n  uint256 internal __totalSupply;\n\n  constructor(uint256 _totalSupply,\n    address payable _founder,\n    address _admin) public {\n      __totalSupply = _totalSupply;\n      admin = _admin;\n      founder = _founder;\n      accounts[founder] = __totalSupply;\n      emit Transfer(address(0), founder, accounts[founder]);\n    }\n\n    // define onlyAdmin\n    modifier onlyAdmin {\n      require(admin == msg.sender);\n      _;\n    }\n\n    // define onlyFounder\n    modifier onlyFounder {\n      require(founder == msg.sender);\n      _;\n    }\n\n    // Change founder\n    function changeFounder(address payable who) onlyFounder public {\n      founder = who;\n    }\n\n    // show founder address\n    function getFounder() onlyFounder public view returns (address) {\n      return founder;\n    }\n\n    // Change admin\n    function changeAdmin(address who) public {\n      require(who == founder || who == admin);\n      admin = who;\n    }\n\n    // show admin address\n    function getAdmin() public view returns (address) {\n      require(msg.sender == founder || msg.sender == admin);\n      return admin;\n    }\n\n    //\n    // ERC20 spec.\n    //\n    function totalSupply() public view returns (uint256) {\n      return __totalSupply;\n    }\n\n    // ERC20 spec.\n    function balanceOf(address _owner) public view returns (uint256) {\n      return accounts[_owner];\n    }\n\n    function _transfer(address _from, address _to, uint256 _value)\n    internal returns (bool) {\n      require(_to != address(0));\n\n      require(_value <= accounts[_from]);\n\n      // This should go first. If SafeMath.add fails, the sender's balance is not changed\n      accounts[_to] = accounts[_to].add(_value);\n      accounts[_from] = accounts[_from].sub(_value);\n\n      emit Transfer(_from, _to, _value);\n\n      return true;\n    }\n    // ERC20 spec.\n    function transfer(address _to, uint256 _value) public returns (bool) {\n      return _transfer(msg.sender, _to, _value);\n    }\n\n    // ERC20 spec.\n    function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool) {\n      require(_value <= allowed[_from][msg.sender]);\n\n      // _transfer is either successful, or throws.\n      _transfer(_from, _to, _value);\n\n      allowed[_from][msg.sender] -= _value;\n      emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\n\n      return true;\n    }\n\n    // ERC20 spec.\n    function approve(address _spender, uint256 _value) public returns (bool) {\n      allowed[msg.sender][_spender] = _value;\n      emit Approval(msg.sender, _spender, _value);\n      return true;\n    }\n\n    // ERC20 spec.\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n      return allowed[_owner][_spender];\n    }\n}\n\n\n/// @title Admin can suspend specific wallets in cases of misbehaving or theft.\n/// @notice This contract implements methods to lock tranfers, either globally or for specific accounts.\ncontract _Suspendable is _Base20 {\n  /// @dev flag whether transfers are allowed on global scale.\n  ///    When `isTransferable` is `false`, all transfers between wallets are blocked.\n  bool internal isTransferable = false;\n  /// @dev set of suspended wallets.\n  ///   When `suspendedAddresses[wallet]` is `true`, the `wallet` can't both send and receive COLs.\n  mapping(address => bool) internal suspendedAddresses;\n\n  /// @notice Sets total supply and the addresses of super users - founder and admin.\n  /// @param _totalSupply Total amount of Color Coin tokens available.\n  /// @param _founder Address of the founder wallet\n  /// @param _admin Address of the admin wallet\n  constructor(uint256 _totalSupply,\n    address payable _founder,\n    address _admin) public _Base20(_totalSupply, _founder, _admin)\n  {\n  }\n\n  /// @dev specifies that the marked method could be used only when transfers are enabled.\n  ///   Founder can always transfer\n  modifier transferable {\n    require(isTransferable || msg.sender == founder);\n    _;\n  }\n\n  /// @notice Getter for the global flag `isTransferable`.\n  /// @dev Everyone is allowed to view it.\n  function isTransferEnabled() public view returns (bool) {\n    return isTransferable;\n  }\n\n  /// @notice Enable tranfers globally.\n  ///   Note that suspended acccounts remain to be suspended.\n  /// @dev Sets the global flag `isTransferable` to `true`.\n  function enableTransfer() onlyAdmin public {\n    isTransferable = true;\n  }\n\n  /// @notice Disable tranfers globally.\n  ///   All transfers between wallets are blocked.\n  /// @dev Sets the global flag `isTransferable` to `false`.\n  function disableTransfer() onlyAdmin public {\n    isTransferable = false;\n  }\n\n  /// @notice Check whether an address is suspended.\n  /// @dev Everyone can check any address they want.\n  /// @param _address wallet to check\n  /// @return returns `true` if the wallet `who` is suspended.\n  function isSuspended(address _address) public view returns(bool) {\n    return suspendedAddresses[_address];\n  }\n\n  /// @notice Suspend an individual wallet.\n  /// @dev Neither the founder nor the admin could be suspended.\n  /// @param who  address of the wallet to suspend.\n  function suspend(address who) onlyAdmin public {\n    if (who == founder || who == admin) {\n      return;\n    }\n    suspendedAddresses[who] = true;\n  }\n\n  /// @notice Unsuspend an individual wallet\n  /// @param who  address of the wallet to unsuspend.\n  function unsuspend(address who) onlyAdmin public {\n    suspendedAddresses[who] = false;\n  }\n\n  //\n  // Update of ERC20 functions\n  //\n\n  /// @dev Internal function for transfers updated.\n  ///   Neither source nor destination of the transfer can be suspended.\n  function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n    require(!isSuspended(_to));\n    require(!isSuspended(_from));\n\n    return super._transfer(_from, _to, _value);\n  }\n\n  /// @notice `transfer` can't happen when transfers are disabled globally\n  /// @dev added modifier `transferable`.\n  function transfer(address _to, uint256 _value) public transferable returns (bool) {\n    return _transfer(msg.sender, _to, _value);\n  }\n\n  /// @notice `transferFrom` can't happen when transfers are disabled globally\n  /// @dev added modifier `transferable`.\n  function transferFrom(address _from, address _to, uint256 _value) public transferable returns (bool) {\n    require(!isSuspended(msg.sender));\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  // ERC20 spec.\n  /// @notice `approve` can't happen when transfers disabled globally\n  ///   Suspended users are not allowed to do approvals as well.\n  /// @dev  Added modifier `transferable`.\n  function approve(address _spender, uint256 _value) public transferable returns (bool) {\n    require(!isSuspended(msg.sender));\n    return super.approve(_spender, _value);\n  }\n\n  /// @notice Change founder. New founder must not be suspended.\n  function changeFounder(address payable who) onlyFounder public {\n    require(!isSuspended(who));\n    super.changeFounder(who);\n  }\n\n  /// @notice Change admin. New admin must not be suspended.\n  function changeAdmin(address who) public {\n    require(!isSuspended(who));\n    super.changeAdmin(who);\n  }\n}\n\n\n/// @title Advanced functions for Color Coin token smart contract.\n/// @notice Implements functions for private ICO and super users.\n/// @dev Not intended for reuse.\ncontract ColorCoinBase is _Suspendable {\n\n  /// @dev Represents a lock-up period.\n  struct LockUp {\n    /// @dev end of the period, in seconds since the epoch.\n    uint256 unlockDate;\n    /// @dev amount of coins to be unlocked at the end of the period.\n    uint256 amount;\n  }\n\n  /// @dev Represents a wallet with lock-up periods.\n  struct Investor {\n    /// @dev initial amount of locked COLs\n    uint256 initialAmount;\n    /// @dev current amount of locked COLs\n    uint256 lockedAmount;\n    /// @dev current lock-up period, index in the array `lockUpPeriods`\n    uint256 currentLockUpPeriod;\n    /// @dev the list of lock-up periods\n    LockUp[] lockUpPeriods;\n  }\n\n  /// @dev Entry in the `adminTransferLog`, that stores the history of admin operations.\n  struct AdminTransfer {\n    /// @dev the wallet, where COLs were withdrawn from\n    address from;\n    /// @dev the wallet, where COLs were deposited to\n    address to;\n    /// @dev amount of coins transferred\n    uint256 amount;\n    /// @dev the reason, why super user made this transfer\n    string  reason;\n  }\n\n  /// @notice The event that is fired when a lock-up period expires for a certain wallet.\n  /// @param  who the wallet where the lock-up period expired\n  /// @param  period  the number of the expired period\n  /// @param  amount  amount of unlocked coins.\n  event Unlock(address who, uint256 period, uint256 amount);\n\n  /// @notice The event that is fired when a super user makes transfer.\n  /// @param  from the wallet, where COLs were withdrawn from\n  /// @param  to  the wallet, where COLs were deposited to\n  /// @param  requestedAmount  amount of coins, that the super user requested to transfer\n  /// @param  returnedAmount  amount of coins, that were actually transferred\n  /// @param  reason  the reason, why super user made this transfer\n  event SuperAction(address from, address to, uint256 requestedAmount, uint256 returnedAmount, string reason);\n\n  /// @dev  set of wallets with lock-up periods\n  mapping (address => Investor) internal investors;\n\n  /// @dev amount of Color Coins locked in lock-up wallets.\n  ///   It is used to calculate circulating supply.\n  uint256 internal totalLocked;\n\n  /// @dev the list of transfers performed by super users\n  AdminTransfer[] internal adminTransferLog;\n\n  /// @notice Sets total supply and the addresses of super users - founder and admin.\n  /// @param _totalSupply Total amount of Color Coin tokens available.\n  /// @param _founder Address of the founder wallet\n  /// @param _admin Address of the admin wallet\n  constructor(uint256 _totalSupply,\n    address payable _founder,\n    address _admin\n  ) public _Suspendable (_totalSupply, _founder, _admin)\n  {\n  }\n\n  //\n  // ERC20 spec.\n  //\n\n  /// @notice Returns the balance of a wallet.\n  ///   For wallets with lock-up the result of this function inludes both free floating and locked COLs.\n  /// @param _owner The address of a wallet.\n  function balanceOf(address _owner) public view returns (uint256) {\n    return accounts[_owner] + investors[_owner].lockedAmount;\n  }\n\n  /// @dev Performs transfer from one wallet to another.\n  ///   The maximum amount of COLs to transfer equals to `balanceOf(_from) - getLockedAmount(_from)`.\n  ///   This function unlocks COLs if any of lock-up periods expired at the moment\n  ///   of the transaction execution.\n  ///   Calls `Suspendable._transfer` to do the actual transfer.\n  ///   This function is used by ERC20 `transfer` function.\n  /// @param  _from   wallet from which tokens are withdrawn.\n  /// @param  _to   wallet to which tokens are deposited.\n  /// @param  _value  amount of COLs to transfer.\n  function _transfer(address _from, address _to, uint256 _value)\n  internal returns (bool) {\n    if (hasLockup(_from)) {\n      tryUnlock(_from);\n    }\n    super._transfer(_from, _to, _value);\n  }\n\n  /// @notice The founder sends COLs to early investors and sets lock-up periods.\n  ///   Initially all distributed COL's are locked.\n  /// @dev  Only founder can call this function.\n  /// @param _to  address of the wallet that receives the COls.\n  /// @param _value amount of COLs that founder sends to the investor's wallet.\n  /// @param unlockDates array of lock-up period dates.\n  ///   Each date is in seconds since the epoch. After `unlockDates[i]` is expired,\n  ///   the corresponding `amounts[i]` amount of COLs gets unlocked.\n  ///   After expiring the last date in this array all COLs become unlocked.\n  /// @param amounts array of COL amounts to unlock.\n  function distribute(address _to, uint256 _value,\n      uint256[] memory unlockDates, uint256[] memory amounts\n    ) onlyFounder public returns (bool) {\n    // We distribute invested coins to new wallets only\n    require(balanceOf(_to) == 0);\n    require(_value <= accounts[founder]);\n    require(unlockDates.length == amounts.length);\n\n    // We don't check that unlock dates strictly increase.\n    // That doesn't matter. It will work out in tryUnlock function.\n\n    // We don't check that amounts in total equal to _value.\n    // tryUnlock unlocks no more that _value anyway.\n\n    investors[_to].initialAmount = _value;\n    investors[_to].lockedAmount = _value;\n    investors[_to].currentLockUpPeriod = 0;\n\n    for (uint256 i=0; i<unlockDates.length; i++) {\n      investors[_to].lockUpPeriods.push(LockUp(unlockDates[i], amounts[i]));\n    }\n\n    // ensureLockUp(_to);\n    accounts[founder] -= _value;\n    emit Transfer(founder, _to, _value);\n    totalLocked = totalLocked.add(_value);\n    // Check the lock-up periods. If the leading periods are 0 or already expired\n    // unlock corresponding coins.\n    tryUnlock(_to);\n    return true;\n  }\n\n  /// @notice Returns `true` if the wallet has locked COLs\n  /// @param _address address of the wallet.\n  /// @return `true` if the wallet has locked COLs and `false` otherwise.\n  function hasLockup(address _address) public view returns(bool) {\n    return (investors[_address].lockedAmount > 0);\n  }\n\n  //\n  // Unlock operations\n  //\n\n  /// @dev tells whether the wallet still has lockup and number of seconds until unlock date.\n  /// @return locked if `locked` is true, the wallet still has a lockup period, otherwise all lockups expired.\n  /// @return seconds amount of time in seconds until unlock date. Zero means that it has expired,\n  ///   and the user can invoke `doUnlock` to release corresponding coins.\n  function _nextUnlockDate(address who) internal view returns (bool, uint256) {\n    if (!hasLockup(who)) {\n      return (false, 0);\n    }\n\n    uint256 i = investors[who].currentLockUpPeriod;\n    // This must not happen! but still...\n    // If all lockup periods have expired, but there are still locked coins,\n    // tell the user to unlock.\n    if (i == investors[who].lockUpPeriods.length) return (true, 0);\n\n    if (now < investors[who].lockUpPeriods[i].unlockDate) {\n      // If the next unlock date is in the future, return the number of seconds left\n      return (true, investors[who].lockUpPeriods[i].unlockDate - now);\n    } else {\n      // The current unlock period has expired.\n      return (true, 0);\n    }\n  }\n\n  /// @notice tells the wallet owner whether the wallet still has lockup and number of seconds until unlock date.\n  /// @return locked if `locked` is true, the wallet still has a lockup period, otherwise all lockups expired.\n  /// @return seconds amount of time in seconds until unlock date. Zero means that it has expired,\n  ///   and the user can invoke `doUnlock` to release corresponding coins.\n  function nextUnlockDate() public view returns (bool, uint256) {\n    return _nextUnlockDate(msg.sender);\n  }\n\n  /// @notice tells to the admin whether the wallet still has lockup and number of seconds until unlock date.\n  /// @return locked if `locked` is true, the wallet still has a lockup period, otherwise all lockups expired.\n  /// @return seconds amount of time in seconds until unlock date. Zero means that it has expired,\n  ///   and the user can invoke `doUnlock` to release corresponding coins.\n  function nextUnlockDate_Admin(address who) public view onlyAdmin returns (bool, uint256) {\n    return _nextUnlockDate(who);\n  }\n\n  /// @notice the wallet owner signals that the next unlock period has passed, and some coins could be unlocked\n  function doUnlock() public {\n    tryUnlock(msg.sender);\n  }\n\n  /// @notice admin unlocks coins in the wallet, if any\n  /// @param who the wallet to unlock coins\n  function doUnlock_Admin(address who) public onlyAdmin {\n    tryUnlock(who);\n  }\n  /// @notice Returns the amount of locked coins in the wallet.\n  ///   This function tells the amount of coins to the wallet owner only.\n  /// @return amount of locked COLs by `now`.\n  function getLockedAmount() public view returns (uint256) {\n    return investors[msg.sender].lockedAmount;\n  }\n\n  /// @notice Returns the amount of locked coins in the wallet.\n  /// @return amount of locked COLs by `now`.\n  function getLockedAmount_Admin(address who) public view onlyAdmin returns (uint256) {\n    return investors[who].lockedAmount;\n  }\n\n  function tryUnlock(address _address) internal {\n    if (!hasLockup(_address)) {\n      return ;\n    }\n\n    uint256 amount = 0;\n    uint256 i;\n    uint256 start = investors[_address].currentLockUpPeriod;\n    uint256 end = investors[_address].lockUpPeriods.length;\n\n    for ( i = start;\n          i < end;\n          i++)\n    {\n      if (investors[_address].lockUpPeriods[i].unlockDate <= now) {\n        amount += investors[_address].lockUpPeriods[i].amount;\n      } else {\n        break;\n      }\n    }\n\n    if (i == investors[_address].lockUpPeriods.length) {\n      // all unlock periods expired. Unlock all\n      amount = investors[_address].lockedAmount;\n    } else if (amount > investors[_address].lockedAmount) {\n      amount = investors[_address].lockedAmount;\n    }\n\n    if (amount > 0 || i > start) {\n      investors[_address].lockedAmount = investors[_address].lockedAmount.sub(amount);\n      investors[_address].currentLockUpPeriod = i;\n      accounts[_address] = accounts[_address].add(amount);\n      emit Unlock(_address, i, amount);\n      totalLocked = totalLocked.sub(amount);\n    }\n  }\n\n  //\n  // Circulating supply\n  //\n\n  /// @notice Returns the circulating supply of Color Coins.\n  ///   It consists of all unlocked coins in user wallets.\n  function circulatingSupply() public view returns(uint256) {\n    return __totalSupply.sub(accounts[founder]).sub(totalLocked);\n  }\n\n  //\n  // Release contract\n  //\n\n  /// @notice Calls `selfdestruct` operator and transfers all Ethers to the founder (if any)\n  function destroy() public onlyAdmin {\n    selfdestruct(founder);\n  }\n}\n\n\n/// @title Dedicated methods for Pixel program\n/// @notice Pixels are a type of “airdrop” distributed to all Color Coin wallet holders,\n///   five Pixels a day. They are awarded on a periodic basis. Starting from Sunday GMT 0:00,\n///   the Pixels have a lifespan of 24 hours. Pixels in their original form do not have any value.\n///   The only way Pixels have value is by sending them to other wallet holders.\n///   Pixels must be sent to another person’s account within 24 hours or they will become void.\n///   Each user can send up to five Pixels to a single account per week. Once a wallet holder receives Pixels,\n///   the Pixels will become Color Coins. The received Pixels may be converted to Color Coins\n///   on weekly basis, after Saturday GMT 24:00.\n/// @dev Pixel distribution might require thousands and tens of thousands transactions.\n///   The methods in this contract consume less gas compared to batch transactions.\ncontract ColorCoinWithPixel is ColorCoinBase {\n\n  address internal pixelAccount;\n\n  /// @dev The rate to convert pixels to Color Coins\n  uint256 internal pixelConvRate;\n\n  /// @dev Methods could be called by either the founder of the dedicated account.\n  modifier pixelOrFounder {\n    require(msg.sender == founder || msg.sender == pixelAccount);\n    _;\n  }\n\n  function circulatingSupply() public view returns(uint256) {\n    uint256 result = super.circulatingSupply();\n    return result - balanceOf(pixelAccount);\n  }\n\n  /// @notice Initialises a newly created instance.\n  /// @dev Initialises Pixel-related data and transfers `_pixelCoinSupply` COLs\n  ///   from the `_founder` to `_pixelAccount`.\n  /// @param _totalSupply Total amount of Color Coin tokens available.\n  /// @param _founder Address of the founder wallet\n  /// @param _admin Address of the admin wallet\n  /// @param _pixelCoinSupply Amount of tokens dedicated for Pixel program\n  /// @param _pixelAccount Address of the account that keeps coins for the Pixel program\n  constructor(uint256 _totalSupply,\n    address payable _founder,\n    address _admin,\n    uint256 _pixelCoinSupply,\n    address _pixelAccount\n  ) public ColorCoinBase (_totalSupply, _founder, _admin)\n  {\n    require(_pixelAccount != _founder);\n    require(_pixelAccount != _admin);\n\n    pixelAccount = _pixelAccount;\n    accounts[pixelAccount] = _pixelCoinSupply;\n    accounts[_founder] = accounts[_founder].sub(_pixelCoinSupply);\n    emit Transfer(founder, pixelAccount, accounts[pixelAccount]);\n  }\n\n  /// @notice Founder or the pixel account set the pixel conversion rate.\n  ///   Pixel team first sets this conversion rate and then start sending COLs\n  ///   in exchange of pixels that people have received.\n  /// @dev This rate is used in `sendCoinsForPixels` functions to calculate the amount\n  ///   COLs to transfer to pixel holders.\n  function setPixelConversionRate(uint256 _pixelConvRate) public pixelOrFounder {\n    pixelConvRate = _pixelConvRate;\n  }\n\n  /// @notice Get the conversion rate that was used in the most recent exchange of pixels to COLs.\n  function getPixelConversionRate() public view returns (uint256) {\n    return pixelConvRate;\n  }\n\n  /// @notice Distribute COL coins for pixels\n  ///   COLs are spent from `pixelAccount` wallet. The amount of COLs is equal to `getPixelConversionRate() * pixels`\n  /// @dev Only founder and pixel account can invoke this function.\n  /// @param pixels       Amount of pixels to exchange into COLs\n  /// @param destination  The wallet that holds the pixels.\n  function sendCoinsForPixels(\n    uint32 pixels, address destination\n  ) public pixelOrFounder {\n    uint256 coins = pixels*pixelConvRate;\n    if (coins == 0) return;\n\n    require(coins <= accounts[pixelAccount]);\n\n    accounts[destination] = accounts[destination].add(coins);\n    accounts[pixelAccount] -= coins;\n    emit Transfer(pixelAccount, destination, coins);\n  }\n\n  /// @notice Distribute COL coins for pixels to multiple users.\n  ///   This function consumes less gas compared to a batch transaction of `sendCoinsForPixels`.\n  ///   `pixels[i]` specifies the amount of pixels belonging to `destinations[i]` wallet.\n  ///   COLs are spent from `pixelAccount` wallet. The amount of COLs sent to i-th wallet is equal to `getPixelConversionRate() * pixels[i]`\n  /// @dev Only founder and pixel account can invoke this function.\n  /// @param pixels         Array of pixel amounts to exchange into COLs\n  /// @param destinations   Array of addresses of wallets that hold pixels.\n  function sendCoinsForPixels_Batch(\n    uint32[] memory pixels,\n    address[] memory destinations\n  ) public pixelOrFounder {\n    require(pixels.length == destinations.length);\n    uint256 total = 0;\n    for (uint256 i = 0; i < pixels.length; i++) {\n      uint256 coins = pixels[i]*pixelConvRate;\n      address dst = destinations[i];\n      accounts[dst] = accounts[dst].add(coins);\n      emit Transfer(pixelAccount, dst, coins);\n      total += coins;\n    }\n\n    require(total <= accounts[pixelAccount]);\n    accounts[pixelAccount] -= total;\n  }\n\n  /// @notice Distribute COL coins for pixels to multiple users.\n  ///   COLs are spent from `pixelAccount` wallet. The amount of COLs sent to each wallet is equal to `getPixelConversionRate() * pixels`\n  /// @dev The difference between `sendCoinsForPixels_Array` and `sendCoinsForPixels_Batch`\n  ///   is that all destination wallets hold the same amount of pixels.\n  ///   This optimization saves about 10% of gas compared to `sendCoinsForPixels_Batch`\n  ///   with the same amount of recipients.\n  /// @param pixels   Amount of pixels to exchange. All of `recipients` hold the same amount of pixels.\n  /// @param recipients Addresses of wallets, holding `pixels` amount of pixels.\n  function sendCoinsForPixels_Array(\n    uint32 pixels, address[] memory recipients\n  ) public pixelOrFounder {\n    uint256 coins = pixels*pixelConvRate;\n    uint256 total = coins * recipients.length;\n\n    if (total == 0) return;\n    require(total <= accounts[pixelAccount]);\n\n    for (uint256 i; i < recipients.length; i++) {\n      address dst = recipients[i];\n      accounts[dst] = accounts[dst].add(coins);\n      emit Transfer(pixelAccount, dst, coins);\n    }\n\n    accounts[pixelAccount] -= total;\n  }\n}\n\n\n/// @title Smart contract for Color Coin token.\n/// @notice Color is the next generation platform for high-performance sophisticated decentralized applications (dApps). https://www.colors.org/\n/// @dev Not intended for reuse.\ncontract ColorCoin is ColorCoinWithPixel {\n  /// @notice Token name\n  string public constant name = \"Color Coin\";\n\n  /// @notice Token symbol\n  string public constant symbol = \"CLR\";\n\n  /// @notice Precision in fixed point arithmetics\n  uint8 public constant decimals = 18;\n\n  /// @notice Initialises a newly created instance\n  /// @param _totalSupply Total amount of Color Coin tokens available.\n  /// @param _founder Address of the founder wallet\n  /// @param _admin Address of the admin wallet\n  /// @param _pixelCoinSupply Amount of tokens dedicated for Pixel program\n  /// @param _pixelAccount Address of the account that keeps coins for the Pixel program\n  constructor(uint256 _totalSupply,\n    address payable _founder,\n    address _admin,\n    uint256 _pixelCoinSupply,\n    address _pixelAccount\n  ) public ColorCoinWithPixel (_totalSupply, _founder, _admin, _pixelCoinSupply, _pixelAccount)\n  {\n  }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000019d971e4fe8401e74000000000000000000000000000000ea97cd483e86e70b594c243630061a4f170723bc000000000000000000000000ea97cd483e86e70b594c243630061a4f170723bc000000000000000000000000000000000000000000108b2a2c2802909400000000000000000000000000000076df774b5fc32ba4f210a0140c2e2517d2411e66"
}