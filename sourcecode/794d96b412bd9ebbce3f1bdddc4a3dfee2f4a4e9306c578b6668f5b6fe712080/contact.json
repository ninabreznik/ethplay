{
  "address": "0xf1e48f13768bd8114a530070b43257a63f24bb12",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BsktToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-24\n*/\n\npragma solidity 0.4.21;\n\n// File: zeppelin-solidity/contracts/ReentrancyGuard.sol\n\n/**\n * @title Helps contracts guard agains reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancy_lock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancy_lock);\n    reentrancy_lock = true;\n    _;\n    reentrancy_lock = false;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/BsktToken.sol\n\nlibrary AddressArrayUtils {\n\n    /// @return Returns index and ok for the first occurrence starting from\n    /// index 0\n    function index(address[] addresses, address a)\n        internal pure returns (uint, bool)\n    {\n        for (uint i = 0; i < addresses.length; i++) {\n            if (addresses[i] == a) {\n                return (i, true);\n            }\n        }\n        return (0, false);\n    }\n\n}\n\n\n/// @title BsktToken\n/// @notice Bskt tokens are transferable, and can be created and redeemed by\n/// anyone. To create, a user must approve the contract to move the underlying\n/// tokens, then call `create`.\n/// @author CryptoFin\ncontract BsktToken is StandardToken, DetailedERC20, Pausable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using AddressArrayUtils for address[];\n\n    struct TokenInfo {\n        address addr;\n        uint256 quantity;\n    }\n    uint256 public creationUnit;\n    TokenInfo[] public tokens;\n\n    event Create(address indexed creator, uint256 amount);\n    event Redeem(address indexed redeemer, uint256 amount, address[] skippedTokens);\n\n    /// @notice Requires value to be divisible by creationUnit\n    /// @param value Number to be checked\n    modifier requireMultiple(uint256 value) {\n        require((value % creationUnit) == 0);\n        _;\n    }\n\n    /// @notice Requires value to be non-zero\n    /// @param value Number to be checked\n    modifier requireNonZero(uint256 value) {\n        require(value > 0);\n        _;\n    }\n\n    /// @notice Initializes contract with a list of ERC20 token addresses and\n    /// corresponding minimum number of units required for a creation unit\n    /// @param addresses Addresses of the underlying ERC20 token contracts\n    /// @param quantities Number of token base units required per creation unit\n    /// @param _creationUnit Number of base units per creation unit\n    function BsktToken(\n        address[] addresses,\n        uint256[] quantities,\n        uint256 _creationUnit,\n        string _name,\n        string _symbol\n    ) DetailedERC20(_name, _symbol, 18) public {\n        require(addresses.length > 0);\n        require(addresses.length == quantities.length);\n        require(_creationUnit >= 1);\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            tokens.push(TokenInfo({\n                addr: addresses[i],\n                quantity: quantities[i]\n            }));\n        }\n\n        creationUnit = _creationUnit;\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /// @notice Creates Bskt tokens in exchange for underlying tokens. Before\n    /// calling, underlying tokens must be approved to be moved by the Bskt\n    /// contract. The number of approved tokens required depends on baseUnits.\n    /// @dev If any underlying tokens' `transferFrom` fails (eg. the token is\n    /// frozen), create will no longer work. At this point a token upgrade will\n    /// be necessary.\n    /// @param baseUnits Number of base units to create. Must be a multiple of\n    /// creationUnit.\n    function create(uint256 baseUnits)\n        external\n        whenNotPaused()\n        requireNonZero(baseUnits)\n        requireMultiple(baseUnits)\n    {\n        // Check overflow\n        require((totalSupply_ + baseUnits) > totalSupply_);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            TokenInfo memory token = tokens[i];\n            ERC20 erc20 = ERC20(token.addr);\n            uint256 amount = baseUnits.div(creationUnit).mul(token.quantity);\n            require(erc20.transferFrom(msg.sender, address(this), amount));\n        }\n\n        mint(msg.sender, baseUnits);\n        emit Create(msg.sender, baseUnits);\n    }\n\n    /// @notice Redeems Bskt tokens in exchange for underlying tokens\n    /// @param baseUnits Number of base units to redeem. Must be a multiple of\n    /// creationUnit.\n    /// @param tokensToSkip Underlying token addresses to skip redemption for.\n    /// Intended to be used to skip frozen or broken tokens which would prevent\n    /// all underlying tokens from being withdrawn due to a revert. Skipped\n    /// tokens are left in the Bskt contract and are unclaimable.\n    function redeem(uint256 baseUnits, address[] tokensToSkip)\n        external\n        requireNonZero(baseUnits)\n        requireMultiple(baseUnits)\n    {\n        require(baseUnits <= totalSupply_);\n        require(baseUnits <= balances[msg.sender]);\n        require(tokensToSkip.length <= tokens.length);\n        // Total supply check not required since a user would have to have\n        // balance greater than the total supply\n\n        // Burn before to prevent re-entrancy\n        burn(msg.sender, baseUnits);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            TokenInfo memory token = tokens[i];\n            ERC20 erc20 = ERC20(token.addr);\n            uint256 index;\n            bool ok;\n            (index, ok) = tokensToSkip.index(token.addr);\n            if (ok) {\n                continue;\n            }\n            uint256 amount = baseUnits.div(creationUnit).mul(token.quantity);\n            require(erc20.transfer(msg.sender, amount));\n        }\n        emit Redeem(msg.sender, baseUnits, tokensToSkip);\n    }\n\n    /// @return addresses Underlying token addresses\n    function tokenAddresses() external view returns (address[]){\n        address[] memory addresses = new address[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            addresses[i] = tokens[i].addr;\n        }\n        return addresses;\n    }\n\n    /// @return quantities Number of token base units required per creation unit\n    function tokenQuantities() external view returns (uint256[]){\n        uint256[] memory quantities = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            quantities[i] = tokens[i].quantity;\n        }\n        return quantities;\n    }\n\n    // @dev Mints new Bskt tokens\n    // @param to Address to mint to\n    // @param amount Amount to mint\n    // @return ok Whether the operation was successful\n    function mint(address to, uint256 amount) internal returns (bool) {\n        totalSupply_ = totalSupply_.add(amount);\n        balances[to] = balances[to].add(amount);\n        emit Transfer(address(0), to, amount);\n        return true;\n    }\n\n    // @dev Burns Bskt tokens\n    // @param from Address to burn from\n    // @param amount Amount to burn\n    // @return ok Whether the operation was successful\n    function burn(address from, uint256 amount) internal returns (bool) {\n        totalSupply_ = totalSupply_.sub(amount);\n        balances[from] = balances[from].sub(amount);\n        emit Transfer(from, address(0), amount);\n        return true;\n    }\n\n    // @notice Look up token quantity and whether token exists\n    // @param token Token address to look up\n    // @return (quantity, ok) Units of underlying token, and whether the\n    // token was found\n    function getQuantity(address token) internal view returns (uint256, bool) {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokens[i].addr == token) {\n                return (tokens[i].quantity, true);\n            }\n        }\n        return (0, false);\n    }\n\n    /// @notice Owner: Withdraw excess funds which don't belong to Bskt token\n    /// holders\n    /// @param token ERC20 token address to withdraw\n    function withdrawExcessToken(address token)\n        external\n        onlyOwner\n        nonReentrant\n    {\n        ERC20 erc20 = ERC20(token);\n        uint256 withdrawAmount;\n        uint256 amountOwned = erc20.balanceOf(address(this));\n        uint256 quantity;\n        bool ok;\n        (quantity, ok) = getQuantity(token);\n        if (ok) {\n            withdrawAmount = amountOwned.sub(\n                totalSupply_.div(creationUnit).mul(quantity)\n            );\n        } else {\n            withdrawAmount = amountOwned;\n        }\n        require(erc20.transfer(owner, withdrawAmount));\n    }\n\n    /// @dev Prevent Bskt tokens from being sent to the Bskt contract\n    /// @param _to The address to transfer tokens to\n    /// @param _value the amount of tokens to be transferred\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(this));\n        return super.transfer(_to, _value);\n    }\n\n    /// @dev Prevent Bskt tokens from being sent to the Bskt contract\n    /// @param _from The address to transfer tokens from\n    /// @param _to The address to transfer to\n    /// @param _value The amount of tokens to be transferred\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(this));\n        return super.transferFrom(_from, _to, _value);\n    }\n\n}",
  "bytecode": "60606040526000600560156101000a81548160ff0219169083151502179055506000600560166101000a81548160ff02191690831515021790555034156200004657600080fd5b60405162002c4238038062002c42833981016040528080518201919060200180518201919060200180519060200190919080518201919060200180518201919050506000828260128260039080519060200190620000a69291906200028e565b508160049080519060200190620000bf9291906200028e565b5080600560006101000a81548160ff021916908360ff16021790555050505033600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600086511115156200013057600080fd5b845186511415156200014157600080fd5b600184101515156200015257600080fd5b600090505b855181101562000249576007805480600101828162000177919062000315565b9160005260206000209060020201600060408051908101604052808a86815181101515620001a157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1681526020018986815181101515620001d557fe5b90602001906020020151815250909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050808060010191505062000157565b836006819055508260039080519060200190620002689291906200028e565b508160049080519060200190620002819291906200028e565b50505050505050620003c3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d157805160ff191683800117855562000302565b8280016001018555821562000302579182015b8281111562000301578251825591602001919060010190620002e4565b5b5090506200031191906200034a565b5090565b815481835581811511620003455760020281600202836000526020600020918201910162000344919062000372565b5b505050565b6200036f91905b808211156200036b57600081600090555060010162000351565b5090565b90565b620003c091905b80821115620003bc57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555060020162000379565b5090565b90565b61286f80620003d36000396000f300606060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101385780630959bd1a146101c6578063095ea7b3146101fd578063119e5cdf1461025757806318160ddd146102805780632075eec6146102a957806323b872dd14610313578063313ce5671461038c5780633f4ba83a146103bb5780634f64b2be146103d05780635c975abb1461043a578063661884631461046757806370a08231146104c1578063780900dc1461050e5780638456cb59146105315780638da5cb5b1461054657806395d89b411461059b578063a9059cbb14610629578063a9989b9314610683578063ce6b3467146106ed578063d73dd62314610726578063dd62ed3e14610780578063f2fde38b146107ec575b600080fd5b341561014357600080fd5b61014b610825565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018b578082015181840152602081019050610170565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d157600080fd5b6101fb600480803590602001909190803590602001908201803590602001919091929050506108c3565b005b341561020857600080fd5b61023d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bfb565b604051808215151515815260200191505060405180910390f35b341561026257600080fd5b61026a610ced565b6040518082815260200191505060405180910390f35b341561028b57600080fd5b610293610cf3565b6040518082815260200191505060405180910390f35b34156102b457600080fd5b6102bc610cfd565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102ff5780820151818401526020810190506102e4565b505050509050019250505060405180910390f35b341561031e57600080fd5b610372600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d99565b604051808215151515815260200191505060405180910390f35b341561039757600080fd5b61039f610dea565b604051808260ff1660ff16815260200191505060405180910390f35b34156103c657600080fd5b6103ce610dfd565b005b34156103db57600080fd5b6103f16004808035906020019091905050610ebd565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561044557600080fd5b61044d610f10565b604051808215151515815260200191505060405180910390f35b341561047257600080fd5b6104a7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f23565b604051808215151515815260200191505060405180910390f35b34156104cc57600080fd5b6104f8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111b4565b6040518082815260200191505060405180910390f35b341561051957600080fd5b61052f60048080359060200190919050506111fc565b005b341561053c57600080fd5b61054461149d565b005b341561055157600080fd5b61055961155e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105a657600080fd5b6105ae611584565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ee5780820151818401526020810190506105d3565b50505050905090810190601f16801561061b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561063457600080fd5b610669600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611622565b604051808215151515815260200191505060405180910390f35b341561068e57600080fd5b610696611671565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156106d95780820151818401526020810190506106be565b505050509050019250505060405180910390f35b34156106f857600080fd5b610724600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061175b565b005b341561073157600080fd5b610766600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611a12565b604051808215151515815260200191505060405180910390f35b341561078b57600080fd5b6107d6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c0e565b6040518082815260200191505060405180910390f35b34156107f757600080fd5b610823600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c95565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108bb5780601f10610890576101008083540402835291602001916108bb565b820191906000526020600020905b81548152906001019060200180831161089e57829003601f168201915b505050505081565b60006108cd6127eb565b600080600080886000811115156108e357600080fd5b896000600654828115156108f357fe5b0614151561090057600080fd5b6001548b1115151561091157600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b1115151561095e57600080fd5b6007805490508a8a90501115151561097557600080fd5b61097f338c611ded565b50600097505b600780549050881015610b7b576007888154811015156109a157fe5b90600052602060002090600202016040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050965086600001519550610a6987600001518b8b80806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050611f0d90919063ffffffff16565b80955081965050508315610a7c57610b6e565b610aa78760200151610a996006548e611f9690919063ffffffff16565b611fac90919063ffffffff16565b92508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610b4b57600080fd5b5af11515610b5857600080fd5b505050604051805190501515610b6d57600080fd5b5b8780600101985050610985565b3373ffffffffffffffffffffffffffffffffffffffff167f952b7243b53bb61160c8547e81432b1e2dd414de42f06b34aee5436e08d1bbcf8c8c8c60405180848152602001806020018281038252848482818152602001925060200280828437820191505094505050505060405180910390a25050505050505050505050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60065481565b6000600154905090565b610d0561281b565b610d0d61281b565b6000600780549050604051805910610d225750595b90808252806020026020018201604052509150600090505b600780549050811015610d9157600781815481101515610d5657fe5b9060005260206000209060020201600101548282815181101515610d7657fe5b90602001906020020181815250508080600101915050610d3a565b819250505090565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610dd657600080fd5b610de1848484611fe7565b90509392505050565b600560009054906101000a900460ff1681565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e5957600080fd5b600560159054906101000a900460ff161515610e7457600080fd5b6000600560156101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600781815481101515610ecc57fe5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600560159054906101000a900460ff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611034576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110c8565b61104783826123a190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006112066127eb565b600080600560159054906101000a900460ff1615151561122557600080fd5b8460008111151561123557600080fd5b8560006006548281151561124557fe5b0614151561125257600080fd5b600154876001540111151561126657600080fd5b600095505b60078054905086101561143b5760078681548110151561128757fe5b90600052602060002090600202016040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505094508460000151935061133485602001516113266006548a611f9690919063ffffffff16565b611fac90919063ffffffff16565b92508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561140c57600080fd5b5af1151561141957600080fd5b50505060405180519050151561142e57600080fd5b858060010196505061126b565b61144533886123ba565b503373ffffffffffffffffffffffffffffffffffffffff167fcc9018de05b5f497ee7618d8830568d8ac2d45d0671b73d8f71c67e824122ec7886040518082815260200191505060405180910390a250505050505050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f957600080fd5b600560159054906101000a900460ff1615151561151557600080fd5b6001600560156101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561161a5780601f106115ef5761010080835404028352916020019161161a565b820191906000526020600020905b8154815290600101906020018083116115fd57829003601f168201915b505050505081565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561165f57600080fd5b61166983836124da565b905092915050565b61167961282f565b61168161282f565b60006007805490506040518059106116965750595b90808252806020026020018201604052509150600090505b600780549050811015611753576007818154811015156116ca57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110151561170a57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506116ae565b819250505090565b6000806000806000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117bf57600080fd5b600560169054906101000a900460ff161515156117db57600080fd5b6001600560166101000a81548160ff0219169083151502179055508594508473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561189357600080fd5b5af115156118a057600080fd5b5050506040518051905092506118b5866126f9565b80925081935050508015611905576118fe6118ef836118e1600654600154611f9690919063ffffffff16565b611fac90919063ffffffff16565b846123a190919063ffffffff16565b9350611909565b8293505b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156119cd57600080fd5b5af115156119da57600080fd5b5050506040518051905015156119ef57600080fd5b6000600560166101000a81548160ff021916908315150217905550505050505050565b6000611aa382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127cd90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cf157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d2d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000611e04826001546123a190919063ffffffff16565b600181905550611e5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a190919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008060008090505b8451811015611f83578373ffffffffffffffffffffffffffffffffffffffff168582815181101515611f4457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415611f765780600192509250611f8e565b8080600101915050611f16565b600080819150925092505b509250929050565b60008183811515611fa357fe5b04905092915050565b6000806000841415611fc15760009150611fe0565b8284029050828482811515611fd257fe5b04141515611fdc57fe5b8091505b5092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561202457600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561207157600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156120fc57600080fd5b61214d826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121e0826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127cd90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122b182600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a190919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008282111515156123af57fe5b818303905092915050565b60006123d1826001546127cd90919063ffffffff16565b600181905550612428826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127cd90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561251757600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561256457600080fd5b6125b5826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612648826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127cd90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008060008090505b6007805490508110156127bc578373ffffffffffffffffffffffffffffffffffffffff1660078281548110151561273557fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156127af5760078181548110151561279257fe5b9060005260206000209060020201600101546001925092506127c7565b8080600101915050612702565b600080819150925092505b50915091565b60008082840190508381101515156127e157fe5b8091505092915050565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820b0f05353907f0e36f112352afa24bdd17feed83b95c2ffad6bec199d26183160002900000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000d26114cd6ee289accf82350c8d8487fedb8a0c07000000000000000000000000d4fa1460f537bb9085d22c7bccb5dd450ef28e3a0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000e0b7927c4af23765cb51314a0e0521a9645f0e2a000000000000000000000000744d70fdbe2ba4cf95131626614a1763df805b9e000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000e94327d07fc17907b4db788e5adf2ed424addff60000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200000000000000000000000000d4c435f5b09f855c3317c8524cb1f586e42795fa000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000131eae609a0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000001da791ca00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000028a44e71e5a0000000000000000000000000000000000000000000000000000006255805a84000000000000000000000000000000000000000000000000000000020fa33d64000000000000000000000000000000000000000000000000000000bb5f0f41470000000000000000000000000000000000000000000000000000001921f3796b0000000000000000000000000000000000000000000000000000010eef3ec6e90000000000000000000000000000000000000000000000000000000000000012457468657265756d31302051322d32303138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034531300000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000d26114cd6ee289accf82350c8d8487fedb8a0c07000000000000000000000000d4fa1460f537bb9085d22c7bccb5dd450ef28e3a0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000e0b7927c4af23765cb51314a0e0521a9645f0e2a000000000000000000000000744d70fdbe2ba4cf95131626614a1763df805b9e000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000e94327d07fc17907b4db788e5adf2ed424addff60000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200000000000000000000000000d4c435f5b09f855c3317c8524cb1f586e42795fa000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000131eae609a0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000001da791ca00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000028a44e71e5a0000000000000000000000000000000000000000000000000000006255805a84000000000000000000000000000000000000000000000000000000020fa33d64000000000000000000000000000000000000000000000000000000bb5f0f41470000000000000000000000000000000000000000000000000000001921f3796b0000000000000000000000000000000000000000000000000000010eef3ec6e90000000000000000000000000000000000000000000000000000000000000012457468657265756d31302051322d32303138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034531300000000000000000000000000000000000000000000000000000000000"
}