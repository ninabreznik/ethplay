{
  "address": "0x6f516e14fea609e510c4dcbfb45d9ccd46c39ef9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "readFiftyContract",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-10\n*/\n\npragma solidity ^0.5.3;\n\ncontract FiftyContract {\n\tmapping (address => mapping (uint => mapping (uint => mapping (uint => treeNode)))) public treeChildren;\n\tmapping (address => mapping (uint => bool)) public currentNodes;\n\tmapping (address => mapping (uint => uint)) public nodeIDIndex;\n\tmapping (address => uint) public membership;\n\tmapping(address => mapping(uint => uint)) public memberOrders;\n\tmapping (address => uint) public nodeReceivedETH;\n\tstruct treeNode {\n\t\t address payable ethAddress; \n\t\t uint nodeType; \n\t\t uint nodeID;\n\t}\n\tuint public spread;\n}\ncontract Adminstrator {\n  address public admin;\n  address payable public owner;\n\n  modifier onlyAdmin() { \n        require(msg.sender == admin || msg.sender == owner,\"Not authorized\"); \n        _;\n  } \n\n  constructor() public {\n    admin = msg.sender;\n\towner = msg.sender;\n  }\n\n  function transferAdmin(address newAdmin) public onlyAdmin {\n    admin = newAdmin; \n  }\n}\ncontract readFiftyContract is Adminstrator{\n\t\n\taddress public baseAddr = 0x874D72e8F9908fDC55a420Bead9A22a8A5b20D91;\n\tFiftyContract bcontract = FiftyContract(baseAddr);\n\t\n\tfunction setContract(address newAddr) public onlyAdmin {\n\t\tbaseAddr = newAddr;\n\t\tbcontract = FiftyContract(baseAddr);\n\t}\n\tfunction getReceivedETH(address r) public view returns (uint, uint, uint, uint, uint){\n\t\treturn ( bcontract.nodeReceivedETH(r) , bcontract.nodeIDIndex(r, 1 ether) \n\t\t, bcontract.nodeIDIndex(r, 2 ether) , bcontract.nodeIDIndex(r, 3 ether) \n\t\t, bcontract.nodeIDIndex(r, 5 ether) );\n\t}\n\tfunction getTree(address r, uint t, uint cc) public view returns(address[7] memory){\n\t\taddress[7] memory Adds;\n\t\tif(bcontract.nodeIDIndex(r,t) <= cc) return Adds;\n\t\t(,uint pp,) = bcontract.treeChildren(r,t,cc,0);\n\t\tif (pp!=0 || bcontract.nodeIDIndex(r,t) == (cc+1) ) Adds[0]=r;\n\t\telse return Adds;\n\t\tuint8 spread = uint8(bcontract.spread());\n\t\tfor (uint8 i=0; i < spread; i++) {\n\t\t    (address k,uint p,uint m) = bcontract.treeChildren(r,t,cc,i);\n\t\t\tif(p != 0){\n\t\t\t\tAdds[i+1]=k;\n\t\t\t\tfor (uint8 a=0; a < spread; a++) {\n\t\t\t\t    (address L,uint q,) = bcontract.treeChildren(k,p,m,a);    \n\t\t\t\t\tif(q != 0) Adds[i*2+a+3] = L;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Adds;\n\t}\n\tfunction getMemberOrder(address addr, uint orderID) public view returns (uint){\n\t\treturn bcontract.memberOrders(addr,orderID);\n\t}\n\t/*function getHistory(address r, uint s) public view returns (bool,uint8, uint8,uint256){\n\t\tif(bcontract.nodeLatestAction(r) <= s) return (false,0,0,0);\n\t\t(FiftyContract.nodeActionType aT, uint8 nP, uint256 tT) = bcontract.nodeActionHistory(r,s);\n\t\tuint8 actType;\n\t\tif(aT == FiftyContract.nodeActionType.joinMember) actType=0;\n\t\tif(aT == FiftyContract.nodeActionType.startTree) actType=1;\n\t\tif(aT == FiftyContract.nodeActionType.addNode) actType=2;\n\t\tif(aT == FiftyContract.nodeActionType.completeTree) actType=3;\n\t\treturn (true,actType,nP,tT);\n\t}*/\n\tfunction getCurrentTree(address r, uint t) public view returns(address[7] memory){\n\t\taddress[7] memory Adds;\n\t\tif(bcontract.nodeIDIndex(r,t) > (2 ** 32) -2 || !bcontract.currentNodes(r,t)) \n\t\t    return Adds;\n\t\tuint cc=bcontract.nodeIDIndex(r,t) - 1;\n\t\tAdds[0]=r;\n\t\tuint8 spread = uint8(bcontract.spread());\n\t\tfor (uint8 i=0; i < spread; i++) {\n\t\t    (address k,uint p,uint m) = bcontract.treeChildren(r,t,cc,i);\n\t\t\tif(p != 0){\n\t\t\t\tAdds[i+1]=k;\n\t\t\t\tfor (uint8 a=0; a < spread; a++) {\n\t\t\t\t    (address L,uint q,) = bcontract.treeChildren(k,p,m,a);    \n\t\t\t\t\tif(q != 0) Adds[i*2+a+3] = L;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Adds;\n\t}\n\tfunction getMemberShip(address r) public view returns(uint){\n\t\treturn bcontract.membership(r);\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"getCurrentTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"}],\"name\":\"getReceivedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"getMemberOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"uint256\"},{\"name\":\"cc\",\"type\":\"uint256\"}],\"name\":\"getTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"}],\"name\":\"getMemberShip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "bytecode": "608060405260028054600160a060020a031990811673874d72e8f9908fdc55a420bead9a22a8a5b20d911791829055600380548216600160a060020a039390931692909217909155600080548216339081179091556001805490921617905561116b8061006d6000396000f3fe608060405234801561001057600080fd5b50600436106100bb576000357c0100000000000000000000000000000000000000000000000000000000900480638a88fb12116100835780638a88fb12146101e75780638da5cb5b1461022557806397be88621461022d578063f851a4401461025f578063ffb845bb14610267576100bb565b806313eb44f1146100c05780632005a9461461012457806375829def1461014857806375f890ab14610170578063845b07ab14610196575b600080fd5b6100ec600480360360408110156100d657600080fd5b50600160a060020a03813516906020013561028d565b604051808260e080838360005b838110156101115781810151838201526020016100f9565b5050505090500191505060405180910390f35b61012c6106e5565b60408051600160a060020a039092168252519081900360200190f35b61016e6004803603602081101561015e57600080fd5b5035600160a060020a03166106f4565b005b61016e6004803603602081101561018657600080fd5b5035600160a060020a03166107b3565b6101bc600480360360208110156101ac57600080fd5b5035600160a060020a031661087f565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b610213600480360360408110156101fd57600080fd5b50600160a060020a038135169060200135610b57565b60408051918252519081900360200190f35b61012c610bfb565b6100ec6004803603606081101561024357600080fd5b50600160a060020a038135169060208101359060400135610c0a565b61012c611075565b6102136004803603602081101561027d57600080fd5b5035600160a060020a0316611084565b610295611120565b61029d611120565b6003546040805160e060020a63aaf96581028152600160a060020a03878116600483015260248201879052915163fffffffe93929092169163aaf9658191604480820192602092909190829003018186803b1580156102fb57600080fd5b505afa15801561030f573d6000803e3d6000fd5b505050506040513d602081101561032557600080fd5b505111806103c95750600354604080517fa3d250f5000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152602482018790529151919092169163a3d250f5916044808301926020929190829003018186803b15801561039b57600080fd5b505afa1580156103af573d6000803e3d6000fd5b505050506040513d60208110156103c557600080fd5b5051155b156103d55790506106df565b6003546040805160e060020a63aaf96581028152600160a060020a038781166004830152602482018790529151600093600193169163aaf96581916044808301926020929190829003018186803b15801561042f57600080fd5b505afa158015610443573d6000803e3d6000fd5b505050506040513d602081101561045957600080fd5b5051600160a060020a038088168552600354604080517f5c25c76c0000000000000000000000000000000000000000000000000000000081529051949093039450600093911691635c25c76c916004808301926020929190829003018186803b1580156104c557600080fd5b505afa1580156104d9573d6000803e3d6000fd5b505050506040513d60208110156104ef57600080fd5b5051905060005b8160ff168160ff1610156106d8576003546040805160e060020a630c235b5b028152600160a060020a038a81166004830152602482018a90526044820187905260ff85166064830152915160009384938493911691630c235b5b91608480820192606092909190829003018186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b505050506040513d606081101561059b57600080fd5b5080516020820151604090920151909450909250905081156106cd57828760ff6001870116600781106105ca57fe5b600160a060020a03909216602092909202015260005b8560ff168160ff1610156106cb576003546040805160e060020a630c235b5b028152600160a060020a038781166004830152602482018790526044820186905260ff85166064830152915160009384931691630c235b5b916084808301926060929190829003018186803b15801561065757600080fd5b505afa15801561066b573d6000803e3d6000fd5b505050506040513d606081101561068157600080fd5b508051602090910151909250905080156106c157818a60ff600360028b0287010116600781106106ad57fe5b600160a060020a0390921660209290920201525b50506001016105e0565b505b5050506001016104f6565b5091925050505b92915050565b600254600160a060020a031681565b600054600160a060020a03163314806107175750600154600160a060020a031633145b151561078457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314806107d65750600154600160a060020a031633145b151561084357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03938416179182905560038054929093169116179055565b600354604080517f20f78e4a000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093849384938493849392909216916320f78e4a91602480820192602092909190829003018186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d602081101561091b57600080fd5b50516003546040805160e060020a63aaf96581028152600160a060020a038a81166004830152670de0b6b3a764000060248301529151919092169163aaf96581916044808301926020929190829003018186803b15801561097b57600080fd5b505afa15801561098f573d6000803e3d6000fd5b505050506040513d60208110156109a557600080fd5b50516003546040805160e060020a63aaf96581028152600160a060020a038b81166004830152671bc16d674ec8000060248301529151919092169163aaf96581916044808301926020929190829003018186803b158015610a0557600080fd5b505afa158015610a19573d6000803e3d6000fd5b505050506040513d6020811015610a2f57600080fd5b50516003546040805160e060020a63aaf96581028152600160a060020a038c811660048301526729a2241af62c000060248301529151919092169163aaf96581916044808301926020929190829003018186803b158015610a8f57600080fd5b505afa158015610aa3573d6000803e3d6000fd5b505050506040513d6020811015610ab957600080fd5b50516003546040805160e060020a63aaf96581028152600160a060020a038d81166004830152674563918244f4000060248301529151919092169163aaf96581916044808301926020929190829003018186803b158015610b1957600080fd5b505afa158015610b2d573d6000803e3d6000fd5b505050506040513d6020811015610b4357600080fd5b5051939a9299509097509550909350915050565b600354604080517f4113b61b000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820185905291516000939290921691634113b61b91604480820192602092909190829003018186803b158015610bc857600080fd5b505afa158015610bdc573d6000803e3d6000fd5b505050506040513d6020811015610bf257600080fd5b50519392505050565b600154600160a060020a031681565b610c12611120565b610c1a611120565b6003546040805160e060020a63aaf96581028152600160a060020a0388811660048301526024820188905291518693929092169163aaf9658191604480820192602092909190829003018186803b158015610c7457600080fd5b505afa158015610c88573d6000803e3d6000fd5b505050506040513d6020811015610c9e57600080fd5b505111610cac57905061106e565b6003546040805160e060020a630c235b5b028152600160a060020a0388811660048301526024820188905260448201879052600060648301819052925192931691630c235b5b91608480820192606092909190829003018186803b158015610d1357600080fd5b505afa158015610d27573d6000803e3d6000fd5b505050506040513d6060811015610d3d57600080fd5b5060200151905080151580610dd857506003546040805160e060020a63aaf96581028152600160a060020a0389811660048301526024820189905291516001880193929092169163aaf9658191604480820192602092909190829003018186803b158015610daa57600080fd5b505afa158015610dbe573d6000803e3d6000fd5b505050506040513d6020811015610dd457600080fd5b5051145b15610dee57600160a060020a0386168252610df6565b50905061106e565b600354604080517f5c25c76c0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691635c25c76c916004808301926020929190829003018186803b158015610e5457600080fd5b505afa158015610e68573d6000803e3d6000fd5b505050506040513d6020811015610e7e57600080fd5b5051905060005b8160ff168160ff161015611067576003546040805160e060020a630c235b5b028152600160a060020a038b81166004830152602482018b9052604482018a905260ff85166064830152915160009384938493911691630c235b5b91608480820192606092909190829003018186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d6060811015610f2a57600080fd5b50805160208201516040909201519094509092509050811561105c57828760ff600187011660078110610f5957fe5b600160a060020a03909216602092909202015260005b8560ff168160ff16101561105a576003546040805160e060020a630c235b5b028152600160a060020a038781166004830152602482018790526044820186905260ff85166064830152915160009384931691630c235b5b916084808301926060929190829003018186803b158015610fe657600080fd5b505afa158015610ffa573d6000803e3d6000fd5b505050506040513d606081101561101057600080fd5b5080516020909101519092509050801561105057818a60ff600360028b02870101166007811061103c57fe5b600160a060020a0390921660209290920201525b5050600101610f6f565b505b505050600101610e85565b5091925050505b9392505050565b600054600160a060020a031681565b600354604080517f772ccf5d000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163772ccf5d91602480820192602092909190829003018186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d602081101561111857600080fd5b505192915050565b60e060405190810160405280600790602082028038833950919291505056fea165627a7a723058204e4c6963188136c12311596eab2260268dc3d0b81ee2e18a93d4cf1da4b8358d0029"
}