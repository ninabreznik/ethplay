{
  "address": "0xcacc971f3da516da37d38766741b2ceab7334be6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TongCoin",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address payable from, address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event FrozenFunds(address target, bool freeze);\n    event ethReceipt(address from, uint value);\n    event sellLog(address seller, uint sell_token, uint in_eth);\n    event Paused(address account);\n    event Unpaused(address account);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n\ncontract ERC20 is IERC20 {\n\n    using SafeMath for uint256;\n\n    address payable private _owner;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    uint256 private _totalSupply;\n    bool private _paused;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    mapping (address => bool) public frozenAccount;\n\n    constructor() public{\n        _totalSupply = 10000000000e18;\n        _name = \"TONGCOIN\";\n        _symbol = \"TONG\";\n        _decimals = 18;\n        _balances[msg.sender] = _totalSupply;\n        _paused = false;\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"YOUR NOT OWNER\");\n        _;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address payable newOwner) internal {\n        require(newOwner != address(0),\"It's not a normal approach.\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused,\"This contract has been suspended.\");\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address user) public view returns (uint256) {\n        return _balances[user];\n    }\n\n    function allowance(address user, address spender) public view returns (uint256) {\n        return _allowed[user][spender];\n    }\n\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        require(_balances[msg.sender] >= value,\"be short of balance\");\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function burn(uint value) public whenNotPaused returns(bool) {\n         _burn(msg.sender, value);\n         return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address payable from, address to, uint256 value) public whenNotPaused returns (bool) {\n        require(_allowed[from][msg.sender] >= value,\"be short of balance\");\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    function mint(uint value) public whenNotPaused onlyOwner returns(bool){\n        _mint(msg.sender, value);\n        return true;\n    }\n\n    function burnFrom(address account, uint value) public returns(bool){\n        _burnFrom(account, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    function _transfer(address payable from, address to, uint256 value) internal {\n        require(to != address(0),\"be not a normal approach\");\n        require(to != from,\"You can't send it alone.\");\n        require(value <= _balances[from],\"be short of balance\");\n        require(!frozenAccount[from],\"This account has been frozen. [Sender]\");\n        require(!frozenAccount[to],\"This account has been frozen. [Recipient]\");\n        require(!frozenAccount[msg.sender],\"This account has been frozen. [Wallet]\");\n  \n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        \n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0),\"be not a normal approach\");\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0),\"be not a normal approach\");\n        require(value <= _balances[account],\"be short of balance\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    function _approve(address user, address spender, uint256 value) internal {\n        require(spender != address(0),\"be not a normal approach\");\n        require(user != address(0),\"be not a normal approach\");\n\n        _allowed[user][spender] = value;\n        emit Approval(user, spender, value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n\n    function freezeAccount(address target) onlyOwner public {\n        frozenAccount[target] = true;\n        emit FrozenFunds(target, true);\n    }\n    \n     function unfreezeAccount(address target) onlyOwner public {\n        frozenAccount[target] = false;\n        emit FrozenFunds(target, false);\n    }\n\n    function () payable external{\n    }  \n    \n    function dbsync(address[] memory _addrs, uint256[] memory _value) onlyOwner public{\n        for(uint i = 0; i < _addrs.length; i++){\n            _balances[_addrs[i]] = _value[i];\n        }\n    }\n}\n\ncontract TongCoin is ERC20{}",
  "bytecode": "60806040526b204fce5e3e250261100000006004819055506040805190810160405280600881526020017f544f4e47434f494e0000000000000000000000000000000000000000000000008152506001908051906020019062000064929190620001f2565b506040805190810160405280600481526020017f544f4e470000000000000000000000000000000000000000000000000000000081525060029080519060200190620000b2929190620001f2565b506012600360006101000a81548160ff021916908360ff160217905550600454600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3620002a1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023557805160ff191683800117855562000266565b8280016001018555821562000266579182015b828111156200026557825182559160200191906001019062000248565b5b50905062000275919062000279565b5090565b6200029e91905b808211156200029a57600081600090555060010162000280565b5090565b90565b6129d580620002b16000396000f3fe608060405260043610610183576000357c010000000000000000000000000000000000000000000000000000000090048063788649ea116100ee578063a0712d68116100a7578063b414d4b611610081578063b414d4b614610982578063dd62ed3e146109eb578063f26c159f14610a70578063f2fde38b14610ac157610183565b8063a0712d6814610849578063a457c2d71461089c578063a9059cbb1461090f57610183565b8063788649ea1461065857806379cc6790146106a95780638456cb591461071c5780638da5cb5b146107335780638f32d59b1461078a57806395d89b41146107b957610183565b80633f4ba83a116101405780633f4ba83a146103ea57806342966c681461040157806344b37e95146104545780635c975abb146105ad57806370a08231146105dc578063715018a61461064157610183565b806306fdde0314610185578063095ea7b31461021557806318160ddd1461028857806323b872dd146102b3578063313ce567146103465780633950935114610377575b005b34801561019157600080fd5b5061019a610b12565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101da5780820151818401526020810190506101bf565b50505050905090810190601f1680156102075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022157600080fd5b5061026e6004803603604081101561023857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bb4565b604051808215151515815260200191505060405180910390f35b34801561029457600080fd5b5061029d610bcb565b6040518082815260200191505060405180910390f35b3480156102bf57600080fd5b5061032c600480360360608110156102d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bd5565b604051808215151515815260200191505060405180910390f35b34801561035257600080fd5b5061035b610d96565b604051808260ff1660ff16815260200191505060405180910390f35b34801561038357600080fd5b506103d06004803603604081101561039a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dad565b604051808215151515815260200191505060405180910390f35b3480156103f657600080fd5b506103ff610e52565b005b34801561040d57600080fd5b5061043a6004803603602081101561042457600080fd5b8101908080359060200190929190505050610fb5565b604051808215151515815260200191505060405180910390f35b34801561046057600080fd5b506105ab6004803603604081101561047757600080fd5b810190808035906020019064010000000081111561049457600080fd5b8201836020820111156104a657600080fd5b803590602001918460208302840111640100000000831117156104c857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561052857600080fd5b82018360208201111561053a57600080fd5b8035906020019184602083028401116401000000008311171561055c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610fe6565b005b3480156105b957600080fd5b506105c26110f5565b604051808215151515815260200191505060405180910390f35b3480156105e857600080fd5b5061062b600480360360208110156105ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061110c565b6040518082815260200191505060405180910390f35b34801561064d57600080fd5b50610656611155565b005b34801561066457600080fd5b506106a76004803603602081101561067b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611290565b005b3480156106b557600080fd5b50610702600480360360408110156106cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113d7565b604051808215151515815260200191505060405180910390f35b34801561072857600080fd5b506107316113ed565b005b34801561073f57600080fd5b50610748611505565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079657600080fd5b5061079f61152e565b604051808215151515815260200191505060405180910390f35b3480156107c557600080fd5b506107ce611585565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561080e5780820151818401526020810190506107f3565b50505050905090810190601f16801561083b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561085557600080fd5b506108826004803603602081101561086c57600080fd5b8101908080359060200190929190505050611627565b604051808215151515815260200191505060405180910390f35b3480156108a857600080fd5b506108f5600480360360408110156108bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116d4565b604051808215151515815260200191505060405180910390f35b34801561091b57600080fd5b506109686004803603604081101561093257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611779565b604051808215151515815260200191505060405180910390f35b34801561098e57600080fd5b506109d1600480360360208110156109a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611863565b604051808215151515815260200191505060405180910390f35b3480156109f757600080fd5b50610a5a60048036036040811015610a0e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611883565b6040518082815260200191505060405180910390f35b348015610a7c57600080fd5b50610abf60048036036020811015610a9357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061190a565b005b348015610acd57600080fd5b50610b1060048036036020811015610ae457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a51565b005b606060018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610baa5780601f10610b7f57610100808354040283529160200191610baa565b820191906000526020600020905b815481529060010190602001808311610b8d57829003601f168201915b5050505050905090565b6000610bc1338484611ad9565b6001905092915050565b6000600454905090565b6000600560009054906101000a900460ff16151515610bf357600080fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610ce7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f62652073686f7274206f662062616c616e63650000000000000000000000000081525060200191505060405180910390fd5b610cf2848484611d0e565b610d8b8433610d8685600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229190919063ffffffff16565b611ad9565b600190509392505050565b6000600360009054906101000a900460ff16905090565b6000610e483384610e4385600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b390919063ffffffff16565b611ad9565b6001905092915050565b610e5a61152e565b1515610ece576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f594f5552204e4f54204f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900460ff161515610f35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061293d6021913960400191505060405180910390fd5b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000600560009054906101000a900460ff16151515610fd357600080fd5b610fdd33836122d4565b60019050919050565b610fee61152e565b1515611062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f594f5552204e4f54204f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b60008090505b82518110156110f057818181518110151561107f57fe5b9060200190602002015160066000858481518110151561109b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050611068565b505050565b6000600560009054906101000a900460ff16905090565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61115d61152e565b15156111d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f594f5552204e4f54204f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61129861152e565b151561130c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f594f5552204e4f54204f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5816000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a150565b60006113e3838361254a565b6001905092915050565b6113f561152e565b1515611469576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f594f5552204e4f54204f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900460ff1615151561148557600080fd5b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b606060028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561161d5780601f106115f25761010080835404028352916020019161161d565b820191906000526020600020905b81548152906001019060200180831161160057829003601f168201915b5050505050905090565b6000600560009054906101000a900460ff1615151561164557600080fd5b61164d61152e565b15156116c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f594f5552204e4f54204f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b6116cb33836125f1565b60019050919050565b600061176f338461176a85600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229190919063ffffffff16565b611ad9565b6001905092915050565b6000600560009054906101000a900460ff1615151561179757600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561184e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f62652073686f7274206f662062616c616e63650000000000000000000000000081525060200191505060405180910390fd5b611859338484611d0e565b6001905092915050565b60086020528060005260406000206000915054906101000a900460ff1681565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61191261152e565b1515611986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f594f5552204e4f54204f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a150565b611a5961152e565b1515611acd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f594f5552204e4f54204f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b611ad6816127b0565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611b7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6265206e6f742061206e6f726d616c20617070726f616368000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611c23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6265206e6f742061206e6f726d616c20617070726f616368000000000000000081525060200191505060405180910390fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611db3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6265206e6f742061206e6f726d616c20617070726f616368000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611e57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f596f752063616e27742073656e6420697420616c6f6e652e000000000000000081525060200191505060405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611f0e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f62652073686f7274206f662062616c616e63650000000000000000000000000081525060200191505060405180910390fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611fb3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806129846026913960400191505060405180910390fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515612058576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806129146029913960400191505060405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156120fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061295e6026913960400191505060405180910390fd5b61214f81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121e481600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b390919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008282111515156122a257600080fd5b600082840390508091505092915050565b60008082840190508381101515156122ca57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612379576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6265206e6f742061206e6f726d616c20617070726f616368000000000000000081525060200191505060405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515612430576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f62652073686f7274206f662062616c616e63650000000000000000000000000081525060200191505060405180910390fd5b6124458160045461229190919063ffffffff16565b60048190555061249d81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229190919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b61255482826122d4565b6125ed82336125e884600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229190919063ffffffff16565b611ad9565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612696576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6265206e6f742061206e6f726d616c20617070726f616368000000000000000081525060200191505060405180910390fd5b6126ab816004546122b390919063ffffffff16565b60048190555061270381600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b390919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f49742773206e6f742061206e6f726d616c20617070726f6163682e000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe54686973206163636f756e7420686173206265656e2066726f7a656e2e205b526563697069656e745d5468697320636f6e747261637420686173206265656e2073757370656e6465642e54686973206163636f756e7420686173206265656e2066726f7a656e2e205b57616c6c65745d54686973206163636f756e7420686173206265656e2066726f7a656e2e205b53656e6465725da165627a7a72305820c4603861ccc7b65cc72be2c06efad59586c1ea47c49d495c92d7ca9c0fd049d60029"
}