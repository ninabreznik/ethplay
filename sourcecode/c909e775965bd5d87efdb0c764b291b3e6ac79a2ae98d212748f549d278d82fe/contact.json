{
  "address": "0x6851a80b7655e36e1f04e383b5946dafe9c63ab2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LotteryFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n * to avoid typos.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    view\n    public\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    view\n    public\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    onlyOwner\n    public\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}\n\ncontract ClubAccessControl is Whitelist {\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n}\n\ncontract HKHcoinInterface {\n    mapping (address => uint256) public balanceOf;\n    function mintToken(address target, uint256 mintedAmount) public;\n    function burnFrom(address _from, uint256 _value) public returns (bool success);\n}\n\ncontract PlayerFactory is ClubAccessControl {\n    struct Player {\n        bool isFreezed;\n        bool isExist;\n    }\n\n    mapping (address => Player) public players;\n    HKHcoinInterface hkhconinContract;\n    uint initCoins = 1000000;\n\n    modifier onlyIfPlayerNotFreezed(address _playerAddress) { \n        require (!players[_playerAddress].isFreezed);\n        _; \n    }\n    \n    modifier onlyIfPlayerExist(address _playerAddress) { \n        require (players[_playerAddress].isExist);\n        _; \n    }\n\n    event NewPlayer(address indexed _playerAddress);\n\n    function setHKHcoinAddress(address _address) \n        external\n        onlyIfWhitelisted(msg.sender)\n    {\n        hkhconinContract = HKHcoinInterface(_address);\n    }\n\n    function getBalanceOfPlayer(address _playerAddress)\n        public\n        onlyIfPlayerExist(_playerAddress)\n        view\n        returns (uint)\n    {\n        return hkhconinContract.balanceOf(_playerAddress);\n    }\n\n    function joinClub(address _playerAddress)\n        external\n        onlyIfWhitelisted(msg.sender)\n        whenNotPaused\n    {\n        require(!players[_playerAddress].isExist);\n        players[_playerAddress] = Player(false, true);\n        hkhconinContract.mintToken(_playerAddress, initCoins);\n        emit NewPlayer(_playerAddress);\n    }\n\n    function reset(address _playerAddress)\n        external\n        onlyIfWhitelisted(msg.sender)\n        onlyIfPlayerExist(_playerAddress)\n        whenNotPaused\n    {\n        uint balance = hkhconinContract.balanceOf(_playerAddress);\n\n        if(balance > initCoins)\n            _destroy(_playerAddress, balance - initCoins);\n        else if(balance < initCoins)\n            _recharge(_playerAddress, initCoins - balance);\n\n        emit NewPlayer(_playerAddress);\n    }\n\n    function recharge(address _playerAddress, uint _amount)\n        public\n        onlyIfWhitelisted(msg.sender)\n        onlyIfPlayerExist(_playerAddress)\n        whenNotPaused\n    {\n        _recharge(_playerAddress, _amount);\n    }\n\n    function destroy(address _playerAddress, uint _amount)\n        public\n        onlyIfWhitelisted(msg.sender)\n        onlyIfPlayerExist(_playerAddress)\n        whenNotPaused\n    {\n        _destroy(_playerAddress, _amount);\n    }\n\n    function freezePlayer(address _playerAddress)\n        public\n        onlyIfWhitelisted(msg.sender)\n        onlyIfPlayerExist(_playerAddress)\n        whenNotPaused\n    {\n        players[_playerAddress].isFreezed = true;\n    }\n\n    function resumePlayer(address _playerAddress)\n        public\n        onlyIfWhitelisted(msg.sender)\n        onlyIfPlayerExist(_playerAddress)\n        whenNotPaused\n    {\n        players[_playerAddress].isFreezed = false;\n    }\n\n    function _recharge(address _playerAddress, uint _amount)\n        internal\n    {\n        hkhconinContract.mintToken(_playerAddress, _amount);\n    }\n\n    function _destroy(address _playerAddress, uint _amount)\n        internal\n    {\n        hkhconinContract.burnFrom(_playerAddress, _amount);\n    }\n}\n\n/**\n * \n */\ncontract LotteryFactory is PlayerFactory {\n\n    event BuyLottery(\n        uint32 _id,\n        address indexed _playerAddress,\n        string _betline,\n        string _place,\n        uint32 _betAmount,\n        uint32 indexed _date,\n        uint8 indexed _race\n    );\n\n    event Dividend(\n        uint32 _id,\n        uint32 _dividend\n    );\n\n    event Refund(\n        uint32 _id,\n        uint32 _refund\n    );\n\n    struct Lottery {\n        uint32 betAmount;\n        uint32 dividend;\n        uint32 refund;\n        uint32 date;\n        uint8 race;\n        bool isPaid;\n        string betline;\n        string place;\n    }\n\n    Lottery[] public lotteries;\n\n    mapping (uint => address) public lotteryToOwner;\n    mapping (address => uint) ownerLotteryCount;\n\n    constructor() public {\n        addAddressToWhitelist(msg.sender);\n    }\n\n    function getLotteriesByOwner(address _owner) \n        view \n        external \n        onlyIfPlayerExist(_owner) \n        returns(uint[]) \n    {\n        uint[] memory result = new uint[](ownerLotteryCount[_owner]);\n        uint counter = 0;\n        for (uint i = 0; i < lotteries.length; i++) {\n            if (lotteryToOwner[i] == _owner) {\n                result[counter] = i;\n                counter++;\n            }\n        }\n        return result;\n    }\n\n    function createLottery(\n        address _playerAddress,\n        string _betline, \n        string _place,\n        uint32 _betAmount,\n        uint32 _date,\n        uint8 _race\n    )\n        external\n        onlyIfWhitelisted(msg.sender)\n        onlyIfPlayerExist(_playerAddress)\n        onlyIfPlayerNotFreezed(_playerAddress)\n        whenNotPaused\n    {\n        uint32 id = uint32(lotteries.push(Lottery(_betAmount, 0, 0, _date, _race, false, _betline, _place))) - 1;\n        lotteryToOwner[id] = _playerAddress;\n        ownerLotteryCount[_playerAddress]++;\n        _destroy(_playerAddress, _betAmount);\n        emit BuyLottery(\n            id,\n            _playerAddress,\n            _betline,\n            _place,\n            _betAmount,\n            _date,\n            _race\n        );\n    }\n\n    function setDividendAndPayOut(\n        uint32 _id,\n        uint32 _dividend,\n        uint32 _refund\n    )\n        external\n        onlyIfWhitelisted(msg.sender)\n        whenNotPaused\n    {\n        if(lotteries[_id].isPaid == false) {\n            lotteries[_id].dividend = _dividend;\n            lotteries[_id].refund = _refund;\n\n            if(lotteries[_id].dividend > 0) {\n                emit Dividend(\n                    _id,\n                    lotteries[_id].dividend\n                );\n            }\n\n            if(lotteries[_id].refund > 0) {\n                emit Refund(\n                    _id,\n                    lotteries[_id].refund\n                );\n            }\n\n            _recharge(lotteryToOwner[_id], lotteries[_id].dividend + lotteries[_id].refund);\n            lotteries[_id].isPaid = true;\n        }\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"resumePlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"},{\"name\":\"_dividend\",\"type\":\"uint32\"},{\"name\":\"_refund\",\"type\":\"uint32\"}],\"name\":\"setDividendAndPayOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"name\":\"betAmount\",\"type\":\"uint32\"},{\"name\":\"dividend\",\"type\":\"uint32\"},{\"name\":\"refund\",\"type\":\"uint32\"},{\"name\":\"date\",\"type\":\"uint32\"},{\"name\":\"race\",\"type\":\"uint8\"},{\"name\":\"isPaid\",\"type\":\"bool\"},{\"name\":\"betline\",\"type\":\"string\"},{\"name\":\"place\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"joinClub\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recharge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"freezePlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_betline\",\"type\":\"string\"},{\"name\":\"_place\",\"type\":\"string\"},{\"name\":\"_betAmount\",\"type\":\"uint32\"},{\"name\":\"_date\",\"type\":\"uint32\"},{\"name\":\"_race\",\"type\":\"uint8\"}],\"name\":\"createLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getBalanceOfPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLotteriesByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"isFreezed\",\"type\":\"bool\"},{\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setHKHcoinAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_betline\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_place\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_date\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_race\",\"type\":\"uint8\"}],\"name\":\"BuyLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_dividend\",\"type\":\"uint32\"}],\"name\":\"Dividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_refund\",\"type\":\"uint32\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600260006101000a81548160ff021916908315150217905550620f42406005553480156200003357600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200008e3362000094640100000000026401000000009004565b620002ea565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620000f057600080fd5b62000140816040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525062000143640100000000026401000000009004565b50565b620001d2826001836040518082805190602001908083835b6020831015156200018257805182526020820191506020810190506020830392506200015b565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206200028c6401000000000262002e07179091906401000000009004565b8173ffffffffffffffffffffffffffffffffffffffff167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b838110156200024d57808201518184015260208101905062000230565b50505050905090810190601f1680156200027b5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b612f3680620002fa6000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303c638691461015957806304af7a201461019c5780630988ca8c146101ef5780631398e0761461027857806318b919e9146103ee5780631b49d82b1461047e578063217fe6c6146104c157806324953eaa14610562578063286dd3f5146105c857806336351c7c1461060b5780634296b4a7146106585780635c975abb1461069b5780636b8ab97d146106ca578063715018a61461070d5780637b9417c814610724578063840d7fb614610767578063852a6bd4146108075780638da5cb5b1461085e5780639b19251a146108b5578063a24835d114610910578063d1fd260e1461095d578063e2eb41ff146109f5578063e2ec6ec314610a5b578063eea6e72314610ac1578063ef65bdf214610b04578063f2fde38b14610b71575b600080fd5b34801561016557600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb4565b005b3480156101a857600080fd5b506101ed600480360381019080803563ffffffff169060200190929190803563ffffffff169060200190929190803563ffffffff169060200190929190505050610ccc565b005b3480156101fb57600080fd5b50610276600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611095565b005b34801561028457600080fd5b506102a360048036038101908080359060200190929190505050611116565b604051808963ffffffff1663ffffffff1681526020018863ffffffff1663ffffffff1681526020018763ffffffff1663ffffffff1681526020018663ffffffff1663ffffffff1681526020018560ff1660ff168152602001841515151581526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561034557808201518184015260208101905061032a565b50505050905090810190601f1680156103725780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156103ab578082015181840152602081019050610390565b50505050905090810190601f1680156103d85780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3480156103fa57600080fd5b506104036112f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610443578082015181840152602081019050610428565b50505050905090810190601f1680156104705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561048a57600080fd5b506104bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611330565b005b3480156104cd57600080fd5b50610548600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506115ab565b604051808215151515815260200191505060405180910390f35b34801561056e57600080fd5b506105c660048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611632565b005b3480156105d457600080fd5b50610609600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116ce565b005b34801561061757600080fd5b50610656600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061176b565b005b34801561066457600080fd5b50610699600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611833565b005b3480156106a757600080fd5b506106b061194b565b604051808215151515815260200191505060405180910390f35b3480156106d657600080fd5b5061070b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061195e565b005b34801561071957600080fd5b50610722611b92565b005b34801561073057600080fd5b50610765600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c94565b005b34801561077357600080fd5b50610805600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803563ffffffff169060200190929190803563ffffffff169060200190929190803560ff169060200190929190505050611d31565b005b34801561081357600080fd5b50610848600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121d4565b6040518082815260200191505060405180910390f35b34801561086a57600080fd5b50610873612332565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108c157600080fd5b506108f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612357565b604051808215151515815260200191505060405180910390f35b34801561091c57600080fd5b5061095b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061239f565b005b34801561096957600080fd5b5061099e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612467565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109e15780820151818401526020810190506109c6565b505050509050019250505060405180910390f35b348015610a0157600080fd5b50610a36600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125f6565b6040518083151515158152602001821515151581526020019250505060405180910390f35b348015610a6757600080fd5b50610abf60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612634565b005b348015610acd57600080fd5b50610b02600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126d0565b005b348015610b1057600080fd5b50610b2f60048036038101908080359060200190929190505050612755565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b7d57600080fd5b50610bb2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612788565b005b33610bf4816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515610c5057600080fd5b600260009054906101000a900460ff16151515610c6c57600080fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550505050565b33610d0c816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b600260009054906101000a900460ff16151515610d2857600080fd5b6000151560068563ffffffff16815481101515610d4157fe5b906000526020600020906003020160000160119054906101000a900460ff161515141561108f578260068563ffffffff16815481101515610d7e57fe5b906000526020600020906003020160000160046101000a81548163ffffffff021916908363ffffffff1602179055508160068563ffffffff16815481101515610dc357fe5b906000526020600020906003020160000160086101000a81548163ffffffff021916908363ffffffff160217905550600060068563ffffffff16815481101515610e0957fe5b906000526020600020906003020160000160049054906101000a900463ffffffff1663ffffffff161115610ec5577fe0e5db7a0d2ca5a295daf5a0026fffa40f1a5fdd2ce343c69a573927f8a023468460068663ffffffff16815481101515610e6e57fe5b906000526020600020906003020160000160049054906101000a900463ffffffff16604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390a15b600060068563ffffffff16815481101515610edc57fe5b906000526020600020906003020160000160089054906101000a900463ffffffff1663ffffffff161115610f98577f221b3ce8956df4b9cf69a447a1ad515f7228bb251da32a3de4c752fdf5dc82f58460068663ffffffff16815481101515610f4157fe5b906000526020600020906003020160000160089054906101000a900463ffffffff16604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390a15b61104f600760008663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660068663ffffffff16815481101515610fea57fe5b906000526020600020906003020160000160089054906101000a900463ffffffff1660068763ffffffff1681548110151561102157fe5b906000526020600020906003020160000160049054906101000a900463ffffffff160163ffffffff166127ef565b600160068563ffffffff1681548110151561106657fe5b906000526020600020906003020160000160116101000a81548160ff0219169083151502179055505b50505050565b611112826001836040518082805190602001908083835b6020831015156110d157805182526020820191506020810190506020830392506110ac565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206128d090919063ffffffff16565b5050565b60068181548110151561112557fe5b90600052602060002090600302016000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900463ffffffff16908060000160089054906101000a900463ffffffff169080600001600c9054906101000a900463ffffffff16908060000160109054906101000a900460ff16908060000160119054906101000a900460ff1690806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561124f5780601f106112245761010080835404028352916020019161124f565b820191906000526020600020905b81548152906001019060200180831161123257829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112ed5780601f106112c2576101008083540402835291602001916112ed565b820191906000526020600020905b8154815290600101906020018083116112d057829003601f168201915b5050505050905088565b6040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525081565b33611370816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b600260009054906101000a900460ff1615151561138c57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515156113e857600080fd5b604080519081016040528060001515815260200160011515815250600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550905050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c65068836005546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561154c57600080fd5b505af1158015611560573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f52e92d4898337244a39bd42674ac561eadfd3959e947deec1c0ab82dd58b5a7560405160405180910390a25050565b600061162a836001846040518082805190602001908083835b6020831015156115e957805182526020820191506020810190506020830392506115c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206128e990919063ffffffff16565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561168f57600080fd5b600090505b81518110156116ca576116bd82828151811015156116ae57fe5b906020019060200201516116ce565b8080600101915050611694565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172957600080fd5b611768816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250612942565b50565b336117ab816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b82600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16151561180757600080fd5b600260009054906101000a900460ff1615151561182357600080fd5b61182d84846127ef565b50505050565b33611873816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615156118cf57600080fd5b600260009054906101000a900460ff161515156118eb57600080fd5b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550505050565b600260009054906101000a900460ff1681565b6000336119a0816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b82600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615156119fc57600080fd5b600260009054906101000a900460ff16151515611a1857600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ad557600080fd5b505af1158015611ae9573d6000803e3d6000fd5b505050506040513d6020811015611aff57600080fd5b81019080805190602001909291905050509250600554831115611b2f57611b2a846005548503612a76565b611b49565b600554831015611b4857611b478484600554036127ef565b5b5b8373ffffffffffffffffffffffffffffffffffffffff167f52e92d4898337244a39bd42674ac561eadfd3959e947deec1c0ab82dd58b5a7560405160405180910390a250505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bed57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cef57600080fd5b611d2e816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250612b7b565b50565b600033611d73816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b89600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515611dcf57600080fd5b8a600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151515611e2c57600080fd5b600260009054906101000a900460ff16151515611e4857600080fd5b60016006610100604051908101604052808a63ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020018963ffffffff1681526020018860ff1681526020016000151581526020018e8e8080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505081526020018c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160106101000a81548160ff021916908360ff16021790555060a08201518160000160116101000a81548160ff02191690831515021790555060c082015181600101908051906020019061202f929190612e65565b5060e082015181600201908051906020019061204c929190612e65565b5050500393508b600760008663ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055506121098c8863ffffffff16612a76565b8460ff168663ffffffff168d73ffffffffffffffffffffffffffffffffffffffff167fc3bc8cc6238cfa4d5605573949d0190bdec10759f44769bd297b31b4f85295f0878f8f8f8f8f604051808763ffffffff1663ffffffff16815260200180602001806020018463ffffffff1663ffffffff16815260200183810383528888828181526020019250808284378201915050838103825286868281815260200192508082843782019150509850505050505050505060405180910390a4505050505050505050505050565b600081600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16151561223257600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156122ef57600080fd5b505af1158015612303573d6000803e3d6000fd5b505050506040513d602081101561231957600080fd5b8101908080519060200190929190505050915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612398826040805190810160405280600981526020017f77686974656c69737400000000000000000000000000000000000000000000008152506115ab565b9050919050565b336123df816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b82600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16151561243b57600080fd5b600260009054906101000a900460ff1615151561245757600080fd5b6124618484612a76565b50505050565b60608060008084600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615156124c957600080fd5b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040519080825280602002602001820160405280156125375781602001602082028038833980820191505090505b50935060009250600091505b6006805490508210156125ea578573ffffffffffffffffffffffffffffffffffffffff166007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156125dd578184848151811015156125c657fe5b906020019060200201818152505082806001019350505b8180600101925050612543565b83945050505050919050565b60036020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561269157600080fd5b600090505b81518110156126cc576126bf82828151811015156126b057fe5b90602001906020020151611c94565b8080600101915050612696565b5050565b33612710816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611095565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127e357600080fd5b6127ec81612caf565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c6506883836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156128b457600080fd5b505af11580156128c8573d6000803e3d6000fd5b505050505050565b6128da82826128e9565b15156128e557600080fd5b5050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6129bf826001836040518082805190602001908083835b60208310151561297e5780518252602082019150602081019050602083039250612959565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020612da990919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015612a38578082015181840152602081019050612a1d565b50505050905090810190601f168015612a655780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679083836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612b3b57600080fd5b505af1158015612b4f573d6000803e3d6000fd5b505050506040513d6020811015612b6557600080fd5b8101908080519060200190929190505050505050565b612bf8826001836040518082805190602001908083835b602083101515612bb75780518252602082019150602081019050602083039250612b92565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020612e0790919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b83811015612c71578082015181840152602081019050612c56565b50505050905090810190601f168015612c9e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612ceb57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ea657805160ff1916838001178555612ed4565b82800160010185558215612ed4579182015b82811115612ed3578251825591602001919060010190612eb8565b5b509050612ee19190612ee5565b5090565b612f0791905b80821115612f03576000816000905550600101612eeb565b5090565b905600a165627a7a72305820ddfd08937717f48ce3eb99b88a0256bd1b7fe83db42bacceebdc37eedb924d7d0029"
}