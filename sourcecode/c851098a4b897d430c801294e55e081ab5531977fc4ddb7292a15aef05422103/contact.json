{
  "address": "0x155d31ea88a110779b560689c6e33798b1a405f9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BTTSToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-11\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service v1.10\n//\n// https://github.com/bokkypoobah/BokkyPooBahsTokenTeleportationServiceSmartContract\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contracts that can have tokens approved, and then a function executed\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service Interface v1.10\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n// ----------------------------------------------------------------------------\ncontract BTTSTokenInterface is ERC20Interface {\n    uint public constant bttsVersion = 110;\n\n    bytes public constant signingPrefix = \"\\x19Ethereum Signed Message:\\n32\";\n    bytes4 public constant signedTransferSig = \"\\x75\\x32\\xea\\xac\";\n    bytes4 public constant signedApproveSig = \"\\xe9\\xaf\\xa7\\xa1\";\n    bytes4 public constant signedTransferFromSig = \"\\x34\\x4b\\xcc\\x7d\";\n    bytes4 public constant signedApproveAndCallSig = \"\\xf1\\x6f\\x9b\\x53\";\n\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event MinterUpdated(address from, address to);\n    event Mint(address indexed tokenOwner, uint tokens, bool lockAccount);\n    event MintingDisabled();\n    event TransfersEnabled();\n    event AccountUnlocked(address indexed tokenOwner);\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\n\n    // ------------------------------------------------------------------------\n    // signed{X} functions\n    // ------------------------------------------------------------------------\n    function signedTransferHash(address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n    function signedTransferCheck(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n    function signedTransfer(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n\n    function signedApproveHash(address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n    function signedApproveCheck(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n    function signedApprove(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n\n    function signedTransferFromHash(address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n    function signedTransferFromCheck(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n    function signedTransferFrom(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n\n    function signedApproveAndCallHash(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce) public view returns (bytes32 hash);\n    function signedApproveAndCallCheck(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n    function signedApproveAndCall(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n\n    function mint(address tokenOwner, uint tokens, bool lockAccount) public returns (bool success);\n    function unlockAccount(address tokenOwner) public;\n    function disableMinting() public;\n    function enableTransfers() public;\n\n    // ------------------------------------------------------------------------\n    // signed{X}Check return status\n    // ------------------------------------------------------------------------\n    enum CheckResult {\n        Success,                           // 0 Success\n        NotTransferable,                   // 1 Tokens not transferable yet\n        AccountLocked,                     // 2 Account locked\n        SignerMismatch,                    // 3 Mismatch in signing account\n        InvalidNonce,                      // 4 Invalid nonce\n        InsufficientApprovedTokens,        // 5 Insufficient approved tokens\n        InsufficientApprovedTokensForFees, // 6 Insufficient approved tokens for fees\n        InsufficientTokens,                // 7 Insufficient tokens\n        InsufficientTokensForFees,         // 8 Insufficient tokens for fees\n        OverflowError                      // 9 Overflow error\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service Library v1.00\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n// ----------------------------------------------------------------------------\nlibrary BTTSLib {\n    struct Data {\n        bool initialised;\n\n        // Ownership\n        address owner;\n        address newOwner;\n\n        // Minting and management\n        address minter;\n        bool mintable;\n        bool transferable;\n        mapping(address => bool) accountLocked;\n\n        // Token\n        string symbol;\n        string name;\n        uint8 decimals;\n        uint totalSupply;\n        mapping(address => uint) balances;\n        mapping(address => mapping(address => uint)) allowed;\n        mapping(address => uint) nextNonce;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Constants\n    // ------------------------------------------------------------------------\n    uint public constant bttsVersion = 110;\n    bytes public constant signingPrefix = \"\\x19Ethereum Signed Message:\\n32\";\n    bytes4 public constant signedTransferSig = \"\\x75\\x32\\xea\\xac\";\n    bytes4 public constant signedApproveSig = \"\\xe9\\xaf\\xa7\\xa1\";\n    bytes4 public constant signedTransferFromSig = \"\\x34\\x4b\\xcc\\x7d\";\n    bytes4 public constant signedApproveAndCallSig = \"\\xf1\\x6f\\x9b\\x53\";\n\n    // ------------------------------------------------------------------------\n    // Event\n    // ------------------------------------------------------------------------\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event MinterUpdated(address from, address to);\n    event Mint(address indexed tokenOwner, uint tokens, bool lockAccount);\n    event MintingDisabled();\n    event TransfersEnabled();\n    event AccountUnlocked(address indexed tokenOwner);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n\n    // ------------------------------------------------------------------------\n    // Initialisation\n    // ------------------------------------------------------------------------\n    function init(Data storage self, address owner, string symbol, string name, uint8 decimals, uint initialSupply, bool mintable, bool transferable) public {\n        require(!self.initialised);\n        self.initialised = true;\n        self.owner = owner;\n        self.symbol = symbol;\n        self.name = name;\n        self.decimals = decimals;\n        if (initialSupply > 0) {\n            self.balances[owner] = initialSupply;\n            self.totalSupply = initialSupply;\n            Mint(self.owner, initialSupply, false);\n            Transfer(address(0), self.owner, initialSupply);\n        }\n        self.mintable = mintable;\n        self.transferable = transferable;\n    }\n\n    // ------------------------------------------------------------------------\n    // Safe maths, inspired by OpenZeppelin\n    // ------------------------------------------------------------------------\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n\n    // ------------------------------------------------------------------------\n    // Ownership\n    // ------------------------------------------------------------------------\n    function transferOwnership(Data storage self, address newOwner) public {\n        require(msg.sender == self.owner);\n        self.newOwner = newOwner;\n    }\n    function acceptOwnership(Data storage self) public {\n        require(msg.sender == self.newOwner);\n        OwnershipTransferred(self.owner, self.newOwner);\n        self.owner = self.newOwner;\n        self.newOwner = address(0);\n    }\n    function transferOwnershipImmediately(Data storage self, address newOwner) public {\n        require(msg.sender == self.owner);\n        OwnershipTransferred(self.owner, newOwner);\n        self.owner = newOwner;\n        self.newOwner = address(0);\n    }\n\n    // ------------------------------------------------------------------------\n    // Minting and management\n    // ------------------------------------------------------------------------\n    function setMinter(Data storage self, address minter) public {\n        require(msg.sender == self.owner);\n        require(self.mintable);\n        MinterUpdated(self.minter, minter);\n        self.minter = minter;\n    }\n    function mint(Data storage self, address tokenOwner, uint tokens, bool lockAccount) public returns (bool success) {\n        require(self.mintable);\n        require(msg.sender == self.minter || msg.sender == self.owner);\n        if (lockAccount) {\n            self.accountLocked[tokenOwner] = true;\n        }\n        self.balances[tokenOwner] = safeAdd(self.balances[tokenOwner], tokens);\n        self.totalSupply = safeAdd(self.totalSupply, tokens);\n        Mint(tokenOwner, tokens, lockAccount);\n        Transfer(address(0), tokenOwner, tokens);\n        return true;\n    }\n    function unlockAccount(Data storage self, address tokenOwner) public {\n        require(msg.sender == self.owner);\n        require(self.accountLocked[tokenOwner]);\n        self.accountLocked[tokenOwner] = false;\n        AccountUnlocked(tokenOwner);\n    }\n    function disableMinting(Data storage self) public {\n        require(self.mintable);\n        require(msg.sender == self.minter || msg.sender == self.owner);\n        self.mintable = false;\n        if (self.minter != address(0)) {\n            MinterUpdated(self.minter, address(0));\n            self.minter = address(0);\n        }\n        MintingDisabled();\n    }\n    function enableTransfers(Data storage self) public {\n        require(msg.sender == self.owner);\n        require(!self.transferable);\n        self.transferable = true;\n        TransfersEnabled();\n    }\n\n    // ------------------------------------------------------------------------\n    // Other functions\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(Data storage self, address tokenAddress, uint tokens) public returns (bool success) {\n        require(msg.sender == self.owner);\n        return ERC20Interface(tokenAddress).transfer(self.owner, tokens);\n    }\n\n    // ------------------------------------------------------------------------\n    // ecrecover from a signature rather than the signature in parts [v, r, s]\n    // The signature format is a compact form {bytes32 r}{bytes32 s}{uint8 v}.\n    // Compact means, uint8 is not padded to 32 bytes.\n    //\n    // An invalid signature results in the address(0) being returned, make\n    // sure that the returned result is checked to be non-zero for validity\n    //\n    // Parts from https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n    // ------------------------------------------------------------------------\n    function ecrecoverFromSig(bytes32 hash, bytes sig) public pure returns (address recoveredAddress) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (sig.length != 65) return address(0);\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            // Here we are loading the last 32 bytes. We exploit the fact that 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // Albeit non-transactional signatures are not specified by the YP, one would expect it to match the YP range of [27, 28]\n        // geth uses [0, 1] and some clients have followed. This might change, see https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27) {\n          v += 27;\n        }\n        if (v != 27 && v != 28) return address(0);\n        return ecrecover(hash, v, r, s);\n    }\n\n    // ------------------------------------------------------------------------\n    // Get CheckResult message\n    // ------------------------------------------------------------------------\n    function getCheckResultMessage(Data storage /*self*/, BTTSTokenInterface.CheckResult result) public pure returns (string) {\n        if (result == BTTSTokenInterface.CheckResult.Success) {\n            return \"Success\";\n        } else if (result == BTTSTokenInterface.CheckResult.NotTransferable) {\n            return \"Tokens not transferable yet\";\n        } else if (result == BTTSTokenInterface.CheckResult.AccountLocked) {\n            return \"Account locked\";\n        } else if (result == BTTSTokenInterface.CheckResult.SignerMismatch) {\n            return \"Mismatch in signing account\";\n        } else if (result == BTTSTokenInterface.CheckResult.InvalidNonce) {\n            return \"Invalid nonce\";\n        } else if (result == BTTSTokenInterface.CheckResult.InsufficientApprovedTokens) {\n            return \"Insufficient approved tokens\";\n        } else if (result == BTTSTokenInterface.CheckResult.InsufficientApprovedTokensForFees) {\n            return \"Insufficient approved tokens for fees\";\n        } else if (result == BTTSTokenInterface.CheckResult.InsufficientTokens) {\n            return \"Insufficient tokens\";\n        } else if (result == BTTSTokenInterface.CheckResult.InsufficientTokensForFees) {\n            return \"Insufficient tokens for fees\";\n        } else if (result == BTTSTokenInterface.CheckResult.OverflowError) {\n            return \"Overflow error\";\n        } else {\n            return \"Unknown error\";\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Token functions\n    // ------------------------------------------------------------------------\n    function transfer(Data storage self, address to, uint tokens) public returns (bool success) {\n        // Owner and minter can move tokens before the tokens are transferable\n        require(self.transferable || (self.mintable && (msg.sender == self.owner  || msg.sender == self.minter)));\n        require(!self.accountLocked[msg.sender]);\n        self.balances[msg.sender] = safeSub(self.balances[msg.sender], tokens);\n        self.balances[to] = safeAdd(self.balances[to], tokens);\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n    function approve(Data storage self, address spender, uint tokens) public returns (bool success) {\n        require(!self.accountLocked[msg.sender]);\n        self.allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    function transferFrom(Data storage self, address from, address to, uint tokens) public returns (bool success) {\n        require(self.transferable);\n        require(!self.accountLocked[from]);\n        self.balances[from] = safeSub(self.balances[from], tokens);\n        self.allowed[from][msg.sender] = safeSub(self.allowed[from][msg.sender], tokens);\n        self.balances[to] = safeAdd(self.balances[to], tokens);\n        Transfer(from, to, tokens);\n        return true;\n    }\n    function approveAndCall(Data storage self, address spender, uint tokens, bytes data) public returns (bool success) {\n        require(!self.accountLocked[msg.sender]);\n        self.allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Signed function\n    // ------------------------------------------------------------------------\n    function signedTransferHash(Data storage /*self*/, address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        hash = keccak256(signedTransferSig, address(this), tokenOwner, to, tokens, fee, nonce);\n    }\n    function signedTransferCheck(Data storage self, address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (BTTSTokenInterface.CheckResult result) {\n        if (!self.transferable) return BTTSTokenInterface.CheckResult.NotTransferable;\n        bytes32 hash = signedTransferHash(self, tokenOwner, to, tokens, fee, nonce);\n        if (tokenOwner == address(0) || tokenOwner != ecrecoverFromSig(keccak256(signingPrefix, hash), sig)) return BTTSTokenInterface.CheckResult.SignerMismatch;\n        if (self.accountLocked[tokenOwner]) return BTTSTokenInterface.CheckResult.AccountLocked;\n        if (self.nextNonce[tokenOwner] != nonce) return BTTSTokenInterface.CheckResult.InvalidNonce;\n        uint total = safeAdd(tokens, fee);\n        if (self.balances[tokenOwner] < tokens) return BTTSTokenInterface.CheckResult.InsufficientTokens;\n        if (self.balances[tokenOwner] < total) return BTTSTokenInterface.CheckResult.InsufficientTokensForFees;\n        if (self.balances[to] + tokens < self.balances[to]) return BTTSTokenInterface.CheckResult.OverflowError;\n        if (self.balances[feeAccount] + fee < self.balances[feeAccount]) return BTTSTokenInterface.CheckResult.OverflowError;\n        return BTTSTokenInterface.CheckResult.Success;\n    }\n    function signedTransfer(Data storage self, address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        require(self.transferable);\n        bytes32 hash = signedTransferHash(self, tokenOwner, to, tokens, fee, nonce);\n        require(tokenOwner != address(0) && tokenOwner == ecrecoverFromSig(keccak256(signingPrefix, hash), sig));\n        require(!self.accountLocked[tokenOwner]);\n        require(self.nextNonce[tokenOwner] == nonce);\n        self.nextNonce[tokenOwner] = nonce + 1;\n        self.balances[tokenOwner] = safeSub(self.balances[tokenOwner], tokens);\n        self.balances[to] = safeAdd(self.balances[to], tokens);\n        Transfer(tokenOwner, to, tokens);\n        self.balances[tokenOwner] = safeSub(self.balances[tokenOwner], fee);\n        self.balances[feeAccount] = safeAdd(self.balances[feeAccount], fee);\n        Transfer(tokenOwner, feeAccount, fee);\n        return true;\n    }\n    function signedApproveHash(Data storage /*self*/, address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        hash = keccak256(signedApproveSig, address(this), tokenOwner, spender, tokens, fee, nonce);\n    }\n    function signedApproveCheck(Data storage self, address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (BTTSTokenInterface.CheckResult result) {\n        if (!self.transferable) return BTTSTokenInterface.CheckResult.NotTransferable;\n        bytes32 hash = signedApproveHash(self, tokenOwner, spender, tokens, fee, nonce);\n        if (tokenOwner == address(0) || tokenOwner != ecrecoverFromSig(keccak256(signingPrefix, hash), sig)) return BTTSTokenInterface.CheckResult.SignerMismatch;\n        if (self.accountLocked[tokenOwner]) return BTTSTokenInterface.CheckResult.AccountLocked;\n        if (self.nextNonce[tokenOwner] != nonce) return BTTSTokenInterface.CheckResult.InvalidNonce;\n        if (self.balances[tokenOwner] < fee) return BTTSTokenInterface.CheckResult.InsufficientTokensForFees;\n        if (self.balances[feeAccount] + fee < self.balances[feeAccount]) return BTTSTokenInterface.CheckResult.OverflowError;\n        return BTTSTokenInterface.CheckResult.Success;\n    }\n    function signedApprove(Data storage self, address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        require(self.transferable);\n        bytes32 hash = signedApproveHash(self, tokenOwner, spender, tokens, fee, nonce);\n        require(tokenOwner != address(0) && tokenOwner == ecrecoverFromSig(keccak256(signingPrefix, hash), sig));\n        require(!self.accountLocked[tokenOwner]);\n        require(self.nextNonce[tokenOwner] == nonce);\n        self.nextNonce[tokenOwner] = nonce + 1;\n        self.allowed[tokenOwner][spender] = tokens;\n        Approval(tokenOwner, spender, tokens);\n        self.balances[tokenOwner] = safeSub(self.balances[tokenOwner], fee);\n        self.balances[feeAccount] = safeAdd(self.balances[feeAccount], fee);\n        Transfer(tokenOwner, feeAccount, fee);\n        return true;\n    }\n    function signedTransferFromHash(Data storage /*self*/, address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        hash = keccak256(signedTransferFromSig, address(this), spender, from, to, tokens, fee, nonce);\n    }\n    function signedTransferFromCheck(Data storage self, address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (BTTSTokenInterface.CheckResult result) {\n        if (!self.transferable) return BTTSTokenInterface.CheckResult.NotTransferable;\n        bytes32 hash = signedTransferFromHash(self, spender, from, to, tokens, fee, nonce);\n        if (spender == address(0) || spender != ecrecoverFromSig(keccak256(signingPrefix, hash), sig)) return BTTSTokenInterface.CheckResult.SignerMismatch;\n        if (self.accountLocked[from]) return BTTSTokenInterface.CheckResult.AccountLocked;\n        if (self.nextNonce[spender] != nonce) return BTTSTokenInterface.CheckResult.InvalidNonce;\n        uint total = safeAdd(tokens, fee);\n        if (self.allowed[from][spender] < tokens) return BTTSTokenInterface.CheckResult.InsufficientApprovedTokens;\n        if (self.allowed[from][spender] < total) return BTTSTokenInterface.CheckResult.InsufficientApprovedTokensForFees;\n        if (self.balances[from] < tokens) return BTTSTokenInterface.CheckResult.InsufficientTokens;\n        if (self.balances[from] < total) return BTTSTokenInterface.CheckResult.InsufficientTokensForFees;\n        if (self.balances[to] + tokens < self.balances[to]) return BTTSTokenInterface.CheckResult.OverflowError;\n        if (self.balances[feeAccount] + fee < self.balances[feeAccount]) return BTTSTokenInterface.CheckResult.OverflowError;\n        return BTTSTokenInterface.CheckResult.Success;\n    }\n    function signedTransferFrom(Data storage self, address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        require(self.transferable);\n        bytes32 hash = signedTransferFromHash(self, spender, from, to, tokens, fee, nonce);\n        require(spender != address(0) && spender == ecrecoverFromSig(keccak256(signingPrefix, hash), sig));\n        require(!self.accountLocked[from]);\n        require(self.nextNonce[spender] == nonce);\n        self.nextNonce[spender] = nonce + 1;\n        self.balances[from] = safeSub(self.balances[from], tokens);\n        self.allowed[from][spender] = safeSub(self.allowed[from][spender], tokens);\n        self.balances[to] = safeAdd(self.balances[to], tokens);\n        Transfer(from, to, tokens);\n        self.balances[from] = safeSub(self.balances[from], fee);\n        self.allowed[from][spender] = safeSub(self.allowed[from][spender], fee);\n        self.balances[feeAccount] = safeAdd(self.balances[feeAccount], fee);\n        Transfer(from, feeAccount, fee);\n        return true;\n    }\n    function signedApproveAndCallHash(Data storage /*self*/, address tokenOwner, address spender, uint tokens, bytes data, uint fee, uint nonce) public view returns (bytes32 hash) {\n        hash = keccak256(signedApproveAndCallSig, address(this), tokenOwner, spender, tokens, data, fee, nonce);\n    }\n    function signedApproveAndCallCheck(Data storage self, address tokenOwner, address spender, uint tokens, bytes data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (BTTSTokenInterface.CheckResult result) {\n        if (!self.transferable) return BTTSTokenInterface.CheckResult.NotTransferable;\n        bytes32 hash = signedApproveAndCallHash(self, tokenOwner, spender, tokens, data, fee, nonce);\n        if (tokenOwner == address(0) || tokenOwner != ecrecoverFromSig(keccak256(signingPrefix, hash), sig)) return BTTSTokenInterface.CheckResult.SignerMismatch;\n        if (self.accountLocked[tokenOwner]) return BTTSTokenInterface.CheckResult.AccountLocked;\n        if (self.nextNonce[tokenOwner] != nonce) return BTTSTokenInterface.CheckResult.InvalidNonce;\n        if (self.balances[tokenOwner] < fee) return BTTSTokenInterface.CheckResult.InsufficientTokensForFees;\n        if (self.balances[feeAccount] + fee < self.balances[feeAccount]) return BTTSTokenInterface.CheckResult.OverflowError;\n        return BTTSTokenInterface.CheckResult.Success;\n    }\n    function signedApproveAndCall(Data storage self, address tokenOwner, address spender, uint tokens, bytes data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        require(self.transferable);\n        bytes32 hash = signedApproveAndCallHash(self, tokenOwner, spender, tokens, data, fee, nonce);\n        require(tokenOwner != address(0) && tokenOwner == ecrecoverFromSig(keccak256(signingPrefix, hash), sig));\n        require(!self.accountLocked[tokenOwner]);\n        require(self.nextNonce[tokenOwner] == nonce);\n        self.nextNonce[tokenOwner] = nonce + 1;\n        self.allowed[tokenOwner][spender] = tokens;\n        Approval(tokenOwner, spender, tokens);\n        self.balances[tokenOwner] = safeSub(self.balances[tokenOwner], fee);\n        self.balances[feeAccount] = safeAdd(self.balances[feeAccount], fee);\n        Transfer(tokenOwner, feeAccount, fee);\n        ApproveAndCallFallBack(spender).receiveApproval(tokenOwner, tokens, address(this), data);\n        return true;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service Token v1.10\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n// ----------------------------------------------------------------------------\ncontract BTTSToken is BTTSTokenInterface {\n    using BTTSLib for BTTSLib.Data;\n\n    BTTSLib.Data data;\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function BTTSToken(address owner, string symbol, string name, uint8 decimals, uint initialSupply, bool mintable, bool transferable) public {\n        data.init(owner, symbol, name, decimals, initialSupply, mintable, transferable);\n    }\n\n    // ------------------------------------------------------------------------\n    // Ownership\n    // ------------------------------------------------------------------------\n    function owner() public view returns (address) {\n        return data.owner;\n    }\n    function newOwner() public view returns (address) {\n        return data.newOwner;\n    }\n    function transferOwnership(address _newOwner) public {\n        data.transferOwnership(_newOwner);\n    }\n    function acceptOwnership() public {\n        data.acceptOwnership();\n    }\n    function transferOwnershipImmediately(address _newOwner) public {\n        data.transferOwnershipImmediately(_newOwner);\n    }\n\n    // ------------------------------------------------------------------------\n    // Token\n    // ------------------------------------------------------------------------\n    function symbol() public view returns (string) {\n        return data.symbol;\n    }\n    function name() public view returns (string) {\n        return data.name;\n    }\n    function decimals() public view returns (uint8) {\n        return data.decimals;\n    }\n\n    // ------------------------------------------------------------------------\n    // Minting and management\n    // ------------------------------------------------------------------------\n    function minter() public view returns (address) {\n        return data.minter;\n    }\n    function setMinter(address _minter) public {\n        data.setMinter(_minter);\n    }\n    function mint(address tokenOwner, uint tokens, bool lockAccount) public returns (bool success) {\n        return data.mint(tokenOwner, tokens, lockAccount);\n    }\n    function accountLocked(address tokenOwner) public view returns (bool) {\n        return data.accountLocked[tokenOwner];\n    }\n    function unlockAccount(address tokenOwner) public {\n        data.unlockAccount(tokenOwner);\n    }\n    function mintable() public view returns (bool) {\n        return data.mintable;\n    }\n    function transferable() public view returns (bool) {\n        return data.transferable;\n    }\n    function disableMinting() public {\n        data.disableMinting();\n    }\n    function enableTransfers() public {\n        data.enableTransfers();\n    }\n    function nextNonce(address spender) public view returns (uint) {\n        return data.nextNonce[spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Other functions\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\n        return data.transferAnyERC20Token(tokenAddress, tokens);\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ethers\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n    // ------------------------------------------------------------------------\n    // Token functions\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return data.totalSupply - data.balances[address(0)];\n    }\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return data.balances[tokenOwner];\n    }\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return data.allowed[tokenOwner][spender];\n    }\n    function transfer(address to, uint tokens) public returns (bool success) {\n        return data.transfer(to, tokens);\n    }\n    function approve(address spender, uint tokens) public returns (bool success) {\n        return data.approve(spender, tokens);\n    }\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        return data.transferFrom(from, to, tokens);\n    }\n    function approveAndCall(address spender, uint tokens, bytes _data) public returns (bool success) {\n        return data.approveAndCall(spender, tokens, _data);\n    }\n\n    // ------------------------------------------------------------------------\n    // Signed function\n    // ------------------------------------------------------------------------\n    function signedTransferHash(address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        return data.signedTransferHash(tokenOwner, to, tokens, fee, nonce);\n    }\n    function signedTransferCheck(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result) {\n        return data.signedTransferCheck(tokenOwner, to, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedTransfer(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        return data.signedTransfer(tokenOwner, to, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedApproveHash(address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        return data.signedApproveHash(tokenOwner, spender, tokens, fee, nonce);\n    }\n    function signedApproveCheck(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result) {\n        return data.signedApproveCheck(tokenOwner, spender, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedApprove(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        return data.signedApprove(tokenOwner, spender, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedTransferFromHash(address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        return data.signedTransferFromHash(spender, from, to, tokens, fee, nonce);\n    }\n    function signedTransferFromCheck(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result) {\n        return data.signedTransferFromCheck(spender, from, to, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedTransferFrom(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        return data.signedTransferFrom(spender, from, to, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedApproveAndCallHash(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce) public view returns (bytes32 hash) {\n        return data.signedApproveAndCallHash(tokenOwner, spender, tokens, _data, fee, nonce);\n    }\n    function signedApproveAndCallCheck(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result) {\n        return data.signedApproveAndCallCheck(tokenOwner, spender, tokens, _data, fee, nonce, sig, feeAccount);\n    }\n    function signedApproveAndCall(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        return data.signedApproveAndCall(tokenOwner, spender, tokens, _data, fee, nonce, sig, feeAccount);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n    function transferOwnershipImmediately(address _newOwner) public onlyOwner {\n        OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service Token Factory v1.10\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n// ----------------------------------------------------------------------------\ncontract BTTSTokenFactory is Owned {\n\n    // ------------------------------------------------------------------------\n    // Internal data\n    // ------------------------------------------------------------------------\n    mapping(address => bool) _verify;\n    address[] public deployedTokens;\n\n    // ------------------------------------------------------------------------\n    // Event\n    // ------------------------------------------------------------------------\n    event BTTSTokenListing(address indexed ownerAddress,\n        address indexed bttsTokenAddress,\n        string symbol, string name, uint8 decimals,\n        uint initialSupply, bool mintable, bool transferable);\n\n\n    // ------------------------------------------------------------------------\n    // Anyone can call this method to verify whether the bttsToken contract at\n    // the specified address was deployed using this factory\n    //\n    // Parameters:\n    //   tokenContract  the bttsToken contract address\n    //\n    // Return values:\n    //   valid          did this BTTSTokenFactory create the BTTSToken contract?\n    //   decimals       number of decimal places for the token contract\n    //   initialSupply  the token initial supply\n    //   mintable       is the token mintable after deployment?\n    //   transferable   are the tokens transferable after deployment?\n    // ------------------------------------------------------------------------\n    function verify(address tokenContract) public view returns (\n        bool    valid,\n        address owner,\n        uint    decimals,\n        bool    mintable,\n        bool    transferable\n    ) {\n        valid = _verify[tokenContract];\n        if (valid) {\n            BTTSToken t = BTTSToken(tokenContract);\n            owner        = t.owner();\n            decimals     = t.decimals();\n            mintable     = t.mintable();\n            transferable = t.transferable();\n        }\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Any account can call this method to deploy a new BTTSToken contract.\n    // The owner of the BTTSToken contract will be the calling account\n    //\n    // Parameters:\n    //   symbol         symbol\n    //   name           name\n    //   decimals       number of decimal places for the token contract\n    //   initialSupply  the token initial supply\n    //   mintable       is the token mintable after deployment?\n    //   transferable   are the tokens transferable after deployment?\n    //\n    // For example, deploying a BTTSToken contract with `initialSupply` of\n    // 1,000.000000000000000000 tokens:\n    //   symbol         \"ME\"\n    //   name           \"My Token\"\n    //   decimals       18\n    //   initialSupply  10000000000000000000000 = 1,000.000000000000000000\n    //                  tokens\n    //   mintable       can tokens be minted after deployment?\n    //   transferable   are the tokens transferable after deployment?\n    //\n    // The BTTSTokenListing() event is logged with the following parameters\n    //   owner          the account that execute this transaction\n    //   symbol         symbol\n    //   name           name\n    //   decimals       number of decimal places for the token contract\n    //   initialSupply  the token initial supply\n    //   mintable       can tokens be minted after deployment?\n    //   transferable   are the tokens transferable after deployment?\n    // ------------------------------------------------------------------------\n    function deployBTTSTokenContract(\n        string symbol,\n        string name,\n        uint8 decimals,\n        uint initialSupply,\n        bool mintable,\n        bool transferable\n    ) public returns (address bttsTokenAddress) {\n        bttsTokenAddress = new BTTSToken(\n            msg.sender,\n            symbol,\n            name,\n            decimals,\n            initialSupply,\n            mintable,\n            transferable);\n        // Record that this factory created the trader\n        _verify[bttsTokenAddress] = true;\n        deployedTokens.push(bttsTokenAddress);\n        BTTSTokenListing(msg.sender, bttsTokenAddress, symbol, name, decimals,\n            initialSupply, mintable, transferable);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Number of deployed tokens\n    // ------------------------------------------------------------------------\n    function numberOfDeployedTokens() public view returns (uint) {\n        return deployedTokens.length;\n    }\n\n    // ------------------------------------------------------------------------\n    // Factory owner can transfer out any accidentally sent ERC20 tokens\n    //\n    // Parameters:\n    //   tokenAddress  contract address of the token contract being withdrawn\n    //                 from\n    //   tokens        number of tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ethers\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedApproveAndCallHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"nextNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedApproveHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedTransferFromHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedApproveAndCallSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"accountLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedTransferSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransferCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipImmediately\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bttsVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"unlockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedApproveAndCallCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedTransferHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedApproveSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedTransferFromSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedApproveCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"lockAccount\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signingPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedApproveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransferFromCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"mintable\",\"type\":\"bool\"},{\"name\":\"transferable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MinterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockAccount\",\"type\":\"bool\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransfersEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"AccountUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b6040516200221438038062002214833981016040528080519190602001805182019190602001805182019190602001805191906020018051919060200180519190602001805191507308cee0ab11fe46e29c539509f25bcbda2f70e2bf90506335659df96000898989898989896040517c010000000000000000000000000000000000000000000000000000000063ffffffff8b1602815260048101898152600160a060020a038916602483015260ff8616608483015260a4820185905283151560c483015282151560e483015261010060448301908152909160648101906101040189818151815260200191508051906020019080838360005b83811015620001255780820151838201526020016200010b565b50505050905090810190601f168015620001535780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b838110156200018b57808201518382015260200162000171565b50505050905090810190601f168015620001b95780820380516001836020036101000a031916815260200191505b509a505050505050505050505060006040518083038186803b1515620001de57600080fd5b6102c65a03f41515620001f057600080fd5b5050505050505050505061200a806200020a6000396000f3006060604052600436106102005763ffffffff60e060020a60003504166305a5f830811461020557806306fdde031461028a5780630754617214610314578063095ea7b3146103435780630cd55abf146103795780631296d47d1461039857806318160ddd146103c65780631a2b3adf146103d9578063233907a31461040d57806323b872dd14610455578063313ce5671461047d578063344bcc7d146104a65780634bf365df1461052a578063500b94261461053d5780635b1ea8581461055c57806370a082311461056f5780637532eaac1461058e57806379ba50971461060d5780637c0fbc31146106225780637e5cd5c1146106c55780637e71fb09146106d857806389443aac146106f75780638da5cb5b1461070a578063905295e31461071d57806392ff0d311461073c57806395d89b411461074f578063965b0cc41461076257806396cfd12414610824578063a3fc136a14610852578063a9059cbb14610865578063af35c6c714610887578063c14a932f1461089a578063c7a86e33146108ad578063cae9ca511461092c578063d1a1beb414610991578063d4ee1d90146109b8578063dc39d06d146109cb578063dd62ed3e146109ed578063e2cc7a5114610a12578063e9afa7a114610a25578063f16f9b5314610aa4578063f2fde38b14610b66578063f30d4d3f14610b85578063fca3b5aa14610c09575b600080fd5b341561021057600080fd5b610278600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050843594602001359350610c2892505050565b60405190815260200160405180910390f35b341561029557600080fd5b61029d610d5e565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102d95780820151838201526020016102c1565b50505050905090810190601f1680156103065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561031f57600080fd5b610327610e07565b604051600160a060020a03909116815260200160405180910390f35b341561034e57600080fd5b610365600160a060020a0360043516602435610e16565b604051901515815260200160405180910390f35b341561038457600080fd5b610278600160a060020a0360043516610ea7565b34156103a357600080fd5b610278600160a060020a0360043581169060243516604435606435608435610ec2565b34156103d157600080fd5b610278610f6f565b34156103e457600080fd5b610278600160a060020a036004358116906024358116906044351660643560843560a435610fa1565b341561041857600080fd5b610420611036565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b341561046057600080fd5b610365600160a060020a036004358116906024351660443561105a565b341561048857600080fd5b6104906110f4565b60405160ff909116815260200160405180910390f35b34156104b157600080fd5b61036560048035600160a060020a0390811691602480358316926044351691606435916084359160a4359160e49060c43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a031692506110fd915050565b341561053557600080fd5b610365611238565b341561054857600080fd5b610365600160a060020a0360043516611259565b341561056757600080fd5b610420611277565b341561057a57600080fd5b610278600160a060020a036004351661129b565b341561059957600080fd5b610365600160a060020a0360048035821691602480359091169160443591606435916084359160c49060a43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a031692506112b6915050565b341561061857600080fd5b6106206113e5565b005b341561062d57600080fd5b6106a1600160a060020a0360048035821691602480359091169160443591606435916084359160c49060a43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a0316925061144b915050565b604051808260098111156106b157fe5b60ff16815260200191505060405180910390f35b34156106d057600080fd5b610620611503565b34156106e357600080fd5b610620600160a060020a0360043516611553565b341561070257600080fd5b6102786115c9565b341561071557600080fd5b6103276115ce565b341561072857600080fd5b610620600160a060020a03600435166115e2565b341561074757600080fd5b610365611641565b341561075a57600080fd5b61029d611663565b341561076d57600080fd5b6106a1600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094968635966020808201359750919550606081019450604090810135860180830194503592508291601f83018190048102019051908101604052818152929190602084018383808284375094965050509235600160a060020a031692506116d7915050565b341561082f57600080fd5b610278600160a060020a036004358116906024351660443560643560843561184c565b341561085d57600080fd5b6104206118d5565b341561087057600080fd5b610365600160a060020a03600435166024356118f9565b341561089257600080fd5b610620611969565b34156108a557600080fd5b6104206119b9565b34156108b857600080fd5b6106a1600160a060020a0360048035821691602480359091169160443591606435916084359160c49060a43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a031692506119dd915050565b341561093757600080fd5b61036560048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611a9595505050505050565b341561099c57600080fd5b610365600160a060020a03600435166024356044351515611b7c565b34156109c357600080fd5b610327611bf4565b34156109d657600080fd5b610365600160a060020a0360043516602435611c03565b34156109f857600080fd5b610278600160a060020a0360043581169060243516611c73565b3415610a1d57600080fd5b61029d611c9e565b3415610a3057600080fd5b610365600160a060020a0360048035821691602480359091169160443591606435916084359160c49060a43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250611cd5915050565b3415610aaf57600080fd5b610365600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094968635966020808201359750919550606081019450604090810135860180830194503592508291601f83018190048102019051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250611d8d915050565b3415610b7157600080fd5b610620600160a060020a0360043516611e4c565b3415610b9057600080fd5b6106a160048035600160a060020a0390811691602480358316926044351691606435916084359160a4359160e49060c43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250611eab915050565b3415610c1457600080fd5b610620600160a060020a0360043516611f6d565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf63ed3b174b8289898989898986604051602001526040518863ffffffff1660e060020a0281526004018088815260200187600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a0316815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610cea578082015183820152602001610cd2565b50505050905090810190601f168015610d175780820380516001836020036101000a031916815260200191505b509850505050505050505060206040518083038186803b1515610d3957600080fd5b6102c65a03f41515610d4a57600080fd5b505050604051805198975050505050505050565b610d66611fcc565b60058054600260001961010060018416150201909116046020601f82018190048102016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dfd5780601f10610dd257610100808354040283529160200191610dfd565b820191906000526020600020905b815481529060010190602001808311610de057829003601f168201915b5050505050905090565b600254600160a060020a031690565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf63bed568f7828585826040516020015260405160e060020a63ffffffff86160281526004810193909352600160a060020a039091166024830152604482015260640160206040518083038186803b1515610e8657600080fd5b6102c65a03f41515610e9757600080fd5b5050506040518051949350505050565b600160a060020a03166000908152600a602052604090205490565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf633c0734a3828888888888856040516020015260405160e060020a63ffffffff89160281526004810196909652600160a060020a0394851660248701529290931660448501526064840152608483019190915260a482015260c40160206040518083038186803b1515610f4b57600080fd5b6102c65a03f41515610f5c57600080fd5b5050506040518051979650505050505050565b6000805260086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7546007540390565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf638099f6cb82898989898989866040516020015260405160e060020a63ffffffff8a160281526004810197909752600160a060020a0395861660248801529385166044870152919093166064850152608484019290925260a483019190915260c482015260e40160206040518083038186803b1515610d3957600080fd5b7ff16f9b530000000000000000000000000000000000000000000000000000000081565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf6367b9965482868686836040516020015260405160e060020a63ffffffff87160281526004810194909452600160a060020a03928316602485015291166044830152606482015260840160206040518083038186803b15156110d257600080fd5b6102c65a03f415156110e357600080fd5b505050604051805195945050505050565b60065460ff1690565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf635b08c4d8828b8b8b8b8b8b8b8b886040516020015260405160e060020a63ffffffff8c16028152600481018a8152600160a060020a03808b166024840152898116604484015288811660648401526084830188905260a4830187905260c48301869052831661010483015261012060e4830190815290916101240184818151815260200191508051906020019080838360005b838110156111c05780820151838201526020016111a8565b50505050905090810190601f1680156111ed5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060206040518083038186803b151561121157600080fd5b6102c65a03f4151561122257600080fd5b50505060405180519a9950505050505050505050565b60025474010000000000000000000000000000000000000000900460ff1690565b600160a060020a031660009081526003602052604090205460ff1690565b7f7532eaac0000000000000000000000000000000000000000000000000000000081565b600160a060020a031660009081526008602052604090205490565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf6340c3e55b828a8a8a8a8a8a8a876040516020015260405160e060020a63ffffffff8b1602815260048101898152600160a060020a03808a1660248401528881166044840152606483018890526084830187905260a48301869052831660e483015261010060c4830190815290916101040184818151815260200191508051906020019080838360005b8381101561136f578082015183820152602001611357565b50505050905090810190601f16801561139c5780820380516001836020036101000a031916815260200191505b50995050505050505050505060206040518083038186803b15156113bf57600080fd5b6102c65a03f415156113d057600080fd5b50505060405180519998505050505050505050565b7308cee0ab11fe46e29c539509f25bcbda2f70e2bf63ea300bda600060405160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b151561143557600080fd5b6102c65a03f4151561144657600080fd5b505050565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf63f12d346e828a8a8a8a8a8a8a876040516020015260405160e060020a63ffffffff8b1602815260048101898152600160a060020a03808a1660248401528881166044840152606483018890526084830187905260a48301869052831660e483015261010060c4830190815290916101040184818151815260200191508051906020019080838360008381101561136f578082015183820152602001611357565b7308cee0ab11fe46e29c539509f25bcbda2f70e2bf63f72cb00a600060405160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b151561143557600080fd5b7308cee0ab11fe46e29c539509f25bcbda2f70e2bf638fedeca660008360405160e060020a63ffffffff85160281526004810192909252600160a060020a0316602482015260440160006040518083038186803b15156115b257600080fd5b6102c65a03f415156115c357600080fd5b50505050565b606e81565b6000546101009004600160a060020a031690565b7308cee0ab11fe46e29c539509f25bcbda2f70e2bf63b39d0e0960008360405160e060020a63ffffffff85160281526004810192909252600160a060020a0316602482015260440160006040518083038186803b15156115b257600080fd5b6002547501000000000000000000000000000000000000000000900460ff1690565b61166b611fcc565b60048054600260001961010060018416150201909116046020601f82018190048102016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dfd5780601f10610dd257610100808354040283529160200191610dfd565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf63e0ccb749828b8b8b8b8b8b8b8b886040516020015260405160e060020a63ffffffff8c16028152600481018a8152600160a060020a03808b16602484015289811660448401526064830189905260a4830187905260c48301869052831661010483015261012060848301908152909160e48101906101240188818151815260200191508051906020019080838360005b8381101561179757808201518382015260200161177f565b50505050905090810190601f1680156117c45780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156117fa5780820151838201526020016117e2565b50505050905090810190601f1680156118275780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b151561121157600080fd5b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf63836be758828888888888856040516020015260405160e060020a63ffffffff89160281526004810196909652600160a060020a0394851660248701529290931660448501526064840152608483019190915260a482015260c40160206040518083038186803b1515610f4b57600080fd5b7fe9afa7a10000000000000000000000000000000000000000000000000000000081565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf6306ad0e7b828585826040516020015260405160e060020a63ffffffff86160281526004810193909352600160a060020a039091166024830152604482015260640160206040518083038186803b1515610e8657600080fd5b7308cee0ab11fe46e29c539509f25bcbda2f70e2bf63976f56a5600060405160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b151561143557600080fd5b7f344bcc7d0000000000000000000000000000000000000000000000000000000081565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf63b457c85f828a8a8a8a8a8a8a876040516020015260405160e060020a63ffffffff8b1602815260048101898152600160a060020a03808a1660248401528881166044840152606483018890526084830187905260a48301869052831660e483015261010060c4830190815290916101040184818151815260200191508051906020019080838360008381101561136f578082015183820152602001611357565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf637f3f30bf8286868683604051602001526040518563ffffffff1660e060020a0281526004018085815260200184600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b30578082015183820152602001611b18565b50505050905090810190601f168015611b5d5780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b15156110d257600080fd5b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf639fb6f52682868686836040516020015260405160e060020a63ffffffff87160281526004810194909452600160a060020a03909216602484015260448301521515606482015260840160206040518083038186803b15156110d257600080fd5b600154600160a060020a031690565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf637512eb85828585826040516020015260405160e060020a63ffffffff86160281526004810193909352600160a060020a039091166024830152604482015260640160206040518083038186803b1515610e8657600080fd5b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60408051908101604052601c81527f19457468657265756d205369676e6564204d6573736167653a0a333200000000602082015281565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf6306fc8397828a8a8a8a8a8a8a876040516020015260405160e060020a63ffffffff8b1602815260048101898152600160a060020a03808a1660248401528881166044840152606483018890526084830187905260a48301869052831660e483015261010060c4830190815290916101040184818151815260200191508051906020019080838360008381101561136f578082015183820152602001611357565b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf63f134977b828b8b8b8b8b8b8b8b886040516020015260405160e060020a63ffffffff8c16028152600481018a8152600160a060020a03808b16602484015289811660448401526064830189905260a4830187905260c48301869052831661010483015261012060848301908152909160e48101906101240188818151815260200191508051906020019080838360008381101561179757808201518382015260200161177f565b7308cee0ab11fe46e29c539509f25bcbda2f70e2bf6364850de560008360405160e060020a63ffffffff85160281526004810192909252600160a060020a0316602482015260440160006040518083038186803b15156115b257600080fd5b60007308cee0ab11fe46e29c539509f25bcbda2f70e2bf6311a44a6b828b8b8b8b8b8b8b8b886040516020015260405160e060020a63ffffffff8c16028152600481018a8152600160a060020a03808b166024840152898116604484015288811660648401526084830188905260a4830187905260c48301869052831661010483015261012060e483019081529091610124018481815181526020019150805190602001908083836000838110156111c05780820151838201526020016111a8565b7308cee0ab11fe46e29c539509f25bcbda2f70e2bf635250afa160008360405160e060020a63ffffffff85160281526004810192909252600160a060020a0316602482015260440160006040518083038186803b15156115b257600080fd5b602060405190810160405260008152905600a165627a7a72305820758cdb3803388d682a299371175c4075beef718a05bba71aaf4c167b612b1cc10029000000000000000000000000e796ad819e32846a7f2b28288a23f682eb4da9b400000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000001868ae148f907437140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003475a450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001847617a65436f696e204d657461766572736520546f6b656e0000000000000000",
  "constructorArguments": "000000000000000000000000e796ad819e32846a7f2b28288a23f682eb4da9b400000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000001868ae148f907437140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003475a450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001847617a65436f696e204d657461766572736520546f6b656e0000000000000000"
}