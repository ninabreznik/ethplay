{
  "address": "0x0c73260f143f198bd5f34a66487da5eb3bd2bcdc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ESCBAirdropper",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-07\n*/\n\npragma solidity ^0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  function() public payable { }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n   /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract ESCBAirdropper is Ownable {\n    using SafeMath for uint256;\n    uint256 public airdropTokens;\n    uint256 public totalClaimed;\n    uint256 public amountOfTokens;\n    mapping (address => bool) public tokensReceived;\n    mapping (address => bool) public craneList;\n    mapping (address => bool) public airdropAgent;\n    ERC20 public token;\n    bool public craneEnabled = false;\n\n    modifier onlyAirdropAgent() {\n        require(airdropAgent[msg.sender]);\n         _;\n    }\n\n    modifier whenCraneEnabled() {\n        require(craneEnabled);\n         _;\n    }\n\n    function ESCBAirdropper(uint256 _amount, address _tokenAddress) public {\n        totalClaimed = 0;\n        amountOfTokens = _amount;\n        token = ERC20(_tokenAddress);\n    }\n\n    // Send a static number of tokens to each user in an array (e.g. each user receives 100 tokens)\n    function airdrop(address[] _recipients) public onlyAirdropAgent {\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(!tokensReceived[_recipients[i]]); // Probably a race condition between two transactions. Bail to avoid double allocations and to save the gas.\n            require(token.transfer(_recipients[i], amountOfTokens));\n            tokensReceived[_recipients[i]] = true;\n        }\n        totalClaimed = totalClaimed.add(amountOfTokens * _recipients.length);\n    }\n\n    // Send a dynamic number of tokens to each user in an array (e.g. each user receives 10% of their original contribution)\n    function airdropDynamic(address[] _recipients, uint256[] _amount) public onlyAirdropAgent {\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(!tokensReceived[_recipients[i]]); // Probably a race condition between two transactions. Bail to avoid double allocations and to save the gas.\n            require(token.transfer(_recipients[i], _amount[i]));\n            tokensReceived[_recipients[i]] = true;\n            totalClaimed = totalClaimed.add(_amount[i]);\n        }\n    }\n\n    // Allow this agent to call the airdrop functions\n    function setAirdropAgent(address _agentAddress, bool state) public onlyOwner {\n        airdropAgent[_agentAddress] = state;\n    }\n\n    // Return any unused tokens back to the contract owner\n    function reset() public onlyOwner {\n        require(token.transfer(owner, remainingTokens()));\n    }\n\n    // Change the ERC20 token address\n    function changeTokenAddress(address _tokenAddress) public onlyOwner {\n        token = ERC20(_tokenAddress);\n    }\n\n    // Set the amount of tokens to send each user for a static airdrop\n    function changeTokenAmount(uint256 _amount) public onlyOwner {\n        amountOfTokens = _amount;\n    }\n\n    // Enable or disable crane\n    function changeCraneStatus(bool _status) public onlyOwner {\n        craneEnabled = _status;\n    }\n\n    // Return the amount of tokens that the contract currently holds\n    function remainingTokens() public view returns (uint256) {\n        return token.balanceOf(this);\n    }\n\n    // Add recipient in crane list\n    function addAddressToCraneList(address[] _recipients) public onlyAirdropAgent {\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(!tokensReceived[_recipients[i]]); // If not received yet\n            require(!craneList[_recipients[i]]);\n            craneList[_recipients[i]] = true;\n        }\n    }\n\n    // Get free tokens by crane\n    function getFreeTokens() public\n      whenCraneEnabled\n    {\n        require(craneList[msg.sender]);\n        require(!tokensReceived[msg.sender]); // Probably a race condition between two transactions. Bail to avoid double allocations and to save the gas.\n        require(token.transfer(msg.sender, amountOfTokens));\n        tokensReceived[msg.sender] = true;\n        totalClaimed = totalClaimed.add(amountOfTokens);\n    }\n\n}",
  "bytecode": "60606040526000600760146101000a81548160ff021916908315150217905550341561002a57600080fd5b60405160408061171983398101604052808051906020019091908051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006002819055508160038190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050611629806100f06000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306169f63146101175780630cb087161461015b57806313c52111146101f55780632a69d4861461021e5780632b190f181461024357806333a5ec7e146102585780634fa6944a1461027b57806357fa580e146102cc57806363bfe52a1461031d578063729ad39e146103775780638da5cb5b146103d157806391152c5c14610426578063bcc089191461044f578063bf583903146104a0578063c9cda91f146104c9578063d54ad2a114610502578063d826f88f1461052b578063eb3a0b4d14610540578063f2fde38b1461056d578063fc0c546a146105a6575b600080fd5b341561012257600080fd5b610159600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803515159060200190919050506105fb565b005b341561016657600080fd5b6101f3600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506106b1565b005b341561020057600080fd5b61020861095d565b6040518082815260200191505060405180910390f35b341561022957600080fd5b61024160048080351515906020019091905050610963565b005b341561024e57600080fd5b6102566109db565b005b341561026357600080fd5b6102796004808035906020019091905050610c13565b005b341561028657600080fd5b6102b2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c78565b604051808215151515815260200191505060405180910390f35b34156102d757600080fd5b610303600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c98565b604051808215151515815260200191505060405180910390f35b341561032857600080fd5b610375600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610cb8565b005b341561038257600080fd5b6103cf600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610e80565b005b34156103dc57600080fd5b6103e4611104565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561043157600080fd5b610439611129565b6040518082815260200191505060405180910390f35b341561045a57600080fd5b610486600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061112f565b604051808215151515815260200191505060405180910390f35b34156104ab57600080fd5b6104b361114f565b6040518082815260200191505060405180910390f35b34156104d457600080fd5b610500600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611236565b005b341561050d57600080fd5b6105156112d5565b6040518082815260200191505060405180910390f35b341561053657600080fd5b61053e6112db565b005b341561054b57600080fd5b610553611453565b604051808215151515815260200191505060405180910390f35b341561057857600080fd5b6105a4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611466565b005b34156105b157600080fd5b6105b96115bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561065657600080fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561070b57600080fd5b600090505b82518110156109585760046000848381518110151561072b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561078957600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84838151811015156107d557fe5b9060200190602002015184848151811015156107ed57fe5b906020019060200201516000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561088457600080fd5b6102c65a03f1151561089557600080fd5b5050506040518051905015156108aa57600080fd5b60016004600085848151811015156108be57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610945828281518110151561092a57fe5b906020019060200201516002546115e190919063ffffffff16565b6002819055508080600101915050610710565b505050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109be57600080fd5b80600760146101000a81548160ff02191690831515021790555050565b600760149054906101000a900460ff1615156109f657600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610a4e57600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610aa757600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336003546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610b7657600080fd5b6102c65a03f11515610b8757600080fd5b505050604051805190501515610b9c57600080fd5b6001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610c0b6003546002546115e190919063ffffffff16565b600281905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6e57600080fd5b8060038190555050565b60056020528060005260406000206000915054906101000a900460ff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610d1257600080fd5b600090505b8151811015610e7c57600460008383815181101515610d3257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610d9057600080fd5b600560008383815181101515610da257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610e0057600080fd5b6001600560008484815181101515610e1457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610d17565b5050565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610eda57600080fd5b600090505b81518110156110e057600460008383815181101515610efa57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610f5857600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8383815181101515610fa457fe5b906020019060200201516003546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561103e57600080fd5b6102c65a03f1151561104f57600080fd5b50505060405180519050151561106457600080fd5b600160046000848481518110151561107857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610edf565b6110fa8251600354026002546115e190919063ffffffff16565b6002819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60066020528060005260406000206000915054906101000a900460ff1681565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561121657600080fd5b6102c65a03f1151561122757600080fd5b50505060405180519050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129157600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133657600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661139e61114f565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561142b57600080fd5b6102c65a03f1151561143c57600080fd5b50505060405180519050151561145157600080fd5b565b600760149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114c157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156114fd57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081830190508281101515156115f457fe5b809050929150505600a165627a7a723058209208b82b7b54d23f5ca48d8dc4b1d91ef3eeb6d1fa5b640681e6fc7a0afbe4670029000000000000000000000000000000000000000000000000000000000000006400000000000000000000000027bf1f282ee96cdb4bb921c961fe081f397e03e4",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006400000000000000000000000027bf1f282ee96cdb4bb921c961fe081f397e03e4"
}