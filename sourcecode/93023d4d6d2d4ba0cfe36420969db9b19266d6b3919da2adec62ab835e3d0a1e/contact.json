{
  "address": "0xcbfb33b01e265b60f46c21f2f9a96cf6276a5395",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FastLap",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-19\n*/\n\npragma solidity ^0.4.25;\n\nlibrary Percent {\n  // Solidity automatically throws when dividing by 0\n  struct percent {\n    uint num;\n    uint den;\n  }\n  \n  // storage\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n    function toMemory(percent storage p) internal view returns (Percent.percent memory) {\n    return Percent.percent(p.num, p.den);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n  \n  /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    owner = msg.sender;\n    emit OwnershipTransferred(address(0), owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(owner, address(0));\n    owner = address(0);\n  }\n}\n\ncontract FastLap is Ownable {\n    using Percent for Percent.percent;\n    using SafeMath for uint;\n    \n    //Address for advertising and admins expences\n    address constant public advertisingAddress = address(0xf86117De6539c6f48764b638412C99F3ADB19892); //рекламный\n    address constant public adminsAddress = address(0x33a6c786Cf6D69CC62c475B5d69947af08bB6210); //тех поддержка и автоматизация выплат\n    \n    //Percent for promo expences\n    Percent.percent private m_adminsPercent = Percent.percent(3, 100);       //   3/100  *100% = 3%\n    Percent.percent private m_advertisingPercent = Percent.percent(5, 100);// 5/100  *100% = 5%\n    //How many percent for your deposit to be multiplied\n    Percent.percent public MULTIPLIER = Percent.percent(120, 100); // 120/100 * 100% = 120%\n    \n    uint public amountRaised = 0;\n    //The deposit structure holds all the info about the deposit made\n    struct Deposit {\n        address depositor; //The depositor address\n        uint deposit;   //The deposit amount\n        uint expects;    //How much we should pay out (initially it is 120% of deposit)\n        uint paymentTime; //when payment\n    }\n\n    Deposit[] private Queue;  //The queue for new investments\n    // list of deposites for 1 user\n    mapping(address => uint[]) private depositors;\n    \n    uint public depositorsCount = 0;\n    \n    uint private currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\n    \n    uint public minBalanceForDistribution = 3 ether; //минимально необходимый баланс\n\n    //создаем депозит инвестора в основной очереди\n    function () public payable {\n        if(msg.value > 0){ //регистрация депозита\n            require(msg.value >= 0.1 ether, \"investment must be between 0.1 and 0.5 ether\"); //ограничение минимального депозита\n            require(msg.value <= 0.5 ether, \"investment must be between 0.1 and 0.5 ether\"); //ограничение максимального депозита\n\n            //к выплате 120% от депозита\n            uint expect = MULTIPLIER.mul(msg.value);\n            Queue.push(Deposit({depositor:msg.sender, deposit:msg.value, expects:expect, paymentTime:0}));\n            amountRaised += msg.value;\n            if (depositors[msg.sender].length == 0) depositorsCount += 1;\n            depositors[msg.sender].push(Queue.length - 1);\n            \n            advertisingAddress.send(m_advertisingPercent.mul(msg.value));\n            adminsAddress.send(m_adminsPercent.mul(msg.value));\n        } else { //выплаты инвесторам\n            uint money = address(this).balance;\n            require(money >= minBalanceForDistribution, \"Not enough funds to pay\");//на балансе недостаточно денег для выплат\n            uint QueueLen = Queue.length;\n            uint toSend = Queue[currentReceiverIndex].expects;\n            uint maxIterations = 25;//максимум 25 итераций\n            uint num = 0;\n            uint i = 0;\n            \n            while ((currentReceiverIndex < QueueLen) && (i < maxIterations) && (money >= toSend)) {\n                money = money.sub(toSend);\n                Queue[currentReceiverIndex].paymentTime = now;\n                num = currentReceiverIndex;\n                currentReceiverIndex += 1;\n                i +=1;\n                Queue[num].depositor.send(toSend);\n                toSend = Queue[currentReceiverIndex].expects;\n            }\n        }\n    }\n\n    //баланс контракта\n    function getNeedBalance() public view returns (uint) {\n        uint money = address(this).balance;\n        if (money >= minBalanceForDistribution){\n          return 0;  \n        } else {\n            return minBalanceForDistribution - money;\n        }\n    }\n    \n    //данные о депозите по порядковому номеру \n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect, uint paymentTime){\n        Deposit storage dep = Queue[idx];\n        return (dep.depositor, dep.deposit, dep.expects, dep.paymentTime);\n    }\n\n    //общее количество депозитов у кошелька depositor\n    function getUserDepositsCount(address depositor) public view returns (uint) {\n        return depositors[depositor].length;\n    }\n\n    //Все депозиты основной очереди кошелька depositor в виде массива\n    function getUserInfo(address depositor) public view returns (uint depCount, uint allDeps, uint payDepCount, uint allPay, uint lastPaymentTime) {\n        depCount = depositors[depositor].length;\n        allPay = 0;\n        allDeps = 0;\n        lastPaymentTime = 0;\n        payDepCount = 0;\n        uint num = 0;\n        \n        for(uint i=0; i<depCount; ++i){\n            num = depositors[depositor][i];\n            allDeps += Queue[num].deposit;\n            if (Queue[num].paymentTime > 0){\n                allPay += Queue[num].expects;\n                payDepCount += 1;\n                lastPaymentTime = Queue[num].paymentTime;\n            }\n        }\n        return (depCount, allDeps, payDepCount, allPay, lastPaymentTime);\n    }\n}",
  "bytecode": "60036080819052606460a081905260018290556002819055600560c081905260e08290529182905560048190556101406040819052607861010081905261012083905290925560065560006007819055600a819055600b8190556729a2241af62c0000600c558054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610a4c806100b46000396000f3006080604052600436106100c45763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663059f8b1681146105895780631686531a146105b7578063297563bb146105e85780633a561ae21461060f57806362d2c555146106245780636386c1c714610639578063715018a6146106855780637b3e5e7b1461069c5780638da5cb5b146106b15780638f32d59b146106c65780639f9fb968146106ef578063ac0851fe14610737578063d6a133011461074c575b6000806000806000806000803411156103fc5767016345785d8a000034101561017457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f696e766573746d656e74206d757374206265206265747765656e20302e31206160448201527f6e6420302e352065746865720000000000000000000000000000000000000000606482015290519081900360840190fd5b6706f05b59d3b2000034111561021157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f696e766573746d656e74206d757374206265206265747765656e20302e31206160448201527f6e6420302e352065746865720000000000000000000000000000000000000000606482015290519081900360840190fd5b61022260053463ffffffff61076d16565b60408051608081018252338082523460208084018281528486018781526000606087018181526008805460018101825590835297517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee36004909902988901805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee488015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee587015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee69095019490945560078054909201909155908252600990522054909750151561034657600a805460010190555b336000908152600960209081526040822060085481546001810183559184529190922060001990910191015573f86117de6539c6f48764b638412c99f3adb198926108fc61039b60033463ffffffff61076d16565b6040518115909202916000818181858888f1507333a6c786cf6d69cc62c475b5d69947af08bb621093506108fc92506103df9150600190503463ffffffff61076d16565b6040518115909202916000818181858888f1935050505050610580565b600c543031965086101561047157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420656e6f7567682066756e647320746f20706179000000000000000000604482015290519081900360640190fd5b60088054600b5490965086811061048457fe5b90600052602060002090600402016002015493506019925060009150600090505b84600b541080156104b557508281105b80156104c15750838610155b15610580576104d6868563ffffffff61079a16565b9550426008600b548154811015156104ea57fe5b6000918252602090912060036004909202010155600b80546001808201909255600880549194509290910191908390811061052157fe5b60009182526020822060049091020154604051600160a060020a039091169186156108fc02918791818181858888f19350505050506008600b5481548110151561056757fe5b90600052602060002090600402016002015493506104a5565b50505050505050005b34801561059557600080fd5b5061059e6107b1565b6040805192835260208301919091528051918290030190f35b3480156105c357600080fd5b506105cc6107ba565b60408051600160a060020a039092168252519081900360200190f35b3480156105f457600080fd5b506105fd6107d2565b60408051918252519081900360200190f35b34801561061b57600080fd5b506105fd6107d8565b34801561063057600080fd5b506105cc6107de565b34801561064557600080fd5b5061065a600160a060020a03600435166107f6565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561069157600080fd5b5061069a6108fe565b005b3480156106a857600080fd5b506105fd610968565b3480156106bd57600080fd5b506105cc61096e565b3480156106d257600080fd5b506106db61097d565b604080519115158252519081900360200190f35b3480156106fb57600080fd5b5061070760043561098e565b60408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190f35b34801561074357600080fd5b506105fd6109e1565b34801561075857600080fd5b506105fd600160a060020a0360043516610a05565b600081151561077e57506000610794565b60018301548354830281151561079057fe5b0490505b92915050565b600080838311156107aa57600080fd5b5050900390565b60055460065482565b73f86117de6539c6f48764b638412c99f3adb1989281565b600c5481565b600a5481565b7333a6c786cf6d69cc62c475b5d69947af08bb621081565b600160a060020a0381166000908152600960205260408120549080808080805b868110156108f357600160a060020a038816600090815260096020526040902080548290811061084257fe5b9060005260206000200154915060088281548110151561085e57fe5b90600052602060002090600402016001015486019550600060088381548110151561088557fe5b90600052602060002090600402016003015411156108eb5760088054839081106108ab57fe5b906000526020600020906004020160020154840193506001850194506008828154811015156108d657fe5b90600052602060002090600402016003015492505b600101610816565b505091939590929450565b61090661097d565b151561091157600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60075481565b600054600160a060020a031690565b600054600160a060020a0316331490565b60008060008060006008868154811015156109a557fe5b60009182526020909120600490910201805460018201546002830154600390930154600160a060020a0390921699909850919650945092505050565b600c5460009030319081106109f95760009150610a01565b80600c540391505b5090565b600160a060020a0316600090815260096020526040902054905600a165627a7a72305820b90fb7b72a26ea8c6aabaf6ed7a023ff02968a795f4fa5e18a3fbbe4a08ca6150029"
}