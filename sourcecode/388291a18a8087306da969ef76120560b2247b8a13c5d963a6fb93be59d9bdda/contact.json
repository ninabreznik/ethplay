{
  "address": "0x1075dac8715ce21f77272cd727fc88eba7f83351",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SicBo",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-10\n*/\n\npragma solidity ^0.4.24;\n\n/**\n *\n * ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\n * Web              - https://winethfree.com\n * Twitter          - https://twitter.com/winethfree\n * Telegram_channel - https://t.me/winethfree\n * Telegram_group   - https://t.me/wef_group\n *\n * __          ___         ______ _______ _    _   ______\n * \\ \\        / (_)       |  ____|__   __| |  | | |  ____|\n *  \\ \\  /\\  / / _ _ __   | |__     | |  | |__| | | |__ _ __ ___  ___\n *   \\ \\/  \\/ / | | '_ \\  |  __|    | |  |  __  | |  __| '__/ _ \\/ _ \\\n *    \\  /\\  /  | | | | | | |____   | |  | |  | | | |  | | |  __/  __/\n *     \\/  \\/   |_|_| |_| |______|  |_|  |_|  |_| |_|  |_|  \\___|\\___|\n */\n\ncontract Accessibility {\n    address internal owner;\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"access denied\");\n        _;\n    }\n\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n}\n\ncontract SicBo is Accessibility {\n    // using SafeMath for *;\n\n    struct Record {\n        uint blockNum;\n        address player;\n        uint8[] index;\n        uint16[] bet;\n    }\n\n    uint public pWagerPrice = 10 finney;\n    uint public pMaxWins = 5 ether;\n\n    uint public seqId = 0;\n    uint public drawId = 0;\n\n    mapping(uint => Record) private gRecords;\n\n    function() payable public {\n        gCroupiers[msg.sender] = true;\n    }\n\n    mapping(address => bool) private gCroupiers;\n\n    modifier onlyCroupier {\n        require(gCroupiers[msg.sender] == true, \"OnlyCroupier methods called by non-croupier.\");\n        _;\n    }\n\n    function setCroupier(address addr) external onlyOwner {\n        gCroupiers[addr] = true;\n    }\n\n    function setMaxWin(uint value) external onlyCroupier {\n        pMaxWins = value;\n    }\n\n    function setWagerPrice(uint value) external onlyCroupier {\n        pWagerPrice = value;\n    }\n\n    function withdraw(address receive, uint value) external onlyOwner {\n        require(address(this).balance >= value, \"no enough balance\");\n        receive.transfer(value);\n    }\n\n    function sortRandomNums() private view returns(uint[] memory) {\n\n        uint random = uint(keccak256(abi.encodePacked(blockhash(block.number - 1), block.difficulty, block.coinbase, now)));\n\n        uint[] memory nums = new uint[](3);\n        nums[0] = (random & 0xFFFFFFFFFFFFFFFF) % 6 + 1;\n        nums[1] = ((random >> 64) & 0xFFFFFFFFFFFFFFFF) % 6 + 1;\n        nums[2] = (random >> 128) % 6 + 1;\n\n        sort(nums);\n        return(nums);\n    }\n\n    function sort(uint[] memory data) private pure {\n        uint temp;\n        if (data[0] > data[1]) {\n            temp = data[0];\n            data[0] = data[1];\n            data[1] = temp;\n        }\n\n        if (data[1] > data[2]) {\n            temp = data[1];\n            data[1] = data[2];\n            data[2] = temp;\n        }\n\n        if (data[0] > data[1]) {\n            temp = data[0];\n            data[0] = data[1];\n            data[1] = temp;\n        }\n    }\n\n    function betMatch(uint8[] memory index, uint16[] memory value, uint[] memory nums) private pure returns(uint win) {\n        uint sum = nums[0] + nums[1] + nums[2];\n\n        uint wager;\n        uint matched;\n        uint i;\n        uint k;\n\n        for (uint j = 0; j < index.length; j++) {\n            i = index[j];\n            wager = value[j];\n\n            if (wager == 0)\n                continue;\n\n            if (i == 0) {\n                // sum: 3 - 10, odds: 1\n                if (sum < 11 && (nums[0] != nums[1] || nums[1] != nums[2])) {\n                    win += wager * 2;\n                }\n            } else if (i == 1) {\n                // sum: 11 - 18, odds: 1\n                if (sum > 10 && (nums[0] != nums[1] || nums[1] != nums[2])) {\n                    win += wager * 2;\n                }\n            } else if (i == 2) {\n                // num: [1, 1, x], odds: 10\n                if (nums[0] == 1 && nums[1] == 1) {\n                    win += wager * 11;\n                }\n            } else if (i == 3) {\n                // num: [2, 2, x], odds: 10\n                if ((nums[0] == 2 && nums[1] == 2) || (nums[1] == 2 && nums[2] == 2)) {\n                    win += wager * 11;\n                }\n            } else if (i == 4) {\n                // num: [3, 3, x], odds: 10\n                if ((nums[0] == 3 && nums[1] == 3) || (nums[1] == 3 && nums[2] == 3)) {\n                    win += wager * 11;\n                }\n            } else if (i == 5) {\n                // num: [4, 4, x], odds: 10\n                if ((nums[0] == 4 && nums[1] == 4) || (nums[1] == 4 && nums[2] == 4)) {\n                    win += wager * 11;\n                }\n            } else if (i == 6) {\n                // num: [5, 5, x], odds: 10\n                if ((nums[0] == 5 && nums[1] == 5) || (nums[1] == 5 && nums[2] == 5)) {\n                    win += wager * 11;\n                }\n            } else if (i == 7) {\n                // num: [6, 6, x], odds: 10\n                if ((nums[0] == 6 && nums[1] == 6) || (nums[1] == 6 && nums[2] == 6)) {\n                    win += wager * 11;\n                }\n            } else if (i == 8) {\n                // num: [1, 1, 1], odds: 180\n                if (sum == 3) {\n                    win += wager * 181;\n                }\n            } else if (i == 9) {\n                // num: [2, 2, 2], odds: 180\n                if (nums[0] == 2 && nums[1] == 2 && nums[2] == 2) {\n                    win += wager * 181;\n                }\n            } else if (i == 10) {\n                // num: [3, 3, 3], odds: 180\n                if (nums[0] == 3 && nums[1] == 3 && nums[2] == 3) {\n                    win += wager * 181;\n                }\n            } else if (i == 11) {\n                // num: [4, 4, 4], odds: 180\n                if (nums[0] == 4 && nums[1] == 4 && nums[2] == 4) {\n                    win += wager * 181;\n                }\n            } else if (i == 12) {\n                // num: [5, 5, 5], odds: 180\n                if (nums[0] == 5 && nums[1] == 5 && nums[2] == 5) {\n                    win += wager * 181;\n                }\n            } else if (i == 13) {\n                // num: [6, 6, 6], odds: 180\n                if (sum == 18) {\n                    win += wager * 181;\n                }\n            } else if (i == 14) {\n                // num: [x, x, x], odds: 30\n                if (nums[0] == nums[1] && nums[1] == nums[2]) {\n                    win += wager * 31;\n                }\n            } else if (i == 15) {\n                // sum: 4, odds: 60\n                if (sum == 4) {\n                    win += wager * 61;\n                }\n            } else if (i == 16) {\n                // sum: 5, odds: 30\n                if (sum == 5) {\n                    win += wager * 31;\n                }\n            } else if (i == 17) {\n                // sum: 6, odds: 18\n                if (sum == 6) {\n                    win += wager * 19;\n                }\n            } else if (i == 18) {\n                // sum: 7, odds: 12\n                if (sum == 7) {\n                    win += wager * 13;\n                }\n            } else if (i == 19) {\n                // sum: 8, odds: 8\n                if (sum == 8) {\n                    win += wager * 9;\n                }\n            } else if (i == 20) {\n                // sum: 9, odds: 6\n                if (sum == 9) {\n                    win += wager * 7;\n                }\n            } else if (i == 21) {\n                // sum: 10, odds: 6\n                if (sum == 10) {\n                    win += wager * 7;\n                }\n            } else if (i == 22) {\n                // sum: 11, odds: 6\n                if (sum == 11) {\n                    win += wager * 7;\n                }\n            } else if (i == 23) {\n                // sum: 12, odds: 6\n                if (sum == 12) {\n                    win += wager * 7;\n                }\n            } else if (i == 24) {\n                // sum: 13, odds: 8\n                if (sum == 13) {\n                    win += wager * 9;\n                }\n            } else if (i == 25) {\n                // sum: 14, odds: 12\n                if (sum == 14) {\n                    win += wager * 13;\n                }\n            } else if (i == 26) {\n                // sum: 15, odds: 18\n                if (sum == 15) {\n                    win += wager * 19;\n                }\n            } else if (i == 27) {\n                // sum: 16, odds: 30\n                if (sum == 16) {\n                    win += wager * 31;\n                }\n            } else if (i == 28) {\n                // sum: 17, odds: 60\n                if (sum == 17) {\n                    win += wager * 61;\n                }\n            } else if (i == 29) {\n                // num: [1, 2, x], odds: 5\n                if (nums[0] == 1 && (nums[1] == 2 || nums[2] == 2)) {\n                    win += wager * 6;\n                }\n            } else if (i == 30) {\n                // num: [1, 3, x], odds: 5\n                if (nums[0] == 1 && (nums[1] == 3 || nums[2] == 3)) {\n                    win += wager * 6;\n                }\n            } else if (i == 31) {\n                // num: [1, 4, x], odds: 5\n                if (nums[0] == 1 && (nums[1] == 4 || nums[2] == 4)) {\n                    win += wager * 6;\n                }\n            } else if (i == 32) {\n                // num: [1, 5, x], odds: 5\n                if (nums[0] == 1 && (nums[1] == 5 || nums[2] == 5)) {\n                    win += wager * 6;\n                }\n            } else if (i == 33) {\n                // num: [1, 6, x], odds: 5\n                if (nums[0] == 1 && (nums[1] == 6 || nums[2] == 6)) {\n                    win += wager * 6;\n                }\n            } else if (i == 34) {\n                // num: [2, 3, x], odds: 5\n                if ((nums[0] == 2 && nums[1] == 3) || (nums[1] == 2 && nums[2] == 3)) {\n                    win += wager * 6;\n                }\n            } else if (i == 35) {\n                // num: [2, 4, x], odds: 5\n                if ((nums[0] == 2 && nums[1] == 4) || (nums[1] == 2 && nums[2] == 4) || (nums[0] == 2 && nums[2] == 4)) {\n                    win += wager * 6;\n                }\n            } else if (i == 36) {\n                // num: [2, 5, x], odds: 5\n                if ((nums[0] == 2 && nums[1] == 5) || (nums[1] == 2 && nums[2] == 5) || (nums[0] == 2 && nums[2] == 5)) {\n                    win += wager * 6;\n                }\n            } else if (i == 37) {\n                // num: [2, 6, x], odds: 5\n                if ((nums[0] == 2 && nums[1] == 6) || (nums[1] == 2 && nums[2] == 6) || (nums[0] == 2 && nums[2] == 6)) {\n                    win += wager * 6;\n                }\n            } else if (i == 38) {\n                // num: [3, 4, x], odds: 5\n                if ((nums[0] == 3 && nums[1] == 4) || (nums[1] == 3 && nums[2] == 4)) {\n                    win += wager * 6;\n                }\n            } else if (i == 39) {\n                // num: [3, 5, x], odds: 5\n                if ((nums[0] == 3 && nums[1] == 5) || (nums[1] == 3 && nums[2] == 5) || (nums[0] == 3 && nums[2] == 5)) {\n                    win += wager * 6;\n                }\n            } else if (i == 40) {\n                // num: [3, 6, x], odds: 5\n                if ((nums[0] == 3 && nums[1] == 6) || (nums[1] == 3 && nums[2] == 6) || (nums[0] == 3 && nums[2] == 6)) {\n                    win += wager * 6;\n                }\n            } else if (i == 41) {\n                // num: [4, 5, x], odds: 5\n                if ((nums[0] == 4 && nums[1] == 5) || (nums[1] == 4 && nums[2] == 5)) {\n                    win += wager * 6;\n                }\n            } else if (i == 42) {\n                // num: [4, 6, x], odds: 5\n                if ((nums[0] == 4 && nums[1] == 6) || (nums[1] == 4 && nums[2] == 6) || (nums[0] == 4 && nums[2] == 6)) {\n                    win += wager * 6;\n                }\n            } else if (i == 43) {\n                // num: [5, 6, x], odds: 5\n                if ((nums[0] == 5 && nums[1] == 6) || (nums[1] == 5 && nums[2] == 6)) {\n                    win += wager * 6;\n                }\n            } else if (i == 44) {\n                // num: num of 1, odds: num of 1\n                matched = 0;\n                for (k = 0; k < 3; k++) {\n                    if (nums[k] == 1) {\n                        matched += 1;\n                    }\n                }\n                if (matched > 0) {\n                    win += wager * (matched + 1);\n                }\n            } else if (i == 45) {\n                // num: num of 2, odds: num of 2\n                matched = 0;\n                for (k = 0; k < 3; k++) {\n                    if (nums[k] == 2) {\n                        matched += 1;\n                    }\n                }\n                if (matched > 0) {\n                    win += wager * (matched + 1);\n                }\n            } else if (i == 46) {\n                // num: num of 3, odds: num of 3\n                matched = 0;\n                for (k = 0; k < 3; k++) {\n                    if (nums[k] == 3) {\n                        matched += 1;\n                    }\n                }\n                if (matched > 0) {\n                    win += wager * (matched + 1);\n                }\n            } else if (i == 47) {\n                // num: num of 4, odds: num of 4\n                matched = 0;\n                for (k = 0; k < 3; k++) {\n                    if (nums[k] == 4) {\n                        matched += 1;\n                    }\n                }\n                if (matched > 0) {\n                    win += wager * (matched + 1);\n                }\n            } else if (i == 48) {\n                // num: num of 5, odds: num of 5\n                matched = 0;\n                for (k = 0; k < 3; k++) {\n                    if (nums[k] == 5) {\n                        matched += 1;\n                    }\n                }\n                if (matched > 0) {\n                    win += wager * (matched + 1);\n                }\n            } else {\n                // num: num of 6, odds: num of 6\n                matched = 0;\n                for (k = 0; k < 3; k++) {\n                    if (nums[k] == 6) {\n                        matched += 1;\n                    }\n                }\n                if (matched > 0) {\n                    win += wager * (matched + 1);\n                }\n            }\n        }\n    }\n\n    event LogBet(address, uint8[], uint16[], uint[], uint);\n\n    function doBet(uint8[] memory index, uint16[] memory bet) isHuman() payable public {\n        uint value = msg.value;\n        address sender = msg.sender;\n\n        require(value >= pWagerPrice, \"too little wager\");\n        require(index.length == bet.length, \"wrong params\");\n        require(address(this).balance >= pMaxWins, \"out of balance\");\n\n        uint wagers;\n        uint8 j;\n\n        for (uint8 i = 0; i < index.length; i++) {\n            j = index[i];\n            require(j >= 0 && j < 50, \"wrong index\");\n            wagers += bet[i];\n        }\n        require(value / pWagerPrice == wagers, \"wrong bet\");\n\n        uint id = seqId++;\n\n        gRecords[id].blockNum = block.number;\n        gRecords[id].player = sender;\n        gRecords[id].index = index;\n        gRecords[id].bet = bet;\n    }\n\n    function drawLottery(address player, uint8[] memory index, uint16[] memory bet, uint[] memory nums) private {\n        uint wins;\n        uint maxWins = pMaxWins / pWagerPrice;\n\n        wins = betMatch(index, bet, nums);\n\n        if (wins > 0) {\n            if ( wins > maxWins) {\n                wins = maxWins;\n            }\n\n            player.transfer(wins * pWagerPrice);\n        }\n\n        emit LogBet(player, index, bet, nums, wins);\n    }\n\n    function settleBet() external onlyCroupier {\n        uint[] memory nums = sortRandomNums();\n\n        if (drawId == seqId)\n            return;\n\n        for (uint i = drawId; i < seqId && gRecords[i].blockNum < block.number; i++) {\n            drawLottery(gRecords[i].player, gRecords[i].index, gRecords[i].bet, nums);\n        }\n        drawId = i;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"pMaxWins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pWagerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setWagerPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seqId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8[]\"},{\"name\":\"bet\",\"type\":\"uint16[]\"}],\"name\":\"doBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drawId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receive\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint8[]\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint16[]\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"}]",
  "bytecode": "6080604052662386f26fc10000600155674563918244f4000060025560006003556000600455336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612dd0806100746000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806310169ca4146100fe57806313485ff0146101295780632c6894041461015457806338ecb707146101815780638e4bf820146101ac578063b2daebb7146101c3578063eb0e81d41461025f578063f0ee7df21461028a578063f3fef3a3146102b7578063f8bb201c14610304575b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550005b34801561010a57600080fd5b50610113610347565b6040518082815260200191505060405180910390f35b34801561013557600080fd5b5061013e61034d565b6040518082815260200191505060405180910390f35b34801561016057600080fd5b5061017f60048036038101908080359060200190929190505050610353565b005b34801561018d57600080fd5b5061019661044b565b6040518082815260200191505060405180910390f35b3480156101b857600080fd5b506101c1610451565b005b61025d6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610700565b005b34801561026b57600080fd5b50610274610b67565b6040518082815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610b6d565b005b3480156102c357600080fd5b50610302600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c65565b005b34801561031057600080fd5b50610345600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e03565b005b60025481565b60015481565b60011515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4f6e6c7943726f7570696572206d6574686f64732063616c6c6564206279206e81526020017f6f6e2d63726f75706965722e000000000000000000000000000000000000000081525060400191505060405180910390fd5b8060018190555050565b60035481565b6060600060011515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4f6e6c7943726f7570696572206d6574686f64732063616c6c6564206279206e81526020017f6f6e2d63726f75706965722e000000000000000000000000000000000000000081525060400191505060405180910390fd5b61054b610f22565b9150600354600454141561055e576106fc565b60045490505b6003548110801561058a5750436005600083815260200190815260200160002060000154105b156106f4576106e76005600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561064f57602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116106185790505b5050505050600560008581526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156106dc57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116106a35790505b5050505050856110fe565b8080600101915050610564565b806004819055505b5050565b600080600080600080600080339150813b905060008114151561078b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b349750339650600154881015151561080b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f746f6f206c6974746c652077616765720000000000000000000000000000000081525060200191505060405180910390fd5b88518a51141515610884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720706172616d73000000000000000000000000000000000000000081525060200191505060405180910390fd5b6002543073ffffffffffffffffffffffffffffffffffffffff163110151515610915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6f7574206f662062616c616e636500000000000000000000000000000000000081525060200191505060405180910390fd5b600093505b89518460ff1610156109fe57898460ff1681518110151561093757fe5b90602001906020020151945060008560ff161015801561095a575060328560ff16105b15156109ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720696e64657800000000000000000000000000000000000000000081525060200191505060405180910390fd5b888460ff168151811015156109df57fe5b9060200190602002015161ffff1686019550838060010194505061091a565b8560015489811515610a0c57fe5b04141515610a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f77726f6e6720626574000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60036000815480929190600101919050559250436005600085815260200190815260200160002060000181905550866005600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600560008581526020019081526020016000206002019080519060200190610b2f929190612bf2565b5088600560008581526020019081526020016000206003019080519060200190610b5a929190612c99565b5050505050505050505050565b60045481565b60011515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610c5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4f6e6c7943726f7570696572206d6574686f64732063616c6c6564206279206e81526020017f6f6e2d63726f75706965722e000000000000000000000000000000000000000081525060400191505060405180910390fd5b8060028190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b803073ffffffffffffffffffffffffffffffffffffffff163110151515610db8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f20656e6f7567682062616c616e636500000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610dfe573d6000803e3d6000fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ec7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60606000606060014303404441426040516020018085600019166000191681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610fdc5780518252602082019150602081019050602083039250610fb7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190049150600360405190808252806020026020018201604052801561103f5781602001602082028038833980820191505090505b5090506001600667ffffffffffffffff841681151561105a57fe5b060181600081518110151561106b57fe5b90602001906020020181815250506001600667ffffffffffffffff6040859060020a90041681151561109957fe5b06018160018151811015156110aa57fe5b9060200190602002018181525050600160066080849060020a90048115156110ce57fe5b06018160028151811015156110df57fe5b90602001906020020181815250506110f6816112cf565b809250505090565b60008060015460025481151561111057fe5b04905061111e8585856114cd565b915060008211156111815780821115611135578091505b8573ffffffffffffffffffffffffffffffffffffffff166108fc60015484029081150290604051600060405180830381858888f1935050505015801561117f573d6000803e3d6000fd5b505b7f3a6a9e8706e30635456e16f43a4800a0add3eb94ec1aa3540550c749356fe3e68686868686604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001858152602001848103845288818151815260200191508051906020019060200280838360005b8381101561122a57808201518184015260208101905061120f565b50505050905001848103835287818151815260200191508051906020019060200280838360005b8381101561126c578082015181840152602081019050611251565b50505050905001848103825286818151815260200191508051906020019060200280838360005b838110156112ae578082015181840152602081019050611293565b505050509050019850505050505050505060405180910390a1505050505050565b60008160018151811015156112e057fe5b906020019060200201518260008151811015156112f957fe5b9060200190602002015111156113795781600081518110151561131857fe5b90602001906020020151905081600181518110151561133357fe5b9060200190602002015182600081518110151561134c57fe5b90602001906020020181815250508082600181518110151561136a57fe5b90602001906020020181815250505b81600281518110151561138857fe5b906020019060200201518260018151811015156113a157fe5b906020019060200201511115611421578160018151811015156113c057fe5b9060200190602002015190508160028151811015156113db57fe5b906020019060200201518260018151811015156113f457fe5b90602001906020020181815250508082600281518110151561141257fe5b90602001906020020181815250505b81600181518110151561143057fe5b9060200190602002015182600081518110151561144957fe5b9060200190602002015111156114c95781600081518110151561146857fe5b90602001906020020151905081600181518110151561148357fe5b9060200190602002015182600081518110151561149c57fe5b9060200190602002018181525050808260018151811015156114ba57fe5b90602001906020020181815250505b5050565b60008060008060008060008760028151811015156114e757fe5b9060200190602002015188600181518110151561150057fe5b9060200190602002015189600081518110151561151957fe5b9060200190602002015101019550600090505b8951811015612be557898181518110151561154357fe5b9060200190602002015160ff169250888181518110151561156057fe5b9060200190602002015161ffff169450600085141561157e57612bd8565b600083141561161557600b8610801561160257508760018151811015156115a157fe5b906020019060200201518860008151811015156115ba57fe5b9060200190602002015114158061160157508760028151811015156115db57fe5b906020019060200201518860018151811015156115f457fe5b9060200190602002015114155b5b156116105760028502870196505b612bd7565b60018314156116ac57600a86118015611699575087600181518110151561163857fe5b9060200190602002015188600081518110151561165157fe5b90602001906020020151141580611698575087600281518110151561167257fe5b9060200190602002015188600181518110151561168b57fe5b9060200190602002015114155b5b156116a75760028502870196505b612bd6565b60028314156117085760018860008151811015156116c657fe5b906020019060200201511480156116f5575060018860018151811015156116e957fe5b90602001906020020151145b1561170357600b8502870196505b612bd5565b60038314156117ab57600288600081518110151561172257fe5b906020019060200201511480156117515750600288600181518110151561174557fe5b90602001906020020151145b806117985750600288600181518110151561176857fe5b906020019060200201511480156117975750600288600281518110151561178b57fe5b90602001906020020151145b5b156117a657600b8502870196505b612bd4565b600483141561184e5760038860008151811015156117c557fe5b906020019060200201511480156117f4575060038860018151811015156117e857fe5b90602001906020020151145b8061183b5750600388600181518110151561180b57fe5b9060200190602002015114801561183a5750600388600281518110151561182e57fe5b90602001906020020151145b5b1561184957600b8502870196505b612bd3565b60058314156118f157600488600081518110151561186857fe5b906020019060200201511480156118975750600488600181518110151561188b57fe5b90602001906020020151145b806118de575060048860018151811015156118ae57fe5b906020019060200201511480156118dd575060048860028151811015156118d157fe5b90602001906020020151145b5b156118ec57600b8502870196505b612bd2565b600683141561199457600588600081518110151561190b57fe5b9060200190602002015114801561193a5750600588600181518110151561192e57fe5b90602001906020020151145b806119815750600588600181518110151561195157fe5b906020019060200201511480156119805750600588600281518110151561197457fe5b90602001906020020151145b5b1561198f57600b8502870196505b612bd1565b6007831415611a375760068860008151811015156119ae57fe5b906020019060200201511480156119dd575060068860018151811015156119d157fe5b90602001906020020151145b80611a24575060068860018151811015156119f457fe5b90602001906020020151148015611a2357506006886002815181101515611a1757fe5b90602001906020020151145b5b15611a3257600b8502870196505b612bd0565b6008831415611a57576003861415611a525760b58502870196505b612bcf565b6009831415611ad7576002886000815181101515611a7157fe5b90602001906020020151148015611aa057506002886001815181101515611a9457fe5b90602001906020020151145b8015611ac457506002886002815181101515611ab857fe5b90602001906020020151145b15611ad25760b58502870196505b612bce565b600a831415611b57576003886000815181101515611af157fe5b90602001906020020151148015611b2057506003886001815181101515611b1457fe5b90602001906020020151145b8015611b4457506003886002815181101515611b3857fe5b90602001906020020151145b15611b525760b58502870196505b612bcd565b600b831415611bd7576004886000815181101515611b7157fe5b90602001906020020151148015611ba057506004886001815181101515611b9457fe5b90602001906020020151145b8015611bc457506004886002815181101515611bb857fe5b90602001906020020151145b15611bd25760b58502870196505b612bcc565b600c831415611c57576005886000815181101515611bf157fe5b90602001906020020151148015611c2057506005886001815181101515611c1457fe5b90602001906020020151145b8015611c4457506005886002815181101515611c3857fe5b90602001906020020151145b15611c525760b58502870196505b612bcb565b600d831415611c77576012861415611c725760b58502870196505b612bca565b600e831415611d0157876001815181101515611c8f57fe5b90602001906020020151886000815181101515611ca857fe5b90602001906020020151148015611cee5750876002815181101515611cc957fe5b90602001906020020151886001815181101515611ce257fe5b90602001906020020151145b15611cfc57601f8502870196505b612bc9565b600f831415611d21576004861415611d1c57603d8502870196505b612bc8565b6010831415611d41576005861415611d3c57601f8502870196505b612bc7565b6011831415611d61576006861415611d5c5760138502870196505b612bc6565b6012831415611d81576007861415611d7c57600d8502870196505b612bc5565b6013831415611da1576008861415611d9c5760098502870196505b612bc4565b6014831415611dc1576009861415611dbc5760078502870196505b612bc3565b6015831415611de157600a861415611ddc5760078502870196505b612bc2565b6016831415611e0157600b861415611dfc5760078502870196505b612bc1565b6017831415611e2157600c861415611e1c5760078502870196505b612bc0565b6018831415611e4157600d861415611e3c5760098502870196505b612bbf565b6019831415611e6157600e861415611e5c57600d8502870196505b612bbe565b601a831415611e8157600f861415611e7c5760138502870196505b612bbd565b601b831415611ea1576010861415611e9c57601f8502870196505b612bbc565b601c831415611ec1576011861415611ebc57603d8502870196505b612bbb565b601d831415611f40576001886000815181101515611edb57fe5b90602001906020020151148015611f2d57506002886001815181101515611efe57fe5b906020019060200201511480611f2c57506002886002815181101515611f2057fe5b90602001906020020151145b5b15611f3b5760068502870196505b612bba565b601e831415611fbf576001886000815181101515611f5a57fe5b90602001906020020151148015611fac57506003886001815181101515611f7d57fe5b906020019060200201511480611fab57506003886002815181101515611f9f57fe5b90602001906020020151145b5b15611fba5760068502870196505b612bb9565b601f83141561203e576001886000815181101515611fd957fe5b9060200190602002015114801561202b57506004886001815181101515611ffc57fe5b90602001906020020151148061202a5750600488600281518110151561201e57fe5b90602001906020020151145b5b156120395760068502870196505b612bb8565b60208314156120bd57600188600081518110151561205857fe5b906020019060200201511480156120aa5750600588600181518110151561207b57fe5b9060200190602002015114806120a95750600588600281518110151561209d57fe5b90602001906020020151145b5b156120b85760068502870196505b612bb7565b602183141561213c5760018860008151811015156120d757fe5b90602001906020020151148015612129575060068860018151811015156120fa57fe5b9060200190602002015114806121285750600688600281518110151561211c57fe5b90602001906020020151145b5b156121375760068502870196505b612bb6565b60228314156121df57600288600081518110151561215657fe5b906020019060200201511480156121855750600388600181518110151561217957fe5b90602001906020020151145b806121cc5750600288600181518110151561219c57fe5b906020019060200201511480156121cb575060038860028151811015156121bf57fe5b90602001906020020151145b5b156121da5760068502870196505b612bb5565b60238314156122c95760028860008151811015156121f957fe5b906020019060200201511480156122285750600488600181518110151561221c57fe5b90602001906020020151145b8061226f5750600288600181518110151561223f57fe5b9060200190602002015114801561226e5750600488600281518110151561226257fe5b90602001906020020151145b5b806122b65750600288600081518110151561228657fe5b906020019060200201511480156122b5575060048860028151811015156122a957fe5b90602001906020020151145b5b156122c45760068502870196505b612bb4565b60248314156123b35760028860008151811015156122e357fe5b906020019060200201511480156123125750600588600181518110151561230657fe5b90602001906020020151145b806123595750600288600181518110151561232957fe5b906020019060200201511480156123585750600588600281518110151561234c57fe5b90602001906020020151145b5b806123a05750600288600081518110151561237057fe5b9060200190602002015114801561239f5750600588600281518110151561239357fe5b90602001906020020151145b5b156123ae5760068502870196505b612bb3565b602583141561249d5760028860008151811015156123cd57fe5b906020019060200201511480156123fc575060068860018151811015156123f057fe5b90602001906020020151145b806124435750600288600181518110151561241357fe5b906020019060200201511480156124425750600688600281518110151561243657fe5b90602001906020020151145b5b8061248a5750600288600081518110151561245a57fe5b906020019060200201511480156124895750600688600281518110151561247d57fe5b90602001906020020151145b5b156124985760068502870196505b612bb2565b60268314156125405760038860008151811015156124b757fe5b906020019060200201511480156124e6575060048860018151811015156124da57fe5b90602001906020020151145b8061252d575060038860018151811015156124fd57fe5b9060200190602002015114801561252c5750600488600281518110151561252057fe5b90602001906020020151145b5b1561253b5760068502870196505b612bb1565b602783141561262a57600388600081518110151561255a57fe5b906020019060200201511480156125895750600588600181518110151561257d57fe5b90602001906020020151145b806125d0575060038860018151811015156125a057fe5b906020019060200201511480156125cf575060058860028151811015156125c357fe5b90602001906020020151145b5b80612617575060038860008151811015156125e757fe5b906020019060200201511480156126165750600588600281518110151561260a57fe5b90602001906020020151145b5b156126255760068502870196505b612bb0565b602883141561271457600388600081518110151561264457fe5b906020019060200201511480156126735750600688600181518110151561266757fe5b90602001906020020151145b806126ba5750600388600181518110151561268a57fe5b906020019060200201511480156126b9575060068860028151811015156126ad57fe5b90602001906020020151145b5b80612701575060038860008151811015156126d157fe5b90602001906020020151148015612700575060068860028151811015156126f457fe5b90602001906020020151145b5b1561270f5760068502870196505b612baf565b60298314156127b757600488600081518110151561272e57fe5b9060200190602002015114801561275d5750600588600181518110151561275157fe5b90602001906020020151145b806127a45750600488600181518110151561277457fe5b906020019060200201511480156127a35750600588600281518110151561279757fe5b90602001906020020151145b5b156127b25760068502870196505b612bae565b602a8314156128a15760048860008151811015156127d157fe5b90602001906020020151148015612800575060068860018151811015156127f457fe5b90602001906020020151145b806128475750600488600181518110151561281757fe5b906020019060200201511480156128465750600688600281518110151561283a57fe5b90602001906020020151145b5b8061288e5750600488600081518110151561285e57fe5b9060200190602002015114801561288d5750600688600281518110151561288157fe5b90602001906020020151145b5b1561289c5760068502870196505b612bad565b602b8314156129445760058860008151811015156128bb57fe5b906020019060200201511480156128ea575060068860018151811015156128de57fe5b90602001906020020151145b806129315750600588600181518110151561290157fe5b906020019060200201511480156129305750600688600281518110151561292457fe5b90602001906020020151145b5b1561293f5760068502870196505b612bac565b602c8314156129ac5760009350600091505b6003821015612993576001888381518110151561296f57fe5b906020019060200201511415612986576001840193505b8180600101925050612956565b60008411156129a757600184018502870196505b612bab565b602d831415612a145760009350600091505b60038210156129fb57600288838151811015156129d757fe5b9060200190602002015114156129ee576001840193505b81806001019250506129be565b6000841115612a0f57600184018502870196505b612baa565b602e831415612a7c5760009350600091505b6003821015612a635760038883815181101515612a3f57fe5b906020019060200201511415612a56576001840193505b8180600101925050612a26565b6000841115612a7757600184018502870196505b612ba9565b602f831415612ae45760009350600091505b6003821015612acb5760048883815181101515612aa757fe5b906020019060200201511415612abe576001840193505b8180600101925050612a8e565b6000841115612adf57600184018502870196505b612ba8565b6030831415612b4c5760009350600091505b6003821015612b335760058883815181101515612b0f57fe5b906020019060200201511415612b26576001840193505b8180600101925050612af6565b6000841115612b4757600184018502870196505b612ba7565b60009350600091505b6003821015612b925760068883815181101515612b6e57fe5b906020019060200201511415612b85576001840193505b8180600101925050612b55565b6000841115612ba657600184018502870196505b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b808060010191505061152c565b5050505050509392505050565b82805482825590600052602060002090601f01602090048101928215612c885791602002820160005b83821115612c5957835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612c1b565b8015612c865782816101000a81549060ff0219169055600101602081600001049283019260010302612c59565b505b509050612c959190612d43565b5090565b82805482825590600052602060002090600f01601090048101928215612d325791602002820160005b83821115612d0257835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612cc2565b8015612d305782816101000a81549061ffff0219169055600201602081600101049283019260010302612d02565b505b509050612d3f9190612d73565b5090565b612d7091905b80821115612d6c57600081816101000a81549060ff021916905550600101612d49565b5090565b90565b612da191905b80821115612d9d57600081816101000a81549061ffff021916905550600101612d79565b5090565b905600a165627a7a72305820ddfb5db56f9e60ad54a8967046d66a98dd5b3e1a85c86215177663d359adcc5d0029"
}