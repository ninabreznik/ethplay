{
  "address": "0x7390e3a0A875D84De8FcbF4caaF32Ca112D96466",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FranklinProxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-17\n*/\n\npragma solidity ^0.4.13;\n\ncontract FranklinStorage {\n\n    // NOTE: This is test code! All contracts will be thoughrouhly rewritten for production.\n\n    address public testCreator;\n\n    constructor() public {\n        testCreator = msg.sender;\n    }\n\n    function killThisTestContract() public {\n        require(msg.sender == testCreator, \"only creator can clean up test contracts\");\n        selfdestruct(testCreator);\n    }\n    \n\n    // For tree depth 24\n    bytes32 constant EMPTY_TREE_ROOT = 0x003f7e15e4de3453fe13e11fb4b007f1fce6a5b0f0353b3b8208910143aaa2f7;\n\n    uint256 public constant DEADLINE = 3600;\n\n    event BlockCommitted(uint32 indexed blockNumber);\n    event BlockVerified(uint32 indexed blockNumber);\n\n    enum Circuit {\n        DEPOSIT,\n        TRANSFER,\n        EXIT\n    }\n\n    enum AccountState {\n        NOT_REGISTERED,\n        REGISTERED,\n        PENDING_EXIT,\n        UNCONFIRMED_EXIT\n    }\n\n    struct Block {\n        uint8 circuit;\n        uint64  deadline;\n        uint128 totalFees;\n        bytes32 newRoot;\n        bytes32 publicDataCommitment;\n        address prover;\n    }\n\n    // Key is block number\n    mapping (uint32 => Block) public blocks;\n    // Only some addresses can send proofs\n    mapping (address => bool) public operators;\n    // Fee collection accounting\n    mapping (address => uint256) public balances;\n\n    struct Account {\n        uint8 state;\n        uint32 exitBatchNumber;\n        address owner;\n        uint256 publicKey;\n        uint32 exitListHead;\n        uint32 exitListTail;\n    }\n\n    // one Ethereum address should have one account\n    mapping (address => uint24) public ethereumAddressToAccountID;\n\n    // Plasma account => general information\n    mapping (uint24 => Account) public accounts;\n\n    // Public information for users\n    bool public stopped;\n    uint32 public lastCommittedBlockNumber;\n    uint32 public lastVerifiedBlockNumber;\n    bytes32 public lastVerifiedRoot;\n    uint64 public constant MAX_DELAY = 1 days;\n    uint256 public constant DENOMINATOR = 1000000000000;\n\n    // deposits\n\n    uint256 public constant DEPOSIT_BATCH_SIZE = 1;\n    uint256 public totalDepositRequests; // enumerates total number of deposit, starting from 0\n    uint256 public lastCommittedDepositBatch;\n    uint256 public lastVerifiedDepositBatch;\n    uint128 public currentDepositBatchFee; // deposit request fee scaled units\n\n    uint24 public constant SPECIAL_ACCOUNT_DEPOSITS = 1;\n\n    uint24 public nextAccountToRegister;\n\n    // some ideas for optimization of the deposit request information storage:\n    // store in a mapping: 20k gas to add, 5k to update a record + 5k to update the global counter per batch\n    // store in an array: 20k + 5k gas to add, 5k to update + up to DEPOSIT_BATCH_SIZE * SLOAD\n\n    // batch number => (plasma address => deposit information)\n    mapping (uint256 => mapping (uint24 => DepositRequest)) public depositRequests;\n    mapping (uint256 => DepositBatch) public depositBatches;\n\n    struct DepositRequest {\n        uint128 amount;\n    }\n\n    enum DepositBatchState {\n        CREATED,\n        COMMITTED,\n        VERIFIED\n    }\n\n    struct DepositBatch {\n        uint8 state;\n        uint24 numRequests;\n        uint32 blockNumber;\n        uint64 timestamp;\n        uint128 batchFee;\n    }\n\n    event LogDepositRequest(uint256 indexed batchNumber, uint24 indexed accountID, uint256 indexed publicKey, uint128 amount);\n    event LogCancelDepositRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n\n    // Exits \n\n    uint256 constant EXIT_BATCH_SIZE = 1;\n    uint256 public totalExitRequests; \n    uint256 public lastCommittedExitBatch;\n    uint256 public lastVerifiedExitBatch;\n    uint128 public currentExitBatchFee; \n\n    uint24 public constant SPECIAL_ACCOUNT_EXITS = 0;\n\n    // batches for complete exits\n    mapping (uint256 => ExitBatch) public exitBatches;\n\n    enum ExitBatchState {\n        CREATED,\n        COMMITTED,\n        VERIFIED\n    }\n\n    struct ExitBatch {\n        uint8 state;\n        uint32 blockNumber;\n        uint64 timestamp;\n        uint128 batchFee;\n    }\n\n    event LogExitRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n    event LogCancelExitRequest(uint256 indexed batchNumber, uint24 indexed accountID);\n\n    event LogExit(address indexed ethereumAddress, uint32 indexed blockNumber);\n    event LogCompleteExit(address indexed ethereumAddress, uint32 indexed blockNumber, uint24 accountID);\n\n    struct ExitLeaf {\n        uint32 nextID;\n        uint128 amount;\n    }\n\n    mapping (address => mapping (uint32 => ExitLeaf)) public exitLeafs;\n\n    // mapping ethereum address => block number => balance\n    // mapping (address => mapping (uint32 => uint128)) public exitAmounts;\n    // Delegates chain\n    address public depositor;\n    address public transactor;\n    address public exitor;\n}\n\ncontract Verifier {\n\n    function NegateY( uint256 Y )\n        internal pure returns (uint256)\n    {\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        return q - (Y % q);\n    }\n\n    function Verify ( uint256[14] in_vk, uint256[] vk_gammaABC, uint256[8] in_proof, uint256[] proof_inputs )\n        internal \n        view \n        returns (bool)\n    {\n        require( ((vk_gammaABC.length / 2) - 1) == proof_inputs.length, \"Invalid number of public inputs\" );\n\n        // Compute the linear combination vk_x\n        uint256[3] memory mul_input;\n        uint256[4] memory add_input;\n        bool success;\n        uint m = 2;\n\n        // First two fields are used as the sum\n        add_input[0] = vk_gammaABC[0];\n        add_input[1] = vk_gammaABC[1];\n\n        // Performs a sum of gammaABC[0] + sum[ gammaABC[i+1]^proof_inputs[i] ]\n        for (uint i = 0; i < proof_inputs.length; i++) {\n            mul_input[0] = vk_gammaABC[m++];\n            mul_input[1] = vk_gammaABC[m++];\n            mul_input[2] = proof_inputs[i];\n\n            assembly {\n                // ECMUL, output to last 2 elements of `add_input`\n                success := staticcall(sub(gas, 2000), 7, mul_input, 0x60, add(add_input, 0x40), 0x40)\n            }\n            require( success, \"Failed to call ECMUL precompile\" );\n\n            assembly {\n                // ECADD\n                success := staticcall(sub(gas, 2000), 6, add_input, 0x80, add_input, 0x40)\n            }\n            require( success, \"Failed to call ECADD precompile\" );\n        }\n\n        uint[24] memory input = [\n            // (proof.A, proof.B)\n            in_proof[0], in_proof[1],                           // proof.A   (G1)\n            in_proof[2], in_proof[3], in_proof[4], in_proof[5], // proof.B   (G2)\n\n            // (-vk.alpha, vk.beta)\n            in_vk[0], NegateY(in_vk[1]),                        // -vk.alpha (G1)\n            in_vk[2], in_vk[3], in_vk[4], in_vk[5],             // vk.beta   (G2)\n\n            // (-vk_x, vk.gamma)\n            add_input[0], NegateY(add_input[1]),                // -vk_x     (G1)\n            in_vk[6], in_vk[7], in_vk[8], in_vk[9],             // vk.gamma  (G2)\n\n            // (-proof.C, vk.delta)\n            in_proof[6], NegateY(in_proof[7]),                  // -proof.C  (G1)\n            in_vk[10], in_vk[11], in_vk[12], in_vk[13]          // vk.delta  (G2)\n        ];\n\n        uint[1] memory out;\n        assembly {\n            success := staticcall(sub(gas, 2000), 8, input, 768, out, 0x20)\n        }\n        require(success, \"Failed to call pairing precompile\");\n        return out[0] == 1;\n    }\n}\n\ncontract DepositVerificationKey {\n\n    function getVkDepositCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x02834523b73cb0630d49fc3e2054522563fb6471012d3f1e6fe31cb946240774;\n        vk[1] = 0x0ba99f12ab5e9c80db6c85f62fb7a0df5d0dcb1088eb4b48d36156d816489128;\n        vk[2] = 0x0f19b305cee59f6dc3c054880068b4a13768e5b901d0479271c20f8b79243965;\n        vk[3] = 0x11e32a8c382c7fb28b177d02e354607f7c33abc7f5636e71cd0fb4cd77eb1d74;\n        vk[4] = 0x2bee5b6bb3fda73e29152d399f1bd211961f048eeb0d5a7d752ad9ffb649dff1;\n        vk[5] = 0x15ec0d94cdfe1fdcc23a58995e2af0b788fffae99691676fa943d608226b8682;\n        vk[6] = 0x03f6ee67c8871c54c6f20e77376eb305e5b4964f1019bce1ad9ce22b2bec622c;\n        vk[7] = 0x21b45fc68e2059b1eab7eee045ab7be7ed45a2d3f6e3515ac1ec28f7b490b1dd;\n        vk[8] = 0x0c9b53ea69e19134e41340bb6c0d1795661381291bf630c24396f8e866528002;\n        vk[9] = 0x2e24ea773c3f54e3e7fc82249e7de02be3932e8b156800d9e4d19a5047f85cbb;\n        vk[10] = 0x215e8c48ee50bad165d2420f9220145fa4cc98d7dcb52cc2a6e9010fd6214411;\n        vk[11] = 0x1917a1144eb6f1c16ebf2673f2eb0fe275ae8bf518ae36553354580cd191293f;\n        vk[12] = 0x1d636227f8db452d07a36077ffb1f0723947ae4cae746721445d3d249438ee57;\n        vk[13] = 0x13c4be40874508b0fa8b895657084e1a8e1bb7002d7a8cc05f0973763cb20755;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x017474e8efdf8775559844f978a7d23602c51508c42055cba41da71d8c184662;\n        gammaABC[1] = 0x0479fb6bc0d7c11f5a734f450f6a47ec94bd59014f8398b248f59dc058b76b64;\n        gammaABC[2] = 0x06cef07cba4570717e5a1389b1425ed2f9d3de870c651254f557b82187eda82c;\n        gammaABC[3] = 0x1ba4b300e354352533d910452a340d16d2205ab18698cc5158bbb89a4d6340e9;\n        gammaABC[4] = 0x16901a82f58d7d091cb47c0b8daa365e9c8dea97ff33d461044ce0c8f03cae71;\n        gammaABC[5] = 0x0902ea2f0d929f53465faab02d6e6c475868b5004b6ccdf29ec17fdcf1f4bf50;\n        gammaABC[6] = 0x113c4aa77bfc12e18d3d0f64e840c2f912406ee9e61e476aaa67f8c743baa7c2;\n        gammaABC[7] = 0x176aa258bd76a01a4f744c71483afbc1ec4cd0529a6842b8a14c7feb75821e90;\n\n\n    }\n\n}\n\ncontract ExitVerificationKey {\n\n    function getVkExitCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x2655d0f184451488c9c86edaa0f36a7d4f7a2fc3825e7d030af5660d3681ace6;\n        vk[1] = 0x30062c29546c272a712d301884a3deef21716e671c5da66cac7f5d263714a2a6;\n        vk[2] = 0x1e6c69a1d12135996fa27fb9f435d1876b34629e574671ba77826b8733d93b65;\n        vk[3] = 0x0bb271e151e34c9bfe2abaaf66c5888ccfa6c2272a29ab8f5f572d1177fbdf1e;\n        vk[4] = 0x05ff0ddaeb5d75296cac71fd305db5a3395759a926cb6c8701f84d35710f78ee;\n        vk[5] = 0x20272b96093e40001583fead3bd6e8c6453f346bdf92d5779bed7ab884d0aa2e;\n        vk[6] = 0x0950cc975d157dd4e80dc8d162caa4e506186f7adbe9cf69867a18e56b7a167b;\n        vk[7] = 0x0a58c1bf8b3a41a9d53c66509de333ac6e110de78d270f6f4c7a32acac5d65bf;\n        vk[8] = 0x152ff1340ad2dcf6eb3b2373263f3e3d48c58e4f3c8035d994d690efb89105cd;\n        vk[9] = 0x1a7a1d4994c386d270238d45dcf938bfae17753560be434e4c98950d9a150d9c;\n        vk[10] = 0x0ea995b343d372ae0f5cad6a29ea289172d127085b8ebb9a8a46d8c359728dcb;\n        vk[11] = 0x256fd00e2102e55b0e0882a8fc9297d9e2eb66b1f368dea21c3b4fea52ff1b77;\n        vk[12] = 0x024e59df7dad7374d09caa273089b9d27057c131db4d645cbe2b780ed8dca72b;\n        vk[13] = 0x1aea3eea3d14b2240eabd4c12fa0cc60a3431e6f55132cf7809eb80b5c696c7d;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x02e10a3d18c9ddc8a7faf5e20d6cd56ae82426e802596b8e424c8d24a2d8cc91;\n        gammaABC[1] = 0x0fcf4f982b4c051fe7d7e25d73c174f709e1a116a39573f5ebcce86a694086ac;\n        gammaABC[2] = 0x0647167a8df2f9de6e1dbd6e6e52e8bcf6b64d7fb9a6405f3efca93f250cac14;\n        gammaABC[3] = 0x2045113ec018db92050dba997d86b3b440c420d55819887fee065a17ef897897;\n        gammaABC[4] = 0x253baaed4e84773d8b85c1ac4d0b64d15d5652b318c3a72daf96a6d26a6d1481;\n        gammaABC[5] = 0x170034f174be16fd996aeb4ac97653a3f0e344ed8b5dbe947d952208a938edba;\n        gammaABC[6] = 0x23967a7baa217743b308217c7db86912a130a668bce7c9ac030d5ed42472347c;\n        gammaABC[7] = 0x2bfd3180a31b3fef9328b1225755ea2e7ca8d1e832cb4729930e15b5f842300d;\n\n\n    }\n\n}\n\ncontract TransferVerificationKey {\n\n    function getVkTransferCircuit() internal pure returns (uint256[14] memory vk, uint256[] memory gammaABC) {\n\n        \n        vk[0] = 0x10c2409dca4fa02e16250e08e4cbf8eae90c8fba1e91115f065f88f73d0ec0ba;\n        vk[1] = 0x0aa6ecb84f58760a6a01d0f31bb8776582c893f66562b623d9082e50b9147015;\n        vk[2] = 0x10296458aa3bcd5ad37ae95f63f55e90b8830fe1449dc21aee05ebdf7e29ef14;\n        vk[3] = 0x0f51783ae1ca492c229a5d04bc2de03ff6ff9a4f877a2bc80bb60eb1f70cc84b;\n        vk[4] = 0x0f874f1341d40fe04cebe4668c968c74d2d09aa07e4685889c90f6d4ec4345de;\n        vk[5] = 0x1652c73a52779311ca7ffdcd9749e40592780259a9c9e738b63199dad11d7f17;\n        vk[6] = 0x086d1b9a535ffcebe71f045e022967f0c113114c04a1bf944a395c14cce50f49;\n        vk[7] = 0x2b2166f750b92453a4bc000425e93c3c412d911961dcd9050c61368f07673262;\n        vk[8] = 0x12ba168ac5544a1b8c1bd3c47b6d9a1391db76a608e4556b639e0032e2deffbe;\n        vk[9] = 0x2b32a828faf0bb870f693cc8031c166b0063d854c435ea1b516e67ba5a6d8907;\n        vk[10] = 0x100f54919b2e2f9ddaacfae446be3614441bb0e451380ec96658979748613433;\n        vk[11] = 0x066bcceed5d7a04466af77a2af1e9ca005a12f19bc4d7cc8e231354885b82607;\n        vk[12] = 0x28782e5b286bda594b1ad6320c62df3dbfcf4db5043430d19204f46a34fd4119;\n        vk[13] = 0x11b16528236d3aba305c2f3b051b0d88902465da7969d8b6719fbf9dd35dcf2a;\n\n        gammaABC = new uint256[](8);\n        gammaABC[0] = 0x0f33cb3065f68e121317d06f1424955c5a7e2ec8edebc909aac08a3f17069886;\n        gammaABC[1] = 0x037f77f317232115d1e59c5d751cdfc7cb71860def1eac9c26601ca608818d82;\n        gammaABC[2] = 0x160621974534ddb69577555fb5add3b219fc3d7940d6af98fd0b4d1323e98a02;\n        gammaABC[3] = 0x0f99ebad244805d05f610d8a9e2fb9395fe4159ed19ff545c1663395faf2e54e;\n        gammaABC[4] = 0x252887d8a49ac0d88d097657230f297137e590d836a958c33f6e86737a7b6d5d;\n        gammaABC[5] = 0x303d4a352e156b053325cd397e875076f30a41b8b5cb919c284f76021c95d506;\n        gammaABC[6] = 0x12373b5d89c0ded59c6cff32b0ff93b98a46b0fabc01be54748fbe072c34721e;\n        gammaABC[7] = 0x00c29f8e6d126eff674bede612ba90717ef37c8fa3431309d2bb81dac30871e5;\n\n\n    }\n\n}\n\ncontract VerificationKeys is TransferVerificationKey, DepositVerificationKey, ExitVerificationKey {\n}\n\ncontract FranklinCommon is VerificationKeys, FranklinStorage, Verifier {\n\n    modifier active_only() {\n        require(!stopped, \"contract should not be globally stopped\");\n        _;\n    }\n\n    modifier operator_only() {\n        require(operators[msg.sender] == true, \"sender should be one of the operators\");\n        _;\n    }\n\n    // unit normalization functions\n    function scaleIntoPlasmaUnitsFromWei(uint256 value)\n    public\n    pure\n    returns (uint128) {\n        uint256 den = DENOMINATOR;\n        require(value % den == 0, \"amount has higher precision than possible\");\n        uint256 scaled = value / den;\n        require(scaled < uint256(1) << 128, \"deposit amount is too high\");\n        return uint128(scaled);\n    }\n\n    function scaleFromPlasmaUnitsIntoWei(uint128 value)\n    public\n    pure\n    returns (uint256) {\n        return uint256(value) * DENOMINATOR;\n    }\n\n    function verifyProof(Circuit circuitType, uint256[8] memory proof, bytes32 oldRoot, bytes32 newRoot, bytes32 finalHash)\n        internal view returns (bool valid)\n    {\n        uint256 mask = (~uint256(0)) >> 3;\n        uint256[14] memory vk;\n        uint256[] memory gammaABC;\n        if (circuitType == Circuit.DEPOSIT) {\n            (vk, gammaABC) = getVkDepositCircuit();\n        } else if (circuitType == Circuit.TRANSFER) {\n            (vk, gammaABC) = getVkTransferCircuit();\n        } else if (circuitType == Circuit.EXIT) {\n            (vk, gammaABC) = getVkExitCircuit();\n        } else {\n            return false;\n        }\n        uint256[] memory inputs = new uint256[](3);\n        inputs[0] = uint256(oldRoot);\n        inputs[1] = uint256(newRoot);\n        inputs[2] = uint256(finalHash) & mask;\n        return Verify(vk, gammaABC, proof, inputs);\n    }\n\n}\n\ncontract FranklinProxy is FranklinCommon {\n\n    constructor(address _depositor, address _transactor, address _exitor) public {\n        nextAccountToRegister = 2;\n        lastVerifiedRoot = EMPTY_TREE_ROOT;\n        operators[msg.sender] = true;\n        depositor = _depositor;\n        transactor = _transactor;\n        exitor = _exitor;\n\n    }\n\n    function deposit(uint256[2] memory, uint128) public payable {\n        callExternal(depositor);\n    }\n\n    function depositInto(uint24, uint128) public payable {\n        callExternal(depositor);\n    }\n\n    function cancelDeposit() public {\n        callExternal(depositor);\n    }\n\n    function startNextDepositBatch() public {\n        callExternal(depositor);\n    }\n\n    function changeDepositBatchFee(uint128) public {\n        callExternal(depositor);\n    }\n\n    function commitDepositBlock(uint256, uint24[DEPOSIT_BATCH_SIZE] memory, uint32, bytes32) public {\n        callExternal(depositor);\n    }\n\n    function verifyDepositBlock(uint256, uint24[DEPOSIT_BATCH_SIZE] memory, uint32, uint256[8] memory) public {\n        callExternal(depositor);\n    } \n\n    function commitTransferBlock(uint32, uint128, bytes memory, bytes32) public {\n        callExternal(transactor);\n    }\n\n    function verifyTransferBlock(uint32, uint256[8] memory) public {\n        callExternal(transactor);\n    }\n\n    function exit() public payable {\n        callExternal(exitor);\n    }\n\n    function cancelExit() public {\n        callExternal(exitor);\n    }\n\n    function startNextExitBatch() public {\n        callExternal(exitor);\n    }\n\n    function changeExitBatchFee(uint128) public {\n        callExternal(exitor);\n    }\n\n    function commitExitBlock(uint256, uint24[EXIT_BATCH_SIZE] memory, uint32, bytes memory, bytes32) public {\n        callExternal(exitor);\n    }\n\n    function verifyExitBlock(uint256, uint32, uint256[8] memory) public {\n        callExternal(exitor);\n    }\n\n    function withdrawUserBalance(uint256) public {\n        callExternal(exitor);\n    }\n\n    // this is inline delegate-call to dispatch functions to subcontracts that are responsible for execution\n    function callExternal(address callee) internal {\n        assembly {\n            let memoryPointer := mload(0x40)\n            calldatacopy(memoryPointer, 0, calldatasize)\n            let newFreeMemoryPointer := add(memoryPointer, calldatasize)\n            mstore(0x40, newFreeMemoryPointer)\n            let retVal := delegatecall(sub(gas, 2000), callee, memoryPointer, calldatasize, newFreeMemoryPointer, 0x40)\n            let retDataSize := returndatasize\n            returndatacopy(newFreeMemoryPointer, 0, retDataSize)\n            switch retVal case 0 { revert(newFreeMemoryPointer, returndatasize) } default { return(newFreeMemoryPointer, retDataSize) }\n            //return(newFreeMemoryPointer, retDataSize)\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051606080611f18833981018060405281019080805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600b60106101000a81548162ffffff021916908362ffffff1602179055507e3f7e15e4de3453fe13e11fb4b007f1fce6a5b0f0353b3b8208910143aaa2f7600102600781600019169055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050611d17806102016000396000f300608060405260043610610267576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309b7f4971461026c5780630a05e9b61461029f57806313e7c9d8146102de57806318a63d9c146103395780631d15b341146103505780631e8072a2146103a7578063254e88e2146103dc5780632713ad691461040757806327e235e31461045e57806329a081ac146104b55780632ad67a96146104e05780632c87c6c91461057e5780632e94523e146105e3578063351eb751146106505780633d5616021461067b5780634125ff901461069257806346c7e4bc146106d15780634c5ff682146106e85780635300e41014610713578063533de30a1461078757806357d2ae24146108015780635cd0783e146108505780635df1b4331461093457806363d078aa1461097557806375f12b21146109a057806379b2ad70146109cf5780637dc38ab914610a8f578063838e204914610b4e5780638512153f14610b8557806385611d2614610be65780638ecb72d114610c47578063918f867414610c9e57806392f1c2b414610cc957806395b5d61714610d2c5780639d9c941914610dc8578063a082c86e14610e68578063a15ff0c314610e93578063a315c91b14610ee2578063abc3cf0514610f35578063c7c4ff4614610f62578063cd7543c014610fb9578063e9fad8ee14610fee578063ed03f56314610ff8578063f47932ad14611023578063f487b28e14611058578063f4c163a4146110fb578063f648a6c714611132578063fb0cd20f14611171578063fb1d501014611222578063fdf364e41461124d578063feeeaa5314611264575b600080fd5b34801561027857600080fd5b5061028161127b565b60405180826000191660001916815260200191505060405180910390f35b3480156102ab57600080fd5b506102dc60048036038101908080356fffffffffffffffffffffffffffffffff169060200190929190505050611281565b005b3480156102ea57600080fd5b5061031f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112af565b604051808215151515815260200191505060405180910390f35b34801561034557600080fd5b5061034e6112cf565b005b34801561035c57600080fd5b506103656112fc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b357600080fd5b506103bc611321565b604051808262ffffff1662ffffff16815260200191505060405180910390f35b3480156103e857600080fd5b506103f1611326565b6040518082815260200191505060405180910390f35b34801561041357600080fd5b5061041c61132c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046a57600080fd5b5061049f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611352565b6040518082815260200191505060405180910390f35b3480156104c157600080fd5b506104ca61136a565b6040518082815260200191505060405180910390f35b3480156104ec57600080fd5b50610531600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050611370565b604051808363ffffffff1663ffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b34801561058a57600080fd5b506105a9600480360381019080803590602001909291905050506113cd565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ef57600080fd5b5061064e60048036038101908080359060200190929190803563ffffffff16906020019092919080610100019060088060200260405190810160405280929190826008602002808284378201915050505050919291929050505061151a565b005b34801561065c57600080fd5b5061066561154a565b6040518082815260200191505060405180910390f35b34801561068757600080fd5b5061069061154f565b005b34801561069e57600080fd5b506106a761157c565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b3480156106dd57600080fd5b506106e6611583565b005b3480156106f457600080fd5b506106fd6116a7565b6040518082815260200191505060405180910390f35b34801561071f57600080fd5b5061074d60048036038101908080359060200190929190803562ffffff1690602001909291905050506116ad565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079357600080fd5b506107ff600480360381019080803590602001909291908060200190600180602002604051908101604052809291908260016020028082843782019150505050509192919290803563ffffffff16906020019092919080356000191690602001909291905050506116f4565b005b34801561080d57600080fd5b50610816611725565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561085c57600080fd5b50610881600480360381019080803563ffffffff169060200190929190505050611747565b604051808760ff1660ff1681526020018667ffffffffffffffff1667ffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b610973600480360381019080803562ffffff16906020019092919080356fffffffffffffffffffffffffffffffff1690602001909291905050506117e0565b005b34801561098157600080fd5b5061098a61180f565b6040518082815260200191505060405180910390f35b3480156109ac57600080fd5b506109b5611815565b604051808215151515815260200191505060405180910390f35b3480156109db57600080fd5b50610a8d600480360381019080803590602001909291908060200190600180602002604051908101604052809291908260016020028082843782019150505050509192919290803563ffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035600019169060200190929190505050611828565b005b348015610a9b57600080fd5b50610abf600480360381019080803562ffffff16906020019092919050505061185a565b604051808760ff1660ff1681526020018663ffffffff1663ffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff168152602001965050505050505060405180910390f35b348015610b5a57600080fd5b50610b636118f3565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b348015610b9157600080fd5b50610bc6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611909565b604051808262ffffff1662ffffff16815260200191505060405180910390f35b610c45600480360381019080806040019060028060200260405190810160405280929190826002602002808284378201915050505050919291929080356fffffffffffffffffffffffffffffffff16906020019092919050505061192b565b005b348015610c5357600080fd5b50610c5c61195a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610caa57600080fd5b50610cb3611980565b6040518082815260200191505060405180910390f35b348015610cd557600080fd5b50610d2a600480360381019080803563ffffffff169060200190929190806101000190600880602002604051908101604052809291908260086020028082843782019150505050509192919290505050611989565b005b348015610d3857600080fd5b50610dc6600480360381019080803590602001909291908060200190600180602002604051908101604052809291908260016020028082843782019150505050509192919290803563ffffffff1690602001909291908061010001906008806020026040519081016040528092919082600860200280828437820191505050505091929192905050506119b8565b005b348015610dd457600080fd5b50610df3600480360381019080803590602001909291905050506119e9565b604051808560ff1660ff1681526020018463ffffffff1663ffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200194505050505060405180910390f35b348015610e7457600080fd5b50610e7d611a66565b6040518082815260200191505060405180910390f35b348015610e9f57600080fd5b50610ea8611a6c565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610eee57600080fd5b50610f1f60048036038101908080356fffffffffffffffffffffffffffffffff169060200190929190505050611a8e565b6040518082815260200191505060405180910390f35b348015610f4157600080fd5b50610f6060048036038101908080359060200190929190505050611ab1565b005b348015610f6e57600080fd5b50610f77611adf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610fc557600080fd5b50610fce611b05565b604051808262ffffff1662ffffff16815260200191505060405180910390f35b610ff6611b0a565b005b34801561100457600080fd5b5061100d611b37565b6040518082815260200191505060405180910390f35b34801561102f57600080fd5b50611038611b3d565b604051808262ffffff1662ffffff16815260200191505060405180910390f35b34801561106457600080fd5b506110f9600480360381019080803563ffffffff16906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035600019169060200190929190505050611b52565b005b34801561110757600080fd5b50611110611b83565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561113e57600080fd5b5061116f60048036038101908080356fffffffffffffffffffffffffffffffff169060200190929190505050611b99565b005b34801561117d57600080fd5b5061119c60048036038101908080359060200190929190505050611bc7565b604051808660ff1660ff1681526020018562ffffff1662ffffff1681526020018463ffffffff1663ffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390f35b34801561122e57600080fd5b50611237611c59565b6040518082815260200191505060405180910390f35b34801561125957600080fd5b50611262611c5f565b005b34801561127057600080fd5b50611279611c8c565b005b60075481565b6112ac601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b50565b60026020528060005260406000206000915054906101000a900460ff1681565b6112fa601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081565b60085481565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600e5481565b6013602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900463ffffffff16908060000160049054906101000a90046fffffffffffffffffffffffffffffffff16905082565b600080600064e8d4a510009150600082858115156113e757fe5b06141515611483576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f616d6f756e74206861732068696768657220707265636973696f6e207468616e81526020017f20706f737369626c65000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b818481151561148e57fe5b049050608060019060020a0281101515611510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6465706f73697420616d6f756e7420697320746f6f206869676800000000000081525060200191505060405180910390fd5b8092505050919050565b611545601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b505050565b600181565b61157a601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b565b6201518081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561166d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f6f6e6c792063726561746f722063616e20636c65616e2075702074657374206381526020017f6f6e74726163747300000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600f5481565b600c602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16905081565b61171f601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b50505050565b601160009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900467ffffffffffffffff16908060000160099054906101000a90046fffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b61180b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b5050565b600a5481565b600660009054906101000a900460ff1681565b611853601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b5050505050565b60056020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16908060000160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900463ffffffff16908060020160049054906101000a900463ffffffff16905086565b600660019054906101000a900463ffffffff1681565b60046020528060005260406000206000915054906101000a900462ffffff1681565b611956601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b5050565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b64e8d4a5100081565b6119b4601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b5050565b6119e3601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b50505050565b60126020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16908060000160059054906101000a900467ffffffffffffffff169080600001600d9054906101000a90046fffffffffffffffffffffffffffffffff16905084565b610e1081565b600b60009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600064e8d4a51000826fffffffffffffffffffffffffffffffff16029050919050565b611adc601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b50565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600181565b611b35601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b565b60105481565b600b60109054906101000a900462ffffff1681565b611b7d601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b50505050565b600660059054906101000a900463ffffffff1681565b611bc4601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b50565b600d6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900462ffffff16908060000160049054906101000a900463ffffffff16908060000160089054906101000a900467ffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905085565b60095481565b611c8a601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b565b611cb7601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611cb9565b565b6040513660008237368101806040526040813684866107d05a03f43d806000843e8160008114611ce7578184f35b3d84fd00a165627a7a723058201de2376905253f09414206c9e2a026946308145c22ce1ecd3472b7b77194100600290000000000000000000000009a93bb71dcceafc24185547c6441abbe5df5930d00000000000000000000000061513dfb96676db360d91b278bddcc6613f1d333000000000000000000000000f77909567eac8e5b62dad93a0bb3d5d573d9b925",
  "constructorArguments": "0000000000000000000000009a93bb71dcceafc24185547c6441abbe5df5930d00000000000000000000000061513dfb96676db360d91b278bddcc6613f1d333000000000000000000000000f77909567eac8e5b62dad93a0bb3d5d573d9b925"
}