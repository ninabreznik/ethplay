{
  "address": "0xae045794a269450e9af1dca6aeffe969c4b64158",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EstateRegistry",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-zos/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: openzeppelin-zos/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-zos/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-zos/contracts/introspection/ERC165Support.sol\n\n/**\n * @title ERC165Support\n * @dev Implements ERC165 returning true for ERC165 interface identifier\n */\ncontract ERC165Support is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool) \n  {\n    return _supportsInterface(_interfaceId);\n  }\n\n  function _supportsInterface(bytes4 _interfaceId)\n    internal\n    view\n    returns (bool) \n  {\n    return _interfaceId == InterfaceId_ERC165;\n  }\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is ERC165Support, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  function _supportsInterface(bytes4 _interfaceId)\n    internal\n    view\n    returns (bool)\n  {\n    return super._supportsInterface(_interfaceId) || \n      _interfaceId == InterfaceId_ERC721 || _interfaceId == InterfaceId_ERC721Exists;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: zos-lib/contracts/migrations/Migratable.sol\n\n/**\n * @title Migratable\n * Helper contract to support intialization and migration schemes between\n * different implementations of a contract in the context of upgradeability.\n * To use it, replace the constructor with a function that has the\n * `isInitializer` modifier starting with `\"0\"` as `migrationId`.\n * When you want to apply some migration code during an upgrade, increase\n * the `migrationId`. Or, if the migration code must be applied only after\n * another migration has been already applied, use the `isMigration` modifier.\n * This helper supports multiple inheritance.\n * WARNING: It is the developer's responsibility to ensure that migrations are\n * applied in a correct order, or that they are run at all.\n * See `Initializable` for a simpler version.\n */\ncontract Migratable {\n  /**\n   * @dev Emitted when the contract applies a migration.\n   * @param contractName Name of the Contract.\n   * @param migrationId Identifier of the migration applied.\n   */\n  event Migrated(string contractName, string migrationId);\n\n  /**\n   * @dev Mapping of the already applied migrations.\n   * (contractName => (migrationId => bool))\n   */\n  mapping (string => mapping (string => bool)) internal migrated;\n\n  /**\n   * @dev Internal migration id used to specify that a contract has already been initialized.\n   */\n  string constant private INITIALIZED_ID = \"initialized\";\n\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   * @param contractName Name of the contract.\n   * @param migrationId Identifier of the migration.\n   */\n  modifier isInitializer(string contractName, string migrationId) {\n    validateMigrationIsPending(contractName, INITIALIZED_ID);\n    validateMigrationIsPending(contractName, migrationId);\n    _;\n    emit Migrated(contractName, migrationId);\n    migrated[contractName][migrationId] = true;\n    migrated[contractName][INITIALIZED_ID] = true;\n  }\n\n  /**\n   * @dev Modifier to use in the migration of a contract.\n   * @param contractName Name of the contract.\n   * @param requiredMigrationId Identifier of the previous migration, required\n   * to apply new one.\n   * @param newMigrationId Identifier of the new migration to be applied.\n   */\n  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {\n    require(isMigrated(contractName, requiredMigrationId), \"Prerequisite migration ID has not been run yet\");\n    validateMigrationIsPending(contractName, newMigrationId);\n    _;\n    emit Migrated(contractName, newMigrationId);\n    migrated[contractName][newMigrationId] = true;\n  }\n\n  /**\n   * @dev Returns true if the contract migration was applied.\n   * @param contractName Name of the contract.\n   * @param migrationId Identifier of the migration.\n   * @return true if the contract migration was applied, false otherwise.\n   */\n  function isMigrated(string contractName, string migrationId) public view returns(bool) {\n    return migrated[contractName][migrationId];\n  }\n\n  /**\n   * @dev Initializer that marks the contract as initialized.\n   * It is important to run this if you had deployed a previous version of a Migratable contract.\n   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.\n   */\n  function initialize() isInitializer(\"Migratable\", \"1.2.1\") public {\n  }\n\n  /**\n   * @dev Reverts if the requested migration was already executed.\n   * @param contractName Name of the contract.\n   * @param migrationId Identifier of the migration.\n   */\n  function validateMigrationIsPending(string contractName, string migrationId) private view {\n    require(!isMigrated(contractName, migrationId), \"Requested target migration ID has already been run\");\n  }\n}\n\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is Migratable, ERC165Support, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  function initialize(string _name, string _symbol) public isInitializer(\"ERC721Token\", \"1.9.0\") {\n    name_ = _name;\n    symbol_ = _symbol;\n  }\n\n  function _supportsInterface(bytes4 _interfaceId)\n    internal\n    view\n    returns (bool)\n  {\n    return super._supportsInterface(_interfaceId) || \n      _interfaceId == InterfaceId_ERC721Enumerable || _interfaceId == InterfaceId_ERC721Metadata;\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: openzeppelin-zos/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable is Migratable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function initialize(address _sender) public isInitializer(\"Ownable\", \"1.9.0\") {\n    owner = _sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/estate/IEstateRegistry.sol\n\ncontract IEstateRegistry {\n  function mint(address to, string metadata) external returns (uint256);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner); // from ERC721\n\n  // Events\n\n  event CreateEstate(\n    address indexed _owner,\n    uint256 indexed _estateId,\n    string _data\n  );\n\n  event AddLand(\n    uint256 indexed _estateId,\n    uint256 indexed _landId\n  );\n\n  event RemoveLand(\n    uint256 indexed _estateId,\n    uint256 indexed _landId,\n    address indexed _destinatary\n  );\n\n  event Update(\n    uint256 indexed _assetId,\n    address indexed _holder,\n    address indexed _operator,\n    string _data\n  );\n\n  event UpdateOperator(\n    uint256 indexed _estateId,\n    address indexed _operator\n  );\n\n  event SetLANDRegistry(\n    address indexed _registry\n  );\n}\n\n// File: contracts/estate/EstateStorage.sol\n\ncontract LANDRegistry {\n  function decodeTokenId(uint value) external pure returns (int, int);\n  function updateLandData(int x, int y, string data) external;\n  function setUpdateOperator(uint256 assetId, address operator) external;\n  function ping() public;\n  function ownerOf(uint256 tokenId) public returns (address);\n  function safeTransferFrom(address, address, uint256) public;\n  function updateOperator(uint256 landId) public returns (address);\n}\n\n\ncontract EstateStorage {\n  bytes4 internal constant InterfaceId_GetMetadata = bytes4(keccak256(\"getMetadata(uint256)\"));\n  bytes4 internal constant InterfaceId_VerifyFingerprint = bytes4(\n    keccak256(\"verifyFingerprint(uint256,bytes)\")\n  );\n\n  LANDRegistry public registry;\n\n  // From Estate to list of owned LAND ids (LANDs)\n  mapping(uint256 => uint256[]) public estateLandIds;\n\n  // From LAND id (LAND) to its owner Estate id\n  mapping(uint256 => uint256) public landIdEstate;\n\n  // From Estate id to mapping of LAND id to index on the array above (estateLandIds)\n  mapping(uint256 => mapping(uint256 => uint256)) public estateLandIndex;\n\n  // Metadata of the Estate\n  mapping(uint256 => string) internal estateData;\n\n  // Operator of the Estate\n  mapping (uint256 => address) public updateOperator;\n}\n\n// File: contracts/estate/EstateRegistry.sol\n\n/**\n * @title ERC721 registry of every minted Estate and their owned LANDs\n * @dev Usings we are inheriting and depending on:\n * From ERC721Token:\n *   - using SafeMath for uint256;\n *   - using AddressUtils for address;\n */\n// solium-disable-next-line max-len\ncontract EstateRegistry is Migratable, IEstateRegistry, ERC721Token, ERC721Receiver, Ownable, EstateStorage {\n  modifier canTransfer(uint256 estateId) {\n    require(isApprovedOrOwner(msg.sender, estateId), \"Only owner or operator can transfer\");\n    _;\n  }\n\n  modifier onlyRegistry() {\n    require(msg.sender == address(registry), \"Only the registry can make this operation\");\n    _;\n  }\n\n  modifier onlyUpdateAuthorized(uint256 estateId) {\n    require(_isUpdateAuthorized(msg.sender, estateId), \"Unauthorized user\");\n    _;\n  }\n\n  modifier onlyLandUpdateAuthorized(uint256 estateId, uint256 landId) {\n    require(_isLandUpdateAuthorized(msg.sender, estateId, landId), \"unauthorized user\");\n    _;\n  }\n\n  /**\n   * @dev Mint a new Estate with some metadata\n   * @param to The address that will own the minted token\n   * @param metadata Set an initial metadata\n   * @return An uint256 representing the new token id\n   */\n  function mint(address to, string metadata) external onlyRegistry returns (uint256) {\n    return _mintEstate(to, metadata);\n  }\n\n  /**\n   * @notice Transfer a LAND owned by an Estate to a new owner\n   * @param estateId Current owner of the token\n   * @param landId LAND to be transfered\n   * @param destinatary New owner\n   */\n  function transferLand(\n    uint256 estateId,\n    uint256 landId,\n    address destinatary\n  )\n    external\n    canTransfer(estateId)\n  {\n    return _transferLand(estateId, landId, destinatary);\n  }\n\n  /**\n   * @notice Transfer many tokens owned by an Estate to a new owner\n   * @param estateId Current owner of the token\n   * @param landIds LANDs to be transfered\n   * @param destinatary New owner\n   */\n  function transferManyLands(\n    uint256 estateId,\n    uint256[] landIds,\n    address destinatary\n  )\n    external\n    canTransfer(estateId)\n  {\n    uint length = landIds.length;\n    for (uint i = 0; i < length; i++) {\n      _transferLand(estateId, landIds[i], destinatary);\n    }\n  }\n\n  /**\n   * @notice Get the Estate id for a given LAND id\n   * @dev This information also lives on estateLandIds,\n   *   but it being a mapping you need to know the Estate id beforehand.\n   * @param landId LAND to search\n   * @return The corresponding Estate id\n   */\n  function getLandEstateId(uint256 landId) external view returns (uint256) {\n    return landIdEstate[landId];\n  }\n\n  function setLANDRegistry(address _registry) external onlyOwner {\n    require(_registry.isContract(), \"The LAND registry address should be a contract\");\n    require(_registry != 0, \"The LAND registry address should be valid\");\n    registry = LANDRegistry(_registry);\n    emit SetLANDRegistry(registry);\n  }\n\n  function ping() external {\n    registry.ping();\n  }\n\n  /**\n   * @notice Return the amount of tokens for a given Estate\n   * @param estateId Estate id to search\n   * @return Tokens length\n   */\n  function getEstateSize(uint256 estateId) external view returns (uint256) {\n    return estateLandIds[estateId].length;\n  }\n\n  /**\n   * @notice Update the metadata of an Estate\n   * @dev Reverts if the Estate does not exist or the user is not authorized\n   * @param estateId Estate id to update\n   * @param metadata string metadata\n   */\n  function updateMetadata(\n    uint256 estateId,\n    string metadata\n  )\n    external\n    onlyUpdateAuthorized(estateId)\n  {\n    _updateMetadata(estateId, metadata);\n\n    emit Update(\n      estateId,\n      ownerOf(estateId),\n      msg.sender,\n      metadata\n    );\n  }\n\n  function getMetadata(uint256 estateId) external view returns (string) {\n    return estateData[estateId];\n  }\n\n  function isUpdateAuthorized(address operator, uint256 estateId) external view returns (bool) {\n    return _isUpdateAuthorized(operator, estateId);\n  }\n\n  function setUpdateOperator(uint256 estateId, address operator) public canTransfer(estateId) {\n    updateOperator[estateId] = operator;\n    emit UpdateOperator(estateId, operator);\n  }\n\n  function setLandUpdateOperator(\n    uint256 estateId, \n    uint256 landId, \n    address operator\n  ) \n    public \n    canTransfer(estateId)\n  {\n    require(landIdEstate[landId] == estateId, \"The LAND is not part of the Estate\");\n    registry.setUpdateOperator(landId, operator);\n  }\n\n  function initialize(\n    string _name,\n    string _symbol,\n    address _registry\n  )\n    public\n    isInitializer(\"EstateRegistry\", \"0.0.2\")\n  {\n    require(_registry != 0, \"The registry should be a valid address\");\n\n    ERC721Token.initialize(_name, _symbol);\n    Ownable.initialize(msg.sender);\n    registry = LANDRegistry(_registry);\n  }\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    onlyRegistry\n    returns (bytes4)\n  {\n    uint256 estateId = _bytesToUint(_data);\n    _pushLandId(estateId, _tokenId);\n    return ERC721_RECEIVED;\n  }\n\n  /**\n   * @dev Creates a checksum of the contents of the Estate\n   * @param estateId the estateId to be verified\n   */\n  function getFingerprint(uint256 estateId)\n    public\n    view\n    returns (bytes32 result)\n  {\n    result = keccak256(abi.encodePacked(\"estateId\", estateId));\n\n    uint256 length = estateLandIds[estateId].length;\n    for (uint i = 0; i < length; i++) {\n      result ^= keccak256(abi.encodePacked(estateLandIds[estateId][i]));\n    }\n    return result;\n  }\n\n  /**\n   * @dev Verifies a checksum of the contents of the Estate\n   * @param estateId the estateid to be verified\n   * @param fingerprint the user provided identification of the Estate contents\n   */\n  function verifyFingerprint(uint256 estateId, bytes fingerprint) public view returns (bool) {\n    return getFingerprint(estateId) == _bytesToBytes32(fingerprint);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of multiple Estate IDs to another address\n   * @dev Delegates to safeTransferFrom for each transfer\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param estateIds uint256 array of IDs to be transferred\n  */\n  function safeTransferManyFrom(address from, address to, uint256[] estateIds) public {\n    safeTransferManyFrom(\n      from,\n      to,\n      estateIds,\n      \"\"\n    );\n  }\n\n  /**\n   * @dev Safely transfers the ownership of multiple Estate IDs to another address\n   * @dev Delegates to safeTransferFrom for each transfer\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param estateIds uint256 array of IDs to be transferred\n   * @param data bytes data to send along with a safe transfer check\n  */\n  function safeTransferManyFrom(\n    address from,\n    address to,\n    uint256[] estateIds,\n    bytes data\n  )\n    public\n  {\n    for (uint i = 0; i < estateIds.length; i++) {\n      safeTransferFrom(\n        from,\n        to,\n        estateIds[i],\n        data\n      );\n    }\n  }\n\n  /**\n   * @dev update LAND data owned by an Estate\n   * @param estateId Estate\n   * @param landId LAND to be updated\n   * @param data string metadata\n   */\n  function updateLandData(uint256 estateId, uint256 landId, string data) public {\n    _updateLandData(estateId, landId, data);\n  }\n\n  /**\n   * @dev update LANDs data owned by an Estate\n   * @param estateId Estate id\n   * @param landIds LANDs to be updated\n   * @param data string metadata\n   */\n  function updateManyLandData(uint256 estateId, uint256[] landIds, string data) public {\n    uint length = landIds.length;\n    for (uint i = 0; i < length; i++) {\n      _updateLandData(estateId, landIds[i], data);\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) \n  public \n  {\n    updateOperator[_tokenId] = address(0);\n    super.transferFrom(_from, _to, _tokenId);\n  }\n\n  // check the supported interfaces via ERC165\n  function _supportsInterface(bytes4 _interfaceId) internal view returns (bool) {\n    // solium-disable-next-line operator-whitespace\n    return super._supportsInterface(_interfaceId) ||\n      _interfaceId == InterfaceId_GetMetadata ||\n      _interfaceId == InterfaceId_VerifyFingerprint;\n  }\n\n  /**\n   * @dev Internal function to mint a new Estate with some metadata\n   * @param to The address that will own the minted token\n   * @param metadata Set an initial metadata\n   * @return An uint256 representing the new token id\n   */\n  function _mintEstate(address to, string metadata) internal returns (uint256) {\n    require(to != address(0), \"You can not mint to an empty address\");\n    uint256 estateId = _getNewEstateId();\n    _mint(to, estateId);\n    _updateMetadata(estateId, metadata);\n    emit CreateEstate(to, estateId, metadata);\n    return estateId;\n  }\n\n  /**\n   * @dev Internal function to update an Estate metadata\n   * @dev Does not require the Estate to exist, for a public interface use `updateMetadata`\n   * @param estateId Estate id to update\n   * @param metadata string metadata\n   */\n  function _updateMetadata(uint256 estateId, string metadata) internal {\n    estateData[estateId] = metadata;\n  }\n\n  /**\n   * @notice Return a new unique id\n   * @dev It uses totalSupply to determine the next id\n   * @return uint256 Representing the new Estate id\n   */\n  function _getNewEstateId() internal view returns (uint256) {\n    return totalSupply().add(1);\n  }\n\n  /**\n   * @dev Appends a new LAND id to an Estate updating all related storage\n   * @param estateId Estate where the LAND should go\n   * @param landId Transfered LAND\n   */\n  function _pushLandId(uint256 estateId, uint256 landId) internal {\n    require(exists(estateId), \"The Estate id should exist\");\n    require(landIdEstate[landId] == 0, \"The LAND is already owned by an Estate\");\n    require(registry.ownerOf(landId) == address(this), \"The EstateRegistry cannot manage the LAND\");\n\n    estateLandIds[estateId].push(landId);\n\n    landIdEstate[landId] = estateId;\n\n    estateLandIndex[estateId][landId] = estateLandIds[estateId].length;\n\n    emit AddLand(estateId, landId);\n  }\n\n  /**\n   * @dev Removes a LAND from an Estate and transfers it to a new owner\n   * @param estateId Current owner of the LAND\n   * @param landId LAND to be transfered\n   * @param destinatary New owner\n   */\n  function _transferLand(\n    uint256 estateId,\n    uint256 landId,\n    address destinatary\n  )\n    internal\n  {\n    require(destinatary != address(0), \"You can not transfer LAND to an empty address\");\n\n    uint256[] storage landIds = estateLandIds[estateId];\n    mapping(uint256 => uint256) landIndex = estateLandIndex[estateId];\n\n    /**\n     * Using 1-based indexing to be able to make this check\n     */\n    require(landIndex[landId] != 0, \"The LAND is not part of the Estate\");\n\n    uint lastIndexInArray = landIds.length.sub(1);\n\n    /**\n     * Get the landIndex of this token in the landIds list\n     */\n    uint indexInArray = landIndex[landId].sub(1);\n\n    /**\n     * Get the landId at the end of the landIds list\n     */\n    uint tempTokenId = landIds[lastIndexInArray];\n\n    /**\n     * Store the last token in the position previously occupied by landId\n     */\n    landIndex[tempTokenId] = indexInArray.add(1);\n    landIds[indexInArray] = tempTokenId;\n\n    /**\n     * Delete the landIds[last element]\n     */\n    delete landIds[lastIndexInArray];\n    landIds.length = lastIndexInArray;\n\n    /**\n     * Drop this landId from both the landIndex and landId list\n     */\n    landIndex[landId] = 0;\n\n    /**\n     * Drop this landId Estate\n     */\n    landIdEstate[landId] = 0;\n\n    registry.safeTransferFrom(this, destinatary, landId);\n\n    emit RemoveLand(estateId, landId, destinatary);\n  }\n\n  function _isUpdateAuthorized(address operator, uint256 estateId) internal view returns (bool) {\n    return isApprovedOrOwner(operator, estateId) || updateOperator[estateId] == operator;\n  }\n\n  function _isLandUpdateAuthorized(\n    address operator, \n    uint256 estateId, \n    uint256 landId\n  ) \n    internal returns (bool) \n  {\n    return _isUpdateAuthorized(operator, estateId) || registry.updateOperator(landId) == operator;\n  }\n\n  function _bytesToUint(bytes b) internal pure returns (uint256) {\n    return uint256(_bytesToBytes32(b));\n  }\n\n  function _bytesToBytes32(bytes b) internal pure returns (bytes32) {\n    bytes32 out;\n\n    for (uint i = 0; i < b.length; i++) {\n      out |= bytes32(b[i] & 0xFF) >> i.mul(8);\n    }\n\n    return out;\n  }\n\n  function _updateLandData(\n    uint256 estateId,\n    uint256 landId,\n    string data\n  )\n    internal\n    onlyLandUpdateAuthorized(estateId, landId)\n  {\n    require(landIdEstate[landId] == estateId, \"The LAND is not part of the Estate\");\n    int x;\n    int y;\n    (x, y) = registry.decodeTokenId(landId);\n    registry.updateLandData(x, y, data);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landIdEstate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getFingerprint\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landId\",\"type\":\"uint256\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setLandUpdateOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateLandData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"estateLandIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"name\":\"destinatary\",\"type\":\"address\"}],\"name\":\"transferManyLands\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateManyLandData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setLANDRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"isUpdateAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"estateIds\",\"type\":\"uint256[]\"}],\"name\":\"safeTransferManyFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"fingerprint\",\"type\":\"bytes\"}],\"name\":\"verifyFingerprint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updateOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"estateLandIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landId\",\"type\":\"uint256\"},{\"name\":\"destinatary\",\"type\":\"address\"}],\"name\":\"transferLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setUpdateOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"landId\",\"type\":\"uint256\"}],\"name\":\"getLandEstateId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"estateIds\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferManyFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getEstateSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_estateId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"CreateEstate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_estateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_landId\",\"type\":\"uint256\"}],\"name\":\"AddLand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_estateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_landId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_destinatary\",\"type\":\"address\"}],\"name\":\"RemoveLand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_estateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"UpdateOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"SetLANDRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]",
  "bytecode": ""
}