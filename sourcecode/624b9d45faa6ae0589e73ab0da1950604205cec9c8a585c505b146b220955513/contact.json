{
  "address": "0x38fb8fcb40eab5014c2810a4858b45445715707f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IPPToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-01\n*/\n\npragma solidity ^0.4.12;\n \ncontract IMigrationContract {\n    function migrate(address addr, uint256 nas) returns (bool success);\n}\n \ncontract SafeMath {\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n        uint256 z = x + y;\n        assert((z >= x) && (z >= y));\n        return z;\n    }\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n        assert(x >= y);\n        uint256 z = x - y;\n        return z;\n    }\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n        uint256 z = x * y;\n        assert((x == 0)||(z/x == y));\n        return z;\n    }\n}\n \ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n \n \n/*  ERC 20 token */\ncontract StandardToken is Token {\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n \ncontract IPPToken is StandardToken, SafeMath {\n    // metadata\n    string  public constant name = \"International Partner Platform\";\n    string  public constant symbol = \"IPP\";\n    uint256 public constant decimals = 18;\n    string  public version = \"1.0\";\n \n    // contracts\n    address public ethFundDeposit;          // ETH存放地址\n    address public newContractAddr;         // token更新地址\n \n    // crowdsale parameters\n    bool    public isFunding;                // 状态切换到true\n    uint256 public fundingStartBlock;\n    uint256 public fundingStopBlock;\n \n    uint256 public currentSupply;           // 正在售卖中的tokens数量\n    uint256 public tokenRaised = 0;         // 总的售卖数量token\n    uint256 public tokenMigrated = 0;     // 总的已经交易的 token\n    uint256 public tokenExchangeRate = 625;             // 625  兑换 1 ETH\n \n    // events\n    event AllocateToken(address indexed _to, uint256 _value);   // 分配的私有交易token;\n    event IssueToken(address indexed _to, uint256 _value);      // 公开发行售卖的token;\n    event IncreaseSupply(uint256 _value);\n    event DecreaseSupply(uint256 _value);\n    event Migrate(address indexed _to, uint256 _value);\n \n    // 转换\n    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n        return _value * 10 ** decimals;\n    }\n \n    // constructor\n    function IPPToken(\n        address _ethFundDeposit,\n        uint256 _currentSupply)\n    {\n        ethFundDeposit = _ethFundDeposit;\n \n        isFunding = false;                           //通过控制预CrowdS ale状态\n        fundingStartBlock = 0;\n        fundingStopBlock = 0;\n \n        currentSupply = formatDecimals(_currentSupply);\n        totalSupply = formatDecimals(1000000000);\n        balances[msg.sender] = totalSupply;\n        if(currentSupply > totalSupply) throw;\n    }\n \n    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\n \n    ///  设置token汇率\n    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n        if (_tokenExchangeRate == 0) throw;\n        if (_tokenExchangeRate == tokenExchangeRate) throw;\n \n        tokenExchangeRate = _tokenExchangeRate;\n    }\n \n    /// @dev 超发token处理\n    function increaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        if (value + currentSupply > totalSupply) throw;\n        currentSupply = safeAdd(currentSupply, value);\n        IncreaseSupply(value);\n    }\n \n    /// @dev 被盗token处理\n    function decreaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        if (value + tokenRaised > currentSupply) throw;\n \n        currentSupply = safeSubtract(currentSupply, value);\n        DecreaseSupply(value);\n    }\n \n    ///  启动区块检测 异常的处理\n    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n        if (isFunding) throw;\n        if (_fundingStartBlock >= _fundingStopBlock) throw;\n        if (block.number >= _fundingStartBlock) throw;\n \n        fundingStartBlock = _fundingStartBlock;\n        fundingStopBlock = _fundingStopBlock;\n        isFunding = true;\n    }\n \n    ///  关闭区块异常处理\n    function stopFunding() isOwner external {\n        if (!isFunding) throw;\n        isFunding = false;\n    }\n \n    /// 开发了一个新的合同来接收token（或者更新token）\n    function setMigrateContract(address _newContractAddr) isOwner external {\n        if (_newContractAddr == newContractAddr) throw;\n        newContractAddr = _newContractAddr;\n    }\n \n    /// 设置新的所有者地址\n    function changeOwner(address _newFundDeposit) isOwner() external {\n        if (_newFundDeposit == address(0x0)) throw;\n        ethFundDeposit = _newFundDeposit;\n    }\n \n    ///转移token到新的合约\n    function migrate() external {\n        if(isFunding) throw;\n        if(newContractAddr == address(0x0)) throw;\n \n        uint256 tokens = balances[msg.sender];\n        if (tokens == 0) throw;\n \n        balances[msg.sender] = 0;\n        tokenMigrated = safeAdd(tokenMigrated, tokens);\n \n        IMigrationContract newContract = IMigrationContract(newContractAddr);\n        if (!newContract.migrate(msg.sender, tokens)) throw;\n \n        Migrate(msg.sender, tokens);               // log it\n    }\n \n    /// 转账ETH\n    function transferETH() isOwner external {\n        if (this.balance == 0) throw;\n        if (!ethFundDeposit.send(this.balance)) throw;\n    }\n \n    ///token分配到预处理地址。\n    function allocateToken (address _addr, uint256 _eth) isOwner external {\n        if (_eth == 0) throw;\n        if (_addr == address(0x0)) throw;\n \n        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n        if (tokens + tokenRaised > currentSupply) throw;\n \n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[_addr] += tokens;\n \n        AllocateToken(_addr, tokens);  // 记录token日志\n    }\n \n    /// 购买token\n    function () payable {\n        if (!isFunding) throw;\n        if (msg.value == 0) throw;\n \n        if (block.number < fundingStartBlock) throw;\n        if (block.number > fundingStopBlock) throw;\n \n        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n        if (tokens + tokenRaised > currentSupply) throw;\n \n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[msg.sender] += tokens;\n \n        IssueToken(msg.sender, tokens);  //记录日志\n    }\n}",
  "bytecode": "60606040526040805190810160405280600381526020017f312e3000000000000000000000000000000000000000000000000000000000008152506003908051906020019062000051929190620001be565b5060006009556000600a55610271600b5534156200006e57600080fd5b60405160408062001e548339810160405280805190602001909190805190602001909190505081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560146101000a81548160ff021916908315150217905550600060068190555060006007819055506200011f81620001ae6401000000000262001b7d176401000000009004565b60088190555062000148633b9aca00620001ae6401000000000262001b7d176401000000009004565b600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000546008541115620001a657600080fd5b50506200026d565b60006012600a0a82029050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020157805160ff191683800117855562000232565b8280016001018555821562000232579182015b828111156200023157825182559160200191906001019062000214565b5b50905062000241919062000245565b5090565b6200026a91905b80821115620002665760008160009055506001016200024c565b5090565b90565b611bd7806200027d6000396000f300606060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461028f578063095ea7b31461031d5780630a9ffdb71461037757806313b53153146103b957806318160ddd146103e657806323b872dd1461040f57806326a2157514610488578063313ce567146104b157806332513ce5146104da5780634172d0801461052f5780634477c5da146105585780634a36df251461056d57806354fd4d50146105a65780636fe3a5671461063457806370a082311461065d578063771282f6146106aa578063775c46cd146106d35780638fd3ab80146106ff57806395d89b411461071457806398e52f9a146107a2578063a6f9dae1146107c5578063a81c3bdf146107fe578063a9059cbb14610853578063b921e163146108ad578063cb7b8673146108d0578063d648a647146108f3578063dd62ed3e1461091c578063e28d717b14610988578063ff29507d1461099d575b6000600560149054906101000a900460ff16151561019257600080fd5b60003414156101a057600080fd5b6006544310156101af57600080fd5b6007544311156101be57600080fd5b6101ca34600b546109c6565b9050600854600954820111156101df57600080fd5b6101eb600954826109f9565b60098190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f7ba26a0f068612fb882b3272004674d21fed286c2c8c795cf653044690b32db4826040518082815260200191505060405180910390a250005b341561029a57600080fd5b6102a2610a23565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e25780820151818401526020810190506102c7565b50505050905090810190601f16801561030f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032857600080fd5b61035d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a5c565b604051808215151515815260200191505060405180910390f35b341561038257600080fd5b6103b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b4e565b005b34156103c457600080fd5b6103cc610ccf565b604051808215151515815260200191505060405180910390f35b34156103f157600080fd5b6103f9610ce2565b6040518082815260200191505060405180910390f35b341561041a57600080fd5b61046e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ce8565b604051808215151515815260200191505060405180910390f35b341561049357600080fd5b61049b610f64565b6040518082815260200191505060405180910390f35b34156104bc57600080fd5b6104c4610f6a565b6040518082815260200191505060405180910390f35b34156104e557600080fd5b6104ed610f6f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561053a57600080fd5b610542610f95565b6040518082815260200191505060405180910390f35b341561056357600080fd5b61056b610f9b565b005b341561057857600080fd5b6105a4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061102f565b005b34156105b157600080fd5b6105b961112a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105f95780820151818401526020810190506105de565b50505050905090810190601f1680156106265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561063f57600080fd5b6106476111c8565b6040518082815260200191505060405180910390f35b341561066857600080fd5b610694600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111ce565b6040518082815260200191505060405180910390f35b34156106b557600080fd5b6106bd611217565b6040518082815260200191505060405180910390f35b34156106de57600080fd5b6106fd600480803590602001909190803590602001909190505061121d565b005b341561070a57600080fd5b6107126112dc565b005b341561071f57600080fd5b610727611537565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561076757808201518184015260208101905061074c565b50505050905090810190601f1680156107945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107ad57600080fd5b6107c36004808035906020019091905050611570565b005b34156107d057600080fd5b6107fc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611639565b005b341561080957600080fd5b610811611713565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561085e57600080fd5b610893600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611739565b604051808215151515815260200191505060405180910390f35b34156108b857600080fd5b6108ce60048080359060200190919050506118a2565b005b34156108db57600080fd5b6108f1600480803590602001909190505061196b565b005b34156108fe57600080fd5b6109066119ee565b6040518082815260200191505060405180910390f35b341561092757600080fd5b610972600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119f4565b6040518082815260200191505060405180910390f35b341561099357600080fd5b61099b611a7b565b005b34156109a857600080fd5b6109b0611b77565b6040518082815260200191505060405180910390f35b600080828402905060008414806109e757508284828115156109e457fe5b04145b15156109ef57fe5b8091505092915050565b6000808284019050838110158015610a115750828110155b1515610a1957fe5b8091505092915050565b6040805190810160405280601e81526020017f496e7465726e6174696f6e616c20506172746e657220506c6174666f726d000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bac57600080fd5b6000821415610bba57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bf457600080fd5b610c08610c0083611b7d565b600b546109c6565b905060085460095482011115610c1d57600080fd5b610c29600954826109f9565b60098190555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff167f1aee3ddc9eba03c98b273cd914e999b78162e1ddd1c022045394f635a469e105826040518082815260200191505060405180910390a2505050565b600560149054906101000a900460ff1681565b60005481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610db5575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610dc15750600082115b15610f585781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610f5d565b600090505b9392505050565b60095481565b601281565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ff757600080fd5b600560149054906101000a900460ff16151561101257600080fd5b6000600560146101000a81548160ff021916908315150217905550565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108b57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110e657600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111c05780601f10611195576101008083540402835291602001916111c0565b820191906000526020600020905b8154815290600101906020018083116111a357829003601f168201915b505050505081565b600a5481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561127957600080fd5b600560149054906101000a900460ff161561129357600080fd5b80821015156112a157600080fd5b81431015156112af57600080fd5b81600681905550806007819055506001600560146101000a81548160ff0219169083151502179055505050565b600080600560149054906101000a900460ff16156112f957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561135557600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060008214156113a557600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113f6600a54836109f9565b600a81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ad68ebf733846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156114c357600080fd5b5af115156114d057600080fd5b5050506040518051905015156114e557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d836040518082815260200191505060405180910390a25050565b6040805190810160405280600381526020017f495050000000000000000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115ce57600080fd5b6115d782611b7d565b9050600854600954820111156115ec57600080fd5b6115f860085482611b8d565b6008819055507f9ecdebfa921d6ab8cecf7259ef30327664ad0d45d32fa3641089b00b533f2eee816040518082815260200191505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561169557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116cf57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561178a5750600082115b156118975781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061189c565b600090505b92915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190057600080fd5b61190982611b7d565b90506000546008548201111561191e57600080fd5b61192a600854826109f9565b6008819055507ffaabf704b783af9e21c676de8e3e6e0c9c2260dce2ee299437ec9b70151ddaeb816040518082815260200191505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119c757600080fd5b60008114156119d557600080fd5b600b548114156119e457600080fd5b80600b8190555050565b60065481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ad757600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff16311415611afc57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611b7557600080fd5b565b60075481565b60006012600a0a82029050919050565b600080828410151515611b9c57fe5b828403905080915050929150505600a165627a7a723058208962203709ac4d9da813fbb61a730fb8de51981b7a8682a4b3612a438cabf01d002900000000000000000000000018f6324ae92bd459d4522ec39ffc3de5a309ec3d000000000000000000000000000000000000000000000000000000003b9aca00",
  "constructorArguments": "00000000000000000000000018f6324ae92bd459d4522ec39ffc3de5a309ec3d000000000000000000000000000000000000000000000000000000003b9aca00"
}