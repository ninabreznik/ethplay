{
  "address": "0x6d534b48835701312ebc904d4b37e54d4f7d039f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Snip3D",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-18\n*/\n\npragma solidity ^0.4.25;\n// Original gameplay and contract by Spielley\n// Spielley is not liable for any bugs or exploits the contract may contain\n// This game is purely intended for fun purposes\n\n// Gameplay:\n// Send in 0.1 eth to get a soldier in the field and 1 bullet\n// Wait till you reach the waiting time needed to shoot\n// Each time someone is killed divs are given to the survivors\n// 2 ways to shoot: \n// semi random, available first (after 200 blocks)\n// Chose target                 (after 800 blocks)\n\n// there is only a 1 time self kill prevention when semi is used\n// if you send in multiple soldiers friendly kills are possible\n// => use target instead\n\n// Social gameplay: Chat with people and Coordinate your shots \n// if you want to risk not getting shot by semi bullets first\n\n// you keep your bullets when you send in new soldiers\n\n// if your soldier dies your address is added to the back of the refund line\n// to get back your initial eth\n\n// payout structure per 0.1 eth:\n// 0.005 eth buy P3D\n// 0.005 eth goes to the refund line\n// 0.001 eth goes dev cut shared across SPASM(Spielleys profit share aloocation module)\n// 0.001 eth goes to referal\n// 0.088 eth is given to survivors upon kill\n\n// P3D divs: \n// 1% to SPASM\n// 99% to refund line\n\n// SPASM: get a part of the dev fee payouts and funds Spielley to go fulltime dev\n// https://etherscan.io/address/0xfaae60f2ce6491886c9f7c9356bd92f688ca66a1#writeContract\n// => buyshares function , send in eth to get shares\n\n// P3D MN payouts for UI devs\n// payout per 0.1 eth sent in the sendInSoldier function\n\n// **to prevent exploit spot 0 can be targeted by chosing nextFormation number**\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n// Snip3d contract\ncontract Snip3D is  Owned {\n    using SafeMath for uint;\n    uint public _totalSupply;\n\n    mapping(address => uint256)public  balances;// soldiers on field\n    mapping(address => uint256)public  bullets;// amount of bullets Owned\n    mapping(uint256 => address)public  formation;// the playing field\n    uint256 public nextFormation;// next spot in formation\n    mapping(address => uint256)public lastMove;//blocknumber lastMove\n    mapping(uint256 => address) public RefundWaitingLine;\n    uint256 public  NextInLine;//next person to be refunded\n    uint256 public  NextAtLineEnd;//next spot to add loser\n    uint256 public Refundpot;\n    uint256 public blocksBeforeSemiRandomShoot = 200;\n    uint256 public blocksBeforeTargetShoot = 800;\n    \n    // events\n    event death(address indexed player);\n    event semiShot(address indexed player);\n    event targetShot(address indexed player);\n    \n    //constructor\n    constructor()\n        public\n    {\n        \n        \n    }\n    //mods\n    modifier isAlive()\n    {\n        require(balances[msg.sender] > 0);\n        _;\n    }\n    // divfunctions\nHourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\nSPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);\n// view functions\nfunction harvestabledivs()\n        view\n        public\n        returns(uint256)\n    {\n        return ( P3Dcontract_.dividendsOf(address(this)))  ;\n    }\n    function nextonetogetpaid()\n        public\n        view\n        returns(address)\n    {\n        \n        return (RefundWaitingLine[NextInLine]);\n    }\n    function playervanity(address theplayer)\n        public\n        view\n        returns( string )\n    {\n        return (Vanity[theplayer]);\n    }\n    function blocksTillSemiShoot(address theplayer)\n        public\n        view\n        returns( uint256 )\n    {\n        uint256 number;\n        if(block.number - lastMove[theplayer] < blocksBeforeSemiRandomShoot)\n        {number = blocksBeforeSemiRandomShoot -(block.number - lastMove[theplayer]);}\n        return (number);\n    }\n    function blocksTillTargetShoot(address theplayer)\n        public\n        view\n        returns( uint256 )\n    {\n        uint256 number;\n        if(block.number - lastMove[theplayer] < blocksBeforeTargetShoot)\n        {number = blocksBeforeTargetShoot -(block.number - lastMove[theplayer]);}\n        return (number);\n    }\nfunction amountofp3d() external view returns(uint256){\n    return ( P3Dcontract_.balanceOf(address(this)))  ;\n}\n    //divsection\nuint256 public pointMultiplier = 10e18;\nstruct Account {\n  uint balance;\n  uint lastDividendPoints;\n}\nmapping(address=>Account) accounts;\nmapping(address => string) public Vanity;\nuint public ethtotalSupply;\nuint public totalDividendPoints;\nuint public unclaimedDividends;\n\nfunction dividendsOwing(address account) public view returns(uint256) {\n  uint256 newDividendPoints = totalDividendPoints.sub(accounts[account].lastDividendPoints);\n  return (balances[account] * newDividendPoints) / pointMultiplier;\n}\nmodifier updateAccount(address account) {\n  uint256 owing = dividendsOwing(account);\n  if(owing > 0) {\n    unclaimedDividends = unclaimedDividends.sub(owing);\n    \n    account.transfer(owing);\n  }\n  accounts[account].lastDividendPoints = totalDividendPoints;\n  _;\n}\nfunction () external payable{}\nfunction fetchdivs(address toupdate) public updateAccount(toupdate){}\n// Gamefunctions\nfunction sendInSoldier(address masternode) public updateAccount(msg.sender)  payable{\n    uint256 value = msg.value;\n    require(value >= 100 finney);// sending in sol costs 0.1 eth\n    address sender = msg.sender;\n    // add life\n    balances[sender]++;\n    // update totalSupply\n    _totalSupply++;\n    // add bullet \n    bullets[sender]++;\n    // add to playing field\n    formation[nextFormation] = sender;\n    nextFormation++;\n    // reset lastMove to prevent people from adding bullets and start shooting\n    lastMove[sender] = block.number;\n    // buy P3D\n    P3Dcontract_.buy.value(5 finney)(masternode);\n    // check excess of payed \n     if(value > 100 finney){Refundpot += value - 100 finney;}\n    // progress refundline\n    Refundpot += 5 finney;\n    // send SPASM cut\n    SPASM_.disburse.value(2 finney)();\n\n}\nfunction sendInSoldierReferal(address masternode, address referal) public updateAccount(msg.sender)  payable{\n    uint256 value = msg.value;\n    require(value >= 100 finney);// sending in sol costs 0.1 eth\n    address sender = msg.sender;\n    // add life\n    balances[sender]++;\n    // update totalSupply\n    _totalSupply++;\n    // add bullet \n    bullets[sender]++;\n    // add to playing field\n    formation[nextFormation] = sender;\n    nextFormation++;\n    // reset lastMove to prevent people from adding bullets and start shooting\n    lastMove[sender] = block.number;\n    // buy P3D\n    P3Dcontract_.buy.value(5 finney)(masternode);\n    // check excess of payed \n    if(value > 100 finney){Refundpot += value - 100 finney;}\n    // progress refundline\n    Refundpot += 5 finney;\n    // send SPASM cut\n    SPASM_.disburse.value(1 finney)();\n    // send referal cut\n    referal.transfer(1 finney);\n\n}\nfunction shootSemiRandom() public isAlive() {\n    address sender = msg.sender;\n    require(block.number > lastMove[sender] + blocksBeforeSemiRandomShoot);\n    require(bullets[sender] > 0);\n    uint256 semiRNG = (block.number.sub(lastMove[sender])) % 200;\n    \n    uint256 shot = uint256 (blockhash(block.number.sub(semiRNG))) % nextFormation;\n    address killed = formation[shot];\n    // solo soldiers self kill prevention - shoots next in line instead\n    if(sender == killed)\n    {\n        shot = uint256 (blockhash(block.number.sub(semiRNG).add(1))) % nextFormation;\n        killed = formation[shot];\n    }\n    // update divs loser\n    fetchdivs(killed);\n    // remove life\n    balances[killed]--;\n    // update totalSupply\n    _totalSupply--;\n    // remove bullet \n    bullets[sender]--;\n    // remove from playing field\n    uint256 lastEntry = nextFormation.sub(1);\n    formation[shot] = formation[lastEntry];\n    nextFormation--;\n    // reset lastMove to prevent people from adding bullets and start shooting\n    lastMove[sender] = block.number;\n    \n    \n    // add loser to refundline\n    RefundWaitingLine[NextAtLineEnd] = killed;\n    NextAtLineEnd++;\n    // disburse eth to survivors\n    uint256 amount = 88 finney;\n    totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(_totalSupply));\n    unclaimedDividends = unclaimedDividends.add(amount);\n    emit semiShot(sender);\n    emit death(killed);\n\n}\nfunction shootTarget(uint256 target) public isAlive() {\n    address sender = msg.sender;\n    require(target <= nextFormation && target > 0);\n    require(block.number > lastMove[sender] + blocksBeforeTargetShoot);\n    require(bullets[sender] > 0);\n    if(target == nextFormation){target = 0;}\n    address killed = formation[target];\n    \n    // update divs loser\n    fetchdivs(killed);\n    \n    // remove life\n    balances[killed]--;\n    // update totalSupply\n    _totalSupply--;\n    // remove bullet \n    bullets[sender]--;\n    // remove from playing field\n    uint256 lastEntry = nextFormation.sub(1);\n    formation[target] = formation[lastEntry];\n    nextFormation--;\n    // reset lastMove to prevent people from adding bullets and start shooting\n    lastMove[sender] = block.number;\n    \n    // add loser to refundline\n    RefundWaitingLine[NextAtLineEnd] = killed;\n    NextAtLineEnd++;\n    // fetch contracts divs\n    //allocate p3d dividends to contract \n            uint256 dividends =  harvestabledivs();\n            require(dividends > 0);\n            uint256 base = dividends.div(100);\n            P3Dcontract_.withdraw();\n            SPASM_.disburse.value(base)();// to dev fee sharing contract SPASM\n    // disburse eth to survivors\n    uint256 amount = 88 finney;\n    uint256 amt2 = dividends.sub(base);\n    Refundpot = Refundpot.add(amt2);\n    totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(_totalSupply));\n    unclaimedDividends = unclaimedDividends.add(amount);\n    emit targetShot(sender);\n    emit death(killed);\n}\n\nfunction Payoutnextrefund ()public\n    {\n        //allocate p3d dividends to sacrifice if existing\n            uint256 Pot = Refundpot;\n            require(Pot > 0.1 ether);\n            Refundpot -= 0.1 ether;\n            RefundWaitingLine[NextInLine].transfer(0.1 ether);\n            NextInLine++;\n            //\n    }\n\nfunction disburse() public  payable {\n    uint256 amount = msg.value;\n    uint256 base = amount.div(100);\n    uint256 amt2 = amount.sub(base);\n  totalDividendPoints = totalDividendPoints.add(amt2.mul(pointMultiplier).div(_totalSupply));\n unclaimedDividends = unclaimedDividends.add(amt2);\n \n}\nfunction changevanity(string van) public payable{\n    require(msg.value >= 1  finney);\n    Vanity[msg.sender] = van;\n    Refundpot += msg.value;\n}\nfunction P3DDivstocontract() public{\n    uint256 divs = harvestabledivs();\n    require(divs > 0);\n \nP3Dcontract_.withdraw();\n    //1% to owner\n    uint256 base = divs.div(100);\n    uint256 amt2 = divs.sub(base);\n    SPASM_.disburse.value(base)();// to dev fee sharing contract\n   Refundpot = Refundpot.add(amt2);// add divs to refund line\n}\n\n// bugtest selfdestruct function - deactivate on live\n//  function die () public onlyOwner {\n//      selfdestruct(msg.sender);\n//  }\n\n    \n}\ninterface HourglassInterface  {\n    function() payable external;\n    function buy(address _playerAddress) payable external returns(uint256);\n    function sell(uint256 _amountOfTokens) external;\n    function reinvest() external;\n    function withdraw() external;\n    function exit() external;\n    function dividendsOf(address _playerAddress) external view returns(uint256);\n    function balanceOf(address _playerAddress) external view returns(uint256);\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n    function stakingRequirement() external view returns(uint256);\n}\ninterface SPASMInterface  {\n    function() payable external;\n    function disburse() external  payable;\n}",
  "bytecode": "608060405260c8600c55610320600d55678ac7230489e80000600e5534801561002757600080fd5b5060008054600160a060020a031916730b0efad4ae088a88ffdc50bce5fb63c6936b9220179055611abd8061005d6000396000f3006080604052600436106101b35763ffffffff60e060020a6000350416630d874f7a81146101b557806316eaa4b4146101e9578063182a7f72146101fe5780632113342d1461023157806327e235e314610246578063346bd65714610267578063358fcee91461027c57806339f565501461029d5780633b223aa6146102b25780633cb802b9146102d35780633eaaf86b146102e8578063573074f9146102fd57806361df829814610312578063658b98a91461035e57806379ba5097146103735780637d798e0614610388578063817e1344146103a957806381d6c866146103c15780638391e45c146103d65780638da5cb5b146103f7578063921002651461040c57806393d51daf146104a25780639d5e2e1e146104b7578063a0c5c83b146104cf578063a5edcd9e146104e4578063aa9be846146104f9578063abc6fd0b1461050e578063b0f482be14610516578063c24ad4631461052b578063c8cd6cc614610540578063d4ee1d901461055a578063d7340cef1461056f578063d988a0f914610590578063e19bdefb146105a5578063e7d2340f146105b9578063f2fde38b146105da578063fa509eda146105fb575b005b3480156101c157600080fd5b506101cd600435610610565b60408051600160a060020a039092168252519081900360200190f35b3480156101f557600080fd5b506101b361062b565b34801561020a57600080fd5b5061021f600160a060020a0360043516610761565b60408051918252519081900360200190f35b34801561023d57600080fd5b5061021f6107b4565b34801561025257600080fd5b5061021f600160a060020a03600435166107ba565b34801561027357600080fd5b5061021f6107cc565b34801561028857600080fd5b506101b3600160a060020a03600435166107d2565b3480156102a957600080fd5b5061021f61085b565b3480156102be57600080fd5b5061021f600160a060020a0360043516610861565b3480156102df57600080fd5b5061021f610873565b3480156102f457600080fd5b5061021f610879565b34801561030957600080fd5b5061021f61087f565b6040805160206004803580820135601f81018490048402850184019095528484526101b39436949293602493928401919081908401838280828437509497506108859650505050505050565b34801561036a57600080fd5b5061021f6108c5565b34801561037f57600080fd5b506101b36108cb565b34801561039457600080fd5b5061021f600160a060020a0360043516610953565b3480156103b557600080fd5b506101b3600435610965565b3480156103cd57600080fd5b5061021f610cfc565b3480156103e257600080fd5b5061021f600160a060020a0360043516610d9b565b34801561040357600080fd5b506101cd610dff565b34801561041857600080fd5b5061042d600160a060020a0360043516610e0e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561046757818101518382015260200161044f565b50505050905090810190601f1680156104945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ae57600080fd5b5061021f610ea9565b3480156104c357600080fd5b506101cd600435610f18565b3480156104db57600080fd5b5061021f610f33565b3480156104f057600080fd5b5061021f610f39565b34801561050557600080fd5b5061021f610f3f565b6101b3610f45565b34801561052257600080fd5b506101b3610faa565b34801561053757600080fd5b5061021f611272565b6101b3600160a060020a0360043581169060243516611278565b34801561056657600080fd5b506101cd61152e565b34801561057b57600080fd5b5061021f600160a060020a036004351661153d565b34801561059c57600080fd5b506101b361158c565b6101b3600160a060020a036004351661160b565b3480156105c557600080fd5b5061042d600160a060020a0360043516611887565b3480156105e657600080fd5b506101b3600160a060020a0360043516611932565b34801561060757600080fd5b506101cd611978565b600860205260009081526040902054600160a060020a031681565b6000806000610638610cfc565b92506000831161064757600080fd5b73b3775fb83f7d12a36e0475abdd1fca35c091efbe600160a060020a0316633ccfd60b6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050506106c560648461199690919063ffffffff16565b91506106d7838363ffffffff6119af16565b905073faae60f2ce6491886c9f7c9356bd92f688ca66a1600160a060020a031663abc6fd0b836040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b505050505061075981600b546119c490919063ffffffff16565b600b55505050565b600c54600160a060020a03821660009081526007602052604081205490918291430310156107ae5750600160a060020a038216600090815260076020526040902054600c54439190910390035b92915050565b60125481565b60036020526000908152604090205481565b600d5481565b8060006107de82610d9b565b90506000811115610837576013546107fc908263ffffffff6119af16565b601355604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610835573d6000803e3d6000fd5b505b50601254600160a060020a039091166000908152600f602052604090206001015550565b600a5481565b60076020526000908152604090205481565b60135481565b60025481565b60065481565b66038d7ea4c6800034101561089957600080fd5b33600090815260106020908152604090912082516108b9928401906119f9565b5050600b805434019055565b600e5481565b600154600160a060020a031633146108e257600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60046020526000908152604090205481565b33600090815260036020526040812054819081908190819081908190811061098c57600080fd5b33965060065488111580156109a15750600088115b15156109ac57600080fd5b600d54600160a060020a0388166000908152600760205260409020540143116109d457600080fd5b600160a060020a038716600090815260046020526040812054116109f757600080fd5b600654881415610a0657600097505b600088815260056020526040902054600160a060020a03169550610a29866107d2565b600160a060020a03808716600090815260036020908152604080832080546000199081019091556002805482019055938b1683526004909152902080549091019055600654610a7f90600163ffffffff6119af16565b6000818152600560209081526040808320548c84528184208054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff1991821617909155600680546000190190558c8216855260078452828520439055600a805486526008909452919093208054909116928a1692909217909155805460010190559450610b09610cfc565b935060008411610b1857600080fd5b610b2984606463ffffffff61199616565b925073b3775fb83f7d12a36e0475abdd1fca35c091efbe600160a060020a0316633ccfd60b6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610b7d57600080fd5b505af1158015610b91573d6000803e3d6000fd5b5050505073faae60f2ce6491886c9f7c9356bd92f688ca66a1600160a060020a031663abc6fd0b846040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610be757600080fd5b505af1158015610bfb573d6000803e3d6000fd5b5050505050670138a388a43c00009150610c1e83856119af90919063ffffffff16565b600b54909150610c34908263ffffffff6119c416565b600b55600254600e54610c7191610c6291610c5690869063ffffffff6119d416565b9063ffffffff61199616565b6012549063ffffffff6119c416565b601255601354610c87908363ffffffff6119c416565b601355604051600160a060020a038816907f1ddbefc95b40c8baae66b8deb8eab4e53d4db24dda9f3d0706344855237900c990600090a2604051600160a060020a038716907f3be9590187e7ad9a5fc8f2839aa45935616ea145d79807bbf4e58cb55d2e191290600090a25050505050505050565b604080517e65318b000000000000000000000000000000000000000000000000000000008152306004820152905160009173b3775fb83f7d12a36e0475abdd1fca35c091efbe916265318b9160248082019260209290919082900301818787803b158015610d6957600080fd5b505af1158015610d7d573d6000803e3d6000fd5b505050506040513d6020811015610d9357600080fd5b505190505b90565b600160a060020a0381166000908152600f60205260408120600101546012548291610dcc919063ffffffff6119af16565b600e54600160a060020a038516600090815260036020526040902054919250908202811515610df757fe5b049392505050565b600054600160a060020a031681565b60106020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610ea15780601f10610e7657610100808354040283529160200191610ea1565b820191906000526020600020905b815481529060010190602001808311610e8457829003601f168201915b505050505081565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173b3775fb83f7d12a36e0475abdd1fca35c091efbe916370a082319160248082019260209290919082900301818787803b158015610d6957600080fd5b600560205260009081526040902054600160a060020a031681565b60095481565b60115481565b600c5481565b34600080610f5a83606463ffffffff61199616565b9150610f6c838363ffffffff6119af16565b9050610f8c610c62600254610c56600e54856119d490919063ffffffff16565b601255601354610fa2908263ffffffff6119c416565b601355505050565b33600090815260036020526040812054819081908190819081908110610fcf57600080fd5b600c5433600081815260076020526040902054909750014311610ff157600080fd5b600160a060020a0386166000908152600460205260408120541161101457600080fd5b600160a060020a03861660009081526007602052604090205460c89061104190439063ffffffff6119af16565b81151561104a57fe5b6006549190069550611062438763ffffffff6119af16565b4081151561106c57fe5b06600081815260056020526040902054909450600160a060020a03908116935086168314156110e2576006546110b960016110ad438963ffffffff6119af16565b9063ffffffff6119c416565b408115156110c357fe5b06600081815260056020526040902054909450600160a060020a031692505b6110eb836107d2565b600160a060020a03808416600090815260036020908152604080832080546000199081019091556002805482019055938a168352600490915290208054909101905560065461114190600163ffffffff6119af16565b6000818152600560209081526040808320548884528184208054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff1991821617909155600680546000190190558b8216855260078452828520439055600a8054865260089094529190932080549091169287169290921790915580546001019055600254600e54919350670138a388a43c000092506111e991610c629190610c569085906119d4565b6012556013546111ff908263ffffffff6119c416565b601355604051600160a060020a038716907fec04315f91db1d59c13518b8cfbd0149de11a116702953d952e874371b24cd6290600090a2604051600160a060020a038416907f3be9590187e7ad9a5fc8f2839aa45935616ea145d79807bbf4e58cb55d2e191290600090a2505050505050565b600b5481565b60008033600061128782610d9b565b905060008111156112e0576013546112a5908263ffffffff6119af16565b601355604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156112de573d6000803e3d6000fd5b505b601254600160a060020a0383166000908152600f602052604090206001015534935067016345785d8a000084101561131757600080fd5b336000818152600360209081526040808320805460019081019091556002805482019055600480845282852080548301905560068054865260058552838620805473ffffffffffffffffffffffffffffffffffffffff1916881790558054909201909155848452600783529281902043905580517ff088d547000000000000000000000000000000000000000000000000000000008152600160a060020a038b16938101939093525192955073b3775fb83f7d12a36e0475abdd1fca35c091efbe9263f088d547926611c37937e0800092602480830193919282900301818588803b15801561140557600080fd5b505af1158015611419573d6000803e3d6000fd5b50505050506040513d602081101561143057600080fd5b505067016345785d8a000084111561145657600b8054850167016345785d89ffff190190555b600b80546611c37937e08000019055604080517fabc6fd0b000000000000000000000000000000000000000000000000000000008152905173faae60f2ce6491886c9f7c9356bd92f688ca66a19163abc6fd0b9166038d7ea4c680009160048082019260009290919082900301818588803b1580156114d457600080fd5b505af11580156114e8573d6000803e3d6000fd5b5050604051600160a060020a03891693506000925066038d7ea4c68000915082818181858883f19350505050158015611525573d6000803e3d6000fd5b50505050505050565b600154600160a060020a031681565b600d54600160a060020a03821660009081526007602052604081205490918291430310156107ae575050600160a060020a0316600090815260076020526040902054600d544391909103900390565b600b5467016345785d8a000081116115a357600080fd5b600b805467016345785d89ffff19019055600954600090815260086020526040808220549051600160a060020a03909116919067016345785d8a00009082818181858883f193505050501580156115fe573d6000803e3d6000fd5b5050600980546001019055565b60008033600061161a82610d9b565b9050600081111561167357601354611638908263ffffffff6119af16565b601355604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015611671573d6000803e3d6000fd5b505b601254600160a060020a0383166000908152600f602052604090206001015534935067016345785d8a00008410156116aa57600080fd5b336000818152600360209081526040808320805460019081019091556002805482019055600480845282852080548301905560068054865260058552838620805473ffffffffffffffffffffffffffffffffffffffff1916881790558054909201909155848452600783529281902043905580517ff088d547000000000000000000000000000000000000000000000000000000008152600160a060020a038a16938101939093525192955073b3775fb83f7d12a36e0475abdd1fca35c091efbe9263f088d547926611c37937e0800092602480830193919282900301818588803b15801561179857600080fd5b505af11580156117ac573d6000803e3d6000fd5b50505050506040513d60208110156117c357600080fd5b505067016345785d8a00008411156117e957600b8054850167016345785d89ffff190190555b600b80546611c37937e08000019055604080517fabc6fd0b000000000000000000000000000000000000000000000000000000008152905173faae60f2ce6491886c9f7c9356bd92f688ca66a19163abc6fd0b9166071afd498d00009160048082019260009290919082900301818588803b15801561186757600080fd5b505af115801561187b573d6000803e3d6000fd5b50505050505050505050565b600160a060020a03811660009081526010602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156119265780601f106118fb57610100808354040283529160200191611926565b820191906000526020600020905b81548152906001019060200180831161190957829003601f168201915b50505050509050919050565b600054600160a060020a0316331461194957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600954600090815260086020526040902054600160a060020a031690565b60008082116119a457600080fd5b8183811515610df757fe5b6000828211156119be57600080fd5b50900390565b818101828110156107ae57600080fd5b8181028215806119ee57508183828115156119eb57fe5b04145b15156107ae57600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a3a57805160ff1916838001178555611a67565b82800160010185558215611a67579182015b82811115611a67578251825591602001919060010190611a4c565b50611a73929150611a77565b5090565b610d9891905b80821115611a735760008155600101611a7d5600a165627a7a723058209dfbc91eb5944bd2c6acead6312c58662b36902274b806513fb1277533745b340029"
}