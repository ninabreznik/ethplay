{
  "address": "0x12fd19dac0fab61bed5e0f09091b470c452d4d61",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EC",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-09\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20Basic {\n\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    modifier hasMintPermission() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(\n        address _to,\n        uint256 _amount\n    )\n        hasMintPermission\n        canMint\n        public\n        returns (bool)\n    {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract Controlled is Ownable{\n\n    constructor() public {\n        setExclude(msg.sender);\n    }\n\n    // Flag that determines if the token is transferable or not.\n    bool public transferEnabled = false;\n\n    // flag that makes locked address effect\n    bool public plockFlag=true;\n    mapping(address => bool) locked;\n    mapping(address => bool) exclude;\n\n    function enableTransfer(bool _enable) public onlyOwner{\n        transferEnabled = _enable;\n    }\n    \n    function enableLockFlag(bool _enable) public onlyOwner returns (bool success){\n        plockFlag = _enable;\n        return true;\n    }\n\n    function addLock(address _addr) public onlyOwner returns (bool success){\n        require(_addr!=msg.sender);\n        locked[_addr] = true;\n        return true;\n    }\n\n    function setExclude(address _addr) public onlyOwner returns (bool success){\n        exclude[_addr] = true;\n        return true;\n    }\n\n    function removeLock(address _addr) public onlyOwner returns (bool success){\n        locked[_addr] = false;\n        return true;\n    }\n\n    modifier transferAllowed(address _addr) {\n        if (!exclude[_addr]) {\n            assert(transferEnabled);\n            if(plockFlag){\n                assert(!locked[_addr]);\n            }\n        }\n        \n        _;\n    }\n\n}\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Controlled {\n\n    function transfer(address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n        return super.approve(_spender, _value);\n    }\n}\n\n/*\n * @title Echoin\n */\ncontract EC is BurnableToken, MintableToken, PausableToken {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    // decimals is the strongly suggested default, avoid changing it\n    uint8 public decimals;\n\n    constructor() public {\n        name = \"Echoin\";\n        symbol = \"EC\";\n        decimals = 18;\n        totalSupply_ = 2000000000 * 10 ** uint256(decimals);\n\n        // Allocate initial balance to the owner\n        balances[msg.sender] = totalSupply_;\n    }\n\n    // transfer balance to owner\n    function withdrawEther() onlyOwner public {\n        address addr = this;\n        owner.transfer(addr.balance);\n    }\n\n    // can accept ether\n    function() payable public { }\n\n    // Allocate tokens to the users\n    // @param _owners The owners list of the token\n    // @param _values The value list of the token\n    function allocateTokens(address[] _owners, uint256[] _values) public onlyOwner {\n\n        require(_owners.length == _values.length, \"data length mismatch\");\n        address from = msg.sender;\n\n        for(uint256 i = 0; i < _owners.length ; i++){\n            address to = _owners[i];\n            uint256 value = _values[i];\n            require(value <= balances[from]);\n\n            balances[to] = balances[to].add(value);\n            balances[from] = balances[from].sub(value);\n            emit Transfer(from, to, value);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plockFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setExclude\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"allocateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableLockFlag\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a62ffffff0219167601000000000000000000000000000000000000000000001790553480156200003c57600080fd5b5060038054600160a060020a0319163390811790915562000066906401000000006200012b810204565b506040805180820190915260068082527f4563686f696e00000000000000000000000000000000000000000000000000006020909201918252620000ab91816200016f565b506040805180820190915260028082527f45430000000000000000000000000000000000000000000000000000000000006020909201918252620000f2916007916200016f565b5060088054601260ff19909116179081905560ff16600a0a63773594000260018190553360009081526020819052604090205562000214565b600354600090600160a060020a031633146200014657600080fd5b50600160a060020a03166000908152600560205260409020805460ff1916600190811790915590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b257805160ff1916838001178555620001e2565b82800160010185558215620001e2579182015b82811115620001e2578251825591602001919060010190620001c5565b50620001f0929150620001f4565b5090565b6200021191905b80821115620001f05760008155600101620001fb565b90565b61144980620002246000396000f30060806040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461016057806306fdde0314610189578063095ea7b31461021357806318160ddd1461023757806323b872dd1461025e57806330c9706814610288578063313ce5671461029d57806340c10f19146102c857806342966c68146102ec5780634a387bef146103045780634cd412d5146103255780635f6f8b5f1461033a578063661884631461035b57806370a082311461037f578063715018a6146103a05780637362377b146103b55780637d64bcb4146103ca578063882f327b146103df5780638da5cb5b1461040057806395d89b4114610431578063a7368afb14610446578063a9059cbb146104d4578063ac4fb219146104f8578063d73dd62314610512578063dd62ed3e14610536578063ef7ac0e51461055d578063f2fde38b14610577575b005b34801561016c57600080fd5b50610175610598565b604080519115158252519081900360200190f35b34801561019557600080fd5b5061019e6105b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d85781810151838201526020016101c0565b50505050905090810190601f1680156102055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021f57600080fd5b50610175600160a060020a0360043516602435610647565b34801561024357600080fd5b5061024c6106bf565b60408051918252519081900360200190f35b34801561026a57600080fd5b50610175600160a060020a03600435811690602435166044356106c5565b34801561029457600080fd5b5061017561073f565b3480156102a957600080fd5b506102b261074f565b6040805160ff9092168252519081900360200190f35b3480156102d457600080fd5b50610175600160a060020a0360043516602435610758565b3480156102f857600080fd5b5061015e600435610861565b34801561031057600080fd5b50610175600160a060020a036004351661086e565b34801561033157600080fd5b506101756108ad565b34801561034657600080fd5b50610175600160a060020a03600435166108bd565b34801561036757600080fd5b50610175600160a060020a0360043516602435610900565b34801561038b57600080fd5b5061024c600160a060020a03600435166109ef565b3480156103ac57600080fd5b5061015e610a0a565b3480156103c157600080fd5b5061015e610a78565b3480156103d657600080fd5b50610175610ad1565b3480156103eb57600080fd5b50610175600160a060020a0360043516610b77565b34801561040c57600080fd5b50610415610bd0565b60408051600160a060020a039092168252519081900360200190f35b34801561043d57600080fd5b5061019e610bdf565b34801561045257600080fd5b506040805160206004803580820135838102808601850190965280855261015e95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610c3a9650505050505050565b3480156104e057600080fd5b50610175600160a060020a0360043516602435610dec565b34801561050457600080fd5b506101756004351515610e5c565b34801561051e57600080fd5b50610175600160a060020a0360043516602435610eaa565b34801561054257600080fd5b5061024c600160a060020a0360043581169060243516610f43565b34801561056957600080fd5b5061015e6004351515610f6e565b34801561058357600080fd5b5061015e600160a060020a0360043516610fb5565b60035474010000000000000000000000000000000000000000900460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561063f5780601f106106145761010080835404028352916020019161063f565b820191906000526020600020905b81548152906001019060200180831161062257829003601f168201915b505050505081565b3360008181526005602052604081205490919060ff1615156106ad5760035460a860020a900460ff16151561067857fe5b60035460b060020a900460ff16156106ad57600160a060020a03811660009081526004602052604090205460ff16156106ad57fe5b6106b78484610fd5565b949350505050565b60015490565b3360008181526005602052604081205490919060ff16151561072b5760035460a860020a900460ff1615156106f657fe5b60035460b060020a900460ff161561072b57600160a060020a03811660009081526004602052604090205460ff161561072b57fe5b61073685858561103b565b95945050505050565b60035460b060020a900460ff1681565b60085460ff1681565b600354600090600160a060020a0316331461077257600080fd5b60035474010000000000000000000000000000000000000000900460ff161561079a57600080fd5b6001546107ad908363ffffffff61119e16565b600155600160a060020a0383166000908152602081905260409020546107d9908363ffffffff61119e16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206113fe8339815191529181900360200190a350600192915050565b61086b33826111b1565b50565b600354600090600160a060020a0316331461088857600080fd5b50600160a060020a03166000908152600460205260409020805460ff19169055600190565b60035460a860020a900460ff1681565b600354600090600160a060020a031633146108d757600080fd5b50600160a060020a03166000908152600560205260409020805460ff1916600190811790915590565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061095457336000908152600260209081526040808320600160a060020a0388168452909152812055610989565b610964818463ffffffff6112a016565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610a2157600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a03163314610a9257600080fd5b506003546040513091600160a060020a031690823180156108fc02916000818181858888f19350505050158015610acd573d6000803e3d6000fd5b5050565b600354600090600160a060020a03163314610aeb57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610b1357600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600090600160a060020a03163314610b9157600080fd5b600160a060020a038216331415610ba757600080fd5b50600160a060020a03166000908152600460205260409020805460ff1916600190811790915590565b600354600160a060020a031681565b6007805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561063f5780601f106106145761010080835404028352916020019161063f565b600354600090819081908190600160a060020a03163314610c5a57600080fd5b8451865114610cca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64617461206c656e677468206d69736d61746368000000000000000000000000604482015290519081900360640190fd5b339350600092505b8551831015610de4578583815181101515610ce957fe5b9060200190602002015191508483815181101515610d0357fe5b6020908102909101810151600160a060020a038616600090815291829052604090912054909150811115610d3657600080fd5b600160a060020a038216600090815260208190526040902054610d5f908263ffffffff61119e16565b600160a060020a038084166000908152602081905260408082209390935590861681522054610d94908263ffffffff6112a016565b600160a060020a038086166000818152602081815260409182902094909455805185815290519286169391926000805160206113fe833981519152929181900390910190a3600190920191610cd2565b505050505050565b3360008181526005602052604081205490919060ff161515610e525760035460a860020a900460ff161515610e1d57fe5b60035460b060020a900460ff1615610e5257600160a060020a03811660009081526004602052604090205460ff1615610e5257fe5b6106b784846112b2565b600354600090600160a060020a03163314610e7657600080fd5b506003805482151560b060020a0276ff00000000000000000000000000000000000000000000199091161790556001919050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610ede908363ffffffff61119e16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610f8557600080fd5b6003805491151560a860020a0275ff00000000000000000000000000000000000000000019909216919091179055565b600354600160a060020a03163314610fcc57600080fd5b61086b8161137f565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a03831660009081526020819052604081205482111561106057600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561109057600080fd5b600160a060020a03831615156110a557600080fd5b600160a060020a0384166000908152602081905260409020546110ce908363ffffffff6112a016565b600160a060020a038086166000908152602081905260408082209390935590851681522054611103908363ffffffff61119e16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611145908363ffffffff6112a016565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391926000805160206113fe833981519152929181900390910190a35060019392505050565b818101828110156111ab57fe5b92915050565b600160a060020a0382166000908152602081905260409020548111156111d657600080fd5b600160a060020a0382166000908152602081905260409020546111ff908263ffffffff6112a016565b600160a060020a03831660009081526020819052604090205560015461122b908263ffffffff6112a016565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206113fe8339815191529181900360200190a35050565b6000828211156112ac57fe5b50900390565b336000908152602081905260408120548211156112ce57600080fd5b600160a060020a03831615156112e357600080fd5b33600090815260208190526040902054611303908363ffffffff6112a016565b3360009081526020819052604080822092909255600160a060020a03851681522054611335908363ffffffff61119e16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206113fe8339815191529281900390910190a350600192915050565b600160a060020a038116151561139457600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582033eb9edb36dfe7ce41c761712bac315f623e682bd4a99f9ddc36c3edd3d522350029"
}