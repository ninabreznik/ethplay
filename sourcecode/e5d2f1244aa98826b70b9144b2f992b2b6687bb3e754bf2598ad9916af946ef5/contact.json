{
  "address": "0x3366adfcd676463e2f5387d07649f227fcc5c15e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ComplexChildToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-28\n*/\n\npragma solidity ^0.4.21;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/ChildToken.sol\n\n/**\n * @title ChildToken\n * @dev ChildToken is the base contract of child token contracts\n */\ncontract ChildToken is StandardToken {\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/Refundable.sol\n\n/**\n * @title Refundable\n * @dev Base contract that can refund funds(ETH and tokens) by owner.\n * @dev Reference TokenDestructible(zeppelinand) TokenDestructible(zeppelin)\n */\ncontract Refundable is Ownable {\n\tevent RefundETH(address indexed owner, address indexed payee, uint256 amount);\n\tevent RefundERC20(address indexed owner, address indexed payee, address indexed token, uint256 amount);\n\n\tfunction Refundable() public payable {\n\t}\n\n\tfunction refundETH(address payee, uint256 amount) onlyOwner public {\n\t\trequire(payee != address(0));\n\t\trequire(this.balance >= amount);\n\t\tassert(payee.send(amount));\n\t\tRefundETH(owner, payee, amount);\n\t}\n\n\tfunction refundERC20(address tokenContract, address payee, uint256 amount) onlyOwner public {\n\t\trequire(payee != address(0));\n\t\tbool isContract;\n\t\tassembly {\n\t\t\tisContract := gt(extcodesize(tokenContract), 0)\n\t\t}\n\t\trequire(isContract);\n\n\t\tERC20 token = ERC20(tokenContract);\n\t\tassert(token.transfer(payee, amount));\n\t\tRefundERC20(owner, payee, tokenContract, amount);\n\t}\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/ComplexChildToken.sol\n\n/**\n * @title ComplexChildToken\n * @dev Complex child token to be generated by TokenFather.\n */\ncontract ComplexChildToken is ChildToken, Refundable, MintableToken, BurnableToken {\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tbool public canBurn;\n\n\tevent Burn(address indexed burner, uint256 value);\n\n\tfunction ComplexChildToken(address _owner, string _name, string _symbol, uint256 _initSupply, uint8 _decimals,\n\t\tbool _canMint, bool _canBurn) public {\n\t\trequire(_owner != address(0));\n\t\towner = _owner;\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\n\t\tuint256 amount = _initSupply;\n\t\ttotalSupply_ = totalSupply_.add(amount);\n\t\tbalances[owner] = balances[owner].add(amount);\n\t\tTransfer(address(0), owner, amount);\n\n\t\tif (!_canMint) {\n\t\t\tmintingFinished = true;\n\t\t}\n\t\tcanBurn = _canBurn;\n\t}\n\n\t/**\n\t* @dev Burns a specific amount of tokens.\n\t* @param _value The amount of token to be burned.\n\t*/\n\tfunction burn(uint256 _value) public {\n\t\trequire(canBurn);\n\t\tBurnableToken.burn(_value);\n\t}\n\n\tfunction ownerCanBurn(bool _canBurn) onlyOwner public {\n\t\tcanBurn = _canBurn;\n\t}\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690553480156200002157600080fd5b50604051620012943803806200129483398101604090815281516020830151918301516060840151608085015160a086015160c087015160038054600160a060020a031916331790559496958601959390930193919290916000600160a060020a03881615156200009157600080fd5b60038054600160a060020a031916600160a060020a038a161790558651620000c19060049060208a019062000202565b508551620000d790600590602089019062000202565b50506006805460ff191660ff85161790556001548490620001079082640100000000620001ee810262000e8a1704565b600155600354600160a060020a03166000908152602081905260409020546200013f908264010000000062000e8a620001ee82021704565b60038054600160a060020a039081166000908152602081815260408083209590955592548451868152945192169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3821515620001c8576003805460a060020a60ff021916740100000000000000000000000000000000000000001790555b50600680549115156101000261ff001990921691909117905550620002a7945050505050565b81810182811015620001fc57fe5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024557805160ff191683800117855562000275565b8280016001018555821562000275579182015b828111156200027557825182559160200191906001019062000258565b506200028392915062000287565b5090565b620002a491905b808211156200028357600081556001016200028e565b90565b610fdd80620002b76000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012157806306fdde031461014a578063095ea7b3146101d457806318160ddd146101f857806323b872dd1461021f5780632fbc835314610249578063313ce5671461026557806340c10f191461029057806342966c68146102b457806348c44712146102cc5780634bd22766146102f6578063661884631461031a57806370a082311461033e5780637d64bcb41461035f5780638da5cb5b1461037457806395d89b41146103a5578063a9059cbb146103ba578063c1eb1840146103de578063d73dd623146103f3578063dd62ed3e14610417578063f2fde38b1461043e575b600080fd5b34801561012d57600080fd5b5061013661045f565b604080519115158252519081900360200190f35b34801561015657600080fd5b5061015f610480565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610199578181015183820152602001610181565b50505050905090810190601f1680156101c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e057600080fd5b50610136600160a060020a036004351660243561050e565b34801561020457600080fd5b5061020d610574565b60408051918252519081900360200190f35b34801561022b57600080fd5b50610136600160a060020a036004358116906024351660443561057a565b34801561025557600080fd5b5061026360043515156106df565b005b34801561027157600080fd5b5061027a610710565b6040805160ff9092168252519081900360200190f35b34801561029c57600080fd5b50610136600160a060020a0360043516602435610719565b3480156102c057600080fd5b50610263600435610822565b3480156102d857600080fd5b50610263600160a060020a0360043581169060243516604435610844565b34801561030257600080fd5b50610263600160a060020a0360043516602435610977565b34801561032657600080fd5b50610136600160a060020a0360043516602435610a27565b34801561034a57600080fd5b5061020d600160a060020a0360043516610b17565b34801561036b57600080fd5b50610136610b32565b34801561038057600080fd5b50610389610bd8565b60408051600160a060020a039092168252519081900360200190f35b3480156103b157600080fd5b5061015f610be7565b3480156103c657600080fd5b50610136600160a060020a0360043516602435610c42565b3480156103ea57600080fd5b50610136610d11565b3480156103ff57600080fd5b50610136600160a060020a0360043516602435610d1f565b34801561042357600080fd5b5061020d600160a060020a0360043581169060243516610db8565b34801561044a57600080fd5b50610263600160a060020a0360043516610de3565b60035474010000000000000000000000000000000000000000900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561059157600080fd5b600160a060020a0384166000908152602081905260409020548211156105b657600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156105e657600080fd5b600160a060020a03841660009081526020819052604090205461060f908363ffffffff610e7816565b600160a060020a038086166000908152602081905260408082209390935590851681522054610644908363ffffffff610e8a16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610686908363ffffffff610e7816565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020610f92833981519152929181900390910190a35060019392505050565b600354600160a060020a031633146106f657600080fd5b600680549115156101000261ff0019909216919091179055565b60065460ff1681565b600354600090600160a060020a0316331461073357600080fd5b60035474010000000000000000000000000000000000000000900460ff161561075b57600080fd5b60015461076e908363ffffffff610e8a16565b600155600160a060020a03831660009081526020819052604090205461079a908363ffffffff610e8a16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020610f928339815191529181900360200190a350600192915050565b600654610100900460ff16151561083857600080fd5b61084181610e9d565b50565b6003546000908190600160a060020a0316331461086057600080fd5b600160a060020a038416151561087557600080fd5b6000853b1191508161088657600080fd5b50604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151869283169163a9059cbb9160448083019260209291908290030181600087803b1580156108f357600080fd5b505af1158015610907573d6000803e3d6000fd5b505050506040513d602081101561091d57600080fd5b5051151561092757fe5b600354604080518581529051600160a060020a0380891693888216939116917fa1e4855d49b75f7254460c3e0a5572cde83f71d659655bcef5319969068d5a639181900360200190a45050505050565b600354600160a060020a0316331461098e57600080fd5b600160a060020a03821615156109a357600080fd5b30318111156109b157600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015156109de57fe5b600354604080518381529051600160a060020a038086169316917f94c0c9648f44e27ff77f68e457219cb803cf319b29a83403156a3ef21747101e919081900360200190a35050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610a7c57336000908152600260209081526040808320600160a060020a0388168452909152812055610ab1565b610a8c818463ffffffff610e7816565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600090600160a060020a03163314610b4c57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610b7457600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105065780601f106104db57610100808354040283529160200191610506565b6000600160a060020a0383161515610c5957600080fd5b33600090815260208190526040902054821115610c7557600080fd5b33600090815260208190526040902054610c95908363ffffffff610e7816565b3360009081526020819052604080822092909255600160a060020a03851681522054610cc7908363ffffffff610e8a16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020610f928339815191529281900390910190a350600192915050565b600654610100900460ff1681565b336000908152600260209081526040808320600160a060020a0386168452909152812054610d53908363ffffffff610e8a16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610dfa57600080fd5b600160a060020a0381161515610e0f57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610e8457fe5b50900390565b81810182811015610e9757fe5b92915050565b6108413382600160a060020a038216600090815260208190526040902054811115610ec757600080fd5b600160a060020a038216600090815260208190526040902054610ef0908263ffffffff610e7816565b600160a060020a038316600090815260208190526040902055600154610f1c908263ffffffff610e7816565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610f928339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058209ab58b5fbca2842fee4038dcb21fdbabb5846bef2d65e486bf8077e2708d754b0029000000000000000000000000025bf0b26099c10b3f90f3a040703064faf84ac200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c436f6d706c6578546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034350540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000025bf0b26099c10b3f90f3a040703064faf84ac200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c436f6d706c6578546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034350540000000000000000000000000000000000000000000000000000000000"
}