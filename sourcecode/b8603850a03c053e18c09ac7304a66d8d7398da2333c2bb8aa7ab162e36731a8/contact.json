{
  "address": "0x1b1243b197c9c090558fa0a7257d1b98aecaeaf7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CZRSnowLocker",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-05\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface token { function transferFrom(address _from, address _to, uint256 _value) public returns (bool success); }\n\ncontract CZRSnowLocker is owned {\n    \n    address public tokenAddr;\n    bool public isPaused = false;\n\n    event Lock(address indexed addr, uint index, uint amount);\n    event Unlock(address indexed addr, uint index, uint lockAmount, uint rewardAmount);\n    \n    struct LockRecord {\n        uint time;\n        uint amount;\n        bool completed;\n    }\n    \n    mapping(address => LockRecord[]) public lockRecordMap;\n    \n    function CZRSnowLocker(address _tokenAddr) public {\n        tokenAddr = _tokenAddr;\n    }\n    \n    function start() onlyOwner public {\n        isPaused = false;\n    }\n    \n    function pause() onlyOwner public {\n        isPaused = true;\n    }\n\n    /// @notice impl tokenRecipient interface\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\n        require(_token == tokenAddr);\n        require(_extraData.length == 0);\n        _lock(_from, _value);\n    }\n\n    function _lock(address addr, uint amount) internal {\n        require(!isPaused);\n        require(amount >= 100 ether);\n\n        token t = token(tokenAddr);\n        t.transferFrom(addr, owner, amount);\n\n        lockRecordMap[addr].push(LockRecord(now, amount, false));\n        \n        uint index = lockRecordMap[addr].length - 1;\n        Lock(addr, index, amount);\n    }\n    \n    /// @notice withdraw CZR\n    /// @param addr address to withdraw\n    /// @param index deposit index\n    function unlock(address addr, uint index) public {\n        require(addr == msg.sender);\n        \n        var lock = lockRecordMap[addr][index];\n        require(lock.amount > 0 && !lock.completed);\n\n        var during = now - lock.time;\n        var reward = _calcReward(during, lock.amount);\n\n        token t = token(tokenAddr);\n        t.transferFrom(owner, addr, lock.amount + reward);\n\n        lock.completed = true;\n\n        Unlock(addr, index, lock.amount, reward);        \n    }\n\n    function _calcReward(uint during, uint amount) internal view returns (uint) {\n        uint n = during / 90 days;\n        if (n == 0)\n             return 0;\n        if (n == 1)\n            return amount * 2 / 100;\n        if (n == 2)\n            return amount * 5 / 100;\n        if (n == 3)\n            return amount * 8 / 100;\n        return amount * 12 / 100;\n    }\n}",
  "bytecode": "60606040526001805460a060020a60ff0219169055341561001f57600080fd5b6040516020806108638339810160405280805160008054600160a060020a03338116600160a060020a0319928316179092556001805492909316911617905550506107f48061006f6000396000f30060606040526004361061007f5763ffffffff60e060020a6000350416635fbe4d1d81146100845780637eee288d146100b35780638456cb59146100d75780638da5cb5b146100ea5780638f4ffcb1146100fd578063b187bd2614610169578063be9a655514610190578063cee1c864146101a3578063f2fde38b146101eb575b600080fd5b341561008f57600080fd5b61009761020a565b604051600160a060020a03909116815260200160405180910390f35b34156100be57600080fd5b6100d5600160a060020a0360043516602435610219565b005b34156100e257600080fd5b6100d56103bd565b34156100f557600080fd5b61009761040f565b341561010857600080fd5b6100d560048035600160a060020a0390811691602480359260443516919060849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061041e95505050505050565b341561017457600080fd5b61017c610454565b604051901515815260200160405180910390f35b341561019b57600080fd5b6100d5610475565b34156101ae57600080fd5b6101c5600160a060020a03600435166024356104b0565b604051928352602083019190915215156040808301919091526060909101905180910390f35b34156101f657600080fd5b6100d5600160a060020a03600435166104f4565b600154600160a060020a031681565b60008060008033600160a060020a031686600160a060020a031614151561023f57600080fd5b600160a060020a038616600090815260026020526040902080548690811061026357fe5b906000526020600020906003020193506000846001015411801561028c5750600284015460ff16155b151561029757600080fd5b8360000154420392506102ae83856001015461053e565b600180546000805492880154939550600160a060020a03918216945084936323b872dd93909216918a91908701906040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561033257600080fd5b6102c65a03f1151561034357600080fd5b5050506040518051505060028401805460ff19166001908117909155840154600160a060020a038716907fa0a01f5aa68fdaf8aa6fb537fe6078fa09dcde567f2634e239f990716cb335b09087908560405180848152602001838152602001828152602001935050505060405180910390a2505050505050565b60005433600160a060020a039081169116146103d857600080fd5b6001805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600054600160a060020a031681565b600154600160a060020a0383811691161461043857600080fd5b80511561044457600080fd5b61044e84846105a7565b50505050565b60015474010000000000000000000000000000000000000000900460ff1681565b60005433600160a060020a0390811691161461049057600080fd5b6001805474ff000000000000000000000000000000000000000019169055565b6002602052816000526040600020818154811015156104cb57fe5b600091825260209091206003909102018054600182015460029092015490935090915060ff1683565b60005433600160a060020a0390811691161461050f57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006276a700830480151561055657600091506105a0565b806001141561056e576064600284025b0491506105a0565b806002141561058257606460058402610566565b806003141561059657606460088402610566565b6064600c84020491505b5092915050565b600154600090819074010000000000000000000000000000000000000000900460ff16156105d457600080fd5b68056bc75e2d631000008310156105ea57600080fd5b60015460008054600160a060020a03928316945084926323b872dd9288929091169087906040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561066457600080fd5b6102c65a03f1151561067557600080fd5b50505060405180515050600160a060020a03841660009081526002602052604090208054600181016106a78382610764565b916000526020600020906003020160006060604051908101604090815242825260208201889052600090820152919050815181556020820151816001015560408201516002918201805460ff1916911515919091179055600160a060020a03871660008181526020929092526040918290205460001901945092507f49eaf4942f1237055eb4cfa5f31c9dfe50d5b4ade01e021f7de8be2fbbde557b9150839086905191825260208201526040908101905180910390a250505050565b815481835581811511610790576003028160030283600052602060002091820191016107909190610795565b505050565b6107c591905b808211156107c1576000808255600182015560028101805460ff1916905560030161079b565b5090565b905600a165627a7a72305820e6ad4547eaf43f1ca14a6c8cf7dad83d0f941433ef8b04075bd3f06343a1989200290000000000000000000000000223fc70574214f65813fe336d870ac47e147fae",
  "constructorArguments": "0000000000000000000000000223fc70574214f65813fe336d870ac47e147fae"
}