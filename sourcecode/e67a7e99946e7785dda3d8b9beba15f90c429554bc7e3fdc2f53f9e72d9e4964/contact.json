{
  "address": "0x562952c749d05dca4cd004489a153c7ee7e58240",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PallyCoin",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-19\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n/**\n * Pausable token\n *\n * Simple ERC20 Token example, with pausable token creation\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n}\n\n\n// @title The PallyCoin\n/// @author Manoj Patidar\ncontract PallyCoin is PausableToken {\n   using SafeMath for uint256;\n\n   string public constant name = 'PallyCoin';\n\n   string public constant symbol = 'PAL';\n\n   uint8 public constant decimals = 18;\n\n   uint256 public  totalSupply = 100e24; // 100M tokens with 18 decimals\n\n   bool public remainingTokenBurnt = false;\n\n   // The tokens already used for the presale buyers\n   uint256 public tokensDistributedPresale = 0;\n\n   // The tokens already used for the ICO buyers\n   uint256 public tokensDistributedCrowdsale = 0;\n\n   // The address of the crowdsale\n   address public crowdsale;\n\n   // The initial supply used for platform and development as specified in the whitepaper\n   uint256 public initialSupply = 40e24;\n\n   // The maximum amount of tokens for the presale investors\n   uint256 public limitPresale = 10e24;\n\n   // The maximum amount of tokens sold in the crowdsale\n   uint256 public limitCrowdsale = 50e24;\n\n   /// @notice Only allows the execution of the function if it's comming from crowdsale\n   modifier onlyCrowdsale() {\n      require(msg.sender == crowdsale);\n      _;\n   }\n\n   // When someone refunds tokens\n   event RefundedTokens(address indexed user, uint256 tokens);\n\n   /// @notice Constructor used to set the platform & development tokens. This is\n   /// The 20% + 20% of the 100 M tokens used for platform and development team.\n   /// The owner, msg.sender, is able to do allowance for other contracts. Remember\n   /// to use `transferFrom()` if you're allowed\n   function PallyCoin() {\n      balances[msg.sender] = initialSupply; // 40M tokens wei\n   }\n\n   /// @notice Function to set the crowdsale smart contract's address only by the owner of this token\n   /// @param _crowdsale The address that will be used\n   function setCrowdsaleAddress(address _crowdsale) external onlyOwner whenNotPaused {\n      require(_crowdsale != address(0));\n\n      crowdsale = _crowdsale;\n   }\n\n   /// @notice Distributes the presale tokens. Only the owner can do this\n   /// @param _buyer The address of the buyer\n   /// @param tokens The amount of tokens corresponding to that buyer\n   function distributePresaleTokens(address _buyer, uint tokens) external onlyOwner whenNotPaused {\n      require(_buyer != address(0));\n      require(tokens > 0 && tokens <= limitPresale);\n\n      // Check that the limit of 10M presale tokens hasn't been met yet\n      require(tokensDistributedPresale < limitPresale);\n      require(tokensDistributedPresale.add(tokens) < limitPresale);\n\n      tokensDistributedPresale = tokensDistributedPresale.add(tokens);\n      balances[_buyer] = balances[_buyer].add(tokens);\n   }\n\n   /// @notice Distributes the ICO tokens. Only the crowdsale address can execute this\n   /// @param _buyer The buyer address\n   /// @param tokens The amount of tokens to send to that address\n   function distributeICOTokens(address _buyer, uint tokens) external onlyCrowdsale whenNotPaused {\n      require(_buyer != address(0));\n      require(tokens > 0);\n\n      // Check that the limit of 50M ICO tokens hasn't been met yet\n      require(tokensDistributedCrowdsale < limitCrowdsale);\n      require(tokensDistributedCrowdsale.add(tokens) <= limitCrowdsale);\n\n      tokensDistributedCrowdsale = tokensDistributedCrowdsale.add(tokens);\n      balances[_buyer] = balances[_buyer].add(tokens);\n   }\n\n   /// @notice Deletes the amount of tokens refunded from that buyer balance\n   /// @param _buyer The buyer that wants the refund\n   /// @param tokens The tokens to return\n   function refundTokens(address _buyer, uint256 tokens) external onlyCrowdsale whenNotPaused {\n      require(_buyer != address(0));\n      require(tokens > 0);\n      require(balances[_buyer] >= tokens);\n\n      balances[_buyer] = balances[_buyer].sub(tokens);\n      RefundedTokens(_buyer, tokens);\n   }\n\n   /// @notice Burn the amount of tokens remaining after ICO ends\n   function burnTokens() external onlyCrowdsale whenNotPaused {\n      \n      uint256 remainingICOToken = limitCrowdsale.sub(tokensDistributedCrowdsale);\n      if(remainingICOToken > 0 && !remainingTokenBurnt) {\n      remainingTokenBurnt = true;    \n      limitCrowdsale = limitCrowdsale.sub(remainingICOToken);  \n      totalSupply = totalSupply.sub(remainingICOToken);\n      }\n   }\n}",
  "bytecode": "60606040526000600360146101000a81548160ff0219169083151502179055506a52b7d2dcc80cd2e40000006004556000600560006101000a81548160ff021916908315150217905550600060065560006007556a21165458500521280000006009556a084595161401484a000000600a556a295be96e64066972000000600b55341561008b57600080fd5b5b5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600954600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b611a8a806101266000396000f30060606040523615610152576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630684c12b1461015757806306fdde031461019957806308003f7814610228578063095ea7b31461023d578063135859c01461029757806318160ddd146102d95780631f35bc401461030257806323b872dd1461033b578063313ce567146103b4578063378dc3dc146103e35780633f4ba83a1461040c578063549c6bbb146104395780635c975abb1461047b57806370a08231146104a85780638456cb59146104f55780638da5cb5b1461052257806395d89b41146105775780639c1e03a0146106065780639d4b12391461065b578063a9059cbb14610684578063b489c597146106de578063c906c87314610707578063cb2fe52014610730578063dd62ed3e1461075d578063ed17dab7146107c9578063f2fde38b146107f2575b600080fd5b341561016257600080fd5b610197600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061082b565b005b34156101a457600080fd5b6101ac6109e9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ed5780820151818401525b6020810190506101d1565b50505050905090810190601f16801561021a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023357600080fd5b61023b610a22565b005b341561024857600080fd5b61027d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b2f565b604051808215151515815260200191505060405180910390f35b34156102a257600080fd5b6102d7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cb7565b005b34156102e457600080fd5b6102ec610e68565b6040518082815260200191505060405180910390f35b341561030d57600080fd5b610339600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e6e565b005b341561034657600080fd5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f69565b604051808215151515815260200191505060405180910390f35b34156103bf57600080fd5b6103c7610f9d565b604051808260ff1660ff16815260200191505060405180910390f35b34156103ee57600080fd5b6103f6610fa2565b6040518082815260200191505060405180910390f35b341561041757600080fd5b61041f610fa8565b604051808215151515815260200191505060405180910390f35b341561044457600080fd5b610479600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611072565b005b341561048657600080fd5b61048e61126d565b604051808215151515815260200191505060405180910390f35b34156104b357600080fd5b6104df600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611280565b6040518082815260200191505060405180910390f35b341561050057600080fd5b6105086112ca565b604051808215151515815260200191505060405180910390f35b341561052d57600080fd5b610535611395565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561058257600080fd5b61058a6113bb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105cb5780820151818401525b6020810190506105af565b50505050905090810190601f1680156105f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561061157600080fd5b6106196113f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066657600080fd5b61066e61141a565b6040518082815260200191505060405180910390f35b341561068f57600080fd5b6106c4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611420565b604051808215151515815260200191505060405180910390f35b34156106e957600080fd5b6106f1611452565b6040518082815260200191505060405180910390f35b341561071257600080fd5b61071a611458565b6040518082815260200191505060405180910390f35b341561073b57600080fd5b61074361145e565b604051808215151515815260200191505060405180910390f35b341561076857600080fd5b6107b3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611471565b6040518082815260200191505060405180910390f35b34156107d457600080fd5b6107dc6114f9565b6040518082815260200191505060405180910390f35b34156107fd57600080fd5b610829600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114ff565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561088757600080fd5b600360149054906101000a900460ff161515156108a357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156108df57600080fd5b6000811180156108f15750600a548111155b15156108fc57600080fd5b600a5460065410151561090e57600080fd5b600a54610926826006546115d890919063ffffffff16565b10151561093257600080fd5b610947816006546115d890919063ffffffff16565b60068190555061099f81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115d890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b5050565b6040805190810160405280600981526020017f50616c6c79436f696e000000000000000000000000000000000000000000000081525081565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8057600080fd5b600360149054906101000a900460ff16151515610a9c57600080fd5b610ab3600754600b546115f790919063ffffffff16565b9050600081118015610ad25750600560009054906101000a900460ff16155b15610b29576001600560006101000a81548160ff021916908315150217905550610b0781600b546115f790919063ffffffff16565b600b81905550610b22816004546115f790919063ffffffff16565b6004819055505b5b5b5b50565b600080821480610bbb57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610bc657600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d1357600080fd5b600360149054906101000a900460ff16151515610d2f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610d6b57600080fd5b600081111515610d7a57600080fd5b600b54600754101515610d8c57600080fd5b600b54610da4826007546115d890919063ffffffff16565b11151515610db157600080fd5b610dc6816007546115d890919063ffffffff16565b600781905550610e1e81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115d890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b5050565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eca57600080fd5b600360149054906101000a900460ff16151515610ee657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f2257600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b6000600360149054906101000a900460ff16151515610f8757600080fd5b610f92848484611611565b90505b5b9392505050565b601281565b60095481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561100657600080fd5b600360149054906101000a900460ff16151561102157600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1600190505b5b5b90565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110ce57600080fd5b600360149054906101000a900460ff161515156110ea57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561112657600080fd5b60008111151561113557600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561118357600080fd5b6111d581600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f790919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f8c4218156c3abbdcecec1af68f6ed7bf3e2560a820b840c84e350d9a0adeea1b826040518082815260200191505060405180910390a25b5b5b5050565b600360149054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132857600080fd5b600360149054906101000a900460ff1615151561134457600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1600190505b5b5b90565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f50414c000000000000000000000000000000000000000000000000000000000081525081565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b6000600360149054906101000a900460ff1615151561143e57600080fd5b61144883836118c2565b90505b5b92915050565b600a5481565b600b5481565b600560009054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60065481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561155b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156115d35780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b60008082840190508381101515156115ec57fe5b8091505b5092915050565b600082821115151561160557fe5b81830390505b92915050565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506116e583600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115d890919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061177a83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f790919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117d083826115f790919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b509392505050565b600061191682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119ab82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115d890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b929150505600a165627a7a72305820de7a9ebc3ce4f3af978c47f1cf2663408cc9cf4e5d884d9c079f0684b734dd530029"
}