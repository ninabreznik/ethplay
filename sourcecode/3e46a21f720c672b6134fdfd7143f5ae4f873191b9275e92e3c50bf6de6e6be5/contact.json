{
  "address": "0x9a2f5acc73abca5519689db535c753e4cdee96dc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GBECrowdsale",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-24\n*/\n\npragma solidity ^0.4.23;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.transfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol\n\n/**\n * @title PostDeliveryCrowdsale\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\n */\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public balances;\n\n  /**\n   * @dev Withdraw tokens only after crowdsale ends.\n   */\n  function withdrawTokens() public {\n    require(hasClosed());\n    uint256 amount = balances[msg.sender];\n    require(amount > 0);\n    balances[msg.sender] = 0;\n    _deliverTokens(msg.sender, amount);\n  }\n\n  /**\n   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Amount of tokens purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasClosed());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/utils/RefundVault.sol\n\n/**\n * @title RefundVault\n * @dev This contract is used for storing funds while a crowdsale\n * is in progress. Supports refunding the money if crowdsale fails,\n * and forwarding it if crowdsale is successful.\n */\ncontract RefundVault is Ownable {\n  using SafeMath for uint256;\n\n  enum State { Active, Refunding, Closed }\n\n  mapping (address => uint256) public deposited;\n  address public wallet;\n  State public state;\n\n  event Closed();\n  event RefundsEnabled();\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\n\n  /**\n   * @param _wallet Vault address\n   */\n  constructor(address _wallet) public {\n    require(_wallet != address(0));\n    wallet = _wallet;\n    state = State.Active;\n  }\n\n  /**\n   * @param investor Investor address\n   */\n  function deposit(address investor) onlyOwner public payable {\n    require(state == State.Active);\n    deposited[investor] = deposited[investor].add(msg.value);\n  }\n\n  function close() onlyOwner public {\n    require(state == State.Active);\n    state = State.Closed;\n    emit Closed();\n    wallet.transfer(address(this).balance);\n  }\n\n  function enableRefunds() onlyOwner public {\n    require(state == State.Active);\n    state = State.Refunding;\n    emit RefundsEnabled();\n  }\n\n  /**\n   * @param investor Investor address\n   */\n  function refund(address investor) public {\n    require(state == State.Refunding);\n    uint256 depositedValue = deposited[investor];\n    deposited[investor] = 0;\n    investor.transfer(depositedValue);\n    emit Refunded(investor, depositedValue);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol\n\n/**\n * @title RefundableCrowdsale\n * @dev Extension of Crowdsale contract that adds a funding goal, and\n * the possibility of users getting a refund if goal is not met.\n * Uses a RefundVault as the crowdsale's vault.\n */\ncontract RefundableCrowdsale is FinalizableCrowdsale {\n  using SafeMath for uint256;\n\n  // minimum amount of funds to be raised in weis\n  uint256 public goal;\n\n  // refund vault used to hold funds while crowdsale is running\n  RefundVault public vault;\n\n  /**\n   * @dev Constructor, creates RefundVault.\n   * @param _goal Funding goal\n   */\n  constructor(uint256 _goal) public {\n    require(_goal > 0);\n    vault = new RefundVault(wallet);\n    goal = _goal;\n  }\n\n  /**\n   * @dev Investors can claim refunds here if crowdsale is unsuccessful\n   */\n  function claimRefund() public {\n    require(isFinalized);\n    require(!goalReached());\n\n    vault.refund(msg.sender);\n  }\n\n  /**\n   * @dev Checks whether funding goal was reached.\n   * @return Whether funding goal was reached\n   */\n  function goalReached() public view returns (bool) {\n    return weiRaised >= goal;\n  }\n\n  /**\n   * @dev vault finalization task, called when owner calls finalize()\n   */\n  function finalization() internal {\n    if (goalReached()) {\n      vault.close();\n    } else {\n      vault.enableRefunds();\n    }\n\n    super.finalization();\n  }\n\n  /**\n   * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n   */\n  function _forwardFunds() internal {\n    vault.deposit.value(msg.value)(msg.sender);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\n\n/**\n * @title MintedCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n * Token ownership should be transferred to MintedCrowdsale for minting.\n */\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  /**\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n   * @param _cap Max amount of wei to be contributed\n   */\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return weiRaised >= cap;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    require(weiRaised.add(_weiAmount) <= cap);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/IndividuallyCappedCrowdsale.sol\n\n/**\n * @title IndividuallyCappedCrowdsale\n * @dev Crowdsale with per-user caps.\n */\ncontract IndividuallyCappedCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public contributions;\n  mapping(address => uint256) public caps;\n\n  /**\n   * @dev Sets a specific user's maximum contribution.\n   * @param _beneficiary Address to be capped\n   * @param _cap Wei limit for individual contribution\n   */\n  function setUserCap(address _beneficiary, uint256 _cap) external onlyOwner {\n    caps[_beneficiary] = _cap;\n  }\n\n  /**\n   * @dev Sets a group of users' maximum contribution.\n   * @param _beneficiaries List of addresses to be capped\n   * @param _cap Wei limit for individual contribution\n   */\n  function setGroupCap(\n    address[] _beneficiaries,\n    uint256 _cap\n  )\n    external\n    onlyOwner\n  {\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n      caps[_beneficiaries[i]] = _cap;\n    }\n  }\n\n  /**\n   * @dev Returns the cap of a specific user.\n   * @param _beneficiary Address whose cap is to be checked\n   * @return Current cap for individual user\n   */\n  function getUserCap(address _beneficiary) public view returns (uint256) {\n    return caps[_beneficiary];\n  }\n\n  /**\n   * @dev Returns the amount contributed so far by a sepecific user.\n   * @param _beneficiary Address of contributor\n   * @return User contribution so far\n   */\n  function getUserContribution(address _beneficiary)\n    public view returns (uint256)\n  {\n    return contributions[_beneficiary];\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the user's funding cap.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    require(contributions[_beneficiary].add(_weiAmount) <= caps[_beneficiary]);\n  }\n\n  /**\n   * @dev Extend parent behavior to update user contributions\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._updatePurchasingState(_beneficiary, _weiAmount);\n    contributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol\n\n/**\n * @title WhitelistedCrowdsale\n * @dev Crowdsale in which only whitelisted users can contribute.\n */\ncontract WhitelistedCrowdsale is Crowdsale, Ownable {\n\n  mapping(address => bool) public whitelist;\n\n  /**\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n   */\n  modifier isWhitelisted(address _beneficiary) {\n    require(whitelist[_beneficiary]);\n    _;\n  }\n\n  /**\n   * @dev Adds single address to whitelist.\n   * @param _beneficiary Address to be added to the whitelist\n   */\n  function addToWhitelist(address _beneficiary) external onlyOwner {\n    whitelist[_beneficiary] = true;\n  }\n\n  /**\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n   * @param _beneficiaries Addresses to be added to the whitelist\n   */\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n      whitelist[_beneficiaries[i]] = true;\n    }\n  }\n\n  /**\n   * @dev Removes single address from whitelist.\n   * @param _beneficiary Address to be removed to the whitelist\n   */\n  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n    whitelist[_beneficiary] = false;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n   * @param _beneficiary Token beneficiary\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    isWhitelisted(_beneficiary)\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n// File: contracts/GBECrowdsale.sol\n\n/*\n * @title GBECrowdsale\n * @dev The crowdsale that will gain ownership and distrubute\n * the token\n * @param _rate Rate in the public sale\n * @param _wallet The address to which the funds will be forwarded to after the crowdsale ends\n * @param _cap The hard cap\n * @param _goal The soft cap\n * @param _minimumInvestment Minimum investment allowed in public sale\n * @param _openingTime The opening time as a unix timestamp\n * @param _closingTime The closing time as a unix timestamp\n * @param _token The address of the mintable token to be deployed\n */\ncontract GBECrowdsale is CappedCrowdsale, RefundableCrowdsale, MintedCrowdsale, WhitelistedCrowdsale { // solium-disable-line max-len\n\n  uint256 public minimumInvestment;\n  uint256 public initialRate;\n\n  constructor(\n    uint256 _rate,\n    address _wallet,\n    uint256 _cap,\n    uint256 _goal,\n    uint256 _minimumInvestment,\n    uint256 _openingTime,\n    uint256 _closingTime,\n    MintableToken _token\n  )\n    public\n    Crowdsale(_rate, _wallet, _token)\n    CappedCrowdsale(_cap)\n    TimedCrowdsale(_openingTime, _closingTime)\n    RefundableCrowdsale(_goal)\n  {\n    minimumInvestment = _minimumInvestment;\n    initialRate = _rate;\n  }\n\n/*\n * @title pushPrivateInvestment\n * @dev The function tracks a private investment made in currencies other than ETH.\n * For a _weiAmount calculated based on the ETH value of some other currency, a _tokenAmount\n * amount of tokens will be minted post crowdsale for the _beneficiary\n * @param _weiAmount The value in wei calculated based on the value of the external currency\n * @param _tokenAmount The amount to be minted\n * @param _beneficiary The beneficiary of the tokens\n */\n\n  function pushPrivateInvestment(uint256 _weiAmount, uint256 _tokenAmount, address _beneficiary) external onlyOwner {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp <= closingTime);\n    require(_weiAmount >= minimumInvestment, \"Wei amount lower than minimum investment\");\n\n    require(_beneficiary != address(0));\n    require(weiRaised.add(_weiAmount) <= cap);\n\n    _deliverTokens(_beneficiary, _tokenAmount);\n\n    // Wei added based on external value \n    weiRaised = weiRaised.add(_weiAmount);\n\n    // Every user that participated in private investments is whitelisted\n    _addToWhitelist(_beneficiary);\n\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      _weiAmount,\n      _tokenAmount\n    );\n  }\n\n/*\n * @title changeRate\n * @dev The function sets the rate for exchanging ETH for tokens\n * Rate can be changed only if new rate value is greater than the old rate value\n * @param _newRate new rate value\n */\n  function changeRate(uint256 _newRate) external onlyOwner {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp <= closingTime);\n    require(_newRate >= initialRate, \"New rate must be greater than initial rate\");\n\n    rate = _newRate;\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /*\n   * @dev Validation of an incoming purchase. Use require statements \n   * to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n    require(_weiAmount != 0);\n    require(_weiAmount >= minimumInvestment, \"Wei amount lower than minimum investment\");\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n  /*\n   * @dev Add the beneficiary to the whitelist. Used internally for private\n   * investors since every private investor is automatically whitelisted.\n   * minted and can be claimed post crowdsale\n   * @param _beneficiary The address that will be whitelisted\n   */\n  function _addToWhitelist(address _beneficiary) private {\n    whitelist[_beneficiary] = true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    onlyOwner\n    canMint\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: contracts/GBEToken.sol\n\n/*\n * @title GBEToken\n * @dev Mintable ERC20 compliant token.\n */\ncontract GBEToken is CappedToken {\n\n  string public constant name = \"GBE Token\"; // solium-disable-line uppercase\n  string public constant symbol = \"GBE\"; // solium-disable-line uppercase\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\n\n  // 4 * (10 ** 6) * (10 ** 18) 4M tokens\n  uint256 public constant advisorsAmount = 4000000000000000000000000; // solium-disable-line uppercase\n  // 21 * (10 ** 6) * (10 ** 18) 21M tokens\n  uint256 public constant companyAmount = 21000000000000000000000000; // solium-disable-line uppercase\n  // 2 * (10 ** 6) * (10 ** 18) 2M tokens\n  uint256 public constant teamAmount = 2000000000000000000000000; // solium-disable-line uppercase\n\n  address public constant advisorsWallet = 0xD9fFAAd95B151D6B50df0a3770B4481cA320F530; // solium-disable-line uppercase\n  address public constant companyWallet = 0xFCcD1bD20aE0635D6AB5181cdA2c3de660f074C4; // solium-disable-line uppercase\n  address public constant teamWallet = 0x27950EcE748A9a1A1F0AA6167Cd39893e7f39819; // solium-disable-line uppercase\n\n  constructor(uint256 _cap) public CappedToken(_cap){\n    super.mint(advisorsWallet, advisorsAmount);\n    super.mint(companyWallet, companyAmount);\n    super.mint(teamWallet, teamAmount);\n  }\n}",
  "bytecode": "60806040526007805460a060020a60ff021916905534801561002057600080fd5b50604051610100806117ac83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e0909701519496939492939192909190848383888b8b866000831161007857600080fd5b600160a060020a038216151561008d57600080fd5b600160a060020a03811615156100a257600080fd5b60029290925560018054600160a060020a03928316600160a060020a0319918216179091556000805492909316911617815581116100df57600080fd5b600455428210156100ef57600080fd5b818110156100fc57600080fd5b60059190915560065560078054600160a060020a03191633600160a060020a03161790556000811161012d57600080fd5b600154600160a060020a03166101416101a3565b600160a060020a03909116815260405190819003602001906000f08015801561016e573d6000803e3d6000fd5b5060098054600160a060020a031916600160a060020a0392909216919091179055600855505050600b55505050600c556101b3565b6040516106ac8061110083390190565b610f3e806101c26000396000f3006080604052600436106101455763ffffffff60e060020a6000350416631515bc2b81146101505780632b925b25146101795780632c4e722e146101a0578063355274ea146101b557806340193883146101ca5780634042b66f146101df5780634b6753bc146101f45780634bb278f3146102095780634f9359451461021e578063521eb27314610233578063715018a61461026457806374e7493b14610279578063778d00f0146102915780637d3d6522146102b85780638ab1d681146102cd5780638c10671c146102ee5780638d4e40831461030e5780638da5cb5b146103235780639b19251a146103385780639e51051f14610359578063b5545a3c1461036e578063b7a8807c14610383578063e43252d714610398578063ec8ac4d8146103b9578063f2fde38b146103cd578063fbfa77cf146103ee578063fc0c546a14610403575b61014e33610418565b005b34801561015c57600080fd5b506101656104c5565b604080519115158252519081900360200190f35b34801561018557600080fd5b5061018e6104cd565b60408051918252519081900360200190f35b3480156101ac57600080fd5b5061018e6104d3565b3480156101c157600080fd5b5061018e6104d9565b3480156101d657600080fd5b5061018e6104df565b3480156101eb57600080fd5b5061018e6104e5565b34801561020057600080fd5b5061018e6104eb565b34801561021557600080fd5b5061014e6104f1565b34801561022a57600080fd5b506101656105af565b34801561023f57600080fd5b506102486105ba565b60408051600160a060020a039092168252519081900360200190f35b34801561027057600080fd5b5061014e6105c9565b34801561028557600080fd5b5061014e60043561063b565b34801561029d57600080fd5b5061014e600435602435600160a060020a0360443516610701565b3480156102c457600080fd5b50610165610879565b3480156102d957600080fd5b5061014e600160a060020a0360043516610884565b3480156102fa57600080fd5b5061014e60048035602481019101356108c0565b34801561031a57600080fd5b50610165610935565b34801561032f57600080fd5b50610248610956565b34801561034457600080fd5b50610165600160a060020a0360043516610965565b34801561036557600080fd5b5061018e61097a565b34801561037a57600080fd5b5061014e610980565b34801561038f57600080fd5b5061018e610a3c565b3480156103a457600080fd5b5061014e600160a060020a0360043516610a42565b61014e600160a060020a0360043516610418565b3480156103d957600080fd5b5061014e600160a060020a0360043516610a81565b3480156103fa57600080fd5b50610248610aa8565b34801561040f57600080fd5b50610248610ab7565b3460006104258383610ac6565b61042e82610b77565b600354909150610444908363ffffffff610b9416565b6003556104518382610ba1565b82600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a36104ae8383610b73565b6104b6610bab565b6104c08383610b73565b505050565b600654421190565b600b5481565b60025481565b60045481565b60085481565b60035481565b60065481565b60075433600160a060020a0390811691161461050c57600080fd5b60075474010000000000000000000000000000000000000000900460ff161561053457600080fd5b61053c6104c5565b151561054757600080fd5b61054f610c30565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a16007805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600454600354101590565b600154600160a060020a031681565b60075433600160a060020a039081169116146105e457600080fd5b600754604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26007805473ffffffffffffffffffffffffffffffffffffffff19169055565b60075433600160a060020a0390811691161461065657600080fd5b60065442111561066557600080fd5b600c548110156106fc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4e65772072617465206d7573742062652067726561746572207468616e20696e60448201527f697469616c207261746500000000000000000000000000000000000000000000606482015290519081900360840190fd5b600255565b60075433600160a060020a0390811691161461071c57600080fd5b60065442111561072b57600080fd5b600b548310156107c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f57656920616d6f756e74206c6f776572207468616e206d696e696d756d20696e60448201527f766573746d656e74000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03811615156107d757600080fd5b6004546003546107ed908563ffffffff610b9416565b11156107f857600080fd5b6108028183610d1f565b600354610815908463ffffffff610b9416565b60035561082181610a5d565b80600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188585604051808381526020018281526020019250505060405180910390a3505050565b600854600354101590565b60075433600160a060020a0390811691161461089f57600080fd5b600160a060020a03166000908152600a60205260409020805460ff19169055565b60075460009033600160a060020a039081169116146108de57600080fd5b5060005b818110156104c0576001600a60008585858181106108fc57fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790556001016108e2565b60075474010000000000000000000000000000000000000000900460ff1681565b600754600160a060020a031681565b600a6020526000908152604090205460ff1681565b600c5481565b60075474010000000000000000000000000000000000000000900460ff1615156109a957600080fd5b6109b1610879565b156109bb57600080fd5b600954604080517ffa89401a000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301529151919092169163fa89401a91602480830192600092919082900301818387803b158015610a2257600080fd5b505af1158015610a36573d6000803e3d6000fd5b50505050565b60055481565b60075433600160a060020a03908116911614610a5d57600080fd5b600160a060020a03166000908152600a60205260409020805460ff19166001179055565b60075433600160a060020a03908116911614610a9c57600080fd5b610aa581610dc8565b50565b600954600160a060020a031681565b600054600160a060020a031681565b801515610ad257600080fd5b600b54811015610b6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f57656920616d6f756e74206c6f776572207468616e206d696e696d756d20696e60448201527f766573746d656e74000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610b738282610e46565b5050565b6000610b8e60025483610e7990919063ffffffff16565b92915050565b81810182811015610b8e57fe5b610b738282610d1f565b600954604080517ff340fa01000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301529151919092169163f340fa0191349160248082019260009290919082900301818588803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b5050505050565b610c38610879565b15610cad57600960009054906101000a9004600160a060020a0316600160a060020a03166343d726d66040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610c9057600080fd5b505af1158015610ca4573d6000803e3d6000fd5b50505050610d19565b600960009054906101000a9004600160a060020a0316600160a060020a0316638c52dc416040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610d0057600080fd5b505af1158015610d14573d6000803e3d6000fd5b505050505b610d1d5b565b60008054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052915191909216926340c10f1992604480820193602093909283900390910190829087803b158015610d9157600080fd5b505af1158015610da5573d6000803e3d6000fd5b505050506040513d6020811015610dbb57600080fd5b50511515610b7357600080fd5b600160a060020a0381161515610ddd57600080fd5b600754604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382166000908152600a6020526040902054829060ff161515610e6f57600080fd5b6104c08383610ea2565b6000821515610e8a57506000610b8e565b50818102818382811515610e9a57fe5b0414610b8e57fe5b6005544210158015610eb657506006544211155b1515610ec157600080fd5b610b738282610ed08282610ef1565b600454600354610ee6908363ffffffff610b9416565b1115610b7357600080fd5b600160a060020a0382161515610f0657600080fd5b801515610b7357600080fd00a165627a7a72305820abf90415a9a75994af916ae59c14072b30abe76ce1de5e3c85121047b84538360029608060405234801561001057600080fd5b506040516020806106ac833981016040525160008054600160a060020a03191633600160a060020a03908116919091179091558116151561005057600080fd5b60028054600160a060020a031916600160a060020a03929092169190911760a060020a60ff0219169055610623806100896000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166343d726d681146100a8578063521eb273146100bf578063715018a6146100f05780638c52dc41146101055780638da5cb5b1461011a578063c19d93fb1461012f578063cb13cddb14610168578063f2fde38b1461019b578063f340fa01146101bc578063fa89401a146101d0575b600080fd5b3480156100b457600080fd5b506100bd6101f1565b005b3480156100cb57600080fd5b506100d46102cc565b60408051600160a060020a039092168252519081900360200190f35b3480156100fc57600080fd5b506100bd6102db565b34801561011157600080fd5b506100bd61034b565b34801561012657600080fd5b506100d46103d9565b34801561013b57600080fd5b506101446103e8565b6040518082600281111561015457fe5b60ff16815260200191505060405180910390f35b34801561017457600080fd5b50610189600160a060020a03600435166103f8565b60408051918252519081900360200190f35b3480156101a757600080fd5b506100bd600160a060020a036004351661040a565b6100bd600160a060020a036004351661042e565b3480156101dc57600080fd5b506100bd600160a060020a03600435166104b2565b60005433600160a060020a0390811691161461020c57600080fd5b60006002805460a060020a900460ff169081111561022657fe5b1461023057600080fd5b6002805474ff00000000000000000000000000000000000000001916740200000000000000000000000000000000000000001790556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a90600090a1600254604051600160a060020a039182169130163180156108fc02916000818181858888f193505050501580156102c9573d6000803e3d6000fd5b50565b600254600160a060020a031681565b60005433600160a060020a039081169116146102f657600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60005433600160a060020a0390811691161461036657600080fd5b60006002805460a060020a900460ff169081111561038057fe5b1461038a57600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8990600090a1565b600054600160a060020a031681565b60025460a060020a900460ff1681565b60016020526000908152604090205481565b60005433600160a060020a0390811691161461042557600080fd5b6102c981610567565b60005433600160a060020a0390811691161461044957600080fd5b60006002805460a060020a900460ff169081111561046357fe5b1461046d57600080fd5b600160a060020a038116600090815260016020526040902054610496903463ffffffff6105e416565b600160a060020a03909116600090815260016020526040902055565b600060016002805460a060020a900460ff16908111156104ce57fe5b146104d857600080fd5b50600160a060020a038116600081815260016020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610523573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651919081900360200190a25050565b600160a060020a038116151561057c57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b818101828110156105f157fe5b929150505600a165627a7a72305820a11805c918d98f81d363db0f3a57a6d98c7191589a82b18063aee6f304d5c1c8002900000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000c81f0161ce8cb005312ea12edee5b315a33a544e0000000000000000000000000000000000000000000050832286c8eedea1000000000000000000000000000000000000000000000000121672486123bd620000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000005ba95e5f000000000000000000000000000000000000000000000000000000005c537def000000000000000000000000659e824590d07c3d9946d7bd6ce10e7e10ce15ce",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000c81f0161ce8cb005312ea12edee5b315a33a544e0000000000000000000000000000000000000000000050832286c8eedea1000000000000000000000000000000000000000000000000121672486123bd620000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000005ba95e5f000000000000000000000000000000000000000000000000000000005c537def000000000000000000000000659e824590d07c3d9946d7bd6ce10e7e10ce15ce"
}