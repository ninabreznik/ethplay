{
  "address": "0x78d4858dd7ce665541e0a0f6e6e68b5da6482273",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NPCM",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-09\n*/\n\npragma solidity ^0.4.20;\n\n/*\n*\n* Incorporated the strong points of different POW{x}, best config:\n* [✓] 10% dividends for token purchase, shared among all token holders.\n* [✓] 10% dividends for token transfer, shared among all token holders.\n* [✓] 10% dividends for token selling.\n* [✓] 7% dividends is given to referrer.\n* [✓] 100 tokens to activate Masternodes.\n*\n*/\n\ncontract NPCM {\n\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    /// @dev Only people with tokens\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    /// @dev Only people with profits\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n\n    string public name = \"Noponzi Carlos Matos\";\n    string public symbol = \"NPCM\";\n    uint8 constant public decimals = 18;\n\n    /// @dev 10% dividends for token purchase\n    uint8 constant internal entryFee_ = 10;\n\n    /// @dev 10% dividends for token transfer\n    uint8 constant internal transferFee_ = 10;\n\n    /// @dev 10% dividends for token selling\n    uint8 constant internal exitFee_ = 10;\n\n    /// @dev 35% of entryFee_ (i.e. 7% dividends) is given to referrer\n    uint8 constant internal refferalFee_ = 35;\n\n    uint256 constant internal tokenPriceInitial_ = 0.00180000 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n    uint256 constant internal magnitude = 2 ** 64;\n\n    /// @dev proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 100e18;\n\n\n   /*=================================\n    =            DATASETS            =\n    ================================*/\n\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n\n    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n    function buy(address _referredBy) public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    /**\n     * @dev Fallback function to handle ethereum that was send straight to the contract\n     *  Unfortunately we cannot use a referral address this way.\n     */\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    /// @dev Converts all of caller's dividends to tokens.\n    function reinvest() onlyStronghands public {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /// @dev Alias of sell() and withdraw().\n    function exit() public {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw();\n    }\n\n    /// @dev Withdraws all of the callers earnings.\n    function withdraw() onlyStronghands public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n\n    /// @dev Liquifies tokens to ethereum.\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n\n    /**\n     * @dev Transfer tokens from the caller to a new holder.\n     *  Remember, there's a 15% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n\n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n\n        // fire event\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\n\n        // ERC20\n        return true;\n    }\n\n\n    /*=====================================\n    =      HELPERS AND CALCULATORS        =\n    =====================================*/\n\n    /**\n     * @dev Method to view the current Ethereum stored in the contract\n     *  Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance() public view returns (uint256) {\n        return this.balance;\n    }\n\n    /// @dev Retrieve the total token supply.\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    /// @dev Retrieve the tokens owned by the caller.\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * @dev Retrieve the dividends owned by the caller.\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     *  But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /// @dev Retrieve the token balance of any single address.\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /// @dev Retrieve the dividend balance of any single address.\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /// @dev Return the sell price of 1 individual token.\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Return the buy price of 1 individual token.\n    function buyPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    /// @dev Internal function to actually purchase the tokens.\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        // is the user referred by a masternode?\n        if (\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if (tokenSupply_ > 0) {\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * @dev Calculate Token price based on an amount of incoming ethereum\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial ** 2)\n                            +\n                            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                            +\n                            ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                            +\n                            (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            ) / (tokenPriceIncremental_)\n        ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    /**\n     * @dev Calculate token sell value.\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                        ) - tokenPriceIncremental_\n                    ) * (tokens_ - 1e18)\n                ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n            )\n        / 1e18);\n\n        return _etherReceived;\n    }\n\n    /// @dev This is where all your gas goes.\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "60606040526040805190810160405280601481526020017f4e6f706f6e7a69204361726c6f73204d61746f730000000000000000000000008152506000908051906020019062000051929190620000bf565b506040805190810160405280600481526020017f4e50434d00000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620000bf565b5068056bc75e2d631000006002553415620000b957600080fd5b6200016e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010257805160ff191683800117855562000133565b8280016001018555821562000133579182015b828111156200013257825182559160200191906001019062000115565b5b50905062000142919062000146565b5090565b6200016b91905b80821115620001675760008160009055506001016200014d565b5090565b90565b611905806200017e6000396000f300606060405260043610610111576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806265318b1461011f57806306fdde031461016c57806310d0ffdd146101fa57806318160ddd14610231578063226093731461025a578063313ce567146102915780633ccfd60b146102c05780634b750334146102d557806356d399e8146102fe578063688abbf7146103275780636b2f46321461036057806370a08231146103895780638620410b146103d6578063949e8acd146103ff57806395d89b4114610428578063a9059cbb146104b6578063e4849b3214610510578063e9fad8ee14610533578063f088d54714610548578063fdb5a03e1461058a575b61011c34600061059f565b50005b341561012a57600080fd5b610156600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061098d565b6040518082815260200191505060405180910390f35b341561017757600080fd5b61017f610a2f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101bf5780820151818401526020810190506101a4565b50505050905090810190601f1680156101ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020557600080fd5b61021b6004808035906020019091905050610acd565b6040518082815260200191505060405180910390f35b341561023c57600080fd5b610244610b0f565b6040518082815260200191505060405180910390f35b341561026557600080fd5b61027b6004808035906020019091905050610b19565b6040518082815260200191505060405180910390f35b341561029c57600080fd5b6102a4610b6c565b604051808260ff1660ff16815260200191505060405180910390f35b34156102cb57600080fd5b6102d3610b71565b005b34156102e057600080fd5b6102e8610d0e565b6040518082815260200191505060405180910390f35b341561030957600080fd5b610311610d77565b6040518082815260200191505060405180910390f35b341561033257600080fd5b61034a60048080351515906020019091905050610d7d565b6040518082815260200191505060405180910390f35b341561036b57600080fd5b610373610de9565b6040518082815260200191505060405180910390f35b341561039457600080fd5b6103c0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e08565b6040518082815260200191505060405180910390f35b34156103e157600080fd5b6103e9610e51565b6040518082815260200191505060405180910390f35b341561040a57600080fd5b610412610eba565b6040518082815260200191505060405180910390f35b341561043357600080fd5b61043b610ecf565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047b578082015181840152602081019050610460565b50505050905090810190601f1680156104a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c157600080fd5b6104f6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f6d565b604051808215151515815260200191505060405180910390f35b341561051b57600080fd5b6105316004808035906020019091905050611290565b005b341561053e57600080fd5b6105466114df565b005b610574600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611546565b6040518082815260200191505060405180910390f35b341561059557600080fd5b61059d611558565b005b60008060008060008060008060003397506105c86105c18c600a60ff166116cc565b6064611707565b96506105e26105db88602360ff166116cc565b6064611707565b95506105ee8787611722565b94506105fa8b88611722565b93506106058461173b565b92506801000000000000000085029150600083118015610631575060065461062f846006546117c6565b115b151561063c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141580156106a557508773ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b80156106f25750600254600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1561078857610740600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876117c6565b600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107a3565b61079285876117c6565b945068010000000000000000850291505b6000600654111561080e576107ba600654846117c6565b6006819055506006546801000000000000000086028115156107d857fe5b0460076000828254019250508190555060065468010000000000000000860281151561080057fe5b048302820382039150610816565b826006819055505b61085f600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846117c6565b600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081836007540203905080600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508973ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8d8642610952610e51565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a3829850505050505050505092915050565b600068010000000000000000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546007540203811515610a2757fe5b049050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ac55780601f10610a9a57610100808354040283529160200191610ac5565b820191906000526020600020905b815481529060010190602001808311610aa857829003601f168201915b505050505081565b600080600080610aeb610ae486600a60ff166116cc565b6064611707565b9250610af78584611722565b9150610b028261173b565b9050809350505050919050565b6000600654905090565b6000806000806006548511151515610b3057600080fd5b610b39856117e4565b9250610b53610b4c84600a60ff166116cc565b6064611707565b9150610b5f8383611722565b9050809350505050919050565b601281565b6000806000610b806001610d7d565b111515610b8c57600080fd5b339150610b996000610d7d565b9050680100000000000000008102600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054810190506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610cbc57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc826040518082815260200191505060405180910390a25050565b60008060008060006006541415610d3457633b9aca006606651728988000039350610d71565b610d45670de0b6b3a76400006117e4565b9250610d5f610d5884600a60ff166116cc565b6064611707565b9150610d6b8383611722565b90508093505b50505090565b60025481565b60008033905082610d9657610d918161098d565b610de1565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ddf8261098d565b015b915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060006006541415610e7757633b9aca006606651728988000019350610eb4565b610e88670de0b6b3a76400006117e4565b9250610ea2610e9b84600a60ff166116cc565b6064611707565b9150610eae83836117c6565b90508093505b50505090565b600080339050610ec981610e08565b91505090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f655780601f10610f3a57610100808354040283529160200191610f65565b820191906000526020600020905b815481529060010190602001808311610f4857829003601f168201915b505050505081565b600080600080600080610f7e610eba565b111515610f8a57600080fd5b339350600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548611151515610fdb57600080fd5b6000610fe76001610d7d565b1115610ff657610ff5610b71565b5b61100e61100787600a60ff166116cc565b6064611707565b925061101a8684611722565b9150611025836117e4565b905061103360065484611722565b600681905550611082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487611722565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061110e600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836117c6565b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560075402600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508160075402600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061121760075460065468010000000000000000840281151561121157fe5b046117c6565b6007819055508673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600194505050505092915050565b60008060008060008060006112a3610eba565b1115156112af57600080fd5b339550600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054871115151561130057600080fd5b86945061130c856117e4565b935061132661131f85600a60ff166116cc565b6064611707565b92506113328484611722565b915061134060065486611722565b60068190555061138f600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611722565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550680100000000000000008202856007540201905080600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600060065411156114695761146260075460065468010000000000000000860281151561145c57fe5b046117c6565b6007819055505b8573ffffffffffffffffffffffffffffffffffffffff167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e8684426114ac610e51565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a250505050505050565b600080339150600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561153a5761153981611290565b5b611542610b71565b5050565b6000611552348361059f565b50919050565b6000806000806115686001610d7d565b11151561157457600080fd5b61157e6000610d7d565b9250339150680100000000000000008302600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054830192506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061166f83600061059f565b90508173ffffffffffffffffffffffffffffffffffffffff167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b60008060008414156116e15760009150611700565b82840290508284828115156116f257fe5b041415156116fc57fe5b8091505b5092915050565b600080828481151561171557fe5b0490508091505092915050565b600082821115151561173057fe5b818303905092915050565b6000806000670de0b6b3a76400006606651728988000029150600654633b9aca006117af6117a960065486633b9aca00600202020260026006540a6002633b9aca000a02670de0b6b3a76400008a02670de0b6b3a7640000633b9aca0002600202026002890a01010161188e565b85611722565b8115156117b857fe5b040390508092505050919050565b60008082840190508381101515156117da57fe5b8091505092915050565b600080600080670de0b6b3a764000085019250670de0b6b3a7640000600654019150670de0b6b3a7640000611877670de0b6b3a76400008503633b9aca00670de0b6b3a76400008681151561183557fe5b04633b9aca000266066517289880000103026002670de0b6b3a7640000876002890a0381151561186157fe5b04633b9aca000281151561187157fe5b04611722565b81151561188057fe5b049050809350505050919050565b6000806002600184018115156118a057fe5b0490508291505b818110156118d35780915060028182858115156118c057fe5b04018115156118cb57fe5b0490506118a7565b509190505600a165627a7a723058208aecd7e23b06852d7327b695a90eed16422870f72bf9e993701e400f14b0906a0029"
}