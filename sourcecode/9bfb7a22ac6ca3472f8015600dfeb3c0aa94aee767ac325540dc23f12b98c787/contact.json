{
  "address": "0x495cb566666063ae52c0b3546d3af143a25147d1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-17\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\n//创建一个owned合约\ncontract owned {\n\n\t\t\t\t//定义一个变量\"owner\"，这个变量的类型是address，这是用于存储代币的管理者。\n\t\t\t\t//owned()类似于C++中的构造函数，功能是给owner赋值。\n        address public owner;\n\n        function owned() {\n            owner = msg.sender;\n        }\n\n\t\t\t\t//定义一个modifier(修改标志)，可以理解为函数的附属条件。\n\t\t\t\t//这个条件的内容是假设发送者不是owner（管理者），就跳出。起到一个身份鉴别的作用。\n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n\n        //实现所有权转移\n        //定义一个transferOwnership函数，这个函数是用于转移管理者的身份。\n        //注意，transferOwnership后面跟着\"onlyOwner\"。所以这个函数的前提是，执行人必须是owner。\n        function transferOwnership(address newOwner) onlyOwner {\n            owner = newOwner;\n        }\n}\n\n//创建一个ERC20代币\ncontract TokenERC20 is owned {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;  // 18 是建议的默认值\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;  // \n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Burn(address indexed from, uint256 value);\n\n    function TokenERC20(\n    \t\tuint256 initialSupply, \n    \t\tstring tokenName, \n    \t\tstring tokenSymbol,\n    \t\t//在TokenERC20中添加了地址变量centralMinter，这个变量是有输入位置的。\n    \t\taddress centralMinter\n    \t\t) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        balanceOf[msg.sender] = totalSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n        //if从句，只要输入地址不为0，拥有者就是发送者，所以这里输入什么都没关系。这个if从句，目前没看到有什么用处。\n        if(centralMinter != 0 ) owner = centralMinter;\n    }\n    \n    //代币增发\n    //代码解释:\n\t\t//第2句代码给指定目标增加代币数量；\n\t\t//第3句代码给代币总量增加相应的数目；\n\t\t//第4句和第5句代码的意义只是提醒客户端发生了这样的交易。\n\t\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, owner, mintedAmount);\n        Transfer(owner, target, mintedAmount);\n\t\t}\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "60806040526003805460ff1916601217905534801561001d57600080fd5b50604051610bba380380610bba833981016040908152815160208084015183850151606086015160008054600160a060020a03191633908117825560035460ff16600a0a8702600481905590825260058652969020959095559085018051939590949101929091610093916001918601906100dc565b5081516100a79060029060208501906100dc565b50600160a060020a038116156100d35760008054600160a060020a031916600160a060020a0383161790555b50505050610177565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011d57805160ff191683800117855561014a565b8280016001018555821561014a579182015b8281111561014a57825182559160200191906001019061012f565b5061015692915061015a565b5090565b61017491905b808211156101565760008155600101610160565b90565b610a34806101866000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c8578063313ce567146101f257806342966c681461021d57806370a082311461023557806379c650681461025657806379cc67901461027c5780638da5cb5b146102a057806395d89b41146102d1578063a9059cbb146102e6578063cae9ca511461030a578063dd62ed3e14610373578063f2fde38b1461039a575b600080fd5b3480156100eb57600080fd5b506100f46103bb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a0360043516602435610448565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b6610475565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a036004358116906024351660443561047b565b3480156101fe57600080fd5b506102076104ea565b6040805160ff9092168252519081900360200190f35b34801561022957600080fd5b5061018d6004356104f3565b34801561024157600080fd5b506101b6600160a060020a036004351661056b565b34801561026257600080fd5b5061027a600160a060020a036004351660243561057d565b005b34801561028857600080fd5b5061018d600160a060020a036004351660243561063e565b3480156102ac57600080fd5b506102b561070f565b60408051600160a060020a039092168252519081900360200190f35b3480156102dd57600080fd5b506100f461071e565b3480156102f257600080fd5b5061027a600160a060020a0360043516602435610776565b34801561031657600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261018d948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107859650505050505050565b34801561037f57600080fd5b506101b6600160a060020a036004358116906024351661089e565b3480156103a657600080fd5b5061027a600160a060020a03600435166108bb565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104405780601f1061041557610100808354040283529160200191610440565b820191906000526020600020905b81548152906001019060200180831161042357829003601f168201915b505050505081565b336000908152600660209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b600160a060020a03831660009081526006602090815260408083203384529091528120548211156104ab57600080fd5b600160a060020a03841660009081526006602090815260408083203384529091529020805483900390556104e0848484610901565b5060019392505050565b60035460ff1681565b3360009081526005602052604081205482111561050f57600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60056020526000908152604090205481565b600054600160a060020a0316331461059457600080fd5b600160a060020a03808316600090815260056020908152604080832080548601905560048054860190558254815186815291519416937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600054604080518381529051600160a060020a038086169316917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b600160a060020a03821660009081526005602052604081205482111561066357600080fd5b600160a060020a038316600090815260066020908152604080832033845290915290205482111561069357600080fd5b600160a060020a0383166000818152600560209081526040808320805487900390556006825280832033845282529182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104405780601f1061041557610100808354040283529160200191610440565b610781338383610901565b5050565b6000836107928185610448565b15610896576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b8381101561082a578181015183820152602001610812565b50505050905090810190601f1680156108575780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561087957600080fd5b505af115801561088d573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b600054600160a060020a031633146108d257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561091857600080fd5b600160a060020a03841660009081526005602052604090205482111561093d57600080fd5b600160a060020a0383166000908152600560205260409020548281011161096357600080fd5b50600160a060020a038083166000818152600560209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a03808416600090815260056020526040808220549287168252902054018114610a0257fe5b505050505600a165627a7a723058208ba2987414ab41d88cd3e91808932028e08d95219e85d79d8ed4eb3a37b545930029000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a05ba36df8467c65af2e14b624834a695e37e382000000000000000000000000000000000000000000000000000000000000000a6c6a6a204e4220434e590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c6a6a434e590000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a05ba36df8467c65af2e14b624834a695e37e382000000000000000000000000000000000000000000000000000000000000000a6c6a6a204e4220434e590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c6a6a434e590000000000000000000000000000000000000000000000000000"
}