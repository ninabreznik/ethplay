{
  "address": "0x38a811bb19665e9f4ff4061fa4b7e0cca92507ba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TRAVELToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-06\n*/\n\npragma solidity ^0.4.24;\n\n// Safe Math\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) return 0;\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n// Ownable\n\n\ncontract Ownable {\n  address public _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n\n  modifier onlyOwner() {\n    require(msg.sender == _owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// TRAVEL Token\n\ncontract TRAVELToken is ERC20Interface, Ownable {\n  using SafeMath for uint256;\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint256 private _totalSupply;\n    uint256 private _rate;\n    uint private _minPayment;\n    uint private airdropAmount;\n    uint256 private _soldTokens;\n    uint256[4] public _startDates;\n    uint256[4] public _endDates;\n    uint256[4] public _bonuses;\n   \n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n       symbol = \"TRAVEL\";\n       name = \"TRAVEL Token\";\n       decimals = 18;\n       _minPayment = 0.01 ether; //Minimal amount allowed to buy tokens\n       _soldTokens = 0; //Total number of sold tokens (excluding bonus tokens)\n\n\n      //Beginning and ending dates for ICO stages    \n        _startDates = [1539550800, 1543615200, 1546293600, 1548972000]; \n        _endDates = [1543528800, 1546207200, 1548885600, 1550181600];\n        _bonuses = [50, 30, 20, 10];\n\n       _totalSupply = 47000000 * (10 ** uint256(decimals)); \n       airdropAmount = 2000000 * (10 ** uint256(decimals));\n\n       _balances[_owner] = airdropAmount;\n       _balances[address(this)] = (_totalSupply-airdropAmount);\n\n       _rate=225000000000; //exchange rate. Will be update daily according to ETH/USD rate at coinmarketcap.com\n       _allowed[address(this)][_owner]=_totalSupply;\n       emit Transfer(address(0), _owner, airdropAmount);\n    }\n\n    \n    // Method for batch distribution of airdrop tokens.\n    function sendBatchCS(address[] _recipients, uint[] _values) external onlyOwner returns (bool) {\n        require(_recipients.length == _values.length);\n        uint senderBalance = _balances[msg.sender];\n        for (uint i = 0; i < _values.length; i++) {\n            uint value = _values[i];\n            address to = _recipients[i];\n            require(senderBalance >= value);\n            senderBalance = senderBalance - value;\n            _balances[to] += value;\n            emit Transfer(msg.sender, to, value);\n        }\n        _balances[msg.sender] = senderBalance;\n        return true;\n    }\n    \n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n\n  function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n  \n\n  function sendTokens(address from, address to, uint256 value) internal returns (bool) {\n    require(value <= _balances[from]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n\n\n// Function to burn undistributed amount of tokens after ICO is finished\n    function burn() external onlyOwner {\n      require(now >_endDates[3]);\n      _burn(address(this),_balances[address(this)]);\n    }\n\n  function _burn(address account, uint256 amount) internal {\n    require(account != 0);\n    require(amount <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n\n    emit Transfer(account, 0x0000000000000000000000000000000000000000, amount);\n  }\n\n\n  function _burnFrom(address account, uint256 amount) internal {\n    require(amount <= _allowed[account][msg.sender]);\n    require(amount <=_balances[account]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      amount);\n    _burn(account, amount);\n  }\n\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  function getRate() public view returns(uint256) {\n    return _rate;\n  }\n\n  function _setRate(uint newrate) external onlyOwner {\n    require (newrate > 0);\n    _rate = newrate;\n  }\n\n  function soldTokens() public view returns (uint256) {\n    return _soldTokens;\n  }\n\n  // Method to check current ICO stage\n\n  function currentStage() public view returns (uint256) {\n    require(now >=_startDates[0] && now <= _endDates[3]);\n    if (now >= _startDates[0] && now <= _endDates[0]) return 0;\n    if (now >= _startDates[1] && now <= _endDates[1]) return 1;\n    if (now >= _startDates[2] && now <= _endDates[2]) return 2;\n    if (now >= _startDates[3] && now <= _endDates[3]) return 3;\n  }\n\n// Show current bonus tokens percentage\n\n function currentBonus() public view returns (uint256) {\n    require(now >=_startDates[0] && now <= _endDates[3]);\n    return _bonuses[currentStage()];\n  }\n\n  function _setLastDate(uint _date) external onlyOwner returns (bool){\n    require (_date > now);\n    require (_date > _startDates[3]);\n    require (_date < 2147483647);\n    _endDates[3] = _date;\n    return true;\n  }\n\n  // Returns date of ICO finish\n  function _getLastDate() public view returns (uint256) {\n    return uint256(_endDates[3]);\n  }\n\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256 tokens, uint256 bonus) {\n    tokens = uint256(weiAmount * _rate / (10**9));\n    bonus = uint256(tokens * _bonuses[currentStage()]/100);\n    return (tokens, bonus);\n  }\n\n  function _forwardFunds(uint256 amount) external onlyOwner {\n    require (address(this).balance > 0);\n    require (amount <= address(this).balance);\n    require (amount > 0);\n    _owner.transfer(amount);\n  }\n\n  function buyTokens(address beneficiary) public payable {\n    uint256 tokens;\n    uint256 bonus;\n    uint256 weiAmount = msg.value;\n\n    _preValidatePurchase(beneficiary, weiAmount);\n\n    (tokens, bonus) = _getTokenAmount(weiAmount);\n   \n    uint256 total = tokens.add(bonus);\n\n    _soldTokens = _soldTokens.add(tokens);\n    \n    _processPurchase(beneficiary, total);\n\n    emit TokensPurchased(msg.sender, beneficiary,  weiAmount, total);\n\n  }\n\n  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n    require (now >= _startDates[0]);\n    require (now <= _endDates[3]);\n    require(beneficiary != address(0));\n    require(weiAmount >= _minPayment);\n    require (_balances[address(this)] > 0);\n  }\n\n\n  function _preICOSale(address beneficiary, uint256 tokenAmount) internal {\n    require(_soldTokens < 1000000 * (10 ** uint256(decimals)));\n    require(_soldTokens.add(tokenAmount) <= 1000000 * (10 ** uint256(decimals)));\n    sendTokens(address(this), beneficiary, tokenAmount);\n  }\n\n  function _ICOSale(address beneficiary, uint256 tokenAmount) internal {\n    require(_soldTokens < 30000000 * (10 ** uint256(decimals)));\n    require(_soldTokens.add(tokenAmount) <= 30000000 * (10 ** uint256(decimals)));\n    sendTokens(address(this), beneficiary, tokenAmount);\n  }\n\n\n  function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n    require(_balances[address(this)]>=tokenAmount);\n    if (currentStage() == 0) {\n      _preICOSale(beneficiary, tokenAmount);\n    } else {\n      _ICOSale(beneficiary, tokenAmount);\n\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getLastDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_startDates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newrate\",\"type\":\"uint256\"}],\"name\":\"_setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendBatchCS\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_endDates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"_setLastDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600681526020017f54524156454c0000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000452565b506040805190810160405280600c81526020017f54524156454c20546f6b656e000000000000000000000000000000000000000081525060029080519060200190620000ed92919062000452565b506012600360006101000a81548160ff021916908360ff160217905550662386f26fc100006006819055506000600881905550608060405190810160405280635bc3ae5063ffffffff168152602001635c01b2e063ffffffff168152602001635c2a916063ffffffff168152602001635c536fe063ffffffff1681525060099060046200017c929190620004d9565b50608060405190810160405280635c00616063ffffffff168152602001635c293fe063ffffffff168152602001635c521e6063ffffffff168152602001635c65e4e063ffffffff16815250600d906004620001d9929190620004d9565b50608060405190810160405280603260ff168152602001601e60ff168152602001601460ff168152602001600a60ff1681525060119060046200021e92919062000526565b50600360009054906101000a900460ff1660ff16600a0a6302cd29c002600481905550600360009054906101000a900460ff1660ff16600a0a621e848002600781905550600754601560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060075460045403601560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506434630b8a00600581905550600454601660003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007546040518082815260200191505060405180910390a362000598565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200049557805160ff1916838001178555620004c6565b82800160010185558215620004c6579182015b82811115620004c5578251825591602001919060010190620004a8565b5b509050620004d5919062000570565b5090565b826004810192821562000513579160200282015b8281111562000512578251829063ffffffff16905591602001919060010190620004ed565b5b50905062000522919062000570565b5090565b82600481019282156200055d579160200282015b828111156200055c578251829060ff169055916020019190600101906200053a565b5b5090506200056c919062000570565b5090565b6200059591905b808211156200059157600081600090555060010162000577565b5090565b90565b6122b280620005a86000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461015f578063095ea7b3146101ef57806318160ddd146102545780631b27e7051461027f57806323b872dd146102ac578063313ce567146103315780633b1921051461036257806344df8e701461038d5780634f1d6546146103a45780635bf5d54c146103e55780635ed9ebfc14610410578063679aefce1461043b57806370a08231146104665780638da5cb5b146104bd57806394707a951461051457806395d89b41146105415780639c1d9790146105d1578063a9059cbb1461063c578063b2bdfa7b146106a1578063c647f13b146106f8578063dc88834814610739578063dd62ed3e1461077a578063ec8ac4d8146107f1578063eca73f6414610827578063f2fde38b14610852578063fd2ecc3f14610895575b61015d336108da565b005b34801561016b57600080fd5b506101746109ac565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b4578082015181840152602081019050610199565b50505050905090810190601f1680156101e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101fb57600080fd5b5061023a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a4a565b604051808215151515815260200191505060405180910390f35b34801561026057600080fd5b50610269610b77565b6040518082815260200191505060405180910390f35b34801561028b57600080fd5b506102aa60048036038101908080359060200190929190505050610b81565b005b3480156102b857600080fd5b50610317600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ca2565b604051808215151515815260200191505060405180910390f35b34801561033d57600080fd5b50610346611062565b604051808260ff1660ff16815260200191505060405180910390f35b34801561036e57600080fd5b50610377611075565b6040518082815260200191505060405180910390f35b34801561039957600080fd5b506103a261108e565b005b3480156103b057600080fd5b506103cf60048036038101908080359060200190929190505050611153565b6040518082815260200191505060405180910390f35b3480156103f157600080fd5b506103fa61116d565b6040518082815260200191505060405180910390f35b34801561041c57600080fd5b506104256112b0565b6040518082815260200191505060405180910390f35b34801561044757600080fd5b506104506112ba565b6040518082815260200191505060405180910390f35b34801561047257600080fd5b506104a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112c4565b6040518082815260200191505060405180910390f35b3480156104c957600080fd5b506104d261130d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052057600080fd5b5061053f60048036038101908080359060200190929190505050611336565b005b34801561054d57600080fd5b506105566113aa565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561059657808201518184015260208101905061057b565b50505050905090810190601f1680156105c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105dd57600080fd5b50610622600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050611448565b604051808215151515815260200191505060405180910390f35b34801561064857600080fd5b50610687600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061167c565b604051808215151515815260200191505060405180910390f35b3480156106ad57600080fd5b506106b66118a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070457600080fd5b50610723600480360381019080803590602001909291905050506118c6565b6040518082815260200191505060405180910390f35b34801561074557600080fd5b50610764600480360381019080803590602001909291905050506118e0565b6040518082815260200191505060405180910390f35b34801561078657600080fd5b506107db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118fa565b6040518082815260200191505060405180910390f35b610825600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108da565b005b34801561083357600080fd5b5061083c611981565b6040518082815260200191505060405180910390f35b34801561085e57600080fd5b50610893600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119dd565b005b3480156108a157600080fd5b506108c060048036038101908080359060200190929190505050611a44565b604051808215151515815260200191505060405180910390f35b6000806000803491506108ed8583611aff565b6108f682611bde565b80945081955050506109118385611c2a90919063ffffffff16565b905061092884600854611c2a90919063ffffffff16565b6008819055506109388582611c4b565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a35050505050565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a425780601f10610a1757610100808354040283529160200191610a42565b820191906000526020600020905b815481529060010190602001808311610a2557829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610a8757600080fd5b81601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600454905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bdc57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631111515610c0257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16318111151515610c2857600080fd5b600081111515610c3757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c9e573d6000803e3d6000fd5b5050565b6000601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610cf257600080fd5b601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610d7d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610db957600080fd5b610e0b82601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc790919063ffffffff16565b601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ea082601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c2a90919063ffffffff16565b601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f7282601660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc790919063ffffffff16565b601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b6000600d600360048110151561108757fe5b0154905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110e957600080fd5b600d60036004811015156110f957fe5b01544211151561110857600080fd5b61115130601560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce8565b565b60098160048110151561116257fe5b016000915090505481565b60006009600060048110151561117f57fe5b015442101580156111a15750600d600360048110151561119b57fe5b01544211155b15156111ac57600080fd5b600960006004811015156111bc57fe5b015442101580156111de5750600d60006004811015156111d857fe5b01544211155b156111ec57600090506112ad565b600960016004811015156111fc57fe5b0154421015801561121e5750600d600160048110151561121857fe5b01544211155b1561122c57600190506112ad565b6009600260048110151561123c57fe5b0154421015801561125e5750600d600260048110151561125857fe5b01544211155b1561126c57600290506112ad565b6009600360048110151561127c57fe5b0154421015801561129e5750600d600360048110151561129857fe5b01544211155b156112ac57600390506112ad565b5b90565b6000600854905090565b6000600554905090565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139157600080fd5b6000811115156113a057600080fd5b8060058190555050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114405780601f1061141557610100808354040283529160200191611440565b820191906000526020600020905b81548152906001019060200180831161142357829003601f168201915b505050505081565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114ab57600080fd5b86869050898990501415156114bf57600080fd5b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549350600092505b8686905083101561162857868684818110151561151f57fe5b905060200201359150888884818110151561153657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905081841015151561156457600080fd5b818403935081601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a38280600101935050611506565b83601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001945050505050949350505050565b6000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156116cc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561170857600080fd5b61175a82601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc790919063ffffffff16565b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117ef82601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c2a90919063ffffffff16565b601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6011816004811015156118d557fe5b016000915090505481565b600d816004811015156118ef57fe5b016000915090505481565b6000601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006009600060048110151561199357fe5b015442101580156119b55750600d60036004811015156119af57fe5b01544211155b15156119c057600080fd5b60116119ca61116d565b6004811015156119d657fe5b0154905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a3857600080fd5b611a4181611e76565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aa157600080fd5b4282111515611aaf57600080fd5b60096003600481101515611abf57fe5b015482111515611ace57600080fd5b637fffffff82101515611ae057600080fd5b81600d6003600481101515611af157fe5b018190555060019050919050565b60096000600481101515611b0f57fe5b01544210151515611b1f57600080fd5b600d6003600481101515611b2f57fe5b01544211151515611b3f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611b7b57600080fd5b6006548110151515611b8c57600080fd5b6000601560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515611bda57600080fd5b5050565b600080633b9aca006005548402811515611bf457fe5b04915060646011611c0361116d565b600481101515611c0f57fe5b01548302811515611c1c57fe5b049050818191509150915091565b6000808284019050838110151515611c4157600080fd5b8091505092915050565b80601560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611c9957600080fd5b6000611ca361116d565b1415611cb857611cb38282611f70565b611cc3565b611cc28282611fe7565b5b5050565b600080838311151515611cd957600080fd5b82840390508091505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515611d0e57600080fd5b601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611d5c57600080fd5b611d7181600454611cc790919063ffffffff16565b600481905550611dc981601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc790919063ffffffff16565b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611eb257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900460ff1660ff16600a0a620f424002600854101515611f9a57600080fd5b600360009054906101000a900460ff1660ff16600a0a620f424002611fca82600854611c2a90919063ffffffff16565b11151515611fd757600080fd5b611fe2308383612060565b505050565b600360009054906101000a900460ff1660ff16600a0a6301c9c3800260085410151561201257600080fd5b600360009054906101000a900460ff1660ff16600a0a6301c9c3800261204382600854611c2a90919063ffffffff16565b1115151561205057600080fd5b61205b308383612060565b505050565b6000601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156120b057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156120ec57600080fd5b61213e82601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc790919063ffffffff16565b601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121d382601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c2a90919063ffffffff16565b601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905093925050505600a165627a7a72305820263c6182ce8f816554b3a6138a83b38b7f9f485fc0c808e83923bacefec521880029"
}