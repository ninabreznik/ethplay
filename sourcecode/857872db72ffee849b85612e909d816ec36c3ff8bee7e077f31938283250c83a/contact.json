{
  "address": "0x7df697f6825578388504264ea9e401a5d15e8934",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtfToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-22\n*/\n\npragma solidity 0.4.21;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/token/MintableTokenWithMinters.sol\n\n/**\n * @title Mintable Token with minters\n * @dev MintableToken, mintable by appointed minters\n */\ncontract MintableTokenWithMinters is MintableToken {\n\n    mapping (address => bool) public minters;\n\n    event MinterAdded(address indexed minter);\n    event MinterRemoved(address indexed minter);\n\n    /**\n    * @dev Throws if called by any account other than the minter.\n    */\n    modifier onlyMinter() {\n        require(minters[msg.sender] == true);\n        _;\n    }\n\n    /**\n    * @dev The MintableToken constructor sets the first `minter` of the contract to the owner\n    * account.\n    */\n    function MintableTokenWithMinters() public {\n        minters[owner] = true; // owner is minter\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address to send new tokens to.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) public onlyMinter canMint returns (bool) {\n        // return super.mint(_to, _amount); // not used due to onlyOwner modifier\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Allows the owner to add a new minter.\n    * @param newMinter The address to add as a minter.\n    */\n    function addMinter(address newMinter) public onlyOwner {\n        require(newMinter != address(0)); // not empty\n        require(minters[newMinter] != true); // not already a minter\n        emit MinterAdded(newMinter);\n        minters[newMinter] = true;\n    }\n\n    /**\n    * @dev Allows the owner to remove an existing minter.\n    * @param minter The address to remove as a minter.\n    */\n    function removeMinter(address minter) public onlyOwner {\n        require(minter != owner); // cannot remove owner\n        require(minters[minter] == true); // already a minter\n        emit MinterRemoved(minter);\n        delete minters[minter];\n    }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: contracts/EtfToken.sol\n\n/**\n * @title FCTF 10 Coins token\n */\ncontract EtfToken is MintableTokenWithMinters, BurnableToken {\n\n    string public constant name = \"FCTF 10 Coins\";\n    string public constant symbol = \"10COINS\";\n    uint8 public constant decimals = 8;\n\n    function EtfToken() public {\n        totalSupply_ = 0;\n    }\n}",
  "bytecode": "60606040526003805460a060020a60ff0219169055341561001f57600080fd5b60038054600160a060020a03338116600160a060020a03199092169190911791829055166000908152600460205260408120805460ff1916600190811790915555610ec68061006f6000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461011657806306fdde031461013d578063095ea7b3146101c757806318160ddd146101e957806323b872dd1461020e5780633092afd514610236578063313ce5671461025757806340c10f191461028057806342966c68146102a257806366188463146102b857806370a08231146102da5780637d64bcb4146102f95780638da5cb5b1461030c57806395d89b411461033b578063983b2d561461034e578063a9059cbb1461036d578063d73dd6231461038f578063dd62ed3e146103b1578063f2fde38b146103d6578063f46eccc4146103f5575b600080fd5b341561012157600080fd5b610129610414565b604051901515815260200160405180910390f35b341561014857600080fd5b610150610435565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018c578082015183820152602001610174565b50505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d257600080fd5b610129600160a060020a036004351660243561046c565b34156101f457600080fd5b6101fc6104d8565b60405190815260200160405180910390f35b341561021957600080fd5b610129600160a060020a03600435811690602435166044356104de565b341561024157600080fd5b610255600160a060020a036004351661064c565b005b341561026257600080fd5b61026a610703565b60405160ff909116815260200160405180910390f35b341561028b57600080fd5b610129600160a060020a0360043516602435610708565b34156102ad57600080fd5b610255600435610821565b34156102c357600080fd5b610129600160a060020a036004351660243561082e565b34156102e557600080fd5b6101fc600160a060020a0360043516610928565b341561030457600080fd5b610129610943565b341561031757600080fd5b61031f6109f0565b604051600160a060020a03909116815260200160405180910390f35b341561034657600080fd5b6101506109ff565b341561035957600080fd5b610255600160a060020a0360043516610a36565b341561037857600080fd5b610129600160a060020a0360043516602435610aeb565b341561039a57600080fd5b610129600160a060020a0360043516602435610beb565b34156103bc57600080fd5b6101fc600160a060020a0360043581169060243516610c8f565b34156103e157600080fd5b610255600160a060020a0360043516610cba565b341561040057600080fd5b610129600160a060020a0360043516610d55565b60035474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052600d81527f4643544620313020436f696e7300000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b6000600160a060020a03831615156104f557600080fd5b600160a060020a03841660009081526020819052604090205482111561051a57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561054d57600080fd5b600160a060020a038416600090815260208190526040902054610576908363ffffffff610d6a16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546105ab908363ffffffff610d7c16565b600160a060020a03808516600090815260208181526040808320949094558783168252600281528382203390931682529190915220546105f1908363ffffffff610d6a16565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610e7b8339815191529085905190815260200160405180910390a35060019392505050565b60035433600160a060020a0390811691161461066757600080fd5b600354600160a060020a038281169116141561068257600080fd5b600160a060020a03811660009081526004602052604090205460ff1615156001146106ac57600080fd5b80600160a060020a03167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a2600160a060020a03166000908152600460205260409020805460ff19169055565b600881565b600160a060020a03331660009081526004602052604081205460ff16151560011461073257600080fd5b60035474010000000000000000000000000000000000000000900460ff161561075a57600080fd5b60015461076d908363ffffffff610d7c16565b600155600160a060020a038316600090815260208190526040902054610799908363ffffffff610d7c16565b600160a060020a0384166000818152602081905260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020610e7b8339815191528460405190815260200160405180910390a350600192915050565b61082b3382610d8f565b50565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561088b57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556108c2565b61089b818463ffffffff610d6a16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60035460009033600160a060020a0390811691161461096157600080fd5b60035474010000000000000000000000000000000000000000900460ff161561098957600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600781527f3130434f494e5300000000000000000000000000000000000000000000000000602082015281565b60035433600160a060020a03908116911614610a5157600080fd5b600160a060020a0381161515610a6657600080fd5b600160a060020a03811660009081526004602052604090205460ff16151560011415610a9157600080fd5b80600160a060020a03167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a2600160a060020a03166000908152600460205260409020805460ff19166001179055565b6000600160a060020a0383161515610b0257600080fd5b600160a060020a033316600090815260208190526040902054821115610b2757600080fd5b600160a060020a033316600090815260208190526040902054610b50908363ffffffff610d6a16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610b85908363ffffffff610d7c16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a0316600080516020610e7b8339815191528460405190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610c23908363ffffffff610d7c16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610cd557600080fd5b600160a060020a0381161515610cea57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60046020526000908152604090205460ff1681565b600082821115610d7657fe5b50900390565b81810182811015610d8957fe5b92915050565b600160a060020a038216600090815260208190526040902054811115610db457600080fd5b600160a060020a038216600090815260208190526040902054610ddd908263ffffffff610d6a16565b600160a060020a038316600090815260208190526040902055600154610e09908263ffffffff610d6a16565b600155600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a26000600160a060020a038316600080516020610e7b8339815191528360405190815260200160405180910390a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058207be1daff01c5b98e71e441d2c4716b18f73383939d8f1974d77d43bd7eeea3ea0029"
}