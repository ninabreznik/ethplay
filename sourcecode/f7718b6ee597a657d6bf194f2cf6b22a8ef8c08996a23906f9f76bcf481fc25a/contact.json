{
  "address": "0xbf5ed388474dae57f2ba62badc482bced85ba763",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-26\n*/\n\npragma solidity 0.5.4;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20  {\n    function allowance(address owner, address spender)\n    public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n    internal\n    {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        require(token.approve(spender, value));\n    }\n}\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n\n\n    // The token being sold\n    ERC20 public token;\n\n    // Address where funds are collected\n    address payable public wallet;\n\n    // Amount of wei raised\n    uint256 public weiRaised;\n    uint256 public tokensSold;\n\n    uint256 public cap = 30000000 ether; //cap in tokens\n\n    mapping (uint => uint) prices;\n    mapping (address => address) referrals;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    event Finalized();\n    /**\n     * @dev Reverts if not in crowdsale time range.\n     */\n\n    constructor(address payable _wallet, address _token) public {\n        require(_wallet != address(0));\n        require(_token != address(0));\n\n        wallet = _wallet;\n        token = ERC20(_token);\n\n        prices[1] = 75000000000000000;\n        prices[2] = 105000000000000000;\n        prices[3] = 120000000000000000;\n        prices[4] = 135000000000000000;\n\n    }\n\n    // -----------------------------------------\n    // Crowdsale external interface\n    // -----------------------------------------\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     */\n    function () external payable {\n        buyTokens(msg.sender, bytesToAddress(msg.data));\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * @param _beneficiary Address performing the token purchase\n     */\n    function buyTokens(address _beneficiary, address _referrer) public payable {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(_beneficiary, weiAmount);\n\n        // calculate token amount to be created\n        uint256 tokens;\n        uint256 bonus;\n        uint256 price;\n        (tokens, bonus, price) = _getTokenAmount(weiAmount);\n\n        require(tokens >= 10 ether);\n\n        price = tokens.div(1 ether).mul(price);\n        uint256 _diff =  weiAmount.sub(price);\n\n        if (_diff > 0) {\n            weiAmount = weiAmount.sub(_diff);\n            msg.sender.transfer(_diff);\n        }\n\n\n        if (_referrer != address(0) && _referrer != _beneficiary) {\n            referrals[_beneficiary] = _referrer;\n        }\n\n        if (referrals[_beneficiary] != address(0)) {\n            uint refTokens = valueFromPercent(tokens, 1000);\n            _processPurchase(referrals[_beneficiary], refTokens);\n            tokensSold = tokensSold.add(refTokens);\n        }\n\n        tokens = tokens.add(bonus);\n\n        require(tokensSold.add(tokens) <= cap);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n        tokensSold = tokensSold.add(tokens);\n\n        _processPurchase(_beneficiary, tokens);\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n\n        _forwardFunds(weiAmount);\n    }\n\n    // -----------------------------------------\n    // Internal interface (extensible)\n    // -----------------------------------------\n\n    /**\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n     * @param _beneficiary Address performing the token purchase\n     * @param _weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n    }\n\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n     * @param _beneficiary Address performing the token purchase\n     * @param _tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n        token.safeTransfer(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n     * @param _beneficiary Address receiving the tokens\n     * @param _tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param _weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256, uint256, uint256) {\n        if (block.timestamp >= 1551387600 && block.timestamp < 1554066000) {\n            return _calculateTokens(_weiAmount, 1);\n        } else if (block.timestamp >= 1554066000 && block.timestamp < 1556658000) {\n            return _calculateTokens(_weiAmount, 2);\n        } else if (block.timestamp >= 1556658000 && block.timestamp < 1559336400) {\n            return _calculateTokens(_weiAmount, 3);\n        } else if (block.timestamp >= 1559336400 && block.timestamp < 1561928400) {\n            return _calculateTokens(_weiAmount, 4);\n        } else return (0,0,0);\n\n    }\n\n\n    function _calculateTokens(uint256 _weiAmount, uint _stage) internal view returns (uint256, uint256, uint256) {\n        uint price = prices[_stage];\n        uint tokens = _weiAmount.div(price);\n        uint bonus;\n        if (tokens >= 10 && tokens <= 100) {\n            bonus = 1000;\n        } else if (tokens > 100 && tokens <= 1000) {\n            bonus = 1500;\n        } else if (tokens > 1000 && tokens <= 10000) {\n            bonus = 2000;\n        } else if (tokens > 10000 && tokens <= 100000) {\n            bonus = 2500;\n        } else if (tokens > 100000 && tokens <= 1000000) {\n            bonus = 3000;\n        } else if (tokens > 1000000 && tokens <= 10000000) {\n            bonus = 3500;\n        } else if (tokens > 10000000) {\n            bonus = 4000;\n        }\n\n        bonus = valueFromPercent(tokens, bonus);\n        return (tokens.mul(1 ether), bonus.mul(1 ether), price);\n\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds(uint _weiAmount) internal {\n        wallet.transfer(_weiAmount);\n    }\n\n\n    /**\n    * @dev Checks whether the cap has been reached.\n    * @return Whether the cap was reached\n    */\n    function capReached() public view returns (bool) {\n        return tokensSold >= cap;\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() onlyOwner public {\n        finalization();\n        emit Finalized();\n    }\n\n    /**\n     * @dev Can be overridden to add finalization logic. The overriding function\n     * should call super.finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function finalization() internal {\n        token.safeTransfer(wallet, token.balanceOf(address(this)));\n    }\n\n\n    function updatePrice(uint _stage, uint _newPrice) onlyOwner external {\n        prices[_stage] = _newPrice;\n    }\n\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    //1% - 100, 10% - 1000 50% - 5000\n    function valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\n        uint _amount = _value.mul(_percent).div(10000);\n        return (_amount);\n    }\n}",
  "bytecode": "60806040526a18d0bf423c03d8de00000060055534801561001f57600080fd5b50604051604080610cf48339810180604052604081101561003f57600080fd5b50805160209091015160008054600160a060020a03191633179055600160a060020a038216151561006f57600080fd5b600160a060020a038116151561008457600080fd5b60028054600160a060020a03938416600160a060020a03199182161790915560018054929093169116179055600660205267010a741a462780007f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a315567017508f1956a80007f8819ef417987f8ae7a81f42cdfb18815282fe989326fbff903d13cf0e03ace29556701aa535d3d0c00007f75f96ab15d697e93042dc45b5c896c4b27e89bb6eaf39475c5c371cb2513f7d25560046000526701df9dc8e4ad80007fc5069e24aaadb2addc3e52e868fcf3f4f8acf5a87e24300992fd4540c2a87eed55610b7f806101756000396000f3fe6080604052600436106100c4576000357c010000000000000000000000000000000000000000000000000000000090048063521eb27311610081578063521eb273146101cc578063715018a6146101fd57806382367b2d146102125780638da5cb5b14610242578063f2fde38b14610257578063fc0c546a1461028a576100c4565b806321bc9a551461010f578063355274ea1461013d5780634042b66f146101645780634bb278f3146101795780634f9359451461018e578063518ab2a8146101b7575b61010d336101086000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061029f92505050565b6102a6565b005b61010d6004803603604081101561012557600080fd5b50600160a060020a03813581169160200135166102a6565b34801561014957600080fd5b50610152610502565b60408051918252519081900360200190f35b34801561017057600080fd5b50610152610508565b34801561018557600080fd5b5061010d61050e565b34801561019a57600080fd5b506101a3610558565b604080519115158252519081900360200190f35b3480156101c357600080fd5b50610152610563565b3480156101d857600080fd5b506101e1610569565b60408051600160a060020a039092168252519081900360200190f35b34801561020957600080fd5b5061010d610578565b34801561021e57600080fd5b5061010d6004803603604081101561023557600080fd5b50803590602001356105e4565b34801561024e57600080fd5b506101e161060d565b34801561026357600080fd5b5061010d6004803603602081101561027a57600080fd5b5035600160a060020a031661061c565b34801561029657600080fd5b506101e161063f565b6014015190565b346102b1838261064e565b60008060006102bf84610673565b91945092509050678ac7230489e800008310156102db57600080fd5b610303816102f785670de0b6b3a764000063ffffffff61073016565b9063ffffffff61074716565b90506000610317858363ffffffff61077016565b9050600081111561036457610332858263ffffffff61077016565b604051909550339082156108fc029083906000818181858888f19350505050158015610362573d6000803e3d6000fd5b505b600160a060020a0386161580159061038e575086600160a060020a031686600160a060020a031614155b156103cf57600160a060020a038781166000908152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff19169188169190911790555b600160a060020a03878116600090815260076020526040902054161561043d5760006103fd856103e8610782565b600160a060020a03808a166000908152600760205260409020549192506104259116826107af565b600454610438908263ffffffff6107b916565b600455505b61044d848463ffffffff6107b916565b9350600554610467856004546107b990919063ffffffff16565b111561047257600080fd5b600354610485908663ffffffff6107b916565b60035560045461049b908563ffffffff6107b916565b6004556104a887856107af565b60408051868152602081018690528151600160a060020a038a169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a36104f9856107c6565b50505050505050565b60055481565b60035481565b600054600160a060020a0316331461052557600080fd5b61052d610800565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a1565b600554600454101590565b60045481565b600254600160a060020a031681565b600054600160a060020a0316331461058f57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146105fb57600080fd5b60009182526006602052604090912055565b600054600160a060020a031681565b600054600160a060020a0316331461063357600080fd5b61063c816108b3565b50565b600154600160a060020a031681565b600160a060020a038216151561066357600080fd5b80151561066f57600080fd5b5050565b6000806000635c784bd0421015801561068f5750635ca12a5042105b156106aa5761069f846001610930565b925092509250610729565b635ca12a5042101580156106c15750635cc8b75042105b156106d15761069f846002610930565b635cc8b75042101580156106e85750635cf195d042105b156106f85761069f846003610930565b635cf195d0421015801561070f5750635d1922d042105b1561071f5761069f846004610930565b5060009150819050805b9193909250565b6000818381151561073d57fe5b0490505b92915050565b600082151561075857506000610741565b5081810281838281151561076857fe5b041461074157fe5b60008282111561077c57fe5b50900390565b6000806107a761271061079b868663ffffffff61074716565b9063ffffffff61073016565b949350505050565b61066f8282610a7e565b8181018281101561074157fe5b600254604051600160a060020a039091169082156108fc029083906000818181858888f1935050505015801561066f573d6000803e3d6000fd5b600254600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516108b193600160a060020a039081169316916370a08231916024808301926020929190829003018186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d602081101561089657600080fd5b5051600154600160a060020a0316919063ffffffff610a9b16565b565b600160a060020a03811615156108c857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000818152600660205260408120548190819081610954878363ffffffff61073016565b90506000600a821015801561096a575060648211155b1561097857506103e8610a31565b60648211801561098a57506103e88211155b1561099857506105dc610a31565b6103e8821180156109ab57506127108211155b156109b957506107d0610a31565b612710821180156109cd5750620186a08211155b156109db57506109c4610a31565b620186a0821180156109f05750620f42408211155b156109fe5750610bb8610a31565b620f424082118015610a135750629896808211155b15610a215750610dac610a31565b62989680821115610a315750610fa05b610a3b8282610782565b9050610a5582670de0b6b3a764000063ffffffff61074716565b610a6d82670de0b6b3a764000063ffffffff61074716565b849550955095505050509250925092565b60015461066f90600160a060020a0316838363ffffffff610a9b16565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b505050506040513d6020811015610b4157600080fd5b50511515610b4e57600080fd5b50505056fea165627a7a72305820748e75d4891ee79e6303d3ab0f53729401ec04a150ab9642395b8b49c590a55c00290000000000000000000000007654b70ffd359de7939ba3baa6fff0bd18db0cac000000000000000000000000e1d4d57b24dbfc5dd814f852749c34d37f5b898d",
  "constructorArguments": "0000000000000000000000007654b70ffd359de7939ba3baa6fff0bd18db0cac000000000000000000000000e1d4d57b24dbfc5dd814f852749c34d37f5b898d"
}