{
  "address": "0x47be0ef4327d0ee6b2ec2e9d2b9921a94de0165c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FexToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-22\n*/\n\npragma solidity ^0.4.24;\n\n    /**\n\n     * @title ERC20Basic\n\n     * @dev Simpler version of ERC20 interface\n\n     * See https://github.com/ethereum/EIPs/issues/179\n\n     */\n\n    contract ERC20Basic {\n\n        function totalSupply() public view returns (uint256);\n  \n        function balanceOf(address who) public view returns (uint256);\n  \n        function transfer(address to, uint256 value) public returns (bool);\n  \n        event Transfer(address indexed from, address indexed to, uint256 value);\n  \n      }\n      /**\n  \n       * @title ERC20 interface\n  \n       * @dev see https://github.com/ethereum/EIPs/issues/20\n  \n       */\n  \n      contract ERC20 is ERC20Basic {\n  \n        function allowance(address owner, address spender)\n  \n         public view returns (uint256);\n  \n        function transferFrom(address from, address to, uint256 value)\n  \n         public returns (bool);\n  \n       function approve(address spender, uint256 value) public returns (bool);\n  \n       event Approval(address indexed owner,address indexed spender,uint256 value);\n  \n      }\n  \n  \n       /* @title SafeERC20\n  \n       * @dev Wrappers around ERC20 operations that throw on failure.\n  \n       * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n  \n       * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n  \n       */\n  \n      library SafeERC20 {\n  \n        function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n  \n          require(token.transfer(to, value));\n  \n        }\n  \n  \n  \n  \n        function safeTransferFrom(\n  \n          ERC20 token,\n  \n          address from,\n  \n          address to,\n  \n          uint256 value\n  \n        )\n  \n          internal\n  \n        {\n  \n          require(token.transferFrom(from, to, value));\n  \n        }\n  \n  \n  \n  \n        function safeApprove(ERC20 token, address spender, uint256 value) internal {\n  \n          require(token.approve(spender, value));\n  \n        }\n  \n      }\n      /**\n  \n       * @title Ownable\n  \n       * @dev The Ownable contract has an owner address, and provides basic authorization control\n  \n       * functions, this simplifies the implementation of \"user permissions\".\n  \n       */\n  \n      contract Ownable {\n  \n        address public owner;\n  \n        event OwnershipRenounced(address indexed previousOwner);\n  \n        event OwnershipTransferred(\n  \n          address indexed previousOwner,\n  \n          address indexed newOwner\n  \n        );\n  \n        /**\n  \n         * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n  \n         * account.\n  \n         */\n        constructor() public {\n  \n          owner = msg.sender;\n  \n        }\n  \n  \n        /**\n         * @dev Throws if called by any account other than the owner.\n         */\n  \n        modifier onlyOwner() {\n  \n          require(msg.sender == owner);\n  \n          _;\n  \n        }\n  \n  \n        /**\n  \n         * @dev Allows the current owner to relinquish control of the contract.\n  \n         * @notice Renouncing to ownership will leave the contract without an owner.\n  \n         * It will not be possible to call the functions with the `onlyOwner`\n  \n         * modifier anymore.\n  \n         */\n  \n        function renounceOwnership() public onlyOwner {\n  \n          emit OwnershipRenounced(owner);\n  \n          owner = address(0);\n  \n        }\n  \n        /**\n  \n         * @dev Allows the current owner to transfer control of the contract to a newOwner.\n  \n         * @param _newOwner The address to transfer ownership to.\n  \n         */\n  \n        function transferOwnership(address _newOwner) public onlyOwner {\n  \n          _transferOwnership(_newOwner);\n  \n        }\n  \n  \n  \n  \n        /**\n  \n         * @dev Transfers control of the contract to a newOwner.\n  \n         * @param _newOwner The address to transfer ownership to.\n  \n         */\n  \n        function _transferOwnership(address _newOwner) internal {\n  \n          require(_newOwner != address(0));\n  \n          emit OwnershipTransferred(owner,     _newOwner);\n  \n          owner = _newOwner;\n  \n        }\n  \n      }\n      /**\n  \n       * @title SafeMath\n  \n       * @dev Math operations with safety checks that throw on error\n  \n       */\n  \n      library SafeMath {\n  \n        /**\n  \n        * @dev Multiplies two numbers, throws on overflow.\n  \n        */\n  \n        function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n  \n          // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n  \n          // benefit is lost if 'b' is also tested.\n  \n          // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n  \n          if (a == 0) {\n  \n            return 0;\n  \n          }\n          c = a * b;\n          assert(c / a == b);\n  \n          return c;\n        }\n  \n  \n        /**\n  \n        * @dev Integer division of two numbers, truncating the quotient.\n  \n        */\n  \n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\n  \n          // assert(b > 0); // Solidity automatically throws when dividing by 0\n  \n          // uint256 c = a / b;\n  \n          // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n  \n          return a / b;\n  \n        }\n  \n        /**\n  \n        * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  \n        */\n  \n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n  \n          assert(b <= a);\n  \n          return a - b;\n  \n        }\n  \n        /**\n  \n        * @dev Adds two numbers, throws on overflow.\n  \n        */\n  \n        function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n  \n          c = a + b;\n  \n          assert(c >= a);\n  \n          return c;\n  \n        }\n  \n      }\n  \n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract FexToken is StandardToken {\n    string public constant name = \"FEX NEW Token\";\n    string public constant symbol = \"FEX\";\n    uint8 public constant decimals = 18;\n    \n  \n    constructor() public {\n      totalSupply_ = 30000000000000000000000000;\n      balances[msg.sender] = totalSupply_;\n    }\n  }",
  "bytecode": "608060405234801561001057600080fd5b506a18d0bf423c03d8de00000060028190553360009081526020819052604090205561080c806100416000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806366188463146101f157806370a082311461021557806395d89b4114610236578063a9059cbb1461024b578063d73dd6231461026f578063dd62ed3e14610293575b600080fd5b3480156100bf57600080fd5b506100c86102ba565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a03600435166024356102f1565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a610357565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a036004358116906024351660443561035d565b3480156101d257600080fd5b506101db6104d2565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b50610161600160a060020a03600435166024356104d7565b34801561022157600080fd5b5061018a600160a060020a03600435166105c6565b34801561024257600080fd5b506100c86105e1565b34801561025757600080fd5b50610161600160a060020a0360043516602435610618565b34801561027b57600080fd5b50610161600160a060020a03600435166024356106f7565b34801561029f57600080fd5b5061018a600160a060020a0360043581169060243516610790565b60408051808201909152600d81527f464558204e455720546f6b656e00000000000000000000000000000000000000602082015281565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b600160a060020a03831660009081526020819052604081205482111561038257600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020548211156103b257600080fd5b600160a060020a03831615156103c757600080fd5b600160a060020a0384166000908152602081905260409020546103f0908363ffffffff6107bb16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610425908363ffffffff6107cd16565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054610467908363ffffffff6107bb16565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b336000908152600160209081526040808320600160a060020a038616845290915281205480831061052b57336000908152600160209081526040808320600160a060020a0388168452909152812055610560565b61053b818463ffffffff6107bb16565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60408051808201909152600381527f4645580000000000000000000000000000000000000000000000000000000000602082015281565b3360009081526020819052604081205482111561063457600080fd5b600160a060020a038316151561064957600080fd5b33600090815260208190526040902054610669908363ffffffff6107bb16565b3360009081526020819052604080822092909255600160a060020a0385168152205461069b908363ffffffff6107cd16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600160209081526040808320600160a060020a038616845290915281205461072b908363ffffffff6107cd16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156107c757fe5b50900390565b818101828110156107da57fe5b929150505600a165627a7a723058201140f305220219217dfe5a51f7def02fcd25487861fcfd178f5ccd2560fd1b2d0029"
}