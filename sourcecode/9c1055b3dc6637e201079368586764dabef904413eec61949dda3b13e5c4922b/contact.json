{
  "address": "0xa9d37fd3dc36418e806dbbc16fe991c284940858",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LTVCreditorProxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n// File: contracts/src/shared/interfaces/CollateralizerInterface.sol\n\n\n\n\ncontract CollateralizerInterface {\n\n\tfunction unpackCollateralParametersFromBytes(\n\t\tbytes32 parameters\n\t) public pure returns (uint, uint, uint);\n\n}\n\n// File: contracts/src/shared/interfaces/DebtKernelInterface.sol\n\n\n\ncontract DebtKernelInterface {\n\n\tenum Errors {\n\t\t// Debt has been already been issued\n\t\tDEBT_ISSUED,\n\t\t// Order has already expired\n\t\tORDER_EXPIRED,\n\t\t// Debt issuance associated with order has been cancelled\n\t\tISSUANCE_CANCELLED,\n\t\t// Order has been cancelled\n\t\tORDER_CANCELLED,\n\t\t// Order parameters specify amount of creditor / debtor fees\n\t\t// that is not equivalent to the amount of underwriter / relayer fees\n\t\tORDER_INVALID_INSUFFICIENT_OR_EXCESSIVE_FEES,\n\t\t// Order parameters specify insufficient principal amount for\n\t\t// debtor to at least be able to meet his fees\n\t\tORDER_INVALID_INSUFFICIENT_PRINCIPAL,\n\t\t// Order parameters specify non zero fee for an unspecified recipient\n\t\tORDER_INVALID_UNSPECIFIED_FEE_RECIPIENT,\n\t\t// Order signatures are mismatched / malformed\n\t\tORDER_INVALID_NON_CONSENSUAL,\n\t\t// Insufficient balance or allowance for principal token transfer\n\t\tCREDITOR_BALANCE_OR_ALLOWANCE_INSUFFICIENT\n\t}\n\n\t// solhint-disable-next-line var-name-mixedcase\n\taddress public TOKEN_TRANSFER_PROXY;\n\tbytes32 constant public NULL_ISSUANCE_HASH = bytes32(0);\n\n\t/* NOTE(kayvon): Currently, the `view` keyword does not actually enforce the\n\tstatic nature of the method; this will change in the future, but for now, in\n\torder to prevent reentrancy we'll need to arbitrarily set an upper bound on\n\tthe gas limit allotted for certain method calls. */\n\tuint16 constant public EXTERNAL_QUERY_GAS_LIMIT = 8000;\n\n\tmapping (bytes32 => bool) public issuanceCancelled;\n\tmapping (bytes32 => bool) public debtOrderCancelled;\n\n\tevent LogDebtOrderFilled(\n\t\tbytes32 indexed _agreementId,\n\t\tuint _principal,\n\t\taddress _principalToken,\n\t\taddress indexed _underwriter,\n\t\tuint _underwriterFee,\n\t\taddress indexed _relayer,\n\t\tuint _relayerFee\n\t);\n\n\tevent LogIssuanceCancelled(\n\t\tbytes32 indexed _agreementId,\n\t\taddress indexed _cancelledBy\n\t);\n\n\tevent LogDebtOrderCancelled(\n\t\tbytes32 indexed _debtOrderHash,\n\t\taddress indexed _cancelledBy\n\t);\n\n\tevent LogError(\n\t\tuint8 indexed _errorId,\n\t\tbytes32 indexed _orderHash\n\t);\n\n\tstruct Issuance {\n\t\taddress version;\n\t\taddress debtor;\n\t\taddress underwriter;\n\t\tuint underwriterRiskRating;\n\t\taddress termsContract;\n\t\tbytes32 termsContractParameters;\n\t\tuint salt;\n\t\tbytes32 agreementId;\n\t}\n\n\tstruct DebtOrder {\n\t\tIssuance issuance;\n\t\tuint underwriterFee;\n\t\tuint relayerFee;\n\t\tuint principalAmount;\n\t\taddress principalToken;\n\t\tuint creditorFee;\n\t\tuint debtorFee;\n\t\taddress relayer;\n\t\tuint expirationTimestampInSec;\n\t\tbytes32 debtOrderHash;\n\t}\n\n    function fillDebtOrder(\n        address creditor,\n        address[6] orderAddresses,\n        uint[8] orderValues,\n        bytes32[1] orderBytes32,\n        uint8[3] signaturesV,\n        bytes32[3] signaturesR,\n        bytes32[3] signaturesS\n    )\n        public\n        returns (bytes32 _agreementId);\n\n}\n\n// File: contracts/src/shared/interfaces/DebtTokenInterface.sol\n\n\n\ncontract DebtTokenInterface {\n\n    function transfer(address _to, uint _tokenId) public;\n\n    function exists(uint256 _tokenId) public view returns (bool);\n\n}\n\n// File: contracts/src/shared/interfaces/TokenTransferProxyInterface.sol\n\n\n\ncontract TokenTransferProxyInterface {}\n\n// File: contracts/src/shared/interfaces/ContractRegistryInterface.sol\n\n\n\n\n\n\n\ncontract ContractRegistryInterface {\n\n    CollateralizerInterface public collateralizer;\n    DebtKernelInterface public debtKernel;\n    DebtTokenInterface public debtToken;\n    TokenTransferProxyInterface public tokenTransferProxy;\n\n    function ContractRegistryInterface(\n        address _collateralizer,\n        address _debtKernel,\n        address _debtToken,\n        address _tokenTransferProxy\n    )\n        public\n    {\n        collateralizer = CollateralizerInterface(_collateralizer);\n        debtKernel = DebtKernelInterface(_debtKernel);\n        debtToken = DebtTokenInterface(_debtToken);\n        tokenTransferProxy = TokenTransferProxyInterface(_tokenTransferProxy);\n    }\n\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/src/shared/libraries/SignaturesLibrary.sol\n\n\n\n\ncontract SignaturesLibrary {\n\tbytes constant internal PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\n\n\tstruct ECDSASignature {\n\t\tuint8 v;\n\t\tbytes32 r;\n\t\tbytes32 s;\n\t}\n\n\tfunction isValidSignature(\n\t\taddress signer,\n\t\tbytes32 hash,\n\t\tECDSASignature signature\n\t)\n\t\tpublic\n\t\tpure\n\t\treturns (bool valid)\n\t{\n\t\tbytes32 prefixedHash = keccak256(PREFIX, hash);\n\t\treturn ecrecover(prefixedHash, signature.v, signature.r, signature.s) == signer;\n\t}\n}\n\n// File: contracts/src/shared/libraries/OrderLibrary.sol\n\n\n\n\ncontract OrderLibrary {\n\tstruct DebtOrder {\n\t\taddress kernelVersion;\n\t\taddress issuanceVersion;\n\t\tuint principalAmount;\n\t\taddress principalToken;\n\t\tuint collateralAmount;\n\t\taddress collateralToken;\n\t\taddress debtor;\n\t\tuint debtorFee;\n\t\taddress creditor;\n\t\tuint creditorFee;\n\t\taddress relayer;\n\t\tuint relayerFee;\n\t\taddress underwriter;\n\t\tuint underwriterFee;\n\t\tuint underwriterRiskRating;\n\t\taddress termsContract;\n\t\tbytes32 termsContractParameters;\n\t\tuint expirationTimestampInSec;\n\t\tuint salt;\n\t\tSignaturesLibrary.ECDSASignature debtorSignature;\n\t\tSignaturesLibrary.ECDSASignature creditorSignature;\n\t\tSignaturesLibrary.ECDSASignature underwriterSignature;\n\t}\n\n\tfunction unpackDebtOrder(DebtOrder memory order)\n\t\tpublic\n\t\tpure\n\t\treturns (\n\t        address[6] orderAddresses,\n\t        uint[8] orderValues,\n\t        bytes32[1] orderBytes32,\n\t        uint8[3] signaturesV,\n\t        bytes32[3] signaturesR,\n\t        bytes32[3] signaturesS\n\t\t)\n\t{\n\t\treturn (\n\t\t\t[order.issuanceVersion, order.debtor, order.underwriter, order.termsContract, order.principalToken, order.relayer],\n            [order.underwriterRiskRating, order.salt, order.principalAmount, order.underwriterFee, order.relayerFee, order.creditorFee, order.debtorFee, order.expirationTimestampInSec],\n\t\t\t[order.termsContractParameters],\n            [order.debtorSignature.v, order.creditorSignature.v, order.underwriterSignature.v],\n\t\t\t[order.debtorSignature.r, order.creditorSignature.r, order.underwriterSignature.r],\n\t\t\t[order.debtorSignature.s, order.creditorSignature.s, order.underwriterSignature.s]\n\t\t);\n\t}\n}\n\n// File: contracts/src/CreditorDrivenLoans/DecisionEngines/libraries/LTVDecisionEngineTypes.sol\n\n\n\n\n\n\ncontract LTVDecisionEngineTypes\n{\n\t// The parameters used during the consent and decision evaluations.\n\tstruct Params {\n\t\taddress creditor;\n\t\t// The values and signature for the creditor commitment hash.\n\t\tCreditorCommitment creditorCommitment;\n\t\t// Price feed data.\n\t\tPrice principalPrice;\n\t\tPrice collateralPrice;\n\t\t// A DebtOrderData is required to confirm parity with the submitted order.\n\t\tOrderLibrary.DebtOrder order;\n\t}\n\n\tstruct Price {\n\t\tuint value;\n\t\tuint timestamp;\n\t\taddress tokenAddress;\n\t\tSignaturesLibrary.ECDSASignature signature;\n\t}\n\n\tstruct CreditorCommitment {\n\t\tCommitmentValues values;\n\t\tSignaturesLibrary.ECDSASignature signature;\n\t}\n\n\tstruct CommitmentValues {\n\t\tuint maxLTV;\n\t\taddress priceFeedOperator;\n\t}\n\n\tstruct SimpleInterestParameters {\n\t\tuint principalTokenIndex;\n\t\tuint principalAmount;\n        uint interestRate;\n        uint amortizationUnitType;\n        uint termLengthInAmortizationUnits;\n\t}\n\n\tstruct CollateralParameters {\n\t\tuint collateralTokenIndex;\n\t\tuint collateralAmount;\n\t\tuint gracePeriodInDays;\n\t}\n}\n\n// File: contracts/src/shared/interfaces/TermsContractInterface.sol\n\n\n\n\ncontract TermsContractInterface {\n\n\tfunction registerTermStart(\n        bytes32 agreementId,\n        address debtor\n    ) public returns (bool _success);\n\n\tfunction registerRepayment(\n        bytes32 agreementId,\n        address payer,\n        address beneficiary,\n        uint256 unitsOfRepayment,\n        address tokenAddress\n    ) public returns (bool _success);\n\n\tfunction getExpectedRepaymentValue(\n        bytes32 agreementId,\n        uint256 timestamp\n    ) public view returns (uint256);\n\n\tfunction getValueRepaidToDate(\n        bytes32 agreementId\n    ) public view returns (uint256);\n\n\tfunction getTermEndTimestamp(\n        bytes32 _agreementId\n    ) public view returns (uint);\n\n}\n\n// File: contracts/src/shared/interfaces/SimpleInterestTermsContractInterface.sol\n\n\n\n\ncontract SimpleInterestTermsContractInterface is TermsContractInterface {\n\n    function unpackParametersFromBytes(\n        bytes32 parameters\n    ) public pure returns (\n        uint _principalTokenIndex,\n        uint _principalAmount,\n        uint _interestRate,\n        uint _amortizationUnitType,\n        uint _termLengthInAmortizationUnits\n    );\n\n}\n\n// File: contracts/src/CreditorDrivenLoans/DecisionEngines/LTVDecisionEngine.sol\n\n\n\n// External dependencies\n\n\n// Libraries\n\n\n\n\n// Interfaces\n\n\n\n\ncontract LTVDecisionEngine is LTVDecisionEngineTypes, SignaturesLibrary, OrderLibrary\n{\n\tusing SafeMath for uint;\n\n\tuint public constant PRECISION = 4;\n\n\tuint public constant MAX_PRICE_TTL_IN_SECONDS = 600;\n\n\tContractRegistryInterface public contractRegistry;\n\n\tfunction LTVDecisionEngine(address _contractRegistry) public {\n        contractRegistry = ContractRegistryInterface(_contractRegistry);\n    }\n\n\tfunction evaluateConsent(Params params, bytes32 commitmentHash)\n\t\tpublic view returns (bool)\n\t{\n\t\t// Checks that the given creditor values were signed by the creditor.\n\t\tif (!isValidSignature(\n\t\t\tparams.creditor,\n\t\t\tcommitmentHash,\n\t\t\tparams.creditorCommitment.signature\n\t\t)) {\n\t\t\t// We return early if the creditor values were not signed correctly.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Checks that the given price feed data was signed by the price feed operator.\n\t\treturn (\n\t\t\tverifyPrices(\n\t\t\t\tparams.creditorCommitment.values.priceFeedOperator,\n\t\t\t\tparams.principalPrice,\n\t\t\t\tparams.collateralPrice\n\t\t\t)\n\t\t);\n\t}\n\n\t// Returns true if the creditor-initiated order has not expired, and the LTV is below the max.\n\tfunction evaluateDecision(Params memory params)\n\t\tpublic view returns (bool _success)\n\t{\n\t\tLTVDecisionEngineTypes.Price memory principalTokenPrice = params.principalPrice;\n\t\tLTVDecisionEngineTypes.Price memory collateralTokenPrice = params.collateralPrice;\n\n\t\tuint maxLTV = params.creditorCommitment.values.maxLTV;\n\t\tOrderLibrary.DebtOrder memory order = params.order;\n\n\t\tuint collateralValue = collateralTokenPrice.value;\n\n\t\tif (isExpired(order.expirationTimestampInSec)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (order.collateralAmount == 0 || collateralValue == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tuint ltv = computeLTV(\n\t\t\tprincipalTokenPrice.value,\n\t\t\tcollateralTokenPrice.value,\n\t\t\torder.principalAmount,\n\t\t\torder.collateralAmount\n\t\t);\n\n\t\tuint maxLTVWithPrecision = maxLTV.mul(10 ** (PRECISION.sub(2)));\n\n\t\treturn ltv <= maxLTVWithPrecision;\n\t}\n\n\tfunction hashCreditorCommitmentForOrder(CommitmentValues commitmentValues, OrderLibrary.DebtOrder order)\n\tpublic view returns (bytes32)\n\t{\n\t\tbytes32 termsContractCommitmentHash =\n\t\t\tgetTermsContractCommitmentHash(order.termsContract, order.termsContractParameters);\n\n\t\treturn keccak256(\n\t\t\t// order values\n\t\t\torder.creditor,\n\t\t\torder.kernelVersion,\n\t\t\torder.issuanceVersion,\n\t\t\torder.termsContract,\n\t\t\torder.principalToken,\n\t\t\torder.salt,\n\t\t\torder.principalAmount,\n\t\t\torder.creditorFee,\n\t\t\torder.expirationTimestampInSec,\n\t\t\t// commitment values\n\t\t\tcommitmentValues.maxLTV,\n\t\t\tcommitmentValues.priceFeedOperator,\n\t\t\t// hashed terms contract commitments\n\t\t\ttermsContractCommitmentHash\n\t\t);\n\t}\n\n\tfunction getTermsContractCommitmentHash(\n\t\taddress termsContract,\n\t\tbytes32 termsContractParameters\n\t) public view returns (bytes32) {\n\t\tSimpleInterestParameters memory simpleInterestParameters =\n\t\t\tunpackSimpleInterestParameters(termsContract, termsContractParameters);\n\n\t\tCollateralParameters memory collateralParameters =\n\t\t\tunpackCollateralParameters(termsContractParameters);\n\n\t\treturn keccak256(\n\t\t\t// unpacked termsContractParameters\n\t\t\tsimpleInterestParameters.principalTokenIndex,\n\t\t\tsimpleInterestParameters.principalAmount,\n\t\t\tsimpleInterestParameters.interestRate,\n\t\t\tsimpleInterestParameters.amortizationUnitType,\n\t\t\tsimpleInterestParameters.termLengthInAmortizationUnits,\n\t\t\tcollateralParameters.collateralTokenIndex,\n\t\t\tcollateralParameters.gracePeriodInDays\n\t\t);\n\t}\n\n\tfunction unpackSimpleInterestParameters(\n\t\taddress termsContract,\n\t\tbytes32 termsContractParameters\n\t)\n\t\tpublic pure returns (SimpleInterestParameters)\n\t{\n\t\t// use simple interest terms contract interface to unpack simple interest terms\n\t\tSimpleInterestTermsContractInterface simpleInterestTermsContract = SimpleInterestTermsContractInterface(termsContract);\n\n\t\tvar (principalTokenIndex, principalAmount, interestRate, amortizationUnitType, termLengthInAmortizationUnits) =\n\t\t\tsimpleInterestTermsContract.unpackParametersFromBytes(termsContractParameters);\n\n\t\treturn SimpleInterestParameters({\n\t\t\tprincipalTokenIndex: principalTokenIndex,\n\t\t\tprincipalAmount: principalAmount,\n\t\t\tinterestRate: interestRate,\n\t\t\tamortizationUnitType: amortizationUnitType,\n\t\t\ttermLengthInAmortizationUnits: termLengthInAmortizationUnits\n\t\t});\n\t}\n\n\tfunction unpackCollateralParameters(\n\t\tbytes32 termsContractParameters\n\t)\n\t\tpublic view returns (CollateralParameters)\n\t{\n\t\tCollateralizerInterface collateralizer = CollateralizerInterface(contractRegistry.collateralizer());\n\n\t\tvar (collateralTokenIndex, collateralAmount, gracePeriodInDays) =\n\t\t\tcollateralizer.unpackCollateralParametersFromBytes(termsContractParameters);\n\n\t\treturn CollateralParameters({\n\t\t\tcollateralTokenIndex: collateralTokenIndex,\n\t\t\tcollateralAmount: collateralAmount,\n\t\t\tgracePeriodInDays: gracePeriodInDays\n\t\t});\n\t}\n\n\tfunction verifyPrices(\n\t\taddress priceFeedOperator,\n\t\tLTVDecisionEngineTypes.Price principalPrice,\n\t\tLTVDecisionEngineTypes.Price collateralPrice\n\t)\n\t\tinternal view returns (bool)\n\t{\n\t\tuint minPriceTimestamp = block.timestamp - MAX_PRICE_TTL_IN_SECONDS;\n\n\t\tif (principalPrice.timestamp < minPriceTimestamp ||\n\t\t\tcollateralPrice.timestamp < minPriceTimestamp) {\n\t\t\treturn false;\n\t\t}\n\n\t\tbytes32 principalPriceHash = keccak256(\n\t\t\tprincipalPrice.value,\n\t\t\tprincipalPrice.tokenAddress,\n\t\t\tprincipalPrice.timestamp\n\t\t);\n\n\t\tbytes32 collateralPriceHash = keccak256(\n\t\t\tcollateralPrice.value,\n\t\t\tcollateralPrice.tokenAddress,\n\t\t\tcollateralPrice.timestamp\n\t\t);\n\n\t\tbool principalPriceValid = isValidSignature(\n\t\t\tpriceFeedOperator,\n\t\t\tprincipalPriceHash,\n\t\t\tprincipalPrice.signature\n\t\t);\n\n\t\t// We return early if the principal price information was not signed correctly.\n\t\tif (!principalPriceValid) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn isValidSignature(\n\t\t\tpriceFeedOperator,\n\t\t\tcollateralPriceHash,\n\t\t\tcollateralPrice.signature\n\t\t);\n\t}\n\n\tfunction computeLTV(\n\t\tuint principalTokenPrice,\n\t\tuint collateralTokenPrice,\n\t\tuint principalAmount,\n\t\tuint collateralAmount\n\t)\n\t\tinternal constant returns (uint)\n\t{\n\t\tuint principalValue = principalTokenPrice.mul(principalAmount).mul(10 ** PRECISION);\n\t\tuint collateralValue = collateralTokenPrice.mul(collateralAmount);\n\n\t\treturn principalValue.div(collateralValue);\n\t}\n\n\tfunction isExpired(uint expirationTimestampInSec)\n\t\tinternal view returns (bool expired)\n\t{\n\t\treturn expirationTimestampInSec < block.timestamp;\n\t}\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/src/CreditorDrivenLoans/libraries/CreditorProxyErrors.sol\n\ncontract CreditorProxyErrors {\n    enum Errors {\n            DEBT_OFFER_CANCELLED,\n            DEBT_OFFER_ALREADY_FILLED,\n            DEBT_OFFER_NON_CONSENSUAL,\n            CREDITOR_BALANCE_OR_ALLOWANCE_INSUFFICIENT,\n            DEBT_OFFER_CRITERIA_NOT_MET\n        }\n\n    event CreditorProxyError(\n        uint8 indexed _errorId,\n        address indexed _creditor,\n        bytes32 indexed _creditorCommitmentHash\n    );\n}\n\n// File: contracts/src/CreditorDrivenLoans/libraries/CreditorProxyEvents.sol\n\n\n\ncontract CreditorProxyEvents {\n\n    event DebtOfferCancelled(\n        address indexed _creditor,\n        bytes32 indexed _creditorCommitmentHash\n    );\n\n    event DebtOfferFilled(\n        address indexed _creditor,\n        bytes32 indexed _creditorCommitmentHash,\n        bytes32 indexed _agreementId\n    );\n}\n\n// File: contracts/src/CreditorDrivenLoans/interfaces/CreditorProxyCoreInterface.sol\n\n\n\n\n\n\ncontract CreditorProxyCoreInterface is CreditorProxyErrors, CreditorProxyEvents { }\n\n// File: contracts/src/CreditorDrivenLoans/CreditorProxyCore.sol\n\n\n\n// External libraries\n\n// Internal interfaces\n\n// Shared interfaces\n\n\n\ncontract CreditorProxyCore is CreditorProxyCoreInterface {\n\n\tuint16 constant public EXTERNAL_QUERY_GAS_LIMIT = 8000;\n\n\tContractRegistryInterface public contractRegistry;\n\n\t/**\n\t * Helper function for transferring a specified amount of tokens between two parties.\n\t */\n\tfunction transferTokensFrom(\n\t\taddress _token,\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint _amount\n\t)\n\t\tinternal\n\t\treturns (bool _success)\n\t{\n\t\treturn ERC20(_token).transferFrom(_from, _to, _amount);\n\t}\n\n\t/**\n     * Helper function for querying this contract's allowance for transferring the given token.\n     */\n\tfunction getAllowance(\n\t\taddress token,\n\t\taddress owner,\n\t\taddress granter\n\t)\n\t\tinternal\n\t\tview\n\treturns (uint _allowance)\n\t{\n\t\t// Limit gas to prevent reentrancy.\n\t\treturn ERC20(token).allowance.gas(EXTERNAL_QUERY_GAS_LIMIT)(\n\t\t\towner,\n\t\t\tgranter\n\t\t);\n\t}\n}\n\n// File: contracts/src/CreditorDrivenLoans/LTVCreditorProxy.sol\n\n\n\n// Internal interfaces\n\n// Internal mixins\n\n\n\n\ncontract LTVCreditorProxy is CreditorProxyCore, LTVDecisionEngine {\n\n\tmapping (bytes32 => bool) public debtOfferCancelled;\n\tmapping (bytes32 => bool) public debtOfferFilled;\n\n\tbytes32 constant internal NULL_ISSUANCE_HASH = bytes32(0);\n\n\tfunction LTVCreditorProxy(address _contractRegistry) LTVDecisionEngine(_contractRegistry)\n\t\tpublic\n\t{\n\t\tcontractRegistry = ContractRegistryInterface(_contractRegistry);\n\t}\n\n\tfunction fillDebtOffer(LTVDecisionEngineTypes.Params params)\n\t\tpublic returns (bytes32 agreementId)\n\t{\n\t\tOrderLibrary.DebtOrder memory order = params.order;\n\t\tCommitmentValues memory commitmentValues = params.creditorCommitment.values;\n\n\t\tbytes32 creditorCommitmentHash = hashCreditorCommitmentForOrder(commitmentValues, order);\n\n\t\tif (!evaluateConsent(params, creditorCommitmentHash)) {\n\t\t\temit CreditorProxyError(uint8(Errors.DEBT_OFFER_NON_CONSENSUAL), order.creditor, creditorCommitmentHash);\n\t\t\treturn NULL_ISSUANCE_HASH;\n\t\t}\n\n\t\tif (debtOfferFilled[creditorCommitmentHash]) {\n\t\t\temit CreditorProxyError(uint8(Errors.DEBT_OFFER_ALREADY_FILLED), order.creditor, creditorCommitmentHash);\n\t\t\treturn NULL_ISSUANCE_HASH;\n\t\t}\n\n\t\tif (debtOfferCancelled[creditorCommitmentHash]) {\n\t\t\temit CreditorProxyError(uint8(Errors.DEBT_OFFER_CANCELLED), order.creditor, creditorCommitmentHash);\n\t\t\treturn NULL_ISSUANCE_HASH;\n\t\t}\n\n\t\tif (!evaluateDecision(params)) {\n\t\t\temit CreditorProxyError(\n\t\t\t\tuint8(Errors.DEBT_OFFER_CRITERIA_NOT_MET),\n\t\t\t\torder.creditor,\n\t\t\t\tcreditorCommitmentHash\n\t\t\t);\n\t\t\treturn NULL_ISSUANCE_HASH;\n\t\t}\n\n\t\taddress principalToken = order.principalToken;\n\n\t\t// The allowance that the token transfer proxy has for this contract's tokens.\n\t\tuint tokenTransferAllowance = getAllowance(\n\t\t\tprincipalToken,\n\t\t\taddress(this),\n\t\t\tcontractRegistry.tokenTransferProxy()\n\t\t);\n\n\t\tuint totalCreditorPayment = order.principalAmount.add(order.creditorFee);\n\n\t\t// Ensure the token transfer proxy can transfer tokens from the creditor proxy\n\t\tif (tokenTransferAllowance < totalCreditorPayment) {\n\t\t\trequire(setTokenTransferAllowance(principalToken, totalCreditorPayment));\n\t\t}\n\n\t\t// Transfer principal from creditor to CreditorProxy\n\t\tif (totalCreditorPayment > 0) {\n\t\t\trequire(\n\t\t\t\ttransferTokensFrom(\n\t\t\t\t\tprincipalToken,\n\t\t\t\t\torder.creditor,\n\t\t\t\t\taddress(this),\n\t\t\t\t\ttotalCreditorPayment\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tagreementId = sendOrderToKernel(order);\n\n\t\trequire(agreementId != NULL_ISSUANCE_HASH);\n\n\t\tdebtOfferFilled[creditorCommitmentHash] = true;\n\n\t\tcontractRegistry.debtToken().transfer(order.creditor, uint256(agreementId));\n\n\t\temit DebtOfferFilled(order.creditor, creditorCommitmentHash, agreementId);\n\n\t\treturn agreementId;\n\t}\n\n\tfunction sendOrderToKernel(DebtOrder memory order) internal returns (bytes32 id)\n\t{\n\t\taddress[6] memory orderAddresses;\n\t\tuint[8] memory orderValues;\n\t\tbytes32[1] memory orderBytes32;\n\t\tuint8[3] memory signaturesV;\n\t\tbytes32[3] memory signaturesR;\n\t\tbytes32[3] memory signaturesS;\n\n\t\t(orderAddresses, orderValues, orderBytes32, signaturesV, signaturesR, signaturesS) = unpackDebtOrder(order);\n\n\t\treturn contractRegistry.debtKernel().fillDebtOrder(\n\t\t\taddress(this),\n\t\t\torderAddresses,\n\t\t\torderValues,\n\t\t\torderBytes32,\n\t\t\tsignaturesV,\n\t\t\tsignaturesR,\n\t\t\tsignaturesS\n\t\t);\n\t}\n\n\tfunction cancelDebtOffer(LTVDecisionEngineTypes.Params params) public returns (bool) {\n\t\tLTVDecisionEngineTypes.CommitmentValues memory commitmentValues = params.creditorCommitment.values;\n\t\tOrderLibrary.DebtOrder memory order = params.order;\n\n\t\t// sender must be the creditor.\n\t\trequire(msg.sender == order.creditor);\n\n\t\tbytes32 creditorCommitmentHash = hashCreditorCommitmentForOrder(commitmentValues, order);\n\n\t\t// debt offer must not already be filled.\n\t\trequire(!debtOfferFilled[creditorCommitmentHash]);\n\n\t\tdebtOfferCancelled[creditorCommitmentHash] = true;\n\n\t\temit DebtOfferCancelled(order.creditor, creditorCommitmentHash);\n\n\t\treturn true;\n\t}\n\n\t/**\n     * Helper function for approving this address' allowance to Dharma's token transfer proxy.\n     */\n\tfunction setTokenTransferAllowance(\n\t\taddress token,\n\t\tuint amount\n\t)\n\t\tinternal\n\t\treturns (bool _success)\n\t{\n\t\treturn ERC20(token).approve(\n\t\t\taddress(contractRegistry.tokenTransferProxy()),\n\t\t\tamount\n\t\t);\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"}],\"name\":\"getTermsContractCommitmentHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"creditorCommitment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"principalPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"collateralPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"params\",\"type\":\"tuple\"},{\"name\":\"commitmentHash\",\"type\":\"bytes32\"}],\"name\":\"evaluateConsent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"creditorCommitment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"principalPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"collateralPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"cancelDebtOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"creditorCommitment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"principalPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"collateralPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"evaluateDecision\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PRICE_TTL_IN_SECONDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debtOfferCancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"creditorCommitment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"principalPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"collateralPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"fillDebtOffer\",\"outputs\":[{\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debtOfferFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"}],\"name\":\"unpackCollateralParameters\",\"outputs\":[{\"components\":[{\"name\":\"collateralTokenIndex\",\"type\":\"uint256\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"gracePeriodInDays\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"commitmentValues\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashCreditorCommitmentForOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"unpackDebtOrder\",\"outputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[6]\"},{\"name\":\"orderValues\",\"type\":\"uint256[8]\"},{\"name\":\"orderBytes32\",\"type\":\"bytes32[1]\"},{\"name\":\"signaturesV\",\"type\":\"uint8[3]\"},{\"name\":\"signaturesR\",\"type\":\"bytes32[3]\"},{\"name\":\"signaturesS\",\"type\":\"bytes32[3]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"}],\"name\":\"unpackSimpleInterestParameters\",\"outputs\":[{\"components\":[{\"name\":\"principalTokenIndex\",\"type\":\"uint256\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"interestRate\",\"type\":\"uint256\"},{\"name\":\"amortizationUnitType\",\"type\":\"uint256\"},{\"name\":\"termLengthInAmortizationUnits\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXTERNAL_QUERY_GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_creditorCommitmentHash\",\"type\":\"bytes32\"}],\"name\":\"DebtOfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_creditorCommitmentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_agreementId\",\"type\":\"bytes32\"}],\"name\":\"DebtOfferFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_errorId\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_creditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_creditorCommitmentHash\",\"type\":\"bytes32\"}],\"name\":\"CreditorProxyError\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000010512440113cb6cb613be403135876d2e0a42c0b"
}