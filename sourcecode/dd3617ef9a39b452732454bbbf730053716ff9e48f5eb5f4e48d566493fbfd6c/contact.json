{
  "address": "0x1ed7ae1f0e2fa4276dd7ddc786334a3df81d50c0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FSBToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-09\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\ncontract FSBToken is MintableToken, PausableToken {\n  string public constant name = \"Forty Seven Bank Token\";\n  string public constant symbol = \"FSBT\";\n  uint8 public constant decimals = 18;\n  string public constant version = \"H0.1\"; //human 0.1 standard. Just an arbitrary versioning scheme.\n}\n\n/**\n * @title Crowdsale\n * @dev Modified contract for managing a token crowdsale.\n * FourtySevenTokenCrowdsale have pre-sale and main sale periods, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate and the system of bonuses.\n * Funds collected are forwarded to a wallet as they arrive.\n * pre-sale and main sale periods both have caps defined in tokens\n */\n\ncontract FourtySevenTokenCrowdsale is Ownable {\n  using SafeMath for uint256;\n\n  struct TimeBonus {\n    uint256 bonusPeriodEndTime;\n    uint percent;\n    bool isAmountDependent;\n  }\n\n  struct AmountBonus {\n    uint256 amount;\n    uint percent;\n  }\n\n  // true for finalised crowdsale\n  bool public isFinalised;\n\n  // The token being sold\n  MintableToken public token;\n\n  // start and end timestamps where pre-investments are allowed (both inclusive)\n  uint256 public preSaleStartTime;\n  uint256 public preSaleEndTime;\n\n  // start and end timestamps where main-investments are allowed (both inclusive)\n  uint256 public mainSaleStartTime;\n  uint256 public mainSaleEndTime;\n\n  // maximum amout of wei for pre-sale and main sale\n  uint256 public preSaleWeiCap;\n  uint256 public mainSaleWeiCap;\n\n  // address where funds are collected\n  address public wallet;\n\n  // address where final 10% of funds will be collected\n  address public tokenWallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  TimeBonus[] public timeBonuses;\n  AmountBonus[] public amountBonuses;\n\n  uint256 public preSaleBonus;\n  uint256 public preSaleMinimumWei;\n  uint256 public defaultPercent;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n  event FinalisedCrowdsale(uint256 totalSupply, uint256 minterBenefit);\n\n  function FourtySevenTokenCrowdsale(uint256 _preSaleStartTime, uint256 _preSaleEndTime, uint256 _preSaleWeiCap, uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _mainSaleWeiCap, uint256 _rate, address _wallet, address _tokenWallet) public {\n\n    // can't start pre-sale in the past\n    require(_preSaleStartTime >= now);\n\n    // can't start main sale in the past\n    require(_mainSaleStartTime >= now);\n\n    // can't start main sale before the end of pre-sale\n    require(_preSaleEndTime < _mainSaleStartTime);\n\n    // the end of pre-sale can't happen before it's start\n    require(_preSaleStartTime < _preSaleEndTime);\n\n    // the end of main sale can't happen before it's start\n    require(_mainSaleStartTime < _mainSaleEndTime);\n\n    require(_rate > 0);\n    require(_preSaleWeiCap > 0);\n    require(_mainSaleWeiCap > 0);\n    require(_wallet != 0x0);\n    require(_tokenWallet != 0x0);\n\n    preSaleBonus = 30;\n    preSaleMinimumWei = 4700000000000000000;\n    defaultPercent = 0;\n\n    timeBonuses.push(TimeBonus(86400 * 3, 15, false));\n    timeBonuses.push(TimeBonus(86400 * 7, 10, false));\n    timeBonuses.push(TimeBonus(86400 * 14, 5, false));\n    timeBonuses.push(TimeBonus(86400 * 28, 0, true));\n\n    amountBonuses.push(AmountBonus(25000 ether, 15));\n    amountBonuses.push(AmountBonus(5000 ether, 10));\n    amountBonuses.push(AmountBonus(2500 ether, 5));\n    amountBonuses.push(AmountBonus(500 ether, 2));\n\n    token = createTokenContract();\n\n    preSaleStartTime = _preSaleStartTime;\n    preSaleEndTime = _preSaleEndTime;\n    preSaleWeiCap = _preSaleWeiCap;\n    mainSaleStartTime = _mainSaleStartTime;\n    mainSaleEndTime = _mainSaleEndTime;\n    mainSaleWeiCap = _mainSaleWeiCap;\n    rate = _rate;\n    wallet = _wallet;\n    tokenWallet = _tokenWallet;\n    isFinalised = false;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new FSBToken();\n  }\n\n  // fallback function can be used to buy tokens\n  function () payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != 0x0);\n    require(msg.value != 0);\n    require(!isFinalised);\n\n    uint256 weiAmount = msg.value;\n\n    validateWithinPeriods();\n    validateWithinCaps(weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    uint256 percent = getBonusPercent(tokens, now);\n\n    // add bonus to tokens depends on the period\n    uint256 bonusedTokens = applyBonus(tokens, percent);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n    token.mint(beneficiary, bonusedTokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n\n    forwardFunds();\n  }\n\n  // owner can mint tokens during crowdsale withing defined caps\n  function mintTokens(address beneficiary, uint256 weiAmount, uint256 forcePercent) external onlyOwner returns (bool) {\n\n    require(forcePercent <= 100);\n    require(beneficiary != 0x0);\n    require(weiAmount != 0);\n    require(!isFinalised);\n\n    validateWithinCaps(weiAmount);\n\n    uint256 percent = 0;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    if (forcePercent == 0) {\n      percent = getBonusPercent(tokens, now);\n    } else {\n      percent = forcePercent;\n    }\n\n    // add bonus to tokens depends on the period\n    uint256 bonusedTokens = applyBonus(tokens, percent);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n    token.mint(beneficiary, bonusedTokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n  }\n\n  // finish crowdsale,\n  // take totalSupply as 90% and mint 10% more to specified owner's wallet\n  // then stop minting forever\n\n  function finaliseCrowdsale() external onlyOwner {\n    require(!isFinalised);\n    uint256 totalSupply = token.totalSupply();\n    uint256 minterBenefit = totalSupply.mul(10).div(90);\n    token.mint(tokenWallet, minterBenefit);\n    token.finishMinting();\n    FinalisedCrowdsale(totalSupply, minterBenefit);\n    isFinalised = true;\n  }\n\n  // set new dates for pre-salev (emergency case)\n  function setPreSaleParameters(uint256 _preSaleStartTime, uint256 _preSaleEndTime, uint256 _preSaleWeiCap, uint256 _preSaleBonus, uint256 _preSaleMinimumWei) public onlyOwner {\n    require(!isFinalised);\n    require(_preSaleStartTime < _preSaleEndTime);\n    require(_preSaleWeiCap > 0);\n    preSaleStartTime = _preSaleStartTime;\n    preSaleEndTime = _preSaleEndTime;\n    preSaleWeiCap = _preSaleWeiCap;\n    preSaleBonus = _preSaleBonus;\n    preSaleMinimumWei = _preSaleMinimumWei;\n  }\n\n  // set new dates for main-sale (emergency case)\n  function setMainSaleParameters(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _mainSaleWeiCap) public onlyOwner {\n    require(!isFinalised);\n    require(_mainSaleStartTime < _mainSaleEndTime);\n    require(_mainSaleWeiCap > 0);\n    mainSaleStartTime = _mainSaleStartTime;\n    mainSaleEndTime = _mainSaleEndTime;\n    mainSaleWeiCap = _mainSaleWeiCap;\n  }\n\n  // set new wallets (emergency case)\n  function setWallets(address _wallet, address _tokenWallet) public onlyOwner {\n    require(!isFinalised);\n    require(_wallet != 0x0);\n    require(_tokenWallet != 0x0);\n    wallet = _wallet;\n    tokenWallet = _tokenWallet;\n  }\n\n  // set new rate (emergency case)\n  function setRate(uint256 _rate) public onlyOwner {\n    require(!isFinalised);\n    require(_rate > 0);\n    rate = _rate;\n  }\n\n  // set token on pause\n  function pauseToken() external onlyOwner {\n    require(!isFinalised);\n    FSBToken(token).pause();\n  }\n\n  // unset token's pause\n  function unpauseToken() external onlyOwner {\n    FSBToken(token).unpause();\n  }\n\n    // set token Ownership\n  function transferTokenOwnership(address newOwner) external onlyOwner {\n    FSBToken(token).transferOwnership(newOwner);\n  }\n\n  // @return true if main sale event has ended\n  function mainSaleHasEnded() external constant returns (bool) {\n    return now > mainSaleEndTime;\n  }\n\n  // @return true if pre sale event has ended\n  function preSaleHasEnded() external constant returns (bool) {\n    return now > preSaleEndTime;\n  }\n\n  // send ether to the fund collection wallet\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // we want to be able to check all bonuses in already deployed contract\n  // that's why we pass currentTime as a parameter instead of using \"now\"\n\n  function getBonusPercent(uint256 tokens, uint256 currentTime) public constant returns (uint256 percent) {\n    //require(currentTime >= preSaleStartTime);\n    bool isPreSale = currentTime >= preSaleStartTime && currentTime <= preSaleEndTime;\n    if (isPreSale) {\n      return preSaleBonus;\n    } else {\n      uint256 diffInSeconds = currentTime.sub(mainSaleStartTime);\n      for (uint i = 0; i < timeBonuses.length; i++) {\n        if (diffInSeconds <= timeBonuses[i].bonusPeriodEndTime && !timeBonuses[i].isAmountDependent) {\n          return timeBonuses[i].percent;\n        } else if (timeBonuses[i].isAmountDependent) {\n          for (uint j = 0; j < amountBonuses.length; j++) {\n            if (tokens >= amountBonuses[j].amount) {\n              return amountBonuses[j].percent;\n            }\n          }\n        }\n      }\n    }\n    return defaultPercent;\n  }\n\n  function applyBonus(uint256 tokens, uint256 percent) internal constant returns (uint256 bonusedTokens) {\n    uint256 tokensToAdd = tokens.mul(percent).div(100);\n    return tokens.add(tokensToAdd);\n  }\n\n  function validateWithinPeriods() internal constant {\n    // within pre-sale or main sale\n    require((now >= preSaleStartTime && now <= preSaleEndTime) || (now >= mainSaleStartTime && now <= mainSaleEndTime));\n  }\n\n  function validateWithinCaps(uint256 weiAmount) internal constant {\n    uint256 expectedWeiRaised = weiRaised.add(weiAmount);\n\n    // within pre-sale\n    if (now >= preSaleStartTime && now <= preSaleEndTime) {\n      require(weiAmount >= preSaleMinimumWei);\n      require(expectedWeiRaised <= preSaleWeiCap);\n    }\n\n    // within main sale\n    if (now >= mainSaleStartTime && now <= mainSaleEndTime) {\n      require(expectedWeiRaised <= mainSaleWeiCap);\n    }\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a61ffff02191690555b60038054600160a060020a03191633600160a060020a03161790555b5b611038806100426000396000f3006060604052361561010f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461011457806306fdde031461013b578063095ea7b3146101c657806318160ddd146101fc57806323b872dd14610221578063313ce5671461025d5780633f4ba83a1461028657806340c10f191461029b57806354fd4d50146102d15780635c975abb1461035c578063661884631461038357806370a08231146103b95780637d64bcb4146103ea5780638456cb59146104115780638da5cb5b1461042657806395d89b4114610455578063a9059cbb146104e0578063d73dd62314610516578063dd62ed3e1461054c578063f2fde38b14610583575b600080fd5b341561011f57600080fd5b6101276105a4565b604051901515815260200160405180910390f35b341561014657600080fd5b61014e6105c5565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018b5780820151818401525b602001610172565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d157600080fd5b610127600160a060020a03600435166024356105fc565b604051901515815260200160405180910390f35b341561020757600080fd5b61020f61062a565b60405190815260200160405180910390f35b341561022c57600080fd5b610127600160a060020a0360043581169060243516604435610630565b604051901515815260200160405180910390f35b341561026857600080fd5b610270610660565b60405160ff909116815260200160405180910390f35b341561029157600080fd5b610299610665565b005b34156102a657600080fd5b610127600160a060020a03600435166024356106e8565b604051901515815260200160405180910390f35b34156102dc57600080fd5b61014e610809565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018b5780820151818401525b602001610172565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036757600080fd5b610127610840565b604051901515815260200160405180910390f35b341561038e57600080fd5b610127600160a060020a0360043516602435610850565b604051901515815260200160405180910390f35b34156103c457600080fd5b61020f600160a060020a036004351661087e565b60405190815260200160405180910390f35b34156103f557600080fd5b61012761089d565b604051901515815260200160405180910390f35b341561041c57600080fd5b610299610924565b005b341561043157600080fd5b6104396109ac565b604051600160a060020a03909116815260200160405180910390f35b341561046057600080fd5b61014e6109bb565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018b5780820151818401525b602001610172565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104eb57600080fd5b610127600160a060020a03600435166024356109f2565b604051901515815260200160405180910390f35b341561052157600080fd5b610127600160a060020a0360043516602435610a20565b604051901515815260200160405180910390f35b341561055757600080fd5b61020f600160a060020a0360043581169060243516610a4e565b60405190815260200160405180910390f35b341561058e57600080fd5b610299600160a060020a0360043516610a7b565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052601681527f466f72747920536576656e2042616e6b20546f6b656e00000000000000000000602082015281565b60035460009060a860020a900460ff161561061657600080fd5b6106208383610b14565b90505b5b92915050565b60005481565b60035460009060a860020a900460ff161561064a57600080fd5b610655848484610bbb565b90505b5b9392505050565b601281565b60035433600160a060020a0390811691161461068057600080fd5b60035460a860020a900460ff16151561069857600080fd5b6003805475ff000000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a15b5b5b565b60035460009033600160a060020a0390811691161461070657600080fd5b60035474010000000000000000000000000000000000000000900460ff161561072e57600080fd5b600054610741908363ffffffff610d3e16565b6000908155600160a060020a03841681526001602052604090205461076c908363ffffffff610d3e16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b5b92915050565b60408051908101604052600481527f48302e3100000000000000000000000000000000000000000000000000000000602082015281565b60035460a860020a900460ff1681565b60035460009060a860020a900460ff161561086a57600080fd5b6106208383610d58565b90505b5b92915050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a039081169116146108bb57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b60035433600160a060020a0390811691161461093f57600080fd5b60035460a860020a900460ff161561095657600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a15b5b5b565b600354600160a060020a031681565b60408051908101604052600481527f4653425400000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a860020a900460ff1615610a0c57600080fd5b6106208383610e54565b90505b5b92915050565b60035460009060a860020a900460ff1615610a3a57600080fd5b6106208383610f50565b90505b5b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a03908116911614610a9657600080fd5b600160a060020a0381161515610aab57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000811580610b465750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b1515610b5157600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6000600160a060020a0383161515610bd257600080fd5b600160a060020a038416600090815260016020526040902054821115610bf757600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610c2a57600080fd5b600160a060020a038416600090815260016020526040902054610c53908363ffffffff610ff516565b600160a060020a038086166000908152600160205260408082209390935590851681522054610c88908363ffffffff610d3e16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610cd0908363ffffffff610ff516565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b600082820183811015610d4d57fe5b8091505b5092915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610db557600160a060020a033381166000908152600260209081526040808320938816835292905290812055610dec565b610dc5818463ffffffff610ff516565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b6000600160a060020a0383161515610e6b57600080fd5b600160a060020a033316600090815260016020526040902054821115610e9057600080fd5b600160a060020a033316600090815260016020526040902054610eb9908363ffffffff610ff516565b600160a060020a033381166000908152600160205260408082209390935590851681522054610eee908363ffffffff610d3e16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610f88908363ffffffff610d3e16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b60008282111561100157fe5b508082035b929150505600a165627a7a72305820f43f7f5e5ffa9617f5001557fe956859f89b6e8ad5ce6a025668c09e92d269290029"
}