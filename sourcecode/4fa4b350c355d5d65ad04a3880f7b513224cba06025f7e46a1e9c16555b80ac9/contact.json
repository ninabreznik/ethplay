{
  "address": "0x0b12cf7964731f7190b74600fcdad9ba4cac870c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BZRxTokenSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-08\n*/\n\n/**\n * Copyright 2017â€“2018, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract UnlimitedAllowanceToken is StandardToken {\n\n    uint internal constant MAX_UINT = 2**256 - 1;\n    \n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance, and to add revert reasons.\n    /// @param _from Address to transfer from.\n    /// @param _to Address to transfer to.\n    /// @param _value Amount to transfer.\n    /// @return Success of transfer.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        uint allowance = allowed[_from][msg.sender];\n        require(_value <= balances[_from], \"insufficient balance\");\n        require(_value <= allowance, \"insufficient allowance\");\n        require(_to != address(0), \"token burn not allowed\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if (allowance < MAX_UINT) {\n            allowed[_from][msg.sender] = allowance.sub(_value);\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @dev Transfer token for a specified address, modified to add revert reasons.\n    /// @param _to The address to transfer to.\n    /// @param _value The amount to be transferred.\n    function transfer(\n        address _to,\n        uint256 _value)\n        public \n        returns (bool)\n    {\n        require(_value <= balances[msg.sender], \"insufficient balance\");\n        require(_to != address(0), \"token burn not allowed\");\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n}\n\ncontract BZRxToken is UnlimitedAllowanceToken, DetailedERC20, Ownable {\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    event LockingFinished();\n\n    bool public mintingFinished = false;\n    bool public lockingFinished = false;\n\n    mapping (address => bool) public minters;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    modifier hasMintPermission() {\n        require(minters[msg.sender]);\n        _;\n    }\n\n    modifier isLocked() {\n        require(!lockingFinished);\n        _;\n    }\n\n    constructor()\n        public\n        DetailedERC20(\n            \"bZx Protocol Token\",\n            \"BZRX\", \n            18\n        )\n    {\n        minters[msg.sender] = true;\n    }\n\n    /// @dev ERC20 transferFrom function\n    /// @param _from Address to transfer from.\n    /// @param _to Address to transfer to.\n    /// @param _value Amount to transfer.\n    /// @return Success of transfer.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        if (lockingFinished || minters[msg.sender]) {\n            return super.transferFrom(\n                _from,\n                _to,\n                _value\n            );\n        }\n\n        revert(\"this token is locked for transfers\");\n    }\n\n    /// @dev ERC20 transfer function\n    /// @param _to Address to transfer to.\n    /// @param _value Amount to transfer.\n    /// @return Success of transfer.\n    function transfer(\n        address _to, \n        uint256 _value) \n        public \n        returns (bool)\n    {\n        if (lockingFinished || minters[msg.sender]) {\n            return super.transfer(\n                _to,\n                _value\n            );\n        }\n\n        revert(\"this token is locked for transfers\");\n    }\n\n    /// @dev Allows minter to initiate a transfer on behalf of another spender\n    /// @param _spender Minter with permission to spend.\n    /// @param _from Address to transfer from.\n    /// @param _to Address to transfer to.\n    /// @param _value Amount to transfer.\n    /// @return Success of transfer.\n    function minterTransferFrom(\n        address _spender,\n        address _from,\n        address _to,\n        uint256 _value)\n        public\n        hasMintPermission\n        canMint\n        returns (bool)\n    {\n        require(canTransfer(\n            _spender,\n            _from,\n            _value),\n            \"canTransfer is false\");\n\n        require(_to != address(0), \"token burn not allowed\");\n\n        uint allowance = allowed[_from][_spender];\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if (allowance < MAX_UINT) {\n            allowed[_from][_spender] = allowance.sub(_value);\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(\n        address _to,\n        uint256 _amount)\n        public\n        hasMintPermission\n        canMint\n        returns (bool)\n    {\n        require(_to != address(0), \"token burn not allowed\");\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() \n        public \n        onlyOwner \n        canMint \n    {\n        mintingFinished = true;\n        emit MintFinished();\n    }\n\n    /**\n    * @dev Function to stop locking token.\n    * @return True if the operation was successful.\n    */\n    function finishLocking() \n        public \n        onlyOwner \n        isLocked \n    {\n        lockingFinished = true;\n        emit LockingFinished();\n    }\n\n    /**\n    * @dev Function to add minter address.\n    * @return True if the operation was successful.\n    */\n    function addMinter(\n        address _minter) \n        public \n        onlyOwner \n        canMint \n    {\n        minters[_minter] = true;\n    }\n\n    /**\n    * @dev Function to remove minter address.\n    * @return True if the operation was successful.\n    */\n    function removeMinter(\n        address _minter) \n        public \n        onlyOwner \n        canMint \n    {\n        minters[_minter] = false;\n    }\n\n    /**\n    * @dev Function to check balance and allowance for a spender.\n    * @return True transfer will succeed based on balance and allowance.\n    */\n    function canTransfer(\n        address _spender,\n        address _from,\n        uint256 _value)\n        public\n        view\n        returns (bool)\n    {\n        return (\n            balances[_from] >= _value && \n            (_spender == _from || allowed[_from][_spender] >= _value)\n        );\n    }\n}\n\ninterface WETHInterface {\n    function deposit() external payable;\n    function withdraw(uint wad) external;\n}\n\ncontract BZRxTokenSale is Ownable {\n    using SafeMath for uint256;\n\n    uint public constant tokenPrice = 73 * 10**12; // 0.000073 ETH\n\n    struct TokenPurchases {\n        uint totalETH;\n        uint totalTokens;\n        uint totalTokenBonus;\n    }\n\n    event BonusChanged(uint oldBonus, uint newBonus);\n    event TokenPurchase(address indexed buyer, uint ethAmount, uint tokensReceived);\n    \n    event SaleOpened(uint bonusMultiplier);\n    event SaleClosed(uint bonusMultiplier);\n    \n    bool public saleClosed = true;\n\n    address public bZRxTokenContractAddress;    // BZRX Token\n    address public bZxVaultAddress;             // bZx Vault\n    address public wethContractAddress;         // WETH Token\n\n    // The current token bonus offered to purchasers (example: 110 == 10% bonus)\n    uint public bonusMultiplier;\n\n    uint public ethRaised;\n\n    address[] public purchasers;\n    mapping (address => TokenPurchases) public purchases;\n\n    bool public whitelistEnforced = false;\n    mapping (address => uint) public whitelist;\n\n    modifier saleOpen() {\n        require(!saleClosed, \"sale is closed\");\n        _;\n    }\n\n    modifier whitelisted(address user, uint value) {\n        require(canPurchaseAmount(user, value), \"not whitelisted\");\n        _;\n    }\n\n    constructor(\n        address _bZRxTokenContractAddress,\n        address _bZxVaultAddress,\n        address _wethContractAddress,\n        uint _bonusMultiplier,\n        uint _previousAmountRaised)\n        public\n    {\n        require(_bonusMultiplier > 100);\n        \n        bZRxTokenContractAddress = _bZRxTokenContractAddress;\n        bZxVaultAddress = _bZxVaultAddress;\n        wethContractAddress = _wethContractAddress;\n        bonusMultiplier = _bonusMultiplier;\n        ethRaised = _previousAmountRaised;\n    }\n\n    function()  \n        public\n        payable \n    {\n        if (msg.sender != wethContractAddress && msg.sender != owner)\n            buyToken();\n    }\n\n    function buyToken()\n        public\n        payable \n        saleOpen\n        whitelisted(msg.sender, msg.value)\n        returns (bool)\n    {\n        require(msg.value > 0, \"no ether sent\");\n        \n        ethRaised += msg.value;\n\n        uint tokenAmount = msg.value                        // amount of ETH sent\n                            .mul(10**18).div(tokenPrice);   // fixed ETH price per token (0.000073 ETH)\n\n        uint tokenAmountAndBonus = tokenAmount\n                                        .mul(bonusMultiplier).div(100);\n\n        TokenPurchases storage purchase = purchases[msg.sender];\n        \n        if (purchase.totalETH == 0) {\n            purchasers.push(msg.sender);\n        }\n        \n        purchase.totalETH += msg.value;\n        purchase.totalTokens += tokenAmountAndBonus;\n        purchase.totalTokenBonus += tokenAmountAndBonus.sub(tokenAmount);\n\n        emit TokenPurchase(msg.sender, msg.value, tokenAmountAndBonus);\n\n        return BZRxToken(bZRxTokenContractAddress).mint(\n            msg.sender,\n            tokenAmountAndBonus\n        );\n    }\n\n    // conforms to ERC20 transferFrom function for BZRX token support\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n        public\n        saleOpen\n        returns (bool)\n    {\n        require(msg.sender == bZxVaultAddress, \"only the bZx vault can call this function\");\n        \n        if (BZRxToken(bZRxTokenContractAddress).canTransfer(msg.sender, _from, _value)) {\n            return BZRxToken(bZRxTokenContractAddress).minterTransferFrom(\n                msg.sender,\n                _from,\n                _to,\n                _value\n            );\n        } else {\n            uint wethValue = _value                             // amount of BZRX\n                                .mul(tokenPrice).div(10**18);   // fixed ETH price per token (0.000073 ETH)\n\n            require(canPurchaseAmount(_from, wethValue), \"not whitelisted\");\n\n            require(StandardToken(wethContractAddress).transferFrom(\n                _from,\n                this,\n                wethValue\n            ), \"weth transfer failed\");\n\n            ethRaised += wethValue;\n\n            TokenPurchases storage purchase = purchases[_from];\n\n            if (purchase.totalETH == 0) {\n                purchasers.push(_from);\n            }\n\n            purchase.totalETH += wethValue;\n            purchase.totalTokens += _value;\n\n            return BZRxToken(bZRxTokenContractAddress).mint(\n                _to,\n                _value\n            );\n        }\n    }\n\n    /**\n    * @dev Function to close the token sale for this contract.\n    * @return True if the operation was successful.\n    */\n    function closeSale(\n        bool _closed) \n        public \n        onlyOwner \n        returns (bool)\n    {\n        saleClosed = _closed;\n\n        if (_closed)\n            emit SaleClosed(bonusMultiplier);\n        else\n            emit SaleOpened(bonusMultiplier);\n\n        return true;\n    }\n\n    function changeBZRxTokenContract(\n        address _bZRxTokenContractAddress) \n        public \n        onlyOwner \n        returns (bool)\n    {\n        bZRxTokenContractAddress = _bZRxTokenContractAddress;\n        return true;\n    }\n\n    function changeBZxVault(\n        address _bZxVaultAddress) \n        public \n        onlyOwner \n        returns (bool)\n    {\n        bZxVaultAddress = _bZxVaultAddress;\n        return true;\n    }\n\n    function changeWethContract(\n        address _wethContractAddress) \n        public \n        onlyOwner \n        returns (bool)\n    {\n        wethContractAddress = _wethContractAddress;\n        return true;\n    }\n\n    function changeBonusMultiplier(\n        uint _newBonusMultiplier) \n        public \n        onlyOwner \n        returns (bool)\n    {\n        require(bonusMultiplier != _newBonusMultiplier && _newBonusMultiplier > 100);\n        emit BonusChanged(bonusMultiplier, _newBonusMultiplier);\n        bonusMultiplier = _newBonusMultiplier;\n        return true;\n    }\n\n    function unwrapEth() \n        public \n        onlyOwner \n        returns (bool)\n    {\n        uint balance = StandardToken(wethContractAddress).balanceOf.gas(4999)(this);\n        if (balance == 0)\n            return false;\n\n        WETHInterface(wethContractAddress).withdraw(balance);\n        return true;\n    }\n\n    function transferEther(\n        address _to,\n        uint _value)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        uint amount = _value;\n        if (amount > address(this).balance) {\n            amount = address(this).balance;\n        }\n\n        return (_to.send(amount));\n    }\n\n    function transferToken(\n        address _tokenAddress,\n        address _to,\n        uint _value)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        uint balance = StandardToken(_tokenAddress).balanceOf.gas(4999)(this);\n        if (_value > balance) {\n            return StandardToken(_tokenAddress).transfer(\n                _to,\n                balance\n            );\n        } else {\n            return StandardToken(_tokenAddress).transfer(\n                _to,\n                _value\n            );\n        }\n    }\n\n    function enforceWhitelist(\n        bool _isEnforced) \n        public \n        onlyOwner \n        returns (bool)\n    {\n        whitelistEnforced = _isEnforced;\n\n        return true;\n    }\n\n    function setWhitelist(\n        address[] _users,\n        uint[] _values) \n        public \n        onlyOwner \n        returns (bool)\n    {\n        require(_users.length == _values.length, \"users and values count mismatch\");\n        \n        for (uint i=0; i < _users.length; i++) {\n            whitelist[_users[i]] = _values[i];\n        }\n\n        return true;\n    }\n\n\n    function canPurchaseAmount(\n        address _user,\n        uint _value)\n        public\n        view\n        returns (bool)\n    {\n        if (!whitelistEnforced || (whitelist[_user] > 0 && purchases[_user].totalETH.add(_value) <= whitelist[_user])) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000001c74cff0376fb4031cd7492cd6db2d66c3f2c6b90000000000000000000000007f9ef329fdc33b35985885f360de2f01d476bd70000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000000000000000000000000010e418bd283f50000"
}