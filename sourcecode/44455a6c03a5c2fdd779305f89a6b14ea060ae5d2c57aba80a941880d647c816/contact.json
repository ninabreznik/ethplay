{
  "address": "0xf155559E016cE2ecE37B22d1bfeB62A24bC7690f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RetroArt",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\n// File: contracts\\Common\\ERC165.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: contracts\\ERC721\\ERC721Basic.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data \n  )\n    public;\n}\n\n// File: contracts\\ERC721\\ERC721.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string memory _name);\n  function symbol() external view returns (string memory _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: contracts\\ERC721\\ERC721Receiver.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes memory _data \n  )\n    public\n    returns(bytes4);\n}\n\n// File: contracts\\Common\\SafeMath.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts\\Common\\AddressUtils.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts\\Common\\SupportsInterfaceWithLookup.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: contracts\\ERC721\\ERC721BasicToken.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    public\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: contracts\\ERC721\\ERC721Token.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string memory _name, string memory _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string memory) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string memory) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string memory _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    ownedTokens[_from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: contracts\\PriceRecord.sol\n\npragma solidity ^0.5.0;\n\nlibrary RecordKeeping {\n    struct priceRecord {\n        uint256 price;\n        address owner;\n        uint256 timestamp;\n\n    }\n}\n\n// File: contracts\\Common\\Ownable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts\\Withdrawable.sol\n\npragma solidity ^0.5.0;\n\n/// @title Withdrawable\n/// @dev \n/// @notice \n\ncontract Withdrawable  is Ownable {\n    \n    // _changeType is used to indicate the type of the transaction\n    // 0 - normal withdraw \n    // 1 - deposit from selling asset\n    // 2 - deposit from profit sharing of new token\n    // 3 - deposit from auction\n    // 4 - failed auction refund\n    // 5 - referral commission\n\n    event BalanceChanged(address indexed _owner, int256 _change,  uint256 _balance, uint8 _changeType);\n  \n    mapping (address => uint256) internal pendingWithdrawals;\n  \n    //total pending amount\n    uint256 internal totalPendingAmount;\n\n    function _deposit(address addressToDeposit, uint256 amount, uint8 changeType) internal{      \n        if (amount > 0) {\n            _depositWithoutEvent(addressToDeposit, amount);\n            emit BalanceChanged(addressToDeposit, int256(amount), pendingWithdrawals[addressToDeposit], changeType);\n        }\n    }\n\n    function _depositWithoutEvent(address addressToDeposit, uint256 amount) internal{\n        pendingWithdrawals[addressToDeposit] += amount;\n        totalPendingAmount += amount;       \n    }\n\n    function getBalance(address addressToCheck) public view returns (uint256){\n        return pendingWithdrawals[addressToCheck];\n    }\n\n    function withdrawOwnFund(address payable recipient_address) public {\n        require(msg.sender==recipient_address);\n\n        uint amount = pendingWithdrawals[recipient_address];\n        require(amount > 0);\n        // Remember to zero the pending refund before\n        // sending to prevent re-entrancy attacks\n        pendingWithdrawals[recipient_address] = 0;\n        totalPendingAmount -= amount;\n        recipient_address.transfer(amount);\n        emit BalanceChanged(recipient_address, -1 * int256(amount),  0, 0);\n    }\n\n    function checkAvailableContractBalance() public view returns (uint256){\n        if (address(this).balance > totalPendingAmount){\n            return address(this).balance - totalPendingAmount;\n        } else{\n            return 0;\n        }\n    }\n    function withdrawContractFund(address payable recipient_address) public onlyOwner  {\n        uint256 amountToWithdraw = checkAvailableContractBalance();\n        if (amountToWithdraw > 0){\n            recipient_address.transfer(amountToWithdraw);\n        }\n    }\n}\n\n// File: contracts\\ERC721WithState.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract ERC721WithState is ERC721BasicToken {\n    mapping (uint256 => uint8) internal tokenState;\n\n    event TokenStateSet(uint256 indexed _tokenId,  uint8 _state);\n\n    function setTokenState(uint256  _tokenId,  uint8 _state) public  {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        require(exists(_tokenId)); \n        tokenState[_tokenId] = _state;      \n        emit TokenStateSet(_tokenId, _state);\n    }\n\n    function getTokenState(uint256  _tokenId) public view returns (uint8){\n        require(exists(_tokenId));\n        return tokenState[_tokenId];\n    } \n\n\n}\n\n// File: contracts\\RetroArt.sol\n\npragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\ncontract RetroArt is ERC721Token, Ownable, Withdrawable, ERC721WithState {\n    \n    address public stemTokenContractAddress; \n    uint256 public currentPrice;\n    uint256 constant initiailPrice = 0.03 ether;\n    //new asset price increase at the rate that determined by the variable below\n    //it is caculated from the current price + (current price / ( price rate * totalTokens / slowDownRate ))\n    uint public priceRate = 10;\n    uint public slowDownRate = 7;\n    //Commission will be charged if a profit is made\n    //Commission is the pure profit / profit Commission  \n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public profitCommission = 500;\n\n    //the referral percentage of the commission of selling of aset\n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public referralCommission = 3000;\n\n    //share will be given to all tokens equally if a new asset is acquired. \n    //the amount of total shared value is assetValue/sharePercentage   \n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public sharePercentage = 3000;\n\n    //number of shares for acquiring new asset. \n    uint public numberOfShares = 10;\n\n    string public uriPrefix =\"\";\n\n\n    // Mapping from owner to list of owned token IDs\n    mapping (uint256 => string) internal tokenTitles;\n    mapping (uint256 => RecordKeeping.priceRecord) internal initialPriceRecords;\n    mapping (uint256 => RecordKeeping.priceRecord) internal lastPriceRecords;\n    mapping (uint256 => uint256) internal currentTokenPrices;\n\n\n    event AssetAcquired(address indexed _owner, uint256 indexed _tokenId, string  _title, uint256 _price);\n    event TokenPriceSet(uint256 indexed _tokenId,  uint256 _price);\n    event TokenBrought(address indexed _from, address indexed _to, uint256 indexed _tokenId, uint256 _price);\n    event PriceRateChanged(uint _priceRate);\n    event SlowDownRateChanged(uint _slowDownRate);\n    event ProfitCommissionChanged(uint _profitCommission);\n    event MintPriceChanged(uint256 _price);\n    event SharePercentageChanged(uint _sharePercentage);\n    event NumberOfSharesChanged(uint _numberOfShares);\n    event ReferralCommissionChanged(uint _referralCommission);\n    event Burn(address indexed _owner, uint256 _tokenId);\n\n   \n\n    bytes4 private constant InterfaceId_RetroArt = 0x94fb30be;\n    /*\n    bytes4(keccak256(\"buyTokenFrom(address,address,uint256)\"))^\n    bytes4(keccak256(\"setTokenPrice(uint256,uint256)\"))^\n    bytes4(keccak256(\"setTokenState(uint256,uint8)\"))^\n    bytes4(keccak256(\"getTokenState(uint256)\"));\n    */\n\n    address[] internal auctionContractAddresses;\n \n   \n\n    function tokenTitle(uint256 _tokenId) public view returns (string memory) {\n        require(exists(_tokenId));\n        return tokenTitles[_tokenId];\n    }\n    function lastPriceOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  lastPriceRecords[_tokenId].price;\n    }   \n\n    function lastTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  lastPriceRecords[_tokenId].timestamp;\n    }\n\n    function firstPriceOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].price;\n    }   \n    function creatorOf(uint256 _tokenId) public view returns (address) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].owner;\n    }\n    function firstTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].timestamp;\n    }\n    \n  \n    //problem with current web3.js that can't return an array of struct\n    function lastHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\n        require(exists(_tokenId));\n        return lastPriceRecords[_tokenId];\n    }\n\n    function firstHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\n        require(exists(_tokenId)); \n        return   initialPriceRecords[_tokenId];\n    }\n\n    function setPriceRate(uint _priceRate) public onlyOwner {\n        priceRate = _priceRate;\n        emit PriceRateChanged(priceRate);\n    }\n\n    function setSlowDownRate(uint _slowDownRate) public onlyOwner {\n        slowDownRate = _slowDownRate;\n        emit SlowDownRateChanged(slowDownRate);\n    }\n \n    function setprofitCommission(uint _profitCommission) public onlyOwner {\n        require(_profitCommission <= 10000);\n        profitCommission = _profitCommission;\n        emit ProfitCommissionChanged(profitCommission);\n    }\n\n    function setSharePercentage(uint _sharePercentage) public onlyOwner  {\n        require(_sharePercentage <= 10000);\n        sharePercentage = _sharePercentage;\n        emit SharePercentageChanged(sharePercentage);\n    }\n\n    function setNumberOfShares(uint _numberOfShares) public onlyOwner  {\n        numberOfShares = _numberOfShares;\n        emit NumberOfSharesChanged(numberOfShares);\n    }\n\n    function setReferralCommission(uint _referralCommission) public onlyOwner  {\n        require(_referralCommission <= 10000);\n        referralCommission = _referralCommission;\n        emit ReferralCommissionChanged(referralCommission);\n    }\n\n    function setUriPrefix(string memory _uri) public onlyOwner  {\n       uriPrefix = _uri;\n    }\n  \n    //use the token name, symbol as usual\n    //this contract create another ERC20 as stemToken,\n    //the constructure takes the stemTokenName and stemTokenSymbol\n\n    constructor(string memory _name, string memory _symbol , address _stemTokenAddress) \n        ERC721Token(_name, _symbol) Ownable() public {\n       \n        currentPrice = initiailPrice;\n        stemTokenContractAddress = _stemTokenAddress;\n        _registerInterface(InterfaceId_RetroArt);\n    }\n\n    function getAllAssets() public view returns (uint256[] memory){\n        return allTokens;\n    }\n\n    function getAllAssetsForSale() public view returns  (uint256[] memory){\n      \n        uint arrayLength = allTokens.length;\n        uint forSaleCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0) {\n                forSaleCount++;              \n            }\n        }\n        \n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0) {                \n                tokensForSale[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return tokensForSale;\n    }\n\n    function getAssetsForSale(address _owner) public view returns (uint256[] memory) {\n      \n        uint arrayLength = allTokens.length;\n        uint forSaleCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {\n                forSaleCount++;              \n            }\n        }\n        \n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {                \n                tokensForSale[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return tokensForSale;\n    }\n\n    function getAssetsByState(uint8 _state) public view returns (uint256[] memory){\n        \n        uint arrayLength = allTokens.length;\n        uint matchCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (tokenState[allTokens[i]] == _state) {\n                matchCount++;              \n            }\n        }\n        \n        uint256[] memory matchedTokens = new uint256[](matchCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (tokenState[allTokens[i]] == _state) {                \n                matchedTokens[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return matchedTokens;\n    }\n      \n\n    function acquireAsset(uint256 _tokenId, string memory _title) public payable{\n        acquireAssetWithReferral(_tokenId, _title, address(0));\n    }\n\n    function acquireAssetFromStemToken(address _tokenOwner, uint256 _tokenId, string calldata _title) external {     \n         require(msg.sender == stemTokenContractAddress);\n        _acquireAsset(_tokenId, _title, _tokenOwner, 0);\n    }\n\n    function acquireAssetWithReferral(uint256 _tokenId, string memory _title, address referralAddress) public payable{\n        require(msg.value >= currentPrice);\n        \n        uint totalShares = numberOfShares;\n        if (referralAddress != address(0)) totalShares++;\n\n        uint numberOfTokens = allTokens.length;\n     \n        if (numberOfTokens > 0 && sharePercentage > 0) {\n\n            uint256 perShareValue = 0;\n            uint256 totalShareValue = msg.value * sharePercentage / 10000 ;\n\n            if (totalShares > numberOfTokens) {\n                               \n                if (referralAddress != address(0)) \n                    perShareValue = totalShareValue / (numberOfTokens + 1);\n                else\n                    perShareValue = totalShareValue / numberOfTokens;\n            \n                for (uint i = 0; i < numberOfTokens; i++) {\n                    //turn off events if there are too many tokens in the loop\n                    if (numberOfTokens > 100) {\n                        _depositWithoutEvent(tokenOwner[allTokens[i]], perShareValue);\n                    }else{\n                        _deposit(tokenOwner[allTokens[i]], perShareValue, 2);\n                    }\n                }\n                \n            }else{\n               \n                if (referralAddress != address(0)) \n                    perShareValue = totalShareValue / (totalShares + 1);\n                else\n                    perShareValue = totalShareValue / totalShares;\n              \n                uint[] memory randomArray = random(numberOfShares);\n\n                for (uint i = 0; i < numberOfShares; i++) {\n                    uint index = randomArray[i] % numberOfTokens;\n\n                    if (numberOfShares > 100) {\n                        _depositWithoutEvent(tokenOwner[allTokens[index]], perShareValue);\n                    }else{\n                        _deposit(tokenOwner[allTokens[index]], perShareValue, 2);\n                    }\n                }\n            }\n                    \n            if (referralAddress != address(0) && perShareValue > 0) _deposit(referralAddress, perShareValue, 5);\n\n        }\n\n        _acquireAsset(_tokenId, _title, msg.sender, msg.value);\n     \n    }\n\n    function _acquireAsset(uint256 _tokenId, string memory _title, address _purchaser, uint256 _value) internal {\n        \n        currentPrice = CalculateNextPrice();\n        _mint(_purchaser, _tokenId);        \n      \n        tokenTitles[_tokenId] = _title;\n       \n        RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _purchaser, block.timestamp);\n        initialPriceRecords[_tokenId] = pr;\n        lastPriceRecords[_tokenId] = pr;     \n\n        emit AssetAcquired(_purchaser,_tokenId, _title, _value);\n        emit TokenBrought(address(0), _purchaser, _tokenId, _value);\n        emit MintPriceChanged(currentPrice);\n    }\n\n    function CalculateNextPrice() public view returns (uint256){      \n        return currentPrice + currentPrice * slowDownRate / ( priceRate * (allTokens.length + 2));\n    }\n\n    function tokensOf(address _owner) public view returns (uint256[] memory){\n        return ownedTokens[_owner];\n    }\n\n    function _buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress, address _depositTo) internal {\n        require(currentTokenPrices[_tokenId] != 0);\n        require(msg.value >= currentTokenPrices[_tokenId]);\n        \n        tokenApprovals[_tokenId] = _to;\n        safeTransferFrom(_from,_to,_tokenId);\n\n        uint256 valueTransferToOwner = msg.value;\n        uint256 lastRecordPrice = lastPriceRecords[_tokenId].price;\n        if (msg.value >  lastRecordPrice){\n            uint256 profit = msg.value - lastRecordPrice;           \n            uint256 commission = profit * profitCommission / 10000;\n            valueTransferToOwner = msg.value - commission;\n            if (referralAddress != address(0)){\n                _deposit(referralAddress, commission * referralCommission / 10000, 5);\n            }           \n        }\n        \n        if (valueTransferToOwner > 0) _deposit(_depositTo, valueTransferToOwner, 1);\n        writePriceRecordForAssetSold(_depositTo, msg.sender, _tokenId, msg.value);\n        \n    }\n\n    function buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress) public payable {\n        _buyTokenFromWithReferral(_from, _to, _tokenId, referralAddress, _from);        \n    }\n\n    function buyTokenFrom(address _from, address _to, uint256 _tokenId) public payable {\n        buyTokenFromWithReferral(_from, _to, _tokenId, address(0));        \n    }   \n\n    function writePriceRecordForAssetSold(address _from, address _to, uint256 _tokenId, uint256 _value) internal {\n       RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _to, block.timestamp);\n       lastPriceRecords[_tokenId] = pr;\n       \n       tokenApprovals[_tokenId] = address(0);\n       currentTokenPrices[_tokenId] = 0;\n       emit TokenBrought(_from, _to, _tokenId, _value);       \n    }\n\n    function recordAuctionPriceRecord(address _from, address _to, uint256 _tokenId, uint256 _value)\n       external {\n\n       require(findAuctionContractIndex(msg.sender) >= 0); //make sure the sender is from one of the auction addresses\n       writePriceRecordForAssetSold(_from, _to, _tokenId, _value);\n\n    }\n\n    function setTokenPrice(uint256 _tokenId, uint256 _newPrice) public  {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        currentTokenPrices[_tokenId] = _newPrice;\n        emit TokenPriceSet(_tokenId, _newPrice);\n    }\n\n    function getTokenPrice(uint256 _tokenId)  public view returns(uint256) {\n        return currentTokenPrices[_tokenId];\n    }\n\n    function random(uint num) private view returns (uint[] memory) {\n        \n        uint base = uint(keccak256(abi.encodePacked(block.difficulty, now, tokenOwner[allTokens[allTokens.length-1]])));\n        uint[] memory randomNumbers = new uint[](num);\n        \n        for (uint i = 0; i<num; i++) {\n            randomNumbers[i] = base;\n            base = base * 2 ** 3;\n        }\n        return  randomNumbers;\n        \n    }\n\n\n    function getAsset(uint256 _tokenId)  external\n        view\n        returns\n    (\n        string memory title,            \n        address owner,     \n        address creator,      \n        uint256 currentTokenPrice,\n        uint256 lastPrice,\n        uint256 initialPrice,\n        uint256 lastDate,\n        uint256 createdDate\n    ) {\n        require(exists(_tokenId));\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\n\n        return (\n             \n            tokenTitles[_tokenId],        \n            tokenOwner[_tokenId],   \n            initialPriceRecord.owner,           \n            currentTokenPrices[_tokenId],      \n            lastPriceRecord.price,           \n            initialPriceRecord.price,\n            lastPriceRecord.timestamp,\n            initialPriceRecord.timestamp\n        );\n    }\n\n    function getAssetUpdatedInfo(uint256 _tokenId) external\n        view\n        returns\n    (         \n        address owner, \n        address approvedAddress,\n        uint256 currentTokenPrice,\n        uint256 lastPrice,      \n        uint256 lastDate\n      \n    ) {\n        require(exists(_tokenId));\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\n     \n        return (\n            tokenOwner[_tokenId],   \n            tokenApprovals[_tokenId],  \n            currentTokenPrices[_tokenId],      \n            lastPriceRecord.price,   \n            lastPriceRecord.timestamp           \n        );\n    }\n\n    function getAssetStaticInfo(uint256 _tokenId)  external\n        view\n        returns\n    (\n        string memory title,            \n        string memory tokenURI,    \n        address creator,            \n        uint256 initialPrice,       \n        uint256 createdDate\n    ) {\n        require(exists(_tokenId));      \n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\n\n        return (\n             \n            tokenTitles[_tokenId],        \n            tokenURIs[_tokenId],\n            initialPriceRecord.owner,\n            initialPriceRecord.price,         \n            initialPriceRecord.timestamp\n        );\n         \n    }\n\n    function burnExchangeToken(address _tokenOwner, uint256 _tokenId) external  {\n        require(msg.sender == stemTokenContractAddress);       \n        _burn(_tokenOwner, _tokenId);       \n        emit Burn(_tokenOwner, _tokenId);\n    }\n\n    function findAuctionContractIndex(address _addressToFind) public view returns (int)  {\n        \n        for (int i = 0; i < int(auctionContractAddresses.length); i++){\n            if (auctionContractAddresses[uint256(i)] == _addressToFind){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function addAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\n        require(findAuctionContractIndex(_auctionContractAddress) == -1);\n        auctionContractAddresses.push(_auctionContractAddress);\n    }\n\n    function removeAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\n        int index = findAuctionContractIndex(_auctionContractAddress);\n        require(index >= 0);        \n\n        for (uint i = uint(index); i < auctionContractAddresses.length-1; i++){\n            auctionContractAddresses[i] = auctionContractAddresses[i+1];         \n        }\n        auctionContractAddresses.length--;\n    }\n\n    function setStemTokenContractAddress(address _stemTokenContractAddress) public onlyOwner {        \n        stemTokenContractAddress = _stemTokenContractAddress;\n    }          \n   \n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        require(exists(_tokenId));   \n        return string(abi.encodePacked(uriPrefix, uint256ToString(_tokenId)));\n\n    }\n    // Functions used for generating the URI\n    function amountOfZeros(uint256 num, uint256 base) public pure returns(uint256){\n        uint256 result = 0;\n        num /= base;\n        while (num > 0){\n            num /= base;\n            result += 1;\n        }\n        return result;\n    }\n\n      function uint256ToString(uint256 num) public pure returns(string memory){\n        if (num == 0){\n            return \"0\";\n        }\n        uint256 numLen = amountOfZeros(num, 10) + 1;\n        bytes memory result = new bytes(numLen);\n        while(num != 0){\n            numLen -= 1;\n            result[numLen] = byte(uint8((num - (num / 10 * 10)) + 48));\n            num /= 10;\n        }\n        return string(result);\n    }\n\n}",
  "bytecode": "600a601281905560076013556101f4601455610bb8601581905560165560175560a06040819052600060808190526200003b9160189162000281565b503480156200004957600080fd5b506040516200439c3803806200439c83398101806040526200006f919081019062000397565b8282620000a57f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000062000214810204565b620000d97f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000214810204565b6200010d7f4f558e790000000000000000000000000000000000000000000000000000000064010000000062000214810204565b81516200012290600590602085019062000281565b5080516200013890600690602084019062000281565b506200016d7f780e9d630000000000000000000000000000000000000000000000000000000064010000000062000214810204565b620001a17f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000214810204565b5050600c805433600160a060020a031991821617909155666a94d74f43000060115560108054909116600160a060020a0383161790556200020b7f94fb30be0000000000000000000000000000000000000000000000000000000064010000000062000214810204565b505050620004bb565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200024457600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c457805160ff1916838001178555620002f4565b82800160010185558215620002f4579182015b82811115620002f4578251825591602001919060010190620002d7565b506200030292915062000306565b5090565b6200032391905b808211156200030257600081556001016200030d565b90565b600062000334825162000475565b9392505050565b6000601f820183136200034d57600080fd5b8151620003646200035e8262000441565b6200041a565b915080825260208301602083018583830111156200038157600080fd5b6200038e83828462000488565b50505092915050565b600080600060608486031215620003ad57600080fd5b83516001604060020a03811115620003c457600080fd5b620003d2868287016200033b565b93505060208401516001604060020a03811115620003ef57600080fd5b620003fd868287016200033b565b9250506040620004108682870162000326565b9150509250925092565b6040518181016001604060020a03811182821017156200043957600080fd5b604052919050565b60006001604060020a038211156200045857600080fd5b506020601f91909101601f19160190565b600160a060020a031690565b6000620004828262000469565b92915050565b60005b83811015620004a55781810151838201526020016200048b565b83811115620004b5576000848401525b50505050565b613ed180620004cb6000396000f3fe6080604052600436106103585763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461035d57806303b426fb1461039357806305a09615146103b557806306fdde03146103d7578063081812fc146103f9578063095ea7b31461042657806310a742481461044657806318160ddd1461046657806319dec6121461047b57806319fa8f501461049b57806323b872dd146104bd57806329476c8f146104dd5780632acada4d146104fd5780632bedc4e21461051f5780632e21b085146105345780632e437d99146105545780632f745c591461057457806342842e0e146105945780634f558e79146105b45780634f6ccce7146105d457806355fe20b8146105f457806356d3f06e14610607578063589a174314610638578063595a161b146106585780635a3f26721461067857806362b99ad4146106985780636352211e146106ad5780636786ed0e146106cd5780636ab3f557146106ed5780636b2a1d581461070d5780636f81582b1461072d57806370a082311461074d578063715018a61461076d57806375a3578b146107825780637ec4a659146107a257806382b914c4146107c25780638901f506146107d55780638da5cb5b146107f55780638e95804b1461080a57806391159e291461082a57806395d89b411461083f578063984559a41461085457806398c586db146108745780639d1b464a14610894578063a22cb465146108a9578063a5005a47146108c9578063b36bc0c7146108e9578063b88d4fde14610909578063bd30b22d14610929578063bfaa08531461093e578063c457fb3714610951578063c78b887114610971578063c87b56dd14610991578063ca0b43e1146109b1578063ce3fdca9146109c6578063ce7e51e3146109db578063ceb791d9146109fb578063cf2f7adc14610a10578063cfa8f6f414610a25578063e23b089a14610a45578063e44de42114610a65578063e82f9a0f14610a78578063e985e9c514610a98578063ea02cf9914610ab8578063eac8f5b814610ae9578063eb685c4714610b1d578063ed672e9614610b3d578063f1a2b13d14610b52578063f2fde38b14610b72578063f45fd0f314610b92578063f8b2cb4f14610bbf578063f8e71d4414610bdf578063fdf06c2914610bf4575b600080fd5b34801561036957600080fd5b5061037d610378366004613905565b610c14565b60405161038a9190613c23565b60405180910390f35b34801561039f57600080fd5b506103a8610c4c565b60405161038a9190613c3f565b3480156103c157600080fd5b506103d56103d0366004613675565b610c76565b005b3480156103e357600080fd5b506103ec610cf5565b60405161038a9190613c9d565b34801561040557600080fd5b50610419610414366004613976565b610d8b565b60405161038a9190613b7e565b34801561043257600080fd5b506103d561044136600461386d565b610da6565b34801561045257600080fd5b506103ec610461366004613976565b610e4f565b34801561047257600080fd5b506103a8610f04565b34801561048757600080fd5b506103d5610496366004613976565b610f0a565b3480156104a757600080fd5b506104b0610f61565b60405161038a9190613c31565b3480156104c957600080fd5b506103d56104d83660046136cd565b610f85565b3480156104e957600080fd5b506103d56104f83660046137e8565b611028565b34801561050957600080fd5b50610512611050565b60405161038a9190613c12565b34801561052b57600080fd5b506105126110a7565b34801561054057600080fd5b506103a861054f366004613976565b6111b8565b34801561056057600080fd5b506103d561056f36600461389d565b6111e1565b34801561058057600080fd5b506103a861058f36600461386d565b61123a565b3480156105a057600080fd5b506103d56105af3660046136cd565b611288565b3480156105c057600080fd5b5061037d6105cf366004613976565b6112a9565b3480156105e057600080fd5b506103a86105ef366004613976565b6112c6565b6103d561060236600461371a565b6112fb565b34801561061357600080fd5b50610627610622366004613976565b611308565b60405161038a959493929190613d2a565b34801561064457600080fd5b50610419610653366004613976565b6114b7565b34801561066457600080fd5b506103a8610673366004613a37565b6114ec565b34801561068457600080fd5b50610512610693366004613675565b611524565b3480156106a457600080fd5b506103ec61158f565b3480156106b957600080fd5b506104196106c8366004613976565b61161d565b3480156106d957600080fd5b506103d56106e8366004613976565b611641565b3480156106f957600080fd5b506103d5610708366004613675565b61168d565b34801561071957600080fd5b50610512610728366004613675565b611763565b34801561073957600080fd5b506103d5610748366004613a56565b61190b565b34801561075957600080fd5b506103a8610768366004613675565b611981565b34801561077957600080fd5b506103d56119b4565b34801561078e57600080fd5b506103d561079d36600461386d565b611a15565b3480156107ae57600080fd5b506103d56107bd366004613941565b611a6f565b6103d56107d0366004613994565b611a9d565b3480156107e157600080fd5b506103a86107f0366004613976565b611aa9565b34801561080157600080fd5b50610419611ad5565b34801561081657600080fd5b506103d5610825366004613675565b611ae4565b34801561083657600080fd5b50610419611b1d565b34801561084b57600080fd5b506103ec611b2c565b34801561086057600080fd5b506103d561086f366004613976565b611b8d565b34801561088057600080fd5b506103a861088f366004613976565b611bd9565b3480156108a057600080fd5b506103a8611c02565b3480156108b557600080fd5b506103d56108c436600461383d565b611c08565b3480156108d557600080fd5b506103d56108e4366004613675565b611c8d565b3480156108f557600080fd5b506103d5610904366004613976565b611d4b565b34801561091557600080fd5b506103d561092436600461377b565b611da6565b34801561093557600080fd5b506103a8611dc8565b6103d561094c3660046139dc565b611dce565b34801561095d57600080fd5b506103a861096c366004613976565b612058565b34801561097d57600080fd5b5061051261098c366004613a86565b61206a565b34801561099d57600080fd5b506103ec6109ac366004613976565b61217f565b3480156109bd57600080fd5b506103a8612266565b3480156109d257600080fd5b506103a861226c565b3480156109e757600080fd5b506103ec6109f6366004613976565b612272565b348015610a0757600080fd5b506103a861237c565b348015610a1c57600080fd5b506103a8612382565b348015610a3157600080fd5b506103d5610a40366004613976565b6123a4565b348015610a5157600080fd5b506103d5610a60366004613976565b6123ff565b6103d5610a733660046136cd565b61245a565b348015610a8457600080fd5b506103a8610a93366004613675565b612467565b348015610aa457600080fd5b5061037d610ab3366004613693565b6124c2565b348015610ac457600080fd5b50610ad8610ad3366004613976565b6124f0565b60405161038a959493929190613bd0565b348015610af557600080fd5b50610b09610b04366004613976565b612588565b60405161038a989796959493929190613cae565b348015610b2957600080fd5b506103d5610b38366004613a37565b61277c565b348015610b4957600080fd5b506103a86127d4565b348015610b5e57600080fd5b506103a8610b6d366004613976565b6127da565b348015610b7e57600080fd5b506103d5610b8d366004613675565b612806565b348015610b9e57600080fd5b50610bb2610bad366004613976565b612829565b60405161038a9190613d7e565b348015610bcb57600080fd5b506103a8610bda366004613675565b612855565b348015610beb57600080fd5b506103a8612870565b348015610c0057600080fd5b506103d5610c0f366004613675565b612876565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811660009081526020819052604090205460ff165b919050565b60006009805490506002016012540260135460115402811515610c6b57fe5b046011540190505b90565b600c54600160a060020a03163314610c8d57600080fd5b610c9681612467565b60001914610ca357600080fd5b601d80546001810182556000919091527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f018054600160a060020a031916600160a060020a0392909216919091179055565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d815780601f10610d5657610100808354040283529160200191610d81565b820191906000526020600020905b815481529060010190602001808311610d6457829003601f168201915b5050505050905090565b600090815260026020526040902054600160a060020a031690565b6000610db18261161d565b9050600160a060020a038381169082161415610dcc57600080fd5b33600160a060020a0382161480610de85750610de881336124c2565b1515610df357600080fd5b6000828152600260205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6060610e5a826112a9565b1515610e6557600080fd5b60008281526019602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b50505050509050919050565b60095490565b600c54600160a060020a03163314610f2157600080fd5b60178190556040517f6a704769301fab1e180c65d4514c278c66599b7ec48e8ba75a07087483e31c5e90610f56908390613c3f565b60405180910390a150565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b610f8f33826128d8565b1515610f9a57600080fd5b600160a060020a0383161515610faf57600080fd5b600160a060020a0382161515610fc457600080fd5b610fce8382612937565b610fd88382612999565b610fe28282612a9b565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061103333612467565b121561103e57600080fd5b61104a84848484612ae1565b50505050565b60606009805480602002602001604051908101604052809291908181526020018280548015610d8157602002820191906000526020600020905b81548152602001906001019080831161108a575050505050905090565b6009546060906000805b828110156110fd576000601c60006009848154811015156110ce57fe5b906000526020600020015481526020019081526020016000205411156110f5576001909101905b6001016110b1565b5060608160405190808252806020026020018201604052801561112a578160200160208202803883390190505b5090506000805b848110156111ae576000601c600060098481548110151561114e57fe5b906000526020600020015481526020019081526020016000205411156111a657600980548290811061117c57fe5b9060005260206000200154838381518110151561119557fe5b602090810290910101526001909101905b600101611131565b5090935050505090565b60006111c3826112a9565b15156111ce57600080fd5b506000908152601b602052604090205490565b601054600160a060020a031633146111f857600080fd5b61104a8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508a93509150612ba09050565b600061124583611981565b821061125057600080fd5b600160a060020a038316600090815260076020526040902080548390811061127457fe5b906000526020600020015490505b92915050565b6112a48383836020604051908101604052806000815250611da6565b505050565b600090815260016020526040902054600160a060020a0316151590565b60006112d0610f04565b82106112db57600080fd5b60098054839081106112e957fe5b90600052602060002001549050919050565b61104a8484848488612d2d565b6060806000806000611319866112a9565b151561132457600080fd5b61132c613469565b506000868152601a60209081526040808320815160608101835281548152600180830154600160a060020a03168286019081526002938401548386019081528d885260198752858820600b885297869020915184519151895488516101009682161596909602600019011696909604601f810189900489028501890190975286845293979691959394909390929187919083018282801561140e5780601f106113e35761010080835404028352916020019161140e565b820191906000526020600020905b8154815290600101906020018083116113f157829003601f168201915b5050875460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959a508994509250840190508282801561149c5780601f106114715761010080835404028352916020019161149c565b820191906000526020600020905b81548152906001019060200180831161147f57829003601f168201915b50505050509350955095509550955095505091939590929450565b60006114c2826112a9565b15156114cd57600080fd5b506000908152601a6020526040902060010154600160a060020a031690565b60008082848115156114fa57fe5b0493505b600084111561151d57828481151561151257fe5b0493506001016114fe565b9392505050565b600160a060020a038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610ef857602002820191906000526020600020905b8154815260200190600101908083116115705750505050509050919050565b6018805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156116155780601f106115ea57610100808354040283529160200191611615565b820191906000526020600020905b8154815290600101906020018083116115f857829003601f168201915b505050505081565b600081815260016020526040812054600160a060020a031680151561128257600080fd5b600c54600160a060020a0316331461165857600080fd5b60128190556040517fee7600fb935f513a489048a6180f121afb458677106979021ead5712753ec72190610f56908390613c3f565b33600160a060020a038216146116a257600080fd5b600160a060020a0381166000908152600d60205260408120549081116116c757600080fd5b600160a060020a0382166000818152600d6020526040808220829055600e805485900390555183156108fc0291849190818181858888f19350505050158015611714573d6000803e3d6000fd5b5081600160a060020a03167fd42531819f80124cde4ecc43aa387c9096d233d17d863735d0b00f1e98b0dc87826000190260008060405161175793929190613c4d565b60405180910390a25050565b6009546060906000805b82811015611804576000601c600060098481548110151561178a57fe5b90600052602060002001548152602001908152602001600020541180156117f0575084600160a060020a0316600160006009848154811015156117c957fe5b60009182526020808320909101548352820192909252604001902054600160a060020a0316145b156117fc576001909101905b60010161176d565b50606081604051908082528060200260200182016040528015611831578160200160208202803883390190505b5090506000805b84811015611900576000601c600060098481548110151561185557fe5b90600052602060002001548152602001908152602001600020541180156118bb575086600160a060020a03166001600060098481548110151561189457fe5b60009182526020808320909101548352820192909252604001902054600160a060020a0316145b156118f85760098054829081106118ce57fe5b906000526020600020015483838151811015156118e757fe5b602090810290910101526001909101905b600101611838565b509095945050505050565b61191533836128d8565b151561192057600080fd5b611929826112a9565b151561193457600080fd5b6000828152600f602052604090819020805460ff191660ff84161790555182907f11628b7579f61c57832e9a4716c653cdd7c99ec52a5cf2f27df625ff1faeee8290611757908490613d7e565b6000600160a060020a038216151561199857600080fd5b50600160a060020a031660009081526003602052604090205490565b600c54600160a060020a031633146119cb57600080fd5b600c54604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a2600c8054600160a060020a0319169055565b601054600160a060020a03163314611a2c57600080fd5b611a368282612e1d565b81600160a060020a03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516117579190613c3f565b600c54600160a060020a03163314611a8657600080fd5b8051611a99906018906020840190613494565b5050565b611a9982826000611dce565b6000611ab4826112a9565b1515611abf57600080fd5b506000908152601b602052604090206002015490565b600c54600160a060020a031681565b600c54600160a060020a03163314611afb57600080fd5b60108054600160a060020a031916600160a060020a0392909216919091179055565b601054600160a060020a031681565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d815780601f10610d5657610100808354040283529160200191610d81565b600c54600160a060020a03163314611ba457600080fd5b60138190556040517fd76c2a6b335cc11496c77fd9617847921025d01420c9a9fb1b37779d69bb90ea90610f56908390613c3f565b6000611be4826112a9565b1515611bef57600080fd5b506000908152601a602052604090205490565b60115481565b600160a060020a038216331415611c1e57600080fd5b336000818152600460209081526040808320600160a060020a038716808552925291829020805460ff191685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611c81908590613c23565b60405180910390a35050565b600c54600160a060020a03163314611ca457600080fd5b6000611caf82612467565b90506000811215611cbf57600080fd5b805b601d5460001901811015611d3757601d805460018301908110611ce057fe5b600091825260209091200154601d8054600160a060020a039092169183908110611d0657fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600101611cc1565b50601d8054906112a4906000198301613512565b600c54600160a060020a03163314611d6257600080fd5b612710811115611d7157600080fd5b60148190556040517f8b9dad3818fb38774ac3e1fe2b24176e0fd8c8a7cc2b777d5f0c9ea69c73690e90610f56908390613c3f565b611db1848484610f85565b611dbd84848484612f14565b151561104a57600080fd5b60135481565b601154341015611ddd57600080fd5b601754600160a060020a03821615611df3576001015b600954600081118015611e0857506000601654115b1561204557601654600090612710349091020482841115611f0257600160a060020a03851615611e48578260010181811515611e4057fe5b049150611e57565b8281811515611e5357fe5b0491505b60005b83811015611efc576064841115611eb157611eac60016000600984815481101515611e8157fe5b60009182526020808320909101548352820192909252604001902054600160a060020a031684613022565b611ef4565b611ef460016000600984815481101515611ec757fe5b60009182526020808320909101548352820192909252604001902054600160a060020a031684600261304c565b600101611e5a565b50612019565b600160a060020a03851615611f27578360010181811515611f1f57fe5b049150611f36565b8381811515611f3257fe5b0491505b6060611f436017546130b9565b905060005b601754811015612016576000858383815181101515611f6357fe5b90602001906020020151811515611f7657fe5b06905060646017541115611fca57611fc560016000600984815481101515611f9a57fe5b60009182526020808320909101548352820192909252604001902054600160a060020a031686613022565b61200d565b61200d60016000600984815481101515611fe057fe5b60009182526020808320909101548352820192909252604001902054600160a060020a031686600261304c565b50600101611f48565b50505b600160a060020a038516158015906120315750600082115b15612042576120428583600561304c565b50505b61205185853334612ba0565b5050505050565b6000908152601c602052604090205490565b6009546060906000805b828110156120c7578460ff16600f600060098481548110151561209357fe5b6000918252602080832090910154835282019290925260400190205460ff1614156120bf576001909101905b600101612074565b506060816040519080825280602002602001820160405280156120f4578160200160208202803883390190505b5090506000805b84811015611900578660ff16600f600060098481548110151561211a57fe5b6000918252602080832090910154835282019290925260400190205460ff16141561217757600980548290811061214d57fe5b9060005260206000200154838381518110151561216657fe5b602090810290910101526001909101905b6001016120fb565b606061218a826112a9565b151561219557600080fd5b60186121a083612272565b60405160200180838054600181600116156101000203166002900480156121fe5780601f106121dc5761010080835404028352918201916121fe565b820191906000526020600020905b8154815290600101906020018083116121ea575b5050825160208401908083835b6020831061222a5780518252601f19909201916020918201910161220b565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050919050565b60175481565b60155481565b60608115156122b5575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610c47565b60006122c283600a6114ec565b60010190506060816040519080825280601f01601f1916602001820160405280156122f4576020820181803883390190505b5090505b831561151d5760001990910190600a8404600a0284036030017f010000000000000000000000000000000000000000000000000000000000000002818381518110151561234157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a840493506122f8565b60125481565b600e546000903031111561239c5750600e54303103610c73565b506000610c73565b600c54600160a060020a031633146123bb57600080fd5b6127108111156123ca57600080fd5b60158190556040517fd5eaf5bfd09563dbc441cddb1a7323c0aa089efb6a294a7d920e934f9796068790610f56908390613c3f565b600c54600160a060020a0316331461241657600080fd5b61271081111561242557600080fd5b60168190556040517ff08ea8fc7c47015d95f7c5f2452365f04b2ab39351b26b97a30b6b891d11b93590610f56908390613c3f565b6112a483838360006112fb565b6000805b601d548112156124b85782600160a060020a0316601d8281548110151561248e57fe5b600091825260209091200154600160a060020a031614156124b0579050610c47565b60010161246b565b5060001992915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000806000806000612501866112a9565b151561250c57600080fd5b612514613469565b5050506000848152601b60209081526040808320815160608101835281548152600180830154600160a060020a03908116838701526002938401548386019081529a87529085528386205492855283862054601c909552929094205493519751908216989290911696929550919350909150565b6060600080600080600080600061259e896112a9565b15156125a957600080fd5b6125b1613469565b506000898152601b60209081526040918290208251606081018452815481526001820154600160a060020a03169281019290925260020154918101919091526125f8613469565b601a60008c815260200190815260200160002060606040519081016040529081600082015481526020016001820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016002820154815250509050601960008c8152602001908152602001600020600160008d815260200190815260200160002060009054906101000a9004600160a060020a03168260200151601c60008f8152602001908152602001600020548560000151856000015187604001518760400151878054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127585780601f1061272d57610100808354040283529160200191612758565b820191906000526020600020905b81548152906001019060200180831161273b57829003601f168201915b50505050509750995099509950995099509950995099505050919395975091939597565b61278633836128d8565b151561279157600080fd5b6000828152601c6020526040908190208290555182907f2d11d55576c2ebb7af83c94e875768af4c6fd8bea7a22b395b14a857c361505b90611757908490613c3f565b60165481565b60006127e5826112a9565b15156127f057600080fd5b506000908152601a602052604090206002015490565b600c54600160a060020a0316331461281d57600080fd5b612826816131cb565b50565b6000612834826112a9565b151561283f57600080fd5b506000908152600f602052604090205460ff1690565b600160a060020a03166000908152600d602052604090205490565b60145481565b600c54600160a060020a0316331461288d57600080fd5b6000612897612382565b90506000811115611a9957604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156112a4573d6000803e3d6000fd5b6000806128e48361161d565b905080600160a060020a031684600160a060020a0316148061291f575083600160a060020a031661291484610d8b565b600160a060020a0316145b8061292f575061292f81856124c2565b949350505050565b81600160a060020a031661294a8261161d565b600160a060020a03161461295d57600080fd5b600081815260026020526040902054600160a060020a031615611a995760009081526002602052604090208054600160a060020a031916905550565b6129a3828261323c565b600081815260086020908152604080832054600160a060020a038616845260079092528220549091906129dd90600163ffffffff6132c516565b600160a060020a03851660009081526007602052604081208054929350909183908110612a0657fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515612a4657fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490612a7d906000198301613512565b50600093845260086020526040808520859055908452909220555050565b612aa582826132d7565b600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b612ae9613469565b5060408051606081018252828152600160a060020a038086166020808401828152428587019081526000898152601b8452878120875181559251600184018054918816600160a060020a0319928316179055915160029384015591835286822080549091169055601c9091528481205592519192859290918816907f357aa6ac22607825c11c3be3a02a92112ac24ad3786c5cdaafae1417c01f62f690612b91908790613c3f565b60405180910390a45050505050565b612ba8610c4c565b601155612bb5828561335a565b60008481526019602090815260409091208451612bd492860190613494565b50612bdd613469565b5060408051606081018252828152600160a060020a0380851660208084018281524285870190815260008b8152601a845287812087518155835160018083018054928a16600160a060020a03199384161790558451600293840155601b90965291899020885181559351948401805495909716949091169390931790945592519201919091559151909186917fe351eec8d3da7618ce92385ba369fee57bb2a62fc7023e58bf44db78e62c275e90612c989088908790613d5e565b60405180910390a38483600160a060020a03166000600160a060020a03167f357aa6ac22607825c11c3be3a02a92112ac24ad3786c5cdaafae1417c01f62f685604051612ce59190613c3f565b60405180910390a47f25b1f9f6b6e61dfca5575239769e4450ed2e49176670837f5d1a82a9a2fc693f601154604051612d1e9190613c3f565b60405180910390a15050505050565b6000838152601c60205260409020541515612d4757600080fd5b6000838152601c6020526040902054341015612d6257600080fd5b60008381526002602052604090208054600160a060020a031916600160a060020a038616179055612d94858585611288565b6000838152601b6020526040902054349080821115612df3576014546127103483810392830291909104908190039350600160a060020a03861615612df057612df0866127106015548402811515612de857fe5b04600561304c565b50505b6000821115612e0857612e088383600161304c565b612e1483338734612ae1565b50505050505050565b612e2782826133a9565b6000818152600b60205260409020546002600019610100600184161502019091160415612e65576000818152600b60205260408120612e6591613536565b6000818152600a6020526040812054600954909190612e8b90600163ffffffff6132c516565b90506000600982815481101515612e9e57fe5b9060005260206000200154905080600984815481101515612ebb57fe5b60009182526020822001919091556009805484908110612ed757fe5b6000918252602090912001556009805490612ef6906000198301613512565b506000938452600a6020526040808520859055908452909220555050565b6000612f2884600160a060020a03166133f9565b1515612f365750600161292f565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008152600090600160a060020a0386169063150b7a0290612f849033908a9089908990600401613b8c565b602060405180830381600087803b158015612f9e57600080fd5b505af1158015612fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612fd69190810190613923565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b600160a060020a039091166000908152600d60205260409020805482019055600e80549091019055565b60008211156112a45761305f8383613022565b600160a060020a0383166000818152600d6020526040908190205490517fd42531819f80124cde4ecc43aa387c9096d233d17d863735d0b00f1e98b0dc87916130ac918691908690613c75565b60405180910390a2505050565b6060600044426001600060096001600980549050038154811015156130da57fe5b9060005260206000200154815260200190815260200160002060009054906101000a9004600160a060020a03166040516020018084815260200183815260200182600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140193505050506040516020818303038152906040528051906020012060019004905060608360405190808252806020026020018201604052801561318e578160200160208202803883390190505b50905060005b848110156131c3578282828151811015156131ab57fe5b60209081029091010152600890920291600101613194565b509392505050565b600160a060020a03811615156131e057600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c8054600160a060020a031916600160a060020a0392909216919091179055565b81600160a060020a031661324f8261161d565b600160a060020a03161461326257600080fd5b600160a060020a03821660009081526003602052604090205461328c90600163ffffffff6132c516565b600160a060020a039092166000908152600360209081526040808320949094559181526001909152208054600160a060020a0319169055565b6000828211156132d157fe5b50900390565b600081815260016020526040902054600160a060020a0316156132f957600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a038816908117909155845260039091529091205461333a91613401565b600160a060020a0390921660009081526003602052604090209190915550565b613364828261340e565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b6133b38282612937565b6133bd8282612999565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000903b1190565b8181018281101561128257fe5b600160a060020a038216151561342357600080fd5b61342d8282612a9b565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606060405190810160405280600081526020016000600160a060020a03168152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106134d557805160ff1916838001178555613502565b82800160010185558215613502579182015b828111156135025782518255916020019190600101906134e7565b5061350e929150613576565b5090565b8154818355818111156112a4576000838152602090206112a4918101908301613576565b50805460018160011615610100020316600290046000825580601f1061355c5750612826565b601f01602090049060005260206000209081019061282691905b610c7391905b8082111561350e576000815560010161357c565b600061151d8235613de5565b600061151d8235613df0565b600061151d8235613df5565b600061151d8251613df5565b6000601f820183136135d157600080fd5b81356135e46135df82613db3565b613d8c565b9150808252602083016020830185838301111561360057600080fd5b61360b838284613e55565b50505092915050565b600080601f8301841361362657600080fd5b50813567ffffffffffffffff81111561363e57600080fd5b60208301915083600182028301111561365657600080fd5b9250929050565b600061151d8235610c73565b600061151d8235613e23565b60006020828403121561368757600080fd5b600061292f8484613590565b600080604083850312156136a657600080fd5b60006136b28585613590565b92505060206136c385828601613590565b9150509250929050565b6000806000606084860312156136e257600080fd5b60006136ee8686613590565b93505060206136ff86828701613590565b92505060406137108682870161365d565b9150509250925092565b6000806000806080858703121561373057600080fd5b600061373c8787613590565b945050602061374d87828801613590565b935050604061375e8782880161365d565b925050606061376f87828801613590565b91505092959194509250565b6000806000806080858703121561379157600080fd5b600061379d8787613590565b94505060206137ae87828801613590565b93505060406137bf8782880161365d565b925050606085013567ffffffffffffffff8111156137dc57600080fd5b61376f878288016135c0565b600080600080608085870312156137fe57600080fd5b600061380a8787613590565b945050602061381b87828801613590565b935050604061382c8782880161365d565b925050606061376f8782880161365d565b6000806040838503121561385057600080fd5b600061385c8585613590565b92505060206136c38582860161359c565b6000806040838503121561388057600080fd5b600061388c8585613590565b92505060206136c38582860161365d565b600080600080606085870312156138b357600080fd5b60006138bf8787613590565b94505060206138d08782880161365d565b935050604085013567ffffffffffffffff8111156138ed57600080fd5b6138f987828801613614565b95989497509550505050565b60006020828403121561391757600080fd5b600061292f84846135a8565b60006020828403121561393557600080fd5b600061292f84846135b4565b60006020828403121561395357600080fd5b813567ffffffffffffffff81111561396a57600080fd5b61292f848285016135c0565b60006020828403121561398857600080fd5b600061292f848461365d565b600080604083850312156139a757600080fd5b60006139b3858561365d565b925050602083013567ffffffffffffffff8111156139d057600080fd5b6136c3858286016135c0565b6000806000606084860312156139f157600080fd5b60006139fd868661365d565b935050602084013567ffffffffffffffff811115613a1a57600080fd5b613a26868287016135c0565b925050604061371086828701613590565b60008060408385031215613a4a57600080fd5b600061388c858561365d565b60008060408385031215613a6957600080fd5b6000613a75858561365d565b92505060206136c385828601613669565b600060208284031215613a9857600080fd5b600061292f8484613669565b613aad81613e29565b82525050565b613aad81613de5565b6000613ac782613de1565b808452602084019350613ad983613ddb565b60005b82811015613b0957613aef868351613b5a565b613af882613ddb565b602096909601959150600101613adc565b5093949350505050565b613aad81613df0565b613aad81613df5565b6000613b3082613de1565b808452613b44816020860160208601613e61565b613b4d81613e8d565b9093016020019392505050565b613aad81610c73565b613aad81613e34565b613aad81613e3f565b613aad81613e23565b602081016112828284613ab3565b60808101613b9a8287613aa4565b613ba76020830186613ab3565b613bb46040830185613b5a565b8181036060830152613bc68184613b25565b9695505050505050565b60a08101613bde8288613ab3565b613beb6020830187613ab3565b613bf86040830186613b5a565b613c056060830185613b5a565b613bc66080830184613b5a565b6020808252810161151d8184613abc565b602081016112828284613b13565b602081016112828284613b1c565b602081016112828284613b5a565b60608101613c5b8286613b5a565b613c686020830185613b63565b61292f6040830184613b6c565b60608101613c838286613b5a565b613c906020830185613b5a565b61292f6040830184613b75565b6020808252810161151d8184613b25565b6101008082528101613cc0818b613b25565b9050613ccf602083018a613ab3565b613cdc6040830189613ab3565b613ce96060830188613b5a565b613cf66080830187613b5a565b613d0360a0830186613b5a565b613d1060c0830185613b5a565b613d1d60e0830184613b5a565b9998505050505050505050565b60a08082528101613d3b8188613b25565b90508181036020830152613d4f8187613b25565b9050613bf86040830186613ab3565b60408082528101613d6f8185613b25565b905061151d6020830184613b5a565b602081016112828284613b75565b60405181810167ffffffffffffffff81118282101715613dab57600080fd5b604052919050565b600067ffffffffffffffff821115613dca57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b600061128282613e17565b151590565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690565b600160a060020a031690565b60ff1690565b600061128282613e4a565b600061128282610c73565b600061128282613e23565b600061128282613de5565b82818337506000910152565b60005b83811015613e7c578181015183820152602001613e64565b8381111561104a5750506000910152565b601f01601f19169056fea265627a7a7230582018238c3cc91878a0c38b711881ac6550757540372f7dfa305a85bd7950a172866c6578706572696d656e74616cf50037000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a674e1cc4ac13b01bd42351a9903b231aa9cb5d40000000000000000000000000000000000000000000000000000000000000008526574726f41727400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037265740000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a674e1cc4ac13b01bd42351a9903b231aa9cb5d40000000000000000000000000000000000000000000000000000000000000008526574726f41727400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037265740000000000000000000000000000000000000000000000000000000000"
}