{
  "address": "0xbab5d0f110be6f4a5b70a2fa22ed17324bff6576",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "USDp",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity ^0.4.17;\n\n// File: contracts/USDp.sol\n\n/// @title USDp Token contract\ncontract USDp {\n\n    address public server; // Address, which the platform website uses.\n    address public populous; // Address of the Populous bank contract.\n\n    uint256 public totalSupply;\n    bytes32 public name;// token name, e.g, pounds for fiat UK pounds.\n    uint8 public decimals;// How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    bytes32 public symbol;// An identifier: eg SBX.\n\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n    //EVENTS\n    // An event triggered when a transfer of tokens is made from a _from address to a _to address.\n    event Transfer(\n        address indexed _from, \n        address indexed _to, \n        uint256 _value\n    );\n    // An event triggered when an owner of tokens successfully approves another address to spend a specified amount of tokens.\n    event Approval(\n        address indexed _owner, \n        address indexed _spender, \n        uint256 _value\n    );\n    event EventMintTokens(bytes32 currency, address owner, uint amount);\n    event EventDestroyTokens(bytes32 currency, address owner, uint amount);\n\n    // MODIFIERS\n\n    modifier onlyServer {\n        require(isServer(msg.sender) == true);\n        _;\n    }\n\n    modifier onlyServerOrOnlyPopulous {\n        require(isServer(msg.sender) == true || isPopulous(msg.sender) == true);\n        _;\n    }\n\n    modifier onlyPopulous {\n        require(isPopulous(msg.sender) == true);\n        _;\n    }\n    // NON-CONSTANT METHODS\n    \n    /** @dev Creates a new currency/token.\n      * param _decimalUnits The decimal units/places the token can have.\n      * param _tokenSymbol The token's symbol, e.g., GBP.\n      * param _decimalUnits The tokens decimal unites/precision\n      * param _amount The amount of tokens to create upon deployment\n      * param _owner The owner of the tokens created upon deployment\n      * param _server The server/admin address\n      */\n    constructor ()\n        public\n    {\n        populous = server = 0x63d509F7152769Ddf162eD048B83719fE1e31080;\n        symbol = name = 0x55534470; // Set the name = USDp for display purposes\n        decimals = 6; // Amount of decimals for display purposes\n        // balances[server] = safeAdd(balances[server], 10000000000000000);\n        totalSupply = 0; //safeAdd(totalSupply, 10000000000000000);\n    }\n\n    // ERC20\n    /** @dev Mints a specified amount of tokens \n      * @param owner The token owner.\n      * @param amount The amount of tokens to create.\n      */\n    function mint(uint amount, address owner) public onlyServerOrOnlyPopulous returns (bool success) {\n        balances[owner] = safeAdd(balances[owner], amount);\n        totalSupply = safeAdd(totalSupply, amount);\n        emit EventMintTokens(symbol, owner, amount);\n        return true;\n    }\n\n    /** @dev Destroys a specified amount of tokens \n      * @dev The method uses a modifier from withAccessManager contract to only permit populous to use it.\n      * @dev The method uses SafeMath to carry out safe token deductions/subtraction.\n      * @param amount The amount of tokens to create.\n      */\n    function destroyTokens(uint amount) public onlyServerOrOnlyPopulous returns (bool success) {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] = safeSub(balances[msg.sender], amount);\n        totalSupply = safeSub(totalSupply, amount);\n        emit EventDestroyTokens(symbol, populous, amount);\n        return true;\n    }\n\n    /** @dev Destroys a specified amount of tokens, from a user.\n      * @dev The method uses a modifier from withAccessManager contract to only permit populous to use it.\n      * @dev The method uses SafeMath to carry out safe token deductions/subtraction.\n      * @param amount The amount of tokens to create.\n      */\n    function destroyTokensFrom(uint amount, address from) public onlyServerOrOnlyPopulous returns (bool success) {\n        require(balances[from] >= amount);\n        balances[from] = safeSub(balances[from], amount);\n        totalSupply = safeSub(totalSupply, amount);\n        emit EventDestroyTokens(symbol, from, amount);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n    // ACCESS MANAGER\n\n    /** @dev Checks a given address to determine whether it is populous address.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to populous or not.\n      */\n    function isPopulous(address sender) public view returns (bool) {\n        return sender == populous;\n    }\n\n        /** @dev Changes the populous contract address.\n      * @dev The method requires the message sender to be the set server.\n      * @param _populous The address to be set as populous.\n      */\n    function changePopulous(address _populous) public {\n        require(isServer(msg.sender) == true);\n        populous = _populous;\n    }\n\n    // CONSTANT METHODS\n    \n    /** @dev Checks a given address to determine whether it is the server.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to the server or not.\n      */\n    function isServer(address sender) public view returns (bool) {\n        return sender == server;\n    }\n\n    /** @dev Changes the server address that is set by the constructor.\n      * @dev The method requires the message sender to be the set server.\n      * @param _server The new address to be set as the server.\n      */\n    function changeServer(address _server) public {\n        require(isServer(msg.sender) == true);\n        server = _server;\n    }\n\n\n    // SAFE MATH\n\n    /** @dev Safely multiplies two unsigned/non-negative integers.\n    * @dev Ensures that one of both numbers can be derived from dividing the product by the other.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n  /** @dev Safely subtracts one number from another\n    * @dev Ensures that the number to subtract is lower.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n  /** @dev Safely adds two unsigned/non-negative integers.\n    * @dev Ensures that the sum of both numbers is greater or equal to one of both.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b507363d509f7152769ddf162ed048b83719fe1e310806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506355534470600102600381600019169055600581600019169055506006600460006101000a81548160ff021916908360ff16021790555060006002819055506114c6806100f26000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630156b3231461011757806305fd22d01461017c57806306fdde03146101d757806308fb8a881461020a578063095ea7b31461024d57806318160ddd146102b257806323b872dd146102dd57806327e235e314610362578063313ce567146103b95780635c658165146103ea57806367fbd2891461046157806370a08231146104a657806394a3760f146104fd57806394bf804d1461055457806395d89b41146105b9578063a9059cbb146105ec578063da37415714610651578063dd62ed3e14610694578063fd922a421461070b578063fda0895814610762575b600080fd5b34801561012357600080fd5b5061016260048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107bd565b604051808215151515815260200191505060405180910390f35b34801561018857600080fd5b506101bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610964565b604051808215151515815260200191505060405180910390f35b3480156101e357600080fd5b506101ec6109be565b60405180826000191660001916815260200191505060405180910390f35b34801561021657600080fd5b5061024b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109c4565b005b34801561025957600080fd5b50610298600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a22565b604051808215151515815260200191505060405180910390f35b3480156102be57600080fd5b506102c7610b14565b6040518082815260200191505060405180910390f35b3480156102e957600080fd5b50610348600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b1a565b604051808215151515815260200191505060405180910390f35b34801561036e57600080fd5b506103a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610db4565b6040518082815260200191505060405180910390f35b3480156103c557600080fd5b506103ce610dcc565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103f657600080fd5b5061044b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ddf565b6040518082815260200191505060405180910390f35b34801561046d57600080fd5b5061048c60048036038101908080359060200190929190505050610e04565b604051808215151515815260200191505060405180910390f35b3480156104b257600080fd5b506104e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fcc565b6040518082815260200191505060405180910390f35b34801561050957600080fd5b50610512611015565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056057600080fd5b5061059f60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061103b565b604051808215151515815260200191505060405180910390f35b3480156105c557600080fd5b506105ce611194565b60405180826000191660001916815260200191505060405180910390f35b3480156105f857600080fd5b50610637600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061119a565b604051808215151515815260200191505060405180910390f35b34801561065d57600080fd5b50610692600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f3565b005b3480156106a057600080fd5b506106f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611352565b6040518082815260200191505060405180910390f35b34801561071757600080fd5b506107206113d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076e57600080fd5b506107a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113fe565b604051808215151515815260200191505060405180910390f35b6000600115156107cc336113fe565b151514806107e65750600115156107e233610964565b1515145b15156107f157600080fd5b82600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561083f57600080fd5b610888600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611457565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108d760025484611457565b6002819055507f8f9d1efd0a8a7eec2c25fc3b30a58d7fc807ec7c3bb875f81f77265afbc7561560055483856040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16001905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60035481565b600115156109d1336113fe565b15151415156109df57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60025481565b600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610beb5750828110155b1515610bf657600080fd5b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610d435782600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60066020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b6007602052816000526040600020602052806000526040600020600091509150505481565b600060011515610e13336113fe565b15151480610e2d575060011515610e2933610964565b1515145b1515610e3857600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e8657600080fd5b610ecf600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611457565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f1e60025483611457565b6002819055507f8f9d1efd0a8a7eec2c25fc3b30a58d7fc807ec7c3bb875f81f77265afbc75615600554600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a160019050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001151561104a336113fe565b1515148061106457506001151561106033610964565b1515145b151561106f57600080fd5b6110b8600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611470565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061110760025484611470565b6002819055507f3cca84f8baeb3504a2ff953d02bd02836e2b10806cb0bc1e399733df6f4baa3460055483856040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16001905092915050565b60055481565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111ea57600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60011515611300336113fe565b151514151561130e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600082821115151561146557fe5b818303905092915050565b60008082840190508381101580156114885750828110155b151561149057fe5b80915050929150505600a165627a7a72305820112ae30092ab7f8a1c18a2882cff1ec3ebb8e3d71a889614366123a1623afaa40029"
}