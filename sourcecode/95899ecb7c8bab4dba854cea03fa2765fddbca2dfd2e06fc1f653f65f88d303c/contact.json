{
  "address": "0xcb0243843a1530a04dce2631d6db4850c0a46725",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FeeMultiToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-24\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/registry/IDeployer.sol\n\ncontract IDeployer is Ownable {\n    function deploy(bytes data) external returns(address mtkn);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/ext/CheckedERC20.sol\n\nlibrary CheckedERC20 {\n    using SafeMath for uint;\n\n    function isContract(address addr) internal view returns(bool result) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            result := gt(extcodesize(addr), 0)\n        }\n    }\n\n    function handleReturnBool() internal pure returns(bool result) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            switch returndatasize()\n            case 0 { // not a std erc20\n                result := 1\n            }\n            case 32 { // std erc20\n                returndatacopy(0, 0, 32)\n                result := mload(0)\n            }\n            default { // anything else, should revert for safety\n                revert(0, 0)\n            }\n        }\n    }\n\n    function handleReturnBytes32() internal pure returns(bytes32 result) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            if eq(returndatasize(), 32) { // not a std erc20\n                returndatacopy(0, 0, 32)\n                result := mload(0)\n            }\n            if gt(returndatasize(), 32) { // std erc20\n                returndatacopy(0, 64, 32)\n                result := mload(0)\n            }\n            if lt(returndatasize(), 32) { // anything else, should revert for safety\n                revert(0, 0)\n            }\n        }\n    }\n\n    function asmTransfer(address _token, address _to, uint256 _value) internal returns(bool) {\n        require(isContract(_token));\n        // solium-disable-next-line security/no-low-level-calls\n        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _value));\n        return handleReturnBool();\n    }\n\n    function asmTransferFrom(address _token, address _from, address _to, uint256 _value) internal returns(bool) {\n        require(isContract(_token));\n        // solium-disable-next-line security/no-low-level-calls\n        require(_token.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), _from, _to, _value));\n        return handleReturnBool();\n    }\n\n    function asmApprove(address _token, address _spender, uint256 _value) internal returns(bool) {\n        require(isContract(_token));\n        // solium-disable-next-line security/no-low-level-calls\n        require(_token.call(bytes4(keccak256(\"approve(address,uint256)\")), _spender, _value));\n        return handleReturnBool();\n    }\n\n    //\n\n    function checkedTransfer(ERC20 _token, address _to, uint256 _value) internal {\n        if (_value > 0) {\n            uint256 balance = _token.balanceOf(this);\n            asmTransfer(_token, _to, _value);\n            require(_token.balanceOf(this) == balance.sub(_value), \"checkedTransfer: Final balance didn't match\");\n        }\n    }\n\n    function checkedTransferFrom(ERC20 _token, address _from, address _to, uint256 _value) internal {\n        if (_value > 0) {\n            uint256 toBalance = _token.balanceOf(_to);\n            asmTransferFrom(_token, _from, _to, _value);\n            require(_token.balanceOf(_to) == toBalance.add(_value), \"checkedTransfer: Final balance didn't match\");\n        }\n    }\n\n    //\n\n    function asmName(address _token) internal view returns(bytes32) {\n        require(isContract(_token));\n        // solium-disable-next-line security/no-low-level-calls\n        require(_token.call(bytes4(keccak256(\"name()\"))));\n        return handleReturnBytes32();\n    }\n\n    function asmSymbol(address _token) internal view returns(bytes32) {\n        require(isContract(_token));\n        // solium-disable-next-line security/no-low-level-calls\n        require(_token.call(bytes4(keccak256(\"symbol()\"))));\n        return handleReturnBytes32();\n    }\n}\n\n// File: contracts/interface/IBasicMultiToken.sol\n\ncontract IBasicMultiToken is ERC20 {\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\n\n    ERC20[] public tokens;\n\n    function tokensCount() public view returns(uint256);\n\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\n    function bundle(address _beneficiary, uint256 _amount) public;\n\n    function unbundle(address _beneficiary, uint256 _value) public;\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\n\n    function disableBundling() public;\n    function enableBundling() public;\n}\n\n// File: contracts/interface/IMultiToken.sol\n\ncontract IMultiToken is IBasicMultiToken {\n    event Update();\n    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\n\n    mapping(address => uint256) public weights;\n\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\n\n    function disableChanges() public;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: contracts/ext/ERC1003Token.sol\n\ncontract ERC1003Caller is Ownable {\n    function makeCall(address _target, bytes _data) external payable onlyOwner returns (bool) {\n        // solium-disable-next-line security/no-call-value\n        return _target.call.value(msg.value)(_data);\n    }\n}\n\n\ncontract ERC1003Token is ERC20 {\n    ERC1003Caller public caller_ = new ERC1003Caller();\n    address[] internal sendersStack_;\n\n    function approveAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n        sendersStack_.push(msg.sender);\n        approve(_to, _value);\n        require(caller_.makeCall.value(msg.value)(_to, _data));\n        sendersStack_.length -= 1;\n        return true;\n    }\n\n    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n        transfer(_to, _value);\n        require(caller_.makeCall.value(msg.value)(_to, _data));\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        address from = (_from != address(caller_)) ? _from : sendersStack_[sendersStack_.length - 1];\n        return super.transferFrom(from, _to, _value);\n    }\n}\n\n// File: contracts/BasicMultiToken.sol\n\ncontract BasicMultiToken is Ownable, StandardToken, DetailedERC20, ERC1003Token, IBasicMultiToken {\n    using CheckedERC20 for ERC20;\n    using CheckedERC20 for DetailedERC20;\n\n    uint internal inLendingMode;\n    bool public bundlingEnabled = true;\n\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\n    event BundlingStatus(bool enabled);\n\n    modifier notInLendingMode {\n        require(inLendingMode == 0, \"Operation can't be performed while lending\");\n        _;\n    }\n\n    modifier whenBundlingEnabled {\n        require(bundlingEnabled, \"Bundling is disabled\");\n        _;\n    }\n\n    constructor() public DetailedERC20(\"\", \"\", 0) {\n    }\n\n    function init(ERC20[] _tokens, string _name, string _symbol, uint8 _decimals) public {\n        require(decimals == 0, \"init: contract was already initialized\");\n        require(_decimals > 0, \"init: _decimals should not be zero\");\n        require(bytes(_name).length > 0, \"init: _name should not be empty\");\n        require(bytes(_symbol).length > 0, \"init: _symbol should not be empty\");\n        require(_tokens.length >= 2, \"Contract do not support less than 2 inner tokens\");\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        tokens = _tokens;\n    }\n\n    function tokensCount() public view returns(uint) {\n        return tokens.length;\n    }\n\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public whenBundlingEnabled notInLendingMode {\n        require(totalSupply_ == 0, \"bundleFirstTokens: This method can be used with zero total supply only\");\n        _bundle(_beneficiary, _amount, _tokenAmounts);\n    }\n\n    function bundle(address _beneficiary, uint256 _amount) public whenBundlingEnabled notInLendingMode {\n        require(totalSupply_ != 0, \"This method can be used with non zero total supply only\");\n        uint256[] memory tokenAmounts = new uint256[](tokens.length);\n        for (uint i = 0; i < tokens.length; i++) {\n            tokenAmounts[i] = tokens[i].balanceOf(this).mul(_amount).div(totalSupply_);\n        }\n        _bundle(_beneficiary, _amount, tokenAmounts);\n    }\n\n    function unbundle(address _beneficiary, uint256 _value) public notInLendingMode {\n        unbundleSome(_beneficiary, _value, tokens);\n    }\n\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public notInLendingMode {\n        require(_tokens.length > 0, \"Array of tokens can't be empty\");\n\n        uint256 totalSupply = totalSupply_;\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply_ = totalSupply.sub(_value);\n        emit Unbundle(msg.sender, _beneficiary, _value);\n        emit Transfer(msg.sender, 0, _value);\n\n        for (uint i = 0; i < _tokens.length; i++) {\n            for (uint j = 0; j < i; j++) {\n                require(_tokens[i] != _tokens[j], \"unbundleSome: should not unbundle same token multiple times\");\n            }\n            uint256 tokenAmount = _tokens[i].balanceOf(this).mul(_value).div(totalSupply);\n            _tokens[i].checkedTransfer(_beneficiary, tokenAmount);\n        }\n    }\n\n    // Admin methods\n\n    function disableBundling() public onlyOwner {\n        require(bundlingEnabled, \"Bundling is already disabled\");\n        bundlingEnabled = false;\n        emit BundlingStatus(false);\n    }\n\n    function enableBundling() public onlyOwner {\n        require(!bundlingEnabled, \"Bundling is already enabled\");\n        bundlingEnabled = true;\n        emit BundlingStatus(true);\n    }\n\n    // Internal methods\n\n    function _bundle(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) internal {\n        require(_amount != 0, \"Bundling amount should be non-zero\");\n        require(tokens.length == _tokenAmounts.length, \"Lenghts of tokens and _tokenAmounts array should be equal\");\n\n        for (uint i = 0; i < tokens.length; i++) {\n            require(_tokenAmounts[i] != 0, \"Token amount should be non-zero\");\n            tokens[i].checkedTransferFrom(msg.sender, this, _tokenAmounts[i]);\n        }\n\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_beneficiary] = balances[_beneficiary].add(_amount);\n        emit Bundle(msg.sender, _beneficiary, _amount);\n        emit Transfer(0, _beneficiary, _amount);\n    }\n\n    // Instant Loans\n\n    function lend(address _to, ERC20 _token, uint256 _amount, address _target, bytes _data) public payable {\n        uint256 prevBalance = _token.balanceOf(this);\n        _token.asmTransfer(_to, _amount);\n        inLendingMode += 1;\n        require(caller_.makeCall.value(msg.value)(_target, _data), \"lend: arbitrary call failed\");\n        inLendingMode -= 1;\n        require(_token.balanceOf(this) >= prevBalance, \"lend: lended token must be refilled\");\n    }\n}\n\n// File: contracts/MultiToken.sol\n\ncontract MultiToken is IMultiToken, BasicMultiToken {\n    using CheckedERC20 for ERC20;\n\n    uint256 internal minimalWeight;\n    bool public changesEnabled = true;\n\n    event ChangesDisabled();\n\n    modifier whenChangesEnabled {\n        require(changesEnabled, \"Operation can't be performed because changes are disabled\");\n        _;\n    }\n\n    function init(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 _decimals) public {\n        super.init(_tokens, _name, _symbol, _decimals);\n        require(_weights.length == tokens.length, \"Lenghts of _tokens and _weights array should be equal\");\n        for (uint i = 0; i < tokens.length; i++) {\n            require(_weights[i] != 0, \"The _weights array should not contains zeros\");\n            require(weights[tokens[i]] == 0, \"The _tokens array have duplicates\");\n            weights[tokens[i]] = _weights[i];\n            if (minimalWeight == 0 || _weights[i] < minimalWeight) {\n                minimalWeight = _weights[i];\n            }\n        }\n    }\n\n    function init2(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 _decimals) public {\n        init(_tokens, _weights, _name, _symbol, _decimals);\n    }\n\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns(uint256 returnAmount) {\n        if (weights[_fromToken] > 0 && weights[_toToken] > 0 && _fromToken != _toToken) {\n            uint256 fromBalance = ERC20(_fromToken).balanceOf(this);\n            uint256 toBalance = ERC20(_toToken).balanceOf(this);\n            returnAmount = _amount.mul(toBalance).mul(weights[_fromToken]).div(\n                _amount.mul(weights[_fromToken]).div(minimalWeight).add(fromBalance).mul(weights[_toToken])\n            );\n        }\n    }\n\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public whenChangesEnabled notInLendingMode returns(uint256 returnAmount) {\n        returnAmount = getReturn(_fromToken, _toToken, _amount);\n        require(returnAmount > 0, \"The return amount is zero\");\n        require(returnAmount >= _minReturn, \"The return amount is less than _minReturn value\");\n\n        ERC20(_fromToken).checkedTransferFrom(msg.sender, this, _amount);\n        ERC20(_toToken).checkedTransfer(msg.sender, returnAmount);\n\n        emit Change(_fromToken, _toToken, msg.sender, _amount, returnAmount);\n    }\n\n    // Admin methods\n\n    function disableChanges() public onlyOwner {\n        require(changesEnabled, \"Changes are already disabled\");\n        changesEnabled = false;\n        emit ChangesDisabled();\n    }\n}\n\n// File: contracts/FeeMultiToken.sol\n\ncontract FeeMultiToken is Ownable, MultiToken {\n    using CheckedERC20 for ERC20;\n\n    uint256 public constant TOTAL_PERCRENTS = 1000000;\n    uint256 public lendFee;\n    uint256 public changeFee;\n    uint256 public refferalFee;\n\n    function init(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 /*_decimals*/) public {\n        super.init(_tokens, _weights, _name, _symbol, 18);\n    }\n\n    function setLendFee(uint256 _lendFee) public onlyOwner {\n        require(_lendFee <= 30000, \"setLendFee: fee should be not greater than 3%\");\n        lendFee = _lendFee;\n    }\n\n    function setChangeFee(uint256 _changeFee) public onlyOwner {\n        require(_changeFee <= 30000, \"setChangeFee: fee should be not greater than 3%\");\n        changeFee = _changeFee;\n    }\n\n    function setRefferalFee(uint256 _refferalFee) public onlyOwner {\n        require(_refferalFee <= 500000, \"setChangeFee: fee should be not greater than 50% of changeFee\");\n        refferalFee = _refferalFee;\n    }\n\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns(uint256 returnAmount) {\n        returnAmount = super.getReturn(_fromToken, _toToken, _amount).mul(TOTAL_PERCRENTS.sub(changeFee)).div(TOTAL_PERCRENTS);\n    }\n\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns(uint256 returnAmount) {\n        returnAmount = changeWithRef(_fromToken, _toToken, _amount, _minReturn, 0);\n    }\n\n    function changeWithRef(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn, address _ref) public returns(uint256 returnAmount) {\n        returnAmount = super.change(_fromToken, _toToken, _amount, _minReturn);\n        uint256 refferalAmount = returnAmount\n            .mul(changeFee).div(TOTAL_PERCRENTS.sub(changeFee))\n            .mul(refferalFee).div(TOTAL_PERCRENTS);\n\n        ERC20(_toToken).checkedTransfer(_ref, refferalAmount);\n    }\n\n    function lend(address _to, ERC20 _token, uint256 _amount, address _target, bytes _data) public payable {\n        uint256 prevBalance = _token.balanceOf(this);\n        super.lend(_to, _token, _amount, _target, _data);\n        require(_token.balanceOf(this) >= prevBalance.mul(TOTAL_PERCRENTS.add(lendFee)).div(TOTAL_PERCRENTS), \"lend: tokens must be returned with lend fee\");\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"changeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"changeWithRef\",\"outputs\":[{\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refferalFee\",\"type\":\"uint256\"}],\"name\":\"setRefferalFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"init2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bundlingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"bundleFirstTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBundling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"change\",\"outputs\":[{\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"changesEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unbundle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"unbundleSome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_changeFee\",\"type\":\"uint256\"}],\"name\":\"setChangeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"caller_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableChanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refferalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lendFee\",\"type\":\"uint256\"}],\"name\":\"setLendFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bundle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableBundling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_PERCRENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChangesDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bundle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unbundle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BundlingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_toToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_changer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_return\",\"type\":\"uint256\"}],\"name\":\"Change\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": ""
}