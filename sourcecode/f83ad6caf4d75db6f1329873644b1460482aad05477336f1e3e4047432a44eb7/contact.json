{
  "address": "0x97967c25f5a0de5cdc3c9d687ec3036c7b15252f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VideoPoker",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-20\n*/\n\npragma solidity ^0.4.23;\n\n// https://www.pennyether.com\n\n/******* USING Registry **************************\n\nGives the inherting contract access to:\n    .addressOf(bytes32): returns current address mapped to the name.\n    [modifier] .fromOwner(): requires the sender is owner.\n\n*************************************************/\n// Returned by .getRegistry()\ninterface IRegistry {\n    function owner() external view returns (address _addr);\n    function addressOf(bytes32 _name) external view returns (address _addr);\n}\n\ncontract UsingRegistry {\n    IRegistry private registry;\n\n    modifier fromOwner(){\n        require(msg.sender == getOwner());\n        _;\n    }\n\n    constructor(address _registry)\n        public\n    {\n        require(_registry != 0);\n        registry = IRegistry(_registry);\n    }\n\n    function addressOf(bytes32 _name)\n        internal\n        view\n        returns(address _addr)\n    {\n        return registry.addressOf(_name);\n    }\n\n    function getOwner()\n        public\n        view\n        returns (address _addr)\n    {\n        return registry.owner();\n    }\n\n    function getRegistry()\n        public\n        view\n        returns (IRegistry _addr)\n    {\n        return registry;\n    }\n}\n\n\n/******* USING ADMIN ***********************\n\nGives the inherting contract access to:\n    .getAdmin(): returns the current address of the admin\n    [modifier] .fromAdmin: requires the sender is the admin\n\n*************************************************/\ncontract UsingAdmin is\n    UsingRegistry\n{\n    constructor(address _registry)\n        UsingRegistry(_registry)\n        public\n    {}\n\n    modifier fromAdmin(){\n        require(msg.sender == getAdmin());\n        _;\n    }\n    \n    function getAdmin()\n        public\n        constant\n        returns (address _addr)\n    {\n        return addressOf(\"ADMIN\");\n    }\n}\n\n/******* USING TREASURY **************************\n\nGives the inherting contract access to:\n    .getTreasury(): returns current ITreasury instance\n    [modifier] .fromTreasury(): requires the sender is current Treasury\n\n*************************************************/\n// Returned by .getTreasury()\ninterface ITreasury {\n    function issueDividend() external returns (uint _profits);\n    function profitsSendable() external view returns (uint _profits);\n}\n\ncontract UsingTreasury is\n    UsingRegistry\n{\n    constructor(address _registry)\n        UsingRegistry(_registry)\n        public\n    {}\n\n    modifier fromTreasury(){\n        require(msg.sender == address(getTreasury()));\n        _;\n    }\n    \n    function getTreasury()\n        public\n        view\n        returns (ITreasury)\n    {\n        return ITreasury(addressOf(\"TREASURY\"));\n    }\n}\n\n\n/**\n    This is a simple class that maintains a doubly linked list of\n    address => uint amounts. Address balances can be added to \n    or removed from via add() and subtract(). All balances can\n    be obtain by calling balances(). If an address has a 0 amount,\n    it is removed from the Ledger.\n\n    Note: THIS DOES NOT TEST FOR OVERFLOWS, but it's safe to\n          use to track Ether balances.\n\n    Public methods:\n      - [fromOwner] add()\n      - [fromOwner] subtract()\n    Public views:\n      - total()\n      - size()\n      - balanceOf()\n      - balances()\n      - entries() [to manually iterate]\n*/\ncontract Ledger {\n    uint public total;      // Total amount in Ledger\n\n    struct Entry {          // Doubly linked list tracks amount per address\n        uint balance;\n        address next;\n        address prev;\n    }\n    mapping (address => Entry) public entries;\n\n    address public owner;\n    modifier fromOwner() { require(msg.sender==owner); _; }\n\n    // Constructor sets the owner\n    constructor(address _owner)\n        public\n    {\n        owner = _owner;\n    }\n\n\n    /******************************************************/\n    /*************** OWNER METHODS ************************/\n    /******************************************************/\n\n    function add(address _address, uint _amt)\n        fromOwner\n        public\n    {\n        if (_address == address(0) || _amt == 0) return;\n        Entry storage entry = entries[_address];\n\n        // If new entry, replace first entry with this one.\n        if (entry.balance == 0) {\n            entry.next = entries[0x0].next;\n            entries[entries[0x0].next].prev = _address;\n            entries[0x0].next = _address;\n        }\n        // Update stats.\n        total += _amt;\n        entry.balance += _amt;\n    }\n\n    function subtract(address _address, uint _amt)\n        fromOwner\n        public\n        returns (uint _amtRemoved)\n    {\n        if (_address == address(0) || _amt == 0) return;\n        Entry storage entry = entries[_address];\n\n        uint _maxAmt = entry.balance;\n        if (_maxAmt == 0) return;\n        \n        if (_amt >= _maxAmt) {\n            // Subtract the max amount, and delete entry.\n            total -= _maxAmt;\n            entries[entry.prev].next = entry.next;\n            entries[entry.next].prev = entry.prev;\n            delete entries[_address];\n            return _maxAmt;\n        } else {\n            // Subtract the amount from entry.\n            total -= _amt;\n            entry.balance -= _amt;\n            return _amt;\n        }\n    }\n\n\n    /******************************************************/\n    /*************** PUBLIC VIEWS *************************/\n    /******************************************************/\n\n    function size()\n        public\n        view\n        returns (uint _size)\n    {\n        // Loop once to get the total count.\n        Entry memory _curEntry = entries[0x0];\n        while (_curEntry.next > 0) {\n            _curEntry = entries[_curEntry.next];\n            _size++;\n        }\n        return _size;\n    }\n\n    function balanceOf(address _address)\n        public\n        view\n        returns (uint _balance)\n    {\n        return entries[_address].balance;\n    }\n\n    function balances()\n        public\n        view\n        returns (address[] _addresses, uint[] _balances)\n    {\n        // Populate names and addresses\n        uint _size = size();\n        _addresses = new address[](_size);\n        _balances = new uint[](_size);\n        uint _i = 0;\n        Entry memory _curEntry = entries[0x0];\n        while (_curEntry.next > 0) {\n            _addresses[_i] = _curEntry.next;\n            _balances[_i] = entries[_curEntry.next].balance;\n            _curEntry = entries[_curEntry.next];\n            _i++;\n        }\n        return (_addresses, _balances);\n    }\n}\n\n\n/**\n    This is a simple class that maintains a doubly linked list of\n    addresses it has seen. Addresses can be added and removed\n    from the set, and a full list of addresses can be obtained.\n\n    Methods:\n     - [fromOwner] .add()\n     - [fromOwner] .remove()\n    Views:\n     - .size()\n     - .has()\n     - .addresses()\n*/\ncontract AddressSet {\n    \n    struct Entry {  // Doubly linked list\n        bool exists;\n        address next;\n        address prev;\n    }\n    mapping (address => Entry) public entries;\n\n    address public owner;\n    modifier fromOwner() { require(msg.sender==owner); _; }\n\n    // Constructor sets the owner.\n    constructor(address _owner)\n        public\n    {\n        owner = _owner;\n    }\n\n\n    /******************************************************/\n    /*************** OWNER METHODS ************************/\n    /******************************************************/\n\n    function add(address _address)\n        fromOwner\n        public\n        returns (bool _didCreate)\n    {\n        // Do not allow the adding of HEAD.\n        if (_address == address(0)) return;\n        Entry storage entry = entries[_address];\n        // If already exists, do nothing. Otherwise set it.\n        if (entry.exists) return;\n        else entry.exists = true;\n\n        // Replace first entry with this one.\n        // Before: HEAD <-> X <-> Y\n        // After: HEAD <-> THIS <-> X <-> Y\n        // do: THIS.NEXT = [0].next; [0].next.prev = THIS; [0].next = THIS; THIS.prev = 0;\n        Entry storage HEAD = entries[0x0];\n        entry.next = HEAD.next;\n        entries[HEAD.next].prev = _address;\n        HEAD.next = _address;\n        return true;\n    }\n\n    function remove(address _address)\n        fromOwner\n        public\n        returns (bool _didExist)\n    {\n        // Do not allow the removal of HEAD.\n        if (_address == address(0)) return;\n        Entry storage entry = entries[_address];\n        // If it doesn't exist already, there is nothing to do.\n        if (!entry.exists) return;\n\n        // Stitch together next and prev, delete entry.\n        // Before: X <-> THIS <-> Y\n        // After: X <-> Y\n        // do: THIS.next.prev = this.prev; THIS.prev.next = THIS.next;\n        entries[entry.prev].next = entry.next;\n        entries[entry.next].prev = entry.prev;\n        delete entries[_address];\n        return true;\n    }\n\n\n    /******************************************************/\n    /*************** PUBLIC VIEWS *************************/\n    /******************************************************/\n\n    function size()\n        public\n        view\n        returns (uint _size)\n    {\n        // Loop once to get the total count.\n        Entry memory _curEntry = entries[0x0];\n        while (_curEntry.next > 0) {\n            _curEntry = entries[_curEntry.next];\n            _size++;\n        }\n        return _size;\n    }\n\n    function has(address _address)\n        public\n        view\n        returns (bool _exists)\n    {\n        return entries[_address].exists;\n    }\n\n    function addresses()\n        public\n        view\n        returns (address[] _addresses)\n    {\n        // Populate names and addresses\n        uint _size = size();\n        _addresses = new address[](_size);\n        // Iterate forward through all entries until the end.\n        uint _i = 0;\n        Entry memory _curEntry = entries[0x0];\n        while (_curEntry.next > 0) {\n            _addresses[_i] = _curEntry.next;\n            _curEntry = entries[_curEntry.next];\n            _i++;\n        }\n        return _addresses;\n    }\n}\n\n/**\n  A simple class that manages bankroll, and maintains collateral.\n  This class only ever sends profits the Treasury. No exceptions.\n\n  - Anybody can add funding (according to whitelist)\n  - Anybody can tell profits (balance - (funding + collateral)) to go to Treasury.\n  - Anyone can remove their funding, so long as balance >= collateral.\n  - Whitelist is managed by getWhitelistOwner() -- typically Admin.\n\n  Exposes the following:\n    Public Methods\n     - addBankroll\n     - removeBankroll\n     - sendProfits\n    Public Views\n     - getCollateral\n     - profits\n     - profitsSent\n     - profitsTotal\n     - bankroll\n     - bankrollAvailable\n     - bankrolledBy\n     - bankrollerTable\n*/\ncontract Bankrollable is\n    UsingTreasury\n{   \n    // How much profits have been sent. \n    uint public profitsSent;\n    // Ledger keeps track of who has bankrolled us, and for how much\n    Ledger public ledger;\n    // This is a copy of ledger.total(), to save gas in .bankrollAvailable()\n    uint public bankroll;\n    // This is the whitelist of who can call .addBankroll()\n    AddressSet public whitelist;\n\n    modifier fromWhitelistOwner(){\n        require(msg.sender == getWhitelistOwner());\n        _;\n    }\n\n    event BankrollAdded(uint time, address indexed bankroller, uint amount, uint bankroll);\n    event BankrollRemoved(uint time, address indexed bankroller, uint amount, uint bankroll);\n    event ProfitsSent(uint time, address indexed treasury, uint amount);\n    event AddedToWhitelist(uint time, address indexed addr, address indexed wlOwner);\n    event RemovedFromWhitelist(uint time, address indexed addr, address indexed wlOwner);\n\n    // Constructor creates the ledger and whitelist, with self as owner.\n    constructor(address _registry)\n        UsingTreasury(_registry)\n        public\n    {\n        ledger = new Ledger(this);\n        whitelist = new AddressSet(this);\n    }\n\n\n    /*****************************************************/\n    /************** WHITELIST MGMT ***********************/\n    /*****************************************************/    \n\n    function addToWhitelist(address _addr)\n        fromWhitelistOwner\n        public\n    {\n        bool _didAdd = whitelist.add(_addr);\n        if (_didAdd) emit AddedToWhitelist(now, _addr, msg.sender);\n    }\n\n    function removeFromWhitelist(address _addr)\n        fromWhitelistOwner\n        public\n    {\n        bool _didRemove = whitelist.remove(_addr);\n        if (_didRemove) emit RemovedFromWhitelist(now, _addr, msg.sender);\n    }\n\n    /*****************************************************/\n    /************** PUBLIC FUNCTIONS *********************/\n    /*****************************************************/\n\n    // Bankrollable contracts should be payable (to receive revenue)\n    function () public payable {}\n\n    // Increase funding by whatever value is sent\n    function addBankroll()\n        public\n        payable \n    {\n        require(whitelist.size()==0 || whitelist.has(msg.sender));\n        ledger.add(msg.sender, msg.value);\n        bankroll = ledger.total();\n        emit BankrollAdded(now, msg.sender, msg.value, bankroll);\n    }\n\n    // Removes up to _amount from Ledger, and sends it to msg.sender._callbackFn\n    function removeBankroll(uint _amount, string _callbackFn)\n        public\n        returns (uint _recalled)\n    {\n        // cap amount at the balance minus collateral, or nothing at all.\n        address _bankroller = msg.sender;\n        uint _collateral = getCollateral();\n        uint _balance = address(this).balance;\n        uint _available = _balance > _collateral ? _balance - _collateral : 0;\n        if (_amount > _available) _amount = _available;\n\n        // Try to remove _amount from ledger, get actual _amount removed.\n        _amount = ledger.subtract(_bankroller, _amount);\n        bankroll = ledger.total();\n        if (_amount == 0) return;\n\n        bytes4 _sig = bytes4(keccak256(_callbackFn));\n        require(_bankroller.call.value(_amount)(_sig));\n        emit BankrollRemoved(now, _bankroller, _amount, bankroll);\n        return _amount;\n    }\n\n    // Send any excess profits to treasury.\n    function sendProfits()\n        public\n        returns (uint _profits)\n    {\n        int _p = profits();\n        if (_p <= 0) return;\n        _profits = uint(_p);\n        profitsSent += _profits;\n        // Send profits to Treasury\n        address _tr = getTreasury();\n        require(_tr.call.value(_profits)());\n        emit ProfitsSent(now, _tr, _profits);\n    }\n\n\n    /*****************************************************/\n    /************** PUBLIC VIEWS *************************/\n    /*****************************************************/\n\n    // Function must be overridden by inheritors to ensure collateral is kept.\n    function getCollateral()\n        public\n        view\n        returns (uint _amount);\n\n    // Function must be overridden by inheritors to enable whitelist control.\n    function getWhitelistOwner()\n        public\n        view\n        returns (address _addr);\n\n    // Profits are the difference between balance and threshold\n    function profits()\n        public\n        view\n        returns (int _profits)\n    {\n        int _balance = int(address(this).balance);\n        int _threshold = int(bankroll + getCollateral());\n        return _balance - _threshold;\n    }\n\n    // How profitable this contract is, overall\n    function profitsTotal()\n        public\n        view\n        returns (int _profits)\n    {\n        return int(profitsSent) + profits();\n    }\n\n    // Returns the amount that can currently be bankrolled.\n    //   - 0 if balance < collateral\n    //   - If profits: full bankroll\n    //   - If no profits: remaning bankroll: balance - collateral\n    function bankrollAvailable()\n        public\n        view\n        returns (uint _amount)\n    {\n        uint _balance = address(this).balance;\n        uint _bankroll = bankroll;\n        uint _collat = getCollateral();\n        // Balance is below collateral!\n        if (_balance <= _collat) return 0;\n        // No profits, but we have a balance over collateral.\n        else if (_balance < _collat + _bankroll) return _balance - _collat;\n        // Profits. Return only _bankroll\n        else return _bankroll;\n    }\n\n    function bankrolledBy(address _addr)\n        public\n        view\n        returns (uint _amount)\n    {\n        return ledger.balanceOf(_addr);\n    }\n\n    function bankrollerTable()\n        public\n        view\n        returns (address[], uint[])\n    {\n        return ledger.balances();\n    }\n}\n\ncontract VideoPokerUtils {\n    uint constant HAND_UNDEFINED = 0;\n    uint constant HAND_RF = 1;\n    uint constant HAND_SF = 2;\n    uint constant HAND_FK = 3;\n    uint constant HAND_FH = 4;\n    uint constant HAND_FL = 5;\n    uint constant HAND_ST = 6;\n    uint constant HAND_TK = 7;\n    uint constant HAND_TP = 8;\n    uint constant HAND_JB = 9;\n    uint constant HAND_HC = 10;\n    uint constant HAND_NOT_COMPUTABLE = 11;\n\n    /*****************************************************/\n    /********** PUBLIC PURE FUNCTIONS ********************/\n    /*****************************************************/\n\n    // Gets a new 5-card hand, stored in uint32\n    // Gas Cost: 3k\n    function getHand(uint256 _hash)\n        public\n        pure\n        returns (uint32)\n    {\n        // Return the cards as a hand.\n        return uint32(getCardsFromHash(_hash, 5, 0));\n    }\n\n    // Both _hand and _draws store the first card in the\n    //   rightmost position. _hand uses chunks of 6 bits.\n    //\n    // In the below example, hand is [9,18,35,12,32], and\n    // the cards 18 and 35 will be replaced.\n    //\n    // _hand:                                [9,18,35,12,32]  \n    //    encoding:    XX 100000 001100 100011 010010 001001\n    //      chunks:           32     12     35     18      9\n    //       order:        card5, card4, card3, card2, card1\n    //     decimal:                                540161161\n    //\n    // _draws:                               card2 and card4\n    //    encoding:   XXX      0      0      1      1      0\n    //       order:        card5, card4, card3, card2, card1 \n    //     decimal:                                        6\n    // \n    // Gas Cost: Fixed 6k gas. \n    function drawToHand(uint256 _hash, uint32 _hand, uint _draws)\n        public\n        pure\n        returns (uint32)\n    {\n        // Draws must be valid. If no hand, must draw all 5 cards.\n        assert(_draws <= 31);\n        assert(_hand != 0 || _draws == 31);\n        // Shortcuts. Return _hand on no draws, or 5 cards on full draw.\n        if (_draws == 0) return _hand;\n        if (_draws == 31) return uint32(getCardsFromHash(_hash, 5, handToBitmap(_hand)));\n\n        // Create a mask of 1's where new cards should go.\n        uint _newMask;\n        for (uint _i=0; _i<5; _i++) {\n            if (_draws & 2**_i == 0) continue;\n            _newMask |= 63 * (2**(6*_i));\n        }\n        // Create a mask of 0's where new cards should go.\n        // Be sure to use only first 30 bits (5 cards x 6 bits)\n        uint _discardMask = ~_newMask & (2**31-1);\n\n        // Select from _newHand, discard from _hand, and combine.\n        uint _newHand = getCardsFromHash(_hash, 5, handToBitmap(_hand));\n        _newHand &= _newMask;\n        _newHand |= _hand & _discardMask;\n        return uint32(_newHand);\n    }\n\n    // Looks at a hand of 5-cards, determines strictly the HandRank.\n    // Gas Cost: up to 7k depending on hand.\n    function getHandRank(uint32 _hand)\n        public\n        pure\n        returns (uint)\n    {\n        if (_hand == 0) return HAND_NOT_COMPUTABLE;\n\n        uint _card;\n        uint[] memory _valCounts = new uint[](13);\n        uint[] memory _suitCounts = new uint[](5);\n        uint _pairVal;\n        uint _minNonAce = 100;\n        uint _maxNonAce = 0;\n        uint _numPairs;\n        uint _maxSet;\n        bool _hasFlush;\n        bool _hasAce;\n\n        // Set all the values above.\n        // Note:\n        //   _hasTwoPair will be true even if one pair is Trips.\n        //   Likewise, _hasTrips will be true even if there are Quads.\n        uint _i;\n        uint _val;\n        for (_i=0; _i<5; _i++) {\n            _card = readFromCards(_hand, _i);\n            if (_card > 51) return HAND_NOT_COMPUTABLE;\n            \n            // update val and suit counts, and if it's a flush\n            _val = _card % 13;\n            _valCounts[_val]++;\n            _suitCounts[_card/13]++;\n            if (_suitCounts[_card/13] == 5) _hasFlush = true;\n            \n            // update _hasAce, and min/max value\n            if (_val == 0) {\n                _hasAce = true;\n            } else {\n                if (_val < _minNonAce) _minNonAce = _val;\n                if (_val > _maxNonAce) _maxNonAce = _val;\n            }\n\n            // update _pairVal, _numPairs, _maxSet\n            if (_valCounts[_val] == 2) {\n                if (_numPairs==0) _pairVal = _val;\n                _numPairs++;\n            } else if (_valCounts[_val] == 3) {\n                _maxSet = 3;\n            } else if (_valCounts[_val] == 4) {\n                _maxSet = 4;\n            }\n        }\n\n        if (_numPairs > 0){\n            // If they have quads, they can't have royal flush, so we can return.\n            if (_maxSet==4) return HAND_FK;\n            // One of the two pairs was the trips, so it's a full house.\n            if (_maxSet==3 && _numPairs==2) return HAND_FH;\n            // Trips is their best hand (no straight or flush possible)\n            if (_maxSet==3) return HAND_TK;\n            // Two pair is their best hand (no straight or flush possible)\n            if (_numPairs==2) return HAND_TP;\n            // One pair is their best hand (no straight or flush possible)\n            if (_numPairs == 1 && (_pairVal >= 10 || _pairVal==0)) return HAND_JB;\n            // They have a low pair (no straight or flush possible)\n            return HAND_HC;\n        }\n\n        // They have no pair. Do they have a straight?\n        bool _hasStraight = _hasAce\n            // Check for: A,1,2,3,4 or 9,10,11,12,A\n            ? _maxNonAce == 4 || _minNonAce == 9\n            // Check for X,X+1,X+2,X+3,X+4\n            : _maxNonAce - _minNonAce == 4;\n        \n        // Check for hands in order of rank.\n        if (_hasStraight && _hasFlush && _minNonAce==9) return HAND_RF;\n        if (_hasStraight && _hasFlush) return HAND_SF;\n        if (_hasFlush) return HAND_FL;\n        if (_hasStraight) return HAND_ST;\n        return HAND_HC;\n    }\n\n    // Not used anywhere, but added for convenience\n    function handToCards(uint32 _hand)\n        public\n        pure\n        returns (uint8[5] _cards)\n    {\n        uint32 _mask;\n        for (uint _i=0; _i<5; _i++){\n            _mask = uint32(63 * 2**(6*_i));\n            _cards[_i] = uint8((_hand & _mask) / (2**(6*_i)));\n        }\n    }\n\n\n\n    /*****************************************************/\n    /********** PRIVATE INTERNAL FUNCTIONS ***************/\n    /*****************************************************/\n\n    function readFromCards(uint _cards, uint _index)\n        internal\n        pure\n        returns (uint)\n    {\n        uint _offset = 2**(6*_index);\n        uint _oneBits = 2**6 - 1;\n        return (_cards & (_oneBits * _offset)) / _offset;\n    }\n\n    // Returns a bitmap to represent the set of cards in _hand.\n    function handToBitmap(uint32 _hand)\n        internal\n        pure\n        returns (uint _bitmap)\n    {\n        if (_hand == 0) return 0;\n        uint _mask;\n        uint _card;\n        for (uint _i=0; _i<5; _i++){\n            _mask = 63 * 2**(6*_i);\n            _card = (_hand & _mask) / (2**(6*_i));\n            _bitmap |= 2**_card;\n        }\n    }\n\n    // Returns numCards from a uint256 (eg, keccak256) seed hash.\n    // Returns cards as one uint, with each card being 6 bits.\n    function getCardsFromHash(uint256 _hash, uint _numCards, uint _usedBitmap)\n        internal\n        pure\n        returns (uint _cards)\n    {\n        // Return early if we don't need to pick any cards.\n        if (_numCards == 0) return;\n\n        uint _cardIdx = 0;                // index of currentCard\n        uint _card;                       // current chosen card\n        uint _usedMask;                   // mask of current card\n\n        while (true) {\n            _card = _hash % 52;           // Generate card from hash\n            _usedMask = 2**_card;         // Create mask for the card\n\n            // If card is not used, add it to _cards and _usedBitmap\n            // Return if we have enough cards.\n            if (_usedBitmap & _usedMask == 0) {\n                _cards |= (_card * 2**(_cardIdx*6));\n                _usedBitmap |= _usedMask;\n                _cardIdx++;\n                if (_cardIdx == _numCards) return _cards;\n            }\n\n            // Generate hash used to pick next card.\n            _hash = uint256(keccak256(_hash));\n        }\n    }\n}\n\ncontract VideoPoker is\n    VideoPokerUtils,\n    Bankrollable,\n    UsingAdmin\n{\n    // All the data needed for each game.\n    struct Game {\n        // [1st 256-bit block]\n        uint32 userId;\n        uint64 bet;         // max of 18 Ether (set on bet)\n        uint16 payTableId;  // the PayTable used (set on bet)\n        uint32 iBlock;      // initial hand block (set on bet)\n        uint32 iHand;       // initial hand (set on draw/finalize)\n        uint8 draws;        // bitmap of which cards to draw (set on draw/finalize)\n        uint32 dBlock;      // block of the dHand (set on draw/finalize)\n        uint32 dHand;       // hand after draws (set on finalize)\n        uint8 handRank;     // result of the hand (set on finalize)\n    }\n\n    // These variables change on each bet and finalization.\n    // We put them in a struct with the hopes that optimizer\n    //   will do one write if any/all of them change.\n    struct Vars {\n        // [1st 256-bit block]\n        uint32 curId;               // (changes on bet)\n        uint64 totalWageredGwei;    // (changes on bet)\n        uint32 curUserId;           // (changes on bet, maybe)\n        uint128 empty1;             // intentionally left empty, so the below\n                                    //   updates occur in the same update\n        // [2nd 256-bit block]\n        uint64 totalWonGwei;        // (changes on finalization win)\n        uint88 totalCredits;        // (changes on finalization win)\n        uint8 empty2;               // set to true to normalize gas cost\n    }\n\n    struct Settings {\n        uint64 minBet;\n        uint64 maxBet;\n        uint16 curPayTableId;\n        uint16 numPayTables;\n        uint32 lastDayAdded;\n    }\n\n    Settings settings;\n    Vars vars;\n\n    // A Mapping of all games\n    mapping(uint32 => Game) public games;\n    \n    // Credits we owe the user\n    mapping(address => uint) public credits;\n\n    // Store a two-way mapping of address <=> userId\n    // If we've seen a user before, betting will be just 1 write\n    //  per Game struct vs 2 writes.\n    // The trade-off is 3 writes for new users. Seems fair.\n    mapping (address => uint32) public userIds;\n    mapping (uint32 => address) public userAddresses;\n\n    // Note: Pay tables cannot be changed once added.\n    // However, admin can change the current PayTable\n    mapping(uint16=>uint16[12]) payTables;\n\n    // version of the game\n    uint8 public constant version = 2;\n    uint8 constant WARN_IHAND_TIMEOUT = 1; // \"Initial hand not available. Drawing 5 new cards.\"\n    uint8 constant WARN_DHAND_TIMEOUT = 2; // \"Draw cards not available. Using initial hand.\"\n    uint8 constant WARN_BOTH_TIMEOUT = 3;  // \"Draw cards not available, and no initial hand.\"\n    \n    // Admin Events\n    event Created(uint time);\n    event PayTableAdded(uint time, address admin, uint payTableId);\n    event SettingsChanged(uint time, address admin);\n    // Game Events\n    event BetSuccess(uint time, address indexed user, uint32 indexed id, uint bet, uint payTableId);\n    event BetFailure(uint time, address indexed user, uint bet, string msg);\n    event DrawSuccess(uint time, address indexed user, uint32 indexed id, uint32 iHand, uint8 draws, uint8 warnCode);\n    event DrawFailure(uint time, address indexed user, uint32 indexed id, uint8 draws, string msg);\n    event FinalizeSuccess(uint time, address indexed user, uint32 indexed id, uint32 dHand, uint8 handRank, uint payout, uint8 warnCode);\n    event FinalizeFailure(uint time, address indexed user, uint32 indexed id, string msg);\n    // Credits\n    event CreditsAdded(uint time, address indexed user, uint32 indexed id, uint amount);\n    event CreditsUsed(uint time, address indexed user, uint32 indexed id, uint amount);\n    event CreditsCashedout(uint time, address indexed user, uint amount);\n        \n    constructor(address _registry)\n        Bankrollable(_registry)\n        UsingAdmin(_registry)\n        public\n    {\n        // Add the default PayTable.\n        _addPayTable(800, 50, 25, 9, 6, 4, 3, 2, 1);\n        // write to vars, to lower gas-cost for the first game.\n        // vars.empty1 = 1;\n        // vars.empty2 = 1;\n        // initialze stats to last settings\n        vars.curId = 293;\n        vars.totalWageredGwei =2864600000;\n        vars.curUserId = 38;\n        vars.totalWonGwei = 2450400000;\n\n        // initialize settings\n        settings.minBet = .001 ether;\n        settings.maxBet = .375 ether;\n        emit Created(now);\n    }\n    \n    \n    /************************************************************/\n    /******************** ADMIN FUNCTIONS ***********************/\n    /************************************************************/\n    \n    // Allows admin to change minBet, maxBet, and curPayTableId\n    function changeSettings(uint64 _minBet, uint64 _maxBet, uint8 _payTableId)\n        public\n        fromAdmin\n    {\n        require(_maxBet <= .375 ether);\n        require(_payTableId < settings.numPayTables);\n        settings.minBet = _minBet;\n        settings.maxBet = _maxBet;\n        settings.curPayTableId = _payTableId;\n        emit SettingsChanged(now, msg.sender);\n    }\n    \n    // Allows admin to permanently add a PayTable (once per day)\n    function addPayTable(\n        uint16 _rf, uint16 _sf, uint16 _fk, uint16 _fh,\n        uint16 _fl, uint16 _st, uint16 _tk, uint16 _tp, uint16 _jb\n    )\n        public\n        fromAdmin\n    {\n        uint32 _today = uint32(block.timestamp / 1 days);\n        require(settings.lastDayAdded < _today);\n        settings.lastDayAdded = _today;\n        _addPayTable(_rf, _sf, _fk, _fh, _fl, _st, _tk, _tp, _jb);\n        emit PayTableAdded(now, msg.sender, settings.numPayTables-1);\n    }\n    \n\n    /************************************************************/\n    /****************** PUBLIC FUNCTIONS ************************/\n    /************************************************************/\n\n    // Allows a user to add credits to their account.\n    function addCredits()\n        public\n        payable\n    {\n        _creditUser(msg.sender, msg.value, 0);\n    }\n\n    // Allows the user to cashout an amt (or their whole balance)\n    function cashOut(uint _amt)\n        public\n    {\n        _uncreditUser(msg.sender, _amt);\n    }\n\n    // Allows a user to create a game from Ether sent.\n    //\n    // Gas Cost: 55k (prev player), 95k (new player)\n    //   - 22k: tx overhead\n    //   - 26k, 66k: see _createNewGame()\n    //   -  3k: event\n    //   -  2k: curMaxBet()\n    //   -  2k: SLOAD, execution\n    function bet()\n        public\n        payable\n    {\n        uint _bet = msg.value;\n        if (_bet > settings.maxBet)\n            return _betFailure(\"Bet too large.\", _bet, true);\n        if (_bet < settings.minBet)\n            return _betFailure(\"Bet too small.\", _bet, true);\n        if (_bet > curMaxBet())\n            return _betFailure(\"The bankroll is too low.\", _bet, true);\n\n        // no uint64 overflow: _bet < maxBet < .625 ETH < 2e64\n        uint32 _id = _createNewGame(uint64(_bet));\n        emit BetSuccess(now, msg.sender, _id, _bet, settings.curPayTableId);\n    }\n\n    // Allows a user to create a game from Credits.\n    //\n    // Gas Cost: 61k\n    //   - 22k: tx overhead\n    //   - 26k: see _createNewGame()\n    //   -  3k: event\n    //   -  2k: curMaxBet()\n    //   -  2k: 1 event: CreditsUsed\n    //   -  5k: update credits[user]\n    //   -  1k: SLOAD, execution\n    function betWithCredits(uint64 _bet)\n        public\n    {\n        if (_bet > settings.maxBet)\n            return _betFailure(\"Bet too large.\", _bet, false);\n        if (_bet < settings.minBet)\n            return _betFailure(\"Bet too small.\", _bet, false);\n        if (_bet > curMaxBet())\n            return _betFailure(\"The bankroll is too low.\", _bet, false);\n        if (_bet > credits[msg.sender])\n            return _betFailure(\"Insufficient credits\", _bet, false);\n\n        uint32 _id = _createNewGame(uint64(_bet));\n        vars.totalCredits -= uint88(_bet);\n        credits[msg.sender] -= _bet;\n        emit CreditsUsed(now, msg.sender, _id, _bet);\n        emit BetSuccess(now, msg.sender, _id, _bet, settings.curPayTableId);\n    }\n\n    function betFromGame(uint32 _id, bytes32 _hashCheck)\n        public\n    {\n        bool _didFinalize = finalize(_id, _hashCheck);\n        uint64 _bet = games[_id].bet;\n        if (!_didFinalize)\n            return _betFailure(\"Failed to finalize prior game.\", _bet, false);\n        betWithCredits(_bet);\n    }\n\n        // Logs an error, and optionally refunds user the _bet\n        function _betFailure(string _msg, uint _bet, bool _doRefund)\n            private\n        {\n            if (_doRefund) require(msg.sender.call.value(_bet)());\n            emit BetFailure(now, msg.sender, _bet, _msg);\n        }\n        \n\n    // Resolves the initial hand (if possible) and sets the users draws.\n    // Users cannot draw 0 cards. They should instead use finalize().\n    //\n    // Notes:\n    //  - If user unable to resolve initial hand, sets draws to 5\n    //  - This always sets game.dBlock\n    //\n    // Gas Cost: ~38k\n    //   - 23k: tx\n    //   - 13k: see _draw()\n    //   -  2k: SLOADs, execution\n    function draw(uint32 _id, uint8 _draws, bytes32 _hashCheck)\n        public\n    {\n        Game storage _game = games[_id];\n        address _user = userAddresses[_game.userId];\n        if (_game.iBlock == 0)\n            return _drawFailure(_id, _draws, \"Invalid game Id.\");\n        if (_user != msg.sender)\n            return _drawFailure(_id, _draws, \"This is not your game.\");\n        if (_game.iBlock == block.number)\n            return _drawFailure(_id, _draws, \"Initial cards not available.\");\n        if (_game.dBlock != 0)\n            return _drawFailure(_id, _draws, \"Cards already drawn.\");\n        if (_draws > 31)\n            return _drawFailure(_id, _draws, \"Invalid draws.\");\n        if (_draws == 0)\n            return _drawFailure(_id, _draws, \"Cannot draw 0 cards. Use finalize instead.\");\n        if (_game.handRank != HAND_UNDEFINED)\n            return _drawFailure(_id, _draws, \"Game already finalized.\");\n        \n        _draw(_game, _id, _draws, _hashCheck);\n    }\n        function _drawFailure(uint32 _id, uint8 _draws, string _msg)\n            private\n        {\n            emit DrawFailure(now, msg.sender, _id, _draws, _msg);\n        }\n      \n\n    // Callable any time after the initial hand. Will assume\n    // no draws if called directly after new hand.\n    //\n    // Gas Cost: 44k (loss), 59k (win, has credits), 72k (win, no credits)\n    //   - 22k: tx overhead\n    //   - 21k, 36k, 49k: see _finalize()\n    //   -  1k: SLOADs, execution\n    function finalize(uint32 _id, bytes32 _hashCheck)\n        public\n        returns (bool _didFinalize)\n    {\n        Game storage _game = games[_id];\n        address _user = userAddresses[_game.userId];\n        if (_game.iBlock == 0)\n            return _finalizeFailure(_id, \"Invalid game Id.\");\n        if (_user != msg.sender)\n            return _finalizeFailure(_id, \"This is not your game.\");\n        if (_game.iBlock == block.number)\n            return _finalizeFailure(_id, \"Initial hand not avaiable.\");\n        if (_game.dBlock == block.number)\n            return _finalizeFailure(_id, \"Drawn cards not available.\");\n        if (_game.handRank != HAND_UNDEFINED)\n            return _finalizeFailure(_id, \"Game already finalized.\");\n\n        _finalize(_game, _id, _hashCheck);\n        return true;\n    }\n        function _finalizeFailure(uint32 _id, string _msg)\n            private\n            returns (bool)\n        {\n            emit FinalizeFailure(now, msg.sender, _id, _msg);\n            return false;\n        }\n\n\n    /************************************************************/\n    /****************** PRIVATE FUNCTIONS ***********************/\n    /************************************************************/\n\n    // Appends a PayTable to the mapping.\n    // It ensures sane values. (Double the defaults)\n    function _addPayTable(\n        uint16 _rf, uint16 _sf, uint16 _fk, uint16 _fh,\n        uint16 _fl, uint16 _st, uint16 _tk, uint16 _tp, uint16 _jb\n    )\n        private\n    {\n        require(_rf<=1600 && _sf<=100 && _fk<=50 && _fh<=18 && _fl<=12 \n                 && _st<=8 && _tk<=6 && _tp<=4 && _jb<=2);\n\n        uint16[12] memory _pt;\n        _pt[HAND_UNDEFINED] = 0;\n        _pt[HAND_RF] = _rf;\n        _pt[HAND_SF] = _sf;\n        _pt[HAND_FK] = _fk;\n        _pt[HAND_FH] = _fh;\n        _pt[HAND_FL] = _fl;\n        _pt[HAND_ST] = _st;\n        _pt[HAND_TK] = _tk;\n        _pt[HAND_TP] = _tp;\n        _pt[HAND_JB] = _jb;\n        _pt[HAND_HC] = 0;\n        _pt[HAND_NOT_COMPUTABLE] = 0;\n        payTables[settings.numPayTables] = _pt;\n        settings.numPayTables++;\n    }\n\n    // Increases totalCredits and credits[user]\n    // Optionally increases totalWonGwei stat.\n    function _creditUser(address _user, uint _amt, uint32 _gameId)\n        private\n    {\n        if (_amt == 0) return;\n        uint64 _incr = _gameId == 0 ? 0 : uint64(_amt / 1e9);\n        uint88 _totalCredits = vars.totalCredits + uint88(_amt);\n        uint64 _totalWonGwei = vars.totalWonGwei + _incr;\n        vars.totalCredits = _totalCredits;\n        vars.totalWonGwei = _totalWonGwei;\n        credits[_user] += _amt;\n        emit CreditsAdded(now, _user, _gameId, _amt);\n    }\n\n    // Lowers totalCredits and credits[user].\n    // Sends to user, using unlimited gas.\n    function _uncreditUser(address _user, uint _amt)\n        private\n    {\n        if (_amt > credits[_user] || _amt == 0) _amt = credits[_user];\n        if (_amt == 0) return;\n        vars.totalCredits -= uint88(_amt);\n        credits[_user] -= _amt;\n        require(_user.call.value(_amt)());\n        emit CreditsCashedout(now, _user, _amt);\n    }\n\n    // Creates a new game with the specified bet and current PayTable.\n    // Does no validation of the _bet size.\n    //\n    // Gas Cost: 26k, 66k\n    //   Overhead:\n    //     - 20k: 1 writes: Game\n    //     -  5k: 1 update: vars\n    //     -  1k: SLOAD, execution\n    //   New User:\n    //     - 40k: 2 writes: userIds, userAddresses\n    //   Repeat User:\n    //     -  0k: nothing extra\n    function _createNewGame(uint64 _bet)\n        private\n        returns (uint32 _curId)\n    {\n        // get or create user id\n        uint32 _curUserId = vars.curUserId;\n        uint32 _userId = userIds[msg.sender];\n        if (_userId == 0) {\n            _curUserId++;\n            userIds[msg.sender] = _curUserId;\n            userAddresses[_curUserId] = msg.sender;\n            _userId = _curUserId;\n        }\n\n        // increment vars\n        _curId =  vars.curId + 1;\n        uint64 _totalWagered = vars.totalWageredGwei + _bet / 1e9;\n        vars.curId = _curId;\n        vars.totalWageredGwei = _totalWagered;\n        vars.curUserId = _curUserId;\n\n        // save game\n        uint16 _payTableId = settings.curPayTableId;\n        Game storage _game = games[_curId];\n        _game.userId = _userId;\n        _game.bet = _bet;\n        _game.payTableId = _payTableId;\n        _game.iBlock = uint32(block.number);\n        return _curId;\n    }\n\n    // Gets initialHand, and stores .draws and .dBlock.\n    // Gas Cost: 13k\n    //   - 3k: getHand()\n    //   - 5k: 1 update: iHand, draws, dBlock\n    //   - 3k: event: DrawSuccess\n    //   - 2k: SLOADs, other\n    function _draw(Game storage _game, uint32 _id, uint8 _draws, bytes32 _hashCheck)\n        private\n    {\n        // assert hand is not already drawn\n        assert(_game.dBlock == 0);\n\n        // Deal the initial hand, or set draws to 5.\n        uint32 _iHand;\n        bytes32 _iBlockHash = blockhash(_game.iBlock);\n        uint8 _warnCode;\n        if (_iBlockHash != 0) {\n            // Ensure they are drawing against expected hand\n            if (_iBlockHash != _hashCheck) {\n                return _drawFailure(_id, _draws, \"HashCheck Failed. Try refreshing game.\");\n            }\n            _iHand = getHand(uint(keccak256(_iBlockHash, _id)));\n        } else {\n            _warnCode = WARN_IHAND_TIMEOUT;\n            _draws = 31;\n        }\n\n        // update game\n        _game.iHand = _iHand;\n        _game.draws = _draws;\n        _game.dBlock = uint32(block.number);\n\n        emit DrawSuccess(now, msg.sender, _id, _game.iHand, _draws, _warnCode);\n    }\n\n    // Resolves game based on .iHand and .draws, crediting user on a win.\n    // This always sets game.dHand and game.handRank.\n    //\n    // There are four possible scenarios:\n    //   User draws N cads, and dBlock is fresh:\n    //     - draw N cards into iHand, this is dHand\n    //   User draws N cards, and dBlock is too old:\n    //     - set dHand to iHand (note: iHand may be empty)\n    //   User draws 0 cards, and iBlock is fresh:\n    //     - draw 5 cards into iHand, set dHand to iHand\n    //   User draws 0 cards, and iBlock is too old:\n    //     - fail: set draws to 5, return. (user should call finalize again)\n    //\n    // Gas Cost: 21k loss, 36k win, 49k new win\n    //   - 6k: if draws > 0: drawToHand()\n    //   - 7k: getHandRank()\n    //   - 5k: 1 update: Game\n    //   - 2k: FinalizeSuccess\n    //   - 1k: SLOADs, execution\n    //   On Win: +13k, or +28k\n    //   - 5k: 1 updates: totalCredits, totalWon\n    //   - 5k or 20k: 1 update/write to credits[user]\n    //   - 2k: event: AccountCredited\n    //   - 1k: SLOADs, execution\n    function _finalize(Game storage _game, uint32 _id, bytes32 _hashCheck)\n        private\n    {\n        // Require game is not already finalized\n        assert(_game.handRank == HAND_UNDEFINED);\n\n        // Compute _dHand\n        address _user = userAddresses[_game.userId];\n        bytes32 _blockhash;\n        uint32 _dHand;\n        uint32 _iHand;  // set if draws are 0, and iBlock is fresh\n        uint8 _warnCode;\n        if (_game.draws != 0) {\n            _blockhash = blockhash(_game.dBlock);\n            if (_blockhash != 0) {\n                // draw cards to iHand, use as dHand\n                _dHand = drawToHand(uint(keccak256(_blockhash, _id)), _game.iHand, _game.draws);\n            } else {\n                // cannot draw any cards. use iHand.\n                if (_game.iHand != 0){\n                    _dHand = _game.iHand;\n                    _warnCode = WARN_DHAND_TIMEOUT;\n                } else {\n                    _dHand = 0;\n                    _warnCode = WARN_BOTH_TIMEOUT;\n                }\n            }\n        } else {\n            _blockhash = blockhash(_game.iBlock);\n            if (_blockhash != 0) {\n                // ensure they are drawing against expected hand\n                if (_blockhash != _hashCheck) {\n                    _finalizeFailure(_id, \"HashCheck Failed. Try refreshing game.\");\n                    return;\n                }\n                // draw 5 cards into iHand, use as dHand\n                _iHand = getHand(uint(keccak256(_blockhash, _id)));\n                _dHand = _iHand;\n            } else {\n                // can't finalize with iHand. Draw 5 cards.\n                _finalizeFailure(_id, \"Initial hand not available. Drawing 5 new cards.\");\n                _game.draws = 31;\n                _game.dBlock = uint32(block.number);\n                emit DrawSuccess(now, _user, _id, 0, 31, WARN_IHAND_TIMEOUT);\n                return;\n            }\n        }\n\n        // Compute _handRank. be sure dHand is not empty\n        uint8 _handRank = _dHand == 0\n            ? uint8(HAND_NOT_COMPUTABLE)\n            : uint8(getHandRank(_dHand));\n\n        // This only happens if draws==0, and iHand was drawable.\n        if (_iHand > 0) _game.iHand = _iHand;\n        // Always set dHand and handRank\n        _game.dHand = _dHand;\n        _game.handRank = _handRank;\n\n        // Compute _payout, credit user, emit event.\n        uint _payout = payTables[_game.payTableId][_handRank] * uint(_game.bet);\n        if (_payout > 0) _creditUser(_user, _payout, _id);\n        emit FinalizeSuccess(now, _user, _id, _game.dHand, _game.handRank, _payout, _warnCode);\n    }\n\n\n\n    /************************************************************/\n    /******************** PUBLIC VIEWS **************************/\n    /************************************************************/\n\n    // IMPLEMENTS: Bankrollable.getProfits()\n    // Ensures contract always has at least bankroll + totalCredits.\n    function getCollateral() public view returns (uint _amount) {\n        return vars.totalCredits;\n    }\n\n    // IMPLEMENTS: Bankrollable.getWhitelistOwner()\n    // Ensures contract always has at least bankroll + totalCredits.\n    function getWhitelistOwner() public view returns (address _wlOwner) {\n        return getAdmin();\n    }\n\n    // Returns the largest bet such that we could pay out two RoyalFlushes.\n    // The likelihood that two RoyalFlushes (with max bet size) are \n    //  won within a 255 block period is extremely low.\n    function curMaxBet() public view returns (uint) {\n        // Return largest bet such that RF*2*bet = bankrollable\n        uint _maxPayout = payTables[settings.curPayTableId][HAND_RF] * 2;\n        return bankrollAvailable() / _maxPayout;\n    }\n\n    // Return the less of settings.maxBet and curMaxBet()\n    function effectiveMaxBet() public view returns (uint _amount) {\n        uint _curMax = curMaxBet();\n        return _curMax > settings.maxBet ? settings.maxBet : _curMax;\n    }\n\n    function getPayTable(uint16 _payTableId)\n        public\n        view\n        returns (uint16[12])\n    {\n        require(_payTableId < settings.numPayTables);\n        return payTables[_payTableId];\n    }\n\n    function getCurPayTable()\n        public\n        view\n        returns (uint16[12])\n    {\n        return getPayTable(settings.curPayTableId);\n    }\n\n    // Gets the initial hand of a game.\n    function getIHand(uint32 _id)\n        public\n        view\n        returns (uint32)\n    {\n        Game memory _game = games[_id];\n        if (_game.iHand != 0) return _game.iHand;\n        if (_game.iBlock == 0) return;\n        \n        bytes32 _iBlockHash = blockhash(_game.iBlock);\n        if (_iBlockHash == 0) return;\n        return getHand(uint(keccak256(_iBlockHash, _id)));\n    }\n\n    // Get the final hand of a game.\n    // This will return iHand if there are no draws yet.\n    function getDHand(uint32 _id)\n        public\n        view\n        returns (uint32)\n    {\n        Game memory _game = games[_id];\n        if (_game.dHand != 0) return _game.dHand;\n        if (_game.draws == 0) return _game.iHand;\n        if (_game.dBlock == 0) return;\n\n        bytes32 _dBlockHash = blockhash(_game.dBlock);\n        if (_dBlockHash == 0) return _game.iHand;\n        return drawToHand(uint(keccak256(_dBlockHash, _id)), _game.iHand, _game.draws);\n    }\n\n    // Returns the hand rank and payout of a Game.\n    function getDHandRank(uint32 _id)\n        public\n        view\n        returns (uint8)\n    {\n        uint32 _dHand = getDHand(_id);\n        return _dHand == 0\n            ? uint8(HAND_NOT_COMPUTABLE)\n            : uint8(getHandRank(_dHand));\n    }\n\n    // Expose Vars //////////////////////////////////////\n    function curId() public view returns (uint32) {\n        return vars.curId;\n    }\n    function totalWagered() public view returns (uint) {\n        return uint(vars.totalWageredGwei) * 1e9;\n    }\n    function curUserId() public view returns (uint) {\n        return uint(vars.curUserId);\n    }\n    function totalWon() public view returns (uint) {\n        return uint(vars.totalWonGwei) * 1e9;\n    }\n    function totalCredits() public view returns (uint) {\n        return vars.totalCredits;\n    }\n    /////////////////////////////////////////////////////\n\n    // Expose Settings //////////////////////////////////\n    function minBet() public view returns (uint) {\n        return settings.minBet;\n    }\n    function maxBet() public view returns (uint) {\n        return settings.maxBet;\n    }\n    function curPayTableId() public view returns (uint) {\n        return settings.curPayTableId;\n    }\n    function numPayTables() public view returns (uint) {\n        return settings.numPayTables;\n    }\n    /////////////////////////////////////////////////////\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062005021833981016040525180808080600160a060020a03811615156200003e57600080fd5b60008054600160a060020a031916600160a060020a039290921691909117905550306200006a620003a9565b600160a060020a03909116815260405190819003602001906000f08015801562000098573d6000803e3d6000fd5b5060028054600160a060020a031916600160a060020a039290921691909117905530620000c4620003ba565b600160a060020a03909116815260405190819003602001906000f080158015620000f2573d6000803e3d6000fd5b50600460006101000a815481600160a060020a030219169083600160a060020a031602179055505050620001476103206032601960096006600460036002600162000217640100000000026401000000009004565b6006805461012563ffffffff19909116176bffffffffffffffff00000000191667aabe53c00000000017606060020a63ffffffff0219166c260000000000000000000000001790556007805463920e230067ffffffffffffffff19918216179091556005805466038d7ea4c68000921691909117604060020a608060020a0319166f053444835ec5800000000000000000001790556040805142815290517f06acbfb32bcf8383f3b0a768b70ac9ec234ea0f2d3b9c77fa6a2de69b919aad1916020908290030190a150620004ad565b62000221620003cb565b6106408a61ffff16111580156200023d575060648961ffff1611155b80156200024f575060328861ffff1611155b801562000261575060128761ffff1611155b8015620002735750600c8661ffff1611155b801562000285575060088561ffff1611155b801562000297575060068461ffff1611155b8015620002a9575060048361ffff1611155b8015620002bb575060028261ffff1611155b1515620002c757600080fd5b600080825261ffff8b81166020808501919091528b82166040808601919091528b831660608601528a8316608086015289831660a086015288831660c086015287831660e086015286831661010086015285831661012086015261014085018490526101608501849052600554720100000000000000000000000000000000000090049092168352600c90819052912062000364918390620003eb565b505060058054600161ffff72010000000000000000000000000000000000008084048216929092011602609060020a61ffff0219909116179055505050505050505050565b60405161084a806200406083390190565b60405161077780620048aa83390190565b61018060405190810160405280600c906020820280388339509192915050565b600183019183908215620004765791602002820160005b838211156200044457835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000402565b8015620004745782816101000a81549061ffff021916905560020160208160010104928301926001030262000444565b505b506200048492915062000488565b5090565b620004aa91905b808211156200048457805461ffff191681556001016200048f565b90565b613ba380620004bd6000396000f30060806040526004361061026e5763ffffffff60e060020a60003504166301a413b981146102705780630c657eb01461029757806311610c25146102ac57806313ca1464146102b4578063148105ab146102e857806319eb691a146102f05780632100a5d9146103055780632500ec4a1461033f5780632b36a657146103765780632e5b21681461038b5780633b19e84a146103a05780633f073031146103b55780633fea1c2b146103bd5780634081db51146103db57806342d1f17f146103fc57806345279c81146104aa5780634949d9fa146104bf57806354fd4d50146104e057806356397c35146104f55780635ab1bd531461050a5780635acfefee1461051f5780635b40a584146105345780635c1548fb146105495780635c7b79f51461055e578063609f9a8e146105765780636c85c727146105975780636e9960c3146105f55780637280850e1461060a5780638020fb7714610628578063854b1cdf14610676578063893d20e81461068b5780638a14f12c146106a05780638ab1d681146106b55780638bb7819f146106d657806393e59dc1146106eb5780639619367d1461070057806396fd550a146107155780639f0f78ca14610737578063a3293c0e1461074c578063acca92e01461077f578063b3ff277d146107b4578063b41a6ce2146107c9578063b5bd3eb914610549578063b94371ec146107f7578063c6699ba81461080c578063cc69176314610859578063d47f269e14610880578063d5420df414610898578063da5d2fac146108bc578063e43252d714610941578063ec50361114610962578063ed9980a614610977578063f3f318531461098c578063fe5ff468146109a8575b005b34801561027c57600080fd5b506102856109c9565b60408051918252519081900360200190f35b3480156102a357600080fd5b50610285610a14565b61026e610a1a565b3480156102c057600080fd5b506102d263ffffffff60043516610b9e565b6040805160ff9092168252519081900360200190f35b61026e610bd0565b3480156102fc57600080fd5b50610285610e5a565b34801561031157600080fd5b5061032363ffffffff60043516610e77565b60408051600160a060020a039092168252519081900360200190f35b34801561034b57600080fd5b5061035d63ffffffff60043516610e92565b6040805163ffffffff9092168252519081900360200190f35b34801561038257600080fd5b50610285610ffd565b34801561039757600080fd5b50610285611024565b3480156103ac57600080fd5b50610323611040565b61026e611070565b3480156103c957600080fd5b5061035d63ffffffff6004351661107e565b3480156103e757600080fd5b5061035d600160a060020a03600435166111af565b34801561040857600080fd5b506104116111c7565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561045557818101518382015260200161043d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561049457818101518382015260200161047c565b5050505090500194505050505060405180910390f35b3480156104b657600080fd5b506102856112fc565b3480156104cb57600080fd5b50610285600160a060020a0360043516611350565b3480156104ec57600080fd5b506102d26113ed565b34801561050157600080fd5b506103236113f2565b34801561051657600080fd5b50610323611401565b34801561052b57600080fd5b50610285611410565b34801561054057600080fd5b5061035d6114b5565b34801561055557600080fd5b506102856114c1565b34801561056a57600080fd5b5061026e6004356114e0565b34801561058257600080fd5b5061026e63ffffffff600435166024356114ed565b3480156105a357600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028595833595369560449491939091019190819084018382808284375094975061158d9650505050505050565b34801561060157600080fd5b50610323611807565b34801561061657600080fd5b5061028563ffffffff60043516611832565b34801561063457600080fd5b5061063d611b19565b604051808261018080838360005b8381101561066357818101518382015260200161064b565b5050505090500191505060405180910390f35b34801561068257600080fd5b50610285611b38565b34801561069757600080fd5b50610323611b49565b3480156106ac57600080fd5b50610285611bce565b3480156106c157600080fd5b5061026e600160a060020a0360043516611bec565b3480156106e257600080fd5b50610285611d04565b3480156106f757600080fd5b50610323611d4b565b34801561070c57600080fd5b50610285611d5a565b34801561072157600080fd5b5061026e67ffffffffffffffff60043516611d6a565b34801561074357600080fd5b50610285612045565b34801561075857600080fd5b5061076a63ffffffff60043516612058565b60405181518152808260a0808383602061064b565b34801561078b57600080fd5b506107a063ffffffff600435166024356120ae565b604080519115158252519081900360200190f35b3480156107c057600080fd5b506102856122a7565b3480156107d557600080fd5b5061026e67ffffffffffffffff6004358116906024351660ff604435166122bd565b34801561080357600080fd5b506103236123cd565b34801561081857600080fd5b5061026e61ffff60043581169060243581169060443581169060643581169060843581169060a43581169060c43581169060e43581169061010435166123d7565b34801561086557600080fd5b5061026e63ffffffff6004351660ff602435166044356124f0565b34801561088c57600080fd5b5061035d6004356127a1565b3480156108a457600080fd5b5061035d60043563ffffffff602435166044356127b6565b3480156108c857600080fd5b506108da63ffffffff60043516612887565b6040805163ffffffff9a8b16815267ffffffffffffffff90991660208a015261ffff909716888801529488166060880152928716608087015260ff91821660a0870152861660c0860152941660e08401529092166101008201529051908190036101200190f35b34801561094d57600080fd5b5061026e600160a060020a0360043516612908565b34801561096e57600080fd5b50610285612a20565b34801561098357600080fd5b50610285612a26565b34801561099857600080fd5b5061063d61ffff60043516612a37565b3480156109b457600080fd5b50610285600160a060020a0360043516612ac9565b600354600090600160a060020a0330163190826109e46114c1565b90508083116109f65760009350610a0e565b818101831015610a0a578083039350610a0e565b8193505b50505090565b60035481565b600554349060009068010000000000000000900467ffffffffffffffff16821115610a8557610a806040805190810160405280600e81526020017f42657420746f6f206c617267652e000000000000000000000000000000000000815250836001612adb565b610b9a565b60055467ffffffffffffffff16821015610ada57610a806040805190810160405280600e81526020017f42657420746f6f20736d616c6c2e000000000000000000000000000000000000815250836001612adb565b610ae2611d04565b821115610b2a57610a806040805190810160405280601881526020017f5468652062616e6b726f6c6c20697320746f6f206c6f772e0000000000000000815250836001612adb565b610b3382612bc1565b600554604080514281526020810186905261ffff608060020a90930492909216828201525191925063ffffffff831691600160a060020a033316917f12b9199c6d155759e1d7f4f5c031e9ed900ea5b210b38475e7f1456d8ef03393919081900360600190a35b5050565b600080610baa83610e92565b905063ffffffff811615610bc657610bc181611832565b610bc9565b600b5b9392505050565b60048054604080517f949d225d0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263949d225d9282820192602092908290030181600087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b505050506040513d6020811015610c5757600080fd5b50511580610cf9575060048054604080517f21887c3d000000000000000000000000000000000000000000000000000000008152600160a060020a0333811694820194909452905192909116916321887c3d916024808201926020929091908290030181600087803b158015610ccc57600080fd5b505af1158015610ce0573d6000803e3d6000fd5b505050506040513d6020811015610cf657600080fd5b50515b1515610d0457600080fd5b600254604080517ff5d82b6b000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301523460248301529151919092169163f5d82b6b91604480830192600092919082900301818387803b158015610d7157600080fd5b505af1158015610d85573d6000803e3d6000fd5b50505050600260009054906101000a9004600160a060020a0316600160a060020a0316632ddbd13a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ddc57600080fd5b505af1158015610df0573d6000803e3d6000fd5b505050506040513d6020811015610e0657600080fd5b50516003819055604080514281523460208201528082019290925251600160a060020a033316917f160f75e2b6a3d77c89deda80a60c72ad72cd9f540d023e7fdf6317aecddb68db919081900360600190a2565b6006546c01000000000000000000000000900463ffffffff165b90565b600b60205260009081526040902054600160a060020a031681565b6000610e9c613a41565b5063ffffffff80831660009081526008602090815260408083208151610120810183529054808616825267ffffffffffffffff6401000000008204169382019390935261ffff6c0100000000000000000000000084041691810191909152607060020a820484166060820152609060020a82048416608082015260ff60b060020a8304811660a083015260b860020a8304851660c083015260d860020a830490941660e0820181905260f860020a90920490931661010084015215610f67578160e001519250610ff6565b60a082015160ff161515610f815781608001519250610ff6565b60c082015163ffffffff161515610f9757610ff6565b5060c081015163ffffffff1640801515610fb75781608001519250610ff6565b6040805182815260e060020a63ffffffff87160260208201529051908190036024019020608083015160a0840151610ff392919060ff166127b6565b92505b5050919050565b6000600160a060020a03301631816110136114c1565b60035401905080820392505b505090565b60055468010000000000000000900467ffffffffffffffff1690565b600061106b7f5452454153555259000000000000000000000000000000000000000000000000612d67565b905090565b61107c33346000612dce565b565b6000611088613a41565b5063ffffffff80831660009081526008602090815260408083208151610120810183529054808616825267ffffffffffffffff6401000000008204169382019390935261ffff6c0100000000000000000000000084041691810191909152607060020a820484166060820152609060020a820484166080820181905260ff60b060020a8404811660a084015260b860020a8404861660c084015260d860020a840490951660e083015260f860020a909204909316610100840152156111535781608001519250610ff6565b606082015163ffffffff16151561116957610ff6565b50606081015163ffffffff164080151561118257610ff6565b6040805182815260e060020a63ffffffff87160260208201529051908190036024019020610ff3906127a1565b600a6020526000908152604090205463ffffffff1681565b606080600260009054906101000a9004600160a060020a0316600160a060020a0316637bb98a686040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561121d57600080fd5b505af1158015611231573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561125a57600080fd5b81019080805164010000000081111561127257600080fd5b8201602081018481111561128557600080fd5b81518560208202830111640100000000821117156112a257600080fd5b505092919060200180516401000000008111156112be57600080fd5b820160208101848111156112d157600080fd5b81518560208202830111640100000000821117156112ee57600080fd5b509496509450505050509091565b600080611307611d04565b60055490915068010000000000000000900467ffffffffffffffff16811161132f5780611349565b60055468010000000000000000900467ffffffffffffffff165b91505b5090565b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915160009392909216916370a082319160248082019260209290919082900301818787803b1580156113bb57600080fd5b505af11580156113cf573d6000803e3d6000fd5b505050506040513d60208110156113e557600080fd5b505192915050565b600281565b600254600160a060020a031681565b600054600160a060020a031690565b600080600061141d610ffd565b91506000821361142c5761101f565b60018054830190559091508190611441611040565b905080600160a060020a03168360405160006040518083038185875af192505050151561146d57600080fd5b60408051428152602081018590528151600160a060020a038416927f6930d0e66bafb5f81d786f05b526422c3839d434d99a531eb4b2e4a535348165928290030190a2505090565b60065463ffffffff1690565b6007546801000000000000000090046affffffffffffffffffffff1690565b6114ea3382612ecd565b50565b6000806114fa84846120ae565b63ffffffff8516600090815260086020526040902054909250640100000000900467ffffffffffffffff16905081151561157e576115796040805190810160405280601e81526020017f4661696c656420746f2066696e616c697a65207072696f722067616d652e00008152508267ffffffffffffffff166000612adb565b611587565b61158781611d6a565b50505050565b6000338180808061159c6114c1565b935030600160a060020a03163192508383116115b95760006115bd565b8383035b9150818811156115cb578197505b600254604080517f68c6b11a000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152602482018c9052915191909216916368c6b11a9160448083019260209291908290030181600087803b15801561163a57600080fd5b505af115801561164e573d6000803e3d6000fd5b505050506040513d602081101561166457600080fd5b5051600254604080517f2ddbd13a0000000000000000000000000000000000000000000000000000000081529051929a50600160a060020a0390911691632ddbd13a916004808201926020929091908290030181600087803b1580156116c957600080fd5b505af11580156116dd573d6000803e3d6000fd5b505050506040513d60208110156116f357600080fd5b5051600355871515611704576117fc565b866040518082805190602001908083835b602083106117345780518252601f199092019160209182019101611715565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905084600160a060020a0316888260e060020a9004906040518263ffffffff1660e060020a02815260040160006040518083038185885af1935050505015156117a957600080fd5b60035460408051428152602081018b90528082019290925251600160a060020a038716917fe247ca1cc083b13e9e81a5d9f83c08e1be5369c7c6f12637cb0bf63d9d5b29f6919081900360600190a28795505b505050505092915050565b600061106b7f41444d494e000000000000000000000000000000000000000000000000000000612d67565b6000806060808280808080808080808063ffffffff8f16151561185857600b9d50611b07565b60408051600d8082526101c0820190925290602082016101a080388339505060408051600580825260c08201909252929e5090506020820160a080388339019050509a506064985060009750600092505b60058310156119fa576118c28f63ffffffff1684612fde565b9c5060338d11156118d657600b9d50611b07565b600d8d0691508b828151811015156118ea57fe5b602090810290910101805160010190528a600d8e0481518110151561190b57fe5b602090810290910101805160010190528a600d8e0481518110151561192c57fe5b906020019060200201516005141561194357600194505b811515611953576001935061196b565b8882101561195f578198505b8782111561196b578197505b8b8281518110151561197957fe5b90602001906020020151600214156119a157861515611996578199505b6001909601956119ef565b8b828151811015156119af57fe5b90602001906020020151600314156119ca57600395506119ef565b8b828151811015156119d857fe5b90602001906020020151600414156119ef57600495505b6001909201916118a9565b6000871115611a87578560041415611a155760039d50611b07565b856003148015611a255750866002145b15611a335760049d50611b07565b8560031415611a455760079d50611b07565b8660021415611a575760089d50611b07565b866001148015611a705750600a8a101580611a70575089155b15611a7e5760099d50611b07565b600a9d50611b07565b83611a9757888803600414611aa6565b8760041480611aa65750886009145b9050808015611ab25750845b8015611abe5750886009145b15611acc5760019d50611b07565b808015611ad65750845b15611ae45760029d50611b07565b8415611af35760059d50611b07565b8015611b025760069d50611b07565b600a9d505b50505050505050505050505050919050565b611b21613a8d565b60055461106b90608060020a900461ffff16612a37565b600554608060020a900461ffff1690565b60008060009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611b9d57600080fd5b505af1158015611bb1573d6000803e3d6000fd5b505050506040513d6020811015611bc757600080fd5b5051905090565b600654640100000000900467ffffffffffffffff16633b9aca000290565b6000611bf66123cd565b600160a060020a031633600160a060020a0316141515611c1557600080fd5b60048054604080517f29092d0e000000000000000000000000000000000000000000000000000000008152600160a060020a0386811694820194909452905192909116916329092d0e916024808201926020929091908290030181600087803b158015611c8157600080fd5b505af1158015611c95573d6000803e3d6000fd5b505050506040513d6020811015611cab57600080fd5b505190508015610b9a5733600160a060020a031682600160a060020a03167fe64bfe936314bda02a76de6d787876f31f93470b24b68a9a2ceaa07fb609f392426040518082815260200191505060405180910390a35050565b60055461ffff608060020a90910481166000908152600c602052604081205490916201000090910481166002021680611d3b6109c9565b811515611d4457fe5b0491505090565b600454600160a060020a031681565b60055467ffffffffffffffff1690565b60055460009067ffffffffffffffff6801000000000000000090910481169083161115611ddc57610a806040805190810160405280600e81526020017f42657420746f6f206c617267652e0000000000000000000000000000000000008152508367ffffffffffffffff166000612adb565b60055467ffffffffffffffff9081169083161015611e3f57610a806040805190810160405280600e81526020017f42657420746f6f20736d616c6c2e0000000000000000000000000000000000008152508367ffffffffffffffff166000612adb565b611e47611d04565b8267ffffffffffffffff161115611ea357610a806040805190810160405280601881526020017f5468652062616e6b726f6c6c20697320746f6f206c6f772e00000000000000008152508367ffffffffffffffff166000612adb565b600160a060020a03331660009081526009602052604090205467ffffffffffffffff83161115611f1857610a806040805190810160405280601481526020017f496e73756666696369656e7420637265646974730000000000000000000000008152508367ffffffffffffffff166000612adb565b611f2182612bc1565b6007805472ffffffffffffffffffffff000000000000000019811667ffffffffffffffff861668010000000000000000928390046affffffffffffffffffffff908116829003169092021790915533600160a060020a031660008181526009602090815260409182902080548590039055815142815290810193909352805193945063ffffffff85169391927f319d155b1caa4fddb433c692c929ea27c83e6a83da54b51d8b8c9847238c5294929081900390910190a36005546040805142815267ffffffffffffffff85166020820152608060020a90920461ffff16828201525163ffffffff83169133600160a060020a0316917f12b9199c6d155759e1d7f4f5c031e9ed900ea5b210b38475e7f1456d8ef03393916060908290030190a35050565b600061204f610ffd565b60015401905090565b612060613aad565b6000805b6005811015610ff6576006810260020a603f8102925084831663ffffffff1681151561208c57fe5b0483826005811061209957fe5b60ff9092166020929092020152600101612064565b63ffffffff808316600090815260086020908152604080832080548086168552600b9093529083205492939092600160a060020a031691607060020a900416151561213957612132856040805190810160405280601081526020017f496e76616c69642067616d652049642e00000000000000000000000000000000815250613002565b925061229f565b33600160a060020a031681600160a060020a031614151561219357612132856040805190810160405280601681526020017f54686973206973206e6f7420796f75722067616d652e00000000000000000000815250613002565b815463ffffffff607060020a909104164314156121e957612132856040805190810160405280601a81526020017f496e697469616c2068616e64206e6f74206176616961626c652e000000000000815250613002565b815463ffffffff60b860020a9091041643141561223f57612132856040805190810160405280601a81526020017f447261776e206361726473206e6f7420617661696c61626c652e000000000000815250613002565b815460f860020a900460ff161561228f57612132856040805190810160405280601781526020017f47616d6520616c72656164792066696e616c697a65642e000000000000000000815250613002565b61229a8286866130bf565b600192505b505092915050565b60075467ffffffffffffffff16633b9aca000290565b6122c5611807565b600160a060020a031633600160a060020a03161415156122e457600080fd5b67053444835ec5800067ffffffffffffffff8316111561230357600080fd5b600554609060020a900461ffff1660ff82161061231f57600080fd5b6005805467ffffffffffffffff191667ffffffffffffffff858116919091176fffffffffffffffff0000000000000000191668010000000000000000918516919091021771ffff00000000000000000000000000000000191660ff8316608060020a021790556040805142815233600160a060020a0316602082015281517f1da3087dd1a739b3a686c91e6fadfbea4d3a88345fae920dcd4e65c920e29a88929181900390910190a1505050565b600061106b611807565b60006123e1611807565b600160a060020a031633600160a060020a031614151561240057600080fd5b506005546201518042049063ffffffff80831674010000000000000000000000000000000000000000909204161061243757600080fd5b6005805477ffffffff000000000000000000000000000000000000000019167401000000000000000000000000000000000000000063ffffffff8416021790556124888a8a8a8a8a8a8a8a8a613563565b60055460408051428152600160a060020a033316602082015260001961ffff609060020a90940484160190921682820152517fc151d2fd11066f5c29b943a5f2bc7811d4d4162098b3009f54c2ca78e98f1c359181900360600190a150505050505050505050565b63ffffffff808416600090815260086020908152604080832080548086168552600b9093529220549192600160a060020a0390921691607060020a90910416151561257a5761257585856040805190810160405280601081526020017f496e76616c69642067616d652049642e000000000000000000000000000000008152506136d6565b61279a565b33600160a060020a031681600160a060020a03161415156125d55761257585856040805190810160405280601681526020017f54686973206973206e6f7420796f75722067616d652e000000000000000000008152506136d6565b815463ffffffff607060020a9091041643141561262c5761257585856040805190810160405280601c81526020017f496e697469616c206361726473206e6f7420617661696c61626c652e000000008152506136d6565b815460b860020a900463ffffffff16156126805761257585856040805190810160405280601481526020017f436172647320616c726561647920647261776e2e0000000000000000000000008152506136d6565b601f8460ff1611156126cc5761257585856040805190810160405280600e81526020017f496e76616c69642064726177732e0000000000000000000000000000000000008152506136d6565b60ff8416151561273d576125758585606060405190810160405280602a81526020017f43616e6e6f74206472617720302063617264732e205573652066696e616c697a81526020017f6520696e73746561642e000000000000000000000000000000000000000000008152506136d6565b815460f860020a900460ff161561278e5761257585856040805190810160405280601781526020017f47616d6520616c72656164792066696e616c697a65642e0000000000000000008152506136d6565b61279a8286868661379b565b5050505050565b60006127b0826005600061396c565b92915050565b600080808080601f8611156127c757fe5b63ffffffff87161515806127db575085601f145b15156127e357fe5b8515156127f25786945061287c565b85601f14156128165761280f88600561280a8a6139dd565b61396c565b945061287c565b600092505b6005831015612851578260020a86166000141561283757612846565b8260060260020a603f02841793505b60019092019161281b565b8319637fffffff16915061286a88600561280a8a6139dd565b841663ffffffff838916161794508490505b505050509392505050565b60086020526000908152604090205463ffffffff8082169167ffffffffffffffff6401000000008204169161ffff6c0100000000000000000000000083041691607060020a8104821691609060020a820481169160ff60b060020a820481169260b860020a830481169260d860020a81049091169160f860020a9091041689565b60006129126123cd565b600160a060020a031633600160a060020a031614151561293157600080fd5b60048054604080517f0a3b0a4f000000000000000000000000000000000000000000000000000000008152600160a060020a038681169482019490945290519290911691630a3b0a4f916024808201926020929091908290030181600087803b15801561299d57600080fd5b505af11580156129b1573d6000803e3d6000fd5b505050506040513d60208110156129c757600080fd5b505190508015610b9a5733600160a060020a031682600160a060020a03167f36794b07b1dabd3b5763df32ac01b7ab16f470ac57e87b63d0d4c1e40efdbf47426040518082815260200191505060405180910390a35050565b60015481565b600554609060020a900461ffff1690565b612a3f613a8d565b60055461ffff609060020a909104811690831610612a5c57600080fd5b61ffff82166000908152600c60208190526040808320815161018081019283905293909291908390855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411612a86575094979650505050505050565b60096020526000908152604090205481565b8015612b0957604051600160a060020a033316908390600081818185875af1925050501515612b0957600080fd5b33600160a060020a03167f38b6fed49e5857eec3c089ce663a4064b021b4ab48e164cddd63177c7685a2a14284866040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612b80578181015183820152602001612b68565b50505050905090810190601f168015612bad5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2505050565b600654600160a060020a0333166000908152600a6020526040812054909163ffffffff6c0100000000000000000000000090910481169116828080831515612c6657600160a060020a0333166000818152600a60209081526040808320805463ffffffff6001909b019a8b1663ffffffff1990911681179091558352600b9091529020805473ffffffffffffffffffffffffffffffffffffffff191690911790558493505b50506006805463ffffffff19808216600163ffffffff808516919091018082169283176bffffffffffffffff0000000019908116633b9aca0067ffffffffffffffff9d8e16908104640100000000988990048f1601909d168702176fffffffff00000000000000000000000019166c010000000000000000000000009a84168b021790965560055460009384526008602052604090932080549094169782169790971790941692909802919091176dffff0000000000000000000000001916608060020a90970461ffff169094029590951771ffffffff00000000000000000000000000001916607060020a43909616959095029490941790915592915050565b60008054604080517fbb34534c000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163bb34534c9160248082019260209290919082900301818787803b1580156113bb57600080fd5b60008080841515612dde57612ec5565b63ffffffff841615612df657633b9aca008504612df9565b60005b6007805467ffffffffffffffff808216840190811667ffffffffffffffff196affffffffffffffffffffff6801000000000000000080860482168d019182160272ffffffffffffffffffffff000000000000000019909516949094171617909255600160a060020a03891660008181526009602090815260409182902080548c01905581514281529081018b9052815195985092965092945063ffffffff88169390927f4e8cf3f0c5d8f7d35d109e7015348cbeb93094df121b4580598480d06066410b928290030190a35b505050505050565b600160a060020a038216600090815260096020526040902054811180612ef1575080155b15612f115750600160a060020a0381166000908152600960205260409020545b801515612f1d57610b9a565b600780546affffffffffffffffffffff6801000000000000000080830482168590039091160272ffffffffffffffffffffff000000000000000019909116179055600160a060020a0382166000818152600960205260408082208054859003905551839181818185875af1925050501515612f9757600080fd5b60408051428152602081018390528151600160a060020a038516927ff726a786741417cb817896860b979c3bddf4bda01575b4482efb4bb685c6baee928290030190a25050565b60006006820260020a603f818181028616811515612ff857fe5b0495945050505050565b60008263ffffffff1633600160a060020a03167f1c8fefb714208502f1a915e3a0fb01c204268cf90a0eed42cf081650c91e131742856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561307b578181015183820152602001613063565b50505050905090810190601f1680156130a85780820380516001836020036101000a031916815260200191505b50935050505060405180910390a350600092915050565b825460009081908190819081908190819060f860020a900460ff16156130e157fe5b895463ffffffff81166000908152600b6020526040902054600160a060020a0316975060b060020a900460ff16156131b457895460b860020a900463ffffffff164095508515613178576040805187815263ffffffff8b811660e060020a02602083015291516024918190039190910190208b5461317192609060020a8204169060b060020a900460ff166127b6565b94506131af565b8954609060020a900463ffffffff16156131a6578954609060020a900463ffffffff169450600292506131af565b60009450600392505b6133a7565b8954607060020a900463ffffffff1640955085156132765785881461323f5761323989606060405190810160405280602681526020017f48617368436865636b204661696c65642e205472792072656672657368696e6781526020017f2067616d652e0000000000000000000000000000000000000000000000000000815250613002565b50613557565b6040805187815260e060020a63ffffffff8c16026020820152905190819003602401902061326c906127a1565b93508394506133a7565b6132dc89606060405190810160405280603081526020017f496e697469616c2068616e64206e6f7420617661696c61626c652e204472617781526020017f696e672035206e65772063617264732e00000000000000000000000000000000815250613002565b50895476ff000000000000000000000000000000000000000000001916761f00000000000000000000000000000000000000000000177affffffff0000000000000000000000000000000000000000000000191660b860020a4363ffffffff90811691909102919091178b556040805142815260006020820152601f81830152600160608201529051918b1691600160a060020a038a16917f5de8219970cf1855f1b8ccfe2f57fb5579fd91696de0e60b6ef6e47475b59f43916080918190039190910190a3613557565b63ffffffff8516156133c1576133bc85611832565b6133c4565b600b5b915060008463ffffffff16111561340157895475ffffffff0000000000000000000000000000000000001916609060020a63ffffffff861602178a555b89547fff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff1660d860020a63ffffffff871602177effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f860020a60ff841690810291909117808c556c01000000000000000000000000810461ffff166000908152600c6020819052604090912064010000000090920467ffffffffffffffff16929081106134a957fe5b601091828204019190066002029054906101000a900461ffff1661ffff1602905060008111156134de576134de87828b612dce565b89546040805142815260d860020a830463ffffffff908116602083015260ff60f860020a9094048416828401526060820185905292861660808201529051918b1691600160a060020a038a16917f018ef872420a53b47435588a5d67be6000b1c368eabc03049066ba29ad967c76919081900360a00190a35b50505050505050505050565b61356b613a8d565b6106408a61ffff1611158015613586575060648961ffff1611155b8015613597575060328861ffff1611155b80156135a8575060128761ffff1611155b80156135b95750600c8661ffff1611155b80156135ca575060088561ffff1611155b80156135db575060068461ffff1611155b80156135ec575060048361ffff1611155b80156135fd575060028261ffff1611155b151561360857600080fd5b600080825261ffff8b81166020808501919091528b82166040808601919091528b831660608601528a8316608086015289831660a086015288831660c086015287831660e086015286831661010086015285831661012086015261014085018490526101608501849052600554609060020a90049092168352600c908190529120613694918390613acc565b505060058054600161ffff609060020a808404821692909201160273ffff00000000000000000000000000000000000019909116179055505050505050505050565b8263ffffffff1633600160a060020a03167f4223ca7d6c37a824c716bcea67d6cd07f359bfe2173713e97e60a893baa7a0dc428585604051808481526020018360ff1660ff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561375a578181015183820152602001613742565b50505050905090810190601f1680156137875780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050565b83546000908190819060b860020a900463ffffffff16156137b857fe5b8654607060020a900463ffffffff164091508115613877578184146138435761383e8686606060405190810160405280602681526020017f48617368436865636b204661696c65642e205472792072656672657368696e6781526020017f2067616d652e00000000000000000000000000000000000000000000000000008152506136d6565b613963565b6040805183815260e060020a63ffffffff89160260208201529051908190036024019020613870906127a1565b925061387f565b50601f935060015b865475ffffffff0000000000000000000000000000000000001916609060020a63ffffffff85811682029290921776ff00000000000000000000000000000000000000000000191660b060020a60ff898116918202929092177affffffff0000000000000000000000000000000000000000000000191660b860020a4386160217808c55604080514281529490910485166020850152838101919091529084166060830152519188169133600160a060020a0316917f5de8219970cf1855f1b8ccfe2f57fb5579fd91696de0e60b6ef6e47475b59f43916080918190039190910190a35b50505050505050565b600080808085151561397d576139d3565b600092505b505060348506600281900a84811615156139bb57938417936006830260020a82029390931792600190920191858314156139bb576139d3565b60408051978852519687900360200190962095613982565b5050509392505050565b600080808063ffffffff851615156139f85760009350613a39565b5060005b6005811015613a39576006810260020a603f8102935063ffffffff86851616811515613a2457fe5b04600281900a949094179391506001016139fc565b505050919050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b61018060405190810160405280600c906020820280388339509192915050565b60a0604051908101604052806005906020820280388339509192915050565b600183019183908215613b525791602002820160005b83821115613b2257835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613ae2565b8015613b505782816101000a81549061ffff0219169055600201602081600101049283019260010302613b22565b505b5061134c92610e749250905b8082111561134c57805461ffff19168155600101613b5e5600a165627a7a723058200f5cc22a5e24af0d745887ab53349d299b815c565830a0854ebe2c3c9483c09f0029608060405234801561001057600080fd5b5060405160208061084a833981016040525160028054600160a060020a031916600160a060020a039092169190911790556107fa806100506000396000f30060806040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632ddbd13a811461009257806368c6b11a146100b957806370a08231146100dd5780637bb98a68146100fe5780638da5cb5b146101ac578063949d225d146101dd578063f29ee125146101f2578063f5d82b6b1461023b575b600080fd5b34801561009e57600080fd5b506100a7610261565b60408051918252519081900360200190f35b3480156100c557600080fd5b506100a7600160a060020a0360043516602435610267565b3480156100e957600080fd5b506100a7600160a060020a0360043516610386565b34801561010a57600080fd5b506101136103a1565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561015757818101518382015260200161013f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561019657818101518382015260200161017e565b5050505090500194505050505060405180910390f35b3480156101b857600080fd5b506101c1610578565b60408051600160a060020a039092168252519081900360200190f35b3480156101e957600080fd5b506100a7610587565b3480156101fe57600080fd5b50610213600160a060020a0360043516610692565b60408051938452600160a060020a039283166020850152911682820152519081900360600190f35b34801561024757600080fd5b5061025f600160a060020a03600435166024356106bf565b005b60005481565b6002546000908190819033600160a060020a0390811691161461028957600080fd5b600160a060020a038516158061029d575083155b156102a75761037e565b5050600160a060020a038316600090815260016020526040902080548015156102cf5761037e565b80841061036a576000805482900381556001838101805460028087018054600160a060020a039081168752602086905260408088208701805495831673ffffffffffffffffffffffffffffffffffffffff1996871617905591549454811687528187208301805495821695851695909517909455928a168552918420938455918301805483169055919091018054909116905591508161037e565b600080548590039055815484900382558392505b505092915050565b600160a060020a031660009081526001602052604090205490565b6060806000806103af6107ae565b6103b7610587565b9250826040519080825280602002602001820160405280156103e3578160200160208202803883390190505b50945082604051908082528060200260200182016040528015610410578160200160208202803883390190505b50600080805260016020908152604080516060810182527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb495481527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a54600160a060020a03908116938201939093527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4b5490921690820152919550925090505b60008160200151600160a060020a0316111561057157806020015185838151811015156104d957fe5b600160a060020a03928316602091820290920181019190915282810151909116600090815260019091526040902054845185908490811061051657fe5b602090810290910181019190915290810151600160a060020a039081166000908152600180845260409182902082516060810184528154815281830154851695810195909552600201549092169083015291909101906104b0565b5050509091565b600254600160a060020a031681565b60006105916107ae565b506000805260016020908152604080516060810182527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb495481527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a54600160a060020a03908116938201939093527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4b54909216908201525b60008160200151600160a060020a0316111561068e57602090810151600160a060020a03908116600090815260018084526040918290208251606081018452815481528183015485169581019590955260020154909216908301529190910190610629565b5090565b6001602081905260009182526040909120805491810154600290910154600160a060020a03918216911683565b60025460009033600160a060020a039081169116146106dd57600080fd5b600160a060020a03831615806106f1575081155b156106fb576107a9565b50600160a060020a03821660009081526001602052604090208054151561079a57600160208190527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a8054918301805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039485161790915581548316600090815260408120600201805494881694831685179055805281541690911790555b60008054830190558054820181555b505050565b6040805160608101825260008082526020820181905291810191909152905600a165627a7a72305820481de3258a41964b0a173757c3bd81e77a025c5fb49fd84d1c808900658d65a00029608060405234801561001057600080fd5b50604051602080610777833981016040525160018054600160a060020a031916600160a060020a03909216919091179055610727806100506000396000f3006080604052600436106100825763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630a3b0a4f811461008757806321887c3d146100bc57806329092d0e146100dd5780638da5cb5b146100fe578063949d225d1461012f578063da0321cd14610156578063f29ee125146101bb575b600080fd5b34801561009357600080fd5b506100a8600160a060020a0360043516610206565b604080519115158252519081900360200190f35b3480156100c857600080fd5b506100a8600160a060020a0360043516610319565b3480156100e957600080fd5b506100a8600160a060020a0360043516610337565b34801561010a57600080fd5b50610113610447565b60408051600160a060020a039092168252519081900360200190f35b34801561013b57600080fd5b50610144610456565b60408051918252519081900360200190f35b34801561016257600080fd5b5061016b610550565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101a757818101518382015260200161018f565b505050509050019250505060405180910390f35b3480156101c757600080fd5b506101dc600160a060020a03600435166106ab565b604080519315158452600160a060020a039283166020850152911682820152519081900360600190f35b6001546000908190819033600160a060020a0390811691161461022857600080fd5b600160a060020a038416151561023d57610312565b600160a060020a0384166000908152602081905260409020805490925060ff161561026757610312565b50805460ff19166001908117808355600060208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5805461010090819004600160a060020a03908116820274ffffffffffffffffffffffffffffffffffffffff001995861617875582548290048116845260409093208501805493891673ffffffffffffffffffffffffffffffffffffffff199094168417905581549202919092161781559092505b5050919050565b600160a060020a031660009081526020819052604090205460ff1690565b600154600090819033600160a060020a0390811691161461035757600080fd5b600160a060020a038316151561036c57610441565b50600160a060020a0382166000908152602081905260409020805460ff16151561039557610441565b805460018083018054600160a060020a03908116600090815260208190526040808220805474ffffffffffffffffffffffffffffffffffffffff00191661010097889004851688021790559254865495909504821681528281208401805495831673ffffffffffffffffffffffffffffffffffffffff19968716179055908716815220805474ffffffffffffffffffffffffffffffffffffffffff191681558101805490921690915591505b50919050565b600154600160a060020a031681565b60006104606106db565b5060008080526020908152604080516060810182527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb55460ff8116151582526101009004600160a060020a03908116938201939093527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb654909216908201525b60008160200151600160a060020a0316111561054c57602090810151600160a060020a0390811660009081528083526040908190208151606081018352815460ff81161515825261010090048416948101949094526001908101549092169083015291909101906104e0565b5090565b606060008061055d6106db565b610565610456565b925082604051908082528060200260200182016040528015610591578160200160208202803883390190505b5060008080526020818152604080516060810182527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb55460ff8116151582526101009004600160a060020a03908116938201939093527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb65490921690820152919550925090505b60008160200151600160a060020a031611156106a5578060200151848381518110151561064157fe5b600160a060020a03928316602091820290920181019190915291820151811660009081528083526040908190208151606081018352815460ff8116151582526101009004841694810194909452600190810154909216908301529190910190610618565b50505090565b6000602081905290815260409020805460019091015460ff821691600160a060020a036101009091048116911683565b6040805160608101825260008082526020820181905291810191909152905600a165627a7a72305820c6f7d5e3ae73be767a40c6a21a1f5854450849bca9362b9bde94831850befb8700290000000000000000000000009c6386aba3907ad0e2177e74684f3ac986070981",
  "constructorArguments": "0000000000000000000000009c6386aba3907ad0e2177e74684f3ac986070981"
}