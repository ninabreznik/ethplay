{
  "address": "0xe29c5b523590165795bbd7d52369c2895b18841f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ESportsToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-01\n*/\n\ncontract ESportsConstants {\n    uint constant TOKEN_DECIMALS = 18;\n    uint8 constant TOKEN_DECIMALS_UINT8 = uint8(TOKEN_DECIMALS);\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n\n    uint constant RATE = 240; // = 1 ETH\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract ESportsFreezingStorage is Ownable {\n    // Timestamp when token release is enabled\n    uint64 public releaseTime;\n\n    // ERC20 basic token contract being held\n    // ERC20Basic token;\n    ESportsToken token;\n    \n    function ESportsFreezingStorage(ESportsToken _token, uint64 _releaseTime) { //ERC20Basic\n        require(_releaseTime > now);\n        \n        releaseTime = _releaseTime;\n        token = _token;\n    }\n\n    function release(address _beneficiary) onlyOwner returns(uint) {\n        //require(now >= releaseTime);\n        if (now < releaseTime) return 0;\n\n        uint amount = token.balanceOf(this);\n        //require(amount > 0);\n        if (amount == 0)  return 0;\n\n        // token.safeTransfer(beneficiary, amount);\n        //require(token.transfer(_beneficiary, amount));\n        bool result = token.transfer(_beneficiary, amount);\n        if (!result) return 0;\n        \n        return amount;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  \tfunction allowance(address owner, address spender) constant returns (uint256);\n  \tfunction transferFrom(address from, address to, uint256 value) returns (bool);\n  \tfunction approve(address spender, uint256 value) returns (bool);\n  \tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) returns (bool) {\n        require(_to != address(0));\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n        require(_to != address(0));\n\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) returns (bool) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        }\n        else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(0x0, _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\ncontract ESportsToken is ESportsConstants, MintableToken {\n    using SafeMath for uint;\n\n    event Burn(address indexed burner, uint value);\n    event MintTimelocked(address indexed beneficiary, uint amount);\n\n    /**\n     * @dev Pause token transfer. After successfully finished crowdsale it becomes false\n     */\n    bool public paused = true;\n    /**\n     * @dev Accounts who can transfer token even if paused. Works only during crowdsale\n     */\n    mapping(address => bool) excluded;\n\n    mapping (address => ESportsFreezingStorage[]) public frozenFunds;\n\n    function name() constant public returns (string _name) {\n        return \"ESports Token\";\n    }\n\n    function symbol() constant public returns (string _symbol) {\n        return \"ERT\";\n    }\n\n    function decimals() constant public returns (uint8 _decimals) {\n        return TOKEN_DECIMALS_UINT8;\n    }\n    \n    function allowMoveTokens() onlyOwner {\n        paused = false;\n    }\n\n    function addExcluded(address _toExclude) onlyOwner {\n        addExcludedInternal(_toExclude);\n    }\n    \n    function addExcludedInternal(address _toExclude) private {\n        excluded[_toExclude] = true;\n    }\n\n    /**\n     * @dev Wrapper of token.transferFrom\n     */\n    function transferFrom(address _from, address _to, uint _value) returns (bool) {\n        require(!paused || excluded[_from]);\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Wrapper of token.transfer \n     */\n    function transfer(address _to, uint _value) returns (bool) {\n        require(!paused || excluded[msg.sender]);\n\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Mint timelocked tokens\n     */\n    function mintTimelocked(address _to, uint _amount, uint32 _releaseTime)\n            onlyOwner canMint returns (ESportsFreezingStorage) {\n        ESportsFreezingStorage timelock = new ESportsFreezingStorage(this, _releaseTime);\n        mint(timelock, _amount);\n\n        frozenFunds[_to].push(timelock);\n        addExcludedInternal(timelock);\n\n        MintTimelocked(_to, _amount);\n\n        return timelock;\n    }\n\n    /**\n     * @dev Release frozen tokens\n     * @return Total amount of released tokens\n     */\n    function returnFrozenFreeFunds() public returns (uint) {\n        uint total = 0;\n        ESportsFreezingStorage[] storage frozenStorages = frozenFunds[msg.sender];\n        // for (uint x = 0; x < frozenStorages.length; x++) {\n        //     uint amount = balanceOf(frozenStorages[x]);\n        //     if (frozenStorages[x].call(bytes4(sha3(\"release(address)\")), msg.sender))\n        //         total = total.add(amount);\n        // }\n        for (uint x = 0; x < frozenStorages.length; x++) {\n            uint amount = frozenStorages[x].release(msg.sender);\n            total = total.add(amount);\n        }\n        \n        return total;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint _value) public {\n        require(!paused || excluded[msg.sender]);\n        require(_value > 0);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        \n        Burn(msg.sender, _value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowMoveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toExclude\",\"type\":\"address\"}],\"name\":\"addExcluded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint32\"}],\"name\":\"mintTimelocked\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnFrozenFreeFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintTimelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a61ffff02191675010000000000000000000000000000000000000000001790555b60038054600160a060020a03191633600160a060020a03161790555b5b6116f78061005a6000396000f300606060405236156101305763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461013557806306fdde031461015c578063095ea7b3146101e757806318160ddd1461021d57806323b872dd14610242578063313ce5671461027e578063337a8cdb146102a757806340c10f19146102bc57806342966c68146102f25780634fa87fd31461030a5780635c975abb14610348578063661884631461036f57806370a08231146103a55780637d64bcb4146103d65780638da5cb5b146103fd57806395d89b411461042c578063a9059cbb146104b7578063a9321573146104ed578063c78cdf661461050e578063c84748f914610555578063d73dd6231461057a578063dd62ed3e146105b0578063f2fde38b146105e7575b600080fd5b341561014057600080fd5b610148610608565b604051901515815260200160405180910390f35b341561016757600080fd5b61016f610618565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ac5780820151818401525b602001610193565b50505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f257600080fd5b610148600160a060020a036004351660243561065a565b604051901515815260200160405180910390f35b341561022857600080fd5b610230610701565b60405190815260200160405180910390f35b341561024d57600080fd5b610148600160a060020a0360043581169060243516604435610707565b604051901515815260200160405180910390f35b341561028957600080fd5b61029161075b565b60405160ff909116815260200160405180910390f35b34156102b257600080fd5b6102ba610761565b005b34156102c757600080fd5b610148600160a060020a036004351660243561079f565b604051901515815260200160405180910390f35b34156102fd57600080fd5b6102ba6004356108af565b005b341561031557600080fd5b61032c600160a060020a0360043516602435610992565b604051600160a060020a03909116815260200160405180910390f35b341561035357600080fd5b6101486109d4565b604051901515815260200160405180910390f35b341561037a57600080fd5b610148600160a060020a03600435166024356109e4565b604051901515815260200160405180910390f35b34156103b057600080fd5b610230600160a060020a0360043516610ae0565b60405190815260200160405180910390f35b34156103e157600080fd5b610148610aff565b604051901515815260200160405180910390f35b341561040857600080fd5b61032c610b75565b604051600160a060020a03909116815260200160405180910390f35b341561043757600080fd5b61016f610b84565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ac5780820151818401525b602001610193565b50505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c257600080fd5b610148600160a060020a0360043516602435610bc6565b604051901515815260200160405180910390f35b34156104f857600080fd5b6102ba600160a060020a0360043516610c18565b005b341561051957600080fd5b61032c600160a060020a036004351660243563ffffffff60443516610c41565b604051600160a060020a03909116815260200160405180910390f35b341561056057600080fd5b610230610d6a565b60405190815260200160405180910390f35b341561058557600080fd5b610148600160a060020a0360043516602435610e73565b604051901515815260200160405180910390f35b34156105bb57600080fd5b610230600160a060020a0360043581169060243516610f18565b60405190815260200160405180910390f35b34156105f257600080fd5b6102ba600160a060020a0360043516610f45565b005b60035460a060020a900460ff1681565b610620611239565b60408051908101604052600d81527f4553706f72747320546f6b656e00000000000000000000000000000000000000602082015290505b90565b600081158061068c5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561069757600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60035460009060a860020a900460ff16158061073b5750600160a060020a03841660009081526004602052604090205460ff165b151561074657600080fd5b610751848484610fde565b90505b9392505050565b60125b90565b60035433600160a060020a0390811691161461077c57600080fd5b6003805475ff000000000000000000000000000000000000000000191690555b5b565b60035460009033600160a060020a039081169116146107bd57600080fd5b60035460a060020a900460ff16156107d457600080fd5b6000546107e7908363ffffffff61110a16565b6000908155600160a060020a038416815260016020526040902054610812908363ffffffff61110a16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b5b92915050565b60035460a860020a900460ff1615806108e05750600160a060020a03331660009081526004602052604090205460ff165b15156108eb57600080fd5b600081116108f857600080fd5b600160a060020a033316600090815260016020526040902054610921908263ffffffff61112416565b600160a060020a0333166000908152600160205260408120919091555461094e908263ffffffff61112416565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a25b50565b6005602052816000526040600020818154811015156109ad57fe5b906000526020600020900160005b915091509054906101000a9004600160a060020a031681565b60035460a860020a900460ff1681565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610a4157600160a060020a033381166000908152600260209081526040808320938816835292905290812055610a78565b610a51818463ffffffff61112416565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a03908116911614610b1d57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600354600160a060020a031681565b610b8c611239565b60408051908101604052600381527f4552540000000000000000000000000000000000000000000000000000000000602082015290505b90565b60035460009060a860020a900460ff161580610bfa5750600160a060020a03331660009081526004602052604090205460ff165b1515610c0557600080fd5b610c0f838361113b565b90505b92915050565b60035433600160a060020a03908116911614610c3357600080fd5b61098f81611212565b5b5b50565b600354600090819033600160a060020a03908116911614610c6157600080fd5b60035460a060020a900460ff1615610c7857600080fd5b3083610c8261124b565b600160a060020a03909216825263ffffffff16602082015260409081019051809103906000f0801515610cb457600080fd5b9050610cc0818561079f565b50600160a060020a0385166000908152600560205260409020805460018101610ce9838261125b565b916000526020600020900160005b8154600160a060020a038086166101009390930a9283029202191617905550610d1f81611212565b84600160a060020a03167f1385625d3103ed8e66df4d088b0073c5061943280caaa7e96986e0e59391e8c58560405190815260200160405180910390a28091505b5b5b509392505050565b600160a060020a0333166000908152600560205260408120819081805b8254821015610e68578282815481101515610d9e57fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a03166319165587336000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610e2d57600080fd5b6102c65a03f11515610e3e57600080fd5b50505060405180519150610e5a9050848263ffffffff61110a16565b93505b600190910190610d87565b8394505b5050505090565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610eab908363ffffffff61110a16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a03908116911614610f6057600080fd5b600160a060020a0381161515610f7557600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600080600160a060020a0384161515610ff657600080fd5b50600160a060020a0380851660008181526002602090815260408083203390951683529381528382205492825260019052919091205461103c908463ffffffff61112416565b600160a060020a038087166000908152600160205260408082209390935590861681522054611071908463ffffffff61110a16565b600160a060020a03851660009081526001602052604090205561109a818463ffffffff61112416565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b60008282018381101561111957fe5b8091505b5092915050565b60008282111561113057fe5b508082035b92915050565b6000600160a060020a038316151561115257600080fd5b600160a060020a03331660009081526001602052604090205461117b908363ffffffff61112416565b600160a060020a0333811660009081526001602052604080822093909355908516815220546111b0908363ffffffff61110a16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a0381166000908152600460205260409020805460ff191660011790555b50565b60206040519081016040526000815290565b604051610425806112a783390190565b81548183558181151161127f5760008381526020902061127f918101908301611285565b5b505050565b61065791905b8082111561129f576000815560010161128b565b5090565b9056006060604052341561000f57600080fd5b60405160408061042583398101604052808051919060200180519150505b5b60008054600160a060020a03191633600160a060020a03161790555b426001604060020a0382161161005f57600080fd5b6000805460a060020a60e060020a031916740100000000000000000000000000000000000000006001604060020a0384160217905560018054600160a060020a031916600160a060020a0384161790555b50505b610363806100c26000396000f300606060405263ffffffff60e060020a6000350416631916558781146100455780638da5cb5b14610076578063b91d4001146100a5578063f2fde38b146100d5575b600080fd5b341561005057600080fd5b610064600160a060020a03600435166100f6565b60405190815260200160405180910390f35b341561008157600080fd5b610089610267565b604051600160a060020a03909116815260200160405180910390f35b34156100b057600080fd5b6100b8610276565b60405167ffffffffffffffff909116815260200160405180910390f35b34156100e057600080fd5b6100f4600160a060020a036004351661029e565b005b600080548190819033600160a060020a0390811691161461011657600080fd5b60005474010000000000000000000000000000000000000000900467ffffffffffffffff1642101561014b576000925061025f565b600154600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156101a457600080fd5b6102c65a03f115156101b557600080fd5b50505060405180519250508115156101d0576000925061025f565b600154600160a060020a031663a9059cbb858460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561022f57600080fd5b6102c65a03f1151561024057600080fd5b505050604051805191505080151561025b576000925061025f565b8192505b5b5050919050565b600054600160a060020a031681565b60005474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60005433600160a060020a039081169116146102b957600080fd5b600160a060020a03811615156102ce57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600a165627a7a723058203255575bbf8655d5f7c5e5288878add81ada58c87433d4e63afbe93fffedb70e0029a165627a7a723058206c612b621da22b3c7696659ef3460b230b3fa7771250645c54853ddfa85a48f90029"
}