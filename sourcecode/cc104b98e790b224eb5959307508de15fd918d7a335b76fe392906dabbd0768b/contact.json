{
  "address": "0x3c187481534c8d3f5bfbab6b3b09d8466bfeb769",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FDKToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-25\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a && c >= b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n\n}\n\n\n\n\ncontract owned { //Contract used to only allow the owner to call some functions\n\taddress public owner;\n\n\tfunction owned() public {\n\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner {\n\trequire(msg.sender == owner);\n\t_;\n\t}\n\n\tfunction transferOwnership(address newOwner) onlyOwner public {\n\towner = newOwner;\n\t}\n}\n\n\ncontract TokenERC20 {\n\n\tusing SafeMath for uint256;\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 8;\n\t//\n\tuint256 public totalSupply;\n\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\n\tfunction TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != 0x0);\n\t\t// Check for overflows\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\n\tfunction transfer(address _to, uint256 _value) public {\n\t\t_transfer(msg.sender, _to, _value);\n\t}\n\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\tallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\treturn true;\n\t}\n\n\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n\t\ttotalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\n\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] =allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n\t\ttotalSupply = totalSupply.sub(_value);                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\n}\n\n/******************************************/\n/*       FDKToken STARTS HERE       */\n/******************************************/\n\ncontract FDKToken is owned, TokenERC20  {\n\n\t//Modify these variables\n\tuint256 _initialSupply=9000000000; \n\tstring _tokenName=\"FeeDock\";  \n\tstring _tokenSymbol=\"FDK\";\n\taddress walletMain = 0x30A8692bdFF6A2b797cea3654882154EA4556003;\n\taddress walletLocked = 0x5C647abe86450bDFCFd54058BA3ecD5C5e0f9696;\n\tuint256 public startTime;\n\n\tmapping (address => bool) public frozenAccount;\n\n\t/* This generates a public event on the blockchain that will notify clients */\n\tevent FrozenFunds(address target, bool frozen);\n\n\t/* Initializes contract with initial supply tokens to the creator of the contract */\n\tfunction FDKToken( ) TokenERC20(_initialSupply, _tokenName, _tokenSymbol) public {\n\n\t\tstartTime = now;\n\n\t\tbalanceOf[walletMain] = totalSupply.mul(95).div(100);\n\t\tbalanceOf[walletLocked] = totalSupply.mul(5).div(100);\n\t}\n\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\trequire(_to != 0x0);\n\n\t\tbool lockedBalance = checkLockedBalance(_from,_value);\n\t\trequire(lockedBalance);\n\n\t\tuint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\tfunction checkLockedBalance(address wallet, uint256 _value) internal returns (bool){\n\t\tif(wallet==walletLocked){\n\t\t\tif(now<startTime + 183 * 1 days){\n\t\t\t\treturn balanceOf[walletLocked].sub(_value)>=totalSupply.mul(5).div(100)? true : false;\n\t\t\t}else{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}else{\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n}",
  "bytecode": "6003805460ff19166008908117909155640218711a00600790815560c060405260808190527f466565446f636b0000000000000000000000000000000000000000000000000060a090815262000056929162000352565b506040805180820190915260038082527f46444b000000000000000000000000000000000000000000000000000000000060209092019182526200009d9160099162000352565b50600a8054600160a060020a03199081167330a8692bdff6a2b797cea3654882154ea455600317909155600b8054909116735c647abe86450bdfcfd54058ba3ecd5c5e0f9696179055348015620000f357600080fd5b506007546008805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015620001815780601f10620001555761010080835404028352916020019162000181565b820191906000526020600020905b8154815290600101906020018083116200016357829003601f168201915b505060098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815295509193509150830182828015620002135780601f10620001e75761010080835404028352916020019162000213565b820191906000526020600020905b815481529060010190602001808311620001f557829003601f168201915b505060008054600160a060020a03191633179055505060035460ff16600a0a84026004555081516200024d90600190602085019062000352565b5080516200026390600290602084019062000352565b505042600c555050600454620002a6906064906200029190605f640100000000620009326200030c82021704565b90640100000000620009536200033a82021704565b600a54600160a060020a0316600090815260056020819052604090912091909155600454620002eb916064916200029191640100000000620009326200030c82021704565b600b54600160a060020a0316600090815260056020526040902055620003f7565b60008282028315806200032a57508284828115156200032757fe5b04145b15156200033357fe5b9392505050565b60008082848115156200034957fe5b04949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039557805160ff1916838001178555620003c5565b82800160010185558215620003c5579182015b82811115620003c5578251825591602001919060010190620003a8565b50620003d3929150620003d7565b5090565b620003f491905b80821115620003d35760008155600101620003de565b90565b61099680620004076000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c8578063313ce567146101f257806342966c681461021d57806370a082311461023557806378e979251461025657806379cc67901461026b5780638da5cb5b1461028f57806395d89b41146102c0578063a9059cbb146102d5578063b414d4b6146102fb578063dd62ed3e1461031c578063f2fde38b14610343575b600080fd5b3480156100eb57600080fd5b506100f4610364565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a03600435166024356103f1565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b6610420565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a0360043581169060243516604435610426565b3480156101fe57600080fd5b50610207610493565b6040805160ff9092168252519081900360200190f35b34801561022957600080fd5b5061018d60043561049c565b34801561024157600080fd5b506101b6600160a060020a0360043516610520565b34801561026257600080fd5b506101b6610532565b34801561027757600080fd5b5061018d600160a060020a0360043516602435610538565b34801561029b57600080fd5b506102a4610620565b60408051600160a060020a039092168252519081900360200190f35b3480156102cc57600080fd5b506100f461062f565b3480156102e157600080fd5b506102f9600160a060020a0360043516602435610687565b005b34801561030757600080fd5b5061018d600160a060020a0360043516610696565b34801561032857600080fd5b506101b6600160a060020a03600435811690602435166106ab565b34801561034f57600080fd5b506102f9600160a060020a03600435166106c8565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103e95780601f106103be576101008083540402835291602001916103e9565b820191906000526020600020905b8154815290600101906020018083116103cc57829003601f168201915b505050505081565b336000908152600660209081526040808320600160a060020a0386168452909152902081905560015b92915050565b60045481565b600160a060020a038316600090815260066020908152604080832033845290915281205461045a908363ffffffff61070e16565b600160a060020a0385166000908152600660209081526040808320338452909152902055610489848484610720565b5060019392505050565b60035460ff1681565b336000908152600560205260408120546104bc908363ffffffff61070e16565b336000908152600560205260409020556004546104df908363ffffffff61070e16565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b60056020526000908152604090205481565b600c5481565b600160a060020a038216600090815260056020526040812054610561908363ffffffff61070e16565b600160a060020a038416600090815260056020908152604080832093909355600681528282203383529052205461059e908363ffffffff61070e16565b600160a060020a03841660009081526006602090815260408083203384529091529020556004546105d5908363ffffffff61070e16565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103e95780601f106103be576101008083540402835291602001916103e9565b610692338383610720565b5050565b600d6020526000908152604090205460ff1681565b600660209081526000928352604080842090915290825290205481565b600054600160a060020a031633146106df57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561071a57fe5b50900390565b600080600160a060020a038416151561073857600080fd5b610742858461087d565b915081151561075057600080fd5b600160a060020a038085166000908152600560205260408082205492881682529020546107829163ffffffff61090e16565b600160a060020a0386166000908152600560205260409020549091506107ae908463ffffffff61070e16565b600160a060020a0380871660009081526005602052604080822093909355908616815220546107e3908463ffffffff61090e16565b600160a060020a0380861660008181526005602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a03808516600090815260056020526040808220549288168252902054829161086f919063ffffffff61090e16565b1461087657fe5b5050505050565b600b54600090600160a060020a038481169116141561090457600c5462f1428001421015610904576108cc60646108c0600560045461093290919063ffffffff16565b9063ffffffff61095316565b600b54600160a060020a03166000908152600560205260409020546108f7908463ffffffff61070e16565b1015610904576000610907565b60015b905061041a565b60008282018381108015906109235750828110155b151561092b57fe5b9392505050565b6000828202831580610923575082848281151561094b57fe5b041461092b57fe5b600080828481151561096157fe5b049493505050505600a165627a7a72305820fbe6f8f80eef8c6955834009722d4c25c1e03066911a081a39869272b760d7390029"
}