{
  "address": "0xdcdb42c9a256690bd153a7b409751adfc8dd5851",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Ethfinex: Old Contract",
  "contractName": "ExchangeEfx",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-08\n*/\n\n/*\n\n  Copyright 2018 Ethfinex Inc\n\n  This is a derivative work based on software developed by ZeroEx Intl\n  This and the original are licensed under Apache License, Version 2.0\n\n  Original attribution:\n\n  Copyright 2017 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.19; // MUST BE COMPILED WITH COMPILER VERSION 0.4.19\n\ncontract Owned { address public owner; } // GR ADDITION\n\ninterface Token {\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint _value) public returns (bool);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint _value) public returns (bool);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public view returns (uint);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value); // solhint-disable-line\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n//solhint-disable-next-line\n/// @title TokenTransferProxy - Transfers tokens on behalf of exchange\n/// @author Ahmed Ali <[email protected]>\ncontract TokenTransferProxy {\n\n    modifier onlyExchange {\n        require(msg.sender == exchangeAddress);\n        _;\n    }\n\n    address public exchangeAddress;\n\n\n    event LogAuthorizedAddressAdded(address indexed target, address indexed caller);\n\n    function TokenTransferProxy() public {\n        setExchange(msg.sender);\n    }\n    /*\n     * Public functions\n     */\n\n    /// @dev Calls into ERC20 Token contract, invoking transferFrom.\n    /// @param token Address of token to transfer.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param value Amount of token to transfer.\n    /// @return Success of transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint value)\n        public\n        onlyExchange\n        returns (bool)\n    {\n        return Token(token).transferFrom(from, to, value);\n    }\n\n    /// @dev Used to set exchange address\n    /// @param _exchange the address of the exchange\n    function setExchange(address _exchange) internal {\n        require(exchangeAddress == address(0));\n        exchangeAddress = _exchange;\n    }\n}\n\ncontract SafeMath {\n    function safeMul(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a / b;\n        return c;\n    }\n\n    function safeSub(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n\n\n/// @title ExchangeEfx - Facilitates exchange of ERC20 tokens.\n/// @author Amir Bandeali - <[email protected]>, Will Warren - <[email protected]>\n// Modified by Ahmed Ali <[email protected]>\ncontract ExchangeEfx is SafeMath {\n\n    // Error Codes\n    enum Errors {\n        ORDER_EXPIRED,                    // Order has already expired\n        ORDER_FULLY_FILLED_OR_CANCELLED,  // Order has already been fully filled or cancelled\n        ROUNDING_ERROR_TOO_LARGE,         // Rounding error too large\n        INSUFFICIENT_BALANCE_OR_ALLOWANCE // Insufficient balance or allowance for token transfer\n    }\n\n    string constant public VERSION = \"ETHFX.0.0\";\n    uint16 constant public EXTERNAL_QUERY_GAS_LIMIT = 4999;    // Changes to state require at least 5000 gas\n    uint constant public ETHFINEX_FEE = 400; // Amount - (Amount/fee) is what gets send to user\n\n    // address public TOKEN_TRANSFER_PROXY_CONTRACT;\n    address public TOKEN_TRANSFER_PROXY_CONTRACT;\n\n    // Mappings of orderHash => amounts of takerTokenAmount filled or cancelled.\n    mapping (bytes32 => uint) public filled;\n    mapping (bytes32 => uint) public cancelled;\n\n    // GR ADDITION\n    // Mapping of signer => validator => approved\n    mapping (address => mapping (address => bool)) public allowedValidators;\n\n    event LogFill(\n        address indexed maker,\n        address taker,\n        address indexed feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint filledMakerTokenAmount,\n        uint filledTakerTokenAmount,\n        uint paidMakerFee,\n        uint paidTakerFee,\n        bytes32 indexed tokens, // keccak256(makerToken, takerToken), allows subscribing to a token pair\n        bytes32 orderHash\n    );\n\n    event LogCancel(\n        address indexed maker,\n        address indexed feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint cancelledMakerTokenAmount,\n        uint cancelledTakerTokenAmount,\n        bytes32 indexed tokens,\n        bytes32 orderHash\n    );\n\n    event LogError(uint8 indexed errorId, bytes32 indexed orderHash);\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool approved                      // Approval or disapproval of validator contract.\n    );\n\n    struct Order {\n        address maker;\n        address taker;\n        address makerToken;\n        address takerToken;\n        address feeRecipient;\n        uint makerTokenAmount;\n        uint takerTokenAmount;\n        uint makerFee;\n        uint takerFee;\n        uint expirationTimestampInSec;\n        bytes32 orderHash;\n    }\n\n    // MODIFIED CODE, constructor changed\n    function ExchangeEfx() public {\n        // ZRX_TOKEN_CONTRACT = _zrxToken;\n        TOKEN_TRANSFER_PROXY_CONTRACT = address(new TokenTransferProxy());\n    }\n\n    /*\n    * Core exchange functions\n    */\n\n    /// @dev Fills the input order.\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\n    /// @param fillTakerTokenAmount Desired amount of takerToken to fill.\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfer will fail before attempting.\n    /// @param v ECDSA signature parameter v.\n    /// @param r ECDSA signature parameters r.\n    /// @param s ECDSA signature parameters s.\n    /// @return Total amount of takerToken filled in trade.\n    function fillOrder(\n          address[5] orderAddresses,\n          uint[6] orderValues,\n          uint fillTakerTokenAmount,\n          bool shouldThrowOnInsufficientBalanceOrAllowance,\n          uint8 v,\n          bytes32 r,\n          bytes32 s)\n          public\n          returns (uint filledTakerTokenAmount)\n    {\n        Order memory order = Order({\n            maker: orderAddresses[0],\n            taker: orderAddresses[1],\n            makerToken: orderAddresses[2],\n            takerToken: orderAddresses[3],\n            feeRecipient: orderAddresses[4],\n            makerTokenAmount: orderValues[0],\n            takerTokenAmount: orderValues[1],\n            makerFee: orderValues[2],\n            takerFee: orderValues[3],\n            expirationTimestampInSec: orderValues[4],\n            orderHash: getOrderHash(orderAddresses, orderValues)\n        });\n\n        require(order.taker == address(0) || order.taker == msg.sender);\n        require(order.makerTokenAmount > 0 && order.takerTokenAmount > 0 && fillTakerTokenAmount > 0);\n\n        require(isValidSignature(\n            order.maker,\n            order.orderHash,\n            v,\n            r,\n            s\n        ));\n\n        if (block.timestamp >= order.expirationTimestampInSec) {\n            LogError(uint8(Errors.ORDER_EXPIRED), order.orderHash);\n            return 0;\n        }\n\n        uint remainingTakerTokenAmount = safeSub(order.takerTokenAmount, getUnavailableTakerTokenAmount(order.orderHash));\n        filledTakerTokenAmount = min256(fillTakerTokenAmount, remainingTakerTokenAmount);\n        if (filledTakerTokenAmount == 0) {\n            LogError(uint8(Errors.ORDER_FULLY_FILLED_OR_CANCELLED), order.orderHash);\n            return 0;\n        }\n\n        if (isRoundingError(filledTakerTokenAmount, order.takerTokenAmount, order.makerTokenAmount)) {\n            LogError(uint8(Errors.ROUNDING_ERROR_TOO_LARGE), order.orderHash);\n            return 0;\n        }\n\n        if (!shouldThrowOnInsufficientBalanceOrAllowance && !isTransferable(order, filledTakerTokenAmount)) {\n            LogError(uint8(Errors.INSUFFICIENT_BALANCE_OR_ALLOWANCE), order.orderHash);\n            return 0;\n        }\n\n        /////////////// modified code /////////////////\n        uint filledMakerTokenAmount = getPartialAmount(filledTakerTokenAmount, order.takerTokenAmount, order.makerTokenAmount);\n        ///////////// modified code ///////////\n\n        uint paidMakerFee;\n        uint paidTakerFee;\n        filled[order.orderHash] = safeAdd(filled[order.orderHash], filledTakerTokenAmount);\n        require(transferViaTokenTransferProxy(\n            order.makerToken,\n            order.maker,\n            msg.sender,\n            filledMakerTokenAmount\n        ));\n        require(transferViaTokenTransferProxy(\n            order.takerToken,\n            msg.sender,\n            order.maker,\n            filledTakerTokenAmount - safeDiv(filledTakerTokenAmount, ETHFINEX_FEE)\n        ));\n        // if (order.feeRecipient != address(0)) {\n        //     if (order.makerFee > 0) {\n        //         paidMakerFee = getPartialAmount(filledTakerTokenAmount, order.takerTokenAmount, order.makerFee);\n        //         require(transferViaTokenTransferProxy(\n        //             ZRX_TOKEN_CONTRACT,\n        //             order.maker,\n        //             order.feeRecipient,\n        //             paidMakerFee\n        //         ));\n        //     }\n        //     if (order.takerFee > 0) {\n        //         paidTakerFee = getPartialAmount(filledTakerTokenAmount, order.takerTokenAmount, order.takerFee);\n        //         require(transferViaTokenTransferProxy(\n        //             ZRX_TOKEN_CONTRACT,\n        //             msg.sender,\n        //             order.feeRecipient,\n        //             paidTakerFee\n        //         ));\n        //     }\n        // }\n\n        LogFill(\n            order.maker,\n            msg.sender,\n            order.feeRecipient,\n            order.makerToken,\n            order.takerToken,\n            filledMakerTokenAmount,\n            filledTakerTokenAmount,\n            paidMakerFee,\n            paidTakerFee,\n            keccak256(order.makerToken, order.takerToken),\n            order.orderHash\n        );\n        return filledTakerTokenAmount;\n    }\n\n    /// @dev Cancels the input order.\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\n    /// @param cancelTakerTokenAmount Desired amount of takerToken to cancel in order.\n    /// @return Amount of takerToken cancelled.\n    // function cancelOrder(\n    //     address[5] orderAddresses,\n    //     uint[6] orderValues,\n    //     uint cancelTakerTokenAmount)\n    //     public\n    //     returns (uint)\n    // {\n    //     Order memory order = Order({\n    //         maker: orderAddresses[0],\n    //         taker: orderAddresses[1],\n    //         makerToken: orderAddresses[2],\n    //         takerToken: orderAddresses[3],\n    //         feeRecipient: orderAddresses[4],\n    //         makerTokenAmount: orderValues[0],\n    //         takerTokenAmount: orderValues[1],\n    //         makerFee: orderValues[2],\n    //         takerFee: orderValues[3],\n    //         expirationTimestampInSec: orderValues[4],\n    //         orderHash: getOrderHash(orderAddresses, orderValues)\n    //     });\n\n    //     require(order.maker == msg.sender);\n    //     require(order.makerTokenAmount > 0 && order.takerTokenAmount > 0 && cancelTakerTokenAmount > 0);\n\n    //     if (block.timestamp >= order.expirationTimestampInSec) {\n    //         LogError(uint8(Errors.ORDER_EXPIRED), order.orderHash);\n    //         return 0;\n    //     }\n\n    //     uint remainingTakerTokenAmount = safeSub(order.takerTokenAmount, getUnavailableTakerTokenAmount(order.orderHash));\n    //     uint cancelledTakerTokenAmount = min256(cancelTakerTokenAmount, remainingTakerTokenAmount);\n    //     if (cancelledTakerTokenAmount == 0) {\n    //         LogError(uint8(Errors.ORDER_FULLY_FILLED_OR_CANCELLED), order.orderHash);\n    //         return 0;\n    //     }\n\n    //     cancelled[order.orderHash] = safeAdd(cancelled[order.orderHash], cancelledTakerTokenAmount);\n\n    //     LogCancel(\n    //         order.maker,\n    //         order.feeRecipient,\n    //         order.makerToken,\n    //         order.takerToken,\n    //         getPartialAmount(cancelledTakerTokenAmount, order.takerTokenAmount, order.makerTokenAmount),\n    //         cancelledTakerTokenAmount,\n    //         keccak256(order.makerToken, order.takerToken),\n    //         order.orderHash\n    //     );\n    //     return cancelledTakerTokenAmount;\n    // }\n\n    /*\n    * Wrapper functions\n    */\n\n    /// @dev Fills an order with specified parameters and ECDSA signature, throws if specified amount not filled entirely.\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\n    /// @param fillTakerTokenAmount Desired amount of takerToken to fill.\n    /// @param v ECDSA signature parameter v.\n    /// @param r ECDSA signature parameters r.\n    /// @param s ECDSA signature parameters s.\n    function fillOrKillOrder(\n        address[5] orderAddresses,\n        uint[6] orderValues,\n        uint fillTakerTokenAmount,\n        uint8 v,\n        bytes32 r,\n        bytes32 s)\n        public\n    {\n        require(fillOrder(\n            orderAddresses,\n            orderValues,\n            fillTakerTokenAmount,\n            false,\n            v,\n            r,\n            s\n        ) == fillTakerTokenAmount);\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction.\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\n    /// @param orderValues Array of uint arrays containing individual order values.\n    /// @param fillTakerTokenAmounts Array of desired amounts of takerToken to fill in orders.\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfers will fail before attempting.\n    /// @param v Array ECDSA signature v parameters.\n    /// @param r Array of ECDSA signature r parameters.\n    /// @param s Array of ECDSA signature s parameters.\n    function batchFillOrders(\n        address[5][] orderAddresses,\n        uint[6][] orderValues,\n        uint[] fillTakerTokenAmounts,\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\n        uint8[] v,\n        bytes32[] r,\n        bytes32[] s)\n        public\n    {\n        for (uint i = 0; i < orderAddresses.length; i++) {\n            fillOrder(\n                orderAddresses[i],\n                orderValues[i],\n                fillTakerTokenAmounts[i],\n                shouldThrowOnInsufficientBalanceOrAllowance,\n                v[i],\n                r[i],\n                s[i]\n            );\n        }\n    }\n\n    /// @dev Synchronously executes multiple fillOrKill orders in a single transaction.\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\n    /// @param orderValues Array of uint arrays containing individual order values.\n    /// @param fillTakerTokenAmounts Array of desired amounts of takerToken to fill in orders.\n    /// @param v Array ECDSA signature v parameters.\n    /// @param r Array of ECDSA signature r parameters.\n    /// @param s Array of ECDSA signature s parameters.\n    function batchFillOrKillOrders(\n        address[5][] orderAddresses,\n        uint[6][] orderValues,\n        uint[] fillTakerTokenAmounts,\n        uint8[] v,\n        bytes32[] r,\n        bytes32[] s)\n        public\n    {\n        for (uint i = 0; i < orderAddresses.length; i++) {\n            fillOrKillOrder(\n                orderAddresses[i],\n                orderValues[i],\n                fillTakerTokenAmounts[i],\n                v[i],\n                r[i],\n                s[i]\n            );\n        }\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total fillTakerTokenAmount filled.\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\n    /// @param orderValues Array of uint arrays containing individual order values.\n    /// @param fillTakerTokenAmount Desired total amount of takerToken to fill in orders.\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfers will fail before attempting.\n    /// @param v Array ECDSA signature v parameters.\n    /// @param r Array of ECDSA signature r parameters.\n    /// @param s Array of ECDSA signature s parameters.\n    /// @return Total amount of fillTakerTokenAmount filled in orders.\n    function fillOrdersUpTo(\n        address[5][] orderAddresses,\n        uint[6][] orderValues,\n        uint fillTakerTokenAmount,\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\n        uint8[] v,\n        bytes32[] r,\n        bytes32[] s)\n        public\n        returns (uint)\n    {\n        uint filledTakerTokenAmount = 0;\n        for (uint i = 0; i < orderAddresses.length; i++) {\n            require(orderAddresses[i][3] == orderAddresses[0][3]); // takerToken must be the same for each order\n            filledTakerTokenAmount = safeAdd(filledTakerTokenAmount, fillOrder(\n                orderAddresses[i],\n                orderValues[i],\n                safeSub(fillTakerTokenAmount, filledTakerTokenAmount),\n                shouldThrowOnInsufficientBalanceOrAllowance,\n                v[i],\n                r[i],\n                s[i]\n            ));\n            if (filledTakerTokenAmount == fillTakerTokenAmount) break;\n        }\n        return filledTakerTokenAmount;\n    }\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\n    /// @param orderValues Array of uint arrays containing individual order values.\n    /// @param cancelTakerTokenAmounts Array of desired amounts of takerToken to cancel in orders.\n    // function batchCancelOrders(\n    //     address[5][] orderAddresses,\n    //     uint[6][] orderValues,\n    //     uint[] cancelTakerTokenAmounts)\n    //     public\n    // {\n    //     for (uint i = 0; i < orderAddresses.length; i++) {\n    //         cancelOrder(\n    //             orderAddresses[i],\n    //             orderValues[i],\n    //             cancelTakerTokenAmounts[i]\n    //         );\n    //     }\n    // }\n\n    /*\n    * Constant public functions\n    */\n\n    /// @dev Calculates Keccak-256 hash of order with specified parameters.\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\n    /// @return Keccak-256 hash of order.\n    function getOrderHash(address[5] orderAddresses, uint[6] orderValues)\n        public\n        constant\n        returns (bytes32)\n    {\n        return keccak256(\n            address(this),\n            orderAddresses[0], // maker\n            orderAddresses[1], // taker\n            orderAddresses[2], // makerToken\n            orderAddresses[3], // takerToken\n            orderAddresses[4], // feeRecipient\n            orderValues[0],    // makerTokenAmount\n            orderValues[1],    // takerTokenAmount\n            orderValues[2],    // makerFee\n            orderValues[3],    // takerFee\n            orderValues[4],    // expirationTimestampInSec\n            orderValues[5]     // salt\n        );\n    }\n\n\n    /// @dev Verifies that an order signature is valid.\n    /// @param maker address of maker.\n    /// @param hash Signed Keccak-256 hash.\n    /// @param v ECDSA signature parameter v.\n    /// @param r ECDSA signature parameters r.\n    /// @param s ECDSA signature parameters s.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        address maker,\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s)\n        public\n        //pure\n        view // GR ADDITION\n        returns (bool)\n    {\n        address validator = ecrecover(\n            keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),\n            v,\n            r,\n            s\n        );\n\n        if (allowedValidators[maker][validator]) {\n            return true;\n        } else if (isContract(maker)) {\n            return Owned(maker).owner() == validator;\n        } else {\n            return maker == validator;\n        }\n    }\n\n    /// @dev Checks if rounding error > 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingError(uint numerator, uint denominator, uint target)\n        public\n        pure\n        returns (bool)\n    {\n        uint remainder = mulmod(target, numerator, denominator);\n        if (remainder == 0) return false; // No rounding error.\n\n        uint errPercentageTimes1000000 = safeDiv(\n            safeMul(remainder, 1000000),\n            safeMul(numerator, target)\n        );\n        return errPercentageTimes1000000 > 1000;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function getPartialAmount(uint numerator, uint denominator, uint target)\n        public\n        pure\n        returns (uint)\n    {\n        return safeDiv(safeMul(numerator, target), denominator);\n    }\n\n    /// @dev Calculates the sum of values already filled and cancelled for a given order.\n    /// @param orderHash The Keccak-256 hash of the given order.\n    /// @return Sum of values already filled and cancelled.\n    function getUnavailableTakerTokenAmount(bytes32 orderHash)\n        public\n        constant\n        returns (uint)\n    {\n        return safeAdd(filled[orderHash], cancelled[orderHash]);\n    }\n\n\n    /*\n    * Internal functions\n    */\n\n    /// @dev Transfers a token using TokenTransferProxy transferFrom function.\n    /// @param token Address of token to transferFrom.\n    /// @param from Address transfering token.\n    /// @param to Address receiving token.\n    /// @param value Amount of token to transfer.\n    /// @return Success of token transfer.\n    function transferViaTokenTransferProxy(\n        address token,\n        address from,\n        address to,\n        uint value)\n        internal\n        returns (bool)\n    {\n        return TokenTransferProxy(TOKEN_TRANSFER_PROXY_CONTRACT).transferFrom(token, from, to, value);\n    }\n\n    /// @dev Checks if any order transfers will fail.\n    /// @param order Order struct of params that will be checked.\n    /// @param fillTakerTokenAmount Desired amount of takerToken to fill.\n    /// @return Predicted result of transfers.\n    function isTransferable(Order order, uint fillTakerTokenAmount)\n        internal\n        constant  // The called token contracts may attempt to change state, but will not be able to due to gas limits on getBalance and getAllowance.\n        returns (bool)\n    {\n        address taker = msg.sender;\n        uint fillMakerTokenAmount = getPartialAmount(fillTakerTokenAmount, order.takerTokenAmount, order.makerTokenAmount);\n\n        // if (order.feeRecipient != address(0)) {\n        //     bool isMakerTokenZRX = order.makerToken == ZRX_TOKEN_CONTRACT;\n        //     bool isTakerTokenZRX = order.takerToken == ZRX_TOKEN_CONTRACT;\n        //     uint paidMakerFee = getPartialAmount(fillTakerTokenAmount, order.takerTokenAmount, order.makerFee);\n        //     uint paidTakerFee = getPartialAmount(fillTakerTokenAmount, order.takerTokenAmount, order.takerFee);\n        //     uint requiredMakerZRX = isMakerTokenZRX ? safeAdd(fillMakerTokenAmount, paidMakerFee) : paidMakerFee;\n        //     uint requiredTakerZRX = isTakerTokenZRX ? safeAdd(fillTakerTokenAmount, paidTakerFee) : paidTakerFee;\n\n        //     if (   getBalance(ZRX_TOKEN_CONTRACT, order.maker) < requiredMakerZRX\n        //         || getAllowance(ZRX_TOKEN_CONTRACT, order.maker) < requiredMakerZRX\n        //         || getBalance(ZRX_TOKEN_CONTRACT, taker) < requiredTakerZRX\n        //         || getAllowance(ZRX_TOKEN_CONTRACT, taker) < requiredTakerZRX\n        //     ) return false;\n\n        //     if (!isMakerTokenZRX && (   getBalance(order.makerToken, order.maker) < fillMakerTokenAmount // Don't double check makerToken if ZRX\n        //                              || getAllowance(order.makerToken, order.maker) < fillMakerTokenAmount)\n        //     ) return false;\n        //     if (!isTakerTokenZRX && (   getBalance(order.takerToken, taker) < fillTakerTokenAmount // Don't double check takerToken if ZRX\n        //                              || getAllowance(order.takerToken, taker) < fillTakerTokenAmount)\n        //     ) return false;\n        // } else if (   getBalance(order.makerToken, order.maker) < fillMakerTokenAmount\n        //            || getAllowance(order.makerToken, order.maker) < fillMakerTokenAmount\n        //            || getBalance(order.takerToken, taker) < fillTakerTokenAmount\n        //            || getAllowance(order.takerToken, taker) < fillTakerTokenAmount\n        // ) return false;\n\n        ///////// added code, copied from above ///////\n\n        if (   getBalance(order.makerToken, order.maker) < fillMakerTokenAmount\n                   || getAllowance(order.makerToken, order.maker) < fillMakerTokenAmount\n                   || getBalance(order.takerToken, taker) < fillTakerTokenAmount\n                   || getAllowance(order.takerToken, taker) < fillTakerTokenAmount\n        ) return false;\n\n        return true;\n    }\n\n    /// @dev Get token balance of an address.\n    /// @param token Address of token.\n    /// @param owner Address of owner.\n    /// @return Token balance of owner.\n    function getBalance(address token, address owner)\n        internal\n        constant  // The called token contract may attempt to change state, but will not be able to due to an added gas limit.\n        returns (uint)\n    {\n        return Token(token).balanceOf.gas(EXTERNAL_QUERY_GAS_LIMIT)(owner); // Limit gas to prevent reentrancy\n    }\n\n    /// @dev Get allowance of token given to TokenTransferProxy by an address.\n    /// @param token Address of token.\n    /// @param owner Address of owner.\n    /// @return Allowance of token given to TokenTransferProxy by owner.\n    function getAllowance(address token, address owner)\n        internal\n        constant  // The called token contract may attempt to change state, but will not be able to due to an added gas limit.\n        returns (uint)\n    {\n        return Token(token).allowance.gas(EXTERNAL_QUERY_GAS_LIMIT)(owner, TOKEN_TRANSFER_PROXY_CONTRACT); // Limit gas to prevent reentrancy\n    }\n\n    // GR ADDITION\n    /// @dev Determines whether an address is an account or a contract\n    /// @param _target Address to be inspected\n    /// @return Boolean the address is a contract\n    /// @notice if it is a contract, we use this function to lookup for the owner\n    function isContract(address _target)\n        internal view\n        returns (bool)\n    {\n        uint size;\n        assembly {\n            size := extcodesize(_target)\n        }\n        return size > 0;\n    }\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n    {\n        address signerAddress = msg.sender;\n        allowedValidators[signerAddress][validatorAddress] = approval;\n        SignatureValidatorApproval(\n            signerAddress,\n            validatorAddress,\n            approval\n        );\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b610017610052565b604051809103906000f080151561002d57600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055610062565b6040516102748061177c83390190565b61170b806100716000396000f3006060604052600436106100e25763ffffffff60e060020a60003504166314df96ee81146100e7578063288cdc91146101175780632ac126221461013f578063363349be146101555780633f01dc991461031a5780634f1507871461032d578063741bcc931461052057806377fcce68146105965780637b8e3514146105ba5780637e9abb50146105df5780638163681e146105f557806398024a8b14610623578063add1cbc51461063f578063b7b2c7d61461066e578063bc61394a1461086a578063cfc4d0ec146108e7578063f06bbf7514610948578063ffa1ad7414610972575b600080fd5b34156100f257600080fd5b6101036004356024356044356109fc565b604051901515815260200160405180910390f35b341561012257600080fd5b61012d600435610a49565b60405190815260200160405180910390f35b341561014a57600080fd5b61012d600435610a5b565b341561016057600080fd5b61012d60046024813581810190830135806020818102016040519081016040528181529291906000602085015b828210156101c95760a08083028601906005906040519081016040529190828260a080828437505050918352505060019091019060200161018d565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b8282101561023a5760c08083028601906006906040519081016040529190828260c08082843750505091835250506001909101906020016101fe565b5050505050919080359060200190919080351515906020019091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610a6d95505050505050565b341561032557600080fd5b61012d610b7a565b341561033857600080fd5b61051e60046024813581810190830135806020818102016040519081016040528181529291906000602085015b828210156103a15760a08083028601906005906040519081016040529190828260a0808284375050509183525050600190910190602001610365565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b828210156104125760c08083028601906006906040519081016040529190828260c08082843750505091835250506001909101906020016103d6565bb8095505050505050565b005b341561052b57600080fd5b61051e600460a481600560a06040519081016040529190828260a080828437820191505050505091908060c001906006806020026040519081016040529190828260c080828437509395505083359360ff602082013516935060408101359250606001359050610c29565b34156105a157600080fd5b61051e600160a060020a03600435166024351515610c4c565b34156105c557600080fd5b610103600160a060020a0360043581169060243516610cbd565b34156105ea57600080fd5b61012d600435610cdd565b341561060057600080fd5b610103600160a060020a036004351660243560ff60443516606435608435610d07565b341561062e57600080fd5b61012d600435602435604435610e97565b341561064a57600080fd5b610652610eb4565b604051600160a060020a03909116815260200160405180910390f35b341561067957600080fd5b61051e60046024813581810190830135806020818102016040519081016040528181529291906000602085015b828210156106e25760a08083028601906005906040519081016040529190828260a08082843750505091835250506001909101906020016106a6565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b828210156107535760c08083028601906006906040519081016040529190828260c0808284375050509183525050600190910190602001610717565bec395505050505050565b341561087557600080fd5b61012d600460a481600560a06040519081016040529190828260a080828437820191505050505091908060c001906006806020026040519081016040529190828260c080828437509395505083359360208101351515935060ff60408201351692506060810135915060800135610f60565b34156108f257600080fd5b61012d600460a481600560a06040519081016040529190828260a080828437820191505050505091908060c001906006806020026040519081016040529190828260c0808284375093955061130a945050505050565b341561095357600080fd5b61095b6113d1565b60405161ffff909116815260200160405180910390f35b341561097d57600080fd5b6109856113d7565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156109c15780820151838201526020016109a9565b50505050905090810190601f1680156109ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000806000848685099150811515610a175760009250610a40565b610a36610a2783620f424061140e565b610a31888761140e565b611439565b90506103e8811192505b50509392505050565b60016020526000908152604090205481565b60026020526000908152604090205481565b600080805b8951811015610b6d5789600081518110610a8857fe5b9060200190602002015160600151600160a060020a03168a8281518110610aab57fe5b9060200190602002015160600151600160a060020a031614610acc57600080fd5b610b5682610b518c8481518110610adf57fe5b906020019060200201518c8581518110610af557fe5b90602001906020020151610b098d88611450565b8c8c8881518110610b1657fe5b906020019060200201518c8981518110610b2c57fe5b906020019060200201518c8a81518110610b4257fe5b90602001906020020151610f60565b611462565b915087821415610b6557610b6d565b600101610a72565b5098975050505050505050565b61019081565b60005b8651811015610c2057610c18878281518110610b9b57fe5b90602001906020020151878381518110610bb157fe5b90602001906020020151878481518110610bc757fe5b90602001906020020151878581518110610bdd57fe5b90602001906020020151878681518110610bf357fe5b90602001906020020151878781518110610c0957fe5b90602001906020020151610c29565b600101610b83565b50505050505050565b83610c3a8787876000888888610f60565b14610c4457600080fd5b505050505050565b33600160a060020a0381811660008181526003602090815260408083209488168084529490915290819020805460ff19168615151790557fa8656e308026eeabce8f0bc18048433252318ab80ac79da0b3d3d8697dfba89190859051901515815260200160405180910390a3505050565b600360209081526000928352604080842090915290825290205460ff1681565b6000818152600160209081526040808320546002909252822054610d019190611462565b92915050565b6000806001866040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0160405180910390208686866040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f11515610da857600080fd5b505060206040510351600160a060020a0380891660009081526003602090815260408083209385168352929052205490915060ff1615610deb5760019150610e8d565b610df487611471565b15610e755780600160a060020a031687600160a060020a0316638da5cb5b6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610e4957600080fd5b6102c65a03f11515610e5a57600080fd5b50505060405180519050600160a060020a0316149150610e8d565b80600160a060020a031687600160a060020a03161491505b5095945050505050565b6000610eac610ea6858461140e565b84611439565b949350505050565b600054600160a060020a031681565b60005b8751811015610f5657610f4d888281518110610ede57fe5b90602001906020020151888381518110610ef457fe5b90602001906020020151888481518110610f0a57fe5b9060200190602002015188888681518110610f2157fe5b90602001906020020151888781518110610f3757fe5b90602001906020020151888881518110610b4257fe5b50600101610ec6565b5050505050505050565b6000610f6a611683565b600080600080610160604051908101604052808e51600160a060020a031681526020018e60016020020151600160a060020a0316815260200160408f0151600160a060020a0316815260200160608f0151600160a060020a0316815260200160808f0151600160a060020a031681526020018d5181526020018d60016020020151815260200160408e0151815260200160608e0151815260200160808e015181526020016110188f8f61130a565b9052945060006020860151600160a060020a0316148061104d575033600160a060020a03168560200151600160a060020a0316145b151561105857600080fd5b60008560a00151118015611070575060008560c00151115b801561107c575060008b115b151561108757600080fd5b61109a85518661014001518b8b8b610d07565b15156110a557600080fd5b84610120015142106110f25784610140015160005b60ff167f36d86c59e00bd73dc19ba3adfe068e4b64ac7e92be35546adeddf1b956a87e9060405160405180910390a3600095506112fa565b61110d8560c00151611108876101400151610cdd565b611450565b93506111198b85611479565b955085151561112f5784610140015160016110ba565b611142868660c001518760a001516109fc565b156111545784610140015160026110ba565b891580156111695750611167858761148f565b155b1561117b5784610140015160036110ba565b61118e868660c001518760a00151610e97565b92506111b460016000876101400151815260208101919091526040016000205487611462565b60016000876101400151815260208101919091526040908101600020919091556111e4908601518651338661151a565b15156111ef57600080fd5b61120d85606001513387516112068a610190611439565b8a0361151a565b151561121857600080fd5b846040015185606001516040516c01000000000000000000000000600160a060020a0393841681028252919092160260148201526028016040519081900390206080860151600160a060020a03168651600160a060020a03167f0d0b9391970d9a25552f37d436d2aae2925e2bfe1b2a923754bada030c498cb33389604001518a60600151898d8a8a8f6101400151604051600160a060020a0398891681529688166020880152949096166040808701919091526060860193909352608085019190915260a084015260c083019390935260e082015261010001905180910390a45b5050505050979650505050505050565b600030835160208501516040860151606087015160808801518751602089015160408a015160608b015160808c015160a08d01516040516c01000000000000000000000000600160a060020a039d8e16810282529b8d168c026014820152998c168b0260288b0152978b168a02603c8a0152958a16890260508901529390981690960260648601526078850152609884019490945260b883019490945260d882019290925260f8810192909252610118820152610138016040518091039020905092915050565b61138781565b60408051908101604052600981527f45544846582e302e300000000000000000000000000000000000000000000000602082015281565b600082820283158061142a575082848281151561142757fe5b04145b151561143257fe5b9392505050565b600080828481151561144757fe5b04949350505050565b60008282111561145c57fe5b50900390565b60008282018381101561143257fe5b6000903b1190565b60008183106114885781611432565b5090919050565b600033816114a68460c08701518760a00151610e97565b9050806114b8866040015187516115b0565b10806114d15750806114cf86604001518751611621565b105b806114e85750836114e68660600151846115b0565b105b806114ff5750836114fd866060015184611621565b105b1561150d5760009250611512565b600192505b505092915050565b60008054600160a060020a03166315dacbea86868686866040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b151561158d57600080fd5b6102c65a03f1151561159e57600080fd5b50505060405180519695505050505050565b6000600160a060020a0383166370a082316113878460405160e060020a63ffffffff8516028152600160a060020a039091166004820152602401602060405180830381600088803b151561160357600080fd5b87f1151561161057600080fd5b505050506040518051949350505050565b60008054600160a060020a038085169163dd62ed3e916113879186911660405160e060020a63ffffffff8616028152600160a060020a03928316600482015291166024820152604401602060405180830381600088803b151561160357600080fd5b6101606040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820152905600a165627a7a723058206d83040c889cc256c3c794ef2d15606f3a95a253d26d4992c6c220083ece28d000296060604052341561000f57600080fd5b6100253364010000000061019261002a82021704565b610062565b600054600160a060020a03161561004057600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b610203806100716000396000f30060606040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166315dacbea81146100505780639cd0160514610092575b600080fd5b341561005b57600080fd5b61007e600160a060020a03600435811690602435811690604435166064356100c1565b604051901515815260200160405180910390f35b341561009d57600080fd5b6100a5610183565b604051600160a060020a03909116815260200160405180910390f35b6000805433600160a060020a039081169116146100dd57600080fd5b84600160a060020a03166323b872dd8585856000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561016057600080fd5b6102c65a03f1151561017157600080fd5b50505060405180519695505050505050565b600054600160a060020a031681565b600054600160a060020a0316156101a857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582075e74845f5bf3d8ccf94117dc10527ffebe3d8bd027af0b0e97f08767c1785d60029"
}