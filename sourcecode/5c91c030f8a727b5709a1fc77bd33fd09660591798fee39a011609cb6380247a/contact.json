{
  "address": "0x493c9e90127a04100e8ed85e58a06e8c6a72ae5a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOB",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-18\n*/\n\npragma solidity ^0.4.11;\n\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint)) allowed;\n\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n\n  function approve(address _spender, uint _value) {\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract AOB is StandardToken{\n    string public constant name = \"Assets On Blockchain\";\n    string public constant symbol = \"AOB\";\n    uint public constant decimals = 18;\n    string public constant version = \"1.0\";\n    address public owner;\n    modifier onlyOwner{\n      if(msg.sender != owner) throw;\n      _;\n    } \n    function AOB(){\n        owner = msg.sender;\n        totalSupply = 100*(10**8)*(10**decimals);\n        balances[owner] =  totalSupply;\n    }\n\n    function changeOwner(address newOwner) onlyOwner{\n      owner = newOwner;\n    }\n\n    function () payable{\n        throw;\n    }\n\n    function kill() onlyOwner{\n        suicide(owner);\n    }\n}",
  "bytecode": "6060604052341561000c57fe5b5b60038054600160a060020a03191633600160a060020a0390811691909117918290556b204fce5e3e25026110000000600081815592909116825260016020526040909120555b5b610870806100636000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d0578063095ea7b31461016057806318160ddd1461018157806323b872dd146101a3578063313ce567146101ca57806341c0e1b5146101ec57806354fd4d50146101fe57806370a082311461028e5780638da5cb5b146102bc57806395d89b41146102e8578063a6f9dae114610378578063a9059cbb14610396578063dd62ed3e146103b7575b6100ce5b60006000fd5b565b005b34156100d857fe5b6100e06103eb565b604080516020808252835181830152835191928392908301918501908083838215610126575b80518252602083111561012657601f199092019160209182019101610106565b505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016857fe5b6100ce600160a060020a0360043516602435610422565b005b341561018957fe5b6101916104c2565b60408051918252519081900360200190f35b34156101ab57fe5b6100ce600160a060020a03600435811690602435166044356104c8565b005b34156101d257fe5b6101916105ec565b60408051918252519081900360200190f35b34156101f457fe5b6100ce6105f1565b005b341561020657fe5b6100e061061e565b604080516020808252835181830152835191928392908301918501908083838215610126575b80518252602083111561012657601f199092019160209182019101610106565b505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029657fe5b610191600160a060020a0360043516610655565b60408051918252519081900360200190f35b34156102c457fe5b6102cc610674565b60408051600160a060020a039092168252519081900360200190f35b34156102f057fe5b6100e0610683565b604080516020808252835181830152835191928392908301918501908083838215610126575b80518252602083111561012657601f199092019160209182019101610106565b505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038057fe5b6100ce600160a060020a03600435166106ba565b005b341561039e57fe5b6100ce600160a060020a0360043516602435610703565b005b34156103bf57fe5b610191600160a060020a03600435811690602435166107d1565b60408051918252519081900360200190f35b60408051808201909152601481527f417373657473204f6e20426c6f636b636861696e000000000000000000000000602082015281565b80158015906104555750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b156104605760006000fd5b600160a060020a03338116600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35b5050565b60005481565b6000606060643610156104db5760006000fd5b600160a060020a038086166000908152600260209081526040808320338516845282528083205493881683526001909152902054909250610522908463ffffffff6107fe16565b600160a060020a038086166000908152600160205260408082209390935590871681522054610557908463ffffffff61081a16565b600160a060020a038616600090815260016020526040902055610580828463ffffffff61081a16565b600160a060020a038087166000818152600260209081526040808320338616845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35b5b5050505050565b601281565b60035433600160a060020a0390811691161461060d5760006000fd5b600354600160a060020a0316ff5b5b565b60408051808201909152600381527f312e300000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60408051808201909152600381527f414f420000000000000000000000000000000000000000000000000000000000602082015281565b60035433600160a060020a039081169116146106d65760006000fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b604060443610156107145760006000fd5b600160a060020a03331660009081526001602052604090205461073d908363ffffffff61081a16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610772908363ffffffff6107fe16565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35b5b505050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600082820161080f84821015610833565b8091505b5092915050565b600061082883831115610833565b508082035b92915050565b8015156106ff5760006000fd5b5b505600a165627a7a72305820fd7c22056fbfbe9b2f20d2a881d32116c5045c1457940ffc5ba640e3380dbbcf0029"
}