{
  "address": "0x1e9e116e35a5e42f74b64b780f8e9d5ac2b18ac7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EuropeanCentralBank",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-24\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n  contract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address _owner)public view returns (uint256 balance);\n  function allowance(address _owner, address _spender)public view returns (uint remaining);\n  function transferFrom(address _from, address _to, uint _amount)public returns (bool ok);\n  function approve(address _spender, uint _amount)public returns (bool ok);\n  function transfer(address _to, uint _amount)public returns (bool ok);\n  event Transfer(address indexed _from, address indexed _to, uint _amount);\n  event Approval(address indexed _owner, address indexed _spender, uint _amount);\n}\n\n\ncontract EuropeanCentralBank is ERC20\n{using SafeMath for uint256;\n   string public constant symbol = \",000.EURO\";\n     string public constant name = \"European Central Bank-Euro System ECB\";\n     uint public constant decimals = 18;\n     uint256 _totalSupply = 999000000000000000000 * 10 ** 18; // 999 Trillion Total Supply including 18 decimal\n     \n     // Owner of this contract\n     address public owner;\n     \n  // Balances for each account\n     mapping(address => uint256) balances;\n  \n     // Owner of account approves the transfer of an amount to another account\n     mapping(address => mapping (address => uint256)) allowed;\n  \n     // Functions with this modifier can only be executed by the owner\n     modifier onlyOwner() {\n         if (msg.sender != owner) {\n             revert();\n         }\n         _;\n     }\n  \n     // Constructor\n     constructor () public {\n         owner = msg.sender;\n         balances[owner] = _totalSupply;\n        emit Transfer(0, owner, _totalSupply);\n     }\n     \n     function burntokens(uint256 tokens) public onlyOwner {\n         _totalSupply = (_totalSupply).sub(tokens);\n     }\n  \n    // what is the total supply of the ech tokens\n     function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = _totalSupply;\n     }\n       // What is the balance of a particular account?\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool ok) {\n        require( _to != 0x0);\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n             return true;\n         }\n         \n    // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool ok) {\n     require( _to != 0x0);\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n     balances[_from] = (balances[_from]).sub(_amount);\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n     balances[_to] = (balances[_to]).add(_amount);\n     emit Transfer(_from, _to, _amount);\n     return true;\n         }\n \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool ok) {\n         require( _spender != 0x0);\n         allowed[msg.sender][_spender] = _amount;\n         emit Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         require( _owner != 0x0 && _spender !=0x0);\n         return allowed[_owner][_spender];\n   }\n        \n     //In case the ownership needs to be transferred\n\tfunction transferOwnership(address newOwner) external onlyOwner\n\t{\n\t    uint256 x = balances[owner];\n\t    require( newOwner != 0x0);\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n\t    balances[owner] = 0;\n\t    owner = newOwner;\n\t    emit Transfer(msg.sender, newOwner, x);\n\t}\n  \n\t\n  \n\n}",
  "bytecode": "60806040527002ef9066c50d7aa5aeac19b7700000000060005534801561002557600080fd5b5060018054600160a060020a031916331780825560008054600160a060020a039283168252600260209081526040808420839055945485519283529451949093169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3610872806100a16000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d157806370a08231146101e65780638da5cb5b1461020757806394b0780f1461023857806395d89b4114610252578063a9059cbb14610267578063dd62ed3e1461028b578063f2fde38b146102b2575b600080fd5b3480156100ca57600080fd5b506100d36102d3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a0360043516602435610333565b604080519115158252519081900360200190f35b34801561018c57600080fd5b506101956103b1565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a03600435811690602435166044356103b7565b3480156101dd57600080fd5b5061019561053c565b3480156101f257600080fd5b50610195600160a060020a0360043516610541565b34801561021357600080fd5b5061021c61055c565b60408051600160a060020a039092168252519081900360200190f35b34801561024457600080fd5b5061025060043561056b565b005b34801561025e57600080fd5b506100d361059b565b34801561027357600080fd5b5061016c600160a060020a03600435166024356105d2565b34801561029757600080fd5b50610195600160a060020a03600435811690602435166106c4565b3480156102be57600080fd5b50610250600160a060020a036004351661071d565b606060405190810160405280602581526020017f4575726f7065616e2043656e7472616c2042616e6b2d4575726f20537973746581526020017f6d2045434200000000000000000000000000000000000000000000000000000081525081565b6000600160a060020a038316151561034a57600080fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005490565b6000600160a060020a03831615156103ce57600080fd5b600160a060020a03841660009081526002602052604090205482118015906104195750600160a060020a03841660009081526003602090815260408083203384529091529020548211155b8015610426575060008210155b151561043157600080fd5b600160a060020a03841660009081526002602052604090205461045a908363ffffffff61081e16565b600160a060020a0385166000908152600260209081526040808320939093556003815282822033835290522054610497908363ffffffff61081e16565b600160a060020a0380861660009081526003602090815260408083203384528252808320949094559186168152600290915220546104db908363ffffffff61083016565b600160a060020a0380851660008181526002602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b601281565b600160a060020a031660009081526002602052604090205490565b600154600160a060020a031681565b600154600160a060020a0316331461058257600080fd5b600054610595908263ffffffff61081e16565b60005550565b60408051808201909152600981527f2c3030302e4555524f0000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156105e957600080fd5b336000908152600260205260409020548211801590610609575060008210155b151561061457600080fd5b33600090815260026020526040902054610634908363ffffffff61081e16565b3360009081526002602052604080822092909255600160a060020a03851681522054610666908363ffffffff61083016565b600160a060020a0384166000818152600260209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6000600160a060020a038316158015906106e65750600160a060020a03821615155b15156106f157600080fd5b50600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600154600090600160a060020a0316331461073757600080fd5b50600154600160a060020a03908116600090815260026020526040902054908216151561076357600080fd5b600154600160a060020a039081166000908152600260205260408082205492851682529020546107989163ffffffff61083016565b600160a060020a0380841660008181526002602090815260408083209590955560018054909416825284822091909155825473ffffffffffffffffffffffffffffffffffffffff1916821790925582518481529251909233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35050565b60008282111561082a57fe5b50900390565b60008282018381101561083f57fe5b93925050505600a165627a7a72305820c797c38b6fa2abca5737fd22b1f7ff94360cc6a15495ce1b54afb1d68bf9669b0029"
}