{
  "address": "0x3f1cc021cba9efe7371b38f500df5054de2ee410",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PassThrough",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-30\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/passThrough/PassThroughStorage.sol\n\ncontract PassThroughStorage {\n    bytes4 public constant ERC721_Received = 0x150b7a02;\n    uint256 public constant MAX_EXPIRATION_TIME = (365 * 2 days);\n    mapping(bytes4 => uint256) public disableMethods;\n\n    address public estateRegistry;\n    address public operator;\n    address public target;\n\n    event MethodAllowed(\n      address indexed _caller,\n      bytes4 indexed _signatureBytes4,\n      string _signature\n    );\n\n    event MethodDisabled(\n      address indexed _caller,\n      bytes4 indexed _signatureBytes4,\n      string _signature\n    );\n\n    event TargetChanged(\n      address indexed _caller,\n      address indexed _oldTarget,\n      address indexed _newTarget\n    );\n}\n\n// File: contracts/passThrough/PassThrough.sol\n\ncontract PassThrough is Ownable, PassThroughStorage {\n    /**\n    * @dev Constructor of the contract.\n    */\n    constructor(address _estateRegistry, address _operator) Ownable() public {\n        estateRegistry = _estateRegistry;\n        operator = _operator;\n\n        // Set target\n        setTarget(estateRegistry);\n\n        // ERC721 methods\n        disableMethod(\"approve(address,uint256)\", MAX_EXPIRATION_TIME);\n        disableMethod(\"setApprovalForAll(address,bool)\", MAX_EXPIRATION_TIME);\n        disableMethod(\"transferFrom(address,address,uint256)\", MAX_EXPIRATION_TIME);\n        disableMethod(\"safeTransferFrom(address,address,uint256)\", MAX_EXPIRATION_TIME);\n        disableMethod(\"safeTransferFrom(address,address,uint256,bytes)\", MAX_EXPIRATION_TIME);\n\n        // EstateRegistry methods\n        disableMethod(\"transferLand(uint256,uint256,address)\", MAX_EXPIRATION_TIME);\n        disableMethod(\"transferManyLands(uint256,uint256[],address)\", MAX_EXPIRATION_TIME);\n        disableMethod(\"safeTransferManyFrom(address,address,uint256[])\", MAX_EXPIRATION_TIME);\n        disableMethod(\"safeTransferManyFrom(address,address,uint256[],bytes)\", MAX_EXPIRATION_TIME);\n\n    }\n\n    /**\n    * @dev Fallback function could be called by the operator, if the method is allowed, or\n    * by the owner. If the call was unsuccessful will revert.\n    */\n    function() external {\n        require(\n            isOperator() && isMethodAllowed(msg.sig) || isOwner(),\n            \"Permission denied\"\n        );\n\n        bytes memory _calldata = msg.data;\n        uint256 _calldataSize = msg.data.length;\n        address _dst = target;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            let result := call(sub(gas, 10000), _dst, 0, add(_calldata, 0x20), _calldataSize, 0, 0)\n            let size := returndatasize\n\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            if iszero(result) { revert(ptr, size) }\n            return(ptr, size)\n        }\n    }\n\n    /**\n    * @dev Check if sender is the operator\n    * @return bool whether is sender is the caller or not\n    */\n    function isOperator() internal view returns (bool) {\n        return msg.sender == operator;\n    }\n\n    /**\n    * @dev Check if a method is allowed\n    * @param _signature string - method signature\n    * @return bool - whether method is allowed or not\n    */\n    function isMethodAllowed(bytes4 _signature) internal view returns (bool) {\n        return disableMethods[_signature] < block.timestamp;\n    }\n\n    function setTarget(address _target) public {\n        require(\n            isOperator() || isOwner(),\n            \"Permission denied\"\n        );\n\n        emit TargetChanged(msg.sender, target, _target);\n        target = _target;\n    }\n\n    /**\n    * @dev Disable a method for two years\n    * Note that the input expected is the method signature as 'transfer(address,uint256)'\n    * @param _signature string - method signature\n    */\n    function disableMethod(string memory _signature, uint256 _time) public onlyOwner {\n        require(_time > 0, \"Time should be greater than 0\");\n        require(_time <= MAX_EXPIRATION_TIME, \"Time should be lower than 2 years\");\n\n        bytes4 signatureBytes4 = convertToBytes4(abi.encodeWithSignature(_signature));\n        disableMethods[signatureBytes4] = block.timestamp + _time;\n\n        emit MethodDisabled(msg.sender, signatureBytes4, _signature);\n    }\n\n    /**\n    * @dev Allow a method previously disabled\n    * Note that the input expected is the method signature as 'transfer(address,uint256)'\n    * @param _signature string - method signature\n    */\n    function allowMethod(string memory _signature) public onlyOwner {\n        bytes4 signatureBytes4 = convertToBytes4(abi.encodeWithSignature(_signature));\n        require(!isMethodAllowed(signatureBytes4), \"Method is already allowed\");\n\n        disableMethods[signatureBytes4] = 0;\n\n        emit MethodAllowed(msg.sender, signatureBytes4, _signature);\n    }\n\n    /**\n    * @dev Convert bytes to bytes4\n    * @param _signature bytes - method signature\n    * @return bytes4 - method signature in bytes4\n    */\n    function convertToBytes4(bytes memory _signature) internal pure returns (bytes4) {\n        require(_signature.length == 4, \"Invalid method signature\");\n        bytes4 signatureBytes4;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            signatureBytes4 := mload(add(_signature, 32))\n        }\n        return signatureBytes4;\n    }\n\n    /**\n    * @notice Handle the receipt of an NFT\n    * @dev The ERC721 smart contract calls this function on the recipient\n    * after a `safetransfer`. This function MAY throw to revert and reject the\n    * transfer. Return of other than the magic value MUST result in the\n    * transaction being reverted.\n    * Note: the contract address is always the message sender.\n    * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    */\n    function onERC721Received(\n        address /*_from*/,\n        address /*_to*/,\n        uint256 /*_tokenId*/,\n        bytes memory /*_data*/\n    )\n        public\n        view\n        returns (bytes4)\n    {\n        require(msg.sender == estateRegistry, \"Token not accepted\");\n        return ERC721_Received;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160408062001fc38339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001b9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620005c6640100000000026401000000009004565b6200020d6040805190810160405280601881526020017f617070726f766528616464726573732c75696e743235362900000000000000008152506303c267006200074c640100000000026401000000009004565b620002616040805190810160405280601f81526020017f736574417070726f76616c466f72416c6c28616464726573732c626f6f6c29008152506303c267006200074c640100000000026401000000009004565b620002dc606060405190810160405280602581526020017f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81526020017f74323536290000000000000000000000000000000000000000000000000000008152506303c267006200074c640100000000026401000000009004565b62000357606060405190810160405280602981526020017f736166655472616e7366657246726f6d28616464726573732c6164647265737381526020017f2c75696e743235362900000000000000000000000000000000000000000000008152506303c267006200074c640100000000026401000000009004565b620003d2606060405190810160405280602f81526020017f736166655472616e7366657246726f6d28616464726573732c6164647265737381526020017f2c75696e743235362c62797465732900000000000000000000000000000000008152506303c267006200074c640100000000026401000000009004565b6200044d606060405190810160405280602581526020017f7472616e736665724c616e642875696e743235362c75696e743235362c61646481526020017f72657373290000000000000000000000000000000000000000000000000000008152506303c267006200074c640100000000026401000000009004565b620004c8606060405190810160405280602c81526020017f7472616e736665724d616e794c616e64732875696e743235362c75696e74323581526020017f365b5d2c616464726573732900000000000000000000000000000000000000008152506303c267006200074c640100000000026401000000009004565b62000543606060405190810160405280602f81526020017f736166655472616e736665724d616e7946726f6d28616464726573732c61646481526020017f726573732c75696e743235365b5d2900000000000000000000000000000000008152506303c267006200074c640100000000026401000000009004565b620005be606060405190810160405280603581526020017f736166655472616e736665724d616e7946726f6d28616464726573732c61646481526020017f726573732c75696e743235365b5d2c62797465732900000000000000000000008152506303c267006200074c640100000000026401000000009004565b505062000be1565b620005df62000aa5640100000000026401000000009004565b80620006005750620005ff62000afd640100000000026401000000009004565b5b151562000675576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5065726d697373696f6e2064656e69656400000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f156bc24368e04478c2b540dd38468485df17c19ff5a8a58ddcb2f06ea2c96d7360405160405180910390a480600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006200076762000afd640100000000026401000000009004565b15156200077357600080fd5b600082111515620007ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f54696d652073686f756c642062652067726561746572207468616e203000000081525060200191505060405180910390fd5b6303c2670082111515156200088f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f54696d652073686f756c64206265206c6f776572207468616e2032207965617281526020017f730000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6200097083604051602401604051602081830303815290604052906040518082805190602001908083835b602083101515620008e15780518252602082019150602081019050602083039250620008ba565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062000b54640100000000026401000000009004565b905081420160016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163373ffffffffffffffffffffffffffffffffffffffff167f8e2268514ab9244330ca009c15c99d7aa20ab8ac9a33b0b748febd589e0f2960856040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000a6557808201518184015260208101905062000a48565b50505050905090810190601f16801562000a935780820380516001836020036101000a031916815260200191505b509250505060405180910390a3505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000806004835114151562000bd1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c6964206d6574686f64207369676e6174757265000000000000000081525060200191505060405180910390fd5b6020830151905080915050919050565b6113d28062000bf16000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063150b7a021461022d5780633315ad59146103325780634669697a1461035d5780634c81a727146103bd57806353c8d4df14610426578063570ca7351461048f578063715018a6146104e6578063776d1a01146104fd5780638da5cb5b146105405780638f32d59b14610597578063d4b83992146105c6578063e24e0dfd1461061d578063e387d31a14610690578063f2fde38b146106e7575b3480156100dc57600080fd5b5060606000806100ea61072a565b801561011f575061011e6000357fffffffff0000000000000000000000000000000000000000000000000000000016610782565b5b8061012e575061012d6107df565b5b15156101a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5065726d697373696f6e2064656e69656400000000000000000000000000000081525060200191505060405180910390fd5b6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050925060003690509150600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008083602086016000856127105a03f13d604051816000823e821515610229578181fd5b8181f35b34801561023957600080fd5b506102de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610836565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561033e57600080fd5b5061034761092b565b6040518082815260200191505060405180910390f35b34801561036957600080fd5b506103a760048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610933565b6040518082815260200191505060405180910390f35b3480156103c957600080fd5b506103d261094b565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561043257600080fd5b5061048d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610972565b005b34801561049b57600080fd5b506104a4610c03565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f257600080fd5b506104fb610c29565b005b34801561050957600080fd5b5061053e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cfb565b005b34801561054c57600080fd5b50610555610e5d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105a357600080fd5b506105ac6107df565b604051808215151515815260200191505060405180910390f35b3480156105d257600080fd5b506105db610e86565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062957600080fd5b5061068e600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610eac565b005b34801561069c57600080fd5b506106a56111db565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106f357600080fd5b50610728600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611201565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60004260016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054109050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e206e6f74206163636570746564000000000000000000000000000081525060200191505060405180910390fd5b63150b7a027c0100000000000000000000000000000000000000000000000000000000029050949350505050565b6303c2670081565b60016020528060005260406000206000915090505481565b63150b7a027c01000000000000000000000000000000000000000000000000000000000281565b600061097c6107df565b151561098757600080fd5b610a5582604051602401604051602081830303815290604052906040518082805190602001908083835b6020831015156109d657805182526020820191506020810190506020830392506109b1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611220565b9050610a6081610782565b151515610ad5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d6574686f6420697320616c726561647920616c6c6f7765640000000000000081525060200191505060405180910390fd5b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163373ffffffffffffffffffffffffffffffffffffffff167fe18a6d20aa84fd42540e30e4fdb8a18be5ab03f6229cc108301c1027d2dbb805846040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bc5578082015181840152602081019050610baa565b50505050905090810190601f168015610bf25780820380516001836020036101000a031916815260200191505b509250505060405180910390a35050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c316107df565b1515610c3c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610d0361072a565b80610d125750610d116107df565b5b1515610d86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5065726d697373696f6e2064656e69656400000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f156bc24368e04478c2b540dd38468485df17c19ff5a8a58ddcb2f06ea2c96d7360405160405180910390a480600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610eb66107df565b1515610ec157600080fd5b600082111515610f39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f54696d652073686f756c642062652067726561746572207468616e203000000081525060200191505060405180910390fd5b6303c267008211151515610fdb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f54696d652073686f756c64206265206c6f776572207468616e2032207965617281526020017f730000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6110a983604051602401604051602081830303815290604052906040518082805190602001908083835b60208310151561102a5780518252602082019150602081019050602083039250611005565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611220565b905081420160016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163373ffffffffffffffffffffffffffffffffffffffff167f8e2268514ab9244330ca009c15c99d7aa20ab8ac9a33b0b748febd589e0f2960856040518080602001828103825283818151815260200191508051906020019080838360005b8381101561119c578082015181840152602081019050611181565b50505050905090810190601f1680156111c95780820380516001836020036101000a031916815260200191505b509250505060405180910390a3505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6112096107df565b151561121457600080fd5b61121d816112ac565b50565b6000806004835114151561129c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c6964206d6574686f64207369676e6174757265000000000000000081525060200191505060405180910390fd5b6020830151905080915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156112e857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a7230582049c1a21c2b2f1b26e566c72522471210f5dfa0e6d9454eba03fd0aa2b29db8810029000000000000000000000000959e104e1a4db6317fa58f8295f586e1a978c2970000000000000000000000007dbc5ff20130d84a141026bb2d5dc8a2ad301832",
  "constructorArguments": "000000000000000000000000959e104e1a4db6317fa58f8295f586e1a978c2970000000000000000000000007dbc5ff20130d84a141026bb2d5dc8a2ad301832"
}