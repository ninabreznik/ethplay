{
  "address": "0xfb1f1ca07ccef4784babff5ff1359d39695fbc8a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UniswapMinimalTokenConverter",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\ncontract IERC20 {\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n}\n\n// File: contracts/interfaces/TokenConverter.sol\n\ncontract TokenConverter {\n    address public constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    function getReturn(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount) external view returns (uint256 amount);\n    function convert(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount, uint256 _minReturn) external payable returns (uint256 amount);\n}\n\ncontract Uniswap {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (IERC20 token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public decimals;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}\n\n/*\n    Only supports convertion from and to ETH, fails on ERC20 <-> ERC20 convertions\n*/\ncontract UniswapMinimalTokenConverter is TokenConverter {\n    Uniswap public uniswap;\n    IERC20 public ogToken;\n\n    constructor(Uniswap _uniswap) public {\n        uniswap = _uniswap;\n        ogToken = _uniswap.tokenAddress();\n        ogToken.approve(address(uniswap), uint(-1));\n    }\n\n    function getReturn(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount) external view returns (uint256 amount) {\n        IERC20 _ogToken = ogToken;\n        if (_fromToken == _ogToken && address(_toToken) == ETH_ADDRESS) {\n            // ERC20 -> ETH\n            return uniswap.getTokenToEthInputPrice(_fromAmount);\n        } else if (address(_fromToken) == ETH_ADDRESS && _toToken == _ogToken) {\n            // ETH -> ERC20\n            return uniswap.getEthToTokenInputPrice(_fromAmount);\n        } else {\n            // Not supported\n            return 0;\n        }\n    }\n\n    function convert(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount, uint256 _minReturn) external payable returns (uint256 amount) {\n        IERC20 _ogToken = ogToken;\n\n        if (_fromToken == _ogToken && address(_toToken) == ETH_ADDRESS) {\n            // ERC20 -> ETH\n            require(msg.value == 0);\n            require(_fromToken.transferFrom(msg.sender, address(this), _fromAmount), \"Error pulling tokens\");\n            amount = uniswap.tokenToEthTransferInput(_fromAmount, 1, uint(-1), msg.sender);\n            require(amount >= _minReturn, \"Low return\");\n        } else if (address(_fromToken) == ETH_ADDRESS && _toToken == _ogToken) {\n            // ETH -> ERC20\n            require(msg.value == _fromAmount, \"Low msg.value\");\n            amount = uniswap.ethToTokenTransferInput.value(_fromAmount)(1, uint(-1), msg.sender);\n            require(amount >= _minReturn, \"Low return\");\n        } else {\n            // Not supported\n            revert(\"Not supported\");\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806108138339810180604052602081101561003057600080fd5b5051600080546001600160a01b0319166001600160a01b038316908117909155604080517f9d76ea580000000000000000000000000000000000000000000000000000000081529051639d76ea5891600480820192602092909190829003018186803b15801561009f57600080fd5b505afa1580156100b3573d6000803e3d6000fd5b505050506040513d60208110156100c957600080fd5b5051600180546001600160a01b0319166001600160a01b03928316179081905560008054604080517f095ea7b30000000000000000000000000000000000000000000000000000000081529185166004830152600019602483015251929093169263095ea7b39260448083019360209383900390910190829087803b15801561015157600080fd5b505af1158015610165573d6000803e3d6000fd5b505050506040513d602081101561017b57600080fd5b5050506106868061018d6000396000f3fe60806040526004361061004a5760003560e01c80631e1401f81461004f5780632681f7e4146100a457806375892cf1146100d5578063a734f06e14610111578063b69b2a6514610126575b600080fd5b34801561005b57600080fd5b506100926004803603606081101561007257600080fd5b506001600160a01b0381358116916020810135909116906040013561013b565b60408051918252519081900360200190f35b3480156100b057600080fd5b506100b96102a0565b604080516001600160a01b039092168252519081900360200190f35b610092600480360360808110156100eb57600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356102af565b34801561011d57600080fd5b506100b9610633565b34801561013257600080fd5b506100b961064b565b6001546000906001600160a01b039081169085168114801561017957506001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b156102025760005460408051600160e01b6395b68fe70281526004810186905290516001600160a01b03909216916395b68fe791602480820192602092909190829003018186803b1580156101cd57600080fd5b505afa1580156101e1573d6000803e3d6000fd5b505050506040513d60208110156101f757600080fd5b505191506102999050565b6001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14801561023f5750806001600160a01b0316846001600160a01b0316145b156102935760005460408051600160e01b63cd7724c30281526004810186905290516001600160a01b039092169163cd7724c391602480820192602092909190829003018186803b1580156101cd57600080fd5b60009150505b9392505050565b6000546001600160a01b031681565b6001546000906001600160a01b03908116908616811480156102ed57506001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b156104b75734156102fd57600080fd5b60408051600160e01b6323b872dd0281523360048201523060248201526044810186905290516001600160a01b038816916323b872dd9160648083019260209291908290030181600087803b15801561035557600080fd5b505af1158015610369573d6000803e3d6000fd5b505050506040513d602081101561037f57600080fd5b50516103d55760408051600160e51b62461bcd02815260206004820152601460248201527f4572726f722070756c6c696e6720746f6b656e73000000000000000000000000604482015290519081900360640190fd5b6000805460408051600160e01b637237e0310281526004810188905260016024820152600019604482015233606482015290516001600160a01b0390921692637237e031926084808401936020939083900390910190829087803b15801561043c57600080fd5b505af1158015610450573d6000803e3d6000fd5b505050506040513d602081101561046657600080fd5b50519150828210156104b25760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b692637bb903932ba3ab93702604482015290519081900360640190fd5b61062a565b6001600160a01b03861673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480156104f45750806001600160a01b0316856001600160a01b0316145b156105da578334146105505760408051600160e51b62461bcd02815260206004820152600d60248201527f4c6f77206d73672e76616c756500000000000000000000000000000000000000604482015290519081900360640190fd5b60005460408051600160e01b63ad65d76d02815260016004820152600019602482015233604482015290516001600160a01b039092169163ad65d76d918791606480830192602092919082900301818588803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b50505050506040513d602081101561046657600080fd5b60408051600160e51b62461bcd02815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b50949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6001546001600160a01b03168156fea165627a7a72305820291b217ae7ef66c33056f4087b649186afb548fa12c5b88144256a39768f79b30029000000000000000000000000d91ff16ef92568fc27f466c3c5613e43313ab1dc",
  "constructorArguments": "000000000000000000000000d91ff16ef92568fc27f466c3c5613e43313ab1dc"
}