{
  "address": "0xd26a2c02d9272270f3a25411ad3fb4cf2c01202e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Lockcoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-06\n*/\n\npragma solidity ^0.4.25;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n\n/**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n        // Check for overflows\n        require(balances[_to] + _value > balances[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balances[_from] + balances[_to];\n        // Subtract from the sender\n        balances[_from] = balances[_from].sub(_value);\n        // Add the same to the recipient\n        balances[_to] = balances[_to].add(_value);\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[_from] + balances[_to] == previousBalances);\n    }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n      _transfer(msg.sender, _to, _value);\n      return true;\n   /** require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n    **/\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract Lockcoin is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  \n    string public name;                   \n    uint8 public decimals;                \n    string public symbol;                 \n  \n    address public owner;\n\n   constructor() public {\n        decimals = 18;                            \n        totalSupply_ =   320000000 * 10 ** uint256(decimals);                        \n        balances[msg.sender] = totalSupply_;             \n        name = \"Lockcoin\";                                   \n        symbol = \"LOCK\";                              \n        owner = msg.sender;\n        Transfer(address(0x0), msg.sender , totalSupply_);\n\n   }\n  \n   modifier onlyOwner(){\n       require(msg.sender == owner);\n       _;\n   }\n    function changeOwner(address _newOwner) public onlyOwner{\n       owner = _newOwner;\n   }\n   /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n  \n\n    function() payable public {\n        revert();\n    }\n\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060048054601260ff19909116179081905560ff16600a0a631312d000026001819055336000908152602081815260409182902092909255805180820190915260088082527f4c6f636b636f696e0000000000000000000000000000000000000000000000009190920190815261008a9160039190610123565b506040805180820190915260048082527f4c4f434b0000000000000000000000000000000000000000000000000000000060209092019182526100cf91600591610123565b5060068054600160a060020a0319163390811790915560015460408051918252516000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a36101be565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016457805160ff1916838001178555610191565b82800160010185558215610191579182015b82811115610191578251825591602001919060010190610176565b5061019d9291506101a1565b5090565b6101bb91905b8082111561019d57600081556001016101a7565b90565b6107f6806101cd6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806370a08231146101f15780638da5cb5b1461021257806395d89b4114610243578063a6f9dae114610258578063a9059cbb1461027b578063dd62ed3e1461029f575b600080fd5b3480156100bf57600080fd5b506100c86102c6565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a0360043516602435610354565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a6103ba565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a03600435811690602435166044356103c0565b3480156101d257600080fd5b506101db610537565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b5061018a600160a060020a0360043516610540565b34801561021e57600080fd5b5061022761055b565b60408051600160a060020a039092168252519081900360200190f35b34801561024f57600080fd5b506100c861056a565b34801561026457600080fd5b50610279600160a060020a03600435166105c5565b005b34801561028757600080fd5b50610161600160a060020a036004351660243561060b565b3480156102ab57600080fd5b5061018a600160a060020a0360043581169060243516610621565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561034c5780601f106103215761010080835404028352916020019161034c565b820191906000526020600020905b81548152906001019060200180831161032f57829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a03831615156103d757600080fd5b600160a060020a0384166000908152602081905260409020548211156103fc57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561042c57600080fd5b600160a060020a038416600090815260208190526040902054610455908363ffffffff61064c16565b600160a060020a03808616600090815260208190526040808220939093559085168152205461048a908363ffffffff61065e16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546104cc908363ffffffff61064c16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60045460ff1681565b600160a060020a031660009081526020819052604090205490565b600654600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561034c5780601f106103215761010080835404028352916020019161034c565b600654600160a060020a031633146105dc57600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610618338484610674565b50600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561065857fe5b50900390565b60008282018381101561066d57fe5b9392505050565b6000600160a060020a038316151561068b57600080fd5b600160a060020a0384166000908152602081905260409020548211156106b057600080fd5b600160a060020a038316600090815260208190526040902054828101116106d657600080fd5b50600160a060020a038083166000908152602081905260408082205492861682529020549081019061070e908363ffffffff61064c16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610743908363ffffffff61065e16565b600160a060020a038085166000818152602081815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a038084166000908152602081905260408082205492871682529020540181146107c457fe5b505050505600a165627a7a72305820b2b6058b5d32fdfe166fe7b5e9484b9f3a0cf3b057de68c6d2596695c1f72f390029"
}