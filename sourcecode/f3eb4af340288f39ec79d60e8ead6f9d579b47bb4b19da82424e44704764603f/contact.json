{
  "address": "0x727b7045706bf78f2ad03b77e661323001a656a0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MonethaUsers",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-22\n*/\n\npragma solidity ^0.4.23;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\n\n/**\n * @title Contactable token\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n * contact information.\n */\ncontract Contactable is Ownable{\n\n    string public contactInformation;\n\n    /**\n     * @dev Allows the owner to set a string with their contact information.\n     * @param info The contact information to attach to the contract.\n     */\n    function setContactInformation(string info) onlyOwner public {\n         contactInformation = info;\n     }\n}\n\n// File: contracts/MonethaUsers.sol\n\n/**\n *  @title MonethaUsers\n *\n *  MonethaUsers stores basic user information, i.e. his nickname and reputation score\n */\ncontract MonethaUsers is Contactable {\n\n    using SafeMath for uint256;\n\n    string constant VERSION = \"0.1\";\n\n    struct User {\n        string name;\n        uint256 starScore;\n        uint256 reputationScore;\n        uint256 signedDealsCount;\n        string nickname;\n        bool isVerified;\n    }\n\n    mapping (address => User) public users;\n\n    event UpdatedSignedDealsCount(address indexed _userAddress, uint256 _newSignedDealsCount);\n    event UpdatedStarScore(address indexed _userAddress, uint256 _newStarScore);\n    event UpdatedReputationScore(address indexed _userAddress, uint256 _newReputationScore);\n    event UpdatedNickname(address indexed _userAddress, string _newNickname);\n    event UpdatedIsVerified(address indexed _userAddress, bool _newIsVerified);\n    event UpdatedName(address indexed _userAddress, string _newName);\n    event UpdatedTrustScore(address indexed _userAddress, uint256 _newStarScore, uint256 _newReputationScore);\n    event UserRegistered(address indexed _userAddress, string _name, uint256 _starScore, uint256 _reputationScore, uint256 _signedDealsCount, string _nickname, bool _isVerified);\n    event UpdatedUserDetails(address indexed _userAddress, uint256 _newStarScore, uint256 _newReputationScore, uint256 _newSignedDealsCount, bool _newIsVerified);\n    event UpdatedUser(address indexed _userAddress, string _name, uint256 _newStarScore, uint256 _newReputationScore, uint256 _newSignedDealsCount, string _newNickname, bool _newIsVerified);\n\n    /**\n     *  registerUser associates a Monetha user's ethereum address with his nickname and trust score\n     *  @param _userAddress address of user's wallet\n     *  @param _name corresponds to use's nickname\n     *  @param _starScore represents user's star score\n     *  @param _reputationScore represents user's reputation score\n     *  @param _signedDealsCount represents user's signed deal count\n     *  @param _nickname represents user's nickname\n     *  @param _isVerified represents whether user is verified (KYC'ed)\n     */\n    function registerUser(address _userAddress, string _name, uint256 _starScore, uint256 _reputationScore, uint256 _signedDealsCount, string _nickname, bool _isVerified)\n        external onlyOwner\n    {\n        User storage user = users[_userAddress];\n\n        user.name = _name;\n        user.starScore = _starScore;\n        user.reputationScore = _reputationScore;\n        user.signedDealsCount = _signedDealsCount;\n        user.nickname = _nickname;\n        user.isVerified = _isVerified;\n\n        emit UserRegistered(_userAddress, _name, _starScore, _reputationScore, _signedDealsCount, _nickname, _isVerified);\n    }\n\n    /**\n     *  updateStarScore updates the star score of a Monetha user\n     *  @param _userAddress address of user's wallet\n     *  @param _updatedStars represents user's new star score\n     */\n    function updateStarScore(address _userAddress, uint256 _updatedStars)\n        external onlyOwner\n    {\n        users[_userAddress].starScore = _updatedStars;\n\n        emit UpdatedStarScore(_userAddress, _updatedStars);\n    }\n\n    /**\n     *  updateStarScoreInBulk updates the star score of Monetha users in bulk\n     */\n    function updateStarScoreInBulk(address[] _userAddresses, uint256[] _starScores)\n        external onlyOwner\n    {\n        require(_userAddresses.length == _starScores.length);\n\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            users[_userAddresses[i]].starScore = _starScores[i];\n\n            emit UpdatedStarScore(_userAddresses[i], _starScores[i]);\n        }\n    }\n\n    /**\n     *  updateReputationScore updates the reputation score of a Monetha user\n     *  @param _userAddress address of user's wallet\n     *  @param _updatedReputation represents user's new reputation score\n     */\n    function updateReputationScore(address _userAddress, uint256 _updatedReputation)\n        external onlyOwner\n    {\n        users[_userAddress].reputationScore = _updatedReputation;\n\n        emit UpdatedReputationScore(_userAddress, _updatedReputation);\n    }\n\n    /**\n     *  updateReputationScoreInBulk updates the reputation score of a Monetha users in bulk\n     */\n    function updateReputationScoreInBulk(address[] _userAddresses, uint256[] _reputationScores)\n        external onlyOwner\n    {\n        require(_userAddresses.length == _reputationScores.length);\n\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            users[_userAddresses[i]].reputationScore = _reputationScores[i];\n\n            emit UpdatedReputationScore(_userAddresses[i],  _reputationScores[i]);\n        }\n    }\n\n    /**\n     *  updateTrustScore updates the trust score of a Monetha user\n     *  @param _userAddress address of user's wallet\n     *  @param _updatedStars represents user's new star score\n     *  @param _updatedReputation represents user's new reputation score\n     */\n    function updateTrustScore(address _userAddress, uint256 _updatedStars, uint256 _updatedReputation)\n        external onlyOwner\n    {\n        users[_userAddress].starScore = _updatedStars;\n        users[_userAddress].reputationScore = _updatedReputation;\n\n        emit UpdatedTrustScore(_userAddress, _updatedStars, _updatedReputation);\n    }\n\n     /**\n     *  updateTrustScoreInBulk updates the trust score of Monetha users in bulk\n     */\n    function updateTrustScoreInBulk(address[] _userAddresses, uint256[] _starScores, uint256[] _reputationScores)\n        external onlyOwner\n    {\n        require(_userAddresses.length == _starScores.length);\n        require(_userAddresses.length == _reputationScores.length);\n\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            users[_userAddresses[i]].starScore = _starScores[i];\n            users[_userAddresses[i]].reputationScore = _reputationScores[i];\n\n            emit UpdatedTrustScore(_userAddresses[i], _starScores[i], _reputationScores[i]);\n        }\n    }\n\n    /**\n     *  updateSignedDealsCount updates the signed deals count of a Monetha user\n     *  @param _userAddress address of user's wallet\n     *  @param _updatedSignedDeals represents user's new signed deals count\n     */\n    function updateSignedDealsCount(address _userAddress, uint256 _updatedSignedDeals)\n        external onlyOwner\n    {\n        users[_userAddress].signedDealsCount = _updatedSignedDeals;\n\n        emit UpdatedSignedDealsCount(_userAddress, _updatedSignedDeals);\n    }\n\n    /**\n     *  updateSignedDealsCountInBulk updates the signed deals count of Monetha users in bulk\n     */\n    function updateSignedDealsCountInBulk(address[] _userAddresses, uint256[] _updatedSignedDeals)\n        external onlyOwner\n    {\n        require(_userAddresses.length == _updatedSignedDeals.length);\n\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            users[_userAddresses[i]].signedDealsCount = _updatedSignedDeals[i];\n\n            emit UpdatedSignedDealsCount(_userAddresses[i], _updatedSignedDeals[i]);\n        }\n    }\n\n    /**\n     *  updateNickname updates user's nickname\n     *  @param _userAddress address of user's wallet\n     *  @param _updatedNickname represents user's new nickname\n     */\n    function updateNickname(address _userAddress, string _updatedNickname)\n        external onlyOwner\n    {\n        users[_userAddress].nickname = _updatedNickname;\n\n        emit UpdatedNickname(_userAddress, _updatedNickname);\n    }\n\n    /**\n     *  updateIsVerified updates user's verified status\n     *  @param _userAddress address of user's wallet\n     *  @param _isVerified represents user's new verification status\n     */\n    function updateIsVerified(address _userAddress, bool _isVerified)\n        external onlyOwner\n    {\n        users[_userAddress].isVerified = _isVerified;\n\n        emit UpdatedIsVerified(_userAddress, _isVerified);\n    }\n\n    /**\n     *  updateIsVerifiedInBulk updates nicknames of Monetha users in bulk\n     */\n    function updateIsVerifiedInBulk(address[] _userAddresses, bool[] _updatedIsVerfied)\n        external onlyOwner\n    {\n        require(_userAddresses.length == _updatedIsVerfied.length);\n\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            users[_userAddresses[i]].isVerified = _updatedIsVerfied[i];\n\n            emit UpdatedIsVerified(_userAddresses[i], _updatedIsVerfied[i]);\n        }\n    }\n\n    /**\n     *  updateUserDetailsInBulk updates details of Monetha users in bulk\n     */\n    function updateUserDetailsInBulk(address[] _userAddresses, uint256[] _starScores, uint256[] _reputationScores, uint256[] _signedDealsCount, bool[] _isVerified)\n        external onlyOwner\n    {\n        require(_userAddresses.length == _starScores.length);\n        require(_userAddresses.length == _reputationScores.length);\n        require(_userAddresses.length == _signedDealsCount.length);\n        require(_userAddresses.length == _isVerified.length);\n\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            users[_userAddresses[i]].starScore = _starScores[i];\n            users[_userAddresses[i]].reputationScore = _reputationScores[i];\n            users[_userAddresses[i]].signedDealsCount = _signedDealsCount[i];\n            users[_userAddresses[i]].isVerified = _isVerified[i];\n\n            emit UpdatedUserDetails(_userAddresses[i], _starScores[i], _reputationScores[i], _signedDealsCount[i], _isVerified[i]);\n        }\n    }\n\n    /**\n     *  updateName updates the name of a Monetha user\n     *  @param _userAddress address of user's wallet\n     *  @param _updatedName represents user's new name\n     */\n    function updateName(address _userAddress, string _updatedName)\n        external onlyOwner\n    {\n        users[_userAddress].name = _updatedName;\n\n        emit UpdatedName(_userAddress, _updatedName);\n    }\n\n    /**\n     *  updateUser updates single user details\n     */\n    function updateUser(address _userAddress, string _updatedName, uint256 _updatedStarScore, uint256 _updatedReputationScore, uint256 _updatedSignedDealsCount, string _updatedNickname, bool _updatedIsVerified)\n        external onlyOwner\n    {\n        users[_userAddress].name = _updatedName;\n        users[_userAddress].starScore = _updatedStarScore;\n        users[_userAddress].reputationScore = _updatedReputationScore;\n        users[_userAddress].signedDealsCount = _updatedSignedDealsCount;\n        users[_userAddress].nickname = _updatedNickname;\n        users[_userAddress].isVerified = _updatedIsVerified;\n\n        emit UpdatedUser(_userAddress, _updatedName, _updatedStarScore, _updatedReputationScore, _updatedSignedDealsCount, _updatedNickname, _updatedIsVerified);\n    }\n}",
  "bytecode": ""
}