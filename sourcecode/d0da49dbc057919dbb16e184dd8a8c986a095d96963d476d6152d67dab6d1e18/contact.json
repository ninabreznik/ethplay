{
  "address": "0x2791528f5617e187a6d73c30034ac211b2f47042",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CardsRaffle",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-26\n*/\n\npragma solidity ^0.4.18;\n/* ==================================================================== */\n/* Copyright (c) 2018 The MagicAcademy Project.  All rights reserved.\n/* \n/* https://www.magicacademy.io One of the world's first idle strategy games of blockchain \n/*  \n/* authors [email protected]/[email protected]\n/*                 \n/* ==================================================================== */\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /*\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract AccessAdmin is Ownable {\n\n  /// @dev Admin Address\n  mapping (address => bool) adminContracts;\n\n  /// @dev Trust contract\n  mapping (address => bool) actionContracts;\n\n  function setAdminContract(address _addr, bool _useful) public onlyOwner {\n    require(_addr != address(0));\n    adminContracts[_addr] = _useful;\n  }\n\n  modifier onlyAdmin {\n    require(adminContracts[msg.sender]); \n    _;\n  }\n\n  function setActionContract(address _actionAddr, bool _useful) public onlyAdmin {\n    actionContracts[_actionAddr] = _useful;\n  }\n\n  modifier onlyAccess() {\n    require(actionContracts[msg.sender]);\n    _;\n  }\n}\n\ninterface CardsInterface {\n  function balanceOf(address player) public constant returns(uint256);\n  function updatePlayersCoinByOut(address player) external;\n  function updatePlayersCoinByPurchase(address player, uint256 purchaseCost) public;\n  function removeUnitMultipliers(address player, uint256 upgradeClass, uint256 unitId, uint256 upgradeValue) external;\n  function upgradeUnitMultipliers(address player, uint256 upgradeClass, uint256 unitId, uint256 upgradeValue) external;\n}\ninterface RareInterface {\n  function getRareItemsOwner(uint256 rareId) external view returns (address);\n  function getRareItemsPrice(uint256 rareId) external view returns (uint256);\n    function getRareInfo(uint256 _tokenId) external view returns (\n    uint256 sellingPrice,\n    address owner,\n    uint256 nextPrice,\n    uint256 rareClass,\n    uint256 cardId,\n    uint256 rareValue\n  ); \n  function transferToken(address _from, address _to, uint256 _tokenId) external;\n  function transferTokenByContract(uint256 _tokenId,address _to) external;\n  function setRarePrice(uint256 _rareId, uint256 _price) external;\n  function rareStartPrice() external view returns (uint256);\n}\ncontract CardsRaffle is AccessAdmin {\n  using SafeMath for SafeMath;\n\n  function CardsRaffle() public {\n    setAdminContract(msg.sender,true);\n    setActionContract(msg.sender,true);\n  }\n  //data contract\n  CardsInterface public cards ;\n  RareInterface public rare;\n\n  function setCardsAddress(address _address) external onlyOwner {\n    cards = CardsInterface(_address);\n  }\n\n  //rare cards\n  function setRareAddress(address _address) external onlyOwner {\n    rare = RareInterface(_address);\n  }\n\n  function getRareAddress() public view returns (address) {\n    return rare;\n  }\n\n  //event\n  event UnitBought(address player, uint256 unitId, uint256 amount);\n  event RaffleSuccessful(address winner);\n\n  // Raffle structures\n  struct TicketPurchases {\n    TicketPurchase[] ticketsBought;\n    uint256 numPurchases; // Allows us to reset without clearing TicketPurchase[] (avoids potential for gas limit)\n    uint256 raffleRareId;\n  }\n    \n  // Allows us to query winner without looping (avoiding potential for gas limit)\n  struct TicketPurchase {\n    uint256 startId;\n    uint256 endId;\n  }\n    \n  // Raffle tickets\n  mapping(address => TicketPurchases) private ticketsBoughtByPlayer;\n  mapping(uint256 => address[]) private rafflePlayers; // Keeping a seperate list for each raffle has it's benefits. \n\n  uint256 private constant RAFFLE_TICKET_BASE_PRICE = 10000;\n\n  // Current raffle info  \n  uint256 private raffleEndTime;\n  uint256 private raffleRareId;\n  uint256 private raffleTicketsBought;\n  address private raffleWinner; // Address of winner\n  bool private raffleWinningTicketSelected;\n  uint256 private raffleTicketThatWon;\n\n  // Raffle for rare items  \n  function buyRaffleTicket(uint256 amount) external {\n    require(raffleEndTime >= block.timestamp);  //close it if need test\n    require(amount > 0);\n        \n    uint256 ticketsCost = SafeMath.mul(RAFFLE_TICKET_BASE_PRICE, amount);\n    require(cards.balanceOf(msg.sender) >= ticketsCost);\n        \n    // Update player's jade  \n    cards.updatePlayersCoinByPurchase(msg.sender, ticketsCost);\n        \n    // Handle new tickets\n    TicketPurchases storage purchases = ticketsBoughtByPlayer[msg.sender];\n        \n    // If we need to reset tickets from a previous raffle\n    if (purchases.raffleRareId != raffleRareId) {\n      purchases.numPurchases = 0;\n      purchases.raffleRareId = raffleRareId;\n      rafflePlayers[raffleRareId].push(msg.sender); // Add user to raffle\n    }\n        \n    // Store new ticket purchase \n    if (purchases.numPurchases == purchases.ticketsBought.length) {\n      purchases.ticketsBought.length = SafeMath.add(purchases.ticketsBought.length,1);\n    }\n    purchases.ticketsBought[purchases.numPurchases++] = TicketPurchase(raffleTicketsBought, raffleTicketsBought + (amount - 1)); // (eg: buy 10, get id's 0-9)\n        \n    // Finally update ticket total\n    raffleTicketsBought = SafeMath.add(raffleTicketsBought,amount);\n    //event\n    UnitBought(msg.sender,raffleRareId,amount);\n  } \n\n  /// @dev start raffle\n  function startRareRaffle(uint256 endTime, uint256 rareId) external onlyAdmin {\n    require(rareId>0);\n    require(rare.getRareItemsOwner(rareId) == getRareAddress());\n    require(block.timestamp < endTime); //close it if need test\n\n    if (raffleRareId != 0) { // Sanity to assure raffle has ended before next one starts\n      require(raffleWinner != 0);\n    }\n\n    // Reset previous raffle info\n    raffleWinningTicketSelected = false;\n    raffleTicketThatWon = 0;\n    raffleWinner = 0;\n    raffleTicketsBought = 0;\n        \n    // Set current raffle info\n    raffleEndTime = endTime;\n    raffleRareId = rareId;\n  }\n\n  function awardRafflePrize(address checkWinner, uint256 checkIndex) external { \n    require(raffleEndTime < block.timestamp);  //close it if need test\n    require(raffleWinner == 0);\n    require(rare.getRareItemsOwner(raffleRareId) == getRareAddress());\n        \n    if (!raffleWinningTicketSelected) {\n      drawRandomWinner(); // Ideally do it in one call (gas limit cautious)\n    }\n        \n  // Reduce gas by (optionally) offering an address to _check_ for winner\n    if (checkWinner != 0) {\n      TicketPurchases storage tickets = ticketsBoughtByPlayer[checkWinner];\n      if (tickets.numPurchases > 0 && checkIndex < tickets.numPurchases && tickets.raffleRareId == raffleRareId) {\n        TicketPurchase storage checkTicket = tickets.ticketsBought[checkIndex];\n        if (raffleTicketThatWon >= checkTicket.startId && raffleTicketThatWon <= checkTicket.endId) {\n          assignRafflePrize(checkWinner); // WINNER!\n          return;\n        }\n      }\n    }\n        \n  // Otherwise just naively try to find the winner (will work until mass amounts of players)\n    for (uint256 i = 0; i < rafflePlayers[raffleRareId].length; i++) {\n      address player = rafflePlayers[raffleRareId][i];\n      TicketPurchases storage playersTickets = ticketsBoughtByPlayer[player];\n            \n      uint256 endIndex = playersTickets.numPurchases - 1;\n      // Minor optimization to avoid checking every single player\n      if (raffleTicketThatWon >= playersTickets.ticketsBought[0].startId && raffleTicketThatWon <= playersTickets.ticketsBought[endIndex].endId) {\n        for (uint256 j = 0; j < playersTickets.numPurchases; j++) {\n          TicketPurchase storage playerTicket = playersTickets.ticketsBought[j];\n          if (raffleTicketThatWon >= playerTicket.startId && raffleTicketThatWon <= playerTicket.endId) {\n            assignRafflePrize(player); // WINNER!\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  function assignRafflePrize(address winner) internal {\n    raffleWinner = winner;\n    uint256 newPrice = (rare.rareStartPrice() * 25) / 20;\n    rare.transferTokenByContract(raffleRareId,winner);\n    rare.setRarePrice(raffleRareId,newPrice);\n       \n    cards.updatePlayersCoinByOut(winner);\n    uint256 upgradeClass;\n    uint256 unitId;\n    uint256 upgradeValue;\n    (,,,,upgradeClass, unitId, upgradeValue) = rare.getRareInfo(raffleRareId);\n    \n    cards.upgradeUnitMultipliers(winner, upgradeClass, unitId, upgradeValue);\n    //event\n    RaffleSuccessful(winner);\n  }\n  \n  // Random enough for small contests (Owner only to prevent trial & error execution)\n  function drawRandomWinner() public onlyAdmin {\n    require(raffleEndTime < block.timestamp); //close it if need to test\n    require(!raffleWinningTicketSelected);\n        \n    uint256 seed = SafeMath.add(raffleTicketsBought , block.timestamp);\n    raffleTicketThatWon = addmod(uint256(block.blockhash(block.number-1)), seed, raffleTicketsBought);\n    raffleWinningTicketSelected = true;\n  }  \n\n  // To allow clients to verify contestants\n  function getRafflePlayers(uint256 raffleId) external constant returns (address[]) {\n    return (rafflePlayers[raffleId]);\n  }\n\n    // To allow clients to verify contestants\n  function getPlayersTickets(address player) external constant returns (uint256[], uint256[]) {\n    TicketPurchases storage playersTickets = ticketsBoughtByPlayer[player];\n        \n    if (playersTickets.raffleRareId == raffleRareId) {\n      uint256[] memory startIds = new uint256[](playersTickets.numPurchases);\n      uint256[] memory endIds = new uint256[](playersTickets.numPurchases);\n            \n      for (uint256 i = 0; i < playersTickets.numPurchases; i++) {\n        startIds[i] = playersTickets.ticketsBought[i].startId;\n        endIds[i] = playersTickets.ticketsBought[i].endId;\n      }\n    }\n        \n    return (startIds, endIds);\n  }\n\n\n  // To display on website\n  function getLatestRaffleInfo() external constant returns (uint256, uint256, uint256, address, uint256) {\n    return (raffleEndTime, raffleRareId, raffleTicketsBought, raffleWinner, raffleTicketThatWon);\n  }    \n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": ""
}