{
  "address": "0xac914ff6d04b076be6c8cd5871bfde37d52023bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Asset",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "10000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\n// File: contracts/AssetInterface.sol\n\npragma solidity 0.4.23;\n\n\ncontract AssetInterface {\n    function _performTransferWithReference(\n        address _to,\n        uint _value,\n        string _reference,\n        address _sender)\n    public returns(bool);\n\n    function _performTransferToICAPWithReference(\n        bytes32 _icap,\n        uint _value,\n        string _reference,\n        address _sender)\n    public returns(bool);\n\n    function _performApprove(address _spender, uint _value, address _sender)\n    public returns(bool);\n\n    function _performTransferFromWithReference(\n        address _from,\n        address _to,\n        uint _value,\n        string _reference,\n        address _sender)\n    public returns(bool);\n\n    function _performTransferFromToICAPWithReference(\n        address _from,\n        bytes32 _icap,\n        uint _value,\n        string _reference,\n        address _sender)\n    public returns(bool);\n\n    function _performGeneric(bytes, address) public payable {\n        revert();\n    }\n}\n\n// File: contracts/ERC20Interface.sol\n\npragma solidity 0.4.23;\n\n\ncontract ERC20Interface {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed spender, uint256 value);\n\n    function totalSupply() public view returns(uint256 supply);\n    function balanceOf(address _owner) public view returns(uint256 balance);\n    // solhint-disable-next-line no-simple-event-func-name\n    function transfer(address _to, uint256 _value) public returns(bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n    function approve(address _spender, uint256 _value) public returns(bool success);\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\n\n    // function symbol() constant returns(string);\n    function decimals() public view returns(uint8);\n    // function name() constant returns(string);\n}\n\n// File: contracts/AssetProxyInterface.sol\n\npragma solidity 0.4.23;\n\n\n\ncontract AssetProxyInterface is ERC20Interface {\n    function _forwardApprove(address _spender, uint _value, address _sender)\n    public returns(bool);\n\n    function _forwardTransferFromWithReference(\n        address _from,\n        address _to,\n        uint _value,\n        string _reference,\n        address _sender)\n    public returns(bool);\n\n    function _forwardTransferFromToICAPWithReference(\n        address _from,\n        bytes32 _icap,\n        uint _value,\n        string _reference,\n        address _sender)\n    public returns(bool);\n\n    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value)\n    public returns(bool);\n\n    // solhint-disable-next-line no-empty-blocks\n    function etoken2() public pure returns(address) {} // To be replaced by the implicit getter;\n\n    // To be replaced by the implicit getter;\n    // solhint-disable-next-line no-empty-blocks\n    function etoken2Symbol() public pure returns(bytes32) {}\n}\n\n// File: contracts/helpers/Bytes32.sol\n\npragma solidity 0.4.23;\n\n\ncontract Bytes32 {\n    function _bytes32(string _input) internal pure returns(bytes32 result) {\n        assembly {\n            result := mload(add(_input, 32))\n        }\n    }\n}\n\n// File: contracts/helpers/ReturnData.sol\n\npragma solidity 0.4.23;\n\n\ncontract ReturnData {\n    function _returnReturnData(bool _success) internal pure {\n        assembly {\n            let returndatastart := 0\n            returndatacopy(returndatastart, 0, returndatasize)\n            switch _success case 0 { revert(returndatastart, returndatasize) }\n                default { return(returndatastart, returndatasize) }\n        }\n    }\n\n    function _assemblyCall(address _destination, uint _value, bytes _data)\n    internal returns(bool success) {\n        assembly {\n            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\n        }\n    }\n}\n\n// File: contracts/Asset.sol\n\npragma solidity 0.4.23;\n\n\n\n\n\n\n/**\n * @title EToken2 Asset implementation contract.\n *\n * Basic asset implementation contract, without any additional logic.\n * Every other asset implementation contracts should derive from this one.\n * Receives calls from the proxy, and calls back immediately without arguments modification.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract Asset is AssetInterface, Bytes32, ReturnData {\n    // Assigned asset proxy contract, immutable.\n    AssetProxyInterface public proxy;\n\n    /**\n     * Only assigned proxy is allowed to call.\n     */\n    modifier onlyProxy() {\n        if (proxy == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * Sets asset proxy address.\n     *\n     * Can be set only once.\n     *\n     * @param _proxy asset proxy contract address.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function init(AssetProxyInterface _proxy) public returns(bool) {\n        if (address(proxy) != 0x0) {\n            return false;\n        }\n        proxy = _proxy;\n        return true;\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performTransferWithReference(\n        address _to,\n        uint _value,\n        string _reference,\n        address _sender)\n    public onlyProxy() returns(bool) {\n        if (isICAP(_to)) {\n            return _transferToICAPWithReference(\n                bytes32(_to) << 96, _value, _reference, _sender);\n        }\n        return _transferWithReference(_to, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferWithReference(\n        address _to,\n        uint _value,\n        string _reference,\n        address _sender)\n    internal returns(bool) {\n        return proxy._forwardTransferFromWithReference(\n            _sender, _to, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performTransferToICAPWithReference(\n        bytes32 _icap,\n        uint _value,\n        string _reference,\n        address _sender)\n    public onlyProxy() returns(bool) {\n        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferToICAPWithReference(\n        bytes32 _icap,\n        uint _value,\n        string _reference,\n        address _sender)\n    internal returns(bool) {\n        return proxy._forwardTransferFromToICAPWithReference(\n            _sender, _icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performTransferFromWithReference(\n        address _from,\n        address _to,\n        uint _value,\n        string _reference,\n        address _sender)\n    public onlyProxy() returns(bool) {\n        if (isICAP(_to)) {\n            return _transferFromToICAPWithReference(\n                _from, bytes32(_to) << 96, _value, _reference, _sender);\n        }\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferFromWithReference(\n        address _from,\n        address _to,\n        uint _value,\n        string _reference,\n        address _sender)\n    internal returns(bool) {\n        return proxy._forwardTransferFromWithReference(\n            _from, _to, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performTransferFromToICAPWithReference(\n        address _from,\n        bytes32 _icap,\n        uint _value,\n        string _reference,\n        address _sender)\n    public onlyProxy() returns(bool) {\n        return _transferFromToICAPWithReference(\n            _from, _icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferFromToICAPWithReference(\n        address _from,\n        bytes32 _icap,\n        uint _value,\n        string _reference,\n        address _sender)\n    internal returns(bool) {\n        return proxy._forwardTransferFromToICAPWithReference(\n            _from, _icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performApprove(address _spender, uint _value, address _sender)\n    public onlyProxy() returns(bool) {\n        return _approve(_spender, _value, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _approve(address _spender, uint _value, address _sender) \n    internal returns(bool) {\n        return proxy._forwardApprove(_spender, _value, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return bytes32 result.\n     * @dev function is final, and must not be overridden.\n     */\n    function _performGeneric(bytes _data, address _sender)\n    public payable onlyProxy() {\n        _generic(_data, msg.value, _sender);\n    }\n\n    modifier onlyMe() {\n        if (this == msg.sender) {\n            _;\n        }\n    }\n\n    // Most probably the following should never be redefined in child contracts.\n    address public genericSender;\n\n    function _generic(bytes _data, uint _value, address _msgSender) internal {\n        // Restrict reentrancy.\n        require(genericSender == 0x0);\n        genericSender = _msgSender;\n        bool success = _assemblyCall(address(this), _value, _data);\n        delete genericSender;\n        _returnReturnData(success);\n    }\n\n    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\n    function _sender() internal view returns(address) {\n        return this == msg.sender ? genericSender : msg.sender;\n    }\n\n    // Interface functions to allow specifying ICAP addresses as strings.\n    function transferToICAP(string _icap, uint _value) public returns(bool) {\n        return transferToICAPWithReference(_icap, _value, '');\n    }\n\n    function transferToICAPWithReference(string _icap, uint _value, string _reference)\n    public returns(bool) {\n        return _transferToICAPWithReference(\n            _bytes32(_icap), _value, _reference, _sender());\n    }\n\n    function transferFromToICAP(address _from, string _icap, uint _value)\n    public returns(bool) {\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\n    }\n\n    function transferFromToICAPWithReference(\n        address _from,\n        string _icap,\n        uint _value,\n        string _reference)\n    public returns(bool) {\n        return _transferFromToICAPWithReference(\n            _from, _bytes32(_icap), _value, _reference, _sender());\n    }\n\n    function isICAP(address _address) public pure returns(bool) {\n        bytes32 a = bytes32(_address) << 96;\n        if (a[0] != 'X' || a[1] != 'E') {\n            return false;\n        }\n        if (a[2] < 48 || a[2] > 57 || a[3] < 48 || a[3] > 57) {\n            return false;\n        }\n        for (uint i = 4; i < 20; i++) {\n            uint char = uint(a[i]);\n            if (char < 48 || char > 90 || (char > 57 && char < 65)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"genericSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performGeneric\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "bytecode": "608060405234801561001057600080fd5b506112e6806100206000396000f3006080604052600436106100cf5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631721648481146100d45780631962df711461011257806319ab453c146101b4578063307e38ca146101e25780637609c5a91461021057806381d434e91461028657806384c5c34d146102e15780639ab253cc14610399578063c10796df14610436578063cca97025146104ae578063db00b84814610542578063e34f7137146105a8578063eb58705b146105e0578063ec55688914610671575b600080fd5b3480156100e057600080fd5b506100e9610686565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561011e57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a094823573ffffffffffffffffffffffffffffffffffffffff169460248035953695946064949201919081908401838280828437509497505050923573ffffffffffffffffffffffffffffffffffffffff1693506106a292505050565b604080519115158252519081900360200190f35b3480156101c057600080fd5b506101a073ffffffffffffffffffffffffffffffffffffffff60043516610724565b3480156101ee57600080fd5b506101a073ffffffffffffffffffffffffffffffffffffffff60043516610794565b34801561021c57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101a095833573ffffffffffffffffffffffffffffffffffffffff169536956044949193909101919081908401838280828437509497505093359450610b209350505050565b34801561029257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101a09436949293602493928401919081908401838280828437509497505093359450610b489350505050565b3480156102ed57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101a095833573ffffffffffffffffffffffffffffffffffffffff1695369560449491939091019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a359b909a909994019750919550918201935091508190840183828082843750949750610b659650505050505050565b3480156103a557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101a094369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a359b909a909994019750919550918201935091508190840183828082843750949750610b839650505050505050565b34801561044257600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a09482359460248035953695946064949201919081908401838280828437509497505050923573ffffffffffffffffffffffffffffffffffffffff169350610ba092505050565b3480156104ba57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101a09473ffffffffffffffffffffffffffffffffffffffff81358116956024803590921695604435953695608494019181908401838280828437509497505050923573ffffffffffffffffffffffffffffffffffffffff169350610bd192505050565b6040805160206004803580820135601f81018490048402850184019095528484526105a69436949293602493928401919081908401838280828437509497505050923573ffffffffffffffffffffffffffffffffffffffff169350610c5692505050565b005b3480156105b457600080fd5b506101a073ffffffffffffffffffffffffffffffffffffffff6004358116906024359060443516610c89565b3480156105ec57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101a09473ffffffffffffffffffffffffffffffffffffffff81351694602480359560443595369560849493019181908401838280828437509497505050923573ffffffffffffffffffffffffffffffffffffffff169350610cb992505050565b34801561067d57600080fd5b506100e9610ceb565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600080543373ffffffffffffffffffffffffffffffffffffffff9081169116141561071c576106d085610794565b1561070d576107066c0100000000000000000000000073ffffffffffffffffffffffffffffffffffffffff871602858585610d07565b905061071c565b61071985858585610e3a565b90505b949350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff161561074b5750600061078f565b50600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905560015b919050565b600073ffffffffffffffffffffffffffffffffffffffff82166c010000000000000000000000000281807f58000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000007f010000000000000000000000000000000000000000000000000000000000000085841a021614158061089a57508260011a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f450000000000000000000000000000000000000000000000000000000000000014155b156108a85760009350610b18565b7f30000000000000000000000000000000000000000000000000000000000000008360021a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916108061098357507f39000000000000000000000000000000000000000000000000000000000000008360021a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916115b806109f457507f30000000000000000000000000000000000000000000000000000000000000008360031a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916105b80610a6557507f39000000000000000000000000000000000000000000000000000000000000008360031a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916115b15610a735760009350610b18565b600491505b6014821015610b1357828260208110610a8d57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900490506030811080610ae45750605a81115b80610afa5750603981118015610afa5750604181105b15610b085760009350610b18565b600190910190610a78565b600193505b505050919050565b6000610b3e8484846020604051908101604052806000815250610b65565b90505b9392505050565b6000610b4183836020604051908101604052806000815250610b83565b600061071985610b7486610ee8565b8585610b7e610eef565b610f49565b6000610b3e610b9185610ee8565b8484610b9b610eef565b610d07565b600080543373ffffffffffffffffffffffffffffffffffffffff9081169116141561071c5761071985858585610d07565b600080543373ffffffffffffffffffffffffffffffffffffffff90811691161415610c4d57610bff85610794565b15610c3d57610c36866c0100000000000000000000000073ffffffffffffffffffffffffffffffffffffffff881602868686610f49565b9050610c4d565b610c4a868686868661107d565b90505b95945050505050565b6000543373ffffffffffffffffffffffffffffffffffffffff90811691161415610c8557610c8582348361112b565b5050565b600080543373ffffffffffffffffffffffffffffffffffffffff90811691161415610b4157610b3e8484846111d5565b600080543373ffffffffffffffffffffffffffffffffffffffff90811691161415610c4d57610c4a8686868686610f49565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600080546040517f9b487f3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301818152602484018a905260448401899052608484019190915260a060648401908152875160a485015287519290941693639b487f3f9387938b938b938b93879360c49091019060208601908083838f5b83811015610db5578181015183820152602001610d9d565b50505050905090810190601f168015610de25780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015610e0557600080fd5b505af1158015610e19573d6000803e3d6000fd5b505050506040513d6020811015610e2f57600080fd5b505195945050505050565b600080546040517f14cba00200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301818152898316602485015260448401899052608484019190915260a060648401908152875160a4850152875192909416936314cba0029387938b938b938b93879360c49091019060208601908083838f83811015610db5578181015183820152602001610d9d565b6020015190565b60003373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610f2a5733610f44565b60015473ffffffffffffffffffffffffffffffffffffffff165b905090565b600080546040517f9b487f3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483019081526024830189905260448301889052858216608484015260a060648401908152875160a485015287519290941693639b487f3f938b938b938b938b938b9360c49091019060208601908083838f5b83811015610ff7578181015183820152602001610fdf565b50505050905090810190601f1680156110245780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561104757600080fd5b505af115801561105b573d6000803e3d6000fd5b505050506040513d602081101561107157600080fd5b50519695505050505050565b600080546040517f14cba00200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301908152888216602484015260448301889052858216608484015260a060648401908152875160a4850152875192909416936314cba002938b938b938b938b938b9360c49091019060208601908083838f83811015610ff7578181015183820152602001610fdf565b60015460009073ffffffffffffffffffffffffffffffffffffffff161561115157600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841617905561119c30848661128d565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590506111cf816112a4565b50505050565b60008054604080517f7bcdc2f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201879052858116604483015291519190921691637bcdc2f091606480830192602092919082900301818787803b15801561125957600080fd5b505af115801561126d573d6000803e3d6000fd5b505050506040513d602081101561128357600080fd5b5051949350505050565b600080600083516020850186885af1949350505050565b60003d6000823e8180156112b6573d82f35b3d82fd00a165627a7a72305820dae0314376c2cb2392676359ba0f933515a2f5444869359b8553c63cbb8c66dd0029"
}