{
  "address": "0xd0b3e2c7ab77b9d156de01f8852709bf8dff9b5d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CrypsterToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-11\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor () public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address _to, uint256 _value)  external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n    function totalSupply() constant returns (uint256 totalSupply);\n\n    function balanceOf(address _owner) external constant returns (uint256 balance);\n\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract CrypsterToken is IERC20, Ownable, Pausable {\n    using SafeMath for uint256;\n\n    uint256 public _totalSupply = SafeMath.mul(1000000000, 1 ether);\n    uint256 public _remainingSupply;\n    \n    string public constant symbol = \"CRP\";\n    string public constant name = \"Crypster Token\";\n    uint8 public constant decimals = 18;\n   \n    address public owner;\n    address internal wallet;\n    \n    uint public rate;\n        \n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    \n     \n    constructor (address _wallet, uint _rate) public {\n        wallet = _wallet;\n        _remainingSupply = _totalSupply;\n        rate = _rate;\n    }   \n    \n     \n    function () public payable whenNotPaused{\n        buyTokens();\n    }\n    \n    function buyTokens() public payable whenNotPaused {\n        require(msg.value > 0);\n        \n        uint256 tokens = msg.value.mul(rate);\n        \n        require(tokens <= _remainingSupply);\n        \n        balances[msg.sender] =  balances[msg.sender].add(tokens);\n        _remainingSupply = _remainingSupply.sub(tokens);\n        wallet.transfer(msg.value);\n\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value && _value > 0);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        \n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _value &&\n            balances[_from] >= _value && _value > 0 );  \n        \n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function transferFunds(address[] _to , uint256[] _value) public onlyOwner whenNotPaused {\n    \n        for (uint256 i = 0; i < 300; i++) {\n        \n        _value[i] = SafeMath.mul(_value[i], 1 ether);\n    \n        require(_remainingSupply >= _value[i]);\n    \n        _remainingSupply = SafeMath.sub(_remainingSupply,_value[i]);\n\n        balances[_to[i]] = balances[_to[i]].add(_value[i]);\n    \n        }\n        \n    }\n\n    function setRate(uint _newRate) public onlyOwner {\n        rate = _newRate;\n    }\n    \n    function setWallet(address _newWallet) public onlyOwner  {\n        wallet = _newWallet;\n    }\n    \n    function totalSupply() constant returns (uint256 totalSupply) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n\n}",
  "bytecode": "608060405260008060146101000a81548160ff021916908315150217905550610047633b9aca00670de0b6b3a764000061011c640100000000026116d8176401000000009004565b60015534801561005657600080fd5b50604051604080620018ee8339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060015460028190555080600581905550505061015a565b60008060008414156101315760009150610153565b828402905082848281151561014257fe5b0414151561014f57600080fd5b8091505b5092915050565b611784806200016a6000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610143578063095ea7b3146101d357806318160ddd1461023857806323b872dd146102635780632c4e722e146102e8578063313ce5671461031357806334fcf437146103445780633eaaf86b146103715780633f4ba83a1461039c5780634603ae38146103b35780635c975abb1461045c57806370a082311461048b5780638456cb59146104e25780638da5cb5b146104f957806395d89b4114610550578063a64d9805146105e0578063a9059cbb1461060b578063d0febe4c14610670578063dd62ed3e1461067a578063deaa59df146106f1578063f2fde38b14610734575b600060149054906101000a900460ff1615151561013957600080fd5b610141610777565b005b34801561014f57600080fd5b506101586108e7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b5061021e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610920565b604051808215151515815260200191505060405180910390f35b34801561024457600080fd5b5061024d610a12565b6040518082815260200191505060405180910390f35b34801561026f57600080fd5b506102ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a1c565b604051808215151515815260200191505060405180910390f35b3480156102f457600080fd5b506102fd610da9565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b50610328610daf565b604051808260ff1660ff16815260200191505060405180910390f35b34801561035057600080fd5b5061036f60048036038101908080359060200190929190505050610db4565b005b34801561037d57600080fd5b50610386610e19565b6040518082815260200191505060405180910390f35b3480156103a857600080fd5b506103b1610e1f565b005b3480156103bf57600080fd5b5061045a6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610edd565b005b34801561046857600080fd5b506104716110e7565b604051808215151515815260200191505060405180910390f35b34801561049757600080fd5b506104cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110fa565b6040518082815260200191505060405180910390f35b3480156104ee57600080fd5b506104f7611143565b005b34801561050557600080fd5b5061050e611203565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055c57600080fd5b50610565611229565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105a557808201518184015260208101905061058a565b50505050905090810190601f1680156105d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105ec57600080fd5b506105f5611262565b6040518082815260200191505060405180910390f35b34801561061757600080fd5b50610656600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611268565b604051808215151515815260200191505060405180910390f35b610678610777565b005b34801561068657600080fd5b506106db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061145d565b6040518082815260200191505060405180910390f35b3480156106fd57600080fd5b50610732600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e4565b005b34801561074057600080fd5b50610775600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611583565b005b60008060149054906101000a900460ff1615151561079457600080fd5b6000341115156107a357600080fd5b6107b8600554346116d890919063ffffffff16565b905060025481111515156107cb57600080fd5b61081d81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461171690919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108758160025461173790919063ffffffff16565b600281905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156108e3573d6000803e3d6000fd5b5050565b6040805190810160405280600e81526020017f437279707374657220546f6b656e00000000000000000000000000000000000081525081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b600081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610ae9575081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610af55750600082115b1515610b0057600080fd5b610b5282600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173790919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c2482600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173790919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cf682600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461171690919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60055481565b601281565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0f57600080fd5b8060058190555050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7a57600080fd5b600060149054906101000a900460ff161515610e9557600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f3a57600080fd5b600060149054906101000a900460ff16151515610f5657600080fd5b600090505b61012c8110156110e257610f8e8282815181101515610f7657fe5b90602001906020020151670de0b6b3a76400006116d8565b8282815181101515610f9c57fe5b90602001906020020181815250508181815181101515610fb857fe5b9060200190602002015160025410151515610fd257600080fd5b610ff56002548383815181101515610fe657fe5b90602001906020020151611737565b60028190555061107b828281518110151561100c57fe5b9060200190602002015160066000868581518110151561102857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461171690919063ffffffff16565b60066000858481518110151561108d57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050610f5b565b505050565b600060149054906101000a900460ff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119e57600080fd5b600060149054906101000a900460ff161515156111ba57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f435250000000000000000000000000000000000000000000000000000000000081525081565b60025481565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156112b95750600082115b15156112c457600080fd5b61131682600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173790919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113ab82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461171690919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561153f57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115de57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561161a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008414156116ed576000915061170f565b82840290508284828115156116fe57fe5b0414151561170b57600080fd5b8091505b5092915050565b600080828401905083811015151561172d57600080fd5b8091505092915050565b60008083831115151561174957600080fd5b828403905080915050929150505600a165627a7a723058208a27a8d9106379150f012167bbe42cf7304b89c447f2e95cfb39b8ec00f00f5c00290000000000000000000000005dcd94a3fdef02e2280e63d23e55ab00ac589a8b0000000000000000000000000000000000000000000000000000000000000064",
  "constructorArguments": "0000000000000000000000005dcd94a3fdef02e2280e63d23e55ab00ac589a8b0000000000000000000000000000000000000000000000000000000000000064"
}