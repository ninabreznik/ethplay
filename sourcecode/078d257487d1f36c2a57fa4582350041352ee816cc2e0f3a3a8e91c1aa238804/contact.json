{
  "address": "0xbc8571ef3c6cb55eee4529b2866eed16e22a2aab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Moon_Token_Crowdsale",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-25\n*/\n\n/*\n    Moon Token for MoonTrader Platform and projects\n    More information at https://moontrader.io/\n\n    MoonTrader is a successor of the  MoonBot project, https://moon-bot.com/en/\n\n    Mail us to: [emailÂ protected] \n\n    Join the Telegram channel https://t.me/moontrader_news_en, \n    Visit BTT forum thread https://bitcointalk.org/index.php?topic=5143969 for more information.\n\n */\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.2;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.2;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        require(address(token).isContract());\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success);\n\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[emailÂ protected]Ï.com>, Eenae <[emailÂ protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\n// File: contracts/Crowdsale/Core/Crowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conforms\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale is ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // The token being sold\n    IERC20 private _token;\n\n    // Address where funds are collected\n    address payable private _wallet;\n\n    // How many token units a buyer gets per wei.\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n    // 1 wei will give you 1 unit, or 0.001 TOK.\n    uint256 private _rate;\n\n    // Amount of wei raised\n    uint256 private _weiRaised;\n\n    // Hardcap in tokens\n    uint256 private _supply;\n\n    // Amount of sold tokens\n    uint256 private _sold;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    /**\n     * Event for conversion rate changes logging\n     * @param rate New rate\n     */\n    event RateUpdated(uint256 indexed rate);\n\n    /**\n     * Events for crowdsale state tracking\n     */\n    event CrowdsalePaused();\n    event CrowdsaleUnpaused();\n\n    /**\n     * @param rate Number of token units a buyer gets per wei\n     * @dev The rate is the conversion between wei and the smallest and indivisible\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n     * @param wallet Address where collected funds will be forwarded to\n     * @param token Address of the token being sold\n     */\n    constructor (uint256 rate, uint256 supply, address payable wallet, IERC20 token) public {\n        require(rate > 0);\n        require(wallet != address(0));\n        require(address(token) != address(0));\n\n        _rate = rate;\n        _supply = supply;\n        _wallet = wallet;\n        _token = token;\n    }\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     * Note that other contracts will transfer funds with a base gas stipend\n     * of 2300, which is not enough to call buyTokens. Consider calling\n     * buyTokens directly when purchasing tokens from a contract.\n     */\n    function() external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @return the token being sold.\n     */\n    function token() public view returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @return amount of supplied tokens.\n     */\n    function supply() internal view returns (uint256) {\n        return _supply;\n    }\n\n    /**\n     * @return amount of sold tokens.\n     */\n    function sold() public view returns (uint256) {\n        return _sold;\n    }\n\n    /**\n     * @dev Increase amount of sold tokens by tokenAmount.\n     * @param tokenAmount Amount of last-purchased tokens\n     */\n    function _addSold(uint256 tokenAmount) internal {\n        _sold = _sold.add(tokenAmount);\n    }\n\n    /**\n     * @return the address where funds are collected.\n     */\n    function wallet() public view returns (address payable) {\n        return _wallet;\n    }\n\n    /**\n     * @return the number of token units a buyer gets per wei.\n     */\n    function rate() public view returns (uint256) {\n        return _rate;\n    }\n\n    /**\n     * @return the amount of wei raised.\n     */\n    function weiRaised() public view returns (uint256) {\n        return _weiRaised;\n    }\n\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * This function has a non-reentrancy guard, so it shouldn't be called by\n     * another `nonReentrant` function.\n     * @param beneficiary Recipient of the token purchase\n     */\n    function buyTokens(address beneficiary) public nonReentrant payable {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(beneficiary, weiAmount);\n\n        uint256 surplus = _countSurplus(weiAmount);\n        weiAmount -= surplus;\n\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n\n        // update state\n        _weiRaised = _weiRaised.add(weiAmount);\n\n        _processPurchase(beneficiary, tokens);\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n\n        _updatePurchasingState(beneficiary, weiAmount);\n\n        _forwardFunds(weiAmount);\n        _returnSurplus(surplus);\n\n        _postValidatePurchase(beneficiary, weiAmount);\n    }\n\n    /**\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n     *     super._preValidatePurchase(beneficiary, weiAmount);\n     *     require(weiRaised().add(weiAmount) <= cap);\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        require(beneficiary != address(0));\n        require(weiAmount != 0);\n        require(rate() > 0);\n        require(_supply >= _sold + _getTokenAmount(weiAmount)); //todo\n    }\n\n    /**\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n     * conditions are not met.\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n     * its tokens.\n     * @param beneficiary Address performing the token purchase\n     * @param tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n        _token.safeTransfer(beneficiary, tokenAmount);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n     * tokens.\n     * @param beneficiary Address receiving the tokens\n     * @param tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n        _deliverTokens(beneficiary, tokenAmount);\n        _addSold(tokenAmount);\n    }\n\n    /**\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n     * etc.)\n     * @param beneficiary Address receiving the tokens\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n        return weiAmount.mul(_rate);\n    }\n\n    /**\n     * @param tokenAmount amount of tokens to be converted in wei\n     * @return amount of wei to be spent on the purchase of tokenAmount tokens\n     */\n    function _getWeiAmount(uint256 tokenAmount) internal view returns (uint256) {\n        return tokenAmount.div(_rate);\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds(uint256 weiAmount) internal {\n        _wallet.transfer(weiAmount);\n    }\n\n    /*\n     * @dev Override to define the way in which surplus will be counted\n     * @param weiAmount Amount of wei sent by user\n     * @return surplus to be returned\n     */\n    function _countSurplus(uint256 weiAmount) internal returns (uint256){\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Override to change the way in which wei surplus returns to user\n     * @param weiAmount Amount of wei to be returned\n     */\n    function _returnSurplus(uint256 weiAmount) internal {\n        if (weiAmount > 0) {\n            msg.sender.transfer(weiAmount);\n        }\n    }\n\n    /**\n     * @dev Changes conversion rate. Override for extend the way in which rate changing affects on crowdsale\n     * @param newRate Value in tokens to be paid per 1 wei\n     */\n    function _changeRate(uint256 newRate) internal {\n        if ((newRate > 0) && (_rate == 0)) {\n            emit CrowdsaleUnpaused();\n        } else if (newRate == 0) {\n            emit CrowdsalePaused();\n        }\n\n        _rate = newRate;\n        emit RateUpdated(newRate);\n    }\n\n}\n\n// File: contracts/Crowdsale/Util/Role.sol\n\npragma solidity ^0.5.2;\n\nlibrary Role {\n\n    struct RoleContainer {\n        address[] bearer;\n    }\n\n    /**\n     * @param role role storage\n     * @return amount of accounts in this role\n     */\n    function total (RoleContainer storage role) internal view returns (uint count) {\n        for (uint i = 0; i < role.bearer.length; i++) {\n            count += (role.bearer[i] == address(0)) ? 0 : 1;\n        }\n        return count;\n    }\n\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(RoleContainer storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        address[] memory list = role.bearer;\n        uint len = role.bearer.length;\n        for (uint index = 0; index < len; index++) {\n            if (list[index] == account) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(RoleContainer storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer.push(account);\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(RoleContainer storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        removeFromList(role, account);\n    }\n\n    /**\n     * @dev Helper function. Iterates over array to find and\n       remove given account from it\n       @param role Role storage\n       @param account Expelled account\n     */\n    function removeFromList(RoleContainer storage role, address account) private {\n        address[] storage list = role.bearer;\n        uint len = role.bearer.length;\n\n        for (uint index = 0; index <= len; index++) {\n            if (list[index] != account) {\n                continue;\n            }\n            list[index] = list[len - 1];\n            delete list[len - 1];\n            return;\n        }\n    }\n}\n\n// File: contracts/Crowdsale/Util/Helpers.sol\n\npragma solidity ^0.5.2;\n\nlibrary Helpers {\n    function majority(uint total) internal pure returns (uint) {\n        return uint(total / 2) + 1;\n    }\n\n    function idFromAddress(address addr) internal pure returns (bytes32) {\n        return keccak256(abi.encode(addr));\n    }\n\n    function idFromUint256(uint256 x) internal pure returns (bytes32) {\n        return keccak256(abi.encode(x));\n    }\n\n    function mixId(address addr, uint256 x) internal pure returns (bytes32) {\n        return keccak256(abi.encode(addr, x));\n    }\n}\n\n// File: contracts/Crowdsale/Util/Votings.sol\n\npragma solidity ^0.5.2;\n\n\nlibrary Votings {\n\n    struct Voting {\n        mapping(bytes32 => address[]) process;\n    }\n\n    /**\n     * @dev Votes and check if voting is completed. If vote is completed - deletes it\n     * @param voting Storage\n     * @param index Of voting process\n     * @param issuer Voter\n     * @param required Amount of votes for this process to be successful\n     * @return (is voting completed?)\n     */\n    function voteAndCheck(Voting storage voting,\n        bytes32 index, address issuer, uint required) internal returns (bool)\n    {\n        vote(voting, index, issuer);\n        return isComplete(voting, index, required);\n    }\n\n    /**\n     * @dev Check if voting is completed. If vote is completed - deletes it\n     * @param voting Storage\n     * @param index Of voting process\n     * @param required Amount of votes for this process to be successful\n     * @return (is voting completed?)\n     */\n    function isComplete(Voting storage voting,\n        bytes32 index, uint required) internal returns (bool)\n    {\n        if (voting.process[index].length < required) {\n            return false;\n        }\n\n        delete voting.process[index];\n        return true;\n    }\n\n\n\n    /**\n     * @dev Vote\n     * @param voting Storage\n     * @param index Of voting process\n     * @param issuer Voter\n     */\n    function vote(Voting storage voting,\n        bytes32 index, address issuer) internal\n    {\n        require(!hadVoted(voting, index, issuer));\n        voting.process[index].push(issuer);\n    }\n\n    /**\n     * @dev Check of issuer had voted on this process\n     * @param voting Storage\n     * @param index Of voting process\n     * @param issuer Voter\n     * @return bool\n     */\n    function hadVoted(Voting storage voting,\n        bytes32 index, address issuer) internal view returns (bool)\n    {\n        address[] storage _process = voting.process[index];\n\n        for (uint ind = 0; ind < _process.length; ind++) {\n            if (_process[ind] == issuer) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n// File: contracts/Crowdsale/Roles/AdminRole.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n\ncontract AdminRole {\n    using Role for Role.RoleContainer;\n    using Votings for Votings.Voting;\n\n    //admin storage\n    Role.RoleContainer private _admins;\n\n    //voting storage\n    Votings.Voting private _addVoting;\n    Votings.Voting private _expelVoting;\n\n    /**\n     * @dev events for \"add admin\" action logging\n     * @param account New admin\n     */\n    event AdminAdded(address indexed account);\n\n    /**\n     * @dev events for \"expel admin\" action logging\n     * @param account Expelled admin\n     */\n    event AdminRemoved(address indexed account);\n\n    modifier AdminOnly() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n    modifier WhileSetup() {\n        require(isAdmin(msg.sender));\n        require(countAdmins() == 1);\n        _;\n    }\n\n    constructor () internal {\n        _add(msg.sender);\n    }\n\n    /**\n     * @param account to check\n     * @return is this account contains in admin list\n     */\n    function isAdmin(address account) public view returns (bool) {\n        return _admins.has(account);\n    }\n\n    /**\n     * @return list of admins\n     */\n    function listAdmins() public view returns (address[] memory) {\n        return _admins.bearer;\n    }\n\n    /**\n     * @return amount of admins\n     */\n    function countAdmins() public view returns (uint) {\n        return _admins.total();\n    }\n\n    /**\n     * @dev initialize admin list while setup-stage of sale\n     * @param defaultAdmins list of default admins\n     */\n    function initAdmins(address[] memory defaultAdmins) WhileSetup internal {\n        for (uint256 index = 0; index < defaultAdmins.length; index++) {\n            _add(defaultAdmins[index]);\n        }\n    }\n\n    /**\n     * @dev Vote and append given account to the admin list after consensus\n     * @param account Account to be appended\n     */\n    function addAdmin(address account) AdminOnly public {\n        if (_addAdminVoting(account)) {\n            _add(account);\n        }\n    }\n\n    /**\n     * @dev Vote and remove given account from admin list after consensus\n     * @param account Account to be removed\n     */\n    function expelAdmin(address account) AdminOnly public {\n        if (_expelAdminVoting(account)) {\n            _expel(account);\n        }\n    }\n\n\n    /**\n     * @dev require (N/2)+1 admins to be agreed with the add proposal\n     * @param account Account to be appended\n     * @return do (N/2)+1  admins agreed with the proposal?\n     */\n    function _addAdminVoting(address account) private returns (bool) {\n        return _addVoting.voteAndCheck(\n            Helpers.idFromAddress(account),\n            msg.sender,\n            Helpers.majority(countAdmins())\n        );\n    }\n\n    /**\n     * @dev require (N/2)+1 admins to be agreed with the removal proposal\n     * @param account Account to be removed\n     * @return do (N/2)+1  admins agreed with the proposal?\n     */\n    function _expelAdminVoting(address account) private returns (bool) {\n        require(msg.sender != account);\n        return _expelVoting.voteAndCheck(\n            Helpers.idFromAddress(account),\n            msg.sender,\n            Helpers.majority(countAdmins())\n        );\n    }\n\n\n    /**\n     * @dev appends given account to admin list\n     * @param account Account to be appended\n     */\n    function _add(address account) private {\n        _admins.add(account);\n        emit AdminAdded(account);\n    }\n\n    /**\n     * @dev removes given account to admin list\n     * @param account Account to be excluded\n     */\n    function _expel(address account) private {\n        _admins.remove(account);\n        emit AdminRemoved(account);\n    }\n\n\n}\n\n// File: contracts/Crowdsale/Functionalities/InvestOnBehalf.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n\ncontract InvestOnBehalf is AdminRole, Crowdsale {\n    using Votings for Votings.Voting;\n\n    // Current vote processes\n    Votings.Voting private _votings;\n\n    /**\n     * Event for investOnBehalf actions logging\n     * @param account Transfer target\n     * @param tokens Amount of transferred tokens\n     */\n    event InvestedOnBehalf(address indexed account, uint256 indexed tokens);\n\n    /**\n     * @dev require (N/2)+1 admins to be agreed with the proposal\n     * @param account Transfer target\n     * @param tokens Amount of tokens to be transferred\n     * @return do all admins agreed with the proposal?\n     */\n    function consensus(address account, uint256 tokens) private returns (bool) {\n        return _votings.voteAndCheck(Helpers.mixId(account, tokens), msg.sender, Helpers.majority(countAdmins()));\n    }\n\n\n    /*\n     * @dev Vote and add X tokens to the user balance after consensus\n     * @param to Transfer target\n     * @param tokens Amount of tokens to be transferred\n     */\n    function investOnBehalf(address to, uint256 tokens) AdminOnly public {\n        if (consensus(to, tokens)) {\n            _processPurchase(to, tokens * 1e18);\n            emit InvestedOnBehalf(to, tokens * 1e18);\n        }\n    }\n}\n\n// File: contracts/Crowdsale/Functionalities/MilestonedCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\ncontract MilestonedCrowdsale is AdminRole, Crowdsale {\n    event MilestoneReached(uint256 indexed milestone);\n\n    /**\n     * @dev Container for milestone ranges\n     * @param start Milestone start timestamp\n     * @param finish Milestone finish timestamp\n     * @param fired\n     */\n    struct Milestone {\n        uint256 start;\n        uint256 finish;\n        bool fired;\n    }\n\n    Milestone[] private _milestones;\n\n    /**\n     * @dev Creates single milestone in storage\n     * @param start Timestamp from\n     * @param finish Timestamp to\n     */\n    function _newMilestone(uint256 start, uint256 finish) private {\n        require(start < finish);\n        _milestones.push(Milestone(start, finish, false));\n    }\n\n    /**\n     * @dev Initialize milestone storage\n     * @param milestones Timerow of timestamps\n     */\n    function initMilestones(uint256[] memory milestones) WhileSetup internal {\n        for (uint256 index = 0; index < milestones.length - 1; index++) {\n            _newMilestone(milestones[index], milestones[index + 1]);\n        }\n    }\n\n    /**\n     * @dev Extends parent with counting surplus from milestones\n     * @param weiAmount Amount of wei received\n     * @return surplus above the last milestone\n     */\n    function _countSurplus(uint256 weiAmount) internal returns (uint256){\n        return _getMilestoneOverhead(weiAmount);\n    }\n\n    /**\n     * @dev Extends parent with pausing crowdsale if any surplus is returned\n     * @param weiAmount Amount of surplus wei\n     */\n    function _returnSurplus(uint256 weiAmount) internal {\n        super._returnSurplus(weiAmount);\n\n        if (weiAmount > 0) {\n            _changeRate(0);\n        }\n    }\n\n    /**\n     * @dev Iterates over milestones to make sure\n     * that current transaction hasn't passed current milestone.\n     * @param weiAmount Amount of wei received\n     * @return If milestone has been reached, returns amount of wei above\n     * milestone finish-line\n     */\n    function _getMilestoneOverhead(uint256 weiAmount) private returns (uint256){\n        for (uint256 index = 0; index < _milestones.length; index++) {\n            //every milestone could be reached only once\n            if (_milestones[index].fired) {\n                continue;\n            }\n\n            uint256 start = _milestones[index].start;\n            uint256 finish = _milestones[index].finish;\n\n            uint256 surplus = _checkStage(start, finish, weiAmount);\n            if (surplus == 0) {\n                continue;\n            }\n\n            _milestones[index].fired = true;\n            emit MilestoneReached(finish);\n\n            return surplus;\n        }\n    }\n\n    /**\n     * @param from Milestone start\n     * @param to Milestone finish\n     * @return surplus wei amount above the milestone\n     */\n    function _checkStage(uint256 from, uint256 to, uint256 weiAmount) private view returns (uint256) {\n        uint256 afterPayment = sold() + _getTokenAmount(weiAmount);\n        bool inRange = (sold() >= from) && (sold() < to);\n\n        if (inRange && (afterPayment >= to)) {\n            return _getWeiAmount(afterPayment - to) + 1;\n        }\n    }\n}\n\n// File: contracts/Crowdsale/Functionalities/UpdatableRateCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n\n\ncontract UpdatableRateCrowdsale is AdminRole, Crowdsale {\n    using Votings for Votings.Voting;\n\n    // Current vote processes\n    Votings.Voting private _votings;\n\n    /**\n     * @dev require (N/2)+1 admins to be agreed with the proposal\n     * @param rate New conversion rate\n     * @return do (N/2)+1 admins agreed with the proposal?\n     */\n    function consensus(uint256 rate) private returns (bool) {\n        return _votings.voteAndCheck(Helpers.idFromUint256(rate), msg.sender, Helpers.majority(countAdmins()));\n    }\n\n    /**\n     * @dev Vote and apply new conversion rates after consensus\n     */\n    function changeRate(uint256 rate) AdminOnly public {\n        if (consensus(rate)) {\n            _changeRate(rate);\n        }\n    }\n}\n\n// File: contracts/Crowdsale/Core/Emission/MintedCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title MintedCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n * Token ownership should be transferred to MintedCrowdsale for minting.\n */\ncontract MintedCrowdsale is Crowdsale {\n    /**\n     * @dev Overrides delivery by minting tokens upon purchase.\n     * @param beneficiary Token purchaser\n     * @param tokenAmount Number of tokens to be minted\n     */\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n        // Potentially dangerous assumption about the type of the token.\n        require(ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\n    }\n}\n\n// File: contracts/Crowdsale/Core/Validation/SoftcappedCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\ncontract SoftcappedCrowdsale is AdminRole, Crowdsale {\n    // minimum amount of tokens to be sold\n    uint256 private _goal;\n\n    // minimum amount of wei to be accepted\n    // from a single user before softcap collected\n    uint256 private _minimalPay = 0;\n\n    /**\n     * @dev Constructor, creates RefundEscrow.\n     * @param goal Funding goal\n     */\n    constructor (uint256 goal) public {\n        require(goal > 0);\n        _goal = goal;\n    }\n\n    /**\n     * @return minimum amount of tokens to be sold.\n     */\n    function goal() public view returns (uint256) {\n        return _goal;\n    }\n\n    /**\n     * @return minimum amount of wei to be paid until softcap is reached.\n     */\n    function minimalPay() public view returns (uint256) {\n        return goalReached() ? 0 : _minimalPay;\n    }\n\n    /**\n     * @return minimum amount of wei to be paid until softcap is reached.\n     */\n    function setMinimalPay(uint256 weiAmount) WhileSetup internal {\n        _minimalPay = weiAmount;\n    }\n\n    /**\n     * @dev Checks whether funding goal was reached.\n     * @return Whether funding goal was reached\n     */\n    function goalReached() public view returns (bool) {\n        return sold() >= _goal;\n    }\n\n    /**\n     * @dev Extends parent with additional wei amount check sent by user\n     * @param beneficiary Token purchaser\n     * @param weiAmount Amount of received wei\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        super._preValidatePurchase(beneficiary, weiAmount);\n\n        if (!goalReached() && _minimalPay != 0) {\n            require(weiAmount >= _minimalPay);\n        }\n    }\n\n}\n\n// File: contracts/Crowdsale/Core/Validation/TimedCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale closes if softcap not reached within a time frame.\n */\ncontract TimedCrowdsale is SoftcappedCrowdsale {\n    using SafeMath for uint256;\n\n    uint256 private _openingTime;\n    uint256 private _softcapDeadline;\n    uint256 private _closingTime;\n\n    /**\n     * Event for crowdsale extending\n     * @param newClosingTime new closing time\n     * @param prevClosingTime old closing time\n     */\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\n\n    /**\n     * @dev Reverts if not in crowdsale time range.\n     */\n    modifier onlyWhileOpen {\n        require(!hasClosed());\n        _;\n    }\n\n    /**\n     * @dev Constructor, takes crowdsale opening and closing times.\n     * @param openingTime Crowdsale opening time\n     * @param softcapDeadline Crowdsale closing time\n     */\n    constructor (uint256 openingTime, uint256 softcapDeadline, uint256 closingTime) public {\n        // solhint-disable-next-line not-rely-on-time\n        //todo require(openingTime >= block.timestamp);\n        require(softcapDeadline > openingTime);\n        require(closingTime > softcapDeadline);\n\n        _openingTime = openingTime;\n        _softcapDeadline = softcapDeadline;\n        _closingTime = closingTime;\n    }\n\n    /**\n     * @return the crowdsale opening time.\n     */\n    function openingTime() public view returns (uint256) {\n        return _openingTime;\n    }\n\n    /**\n     * @return the crowdsale softcap deadline.\n     */\n    function softcapDeadline() public view returns (uint256) {\n        return _softcapDeadline;\n    }\n\n    /**\n     * @return the crowdsale closing time.\n     */\n    function closingTime() public view returns (uint256) {\n        return _closingTime;\n    }\n\n\n    /**\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n     * @return Whether crowdsale period has elapsed and goal hasn't been reached\n     */\n    function hasClosed() public view returns (bool) {\n        // solhint-disable-next-line not-rely-on-time\n        return ((block.timestamp > _softcapDeadline) && !goalReached()) ||\n        ((block.timestamp > _closingTime) && goalReached());\n    }\n\n    /**\n     * @dev Extend parent behavior requiring to be within contributing period\n     * @param beneficiary Token purchaser\n     * @param weiAmount Amount of wei contributed\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n        super._preValidatePurchase(beneficiary, weiAmount);\n    }\n\n\n}\n\n// File: contracts/Crowdsale/Core/Distribution/FinalizableCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of TimedCrowdsale with a one-off finalization action, where one\n * can do extra work after finishing.\n */\ncontract FinalizableCrowdsale is AdminRole, TimedCrowdsale {\n    using SafeMath for uint256;\n\n    bool private _finalized;\n\n    event CrowdsaleFinalized();\n\n    constructor () internal {\n        _finalized = false;\n    }\n\n    /**\n     * @return true if the crowdsale is finalized, false otherwise.\n     */\n    function finalized() public view returns (bool) {\n        return _finalized;\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() AdminOnly public {\n        require(!_finalized);\n        require(hasClosed() || goalReached());\n\n        _finalized = true;\n\n        _finalization();\n        emit CrowdsaleFinalized();\n    }\n\n    /**\n     * @dev Can be overridden to add finalization logic. The overriding function\n     * should call super._finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function _finalization() internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Secondary.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Secondary\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\n */\ncontract Secondary {\n    address private _primary;\n\n    event PrimaryTransferred(\n        address recipient\n    );\n\n    /**\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\n     */\n    constructor () internal {\n        _primary = msg.sender;\n        emit PrimaryTransferred(_primary);\n    }\n\n    /**\n     * @dev Reverts if called from any account other than the primary.\n     */\n    modifier onlyPrimary() {\n        require(msg.sender == _primary);\n        _;\n    }\n\n    /**\n     * @return the address of the primary.\n     */\n    function primary() public view returns (address) {\n        return _primary;\n    }\n\n    /**\n     * @dev Transfers contract to a new primary.\n     * @param recipient The address of new primary.\n     */\n    function transferPrimary(address recipient) public onlyPrimary {\n        require(recipient != address(0));\n        _primary = recipient;\n        emit PrimaryTransferred(_primary);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/payment/escrow/Escrow.sol\n\npragma solidity ^0.5.2;\n\n\n\n /**\n  * @title Escrow\n  * @dev Base escrow contract, holds funds designated for a payee until they\n  * withdraw them.\n  * @dev Intended usage: This contract (and derived escrow contracts) should be a\n  * standalone contract, that only interacts with the contract that instantiated\n  * it. That way, it is guaranteed that all Ether will be handled according to\n  * the Escrow rules, and there is no need to check for payable functions or\n  * transfers in the inheritance tree. The contract that uses the escrow as its\n  * payment method should be its primary, and provide public methods redirecting\n  * to the escrow's deposit and withdraw.\n  */\ncontract Escrow is Secondary {\n    using SafeMath for uint256;\n\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n\n    mapping(address => uint256) private _deposits;\n\n    function depositsOf(address payee) public view returns (uint256) {\n        return _deposits[payee];\n    }\n\n    /**\n     * @dev Stores the sent amount as credit to be withdrawn.\n     * @param payee The destination address of the funds.\n     */\n    function deposit(address payee) public onlyPrimary payable {\n        uint256 amount = msg.value;\n        _deposits[payee] = _deposits[payee].add(amount);\n\n        emit Deposited(payee, amount);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a payee.\n     * @param payee The address whose funds will be withdrawn and transferred to.\n     */\n    function withdraw(address payable payee) public onlyPrimary {\n        uint256 payment = _deposits[payee];\n\n        _deposits[payee] = 0;\n\n        payee.transfer(payment);\n\n        emit Withdrawn(payee, payment);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title ConditionalEscrow\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\n */\ncontract ConditionalEscrow is Escrow {\n    /**\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\n     * implemented by derived contracts.\n     * @param payee The destination address of the funds.\n     */\n    function withdrawalAllowed(address payee) public view returns (bool);\n\n    function withdraw(address payable payee) public {\n        require(withdrawalAllowed(payee));\n        super.withdraw(payee);\n    }\n}\n\n// File: contracts/Crowdsale/Core/Independent/RefundEscrow.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title RefundEscrow\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\n * parties.\n * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\n * @dev The primary account (that is, the contract that instantiates this\n * contract) may deposit, close the deposit period, and allow for either\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\n * with RefundEscrow will be made through the primary contract. See the\n * RefundableCrowdsale contract for an example of RefundEscrowâs use.\n */\ncontract RefundEscrow is ConditionalEscrow {\n    enum State { Active, Refunding, Closed }\n\n    event RefundsClosed();\n    event RefundsEnabled();\n\n    State private _state;\n    address payable private _beneficiary;\n\n    /**\n     * @dev Constructor.\n     * @param beneficiary The beneficiary of the deposits.\n     */\n    constructor (address payable beneficiary) public {\n        require(beneficiary != address(0));\n        _beneficiary = beneficiary;\n        _state = State.Active;\n    }\n\n    /**\n     * @return the current state of the escrow.\n     */\n    function state() public view returns (State) {\n        return _state;\n    }\n\n    /**\n     * @return the beneficiary of the escrow.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @dev Stores funds that may later be refunded.\n     * @param refundee The address funds will be sent to if a refund occurs.\n     */\n    function deposit(address refundee) public payable {\n        require(_state == State.Active);\n        super.deposit(refundee);\n    }\n\n    /**\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\n     * further deposits.\n     */\n    function close() public onlyPrimary {\n        require(_state == State.Active);\n        _state = State.Closed;\n        emit RefundsClosed();\n    }\n\n    /**\n     * @dev Allows for refunds to take place, rejecting further deposits.\n     */\n    function enableRefunds() public onlyPrimary {\n        require(_state == State.Active);\n        _state = State.Refunding;\n        emit RefundsEnabled();\n    }\n\n    /**\n     * @dev Withdraws the beneficiary's funds.\n     */\n    function beneficiaryWithdraw() public onlyPrimary {\n        _beneficiary.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Withdraws the beneficiary's funds.\n     */\n    function customWithdraw(uint256 etherAmount, address payable account) public onlyPrimary {\n        account.transfer(etherAmount);\n    }\n\n    /**\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\n     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\n     */\n    function withdrawalAllowed(address) public view returns (bool) {\n        return _state == State.Refunding;\n    }\n}\n\n// File: contracts/Crowdsale/Core/Distribution/RefundableCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n\n\n/**\n * @title RefundableCrowdsale\n * @dev Extension of FinalizableCrowdsale contract that adds a funding goal, and the possibility of users\n * getting a refund if goal is not met.\n *\n * Deprecated, use RefundablePostDeliveryCrowdsale instead. Note that if you allow tokens to be traded before the goal\n * is met, then an attack is possible in which the attacker purchases tokens from the crowdsale and when they sees that\n * the goal is unlikely to be met, they sell their tokens (possibly at a discount). The attacker will be refunded when\n * the crowdsale is finalized, and the users that purchased from them will be left with worthless tokens.\n */\ncontract RefundableCrowdsale is FinalizableCrowdsale {\n    using SafeMath for uint256;\n    using Votings for Votings.Voting;\n\n    event FundsWithdraw(uint256 indexed etherAmount, address indexed account);\n\n    // Current vote processes\n    Votings.Voting private _votings;\n\n    // refund escrow used to hold funds while crowdsale is running\n    RefundEscrow private _escrow;\n\n    /**\n     * @dev Constructor, creates RefundEscrow.\n     */\n    constructor () public {\n        _escrow = new RefundEscrow(wallet());\n    }\n\n    /**\n     * @dev Investors can claim refunds here if crowdsale is unsuccessful\n     * @param refundee Whose refund will be claimed.\n     */\n    function claimRefund(address payable refundee) public {\n        require(finalized());\n        require(!goalReached());\n\n        _escrow.withdraw(refundee);\n    }\n\n    function beneficiaryWithdraw(uint256 etherAmount, address payable account) AdminOnly public {\n        if (goalReached() && consensus(etherAmount, address(account))) {\n            _escrow.customWithdraw(etherAmount * 1e18, account);\n            emit FundsWithdraw(etherAmount * 1e18, address(account));\n        }\n    }\n\n    /**\n     * @dev escrow finalization task, called when finalize() is called\n     */\n    function _finalization() internal {\n        if (goalReached()) {\n            _escrow.close();\n            _escrow.beneficiaryWithdraw();\n        } else {\n            uint256 day = 86400;\n            require(block.timestamp > softcapDeadline() + day);\n            _escrow.enableRefunds();\n        }\n\n        super._finalization();\n    }\n\n    /**\n     * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\n     */\n    function _forwardFunds(uint256 weiAmount) internal {\n        _escrow.deposit.value(weiAmount)(msg.sender);\n    }\n\n    /**\n   * @dev require (N/2)+1 admins to be agreed with the proposal\n   * @return do all admins agreed with the proposal?\n   */\n    function consensus(uint256 etherAmount, address account) private returns (bool) {\n        return _votings.voteAndCheck(\n            Helpers.mixId(account, etherAmount),\n            msg.sender,\n            Helpers.majority(countAdmins())\n        );\n    }\n}\n\n// File: contracts/Crowdsale/Core/Distribution/PostDeliveryCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title PostDeliveryCrowdsale\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\n */\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\n    using SafeMath for uint256;\n\n    /**\n    * @dev contains virtual balances.\n    * All balance records are written\n    * here until softcap is reached\n    */\n    mapping(address => uint256) private _balances;\n\n    /**\n    * @dev list of backers with virtual balances\n    */\n    address[] private _backers;\n\n    /**\n     * @dev Withdraw tokens only after crowdsale ends.\n     * @param beneficiary Whose tokens will be withdrawn.\n     */\n    function withdrawTokens(address beneficiary) public {\n        require(goalReached());\n        uint256 amount = _balances[beneficiary];\n        require(amount > 0);\n        _balances[beneficiary] = 0;\n        _deliverTokens(beneficiary, amount);\n    }\n\n    /**\n     * @return the balance of an account.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function backers() public view returns (address[] memory) {\n        return _backers;\n    }\n\n    /**\n     * @dev Overrides parent by storing balances instead of issuing tokens right away.\n     * @param beneficiary Token purchaser\n     * @param tokenAmount Amount of tokens purchased\n     */\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n        if (!goalReached()) {\n            _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\n            _backers.push(beneficiary);\n            _addSold(tokenAmount);\n            return;\n        }\n        super._processPurchase(beneficiary, tokenAmount);\n    }\n}\n\n// File: contracts/Crowdsale/Core/Distribution/RefundablePostDeliveryCrowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/**\n * @title RefundablePostDeliveryCrowdsale\n * @dev Extension of RefundableCrowdsale contract that only delivers the tokens\n * once the crowdsale has the goal met, preventing refunds to be issued\n * to token holders.\n */\ncontract RefundablePostDeliveryCrowdsale is RefundableCrowdsale, PostDeliveryCrowdsale {\n    function withdrawTokens(address beneficiary) public {\n        require(goalReached());\n        super.withdrawTokens(beneficiary);\n    }\n}\n\n// File: contracts/Crowdsale/Moon_Token_Crowdsale.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n\n\n\n/*\n    Moon Token for MoonTrader Platform and projects\n    More information at https://moontrader.io/\n\n    MoonTrader is a successor of the  MoonBot project, https://moon-bot.com/en/\n\n    Mail us to: [emailÂ protected] \n\n    Join the Telegram channel https://t.me/moontrader_news_en, \n    Visit BTT forum thread https://bitcointalk.org/index.php?topic=5143969 for more information.\n\n */\n\ncontract Moon_Token_Crowdsale is\nUpdatableRateCrowdsale,\nMilestonedCrowdsale,\nInvestOnBehalf,\nMintedCrowdsale,\nRefundablePostDeliveryCrowdsale\n{\n    constructor(\n        ERC20Mintable _token,\n        address payable _wallet,\n\n        uint256 _rate,\n        uint256 _supply,\n        uint256 _softcap,\n\n        uint256 _open,\n        uint256 _softline,\n        uint256 _close\n    )\n    public\n    Crowdsale(_rate, _supply, _wallet, _token)\n    TimedCrowdsale(_open, _softline, _close)\n    SoftcappedCrowdsale(_softcap){\n    }\n\n    /**\n     * @dev finish contract initialization. Made because of \"stack size\".\n     * @param _minimalPay amount in wei\n     * @param admins list\n     * @param milestones list\n     */\n    function finishSetup(\n        uint256 _minimalPay,\n        uint256[] memory milestones,\n        address[] memory admins\n    ) WhileSetup public {\n        setMinimalPay(_minimalPay);\n        initMilestones(milestones);\n        initAdmins(admins);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000d47a07070bd8a670407038941318783cf2070a1e000000000000000000000000d0efb8e61384601e0b119cf8d2501c3144e0648800000000000000000000000000000000000000000000000000000000000000fd000000000000000000000000000000000000000000027b46536c66c8e300000000000000000000000000000000000000000000000001287626ee52197b000000000000000000000000000000000000000000000000000000000000005cdb5680000000000000000000000000000000000000000000000000000000005d38f100000000000000000000000000000000000000000000000000000000005db23b00"
}