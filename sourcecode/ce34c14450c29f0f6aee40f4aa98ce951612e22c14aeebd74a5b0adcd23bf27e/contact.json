{
  "address": "0x8914d13337b05f2a996bcc75d5bb64a73dfe805a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-21\n*/\n\npragma solidity 0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    mapping(address => bool) owners;\n\n    event OwnerAdded(address indexed newOwner);\n    event OwnerDeleted(address indexed owner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owners[msg.sender] = true;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(msg.sender));\n        _;\n    }\n\n    function addOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0));\n        owners[_newOwner] = true;\n        emit OwnerAdded(_newOwner);\n    }\n\n    function delOwner(address _owner) external onlyOwner {\n        require(owners[_owner]);\n        owners[_owner] = false;\n        emit OwnerDeleted(_owner);\n    }\n\n    function isOwner(address _owner) public view returns (bool) {\n        return owners[_owner];\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, Ownable{\n    using SafeMath for uint256;\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n    mapping(address => uint256) balances;\n\n    uint256 _totalSupply;\n\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value)  public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)  public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n\n    function burn(uint256 value) onlyOwner external {\n        _totalSupply = _totalSupply.sub(value);\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        emit Transfer(msg.sender, address(0), value);\n    }\n\n}\n\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract ErbNToken is StandardToken {\n    string public constant name = \"Erbauer Netz\"; // solium-disable-line uppercase\n    string public constant symbol = \"ErbN\"; // solium-disable-line uppercase\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\n\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n\n\n    constructor() public {\n        _totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n    }\n\n}\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n    internal\n    {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        require(token.approve(spender, value));\n    }\n}\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n\n    // The token being sold\n    ERC20 public token;\n\n    // Address where funds are collected\n    address public wallet;\n\n    // How many token units a buyer gets per wei.\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\n    // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n    // 1 wei will give you 1 unit, or 0.001 TOK.\n    uint256 public rate;\n    uint256 public preSaleRate;\n    uint256 minPurchase = 10000000000000000;\n    uint256 tokenSold;\n\n    // Amount of wei raised\n    uint256 public weiRaised;\n\n    bool public isPreSale = false;\n    bool public isICO = false;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    event Finalized();\n    /**\n     * @dev Reverts if not in crowdsale time range.\n     */\n    modifier onlyWhileOpen {\n        // solium-disable-next-line security/no-block-members\n        require(isPreSale || isICO);\n        _;\n    }\n\n\n    constructor(uint256 _rate, uint256 _preSaleRate, address _wallet, address _token) public {\n        require(_rate > 0);\n        require(_preSaleRate > 0);\n        require(_wallet != address(0));\n        require(_token != address(0));\n\n        preSaleRate = _preSaleRate;\n        rate = _rate;\n        wallet = _wallet;\n        token = ERC20(_token);\n    }\n\n    // -----------------------------------------\n    // Crowdsale external interface\n    // -----------------------------------------\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * @param _beneficiary Address performing the token purchase\n     */\n    function buyTokens(address _beneficiary) public payable {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(_beneficiary, weiAmount);\n\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n        _postValidatePurchase(tokens);\n\n        // update state\n        tokenSold = tokenSold.add(tokens);\n\n        _processPurchase(_beneficiary, tokens);\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n\n        _forwardFunds();\n    }\n\n\n    function manualSale(address _beneficiary, uint256 _amount) onlyOwner external {\n        _processPurchase(_beneficiary, _amount);\n    }\n\n    // -----------------------------------------\n    // Internal interface (extensible)\n    // -----------------------------------------\n\n    /**\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n     * @param _beneficiary Address performing the token purchase\n     * @param _weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) onlyWhileOpen internal view {\n        require(_beneficiary != address(0));\n        require(_weiAmount >= minPurchase);\n    }\n\n\n    function _postValidatePurchase(uint256 _tokens) internal view {\n        if (isPreSale) {\n            require(tokenSold.add(_tokens) <= 200000000 ether);\n        }\n\n    }\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n     * @param _beneficiary Address performing the token purchase\n     * @param _tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n        token.safeTransfer(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n     * @param _beneficiary Address receiving the tokens\n     * @param _tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param _weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        if (isPreSale) return _weiAmount.mul(preSaleRate);\n        if (isICO) return _weiAmount.mul(rate);\n        return 0;\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() onlyOwner public {\n        finalization();\n        emit Finalized();\n    }\n\n    /**\n     * @dev Can be overridden to add finalization logic. The overriding function\n     * should call super.finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function finalization() internal {\n        token.safeTransfer(msg.sender, token.balanceOf(this));\n    }\n\n\n    function setRate(uint _rate) onlyOwner external {\n        rate = _rate;\n    }\n\n    function setPreSaleRate(uint _rate) onlyOwner external {\n        preSaleRate = _rate;\n    }\n\n\n    function setPresaleStatus(bool _status) onlyOwner external {\n        isPreSale = _status;\n    }\n\n    function setICOStatus(bool _status) onlyOwner external {\n        isICO = _status;\n    }\n\n    function setMinPurchase(uint _val) onlyOwner external {\n        minPurchase = _val;\n    }\n}\n\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock is Ownable {\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    // ERC20 basic token contract being held\n    ERC20 public token;\n    uint releaseTime;\n\n    mapping(address => uint256) public balances;\n\n    constructor(ERC20 _token) public {\n        token = _token;\n        releaseTime = now + 375 days;\n    }\n\n    function addTokens(address _owner, uint256 _value) onlyOwner external returns (bool) {\n        require(_owner != address(0));\n        //SEND tokens to contract address!!!\n        //token.safeTransferFrom(msg.sender, this, _value);\n        balances[_owner] = balances[_owner].add(_value);\n        return true;\n    }\n\n\n    function getTokens() external {\n        require(balances[msg.sender] > 0);\n        require(releaseTime < now);\n\n        token.safeTransfer(msg.sender, balances[msg.sender]);\n        balances[msg.sender] = 0;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setPreSaleRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"delOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPresaleStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setICOStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setMinPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_preSaleRate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerDeleted\",\"type\":\"event\"}]",
  "bytecode": "6080604052662386f26fc100006005556008805461ffff1916905534801561002657600080fd5b506040516080806109fc83398101604090815281516020808401518385015160609095015133600090815292839052938220805460ff191660011790559193919290841161007357600080fd5b6000831161008057600080fd5b600160a060020a038216151561009557600080fd5b600160a060020a03811615156100aa57600080fd5b60049290925560039290925560028054600160a060020a03938416600160a060020a0319918216179091556001805492909316911617905561090b806100f16000396000f3006080604052600436106100fb5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632c4e722e81146101065780632f54bf6e1461012d57806334fcf43714610162578063352ff2bd1461017a5780634042b66f146101925780634bb278f3146101a75780634ced4734146101bc578063521eb273146101d15780637065cb481461020257806373984188146102235780637ee55c97146102445780638895283f146102595780639dc27fe314610273578063d833dbe91461028d578063e8307d00146102a2578063ec8ac4d8146102ba578063f1bab410146102ce578063fc0c546a146102f2575b61010433610307565b005b34801561011257600080fd5b5061011b61039d565b60408051918252519081900360200190f35b34801561013957600080fd5b5061014e600160a060020a03600435166103a3565b604080519115158252519081900360200190f35b34801561016e57600080fd5b506101046004356103c5565b34801561018657600080fd5b506101046004356103de565b34801561019e57600080fd5b5061011b6103f7565b3480156101b357600080fd5b506101046103fd565b3480156101c857600080fd5b5061014e610444565b3480156101dd57600080fd5b506101e661044d565b60408051600160a060020a039092168252519081900360200190f35b34801561020e57600080fd5b50610104600160a060020a036004351661045c565b34801561022f57600080fd5b50610104600160a060020a03600435166104d1565b34801561025057600080fd5b5061014e610555565b34801561026557600080fd5b506101046004351515610563565b34801561027f57600080fd5b50610104600435151561058a565b34801561029957600080fd5b5061011b6105b8565b3480156102ae57600080fd5b506101046004356105be565b610104600160a060020a0360043516610307565b3480156102da57600080fd5b50610104600160a060020a03600435166024356105d7565b3480156102fe57600080fd5b506101e66105f9565b3460006103148383610608565b61031d8261064f565b9050610328816106a4565b60065461033b908263ffffffff6106dd16565b60065561034883826106f0565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a36103986106fa565b505050565b60035481565b600160a060020a03811660009081526020819052604090205460ff165b919050565b6103ce336103a3565b15156103d957600080fd5b600355565b6103e7336103a3565b15156103f257600080fd5b600455565b60075481565b610406336103a3565b151561041157600080fd5b610419610733565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a1565b60085460ff1681565b600254600160a060020a031681565b610465336103a3565b151561047057600080fd5b600160a060020a038116151561048557600080fd5b600160a060020a038116600081815260208190526040808220805460ff19166001179055517f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c39190a250565b6104da336103a3565b15156104e557600080fd5b600160a060020a03811660009081526020819052604090205460ff16151561050c57600080fd5b600160a060020a038116600081815260208190526040808220805460ff19169055517febfcf264b2104087f09153632448fc6624ccfe2984ade6a26248f2b9c28e436a9190a250565b600854610100900460ff1681565b61056c336103a3565b151561057757600080fd5b6008805460ff1916911515919091179055565b610593336103a3565b151561059e57600080fd5b600880549115156101000261ff0019909216919091179055565b60045481565b6105c7336103a3565b15156105d257600080fd5b600555565b6105e0336103a3565b15156105eb57600080fd5b6105f582826106f0565b5050565b600154600160a060020a031681565b60085460ff16806106205750600854610100900460ff165b151561062b57600080fd5b600160a060020a038216151561064057600080fd5b6005548110156105f557600080fd5b60085460009060ff16156106785760045461067190839063ffffffff6107e616565b90506103c0565b600854610100900460ff161561069c5760035461067190839063ffffffff6107e616565b506000919050565b60085460ff16156106da576006546aa56fa5b99019a5c8000000906106cf908363ffffffff6106dd16565b11156106da57600080fd5b50565b818101828110156106ea57fe5b92915050565b6105f5828261080f565b600254604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156106da573d6000803e3d6000fd5b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516107e4923392600160a060020a03909116916370a08231916024808201926020929091908290030181600087803b15801561079f57600080fd5b505af11580156107b3573d6000803e3d6000fd5b505050506040513d60208110156107c957600080fd5b5051600154600160a060020a0316919063ffffffff61082c16565b565b60008215156107f7575060006106ea565b5081810281838281151561080757fe5b04146106ea57fe5b6001546105f590600160a060020a0316838363ffffffff61082c16565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156108a857600080fd5b505af11580156108bc573d6000803e3d6000fd5b505050506040513d60208110156108d257600080fd5b5051151561039857600080fd00a165627a7a7230582035613da0012783104c0266e386ddba2e3fda52fd5f520573b4d6deb1a28a08e80029000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a7000000000000000000000000a461d399ebffd55875f74071c6e61d09382da3fc000000000000000000000000b14b32227d791dcc5015ce8dde50d2d145923702",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a7000000000000000000000000a461d399ebffd55875f74071c6e61d09382da3fc000000000000000000000000b14b32227d791dcc5015ce8dde50d2d145923702"
}