{
  "address": "0xfe3a06a947a036eff9f9e8ec25b385ff4e853c38",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TUToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Claimable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n/**\n * @title JZMLock\n * @author http://jzm.one\n * @dev JZMLock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract JZMLock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n\n  constructor(\n    ERC20Basic _token,\n    address _beneficiary,\n    uint256 _releaseTime\n  )\n    public\n  {\n    // solium-disable-next-line security/no-block-members\n    require(_releaseTime > block.timestamp);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by JZMLock to beneficiary.\n   */\n  function release() public {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= releaseTime);\n    uint256 amount = token.balanceOf(address(this));\n    require(amount > 0);\n    token.safeTransfer(beneficiary, amount);\n  }\n  \n  function canRelease() public view returns (bool){\n    return block.timestamp >= releaseTime;\n  }\n}\n\n/**\n * @title JZMToken\n * @author http://jzm.one\n * @dev JZMToken is a token that provide lock function\n */\ncontract JZMToken is PausableToken {\n\n    event TransferWithLock(address indexed from, address indexed to, address indexed locked, uint256 amount, uint256 releaseTime);\n    \n    mapping (address => address[] ) public balancesLocked;\n\n    function transferWithLock(address _to, uint256 _amount, uint256 _releaseTime) public returns (bool) {\n        JZMLock lock = new JZMLock(this, _to, _releaseTime);\n        transfer(address(lock), _amount);\n        balancesLocked[_to].push(lock);\n        emit TransferWithLock(msg.sender, _to, address(lock), _amount, _releaseTime);\n        return true;\n    }\n\n    /**\n     * @dev Gets the locked balance of the specified address.\n     * @param _owner The address to query the locked balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOfLocked(address _owner) public view returns (uint256) {\n        address[] memory lockTokenAddrs = balancesLocked[_owner];\n\n        uint256 totalLockedBalance = 0;\n        for (uint i = 0; i < lockTokenAddrs.length; i++) {\n            totalLockedBalance = totalLockedBalance.add(balances[lockTokenAddrs[i]]);\n        }\n        \n        return totalLockedBalance;\n    }\n\n    function releaseToken(address _owner) public returns (bool) {\n        address[] memory lockTokenAddrs = balancesLocked[_owner];\n        for (uint i = 0; i < lockTokenAddrs.length; i++) {\n            JZMLock lock = JZMLock(lockTokenAddrs[i]);\n            if (lock.canRelease() && balanceOf(lock)>0) {\n                lock.release();\n            }\n        }\n        return true;\n    }\n}\n\n/**\n * @title TUToken\n * @dev Trust Union Token Contract\n */\ncontract TUToken is JZMToken {\n    using SafeMath for uint256;\n\n    string public constant name = \"Trust Union\";\n    string public constant symbol = \"TUT\";\n    uint8 public constant decimals = 18;\n\n    uint256 private constant TOKEN_UNIT = 10 ** uint256(decimals);\n    uint256 private constant INITIAL_SUPPLY = (10 ** 9) * TOKEN_UNIT;\n\n    //init wallet address\n    address private constant ADDR_MARKET          = 0xEd3998AA7F255Ade06236776f9FD429eECc91357;\n    address private constant ADDR_FOUNDTEAM       = 0x1867812567f42e2Da3C572bE597996B1309593A7;\n    address private constant ADDR_ECO             = 0xF7549be7449aA2b7D708d39481fCBB618C9Fb903;\n    address private constant ADDR_PRIVATE_SALE    = 0x252c4f77f1cdCCEBaEBbce393804F4c8f3D5703D;\n    address private constant ADDR_SEED_INVESTOR   = 0x03a59D08980A5327a958860e346d020ec8bb33dC;\n    address private constant ADDR_FOUNDATION      = 0xC138d62b3E34391964852Cf712454492DC7eFF68;\n\n    //init supply for market = 5%\n    uint256 private constant S_MARKET_TOTAL = INITIAL_SUPPLY * 5 / 100;\n    uint256 private constant S_MARKET_20181030 = 5000000  * TOKEN_UNIT;\n    uint256 private constant S_MARKET_20190130 = 10000000 * TOKEN_UNIT;\n    uint256 private constant S_MARKET_20190430 = 15000000 * TOKEN_UNIT;\n    uint256 private constant S_MARKET_20190730 = 20000000 * TOKEN_UNIT;\n\n    //init supply for founding team = 15%\n    uint256 private constant S_FOUNDTEAM_TOTAL = INITIAL_SUPPLY * 15 / 100;\n    uint256 private constant S_FOUNDTEAM_20191030 = INITIAL_SUPPLY * 5 / 100;\n    uint256 private constant S_FOUNDTEAM_20200430 = INITIAL_SUPPLY * 5 / 100;\n    uint256 private constant S_FOUNDTEAM_20201030 = INITIAL_SUPPLY * 5 / 100;\n\n    //init supply for ecological incentive = 40%\n    uint256 private constant S_ECO_TOTAL = INITIAL_SUPPLY * 40 / 100;\n    uint256 private constant S_ECO_20190401 = 45000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20191001 = 45000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20200401 = 40000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20201001 = 40000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20210401 = 35000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20211001 = 35000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20220401 = 30000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20221001 = 30000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20230401 = 25000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20231001 = 25000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20240401 = 25000000 * TOKEN_UNIT;\n    uint256 private constant S_ECO_20241001 = 25000000 * TOKEN_UNIT;\n\n    //init supply for private sale = 10%\n    uint256 private constant S_PRIVATE_SALE = INITIAL_SUPPLY * 10 / 100;\n\n    //init supply for seed investor = 10%\n    uint256 private constant S_SEED_INVESTOR = INITIAL_SUPPLY * 10 / 100;\n\n    //init supply for foundation = 20%\n    uint256 private constant S_FOUNDATION = INITIAL_SUPPLY * 20 / 100;\n    \n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[owner] = totalSupply_;\n\n        _initWallet();\n        _invokeLockLogic();\n    }\n\n    /**\n     * @dev init the wallets\n     */\n    function _initWallet() internal onlyOwner {\n        transfer(ADDR_PRIVATE_SALE, S_PRIVATE_SALE);\n        transfer(ADDR_SEED_INVESTOR, S_SEED_INVESTOR);\n        transfer(ADDR_FOUNDATION, S_FOUNDATION);\n    }\n\n    /**\n     * @dev invoke lock logic\n     */\n    function _invokeLockLogic() internal onlyOwner {\n        //lock for market\n        //2018/10/30 0:00:00 UTC +8\n        transferWithLock(ADDR_MARKET, S_MARKET_20181030, 1540828800);\n        //2019/01/30 0:00:00 UTC +8\n        transferWithLock(ADDR_MARKET, S_MARKET_20190130, 1548777600); \n        //2019/04/30 0:00:00 UTC +8     \n        transferWithLock(ADDR_MARKET, S_MARKET_20190430, 1556553600);\n        //2019/07/30 0:00:00 UTC +8\n        transferWithLock(ADDR_MARKET, S_MARKET_20190730, 1564416000);\n        \n        //lock for found team\n        //2019/10/30 0:00:00 UTC +8\n        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20191030, 1572364800);\n        //2020/04/30 0:00:00 UTC +8\n        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20200430, 1588176000);\n        //2020/10/30 0:00:00 UTC +8\n        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20201030, 1603987200);\n        \n        //lock for eco\n        //2019/04/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20190401, 1554048000);\n        //2019/10/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20191001, 1569859200);\n        //2020/04/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20200401, 1585670400);\n        //2020/10/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20201001, 1601481600);\n        //2021/04/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20210401, 1617206400);\n        //2021/10/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20211001, 1633017600);\n        //2022/04/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20220401, 1648742400);\n        //2022/10/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20221001, 1664553600);\n        //2023/04/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20230401, 1680278400);\n        //2023/10/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20231001, 1696089600);\n        //2024/04/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20240401, 1711900800);\n        //2024/10/01 0:00:00 UTC +8\n        transferWithLock(ADDR_ECO, S_ECO_20241001, 1727712000);\n    }\n}",
  "bytecode": "60806040526004805460a060020a60ff02191690553480156200002157600080fd5b5060038054600160a060020a0319163317908190556b033b2e3c9fd0803ce80000006001819055600160a060020a0391909116600090815260208190526040902055620000766401000000006200008f810204565b6200008964010000000062000141810204565b620007d4565b600354600160a060020a03163314620000a757600080fd5b620000e073252c4f77f1cdccebaebbce393804f4c8f3d5703d60646b204fce5e3e250261100000005b046401000000006200056a810204565b506200010f7303a59d08980a5327a958860e346d020ec8bb33dc60646b204fce5e3e25026110000000620000d0565b506200013e73c138d62b3e34391964852cf712454492dc7eff6860646b409f9cbc7c4a04c220000000620000d0565b50565b600354600160a060020a031633146200015957600080fd5b6200019273ed3998aa7f255ade06236776f9fd429eecc913576a0422ca8b0a00a425000000635bd72e80640100000000620005b7810204565b50620001cc73ed3998aa7f255ade06236776f9fd429eecc913576a084595161401484a000000635c507880640100000000620005b7810204565b506200020673ed3998aa7f255ade06236776f9fd429eecc913576a0c685fa11e01ec6f000000635cc71f80640100000000620005b7810204565b506200024073ed3998aa7f255ade06236776f9fd429eecc913576a108b2a2c28029094000000635d3f1800640100000000620005b7810204565b506200027a731867812567f42e2da3c572be597996b1309593a76a295be96e64066972000000635db86200640100000000620005b7810204565b50620002b4731867812567f42e2da3c572be597996b1309593a76a295be96e64066972000000635ea9a480640100000000620005b7810204565b50620002ee731867812567f42e2da3c572be597996b1309593a76a295be96e64066972000000635f9ae700640100000000620005b7810204565b506200032360008051602062001cd38339815191526a25391ee35a05c54d000000635ca0e400640100000000620005b7810204565b506200035860008051602062001cd38339815191526a25391ee35a05c54d000000635d922680640100000000620005b7810204565b506200038d60008051602062001cd38339815191526a2116545850052128000000635e836900640100000000620005b7810204565b50620003c260008051602062001cd38339815191526a2116545850052128000000635f74ab80640100000000620005b7810204565b50620003f760008051602062001cd38339815191526a1cf389cd46047d030000006360649c80640100000000620005b7810204565b506200042c60008051602062001cd38339815191526a1cf389cd46047d03000000636155df00640100000000620005b7810204565b506200046160008051602062001cd38339815191526a18d0bf423c03d8de000000636245d000640100000000620005b7810204565b506200049660008051602062001cd38339815191526a18d0bf423c03d8de0000006363371280640100000000620005b7810204565b50620004cb60008051602062001cd38339815191526a14adf4b7320334b90000006364270380640100000000620005b7810204565b506200050060008051602062001cd38339815191526a14adf4b7320334b90000006365184600640100000000620005b7810204565b506200053560008051602062001cd38339815191526a14adf4b7320334b90000006366098880640100000000620005b7810204565b506200013e60008051602062001cd38339815191526a14adf4b7320334b90000006366facb00640100000000620005b7810204565b60045460009074010000000000000000000000000000000000000000900460ff16156200059657600080fd5b620005b0838364010000000062000c9f620006a382021704565b9392505050565b600080308584620005c7620007c3565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f08015801562000606573d6000803e3d6000fd5b5090506200061e81856401000000006200056a810204565b50600160a060020a0385811660008181526005602090815260408083208054600181018255908452928290209092018054600160a060020a03191694861694851790558151888152908101879052815133927fc4a3ea8819a3430d7cef20bd733e41bd486ebfddbc195e6f31ab9eb7f00022ef928290030190a4506001949350505050565b33600090815260208190526040812054821115620006c057600080fd5b600160a060020a0383161515620006d657600080fd5b3360009081526020819052604090205462000700908364010000000062000d906200079882021704565b3360009081526020819052604080822092909255600160a060020a038516815220546200073c908364010000000062000d7e620007b082021704565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008083831115620007a957600080fd5b5050900390565b600082820183811015620005b057600080fd5b604051610386806200194d83390190565b61116980620007e46000396000f3006080604052600436106100f85763ffffffff60e060020a60003504166306fdde0381146100fd578063095ea7b31461018757806318160ddd146101bf57806323b872dd146101e6578063313ce567146102105780633f4ba83a1461023b5780634e71e0c8146102525780635c975abb1461026757806370a082311461027c5780638456cb591461029d5780638da5cb5b146102b257806395d89b41146102e3578063a9059cbb146102f8578063dd62ed3e1461031c578063de6baccb14610343578063e30c39781461036a578063e545f9411461037f578063e960bb48146103a0578063f2fde38b146103c1578063fa9ec13a146103e2575b600080fd5b34801561010957600080fd5b50610112610406565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014c578181015183820152602001610134565b50505050905090810190601f1680156101795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019357600080fd5b506101ab600160a060020a036004351660243561043d565b604080519115158252519081900360200190f35b3480156101cb57600080fd5b506101d4610468565b60408051918252519081900360200190f35b3480156101f257600080fd5b506101ab600160a060020a036004358116906024351660443561046e565b34801561021c57600080fd5b5061022561049b565b6040805160ff9092168252519081900360200190f35b34801561024757600080fd5b506102506104a0565b005b34801561025e57600080fd5b50610250610518565b34801561027357600080fd5b506101ab6105a2565b34801561028857600080fd5b506101d4600160a060020a03600435166105b2565b3480156102a957600080fd5b506102506105cd565b3480156102be57600080fd5b506102c761064a565b60408051600160a060020a039092168252519081900360200190f35b3480156102ef57600080fd5b50610112610659565b34801561030457600080fd5b506101ab600160a060020a0360043516602435610690565b34801561032857600080fd5b506101d4600160a060020a03600435811690602435166106b4565b34801561034f57600080fd5b506101ab600160a060020a03600435166024356044356106df565b34801561037657600080fd5b506102c76107ca565b34801561038b57600080fd5b506101ab600160a060020a03600435166107d9565b3480156103ac57600080fd5b506101d4600160a060020a0360043516610968565b3480156103cd57600080fd5b50610250600160a060020a0360043516610a47565b3480156103ee57600080fd5b506102c7600160a060020a0360043516602435610a8d565b60408051808201909152600b81527f547275737420556e696f6e000000000000000000000000000000000000000000602082015281565b60045460009060a060020a900460ff161561045757600080fd5b6104618383610ac4565b9392505050565b60015490565b60045460009060a060020a900460ff161561048857600080fd5b610493848484610b2a565b949350505050565b601281565b600354600160a060020a031633146104b757600080fd5b60045460a060020a900460ff1615156104cf57600080fd5b6004805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600454600160a060020a0316331461052f57600080fd5b600454600354604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600480546003805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60045460a060020a900460ff1681565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146105e457600080fd5b60045460a060020a900460ff16156105fb57600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600381527f5455540000000000000000000000000000000000000000000000000000000000602082015281565b60045460009060a060020a900460ff16156106aa57600080fd5b6104618383610c9f565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000803085846106ed610da7565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f08015801561072b573d6000803e3d6000fd5b5090506107388185610690565b50600160a060020a038581166000818152600560209081526040808320805460018101825590845292829020909201805473ffffffffffffffffffffffffffffffffffffffff191694861694851790558151888152908101879052815133927fc4a3ea8819a3430d7cef20bd733e41bd486ebfddbc195e6f31ab9eb7f00022ef928290030190a4506001949350505050565b600454600160a060020a031681565b600160a060020a03811660009081526005602090815260408083208054825181850281018501909352808352606093859384939092909183018282801561084957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161082b575b50505050509250600091505b825182101561095d57828281518110151561086c57fe5b90602001906020020151905080600160a060020a0316633705f69e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108b657600080fd5b505af11580156108ca573d6000803e3d6000fd5b505050506040513d60208110156108e057600080fd5b505180156108f6575060006108f4826105b2565b115b156109525780600160a060020a03166386d1a69f6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561093957600080fd5b505af115801561094d573d6000803e3d6000fd5b505050505b600190910190610855565b506001949350505050565b600160a060020a0381166000908152600560209081526040808320805482518185028101850190935280835260609385938493909290918301828280156109d857602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116109ba575b5050505050925060009150600090505b8251811015610a3f57610a356000808584815181101515610a0557fe5b6020908102909101810151600160a060020a0316825281019190915260400160002054839063ffffffff610d7e16565b91506001016109e8565b509392505050565b600354600160a060020a03163314610a5e57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600560205281600052604060002081815481101515610aa857fe5b600091825260209091200154600160a060020a03169150829050565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a038316600090815260208190526040812054821115610b4f57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610b7f57600080fd5b600160a060020a0383161515610b9457600080fd5b600160a060020a038416600090815260208190526040902054610bbd908363ffffffff610d9016565b600160a060020a038086166000908152602081905260408082209390935590851681522054610bf2908363ffffffff610d7e16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610c34908363ffffffff610d9016565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b33600090815260208190526040812054821115610cbb57600080fd5b600160a060020a0383161515610cd057600080fd5b33600090815260208190526040902054610cf0908363ffffffff610d9016565b3360009081526020819052604080822092909255600160a060020a03851681522054610d22908363ffffffff610d7e16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008282018381101561046157600080fd5b60008083831115610da057600080fd5b5050900390565b60405161038680610db8833901905600608060405234801561001057600080fd5b5060405160608061038683398101604090815281516020830151919092015142811161003b57600080fd5b60008054600160a060020a03948516600160a060020a03199182161790915560018054939094169216919091179091556002556103098061007d6000396000f30060806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633705f69e811461007157806338af3eed1461009a57806386d1a69f146100cb578063b91d4001146100e2578063fc0c546a14610109575b600080fd5b34801561007d57600080fd5b5061008661011e565b604080519115158252519081900360200190f35b3480156100a657600080fd5b506100af610127565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506100e0610136565b005b3480156100ee57600080fd5b506100f7610210565b60408051918252519081900360200190f35b34801561011557600080fd5b506100af610216565b60025442101590565b600154600160a060020a031681565b60025460009042101561014857600080fd5b60008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b1580156101af57600080fd5b505af11580156101c3573d6000803e3d6000fd5b505050506040513d60208110156101d957600080fd5b50519050600081116101ea57600080fd5b60015460005461020d91600160a060020a0391821691168363ffffffff61022516565b50565b60025481565b600054600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156102a157600080fd5b505af11580156102b5573d6000803e3d6000fd5b505050506040513d60208110156102cb57600080fd5b505115156102d857600080fd5b5050505600a165627a7a72305820727727fb73bf248cbca65afadbb15bf06410b669b29755c12e76747bf11b56ff0029a165627a7a7230582025b0c982babc438e4fafb931cd767b6c1770783a4ba9dc25728822aa052513210029608060405234801561001057600080fd5b5060405160608061038683398101604090815281516020830151919092015142811161003b57600080fd5b60008054600160a060020a03948516600160a060020a03199182161790915560018054939094169216919091179091556002556103098061007d6000396000f30060806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633705f69e811461007157806338af3eed1461009a57806386d1a69f146100cb578063b91d4001146100e2578063fc0c546a14610109575b600080fd5b34801561007d57600080fd5b5061008661011e565b604080519115158252519081900360200190f35b3480156100a657600080fd5b506100af610127565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506100e0610136565b005b3480156100ee57600080fd5b506100f7610210565b60408051918252519081900360200190f35b34801561011557600080fd5b506100af610216565b60025442101590565b600154600160a060020a031681565b60025460009042101561014857600080fd5b60008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b1580156101af57600080fd5b505af11580156101c3573d6000803e3d6000fd5b505050506040513d60208110156101d957600080fd5b50519050600081116101ea57600080fd5b60015460005461020d91600160a060020a0391821691168363ffffffff61022516565b50565b60025481565b600054600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156102a157600080fd5b505af11580156102b5573d6000803e3d6000fd5b505050506040513d60208110156102cb57600080fd5b505115156102d857600080fd5b5050505600a165627a7a72305820727727fb73bf248cbca65afadbb15bf06410b669b29755c12e76747bf11b56ff0029000000000000000000000000f7549be7449aa2b7d708d39481fcbb618c9fb903",
  "constructorArguments": "000000000000000000000000f7549be7449aa2b7d708d39481fcbb618c9fb903"
}