{
  "address": "0x451d4994cd2f2f691632b3d574e4a3d69c8cd7c6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DatareumToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-06\n*/\n\npragma solidity ^0.4.20;\n\n//standart library for uint\nlibrary SafeMath { \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0 || b == 0){\n        return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\n    if (b == 0){\n      return 1;\n    }\n    uint256 c = a**b;\n    assert (c >= a);\n    return c;\n  }\n}\n\n//standart contract to identify owner\ncontract Ownable {\n\n  address public owner;\n\n  address public newOwner;\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0));\n    newOwner = _newOwner;\n  }\n\n  function acceptOwnership() public {\n    if (msg.sender == newOwner) {\n      owner = newOwner;\n    }\n  }\n}\n\ncontract DatareumToken is Ownable { //ERC - 20 token contract\n  using SafeMath for uint;\n  // Triggered when tokens are transferred.\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  string public constant symbol = \"DTN\";\n  string public constant name = \"Datareum\";\n  uint8 public constant decimals = 18;\n  uint256 _totalSupply = 1000000000 ether;\n\n  // Owner of this contract\n  address public owner;\n\n  // Balances for each account\n  mapping(address => uint256) balances;\n\n  // Owner of account approves the transfer of an amount to another account\n  mapping(address => mapping (address => uint256)) allowed;\n\n  function totalSupply() public view returns (uint256) { //standart ERC-20 function\n    return _totalSupply;\n  }\n\n  function balanceOf(address _address) public view returns (uint256 balance) {//standart ERC-20 function\n    return balances[_address];\n  }\n  \n  bool public locked = true;\n  bool public canChangeLocked = true;\n\n  function changeLockTransfer (bool _request) public onlyOwner {\n    require(canChangeLocked);\n    locked = _request;\n  }\n\n  function finalUnlockTransfer () public {\n    require (now > finishDate + 4 weeks);\n    locked = false;\n    canChangeLocked = false;\n  }\n  \n  //standart ERC-20 function\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    require(this != _to);\n    require (_to != address(0));\n    require(!locked);\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(msg.sender,_to,_amount);\n    return true;\n  }\n\n  //standart ERC-20 function\n  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\n    require(this != _to);\n    require (_to != address(0));\n    require(!locked);\n    balances[_from] = balances[_from].sub(_amount);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(_from,_to,_amount);\n    return true;\n  }\n  //standart ERC-20 function\n  function approve(address _spender, uint256 _amount)public returns (bool success) { \n    allowed[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  //standart ERC-20 function\n  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  //Constructor\n  function DatareumToken() public {\n    owner = 0x6563Cc78478Df92097F7A666Db7f70EeA9481C2e;\n    balances[this] = _totalSupply;\n  }\n\n  address public crowdsaleContract;\n\n  function setCrowdsaleContract (address _address) public{\n    require(crowdsaleContract == address(0));\n\n    crowdsaleContract = _address;\n  }\n\n  function endICO (uint _date) public {\n    require(msg.sender == crowdsaleContract);\n    balances[this] = balances[this].sub(crowdsaleBalance);\n    emit Transfer(this,0,crowdsaleBalance);\n    \n    crowdsaleBalance = 0;\n    finishDate = _date;\n  }\n\n  uint public finishDate = 1893456000;\n  \n  uint public crowdsaleBalance = 600000000 ether;\n  \n  function sendCrowdsaleTokens (address _address, uint _value) public {\n    require(msg.sender == crowdsaleContract);\n\n    balances[this] = balances[this].sub(_value);\n    balances[_address] = balances[_address].add(_value);\n    \n    crowdsaleBalance = crowdsaleBalance.sub(_value);\n    \n    emit Transfer(this,_address,_value);    \n  }\n\n  uint public advisorsBalance = 200000000 ether;\n  uint public foundersBalance = 100000000 ether;\n  uint public futureFundingBalance = 50000000 ether;\n  uint public bountyBalance = 50000000 ether;\n\n  function sendAdvisorsBalance (address[] _addresses, uint[] _values) external onlyOwner {\n    require(crowdsaleBalance == 0);\n    uint buffer = 0;\n    for(uint i = 0; i < _addresses.length; i++){\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\n      buffer = buffer.add(_values[i]);\n      emit Transfer(this,_addresses[i],_values[i]);\n    }\n    advisorsBalance = advisorsBalance.sub(buffer);\n    balances[this] = balances[this].sub(buffer);\n  }\n  \n  function sendFoundersBalance (address[] _addresses, uint[] _values) external onlyOwner {\n    require(crowdsaleBalance == 0);\n    require(now > finishDate + 1 years);\n\n    uint buffer = 0;\n    for(uint i = 0; i < _addresses.length; i++){\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\n      buffer = buffer.add(_values[i]);\n      emit Transfer(this,_addresses[i],_values[i]);\n    }\n    foundersBalance = foundersBalance.sub(buffer);\n    balances[this] = balances[this].sub(buffer);\n  }\n\n  function sendFutureFundingBalance (address[] _addresses, uint[] _values) external onlyOwner {\n    require(crowdsaleBalance == 0);\n    require(now > finishDate + 2 years);\n\n    uint buffer = 0;\n    for(uint i = 0; i < _addresses.length; i++){\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\n      buffer = buffer.add(_values[i]);\n      emit Transfer(this,_addresses[i],_values[i]);\n    }\n    futureFundingBalance = futureFundingBalance.sub(buffer);\n    balances[this] = balances[this].sub(buffer);\n  }\n\n  uint public constant PRE_ICO_FINISH = 1525737540;\n\n  mapping (address => bool) public bountyAddresses;\n\n  function addBountyAddresses (address[] _addresses) external onlyOwner {\n    for (uint i = 0; i < _addresses.length; i++){\n      bountyAddresses[_addresses[i]] = true;\n    }\n  }\n\n  function removeBountyAddresses (address[] _addresses) external onlyOwner {\n    for (uint i = 0; i < _addresses.length; i++){\n      bountyAddresses[_addresses[i]] = false;\n    }\n  }\n\n  function sendBountyBalance (address[] _addresses, uint[] _values) external {\n    require(now >= PRE_ICO_FINISH);\n    require (bountyAddresses[msg.sender]);\n\n    uint buffer = 0;\n    for(uint i = 0; i < _addresses.length; i++){\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\n      buffer = buffer.add(_values[i]);\n      emit Transfer(this,_addresses[i],_values[i]);\n    }\n    bountyBalance = bountyBalance.sub(buffer);\n    balances[this] = balances[this].sub(buffer);\n  }\n}",
  "bytecode": "60606040526b033b2e3c9fd0803ce80000006002556001600660006101000a81548160ff0219169083151502179055506001600660016101000a81548160ff0219169083151502179055506370dbd8806007556b01f04ef12cb04cf1580000006008556aa56fa5b99019a5c80000006009556a52b7d2dcc80cd2e4000000600a556a295be96e64066972000000600b556a295be96e64066972000000600c5534156100a957600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550736563cc78478df92097f7a666db7f70eea9481c2e600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600254600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612848806101936000396000f3006060604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101bc578063095ea7b31461024a57806318160ddd146102a457806323b872dd146102cd5780632dab0374146103465780632e3a71d514610388578063313ce567146103b157806331616395146103e057806342ae0a161461043557806345bd7f031461045e5780635d2165621461048c5780636324af1f146104b15780636596cff3146104da5780636c4db7cc1461051357806370a082311461055557806379ba5097146105a25780637afcb524146105b75780638da5cb5b146105e057806395d89b41146106355780639c1f020a146106c3578063a602452414610705578063a9059cbb1461072e578063b76c5c9f14610788578063cf0cb613146107ca578063cf309012146107df578063d03b41a91461080c578063d4ee1d9014610835578063dd62ed3e1461088a578063e144ab41146108f6578063f2fde38b14610947578063f400a3d714610980578063f5a332f6146109a9578063f6729bf2146109cc578063fc998981146109f9578063fe00779e14610a3b575b600080fd5b34156101c757600080fd5b6101cf610a69565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020f5780820151818401526020810190506101f4565b50505050905090810190601f16801561023c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025557600080fd5b61028a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610aa2565b604051808215151515815260200191505060405180910390f35b34156102af57600080fd5b6102b7610b94565b6040518082815260200191505060405180910390f35b34156102d857600080fd5b61032c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b9e565b604051808215151515815260200191505060405180910390f35b341561035157600080fd5b610386600480803590602001908201803590602001919091929080359060200190820180359060200191909192905050610edc565b005b341561039357600080fd5b61039b611203565b6040518082815260200191505060405180910390f35b34156103bc57600080fd5b6103c4611209565b604051808260ff1660ff16815260200191505060405180910390f35b34156103eb57600080fd5b6103f361120e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561044057600080fd5b610448611234565b6040518082815260200191505060405180910390f35b341561046957600080fd5b61048a6004808035906020019082018035906020019190919290505061123a565b005b341561049757600080fd5b6104af6004808035151590602001909190505061133b565b005b34156104bc57600080fd5b6104c46113ce565b6040518082815260200191505060405180910390f35b34156104e557600080fd5b610511600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113d4565b005b341561051e57600080fd5b610553600480803590602001908201803590602001919091929080359060200190820180359060200191909192905050611475565b005b341561056057600080fd5b61058c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061179c565b6040518082815260200191505060405180910390f35b34156105ad57600080fd5b6105b56117e5565b005b34156105c257600080fd5b6105ca6118a0565b6040518082815260200191505060405180910390f35b34156105eb57600080fd5b6105f36118a6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561064057600080fd5b6106486118cc565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561068857808201518184015260208101905061066d565b50505050905090810190601f1680156106b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106ce57600080fd5b610703600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611905565b005b341561071057600080fd5b610718611b0f565b6040518082815260200191505060405180910390f35b341561073957600080fd5b61076e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b17565b604051808215151515815260200191505060405180910390f35b341561079357600080fd5b6107c8600480803590602001908201803590602001919091929080359060200190820180359060200191909192905050611d45565b005b34156107d557600080fd5b6107dd612056565b005b34156107ea57600080fd5b6107f26120a3565b604051808215151515815260200191505060405180910390f35b341561081757600080fd5b61081f6120b6565b6040518082815260200191505060405180910390f35b341561084057600080fd5b6108486120bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561089557600080fd5b6108e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506120e2565b6040518082815260200191505060405180910390f35b341561090157600080fd5b61092d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612169565b604051808215151515815260200191505060405180910390f35b341561095257600080fd5b61097e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612189565b005b341561098b57600080fd5b610993612264565b6040518082815260200191505060405180910390f35b34156109b457600080fd5b6109ca600480803590602001909190505061226a565b005b34156109d757600080fd5b6109df6123c1565b604051808215151515815260200191505060405180910390f35b3415610a0457600080fd5b610a396004808035906020019082018035906020019190919290803590602001908201803590602001919091929050506123d4565b005b3415610a4657600080fd5b610a67600480803590602001908201803590602001919091929050506126e4565b005b6040805190810160405280600881526020017f446174617265756d00000000000000000000000000000000000000000000000081525081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b60008273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614151515610bdb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c1757600080fd5b600660009054906101000a900460ff16151515610c3357600080fd5b610c8582600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d5782600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e2982600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127fe90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f3a57600080fd5b6000600854141515610f4b57600080fd5b6303c267006007540142111515610f6157600080fd5b60009150600090505b8585905081101561114b576110058484838181101515610f8657fe5b90506020020135600460008989868181101515610f9f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127fe90919063ffffffff16565b60046000888885818110151561101757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611099848483818110151561108357fe5b90506020020135836127fe90919063ffffffff16565b915085858281811015156110a957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef868685818110151561112257fe5b905060200201356040518082815260200191505060405180910390a38080600101915050610f6a565b61116082600b546127e590919063ffffffff16565b600b819055506111b882600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050505050565b600b5481565b601281565b600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129757600080fd5b600090505b82829050811015611336576001600d600085858581811015156112bb57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808060010191505061129c565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139657600080fd5b600660019054906101000a900460ff1615156113b157600080fd5b80600660006101000a81548160ff02191690831515021790555050565b60095481565b600073ffffffffffffffffffffffffffffffffffffffff16600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561143157600080fd5b80600660026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114d357600080fd5b60006008541415156114e457600080fd5b6301e1338060075401421115156114fa57600080fd5b60009150600090505b858590508110156116e45761159e848483818110151561151f57fe5b9050602002013560046000898986818110151561153857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127fe90919063ffffffff16565b6004600088888581811015156115b057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611632848483818110151561161c57fe5b90506020020135836127fe90919063ffffffff16565b9150858582818110151561164257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86868581811015156116bb57fe5b905060200201356040518082815260200191505060405180910390a38080600101915050611503565b6116f982600a546127e590919063ffffffff16565b600a8190555061175182600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561189e57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b600a5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f44544e000000000000000000000000000000000000000000000000000000000081525081565b600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196157600080fd5b6119b381600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a4881600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127fe90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611aa0816008546127e590919063ffffffff16565b6008819055508173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b635af0e84481565b60008273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614151515611b5457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611b9057600080fd5b600660009054906101000a900460ff16151515611bac57600080fd5b611bfe82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c9382600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127fe90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611da357600080fd5b6000600854141515611db457600080fd5b60009150600090505b85859050811015611f9e57611e588484838181101515611dd957fe5b90506020020135600460008989868181101515611df257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127fe90919063ffffffff16565b600460008888858181101515611e6a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611eec8484838181101515611ed657fe5b90506020020135836127fe90919063ffffffff16565b91508585828181101515611efc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8686858181101515611f7557fe5b905060200201356040518082815260200191505060405180910390a38080600101915050611dbd565b611fb3826009546127e590919063ffffffff16565b60098190555061200b82600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050505050565b6224ea00600754014211151561206b57600080fd5b6000600660006101000a81548160ff0219169083151502179055506000600660016101000a81548160ff021916908315150217905550565b600660009054906101000a900460ff1681565b600c5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600d6020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121e457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561222057600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60075481565b600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122c657600080fd5b61231a600854600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040518082815260200191505060405180910390a360006008819055508060078190555050565b600660019054906101000a900460ff1681565b600080635af0e84442101515156123ea57600080fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561244257600080fd5b60009150600090505b8585905081101561262c576124e6848483818110151561246757fe5b9050602002013560046000898986818110151561248057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127fe90919063ffffffff16565b6004600088888581811015156124f857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061257a848483818110151561256457fe5b90506020020135836127fe90919063ffffffff16565b9150858582818110151561258a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef868685818110151561260357fe5b905060200201356040518082815260200191505060405180910390a3808060010191505061244b565b61264182600c546127e590919063ffffffff16565b600c8190555061269982600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127e590919063ffffffff16565b600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561274157600080fd5b600090505b828290508110156127e0576000600d6000858585818110151561276557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612746565b505050565b60008282111515156127f357fe5b818303905092915050565b600080828401905083811015151561281257fe5b80915050929150505600a165627a7a72305820c96b9d680a079476173431a9a84bc8896c0f62cb23c5f8a9a099c79a7fa163f00029"
}