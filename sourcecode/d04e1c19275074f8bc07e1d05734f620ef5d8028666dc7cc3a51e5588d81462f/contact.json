{
  "address": "0xc749bba36bcf10a429846929c11846935f91f8c0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClaimHolderPresigned",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-16\n*/\n\n// Written by Nick Poulden, Tyler Yasaka, and the Origin Protocol Team.\npragma solidity ^0.4.13;\n\nlibrary ClaimHolderLibrary {\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer; // msg.sender\n        bytes signature; // this.address + topic + data\n        bytes data;\n        string uri;\n    }\n\n    struct Claims {\n        mapping (bytes32 => Claim) byId;\n        mapping (uint256 => bytes32[]) byTopic;\n    }\n\n    function addClaim(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256 _topic,\n        uint256 _scheme,\n        address _issuer,\n        bytes _signature,\n        bytes _data,\n        string _uri\n    )\n        public\n        returns (bytes32 claimRequestId)\n    {\n        if (msg.sender != address(this)) {\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n        }\n\n        bytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\n\n        if (_claims.byId[claimId].issuer != _issuer) {\n            _claims.byTopic[_topic].push(claimId);\n        }\n\n        _claims.byId[claimId].topic = _topic;\n        _claims.byId[claimId].scheme = _scheme;\n        _claims.byId[claimId].issuer = _issuer;\n        _claims.byId[claimId].signature = _signature;\n        _claims.byId[claimId].data = _data;\n        _claims.byId[claimId].uri = _uri;\n\n        emit ClaimAdded(\n            claimId,\n            _topic,\n            _scheme,\n            _issuer,\n            _signature,\n            _data,\n            _uri\n        );\n\n        return claimId;\n    }\n\n    function addClaims(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256[] _topic,\n        address[] _issuer,\n        bytes _signature,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        uint offset = 0;\n        for (uint16 i = 0; i < _topic.length; i++) {\n            addClaim(\n                _keyHolderData,\n                _claims,\n                _topic[i],\n                1,\n                _issuer[i],\n                getBytes(_signature, (i * 65), 65),\n                getBytes(_data, offset, _offsets[i]),\n                \"\"\n            );\n            offset += _offsets[i];\n        }\n    }\n\n    function removeClaim(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        bytes32 _claimId\n    )\n        public\n        returns (bool success)\n    {\n        if (msg.sender != address(this)) {\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n        }\n\n        emit ClaimRemoved(\n            _claimId,\n            _claims.byId[_claimId].topic,\n            _claims.byId[_claimId].scheme,\n            _claims.byId[_claimId].issuer,\n            _claims.byId[_claimId].signature,\n            _claims.byId[_claimId].data,\n            _claims.byId[_claimId].uri\n        );\n\n        delete _claims.byId[_claimId];\n        return true;\n    }\n\n    function getClaim(Claims storage _claims, bytes32 _claimId)\n        public\n        view\n        returns(\n          uint256 topic,\n          uint256 scheme,\n          address issuer,\n          bytes signature,\n          bytes data,\n          string uri\n        )\n    {\n        return (\n            _claims.byId[_claimId].topic,\n            _claims.byId[_claimId].scheme,\n            _claims.byId[_claimId].issuer,\n            _claims.byId[_claimId].signature,\n            _claims.byId[_claimId].data,\n            _claims.byId[_claimId].uri\n        );\n    }\n\n    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n        internal\n        pure\n        returns (bytes)\n    {\n        bytes memory sig = new bytes(_length);\n        uint256 j = 0;\n        for (uint256 k = _offset; k < _offset + _length; k++) {\n            sig[j] = _str[k];\n            j++;\n        }\n        return sig;\n    }\n}\n\ncontract ERC725 {\n\n    uint256 constant MANAGEMENT_KEY = 1;\n    uint256 constant ACTION_KEY = 2;\n    uint256 constant CLAIM_SIGNER_KEY = 3;\n    uint256 constant ENCRYPTION_KEY = 4;\n\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n    function approve(uint256 _id, bool _approve) public returns (bool success);\n}\n\ncontract ERC735 {\n\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer; // msg.sender\n        bytes signature; // this.address + topic + data\n        bytes data;\n        string uri;\n    }\n\n    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n    function removeClaim(bytes32 _claimId) public returns (bool success);\n}\n\ncontract KeyHolder is ERC725 {\n    KeyHolderLibrary.KeyHolderData keyHolderData;\n\n    constructor() public {\n        KeyHolderLibrary.init(keyHolderData);\n    }\n\n    function getKey(bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n    {\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n    }\n\n    function getKeyPurposes(bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes)\n    {\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n    }\n\n    function getKeysByPurpose(uint256 _purpose)\n        public\n        view\n        returns(bytes32[] _keys)\n    {\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n    }\n\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n    }\n\n    function approve(uint256 _id, bool _approve)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n    }\n\n    function execute(address _to, uint256 _value, bytes _data)\n        public\n        returns (uint256 executionId)\n    {\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n    }\n\n    function removeKey(bytes32 _key, uint256 _purpose)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n    }\n\n    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n        public\n        view\n        returns(bool exists)\n    {\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n    }\n\n}\n\ncontract ClaimHolder is KeyHolder, ERC735 {\n\n    ClaimHolderLibrary.Claims claims;\n\n    function addClaim(\n        uint256 _topic,\n        uint256 _scheme,\n        address _issuer,\n        bytes _signature,\n        bytes _data,\n        string _uri\n    )\n        public\n        returns (bytes32 claimRequestId)\n    {\n        return ClaimHolderLibrary.addClaim(\n            keyHolderData,\n            claims,\n            _topic,\n            _scheme,\n            _issuer,\n            _signature,\n            _data,\n            _uri\n        );\n    }\n\n    function addClaims(\n        uint256[] _topic,\n        address[] _issuer,\n        bytes _signature,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        ClaimHolderLibrary.addClaims(\n            keyHolderData,\n            claims,\n            _topic,\n            _issuer,\n            _signature,\n            _data,\n            _offsets\n        );\n    }\n\n    function removeClaim(bytes32 _claimId) public returns (bool success) {\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\n    }\n\n    function getClaim(bytes32 _claimId)\n        public\n        view\n        returns(\n            uint256 topic,\n            uint256 scheme,\n            address issuer,\n            bytes signature,\n            bytes data,\n            string uri\n        )\n    {\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\n    }\n\n    function getClaimIdsByTopic(uint256 _topic)\n        public\n        view\n        returns(bytes32[] claimIds)\n    {\n        return claims.byTopic[_topic];\n    }\n}\n\ncontract ClaimHolderRegistered is ClaimHolder {\n\n    constructor (\n        address _userRegistryAddress\n    )\n        public\n    {\n        V00_UserRegistry userRegistry = V00_UserRegistry(_userRegistryAddress);\n        userRegistry.registerUser();\n    }\n}\n\ncontract ClaimHolderPresigned is ClaimHolderRegistered {\n\n    constructor(\n        address _userRegistryAddress,\n        uint256[] _topic,\n        address[] _issuer,\n        bytes _signature,\n        bytes _data,\n        uint256[] _offsets\n    )\n        ClaimHolderRegistered(_userRegistryAddress)\n        public\n    {\n        ClaimHolderLibrary.addClaims(\n            keyHolderData,\n            claims,\n            _topic,\n            _issuer,\n            _signature,\n            _data,\n            _offsets\n        );\n    }\n}\n\nlibrary KeyHolderLibrary {\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    struct Key {\n        uint256[] purposes; //e.g., MANAGEMENT_KEY = 1, ACTION_KEY = 2, etc.\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\n        bytes32 key;\n    }\n\n    struct KeyHolderData {\n        uint256 executionNonce;\n        mapping (bytes32 => Key) keys;\n        mapping (uint256 => bytes32[]) keysByPurpose;\n        mapping (uint256 => Execution) executions;\n    }\n\n    struct Execution {\n        address to;\n        uint256 value;\n        bytes data;\n        bool approved;\n        bool executed;\n    }\n\n    function init(KeyHolderData storage _keyHolderData)\n        public\n    {\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n        _keyHolderData.keys[_key].key = _key;\n        _keyHolderData.keys[_key].purposes.push(1);\n        _keyHolderData.keys[_key].keyType = 1;\n        _keyHolderData.keysByPurpose[1].push(_key);\n        emit KeyAdded(_key, 1, 1);\n    }\n\n    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n    {\n        return (\n            _keyHolderData.keys[_key].purposes,\n            _keyHolderData.keys[_key].keyType,\n            _keyHolderData.keys[_key].key\n        );\n    }\n\n    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes)\n    {\n        return (_keyHolderData.keys[_key].purposes);\n    }\n\n    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n        public\n        view\n        returns(bytes32[] _keys)\n    {\n        return _keyHolderData.keysByPurpose[_purpose];\n    }\n\n    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        _keyHolderData.keys[_key].key = _key;\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n        _keyHolderData.keys[_key].keyType = _type;\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n        emit KeyAdded(_key, _purpose, _type);\n\n        return true;\n    }\n\n    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n        public\n        returns (bool success)\n    {\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n        emit Approved(_id, _approve);\n\n        if (_approve == true) {\n            _keyHolderData.executions[_id].approved = true;\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n            if (success) {\n                _keyHolderData.executions[_id].executed = true;\n                emit Executed(\n                    _id,\n                    _keyHolderData.executions[_id].to,\n                    _keyHolderData.executions[_id].value,\n                    _keyHolderData.executions[_id].data\n                );\n                return;\n            } else {\n                emit ExecutionFailed(\n                    _id,\n                    _keyHolderData.executions[_id].to,\n                    _keyHolderData.executions[_id].value,\n                    _keyHolderData.executions[_id].data\n                );\n                return;\n            }\n        } else {\n            _keyHolderData.executions[_id].approved = false;\n        }\n        return true;\n    }\n\n    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n        public\n        returns (uint256 executionId)\n    {\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n        }\n\n        _keyHolderData.executionNonce++;\n        return _keyHolderData.executionNonce-1;\n    }\n\n    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        returns (bool success)\n    {\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n        // Remove purpose from key\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n        for (uint i = 0; i < purposes.length; i++) {\n            if (purposes[i] == _purpose) {\n                purposes[i] = purposes[purposes.length - 1];\n                delete purposes[purposes.length - 1];\n                purposes.length--;\n                break;\n            }\n        }\n\n        // If no more purposes, delete key\n        if (purposes.length == 0) {\n            delete _keyHolderData.keys[_key];\n        }\n\n        // Remove key from keysByPurpose\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n        for (uint j = 0; j < keys.length; j++) {\n            if (keys[j] == _key) {\n                keys[j] = keys[keys.length - 1];\n                delete keys[keys.length - 1];\n                keys.length--;\n                break;\n            }\n        }\n\n        return true;\n    }\n\n    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        view\n        returns(bool result)\n    {\n        bool isThere;\n        if (_keyHolderData.keys[_key].key == 0) {\n            return false;\n        }\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n        for (uint i = 0; i < purposes.length; i++) {\n            if (purposes[i] <= _purpose) {\n                isThere = true;\n                break;\n            }\n        }\n        return isThere;\n    }\n}\n\ncontract V00_UserRegistry {\n    /*\n    * Events\n    */\n\n    event NewUser(address _address, address _identity);\n\n    /*\n    * Storage\n    */\n\n    // Mapping from ethereum wallet to ERC725 identity\n    mapping(address => address) public users;\n\n    /*\n    * Public functions\n    */\n\n    /// @dev registerUser(): Add a user to the registry\n    function registerUser()\n        public\n    {\n        users[tx.origin] = msg.sender;\n        emit NewUser(tx.origin, msg.sender);\n    }\n\n    /// @dev clearUser(): Remove user from the registry\n    function clearUser()\n        public\n    {\n        users[msg.sender] = 0;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620016e2380380620016e283398101604081815282516020840151828501516060860151608087015160a08801517f30864be500000000000000000000000000000000000000000000000000000000885260006004890181905296519598948501979385019692850195918501940192889291737d26ae0838c4e15a87e9d3b26b03a0256c7554d8916330864be59160248083019286929190829003018186803b158015620000c357600080fd5b505af4158015620000d8573d6000803e3d6000fd5b5050505081905080600160a060020a0316634d3820eb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156200013757600080fd5b505af11580156200014c573d6000803e3d6000fd5b5050505050507379b152da4ad8fb774700639bed68a965b044064463428e59ee6000600488888888886040518863ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180888152602001878152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b83811015620001fe578181015183820152602001620001e4565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b838110156200023f57818101518382015260200162000225565b50505050905001868103845289818151815260200191508051906020019080838360005b838110156200027d57818101518382015260200162000263565b50505050905090810190601f168015620002ab5780820380516001836020036101000a031916815260200191505b5086810383528851815288516020918201918a019080838360005b83811015620002e0578181015183820152602001620002c6565b50505050905090810190601f1680156200030e5780820380516001836020036101000a031916815260200191505b508681038252875181528751602091820191808a01910280838360005b83811015620003455781810151838201526020016200032b565b505050509050019c5050505050505050505050505060006040518083038186803b1580156200037357600080fd5b505af415801562000388573d6000803e3d6000fd5b5050505050505050505061134080620003a26000396000f3006080604052600436106100ab5763ffffffff60e060020a60003504166312aaac7081146100b05780631d3812401461012957806321c148f01461015b5780634eee424a146102a057806353d413c5146102b8578063747442d3146102d357806380e9e9e1146102f05780639010f72614610358578063b1a34e0d14610370578063b61d27f61461046a578063c9100bcb146104d3578063d202158d14610656578063fb307b3414610671575b600080fd5b3480156100bc57600080fd5b506100c8600435610689565b60408051602080820185905291810183905260608082528551908201528451909182916080830191878101910280838360005b838110156101135781810151838201526020016100fb565b5050505090500194505050505060405180910390f35b34801561013557600080fd5b506101476004356024356044356107a2565b604080519115158252519081900360200190f35b34801561016757600080fd5b506040805160206004803580820135838102808601850190965280855261029e95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506108589650505050505050565b005b3480156102ac57600080fd5b50610147600435610a72565b3480156102c457600080fd5b50610147600435602435610b1e565b3480156102df57600080fd5b506101476004356024351515610bcc565b3480156102fc57600080fd5b50610308600435610c48565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561034457818101518382015260200161032c565b505050509050019250505060405180910390f35b34801561036457600080fd5b50610308600435610cab565b34801561037c57600080fd5b50604080516020601f606435600481810135928301849004840285018401909552818452610458948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610d999650505050505050565b60408051918252519081900360200190f35b34801561047657600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610458948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610f909650505050505050565b3480156104df57600080fd5b506104eb600435611071565b6040518087815260200186815260200185600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561055457818101518382015260200161053c565b50505050905090810190601f1680156105815780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156105b457818101518382015260200161059c565b50505050905090810190601f1680156105e15780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156106145781810151838201526020016105fc565b50505050905090810190601f1680156106415780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561066257600080fd5b50610147600435602435611226565b34801561067d57600080fd5b506103086004356112a1565b604080517fb01a9fb3000000000000000000000000000000000000000000000000000000008152600060048201819052602482018490529151606092918291737d26ae0838c4e15a87e9d3b26b03a0256c7554d89163b01a9fb39160448083019286929190829003018186803b15801561070257600080fd5b505af4158015610716573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052606081101561073f57600080fd5b81019080805164010000000081111561075757600080fd5b8201602081018481111561076a57600080fd5b815185602082028301116401000000008211171561078757600080fd5b50506020820151604090920151909891975095509350505050565b604080517f5d601c3a0000000000000000000000000000000000000000000000000000000081526000600482018190526024820186905260448201859052606482018490529151737d26ae0838c4e15a87e9d3b26b03a0256c7554d891635d601c3a916084808301926020929190829003018186803b15801561082457600080fd5b505af4158015610838573d6000803e3d6000fd5b505050506040513d602081101561084e57600080fd5b5051949350505050565b7379b152da4ad8fb774700639bed68a965b044064463428e59ee6000600488888888886040518863ffffffff1660e060020a02815260040180888152602001878152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b838110156108e95781810151838201526020016108d1565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b83811015610928578181015183820152602001610910565b50505050905001868103845289818151815260200191508051906020019080838360005b8381101561096457818101518382015260200161094c565b50505050905090810190601f1680156109915780820380516001836020036101000a031916815260200191505b5086810383528851815288516020918201918a019080838360005b838110156109c45781810151838201526020016109ac565b50505050905090810190601f1680156109f15780820380516001836020036101000a031916815260200191505b508681038252875181528751602091820191808a01910280838360005b83811015610a26578181015183820152602001610a0e565b505050509050019c5050505050505050505050505060006040518083038186803b158015610a5357600080fd5b505af4158015610a67573d6000803e3d6000fd5b505050505050505050565b604080517f5c02fae10000000000000000000000000000000000000000000000000000000081526000600482810182905260248301526044820184905291517379b152da4ad8fb774700639bed68a965b044064491635c02fae1916064808301926020929190829003018186803b158015610aec57600080fd5b505af4158015610b00573d6000803e3d6000fd5b505050506040513d6020811015610b1657600080fd5b505192915050565b604080517f3f47616d00000000000000000000000000000000000000000000000000000000815260006004820181905260248201859052604482018490529151737d26ae0838c4e15a87e9d3b26b03a0256c7554d891633f47616d916064808301926020929190829003018186803b158015610b9957600080fd5b505af4158015610bad573d6000803e3d6000fd5b505050506040513d6020811015610bc357600080fd5b50519392505050565b604080517f67d4865f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820185905283151560448301529151737d26ae0838c4e15a87e9d3b26b03a0256c7554d8916367d4865f916064808301926020929190829003018186803b158015610b9957600080fd5b600081815260056020908152604091829020805483518184028101840190945280845260609392830182828015610c9f57602002820191906000526020600020905b81548152600190910190602001808311610c8a575b50505050509050919050565b6060737d26ae0838c4e15a87e9d3b26b03a0256c7554d863746199f96000846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060006040518083038186803b158015610d0857600080fd5b505af4158015610d1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d4557600080fd5b810190808051640100000000811115610d5d57600080fd5b82016020810184811115610d7057600080fd5b8151856020820283011164010000000082111715610d8d57600080fd5b50909695505050505050565b60007379b152da4ad8fb774700639bed68a965b044064463bd2d0c28600060048a8a8a8a8a8a6040518963ffffffff1660e060020a0281526004018089815260200188815260200187815260200186815260200185600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610e46578181015183820152602001610e2e565b50505050905090810190601f168015610e735780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610ea6578181015183820152602001610e8e565b50505050905090810190601f168015610ed35780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015610f06578181015183820152602001610eee565b50505050905090810190601f168015610f335780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b158015610f5957600080fd5b505af4158015610f6d573d6000803e3d6000fd5b505050506040513d6020811015610f8357600080fd5b5051979650505050505050565b6000737d26ae0838c4e15a87e9d3b26b03a0256c7554d863e9356c6f60008686866040518563ffffffff1660e060020a0281526004018085815260200184600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561102457818101518382015260200161100c565b50505050905090810190601f1680156110515780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b15801561082457600080fd5b600080600060608060607379b152da4ad8fb774700639bed68a965b0440644638522d0eb6004896040518363ffffffff1660e060020a0281526004018083815260200182600019166000191681526020019250505060006040518083038186803b1580156110de57600080fd5b505af41580156110f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260c081101561111b57600080fd5b815160208301516040840151606085018051939592949193918301929164010000000081111561114a57600080fd5b8201602081018481111561115d57600080fd5b815164010000000081118282018710171561117757600080fd5b5050929190602001805164010000000081111561119357600080fd5b820160208101848111156111a657600080fd5b81516401000000008111828201871017156111c057600080fd5b505092919060200180516401000000008111156111dc57600080fd5b820160208101848111156111ef57600080fd5b815164010000000081118282018710171561120957600080fd5b505092919050505095509550955095509550955091939550919395565b604080517fd8188a4000000000000000000000000000000000000000000000000000000000815260006004820181905260248201859052604482018490529151737d26ae0838c4e15a87e9d3b26b03a0256c7554d89163d8188a40916064808301926020929190829003018186803b158015610b9957600080fd5b604080517f0f982bac000000000000000000000000000000000000000000000000000000008152600060048201819052602482018490529151606092737d26ae0838c4e15a87e9d3b26b03a0256c7554d892630f982bac9260448083019392829003018186803b158015610d0857600080fd00a165627a7a723058204695574c5651e91aec145f839a14c41ab9d29e47b770841930742ee27c6ed3c50029000000000000000000000000a4428439ec214cc68240552ec93298d1da39111400000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c3db0251e72ab9dd92b451312c4919c193b1e2cd112a3f2a60d0fe529c6792207a267162fe41a1c73dd5a130c7bdc1a3b14af573f0a85017224537b943d957fa491c5311b51a145b1bb374eb6ebcb89f3d50188ab9363689cf416582aceb03f3c6af471fb926f37a5b0552cc88b9949f8ec13a6b73961032ecc1042481617a1e6d751b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000605c0d26271c07e598a446bc20c482af07f59a8ea8df961f17f4e4ed387fde6b9fcaa54e1b0a1dbfc8e1ecf2baef72247781ea07547f878d8b29b21543d990a365630d4fe9f662340de7cc810fafaa9248f037413f827776e8c81c8d09d18410c10000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020",
  "constructorArguments": "000000000000000000000000a4428439ec214cc68240552ec93298d1da39111400000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c3db0251e72ab9dd92b451312c4919c193b1e2cd112a3f2a60d0fe529c6792207a267162fe41a1c73dd5a130c7bdc1a3b14af573f0a85017224537b943d957fa491c5311b51a145b1bb374eb6ebcb89f3d50188ab9363689cf416582aceb03f3c6af471fb926f37a5b0552cc88b9949f8ec13a6b73961032ecc1042481617a1e6d751b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000605c0d26271c07e598a446bc20c482af07f59a8ea8df961f17f4e4ed387fde6b9fcaa54e1b0a1dbfc8e1ecf2baef72247781ea07547f878d8b29b21543d990a365630d4fe9f662340de7cc810fafaa9248f037413f827776e8c81c8d09d18410c10000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020"
}