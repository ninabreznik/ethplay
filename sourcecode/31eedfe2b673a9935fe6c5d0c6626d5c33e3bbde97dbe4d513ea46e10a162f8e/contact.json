{
  "address": "0xf030b8fbe57c4498298449fc78a0f7054a5ef76d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ArkToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-03\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC721 interface\n * @dev see https://github.com/ethereum/eips/issues/721\n */\ncontract ERC721 {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function transfer(address _to, uint256 _tokenId) public;\n  function approve(address _to, uint256 _tokenId) public;\n  function takeOwnership(uint256 _tokenId) public;\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  mapping (address => bool) public admins;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n    admins[owner] = true;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  \n  modifier onlyAdmin() {\n    require(admins[msg.sender]);\n    _;\n  }\n\n  function changeAdmin(address _newAdmin, bool _approved) onlyOwner public {\n    admins[_newAdmin] = _approved;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  \n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC721Token\n * Generic implementation for the required functionality of the ERC721 standard\n */\ncontract ArkToken is ERC721, Ownable {\n  using SafeMath for uint256;\n\n  // Total amount of tokens\n  uint256 private totalTokens;\n  uint256 public developerCut;\n\n  // Animal Data\n  mapping (uint256 => Animal) public arkData;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private tokenOwner;\n\n  // mom ID => baby ID\n  mapping (uint256 => uint256) public babies;\n  \n  // baby ID => parents\n  mapping (uint256 => uint256[2]) public babyMommas;\n  \n  // token ID => their baby-makin' partner\n  mapping (uint256 => uint256) public mates;\n\n  // baby ID => sum price of mom and dad needed to make this babby\n  mapping (uint256 => uint256) public babyMakinPrice;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private tokenApprovals;\n\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) private ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private ownedTokensIndex;\n\n  // Balances from % payouts.\n  mapping (address => uint256) public birtherBalances; \n\n  // Events\n  event Purchase(uint256 indexed _tokenId, address indexed _buyer, address indexed _seller, uint256 _purchasePrice);\n  event Birth(address indexed _birther, uint256 indexed _mom, uint256 _dad, uint256 indexed _baby);\n\n  // Purchasing Caps for Determining Next Pool Cut\n  uint256 private firstCap  = 0.5 ether;\n  uint256 private secondCap = 1.0 ether;\n  uint256 private thirdCap  = 1.5 ether;\n  uint256 private finalCap  = 3.0 ether;\n\n  // Struct to store Animal Data\n  struct Animal {\n    uint256 price;         // Current price of the item.\n    uint256 lastPrice;     // Last price needed to calculate whether baby-makin' limit has made it\n    address owner;         // Current owner of the item.\n    address birther;       // Address that birthed the animal.\n    uint256 birtherPct;    // Percent that birther will get for sales. The actual percent is this / 10.\n    uint8 gender;          // Gender of this animal: 0 for male, 1 for female.\n  }\n\n  function createToken(uint256 _tokenId, uint256 _startingPrice, uint256 _cut, address _owner, uint8 _gender) onlyAdmin() public {\n    // make sure price > 0\n    require(_startingPrice > 0);\n    // make sure token hasn't been used yet\n    require(arkData[_tokenId].price == 0);\n    \n    // create new token\n    Animal storage curAnimal = arkData[_tokenId];\n\n    curAnimal.owner = _owner;\n    curAnimal.price = _startingPrice;\n    curAnimal.lastPrice = _startingPrice;\n    curAnimal.gender = _gender;\n    curAnimal.birther = _owner;\n    curAnimal.birtherPct = _cut;\n\n    // mint new token\n    _mint(_owner, _tokenId);\n  }\n\n  function createMultiple (uint256[] _itemIds, uint256[] _prices, uint256[] _cuts, address[] _owners, uint8[] _genders) onlyAdmin() external {\n    for (uint256 i = 0; i < _itemIds.length; i++) {\n      createToken(_itemIds[i], _prices[i], _cuts[i], _owners[i], _genders[i]);\n    }\n  }\n\n  function createBaby(uint256 _dad, uint256 _mom, uint256 _baby, uint256 _price) public onlyAdmin() \n  {\n      mates[_mom] = _dad;\n      mates[_dad] = _mom;\n      babies[_mom] = _baby;\n      babyMommas[_baby] = [_mom, _dad];\n      babyMakinPrice[_baby] = _price;\n  }\n  \n  function createBabies(uint256[] _dads, uint256[] _moms, uint256[] _babies, uint256[] _prices) external onlyAdmin() {\n      require(_moms.length == _babies.length && _babies.length == _dads.length);\n      for (uint256 i = 0; i < _moms.length; i++) {\n          createBaby(_dads[i], _moms[i], _babies[i], _prices[i]);\n      }\n  }\n\n  /**\n  * @dev Determines next price of token\n  * @param _price uint256 ID of current price\n  */\n  function getNextPrice (uint256 _price) private view returns (uint256 _nextPrice) {\n    if (_price < firstCap) {\n      return _price.mul(150).div(95);\n    } else if (_price < secondCap) {\n      return _price.mul(135).div(96);\n    } else if (_price < thirdCap) {\n      return _price.mul(125).div(97);\n    } else if (_price < finalCap) {\n      return _price.mul(117).div(97);\n    } else {\n      return _price.mul(115).div(98);\n    }\n  }\n\n  /**\n  * @dev Purchase animal from previous owner\n  * @param _tokenId uint256 of token\n  */\n  function buyToken(uint256 _tokenId) public \n    payable\n    isNotContract(msg.sender)\n  {\n\n    // get data from storage\n    Animal storage animal = arkData[_tokenId];\n    uint256 price = animal.price;\n    address oldOwner = animal.owner;\n    address newOwner = msg.sender;\n    uint256 excess = msg.value.sub(price);\n\n    // revert checks\n    require(price > 0);\n    require(msg.value >= price);\n    require(oldOwner != msg.sender);\n    require(oldOwner != address(0) && oldOwner != address(1)); // We're gonna put unbirthed babbies at 0x1\n    \n    uint256 totalCut = price.mul(4).div(100);\n    \n    uint256 birtherCut = price.mul(animal.birtherPct).div(1000); // birtherPct is % * 10 so we / 1000\n    birtherBalances[animal.birther] = birtherBalances[animal.birther].add(birtherCut);\n    \n    uint256 devCut = totalCut.sub(birtherCut);\n    developerCut = developerCut.add(devCut);\n\n    transferToken(oldOwner, newOwner, _tokenId);\n\n    // raise event\n    Purchase(_tokenId, newOwner, oldOwner, price);\n\n    // set new prices\n    animal.price = getNextPrice(price);\n    animal.lastPrice = price;\n\n    // Transfer payment to old owner minus the developer's and birther's cut.\n    oldOwner.transfer(price.sub(totalCut));\n    // Send refund to owner if needed\n    if (excess > 0) {\n      newOwner.transfer(excess);\n    }\n    \n    checkBirth(_tokenId);\n  }\n  \n  /**\n   * @dev Check to see whether a newly purchased animal should give birth.\n   * @param _tokenId Unique ID of the newly transferred animal.\n  */\n  function checkBirth(uint256 _tokenId)\n    internal\n  {\n    uint256 mom = 0;\n    \n    // gender 0 = male, 1 = female\n    if (arkData[_tokenId].gender == 0) {\n      mom = mates[_tokenId];\n    } else {\n      mom = _tokenId;\n    }\n    \n    if (babies[mom] > 0) {\n      if (tokenOwner[mates[_tokenId]] == msg.sender) {\n        // Check if the sum price to make a baby for these mates has been passed.\n        uint256 sumPrice = arkData[_tokenId].lastPrice + arkData[mates[_tokenId]].lastPrice;\n        if (sumPrice >= babyMakinPrice[babies[mom]]) {\n          autoBirth(babies[mom]);\n          \n          Birth(msg.sender, mom, mates[mom], babies[mom]);\n          babyMakinPrice[babies[mom]] = 0;\n          babies[mom] = 0;\n          mates[mates[mom]] = 0;\n          mates[mom] = 0;\n        }\n      }\n    }\n  }\n  \n  /**\n   * @dev Internal function to birth a baby if an owner has both mom and dad.\n   * @param _baby Token ID of the baby to birth.\n  */\n  function autoBirth(uint256 _baby)\n    internal\n  {\n    Animal storage animal = arkData[_baby];\n    animal.birther = msg.sender;\n    transferToken(animal.owner, msg.sender, _baby);\n  }\n\n  /**\n  * @dev Transfer Token from Previous Owner to New Owner\n  * @param _from previous owner address\n  * @param _to new owner address\n  * @param _tokenId uint256 ID of token\n  */\n  function transferToken(address _from, address _to, uint256 _tokenId) internal {\n    // check token exists\n    require(tokenExists(_tokenId));\n\n    // make sure previous owner is correct\n    require(arkData[_tokenId].owner == _from);\n\n    require(_to != address(0));\n    require(_to != address(this));\n\n    // clear approvals linked to this token\n    clearApproval(_from, _tokenId);\n\n    // remove token from previous owner\n    removeToken(_from, _tokenId);\n\n    // update owner and add token to new owner\n    addToken(_to, _tokenId);\n\n   //raise event\n    Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n  * @dev Withdraw dev's cut\n  */\n  function withdraw(uint256 _amount) public onlyAdmin() {\n    if (_amount == 0) { \n      _amount = developerCut; \n    }\n    developerCut = developerCut.sub(_amount);\n    owner.transfer(_amount);\n  }\n\n  /**\n   * @dev Withdraw anyone's birther balance.\n   * @param _beneficiary The person whose balance shall be sent to them.\n  */\n  function withdrawBalance(address _beneficiary) external {\n    uint256 payout = birtherBalances[_beneficiary];\n    birtherBalances[_beneficiary] = 0;\n    _beneficiary.transfer(payout);\n  }\n\n  /**\n   * @dev Return all relevant data for an animal.\n   * @param _tokenId Unique animal ID.\n  */\n  function getArkData (uint256 _tokenId) external view \n  returns (address _owner, uint256 _price, uint256 _nextPrice, uint256 _mate, \n           address _birther, uint8 _gender, uint256 _baby, uint256 _babyPrice) \n  {\n    Animal memory animal = arkData[_tokenId];\n    uint256 baby;\n    if (animal.gender == 1) baby = babies[_tokenId];\n    else baby = babies[mates[_tokenId]];\n    \n    return (animal.owner, animal.price, getNextPrice(animal.price), mates[_tokenId], \n            animal.birther, animal.gender, baby, babyMakinPrice[baby]);\n  }\n  \n  /**\n   * @dev Get sum price required to birth baby.\n   * @param _babyId Unique baby Id.\n  */\n  function getBabyMakinPrice(uint256 _babyId) external view\n  returns (uint256 price)\n  {\n    price = babyMakinPrice[_babyId];\n  }\n\n  /**\n   * @dev Get the parents of a certain baby.\n   * @param _babyId Unique baby Id.\n  */\n  function getBabyMommas(uint256 _babyId) external view\n  returns (uint256[2] parents)\n  {\n    parents = babyMommas[_babyId];\n  }\n  \n  /**\n   * @dev Frontend can use this to find the birther percent for animal.\n   * @param _tokenId The unique id for the animal.\n  */\n  function getBirthCut(uint256 _tokenId) external view\n  returns (uint256 birthCut)\n  {\n    birthCut = arkData[_tokenId].birtherPct;\n  }\n\n  /**\n   * @dev Check the birther balance of a certain address.\n   * @param _owner The address to check the balance of.\n  */\n  function checkBalance(address _owner) external view returns (uint256) {\n    return birtherBalances[_owner];\n  }\n\n  /**\n  * @dev Determines if token exists by checking it's price\n  * @param _tokenId uint256 ID of token\n  */\n  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\n    return arkData[_tokenId].price > 0;\n  }\n\n  /**\n  * @dev Guarantees msg.sender is owner of the given token\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n  */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n  * @dev Guarantees msg.sender is not a contract\n  * @param _buyer address of person buying animal\n  */\n  modifier isNotContract(address _buyer) {\n    uint size;\n    assembly { size := extcodesize(_buyer) }\n    require(size == 0);\n    _;\n  }\n\n\n  /**\n  * @dev Gets the total amount of tokens stored by the contract\n  * @return uint256 representing the total amount of tokens\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalTokens;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address\n  * @param _owner address to query the balance of\n  * @return uint256 representing the amount owned by the passed address\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return ownedTokens[_owner].length;\n  }\n\n  /**\n  * @dev Gets the list of tokens owned by a given address\n  * @param _owner address to query the tokens of\n  * @return uint256[] representing the list of tokens owned by the passed address\n  */\n  function tokensOf(address _owner) public view returns (uint256[]) {\n    return ownedTokens[_owner];\n  }\n\n  /**\n  * @dev Gets the owner of the specified token ID\n  * @param _tokenId uint256 ID of the token to query the owner of\n  * @return owner address currently marked as the owner of the given token ID\n  */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    return owner;\n  }\n\n  /**\n   * @dev Gets the approved address to take ownership of a given token ID\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved to take ownership of the given token ID\n   */\n  function approvedFor(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n  * @dev Transfers the ownership of a given token ID to another address\n  * @param _to address to receive the ownership of the given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n  }\n\n  /**\n  * @dev Approves another address to claim for the ownership of the given token ID\n  * @param _to address to be approved for the given token ID\n  * @param _tokenId uint256 ID of the token to be approved\n  */\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n      tokenApprovals[_tokenId] = _to;\n      Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n  * @dev Claims the ownership of a given token ID\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n  */\n  function takeOwnership(uint256 _tokenId) public {\n    require(isApprovedFor(msg.sender, _tokenId));\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n  }\n\n  /**\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\n   * @param _owner address of the owner to query the approval of\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return bool whether the msg.sender is approved for the given token ID or not\n   */\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n    return approvedFor(_tokenId) == _owner;\n  }\n  \n  /**\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n  * @param _from address which you want to send tokens from\n  * @param _to address which you want to transfer the token to\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal isNotContract(_to) {\n    require(_to != address(0));\n    require(_to != ownerOf(_tokenId));\n    require(ownerOf(_tokenId) == _from);\n\n    clearApproval(_from, _tokenId);\n    removeToken(_from, _tokenId);\n    addToken(_to, _tokenId);\n    Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to clear current approval of a given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApproval(address _owner, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _owner);\n    tokenApprovals[_tokenId] = 0;\n    Approval(_owner, 0, _tokenId);\n  }\n\n\n    /**\n  * @dev Mint token function\n  * @param _to The address that will own the minted token\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n  */\n  function _mint(address _to, uint256 _tokenId) internal {\n    addToken(_to, _tokenId);\n    Transfer(0x0, _to, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to add a token ID to the list of a given address\n  * @param _to address representing the new owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n  */\n  function addToken(address _to, uint256 _tokenId) private {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    arkData[_tokenId].owner = _to;\n    \n    uint256 length = balanceOf(_to);\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n    totalTokens = totalTokens.add(1);\n  }\n\n  /**\n  * @dev Internal function to remove a token ID from the list of a given address\n  * @param _from address representing the previous owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n  */\n  function removeToken(address _from, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _from);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    tokenOwner[_tokenId] = 0;\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n    totalTokens = totalTokens.sub(1);\n  }\n\n  function name() public pure returns (string _name) {\n    return \"EthersArk Token\";\n  }\n\n  function symbol() public pure returns (string _symbol) {\n    return \"EARK\";\n  }\n\n}",
  "bytecode": "60606040526706f05b59d3b20000600e55670de0b6b3a7640000600f556714d1120d7b1600006010556729a2241af62c0000601155336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612fe5806100fb6000396000f3006060604052600436106101ab576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062923f9e146101b057806306fdde03146101eb578063095ea7b31461027957806311c53c08146102bb57806318160ddd146103085780632a6dd48f146103315780632d296bf1146103945780632e1a7d4d146103ac578063429b62e5146103cf5780634b17598d146104205780635a3f2672146104575780635f515226146104e55780636352211e1461053257806367de80db1461059557806370a0823114610613578063756af45f146106605780637658632d146106995780638725d6be1461075157806387e89845146107b1578063899ae006146108105780638da5cb5b1461087a57806395d89b41146108cf578063a9059cbb1461095d578063b2e6ceeb1461099f578063c65b490e146109c2578063c8852b5b146109f9578063d9c490ab14610a30578063dc11a49614610a67578063de81273314610aab578063e23cbad114610ae9578063e72fd4e114610baf578063f023f23414610bd8578063f2fde38b14610c18578063f42a8eaf14610c51575b600080fd5b34156101bb57600080fd5b6101d16004808035906020019091905050610c88565b604051808215151515815260200191505060405180910390f35b34156101f657600080fd5b6101fe610caa565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561023e578082015181840152602081019050610223565b50505050905090810190601f16801561026b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028457600080fd5b6102b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ced565b005b34156102c657600080fd5b6102f2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e80565b6040518082815260200191505060405180910390f35b341561031357600080fd5b61031b610e98565b6040518082815260200191505060405180910390f35b341561033c57600080fd5b6103526004808035906020019091905050610ea2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103aa6004808035906020019091905050610edf565b005b34156103b757600080fd5b6103cd60048080359060200190919050506112ca565b005b34156103da57600080fd5b610406600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113b0565b604051808215151515815260200191505060405180910390f35b341561042b57600080fd5b61044160048080359060200190919050506113d0565b6040518082815260200191505060405180910390f35b341561046257600080fd5b61048e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113e8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104d15780820151818401526020810190506104b6565b505050509050019250505060405180910390f35b34156104f057600080fd5b61051c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611485565b6040518082815260200191505060405180910390f35b341561053d57600080fd5b61055360048080359060200190919050506114ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105a057600080fd5b610611600480803590602001908201803590602001919091929080359060200190820180359060200191909192908035906020019082018035906020019190919290803590602001908201803590602001919091929080359060200190820180359060200191909192905050611510565b005b341561061e57600080fd5b61064a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061161e565b6040518082815260200191505060405180910390f35b341561066b57600080fd5b610697600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061166a565b005b34156106a457600080fd5b6106ba6004808035906020019091905050611737565b604051808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b341561075c57600080fd5b6107af600480803590602001909190803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560ff169060200190919050506117c0565b005b34156107bc57600080fd5b6107d26004808035906020019091905050611933565b6040518082600260200280838360005b838110156107fd5780820151818401526020810190506107e2565b5050505090500191505060405180910390f35b341561081b57600080fd5b61087860048080359060200190820180359060200191909192908035906020019082018035906020019190919290803590602001908201803590602001919091929080359060200190820180359060200191909192905050611991565b005b341561088557600080fd5b61088d611a94565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108da57600080fd5b6108e2611ab9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610922578082015181840152602081019050610907565b50505050905090810190601f16801561094f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561096857600080fd5b61099d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611afc565b005b34156109aa57600080fd5b6109c06004808035906020019091905050611b4f565b005b34156109cd57600080fd5b6109e36004808035906020019091905050611b7a565b6040518082815260200191505060405180910390f35b3415610a0457600080fd5b610a1a6004808035906020019091905050611b97565b6040518082815260200191505060405180910390f35b3415610a3b57600080fd5b610a516004808035906020019091905050611bb7565b6040518082815260200191505060405180910390f35b3415610a7257600080fd5b610aa9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050611bcf565b005b3415610ab657600080fd5b610ae76004808035906020019091908035906020019091908035906020019091908035906020019091905050611c85565b005b3415610af457600080fd5b610b0a6004808035906020019091905050611d7a565b604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460ff1660ff1681526020018381526020018281526020019850505050505050505060405180910390f35b3415610bba57600080fd5b610bc2611f54565b6040518082815260200191505060405180910390f35b3415610be357600080fd5b610c026004808035906020019091908035906020019091905050611f5a565b6040518082815260200191505060405180910390f35b3415610c2357600080fd5b610c4f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611f81565b005b3415610c5c57600080fd5b610c7260048080359060200190919050506120d6565b6040518082815260200191505060405180910390f35b6000806004600084815260200190815260200160002060000154119050919050565b610cb2612e47565b6040805190810160405280600f81526020017f45746865727341726b20546f6b656e0000000000000000000000000000000000815250905090565b6000813373ffffffffffffffffffffffffffffffffffffffff16610d10826114ce565b73ffffffffffffffffffffffffffffffffffffffff16141515610d3257600080fd5b610d3b836114ce565b91508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610d7857600080fd5b6000610d8384610ea2565b73ffffffffffffffffffffffffffffffffffffffff16141580610dbd575060008473ffffffffffffffffffffffffffffffffffffffff1614155b15610e7a5783600a600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a35b50505050565b600d6020528060005260406000206000915090505481565b6000600254905090565b6000600a600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600080600080600080336000813b9050600081141515610f0157600080fd5b600460008c81526020019081526020016000209950896000015498508960020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169750339650610f5a89346120ee90919063ffffffff16565b9550600089111515610f6b57600080fd5b883410151515610f7a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614151515610fb557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415801561101f5750600173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b151561102a57600080fd5b611051606461104360048c61210790919063ffffffff16565b61213a90919063ffffffff16565b945061107e6103e86110708c600401548c61210790919063ffffffff16565b61213a90919063ffffffff16565b93506110f684600d60008d60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461215590919063ffffffff16565b600d60008c60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061117084866120ee90919063ffffffff16565b92506111878360035461215590919063ffffffff16565b60038190555061119888888d612173565b8773ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168c7fe3cf0e0098f447c6d9bc08ffbbf3f193d35c51b57d7de6bb9ccb79f4995ccf718c6040518082815260200191505060405180910390a4611207896122f6565b8a60000181905550888a600101819055508773ffffffffffffffffffffffffffffffffffffffff166108fc611245878c6120ee90919063ffffffff16565b9081150290604051600060405180830381858888f19350505050151561126a57600080fd5b60008611156112b4578673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f1935050505015156112b357600080fd5b5b6112bd8b612407565b5050505050505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561132257600080fd5b60008114156113315760035490505b611346816003546120ee90919063ffffffff16565b6003819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156113ad57600080fd5b50565b60016020528060005260406000206000915054906101000a900460ff1681565b60096020528060005260406000206000915090505481565b6113f0612e5b565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561147957602002820191906000526020600020905b815481526020019060010190808311611465575b50505050509050919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080915050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561156a57600080fd5b600090505b8a8a9050811015611611576116048b8b83818110151561158b57fe5b905060200201358a8a8481811015156115a057fe5b9050602002013589898581811015156115b557fe5b9050602002013588888681811015156115ca57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1687878781811015156115f557fe5b9050602002013560ff166117c0565b808060010191505061156f565b5050505050505050505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561173357600080fd5b5050565b60046020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050160009054906101000a900460ff16905086565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561181a57600080fd5b60008511151561182957600080fd5b6000600460008881526020019081526020016000206000015414151561184e57600080fd5b600460008781526020019081526020016000209050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160000181905550848160010181905550818160050160006101000a81548160ff021916908360ff160217905550828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083816004018190555061192b8387612689565b505050505050565b61193b612e6f565b60076000838152602001908152602001600020600280602002604051908101604052809291908260028015611985576020028201915b815481526020019060010190808311611971575b50505050509050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156119eb57600080fd5b8484905087879050148015611a0557508888905085859050145b1515611a1057600080fd5b600090505b86869050811015611a8957611a7c8989838181101515611a3157fe5b905060200201358888848181101515611a4657fe5b905060200201358787858181101515611a5b57fe5b905060200201358686868181101515611a7057fe5b90506020020135611c85565b8080600101915050611a15565b505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611ac1612e47565b6040805190810160405280600481526020017f4541524b00000000000000000000000000000000000000000000000000000000815250905090565b803373ffffffffffffffffffffffffffffffffffffffff16611b1d826114ce565b73ffffffffffffffffffffffffffffffffffffffff16141515611b3f57600080fd5b611b4a3384846126e7565b505050565b611b593382612848565b1515611b6457600080fd5b611b77611b70826114ce565b33836126e7565b50565b600060096000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020600401549050919050565b60066020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c2a57600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611cdd57600080fd5b83600860008581526020019081526020016000208190555082600860008681526020019081526020016000208190555081600660008581526020019081526020016000208190555060408051908101604052808481526020018581525060076000848152602001908152602001600020906002611d5b929190612e96565b5080600960008481526020019081526020016000208190555050505050565b600080600080600080600080611d8e612ed6565b6000600460008c815260200190815260200160002060c0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff1681525050915060018260a0015160ff161415611ec357600660008c8152602001908152602001600020549050611eed565b60066000600860008e81526020019081526020016000205481526020019081526020016000205490505b81604001518260000151611f0484600001516122f6565b600860008f81526020019081526020016000205485606001518660a00151866009600089815260200190815260200160002054995099509950995099509950995099505050919395975091939597565b60035481565b600760205281600052604060002081600281101515611f7557fe5b01600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fdc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561201857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60086020528060005260406000206000915090505481565b60008282111515156120fc57fe5b818303905092915050565b60008082840290506000841480612128575082848281151561212557fe5b04145b151561213057fe5b8091505092915050565b600080828481151561214857fe5b0490508091505092915050565b600080828401905083811015151561216957fe5b8091505092915050565b61217c81610c88565b151561218757600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156121f757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561223357600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561226e57600080fd5b6122788382612889565b6122828382612972565b61228c8282612bfa565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000600e5482101561233057612329605f61231b60968561210790919063ffffffff16565b61213a90919063ffffffff16565b9050612402565b600f5482101561236857612361606061235360878561210790919063ffffffff16565b61213a90919063ffffffff16565b9050612402565b6010548210156123a057612399606161238b607d8561210790919063ffffffff16565b61213a90919063ffffffff16565b9050612402565b6011548210156123d8576123d160616123c360758561210790919063ffffffff16565b61213a90919063ffffffff16565b9050612402565b6123ff60626123f160738561210790919063ffffffff16565b61213a90919063ffffffff16565b90505b919050565b6000806000915060006004600085815260200190815260200160002060050160009054906101000a900460ff1660ff161415612458576008600084815260200190815260200160002054915061245c565b8291505b600060066000848152602001908152602001600020541115612684573373ffffffffffffffffffffffffffffffffffffffff16600560006008600087815260200190815260200160002054815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561268357600460006008600086815260200190815260200160002054815260200190815260200160002060010154600460008581526020019081526020016000206001015401905060096000600660008581526020019081526020016000205481526020019081526020016000205481101515612682576125816006600084815260200190815260200160002054612dba565b6006600083815260200190815260200160002054823373ffffffffffffffffffffffffffffffffffffffff167fbade1ef9a1460ef6a988ba5d64ac136f3198dfb02107b88a8aa3b851a7e4644b60086000878152602001908152602001600020546040518082815260200191505060405180910390a46000600960006006600086815260200190815260200160002054815260200190815260200160002081905550600060066000848152602001908152602001600020819055506000600860006008600086815260200190815260200160002054815260200190815260200160002081905550600060086000848152602001908152602001600020819055505b5b5b505050565b6126938282612bfa565b8173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b816000813b90506000811415156126fd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561273957600080fd5b612742836114ce565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561277c57600080fd5b8473ffffffffffffffffffffffffffffffffffffffff1661279c846114ce565b73ffffffffffffffffffffffffffffffffffffffff161415156127be57600080fd5b6127c88584612889565b6127d28584612972565b6127dc8484612bfa565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1661286a83610ea2565b73ffffffffffffffffffffffffffffffffffffffff1614905092915050565b8173ffffffffffffffffffffffffffffffffffffffff166128a9826114ce565b73ffffffffffffffffffffffffffffffffffffffff161415156128cb57600080fd5b6000600a600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b60008060008473ffffffffffffffffffffffffffffffffffffffff16612997856114ce565b73ffffffffffffffffffffffffffffffffffffffff161415156129b957600080fd5b600c60008581526020019081526020016000205492506129eb60016129dd8761161e565b6120ee90919063ffffffff16565b9150600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515612a3957fe5b906000526020600020900154905060006005600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515612ae757fe5b9060005260206000209001819055506000600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515612b4457fe5b906000526020600020900181905550600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003612ba59190612f3c565b506000600c60008681526020019081526020016000208190555082600c600083815260200190815260200160002081905550612bed60016002546120ee90919063ffffffff16565b6002819055505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612c6957600080fd5b826005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826004600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d198361161e565b9050600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806001018281612d6c9190612f68565b91600052602060002090016000849091909150555080600c600084815260200190815260200160002081905550612daf600160025461215590919063ffffffff16565b600281905550505050565b6000600460008381526020019081526020016000209050338160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e438160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384612173565b5050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b60408051908101604052806002905b6000815260200190600190039081612e7e5790505090565b8260028101928215612ec5579160200282015b82811115612ec4578251825591602001919060010190612ea9565b5b509050612ed29190612f94565b5090565b60c0604051908101604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060ff1681525090565b815481835581811511612f6357818360005260206000209182019101612f629190612f94565b5b505050565b815481835581811511612f8f57818360005260206000209182019101612f8e9190612f94565b5b505050565b612fb691905b80821115612fb2576000816000905550600101612f9a565b5090565b905600a165627a7a72305820e04c1e69ee22ff9c80a468e1815bdbb1fe8defd4421c95fab94a19cd939d1eaa0029"
}