{
  "address": "0xcf2f73897369b8af9229cd6eb3923267256c13dd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MSRiseTokenSale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity >=0.4.18;\n\ncontract ERC20Token {\n\n  function totalSupply () constant returns (uint256 _totalSupply);\n\n  function balanceOf (address _owner) constant returns (uint256 balance);\n\n  function transfer (address _to, uint256 _value) returns (bool success);\n\n  function transferFrom (address _from, address _to, uint256 _value) returns (bool success);\n\n  function approve (address _spender, uint256 _value) returns (bool success);\n\n  function allowance (address _owner, address _spender) constant returns (uint256 remaining);\n\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  event Approval (address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  function safeAdd (uint256 x, uint256 y) constant internal returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n\n  function safeSub (uint256 x, uint256 y) constant internal returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n\n  function safeMul (uint256 x, uint256 y)  constant internal  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n  \n  \n   function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  \n}\n\n\ncontract Token is ERC20Token, SafeMath {\n\n  function Token () {\n    // Do nothing\n  }\n \n  function balanceOf (address _owner) constant returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  function transfer (address _to, uint256 _value) returns (bool success) {\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value); \n    return true;\n  }\n\n  function transferFrom (address _from, address _to, uint256 _value)  returns (bool success) {\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false;\n\n    allowances [_from][msg.sender] =\n      safeSub (allowances [_from][msg.sender], _value);\n\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (_from, _to, _value);\n    return true;\n  }\n\n \n  function approve (address _spender, uint256 _value) returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  \n  function allowance (address _owner, address _spender) constant\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n}\n\n\ncontract MSRiseToken is Token {\n    \n    address public owner;\n    \n     \n    uint256 tokenCount = 0;\n    \n    uint256 public bounce_reserve = 0;\n    uint256 public partner_reserve = 0;\n    uint256 public sale_reserve = 0;\n     \n    bool frozen = false;\n     \n    uint256 constant MAX_TOKEN_COUNT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n     \n\tuint public constant _decimals = (10**18);\n\t\n     \n    modifier onlyOwner() {\n\t    require(owner == msg.sender);\n\t    _;\n\t}\n     \n     function MSRiseToken() {\n         owner = msg.sender;\n         \n         createTokens(5 * (10**25)); // создание 50 млн токенов\n         \n         partner_reserve = 5 * (10**24); // резервация 5 млн токенов для 10% для инвесторов\n         bounce_reserve = 1 * (10**24); // резервация 1 млн токенов для бонусной программы\n         \n         // вычисления общего количества токенов для продажи (44 млн)\n         sale_reserve = safeSub(tokenCount, safeAdd(partner_reserve, bounce_reserve));  \n         \n         \n     }\n     \n    function totalSupply () constant returns (uint256 _totalSupply) {\n        return tokenCount;\n    }\n     \n    function name () constant returns (string result) {\n\t\treturn \"MSRiseToken\";\n\t}\n\t\n\tfunction symbol () constant returns (string result) {\n\t\treturn \"MSRT\";\n\t}\n\t\n\tfunction decimals () constant returns (uint result) {\n        return 18;\n    }\n    \n    function transfer (address _to, uint256 _value) returns (bool success) {\n        if (frozen) return false;\n        else return Token.transfer (_to, _value);\n    }\n\n  \n  function transferFrom (address _from, address _to, uint256 _value)\n    returns (bool success) {\n    if (frozen) return false;\n    else return Token.transferFrom (_from, _to, _value);\n  }\n\n  \n  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n    returns (bool success) {\n    if (allowance (msg.sender, _spender) == _currentValue)\n      return approve (_spender, _newValue);\n    else return false;\n  }\n\n  function burnTokens (uint256 _value) returns (bool success) {\n    if (_value > accounts [msg.sender]) return false;\n    else if (_value > 0) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      tokenCount = safeSub (tokenCount, _value);\n      return true;\n    } else return true;\n  }\n\n\n  function createTokens (uint256 _value) returns (bool success) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n      tokenCount = safeAdd (tokenCount, _value);\n    }\n\n    return true;\n  }\n\n\n // Установка нового владельца контракта \n // входной параметр адрес ETH кошелька \n\n  function setOwner (address _newOwner) {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  function freezeTransfers () {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n      Freeze ();\n    }\n  }\n\n\n  function unfreezeTransfers () {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      Unfreeze ();\n    }\n  }\n\n  event Freeze ();\n\n  event Unfreeze ();\n\n}\n\n\ncontract MSRiseTokenSale is MSRiseToken  {\n \n    address[] balancesKeys;\n    mapping (address => uint256) balances;\n \n    enum State { PRE_ICO, ICO, STOPPED }\n    \n    \n    // 0 , 1 , 2\n    \n    State public currentState = State.STOPPED;\n\n    uint public tokenPrice = 50000000000000000;\n    uint public _minAmount = 0.05 ether;\n\t\n\tmapping (address => uint256) wallets;\n\n    address public beneficiary;\n\n\tuint256 public totalSold = 0;\n\tuint256 public totalBounces = 0;\n\t\n\tuint public current_percent = 15;\n\tuint public current_discount = 0;\n\n\tbool private _allowedTransfers = true;\n\t\n\tmodifier minAmount() {\n        require(msg.value >= _minAmount);\n        _;\n    }\n    \n    modifier saleIsOn() {\n        require(currentState != State.STOPPED && totalSold < sale_reserve);\n        _;\n    }\n    \n    modifier isAllowedBounce() {\n        require(totalBounces < bounce_reserve);\n        _;\n    }\n    \n\tfunction TokenSale() {\n\t    owner = msg.sender;\n\t    beneficiary = msg.sender;\n\t}\n\n\t\n\t// установка текущего бонуса за покупку\n\t\n\tfunction setBouncePercent(uint _percent) public onlyOwner {\n\t    current_percent = _percent;\n\t}\n\t\n\tfunction setDiscountPercent(uint _discount) public onlyOwner {\n\t    current_discount = _discount;\n\t}\n\t\n\t\n\t// установка текущей фазы продаж (pre-ico = 0, ico = 1, stopped = 3)\n\t\n\tfunction setState(State _newState) public onlyOwner {\n\t    currentState = _newState;\n\t}\n\t\n\t// установка минимальной суммы платежа в эфирах\n\t\n\tfunction setMinAmount(uint _new) public onlyOwner {\n\t    _minAmount = _new;\n\t}\n\t\n\t// возобновление переводов\n\t\n\tfunction allowTransfers() public onlyOwner {\n\t\t_allowedTransfers = true;\t\t\n\t}\n\t\n\t// заморозка всех переводов\n\t\n\tfunction stopTransfers() public onlyOwner {\n\t\t_allowedTransfers = false;\n\t}\n\t\n\t// функция смены адреса ETH куда будут поступать отправленные эфиры\n\t\n    function setBeneficiaryAddress(address _new) public onlyOwner {\n        beneficiary = _new;\n    }\n    \n    // функция установки стоимости одного токена в wei \n    \n    function setTokenPrice(uint _price) public onlyOwner {\n        tokenPrice = _price;\n    }\n    \n    // фукнция списания токенов с общего баланса на баланс отправителя\n    \n\tfunction transferPayable(address _address, uint _amount) private returns (bool) {\n\t    accounts[_address] = safeAdd(accounts[_address], _amount);\n\t    accounts[owner] = safeSub(accounts[owner], _amount);\n\t    totalSold = safeAdd(totalSold, _amount);\n\t    return true;\n\t}\n\t\n\t// вычисления количество токенов, равное количество отправленных эфиров\n\t// исходя из стоимости токена, бонуса и скидки\n\t\n\tfunction get_tokens_count(uint _amount) private returns (uint) {\n\t    \n\t     uint currentPrice = tokenPrice;\n\t     uint tokens = safeDiv( safeMul(_amount, _decimals), currentPrice ) ;\n\t     totalSold = safeAdd(totalSold, tokens);\n\t     \n\t     if(currentState == State.PRE_ICO) {\n\t         tokens = safeAdd(tokens, get_bounce_tokens(tokens)); // вызывается при PRE-ICO\n\t     } else if(currentState == State.ICO) {\n\t         tokens = safeAdd(tokens, get_discount_tokens(tokens)); // вызывается при ICO\n\t     }\n\t     \n\t     return tokens;\n\t}\n\t\n\t// вычисление текущей скидки\n\t\n\tfunction get_discount_tokens(uint _tokens) isAllowedBounce private returns (uint) {\n\t    \n\t    uint tokens = 0;\n\t    uint _current_percent = safeMul(current_discount, 100);\n\t    tokens = _tokens * _current_percent / 10000;\n\t    totalBounces = safeAdd(totalBounces, tokens);\n\t    return tokens;\n\t    \n\t}\n\t\n\t// вычисление бонусных токенов\n\t\n\tfunction get_bounce_tokens(uint _tokens) isAllowedBounce() private returns (uint) {\n\t    uint tokens = 0;\n\t    uint _current_percent = safeMul(current_percent, 100);\n\t    tokens = _tokens * _current_percent / 10000;\n\t    totalBounces = safeAdd(totalBounces, tokens);\n\t    return tokens;\n\t}\n\t\n\t// функция, которая вызывается при отправке эфира на контракт\n\t\n\tfunction buy() public saleIsOn() minAmount() payable {\n\t    uint tokens;\n\t    tokens = get_tokens_count(msg.value);\n\t\trequire(transferPayable(msg.sender , tokens));\n\t\tif(_allowedTransfers) {\n\t\t\tbeneficiary.transfer(msg.value);\n\t\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], msg.value);\n\t\t\tbalancesKeys.push(msg.sender);\n\t    }\n\t}\n\t\n\t// возврат средств, вызывается владельцем контракта,\n\t// для возврата на контракте должны присутствовать эфиры\n\t\n\tfunction refund() onlyOwner {\n      for(uint i = 0 ; i < balancesKeys.length ; i++) {\n          address addr = balancesKeys[i]; \n          uint value = balances[addr];\n          balances[addr] = 0; \n          accounts[addr] = 0;\n          addr.transfer(value); \n      }\n    }\n\t\n\t\n\tfunction() external payable {\n      buy();\n    }\n\t\n    \n}",
  "bytecode": "606060405260006003556000600455600060055560006006556000600760006101000a81548160ff0219169083151502179055506002600a60006101000a81548160ff021916908360028111156200005357fe5b021790555066b1a2bc2ec50000600b5566b1a2bc2ec50000600c556000600f556000601055600f60115560006012556001601360006101000a81548160ff02191690831515021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001086a295be96e640669720000006200017d640100000000026200161e176401000000009004565b506a0422ca8b0a00a42500000060058190555069d3c21bcecceda100000060048190555062000171600354620001576005546004546200030d6401000000000262001c5f176401000000009004565b620003496401000000000262002045176401000000009004565b60068190555062000363565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620001dc57600080fd5b60008211156200030357620002287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600354620003496401000000000262002045176401000000009004565b8211156200023a576000905062000308565b620002986000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836200030d6401000000000262001c5f176401000000009004565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620002fc600354836200030d6401000000000262001c5f176401000000009004565b6003819055505b600190505b919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383111515156200033e57fe5b818301905092915050565b60008183101515156200035857fe5b818303905092915050565b61242780620003736000396000f3006060604052600436106101e3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301502460146101ed578063064d4d7c1461020257806306fdde031461022b578063095ea7b3146102b95780630c3f6acf1461031357806313af40351461034a578063154ec2db1461038357806318160ddd146103a65780631feb4d52146103cf5780632185810b146103f857806323b872dd1461040d57806331380c8914610486578063313ce5671461049b57806331c420d4146104c457806332424aa3146104d957806338af3eed14610502578063426a84931461055757806356de96db146105ba578063572960a1146105e0578063590e1ae3146106095780636a61e5fc1461061e5780636d1b229d1461064157806370a082311461067c5780637adac0e6146106c95780637e1f2bb8146106de5780637ff9b59614610719578063897b0637146107425780638da5cb5b146107655780639106d7ba146107ba57806395d89b41146107e3578063a6f2ae3a14610871578063a9059cbb1461087b578063ca36c38c146108d5578063d348ec77146108fe578063d943c70214610921578063dd62ed3e1461094a578063e2fa046e146109b6578063e895cfef146109df578063ec6be06e14610a08575b6101eb610a41565b005b34156101f857600080fd5b610200610c21565b005b341561020d57600080fd5b610215610cdd565b6040518082815260200191505060405180910390f35b341561023657600080fd5b61023e610ce3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027e578082015181840152602081019050610263565b50505050905090810190601f1680156102ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102c457600080fd5b6102f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d26565b604051808215151515815260200191505060405180910390f35b341561031e57600080fd5b610326610e18565b6040518082600281111561033657fe5b60ff16815260200191505060405180910390f35b341561035557600080fd5b610381600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2b565b005b341561038e57600080fd5b6103a46004808035906020019091905050610ecb565b005b34156103b157600080fd5b6103b9610f31565b6040518082815260200191505060405180910390f35b34156103da57600080fd5b6103e2610f3b565b6040518082815260200191505060405180910390f35b341561040357600080fd5b61040b610f41565b005b341561041857600080fd5b61046c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fba565b604051808215151515815260200191505060405180910390f35b341561049157600080fd5b610499610fef565b005b34156104a657600080fd5b6104ae611073565b6040518082815260200191505060405180910390f35b34156104cf57600080fd5b6104d761107c565b005b34156104e457600080fd5b6104ec611137565b6040518082815260200191505060405180910390f35b341561050d57600080fd5b610515611143565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056257600080fd5b6105a0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050611169565b604051808215151515815260200191505060405180910390f35b34156105c557600080fd5b6105de600480803560ff16906020019091905050611199565b005b34156105eb57600080fd5b6105f361121b565b6040518082815260200191505060405180910390f35b341561061457600080fd5b61061c611221565b005b341561062957600080fd5b61063f60048080359060200190919050506113ee565b005b341561064c57600080fd5b6106626004808035906020019091905050611454565b604051808215151515815260200191505060405180910390f35b341561068757600080fd5b6106b3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061155d565b6040518082815260200191505060405180910390f35b34156106d457600080fd5b6106dc6115a5565b005b34156106e957600080fd5b6106ff600480803590602001909190505061161e565b604051808215151515815260200191505060405180910390f35b341561072457600080fd5b61072c611768565b6040518082815260200191505060405180910390f35b341561074d57600080fd5b610763600480803590602001909190505061176e565b005b341561077057600080fd5b6107786117d4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107c557600080fd5b6107cd6117fa565b6040518082815260200191505060405180910390f35b34156107ee57600080fd5b6107f6611800565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561083657808201518184015260208101905061081b565b50505050905090810190601f1680156108635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610879610a41565b005b341561088657600080fd5b6108bb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611843565b604051808215151515815260200191505060405180910390f35b34156108e057600080fd5b6108e8611876565b6040518082815260200191505060405180910390f35b341561090957600080fd5b61091f600480803590602001909190505061187c565b005b341561092c57600080fd5b6109346118e2565b6040518082815260200191505060405180910390f35b341561095557600080fd5b6109a0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118e8565b6040518082815260200191505060405180910390f35b34156109c157600080fd5b6109c961196f565b6040518082815260200191505060405180910390f35b34156109ea57600080fd5b6109f2611975565b6040518082815260200191505060405180910390f35b3415610a1357600080fd5b610a3f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061197b565b005b6000600280811115610a4f57fe5b600a60009054906101000a900460ff166002811115610a6a57fe5b14158015610a7b5750600654600f54105b1515610a8657600080fd5b600c543410151515610a9757600080fd5b610aa034611a1b565b9050610aac3382611ae9565b1515610ab757600080fd5b601360009054906101000a900460ff1615610c1e57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515610b2e57600080fd5b610b77600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205434611c5f565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060088054806001018281610bce9190612396565b9160005260206000209001600033909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7d57600080fd5b600760009054906101000a900460ff161515610cdb576001600760006101000a81548160ff0219169083151502179055507f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de60405160405180910390a15b565b600c5481565b610ceb6123c2565b6040805190810160405280600b81526020017f4d5352697365546f6b656e000000000000000000000000000000000000000000815250905090565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600a60009054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f2757600080fd5b8060128190555050565b6000600354905090565b60115481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f9d57600080fd5b6001601360006101000a81548160ff021916908315150217905550565b6000600760009054906101000a900460ff1615610fda5760009050610fe8565b610fe5848484611c9a565b90505b9392505050565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006012905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d857600080fd5b600760009054906101000a900460ff1615611135576000600760006101000a81548160ff0219169083151502179055507f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded60405160405180910390a15b565b670de0b6b3a764000081565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008261117633866118e8565b141561118d576111868483610d26565b9050611192565b600090505b9392505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156111f557600080fd5b80600a60006101000a81548160ff0219169083600281111561121357fe5b021790555050565b60065481565b60008060003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561128257600080fd5b600092505b6008805490508310156113e9576008838154811015156112a357fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156113dc57600080fd5b8280600101935050611287565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561144a57600080fd5b80600b8190555050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156114a55760009050611558565b6000821115611553576114f66000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612045565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061154460035483612045565b60038190555060019050611558565b600190505b919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561160157600080fd5b6000601360006101000a81548160ff021916908315150217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561167c57600080fd5b600082111561175e576116b17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600354612045565b8211156116c15760009050611763565b6117096000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611c5f565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061175760035483611c5f565b6003819055505b600190505b919050565b600b5481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156117ca57600080fd5b80600c8190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b6118086123c2565b6040805190810160405280600481526020017f4d53525400000000000000000000000000000000000000000000000000000000815250905090565b6000600760009054906101000a900460ff16156118635760009050611870565b61186d838361205e565b90505b92915050565b60105481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156118d857600080fd5b8060118190555050565b60125481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60055481565b60045481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119d757600080fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600b549150611a40611a3a85670de0b6b3a7640000612275565b836122cb565b9050611a4e600f5482611c5f565b600f8190555060006002811115611a6157fe5b600a60009054906101000a900460ff166002811115611a7c57fe5b1415611a9b57611a9481611a8f836122e6565b611c5f565b9050611adf565b60016002811115611aa857fe5b600a60009054906101000a900460ff166002811115611ac357fe5b1415611ade57611adb81611ad68361233e565b611c5f565b90505b5b8092505050919050565b6000611b336000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611c5f565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611bdf600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612045565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c4f600f5483611c5f565b600f819055506001905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038311151515611c8f57fe5b818301905092915050565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611d29576000905061203e565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611d78576000905061203e565b611dfe600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612045565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600082118015611eba57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b15611fd457611f076000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612045565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f916000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611c5f565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600081831015151561205357fe5b818303905092915050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156120af576000905061226f565b6000821180156120eb57508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15612205576121386000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612045565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121c26000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611c5f565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b60008082141561228857600090506122c5565b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8115156122b357fe5b0483111515156122bf57fe5b81830290505b92915050565b60008082848115156122d957fe5b0490508091505092915050565b60008060006004546010541015156122fd57600080fd5b6000915061230e6011546064612275565b905061271081850281151561231f57fe5b04915061232e60105483611c5f565b6010819055508192505050919050565b600080600060045460105410151561235557600080fd5b600091506123666012546064612275565b905061271081850281151561237757fe5b04915061238660105483611c5f565b6010819055508192505050919050565b8154818355818115116123bd578183600052602060002091820191016123bc91906123d6565b5b505050565b602060405190810160405280600081525090565b6123f891905b808211156123f45760008160009055506001016123dc565b5090565b905600a165627a7a723058203500787175c2643c1ec2c51ecae20ea7f57f9dea38f434b05266db7ff5d633e90029"
}