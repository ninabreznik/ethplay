{
  "address": "0x9e409cb44677b4ceeb490530ab3206aafa7cb53c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InstaMaker",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-12\n*/\n\npragma solidity ^0.5.0;\n\ninterface TubInterface {\n    function open() external returns (bytes32);\n    function join(uint) external;\n    function exit(uint) external;\n    function lock(bytes32, uint) external;\n    function free(bytes32, uint) external;\n    function draw(bytes32, uint) external;\n    function wipe(bytes32, uint) external;\n    function give(bytes32, address) external;\n    function shut(bytes32) external;\n    function cups(bytes32) external view returns (address, uint, uint, uint);\n    function gem() external view returns (TokenInterface);\n    function gov() external view returns (TokenInterface);\n    function skr() external view returns (TokenInterface);\n    function sai() external view returns (TokenInterface);\n    function ink(bytes32) external view returns (uint);\n    function tab(bytes32) external returns (uint);\n    function rap(bytes32) external returns (uint);\n    function per() external view returns (uint);\n    function pep() external view returns (PepInterface);\n}\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface PepInterface {\n    function peek() external returns (bytes32, bool);\n}\n\ninterface UniswapExchange {\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\n    function tokenToTokenSwapOutput(\n        uint256 tokensBought,\n        uint256 maxTokensSold,\n        uint256 maxEthSold,\n        uint256 deadline,\n        address tokenAddr\n        ) external returns (uint256  tokensSold);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n\n    /**\n     * @dev get MakerDAO CDP engine\n     */\n    function getSaiTubAddress() public pure returns (address sai) {\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    }\n\n    /**\n     * @dev get uniswap MKR exchange\n     */\n    function getUniswapMKRExchange() public pure returns (address ume) {\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\n    }\n\n    /**\n     * @dev get uniswap DAI exchange\n     */\n    function getUniswapDAIExchange() public pure returns (address ude) {\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\n    }\n\n    /**\n     * @dev get CDP bytes by CDP ID\n     */\n    function getCDPBytes(uint cdpNum) public pure returns (bytes32 cup) {\n        cup = bytes32(cdpNum);\n    }\n\n}\n\n\ncontract CDPResolver is Helpers {\n\n    event LogOpen(uint cdpNum, address owner);\n    event LogGive(uint cdpNum, address owner, address nextOwner);\n    event LogLock(uint cdpNum, uint amtETH, uint amtPETH, address owner);\n    event LogFree(uint cdpNum, uint amtETH, uint amtPETH, address owner);\n    event LogDraw(uint cdpNum, uint amtDAI, address owner);\n    event LogDrawSend(uint cdpNum, uint amtDAI, address to);\n    event LogWipe(uint cdpNum, uint daiAmt, uint mkrFee, uint daiFee, address owner);\n    event LogShut(uint cdpNum);\n\n    function open() public returns (uint) {\n        bytes32 cup = TubInterface(getSaiTubAddress()).open();\n        emit LogOpen(uint(cup), address(this));\n        return uint(cup);\n    }\n\n    /**\n     * @dev transfer CDP ownership\n     */\n    function give(uint cdpNum, address nextOwner) public {\n        TubInterface(getSaiTubAddress()).give(bytes32(cdpNum), nextOwner);\n        emit LogGive(cdpNum, address(this), nextOwner);\n    }\n\n    function lock(uint cdpNum) public payable {\n        if (msg.value > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface weth = tub.gem();\n            TokenInterface peth = tub.skr();\n\n            (address lad,,,) = tub.cups(cup);\n            require(lad == address(this), \"cup-not-owned\");\n\n            weth.deposit.value(msg.value)();\n\n            uint ink = rdiv(msg.value, tub.per());\n            ink = rmul(ink, tub.per()) <= msg.value ? ink : ink - 1;\n\n            setAllowance(weth, tubAddr);\n            tub.join(ink);\n\n            setAllowance(peth, tubAddr);\n            tub.lock(cup, ink);\n\n            emit LogLock(\n                cdpNum,\n                msg.value,\n                ink,\n                address(this)\n            );\n        }\n    }\n\n    function free(uint cdpNum, uint jam) public {\n        if (jam > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface peth = tub.skr();\n            TokenInterface weth = tub.gem();\n\n            uint ink = rdiv(jam, tub.per());\n            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\n            tub.free(cup, ink);\n\n            setAllowance(peth, tubAddr);\n\n            tub.exit(ink);\n            uint freeJam = weth.balanceOf(address(this)); // withdraw possible previous stuck WETH as well\n            weth.withdraw(freeJam);\n\n            address(msg.sender).transfer(freeJam);\n\n            emit LogFree(\n                cdpNum,\n                freeJam,\n                ink,\n                address(this)\n            );\n        }\n    }\n\n    function draw(uint cdpNum, uint _wad) public {\n        bytes32 cup = bytes32(cdpNum);\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n\n            tub.draw(cup, _wad);\n            tub.sai().transfer(msg.sender, _wad);\n\n            emit LogDraw(cdpNum, _wad, address(this));\n        }\n    }\n\n    function drawSend(uint cdpNum, uint _wad, address to) public {\n        bytes32 cup = bytes32(cdpNum);\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n\n            tub.draw(cup, _wad);\n            tub.sai().transfer(to, _wad);\n\n            emit LogDraw(cdpNum, _wad, address(this));\n            emit LogDrawSend(cdpNum, _wad, to);\n        }\n    }\n\n    function wipe(uint cdpNum, uint _wad) public {\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n            UniswapExchange daiEx = UniswapExchange(getUniswapDAIExchange());\n            UniswapExchange mkrEx = UniswapExchange(getUniswapMKRExchange());\n            TokenInterface dai = tub.sai();\n            TokenInterface mkr = tub.gov();\n\n            bytes32 cup = bytes32(cdpNum);\n\n            (address lad,,,) = tub.cups(cup);\n            require(lad == address(this), \"cup-not-owned\");\n\n            setAllowance(dai, getSaiTubAddress());\n            setAllowance(mkr, getSaiTubAddress());\n            setAllowance(dai, getUniswapDAIExchange());\n\n            (bytes32 val, bool ok) = tub.pep().peek();\n\n            // MKR required for wipe = Stability fees accrued in Dai / MKRUSD value\n            uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\n\n            uint daiFeeAmt = daiEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(mkrFee));\n            uint daiAmt = add(_wad, daiFeeAmt);\n            require(dai.transferFrom(msg.sender, address(this), daiAmt), \"not-approved-yet\");\n\n            if (ok && val != 0) {\n                daiEx.tokenToTokenSwapOutput(\n                    mkrFee,\n                    daiAmt,\n                    uint(999000000000000000000),\n                    uint(1899063809), // 6th March 2030 GMT // no logic\n                    address(mkr)\n                );\n            }\n\n            tub.wipe(cup, _wad);\n\n            emit LogWipe(\n                cdpNum,\n                daiAmt,\n                mkrFee,\n                daiFeeAmt,\n                address(this)\n            );\n\n        }\n    }\n\n    function setAllowance(TokenInterface _token, address _spender) private {\n        if (_token.allowance(address(this), _spender) != uint(-1)) {\n            _token.approve(_spender, uint(-1));\n        }\n    }\n\n}\n\n\ncontract CDPCluster is CDPResolver {\n\n    function wipeAndFree(uint cdpNum, uint jam, uint _wad) public payable {\n        wipe(cdpNum, _wad);\n        free(cdpNum, jam);\n    }\n\n    /**\n     * @dev close CDP\n     */\n    function shut(uint cdpNum) public {\n        bytes32 cup = bytes32(cdpNum);\n        TubInterface tub = TubInterface(getSaiTubAddress());\n        wipeAndFree(cdpNum, rmul(tub.ink(cup), tub.per()), tub.tab(cup));\n        tub.shut(cup);\n        emit LogShut(cdpNum); // fetch remaining data from WIPE & FREE events\n    }\n\n    /**\n     * @dev open a new CDP and lock ETH\n     */\n    function openAndLock() public payable returns (uint cdpNum) {\n        cdpNum = open();\n        lock(cdpNum);\n    }\n\n}\n\n\ncontract InstaMaker is CDPCluster {\n\n    uint public version;\n\n    /**\n     * @dev setting up variables on deployment\n     * 1...2...3 versioning in each subsequent deployments\n     */\n    constructor(uint _version) public {\n        version = _version;\n    }\n\n    function() external payable {}\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080612c7f8339810180604052602081101561003057600080fd5b81019080805190602001909291905050508060008190555050612c27806100586000396000f3fe6080604052600436106100d5576000357c01000000000000000000000000000000000000000000000000000000009004806308185f93146100d75780633e1e5cd91461011c578063442bef301461018157806354fd4d501461019f57806373435d12146101ca57806394c4a12414610219578063d2b8035a14610270578063d7bb5e0e146102b5578063db5a5d99146102fa578063db5b5a8a14610351578063dd4670641461038c578063ea16a202146103ba578063f1d9a150146103fc578063fcafcc6814610453578063fcfff16f146104ae575b005b3480156100e357600080fd5b5061011a600480360360408110156100fa57600080fd5b8101908080359060200190929190803590602001909291905050506104d9565b005b34801561012857600080fd5b5061017f6004803603606081101561013f57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aee565b005b610189610e03565b6040518082815260200191505060405180910390f35b3480156101ab57600080fd5b506101b4610e1b565b6040518082815260200191505060405180910390f35b3480156101d657600080fd5b50610203600480360360208110156101ed57600080fd5b8101908080359060200190929190505050610e21565b6040518082815260200191505060405180910390f35b34801561022557600080fd5b5061022e610e2e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027c57600080fd5b506102b36004803603604081101561029357600080fd5b810190808035906020019092919080359060200190929190505050610e4a565b005b3480156102c157600080fd5b506102f8600480360360408110156102d857600080fd5b8101908080359060200190929190803590602001909291905050506110eb565b005b34801561030657600080fd5b5061030f611beb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035d57600080fd5b5061038a6004803603602081101561037457600080fd5b8101908080359060200190929190505050611c07565b005b6103b8600480360360208110156103a257600080fd5b8101908080359060200190929190505050611ede565b005b6103fa600480360360608110156103d057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612543565b005b34801561040857600080fd5b5061041161255c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045f57600080fd5b506104ac6004803603604081101561047657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612578565b005b3480156104ba57600080fd5b506104c36126e0565b6040518082815260200191505060405180910390f35b6000811115610aea57600082600102905060006104f461255c565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16630f8a771e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d602081101561058957600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d602081101561062a57600080fd5b8101908080519060200190929190505050905060006106e5878573ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156106a557600080fd5b505afa1580156106b9573d6000803e3d6000fd5b505050506040513d60208110156106cf57600080fd5b8101908080519060200190929190505050612805565b90508661078e828673ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561074e57600080fd5b505afa158015610762573d6000803e3d6000fd5b505050506040513d602081101561077857600080fd5b8101908080519060200190929190505050612845565b111561079d576001810361079f565b805b90508373ffffffffffffffffffffffffffffffffffffffff1663a5cd184e87836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561081857600080fd5b505af115801561082c573d6000803e3d6000fd5b5050505061083a8386612891565b8373ffffffffffffffffffffffffffffffffffffffff16637f8661a1826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156108a957600080fd5b505af11580156108bd573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d602081101561098657600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a66573d6000803e3d6000fd5b507fbc364e2c948b1a58aa818f1d663cbf625acb9d3e827d8ba7661ee805ae63506089828430604051808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050505b5050565b60008360010290506000831115610dfd576000610b0961255c565b90508073ffffffffffffffffffffffffffffffffffffffff1663440f19ba83866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610b8257600080fd5b505af1158015610b96573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639166cba46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d6020811015610c2657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610cd957600080fd5b505af1158015610ced573d6000803e3d6000fd5b505050506040513d6020811015610d0357600080fd5b8101908080519060200190929190505050507f2552409de7c93ad237013bdc31f6351559f2d50c8b43d20b83fc75639a55e431858530604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a17fd51a9891791249d5659b14c7156ba5c155bd0838af90a6b44f4db87109367109858585604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505b50505050565b6000610e0d6126e0565b9050610e1881611ede565b90565b60005481565b6000816001029050919050565b6000732c4bd064b998838076fa341a83d007fc2fa50957905090565b600082600102905060008211156110e6576000610e6561255c565b90508073ffffffffffffffffffffffffffffffffffffffff1663440f19ba83856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610ede57600080fd5b505af1158015610ef2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639166cba46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d6020811015610f8257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561103557600080fd5b505af1158015611049573d6000803e3d6000fd5b505050506040513d602081101561105f57600080fd5b8101908080519060200190929190505050507f2552409de7c93ad237013bdc31f6351559f2d50c8b43d20b83fc75639a55e431848430604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505b505050565b6000811115611be75760006110fe61255c565b9050600061110a611beb565b90506000611116610e2e565b905060008373ffffffffffffffffffffffffffffffffffffffff16639166cba46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561117c57600080fd5b505afa158015611190573d6000803e3d6000fd5b505050506040513d60208110156111a657600080fd5b8101908080519060200190929190505050905060008473ffffffffffffffffffffffffffffffffffffffff166312d43a516040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561121d57600080fd5b505afa158015611231573d6000803e3d6000fd5b505050506040513d602081101561124757600080fd5b81019080805190602001909291905050509050600087600102905060008673ffffffffffffffffffffffffffffffffffffffff1663fdac0025836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060806040518083038186803b1580156112d157600080fd5b505afa1580156112e5573d6000803e3d6000fd5b505050506040513d60808110156112fb57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156113d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6375702d6e6f742d6f776e65640000000000000000000000000000000000000081525060200191505060405180910390fd5b6113e3846113de61255c565b612891565b6113f4836113ef61255c565b612891565b61140584611400611beb565b612891565b6000808873ffffffffffffffffffffffffffffffffffffffff1663ace237f56040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561146a57600080fd5b505afa15801561147e573d6000803e3d6000fd5b505050506040513d602081101561149457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15801561150757600080fd5b505af115801561151b573d6000803e3d6000fd5b505050506040513d604081101561153157600080fd5b8101908080519060200190929190805190602001909291905050509150915060006116c46116ba8c6116b58d73ffffffffffffffffffffffffffffffffffffffff16636f78ee0d8a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156115cb57600080fd5b505af11580156115df573d6000803e3d6000fd5b505050506040513d60208110156115f557600080fd5b81019080805190602001909291905050508e73ffffffffffffffffffffffffffffffffffffffff1663f7c8d6348b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561167557600080fd5b505af1158015611689573d6000803e3d6000fd5b505050506040513d602081101561169f57600080fd5b8101908080519060200190929190505050612805565b612845565b8460019004612aa1565b905060008973ffffffffffffffffffffffffffffffffffffffff16632640f62c8a73ffffffffffffffffffffffffffffffffffffffff166359e94862856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561175157600080fd5b505afa158015611765573d6000803e3d6000fd5b505050506040513d602081101561177b57600080fd5b81019080805190602001909291905050506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156117dc57600080fd5b505afa1580156117f0573d6000803e3d6000fd5b505050506040513d602081101561180657600080fd5b8101908080519060200190929190505050905060006118258d83612add565b90508873ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156118fe57600080fd5b505af1158015611912573d6000803e3d6000fd5b505050506040513d602081101561192857600080fd5b810190808051906020019092919050505015156119ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f742d617070726f7665642d7965740000000000000000000000000000000081525060200191505060405180910390fd5b8380156119be575060006001028514155b15611ac8578a73ffffffffffffffffffffffffffffffffffffffff1663b040d5458483683627e8f712373c00006371316a018d6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200195505050505050602060405180830381600087803b158015611a8b57600080fd5b505af1158015611a9f573d6000803e3d6000fd5b505050506040513d6020811015611ab557600080fd5b8101908080519060200190929190505050505b8b73ffffffffffffffffffffffffffffffffffffffff166373b38101888f6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611b3f57600080fd5b505af1158015611b53573d6000803e3d6000fd5b505050507fc61fae64789cde417503f7bd67082d71c8379712017e446877dd1c26b1bf4c9c8e82858530604051808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a15050505050505050505050505b5050565b60007309cabec1ead1c0ba254b09efb3ee13841712be14905090565b60008160010290506000611c1961255c565b9050611e1b83611d6c8373ffffffffffffffffffffffffffffffffffffffff16631f3634ed866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611c8f57600080fd5b505afa158015611ca3573d6000803e3d6000fd5b505050506040513d6020811015611cb957600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611d2c57600080fd5b505afa158015611d40573d6000803e3d6000fd5b505050506040513d6020811015611d5657600080fd5b8101908080519060200190929190505050612845565b8373ffffffffffffffffffffffffffffffffffffffff1663f7c8d634866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611ddb57600080fd5b505af1158015611def573d6000803e3d6000fd5b505050506040513d6020811015611e0557600080fd5b8101908080519060200190929190505050612543565b8073ffffffffffffffffffffffffffffffffffffffff1663b84d2106836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015611e8a57600080fd5b505af1158015611e9e573d6000803e3d6000fd5b505050507f22e614250cc19ad2d607fbb456feb025b28699e8b854e7f1417f4a59395bd66c836040518082815260200191505060405180910390a1505050565b60003411156125405760008160010290506000611ef961255c565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611f6457600080fd5b505afa158015611f78573d6000803e3d6000fd5b505050506040513d6020811015611f8e57600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff16630f8a771e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561200557600080fd5b505afa158015612019573d6000803e3d6000fd5b505050506040513d602081101561202f57600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff1663fdac0025876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060806040518083038186803b1580156120b157600080fd5b505afa1580156120c5573d6000803e3d6000fd5b505050506040513d60808110156120db57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156121b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6375702d6e6f742d6f776e65640000000000000000000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561221657600080fd5b505af115801561222a573d6000803e3d6000fd5b505050505060006122d7348673ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561229757600080fd5b505afa1580156122ab573d6000803e3d6000fd5b505050506040513d60208110156122c157600080fd5b8101908080519060200190929190505050612805565b905034612380828773ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561234057600080fd5b505afa158015612354573d6000803e3d6000fd5b505050506040513d602081101561236a57600080fd5b8101908080519060200190929190505050612845565b111561238f5760018103612391565b805b905061239d8487612891565b8473ffffffffffffffffffffffffffffffffffffffff1663049878f3826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561240c57600080fd5b505af1158015612420573d6000803e3d6000fd5b5050505061242e8387612891565b8473ffffffffffffffffffffffffffffffffffffffff1663b3b77a5188836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156124a557600080fd5b505af11580156124b9573d6000803e3d6000fd5b505050507fa66947e0e444664290dad9ea8bdc946a0662a93c04cc0db7dc993a19319d39ed88348330604051808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050505b50565b61254d83826110eb565b61255783836104d9565b505050565b600073448a5065aebb8e423f0896e6c5d525c040f59af3905090565b61258061255c565b73ffffffffffffffffffffffffffffffffffffffff1663baa8529c83600102836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b505050507f24ed171098cf7528ab3224b2dd4b27eb396bcd8ac689df02cb865b4ffb4a73cc823083604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050565b6000806126eb61255c565b73ffffffffffffffffffffffffffffffffffffffff1663fcfff16f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561274e57600080fd5b505af1158015612762573d6000803e3d6000fd5b505050506040513d602081101561277857600080fd5b810190808051906020019092919050505090507fdb6aca7fb1121b6919a3d633f359770bcadd20c9e848a2ad7dc6bcc94b3d5fdb816001900430604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1806001900491505090565b600081612833612821856b033b2e3c9fd0803ce8000000612b62565b60028581151561282d57fe5b04612add565b81151561283c57fe5b04905092915050565b60006b033b2e3c9fd0803ce800000061287f6128618585612b62565b60026b033b2e3c9fd0803ce800000081151561287957fe5b04612add565b81151561288857fe5b04905092915050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561297f57600080fd5b505afa158015612993573d6000803e3d6000fd5b505050506040513d60208110156129a957600080fd5b8101908080519060200190929190505050141515612a9d578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612a8457600080fd5b505af1158015612a98573d6000803e3d6000fd5b505050505b5050565b600081612acb612ab985670de0b6b3a7640000612b62565b600285811515612ac557fe5b04612add565b811515612ad457fe5b04905092915050565b60008282840191508110151515612b5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b600080821480612b8157508282838502925082811515612b7e57fe5b04145b1515612bf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b9291505056fea165627a7a723058200b794c4982d0be01693b09b85ff0039904039c76a44377f3401fac510cf7d15f00290000000000000000000000000000000000000000000000000000000000000002",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000002"
}