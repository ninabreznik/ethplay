{
  "address": "0xab352f6143e06871ba85a35a105d53d0b8ff2cf9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "_RowanCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-12\n*/\n\npragma solidity ^0.4.23;\n// ----------------------------------------------------------------------------\n// 'Rowan Coin' contract\n\n// Mineable ERC20 Token using Proof Of Work\n\n//\n\n// Symbol      : RWN\n\n// Name        : Rowan Coin\n\n// Total supply: 45,000,000.00\n\n// Decimals    : 10\n//\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\nlibrary ExtendedMath {\n    //return the smaller of the two inputs (a or b)\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n        if(a > b) return b;\n        return a;\n    }\n}\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract EIP918Interface {\n\n    /*\n     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\n     * a Mint event is emitted before returning a success indicator.\n     **/\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n\n    /*\n     * Optional\n     * Externally facing merge function that is called by miners to validate challenge digests, calculate reward,\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Additionally, the\n     * merge function takes an array of target token addresses to be used in merged rewards. Once complete,\n     * a Mint event is emitted before returning a success indicator.\n     **/\n    //function merge(uint256 nonce, bytes32 challenge_digest, address[] mineTokens) public returns (bool);\n\n    /*\n     * Returns the challenge number\n     **/\n    function getChallengeNumber() public view returns (bytes32);\n\n    /*\n     * Returns the mining difficulty. The number of digits that the digest of the PoW solution requires which \n     * typically auto adjusts during reward generation.\n     **/\n    function getMiningDifficulty() public view returns (uint);\n\n    /*\n     * Returns the mining target\n     **/\n    function getMiningTarget() public view returns (uint);\n\n    /*\n     * Return the current reward amount. Depending on the algorithm, typically rewards are divided every reward era \n     * as tokens are mined to provide scarcity\n     **/\n    function getMiningReward() public view returns (uint);\n    \n    /*\n     * Upon successful verification and reward the mint method dispatches a Mint Event indicating the reward address, \n     * the reward amount, the epoch count and newest challenge number.\n     **/\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n}\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and an\n// initial fixed supply\n// ----------------------------------------------------------------------------\ncontract _RowanCoin is ERC20Interface, EIP918Interface, Owned {\n    using SafeMath for uint;\n    using ExtendedMath for uint;\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n    uint public latestDifficultyPeriodStarted;\n    uint public epochCount;//number of 'blocks' mined\n    //a little number\n    uint public  _MINIMUM_TARGET = 2**16;\n    //a big number is easier ; just find a solution that is smaller\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n    uint public  _MAXIMUM_TARGET = 2**224;\n    uint public miningTarget;\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n    address public lastRewardTo;\n    uint public lastRewardAmount;\n    uint public lastRewardEthBlockNumber;\n    // a bunch of maps to know where this is going (pun intended)\n    \n    mapping(bytes32 => bytes32) public solutionForChallenge;\n    mapping(uint => uint) public targetForEpoch;\n    mapping(uint => uint) public timeStampForEpoch;\n    mapping(address => uint) balances;\n    mapping(address => address) donationsTo;\n    mapping(address => mapping(address => uint)) allowed;\n    event Donation(address donation);\n    event DonationAddressOf(address donator, address donnationAddress);\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public{\n        symbol = \"RWN\";\n        name = \"Rowan Coin\";\n        \n        decimals = 10;\n        epochCount = 0;\n        _totalSupply = 45000000*10**uint(decimals); \n        \n        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n        challengeNumber = \"GENESIS_BLOCK\";\n        solutionForChallenge[challengeNumber] = \"42\"; // ahah yes\n        timeStampForEpoch[epochCount] = block.timestamp;\n        latestDifficultyPeriodStarted = block.number;\n        \n        epochCount = epochCount.add(1);\n        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n        miningTarget = _MAXIMUM_TARGET;\n        \n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n        //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n        bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n        //the challenge digest must match the expected\n        if (digest != challenge_digest) revert();\n        //the digest must be smaller than the target\n        if(uint256(digest) > miningTarget) revert();\n        //only allow one reward for each challenge\n        bytes32 solution = solutionForChallenge[challenge_digest];\n        solutionForChallenge[challengeNumber] = digest;\n        if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n        uint reward_amount = getMiningReward();\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        _totalSupply = _totalSupply.add(reward_amount);\n        //set readonly diagnostics data\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n       return true;\n    }\n\n    //a new 'block' to be mined\n    function _startNewMiningEpoch() internal {\n        \n        timeStampForEpoch[epochCount] = block.timestamp;\n        epochCount = epochCount.add(1);\n    \n      //Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\n      // Allows more thorough protection against multi-pool hash attacks\n      // https://github.com/zawy12/difficulty-algorithms/issues/9\n        miningTarget = _reAdjustDifficulty(epochCount);\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n      //do this last since this is a protection mechanism in the mint() function\n      challengeNumber = blockhash(block.number.sub(1));\n    }\n\n    //https://github.com/zawy12/difficulty-algorithms/issues/21\n    //readjust the target via a tempered EMA\n    function _reAdjustDifficulty(uint epoch) internal returns (uint) {\n    \n        uint timeTarget = 300;  // We want miners to spend 5 minutes to mine each 'block'\n        uint N = 6180;          //N = 1000*n, ratio between timeTarget and windowTime (31-ish minutes)\n                                // (Ethereum doesn't handle floating point numbers very well)\n        uint elapsedTime = timeStampForEpoch[epoch.sub(1)].sub(timeStampForEpoch[epoch.sub(2)]); // will revert if current timestamp is smaller than the previous one\n        targetForEpoch[epoch] = (targetForEpoch[epoch.sub(1)].mul(10000)).div( N.mul(3920).div(N.sub(1000).add(elapsedTime.mul(1042).div(timeTarget))).add(N));\n        //              newTarget   =   Tampered EMA-retarget on the last 6 blocks (a bit more, it's an approximation)\n\t// \t\t\t\tAlso, there's an adjust factor, in order to correct the delays induced by the time it takes for transactions to confirm\n\t//\t\t\t\tDifficulty is adjusted to the time it takes to produce a valid hash. Here, if we set it to take 300 seconds, it will actually take \n\t//\t\t\t\t300 seconds + TxConfirmTime to validate that block. So, we wad a little % to correct that lag time.\n\t//\t\t\t\tOnce Ethereum scales, it will actually make block times go a tad faster. There's no perfect answer to this problem at the moment\n        latestDifficultyPeriodStarted = block.number;\n        return targetForEpoch[epoch];\n    }\n\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n    function getChallengeNumber() public constant returns (bytes32) {\n        return challengeNumber;\n    }\n\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n     function getMiningDifficulty() public constant returns (uint) {\n        return _MAXIMUM_TARGET.div(targetForEpoch[epochCount]);\n    }\n\n    function getMiningTarget() public constant returns (uint) {\n       return targetForEpoch[epochCount];\n    }\n\n    //There's no limit to the coin supply\n    //reward follows more or less the same emmission rate as Dogecoins'. 5 minutes per block / 105120 block in one year (roughly)\n    function getMiningReward() public constant returns (uint) {\n        bytes32 digest = solutionForChallenge[challengeNumber];\n        if(epochCount > 160000) return (50000   * 10**uint(decimals) );                                   //  14.4 M/day / ~ 1.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 150 Billions)\n        if(epochCount > 140000) return (75000   * 10**uint(decimals) );                                   //  21.6 M/day / ~ 1.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 149 Billions)\n        if(epochCount > 120000) return (125000  * 10**uint(decimals) );                                  //  36.0 M/day / ~ 2.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 146 Billions)\n        if(epochCount > 100000) return (250000  * 10**uint(decimals) );                                  //  72.0 M/day / ~ 5.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 141 Billions) (~ 1 year elapsed)\n        if(epochCount > 80000) return  (500000  * 10**uint(decimals) );                                   // 144.0 M/day / ~10.0B Tokens in 20'000 blocks (coin supply @ 80'000th block ~ 131 Billions)\n        if(epochCount > 60000) return  (1000000 * 10**uint(decimals) );                                  // 288.0 M/day / ~20.0B Tokens in 20'000 blocks (coin supply @ 60'000th block ~ 111 Billions)\n        if(epochCount > 40000) return  ((uint256(keccak256(digest)) % 2500000) * 10**uint(decimals) );   // 360.0 M/day / ~25.0B Tokens in 20'000 blocks (coin supply @ 40'000th block ~  86 Billions)\n        if(epochCount > 20000) return  ((uint256(keccak256(digest)) % 3500000) * 10**uint(decimals) );   // 504.0 M/day / ~35.0B Tokens in 20'000 blocks (coin supply @ 20'000th block ~  51 Billions)\n                               return  ((uint256(keccak256(digest)) % 5000000) * 10**uint(decimals) );                         // 720.0 M/day / ~50.0B Tokens in 20'000 blocks \n    }\n\n    //help debug mining software (even though challenge_digest isn't used, this function is constant and helps troubleshooting mining issues)\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n        return digest;\n    }\n\n    //help debug mining software\n    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n      bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n      if(uint256(digest) > testTarget) revert();\n      return (digest == challenge_digest);\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n    \n    function donationTo(address tokenOwner) public constant returns (address donationAddress) {\n        return donationsTo[tokenOwner];\n    }\n    \n    function changeDonation(address donationAddress) public returns (bool success) {\n        donationsTo[msg.sender] = donationAddress;\n        \n        emit DonationAddressOf(msg.sender , donationAddress); \n        return true;\n    \n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        \n        address donation = donationsTo[msg.sender];\n        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 RWN for the sender\n        \n        balances[to] = balances[to].add(tokens);\n        balances[donation] = balances[donation].add(5000); // 0.5 RWN for the sender's donation address\n        \n        emit Transfer(msg.sender, to, tokens);\n        emit Donation(donation);\n        \n        return true;\n    }\n    \n    function transferAndDonateTo(address to, uint tokens, address donation) public returns (bool success) {\n        \n        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 RWN for the sender\n        balances[to] = balances[to].add(tokens);\n        balances[donation] = balances[donation].add(5000); // 0.5 RWN for the sender's specified donation address\n        emit Transfer(msg.sender, to, tokens);\n        emit Donation(donation);\n        return true;\n    }\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        balances[donationsTo[from]] = balances[donationsTo[from]].add(5000);     // 0.5 RWN for the sender's donation address\n        balances[donationsTo[msg.sender]] = balances[donationsTo[msg.sender]].add(5000); // 0.5 RWN for the sender\n        emit Transfer(from, to, tokens);\n        emit Donation(donationsTo[from]);\n        emit Donation(donationsTo[msg.sender]);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n    \n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "6080604052620100006008557c01000000000000000000000000000000000000000000000000000000006009553480156200003957600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f52574e000000000000000000000000000000000000000000000000000000000081525060029080519060200190620000c79291906200036e565b506040805190810160405280600a81526020017f526f77616e20436f696e0000000000000000000000000000000000000000000081525060039080519060200190620001159291906200036e565b50600a600460006101000a81548160ff021916908360ff1602179055506000600781905550600460009054906101000a900460ff1660ff16600a0a6302aea54002600581905550600954601060006007548152602001908152602001600020819055507f47454e455349535f424c4f434b00000000000000000000000000000000000000600b81600019169055507f3432000000000000000000000000000000000000000000000000000000000000600f6000600b54600019166000191681526020019081526020016000208160001916905550426011600060075481526020019081526020016000208190555043600681905550620002306001600754620003516401000000000262002c1b179091906401000000009004565b60078190555060095460106000600754815260200190815260200160002081905550600954600a81905550600554601260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a36200041d565b600081830190508281101515156200036857600080fd5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003b157805160ff1916838001178555620003e2565b82800160010185558215620003e2579182015b82811115620003e1578251825591602001919060010190620003c4565b5b509050620003f19190620003f5565b5090565b6200041a91905b8082111562000416576000816000905550600101620003fc565b5090565b90565b612e9e806200042d6000396000f3006080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101dd578063095ea7b31461026d5780630f917e31146102d2578063163aa00d1461035757806317da485f146103825780631801fbe5146103ad57806318160ddd1461040057806323b872dd1461042b57806329de3798146104b0578063313ce567146104f157806332e99708146105225780633eaaf86b1461054d5780633f06e17c14610578578063490203a7146105d35780634ef37628146105fe5780636fd396d61461063157806370a082311461068857806371d9e0df146106df57806379ba50971461072057806381269a5614610737578063829965cc146107a257806387a2a9d6146107cd5780638a769d35146107f85780638ae0368b146108235780638da5cb5b1461085657806395d89b41146108ad57806397566aa01461093d578063a70a8d23146109a2578063a9059cbb146109ef578063bafedcaa14610a54578063cae9ca5114610a7f578063cb9ae70714610b2a578063d416efdb14610b55578063d4ee1d9014610bd8578063dc39d06d14610c2f578063dc6e9cf914610c94578063dd62ed3e14610cbf578063f2fde38b14610d36575b600080fd5b3480156101e957600080fd5b506101f2610d79565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610232578082015181840152602081019050610217565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027957600080fd5b506102b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e17565b604051808215151515815260200191505060405180910390f35b3480156102de57600080fd5b5061033d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f09565b604051808215151515815260200191505060405180910390f35b34801561036357600080fd5b5061036c6111b3565b6040518082815260200191505060405180910390f35b34801561038e57600080fd5b506103976111b9565b6040518082815260200191505060405180910390f35b3480156103b957600080fd5b506103e66004803603810190808035906020019092919080356000191690602001909291905050506111ea565b604051808215151515815260200191505060405180910390f35b34801561040c57600080fd5b50610415611468565b6040518082815260200191505060405180910390f35b34801561043757600080fd5b50610496600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114c3565b604051808215151515815260200191505060405180910390f35b3480156104bc57600080fd5b506104db60048036038101908080359060200190929190505050611b9c565b6040518082815260200191505060405180910390f35b3480156104fd57600080fd5b50610506611bb4565b604051808260ff1660ff16815260200191505060405180910390f35b34801561052e57600080fd5b50610537611bc7565b6040518082815260200191505060405180910390f35b34801561055957600080fd5b50610562611be4565b6040518082815260200191505060405180910390f35b34801561058457600080fd5b506105b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bea565b604051808215151515815260200191505060405180910390f35b3480156105df57600080fd5b506105e8611d0a565b6040518082815260200191505060405180910390f35b34801561060a57600080fd5b50610613611f47565b60405180826000191660001916815260200191505060405180910390f35b34801561063d57600080fd5b50610646611f51565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069457600080fd5b506106c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f77565b6040518082815260200191505060405180910390f35b3480156106eb57600080fd5b5061070a60048036038101908080359060200190929190505050611fc0565b6040518082815260200191505060405180910390f35b34801561072c57600080fd5b50610735611fd8565b005b34801561074357600080fd5b50610788600480360381019080803590602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190505050612177565b604051808215151515815260200191505060405180910390f35b3480156107ae57600080fd5b506107b761220c565b6040518082815260200191505060405180910390f35b3480156107d957600080fd5b506107e2612212565b6040518082815260200191505060405180910390f35b34801561080457600080fd5b5061080d612218565b6040518082815260200191505060405180910390f35b34801561082f57600080fd5b5061083861221e565b60405180826000191660001916815260200191505060405180910390f35b34801561086257600080fd5b5061086b612224565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108b957600080fd5b506108c2612249565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109025780820151818401526020810190506108e7565b50505050905090810190601f16801561092f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561094957600080fd5b5061098460048036038101908080359060200190929190803560001916906020019092919080356000191690602001909291905050506122e7565b60405180826000191660001916815260200191505060405180910390f35b3480156109ae57600080fd5b506109d16004803603810190808035600019169060200190929190505050612360565b60405180826000191660001916815260200191505060405180910390f35b3480156109fb57600080fd5b50610a3a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612378565b604051808215151515815260200191505060405180910390f35b348015610a6057600080fd5b50610a69612685565b6040518082815260200191505060405180910390f35b348015610a8b57600080fd5b50610b10600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061268b565b604051808215151515815260200191505060405180910390f35b348015610b3657600080fd5b50610b3f6128da565b6040518082815260200191505060405180910390f35b348015610b6157600080fd5b50610b96600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128e0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610be457600080fd5b50610bed612949565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c3b57600080fd5b50610c7a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061296f565b604051808215151515815260200191505060405180910390f35b348015610ca057600080fd5b50610ca9612ad3565b6040518082815260200191505060405180910390f35b348015610ccb57600080fd5b50610d20600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ad9565b6040518082815260200191505060405180910390f35b348015610d4257600080fd5b50610d77600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b60565b005b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b505050505081565b600081601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000610f71611388610f6385601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612bff90919063ffffffff16565b612c1b90919063ffffffff16565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061100683601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c1b90919063ffffffff16565b601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061109d611388601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c1b90919063ffffffff16565b601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce782604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600190509392505050565b600e5481565b60006111e560106000600754815260200190815260200160002054600954612c3790919063ffffffff16565b905090565b600080600080600b5433876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019350505050604051809103902092508460001916836000191614151561127357600080fd5b600a548360019004111561128657600080fd5b600f6000866000191660001916815260200190815260200160002054915082600f6000600b54600019166000191681526020019081526020016000208160001916905550600060010282600019161415156112e057600080fd5b6112e8611d0a565b905061133c81601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c1b90919063ffffffff16565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061139481600554612c1b90919063ffffffff16565b60058190555033600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d8190555043600e819055506113f1612c5b565b3373ffffffffffffffffffffffffffffffffffffffff167fcf6fbb9dcea7d07263ab4f5c3a92f53af33dffc421d9d121e1c74b307e68189d82600754600b54604051808481526020018381526020018260001916600019168152602001935050505060405180910390a26001935050505092915050565b60006114be601260008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600554612bff90919063ffffffff16565b905090565b600061151782601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612bff90919063ffffffff16565b601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115e982601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612bff90919063ffffffff16565b601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116bb82601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c1b90919063ffffffff16565b601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117b161138860126000601360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c1b90919063ffffffff16565b60126000601360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061190661138860126000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c1b90919063ffffffff16565b60126000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a37f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce7601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a17f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce7601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600190509392505050565b60116020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b600060106000600754815260200190815260200160002054905090565b60055481565b600081601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc9a43a9d07839ddc6fa52cff9559f630776003d97ecd4909f433d10cc760f8903383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160019050919050565b600080600f6000600b5460001916600019168152602001908152602001600020549050620271006007541115611d5b57600460009054906101000a900460ff1660ff16600a0a61c350029150611f43565b620222e06007541115611d8a57600460009054906101000a900460ff1660ff16600a0a620124f8029150611f43565b6201d4c06007541115611db957600460009054906101000a900460ff1660ff16600a0a6201e848029150611f43565b620186a06007541115611de857600460009054906101000a900460ff1660ff16600a0a6203d090029150611f43565b620138806007541115611e1757600460009054906101000a900460ff1660ff16600a0a6207a120029150611f43565b61ea606007541115611e4557600460009054906101000a900460ff1660ff16600a0a620f4240029150611f43565b619c406007541115611e9f57600460009054906101000a900460ff1660ff16600a0a622625a082604051808260001916600019168152602001915050604051809103902060019004811515611e9657fe5b06029150611f43565b614e206007541115611ef957600460009054906101000a900460ff1660ff16600a0a623567e082604051808260001916600019168152602001915050604051809103902060019004811515611ef057fe5b06029150611f43565b600460009054906101000a900460ff1660ff16600a0a624c4b4082604051808260001916600019168152602001915050604051809103902060019004811515611f3e57fe5b060291505b5090565b6000600b54905090565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60106020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561203457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000808333876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040518091039020905082816001900411156121f657600080fd5b8460001916816000191614915050949350505050565b60075481565b60095481565b600a5481565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122df5780601f106122b4576101008083540402835291602001916122df565b820191906000526020600020905b8154815290600101906020018083116122c257829003601f168201915b505050505081565b6000808233866040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001935050505060405180910390209050809150509392505050565b600f6020528060005260406000206000915090505481565b600080601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061244361138861243585601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612bff90919063ffffffff16565b612c1b90919063ffffffff16565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124d883601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c1b90919063ffffffff16565b601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061256f611388601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c1b90919063ffffffff16565b601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce781604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1600191505092915050565b600d5481565b600082601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561286857808201518184015260208101905061284d565b50505050905090810190601f1680156128955780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156128b757600080fd5b505af11580156128cb573d6000803e3d6000fd5b50505050600190509392505050565b60065481565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129cc57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a9057600080fd5b505af1158015612aa4573d6000803e3d6000fd5b505050506040513d6020811015612aba57600080fd5b8101908080519060200190929190505050905092915050565b60085481565b6000601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bbb57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515612c1057600080fd5b818303905092915050565b60008183019050828110151515612c3157600080fd5b92915050565b60008082111515612c4757600080fd5b8183811515612c5257fe5b04905092915050565b4260116000600754815260200190815260200160002081905550612c8b6001600754612c1b90919063ffffffff16565b600781905550612c9c600754612cc3565b600a81905550612cb6600143612bff90919063ffffffff16565b40600b8160001916905550565b60008060008061012c92506118249150612d3260116000612cee600289612bff90919063ffffffff16565b81526020019081526020016000205460116000612d1560018a612bff90919063ffffffff16565b815260200190815260200160002054612bff90919063ffffffff16565b9050612e05612dbc83612dae612d8b612d6888612d5a61041289612e4190919063ffffffff16565b612c3790919063ffffffff16565b612d7d6103e889612bff90919063ffffffff16565b612c1b90919063ffffffff16565b612da0610f5088612e4190919063ffffffff16565b612c3790919063ffffffff16565b612c1b90919063ffffffff16565b612df761271060106000612dda60018c612bff90919063ffffffff16565b815260200190815260200160002054612e4190919063ffffffff16565b612c3790919063ffffffff16565b60106000878152602001908152602001600020819055504360068190555060106000868152602001908152602001600020549350505050919050565b600081830290506000831480612e615750818382811515612e5e57fe5b04145b1515612e6c57600080fd5b929150505600a165627a7a72305820812cd1fa6dfed9a0f9d3b15aa606dafbb150194e56bb67910cbc5b1707fbef270029"
}