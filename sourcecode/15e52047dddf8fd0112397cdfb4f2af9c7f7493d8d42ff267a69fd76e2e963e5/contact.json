{
  "address": "0xfec0cf7fe078a500abf15f1284958f22049c2c7e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Maecenas: ART Token",
  "contractName": "MaecenasToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-03\n*/\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract IToken {\n  function totalSupply() constant returns (uint256 totalSupply);\n  function mintTokens(address _to, uint256 _amount) {}\n}\ncontract IMintableToken {\n  function mintTokens(address _to, uint256 _amount){}\n}\ncontract IERC20Token {\n  function totalSupply() constant returns (uint256 totalSupply);\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\n  function transfer(address _to, uint256 _value) returns (bool success) {}\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n  function approve(address _spender, uint256 _value) returns (bool success) {}\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ItokenRecipient {\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n}\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\ncontract ReentrnacyHandlingContract{\n\n    bool locked;\n\n    modifier noReentrancy() {\n        require(!locked);\n        locked = true;\n        _;\n        locked = false;\n    }\n}\n\ncontract Lockable is Owned{\n\n  uint256 public lockedUntilBlock;\n\n  event ContractLocked(uint256 _untilBlock, string _reason);\n\n  modifier lockAffected {\n      require(block.number > lockedUntilBlock);\n      _;\n  }\n\n  function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n    lockedUntilBlock = _untilBlock;\n    ContractLocked(_untilBlock, _reason);\n  }\n\n\n  function lockUntil(uint256 _untilBlock, string _reason) onlyOwner {\n    lockedUntilBlock = _untilBlock;\n    ContractLocked(_untilBlock, _reason);\n  }\n}\n\n\ncontract Token is IERC20Token, Owned, Lockable{\n\n  using SafeMath for uint256;\n\n  /* Public variables of the token */\n  string public standard;\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  address public crowdsaleContractAddress;\n\n  /* Private variables of the token */\n  uint256 supply = 0;\n  mapping (address => uint256) balances;\n  mapping (address => mapping (address => uint256)) allowances;\n\n  /* Events */\n  event Mint(address indexed _to, uint256 _value);\n\n  /* Returns total supply of issued tokens */\n  function totalSupply() constant returns (uint256) {\n    return supply;\n  }\n\n  /* Returns balance of address */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /* Transfers tokens from your address to other */\n  function transfer(address _to, uint256 _value) lockAffected returns (bool success) {\n    require(_to != 0x0 && _to != address(this));\n    balances[msg.sender] = balances[msg.sender].sub(_value); // Deduct senders balance\n    balances[_to] = balances[_to].add(_value);               // Add recivers blaance\n    Transfer(msg.sender, _to, _value);                       // Raise Transfer event\n    return true;\n  }\n\n  /* Approve other address to spend tokens on your account */\n  function approve(address _spender, uint256 _value) lockAffected returns (bool success) {\n    allowances[msg.sender][_spender] = _value;        // Set allowance\n    Approval(msg.sender, _spender, _value);           // Raise Approval event\n    return true;\n  }\n\n  /* Approve and then communicate the approved contract in a single tx */\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected returns (bool success) {\n    ItokenRecipient spender = ItokenRecipient(_spender);            // Cast spender to tokenRecipient contract\n    approve(_spender, _value);                                      // Set approval to contract for _value\n    spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\n    return true;\n  }\n\n  /* A contract attempts to get the coins */\n  function transferFrom(address _from, address _to, uint256 _value) lockAffected returns (bool success) {\n    require(_to != 0x0 && _to != address(this));\n    balances[_from] = balances[_from].sub(_value);                              // Deduct senders balance\n    balances[_to] = balances[_to].add(_value);                                  // Add recipient blaance\n    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);  // Deduct allowance for this address\n    Transfer(_from, _to, _value);                                               // Raise Transfer event\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowances[_owner][_spender];\n  }\n\n  function mintTokens(address _to, uint256 _amount) {\n    require(msg.sender == crowdsaleContractAddress);\n\n    supply = supply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n  }\n\n  function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner{\n    IERC20Token(_tokenAddress).transfer(_to, _amount);\n  }\n}\n\n\n\ncontract MaecenasToken is Token {\n\n  /* Initializes contract */\n  function MaecenasToken() {\n    standard = \"Maecenas token v1.0\";\n    name = \"Maecenas ART Token\";\n    symbol = \"ART\";\n    decimals = 18;\n    crowdsaleContractAddress = 0x9B60874D7bc4e4fBDd142e0F5a12002e4F7715a6; \n    lockFromSelf(4366494, \"Lock before crowdsale starts\");\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"lockUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052600060075534156200001557600080fd5b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6040805190810160405280601381526020017f4d616563656e617320746f6b656e2076312e300000000000000000000000000081525060039080519060200190620000a5929190620002c6565b506040805190810160405280601281526020017f4d616563656e61732041525420546f6b656e000000000000000000000000000081525060049080519060200190620000f3929190620002c6565b506040805190810160405280600381526020017f41525400000000000000000000000000000000000000000000000000000000008152506005908051906020019062000141929190620002c6565b506012600660006101000a81548160ff021916908360ff160217905550739b60874d7bc4e4fbdd142e0f5a12002e4f7715a6600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200020b6242a09e6040805190810160405280601c81526020017f4c6f636b206265666f72652063726f776473616c6520737461727473000000008152506200021264010000000002620019fd176401000000009004565b5b62000375565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620002855780820151818401525b60208101905062000267565b50505050905090810190601f168015620002b35780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200030957805160ff19168380011785556200033a565b828001600101855582156200033a579182015b82811115620003395782518255916020019190600101906200031c565b5b5090506200034991906200034d565b5090565b6200037291905b808211156200036e57600081600090555060010162000354565b5090565b90565b611ada80620003856000396000f30060606040523615610110576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610115578063095ea7b3146101a457806318160ddd146101fe57806323b872dd14610227578063313ce567146102a05780635a3b7e42146102cf57806370a082311461035e57806379ba5097146103ab5780638da5cb5b146103c057806395d89b41146104155780639c481c9e146104a4578063a0929cda146104f9578063a9059cbb1461055a578063b26eafe4146105b4578063cae9ca511461061a578063d4ee1d90146106b7578063d8162db71461070c578063dd62ed3e14610735578063f0dda65c146107a1578063f2fde38b146107e3575b600080fd5b341561012057600080fd5b61012861081c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101695780820151818401525b60208101905061014d565b50505050905090810190601f1680156101965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101af57600080fd5b6101e4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ba565b604051808215151515815260200191505060405180910390f35b341561020957600080fd5b6102116109be565b6040518082815260200191505060405180910390f35b341561023257600080fd5b610286600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109c9565b604051808215151515815260200191505060405180910390f35b34156102ab57600080fd5b6102b3610ce4565b604051808260ff1660ff16815260200191505060405180910390f35b34156102da57600080fd5b6102e2610cf7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103235780820151818401525b602081019050610307565b50505050905090810190601f1680156103505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036957600080fd5b610395600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d95565b6040518082815260200191505060405180910390f35b34156103b657600080fd5b6103be610ddf565b005b34156103cb57600080fd5b6103d3610fbc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561042057600080fd5b610428610fe1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104695780820151818401525b60208101905061044d565b50505050905090810190601f1680156104965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104af57600080fd5b6104b761107f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561050457600080fd5b610558600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110a5565b005b341561056557600080fd5b61059a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111cb565b604051808215151515815260200191505060405180910390f35b34156105bf57600080fd5b610618600480803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506113d6565b005b341561062557600080fd5b61069d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506114e0565b604051808215151515815260200191505060405180910390f35b34156106c257600080fd5b6106ca611667565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561071757600080fd5b61071f61168d565b6040518082815260200191505060405180910390f35b341561074057600080fd5b61078b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611693565b6040518082815260200191505060405180910390f35b34156107ac57600080fd5b6107e1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061171b565b005b34156107ee57600080fd5b61081a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118ca565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108b25780601f10610887576101008083540402835291602001916108b2565b820191906000526020600020905b81548152906001019060200180831161089557829003601f168201915b505050505081565b6000600254431115156108cc57600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b5b92915050565b600060075490505b90565b6000600254431115156109db57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614158015610a2e57503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1515610a3957600080fd5b610a8b82600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119c490919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b2082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119de90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bf282600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119c490919063ffffffff16565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b5b9392505050565b600660009054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d8d5780601f10610d6257610100808354040283529160200191610d8d565b820191906000526020600020905b815481529060010190602001808311610d7057829003601f168201915b505050505081565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e3b57600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110775780601f1061104c57610100808354040283529160200191611077565b820191906000526020600020905b81548152906001019060200180831161105a57829003601f168201915b505050505081565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110fd57fe5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156111a857600080fd5b6102c65a03f115156111b957600080fd5b50505060405180519050505b5b505050565b6000600254431115156111dd57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415801561123057503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561123b57600080fd5b61128d82600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119c490919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061132282600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119de90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142e57fe5b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561149f5780820151818401525b602081019050611483565b50505050905090810190601f1680156114cc5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5b5050565b600080600254431115156114f357600080fd5b84905061150085856108ba565b508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115f75780820151818401525b6020810190506115db565b50505050905090810190601f1680156116245780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561164557600080fd5b6102c65a03f1151561165657600080fd5b505050600191505b5b509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177757600080fd5b61178c816007546119de90919063ffffffff16565b6007819055506117e481600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119de90919063ffffffff16565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561192257fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561197e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60008282111515156119d257fe5b81830390505b92915050565b60008082840190508381101515156119f257fe5b8091505b5092915050565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a6e5780820151818401525b602081019050611a52565b50505050905090810190601f168015611a9b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50505600a165627a7a7230582062b7d552dd3e7a8be35c2c74e720844eb56312846effa55c609b3fe2cde7f51b0029"
}