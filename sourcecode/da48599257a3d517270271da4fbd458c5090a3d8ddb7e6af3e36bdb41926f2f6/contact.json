{
  "address": "0x3850f1a8104fbdbea60b16fb1323cd3974031990",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DelegatedTransferOperatorV4",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity 0.4.25;\n\n/* This Source Code Form is subject to the terms of the Mozilla external\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This code has not been reviewed.\n * Do not use or deploy this code before reviewing it personally first.\n */\n\ninterface ERC777Token {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address owner) external view returns (uint256);\n  function granularity() external view returns (uint256);\n\n  function defaultOperators() external view returns (address[]);\n  function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n  function authorizeOperator(address operator) external;\n  function revokeOperator(address operator) external;\n\n  function send(address to, uint256 amount, bytes holderData) external;\n  function operatorSend(address from, address to, uint256 amount, bytes holderData, bytes operatorData) external;\n\n  function burn(uint256 amount, bytes holderData) external;\n  function operatorBurn(address from, uint256 amount, bytes holderData, bytes operatorData) external;\n\n  event Sent(\n    address indexed operator,\n    address indexed from,\n    address indexed to,\n    uint256 amount,\n    bytes holderData,\n    bytes operatorData\n  );\n  event Minted(address indexed operator, address indexed to, uint256 amount, bytes operatorData);\n  event Burned(address indexed operator, address indexed from, uint256 amount, bytes holderData, bytes operatorData);\n  event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n  event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n\n/// @title DelegatedTransferOperatorV4\n/// @author Roger Wu (Roger-Wu)\n/// @dev A DelegatedTransferOperator contract that has the following features:\n///   1. To prevent replay attack, we check if a _nonce has been used by a token holder.\n///   2. Minimize the gas by making functions inline and remove trivial event.\n///   3. Add _userData.\ncontract DelegatedTransferOperatorV4 {\n  mapping(address => uint256) public usedNonce;\n  ERC777Token public tokenContract;\n\n  constructor(address _tokenAddress) public {\n    tokenContract = ERC777Token(_tokenAddress);\n  }\n\n  /**\n    * @notice Submit a presigned transfer\n    * @param _to address The address which you want to transfer to.\n    * @param _delegate address The address which is allowed to send this transaction.\n    * @param _value uint256 The amount of tokens to be transferred.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    * @param _userData bytes Data generated by the user to be sent to the recipient.\n    * @param _sig_r bytes32 The r of the signature.\n    * @param _sig_s bytes32 The s of the signature.\n    * @param _sig_v uint8 The v of the signature.\n    * @notice some rules:\n    * 1. If _to is address(0), the tx will fail when doSend().\n    * 2. If _delegate == address(0), then anyone can be the delegate.\n    * 3. _nonce must be greater than the last used nonce by the token holder,\n    *    but nonces don't have to be serial numbers.\n    *    We recommend using unix time as nonce.\n    * 4. _sig_v should be 27 or 28.\n    */\n  function transferPreSigned(\n    address _to,\n    address _delegate,\n    uint256 _value,\n    uint256 _fee,\n    uint256 _nonce,\n    bytes _userData,\n    bytes32 _sig_r,\n    bytes32 _sig_s,\n    uint8 _sig_v\n  )\n    external\n  {\n    require(\n      _delegate == address(0) || _delegate == msg.sender,\n      \"_delegate should be address(0) or msg.sender\"\n    );\n\n    // address _signer = recover(_hash, _signature);\n    address _signer = (_sig_v != 27 && _sig_v != 28) ?\n      address(0) :\n      ecrecover(\n        keccak256(abi.encodePacked(\n          address(this),\n          _to,\n          _delegate,\n          _value,\n          _fee,\n          _nonce,\n          _userData\n        )),\n        _sig_v, _sig_r, _sig_s\n      );\n\n    require(\n      _signer != address(0),\n      \"_signature is invalid.\"\n    );\n\n    require(\n      _nonce > usedNonce[_signer],\n      \"_nonce must be greater than the last used nonce of the token holder.\"\n    );\n\n    usedNonce[_signer] = _nonce;\n\n    tokenContract.operatorSend(_signer, _to, _value, _userData, \"\");\n    if (_fee > 0) {\n      tokenContract.operatorSend(_signer, msg.sender, _fee, _userData, \"\");\n    }\n  }\n\n  /**\n    * @notice Hash (keccak256) of the payload used by transferPreSigned\n    * @param _operator address The address of the operator.\n    * @param _to address The address which you want to transfer to.\n    * @param _delegate address The address of the delegate.\n    * @param _value uint256 The amount of tokens to be transferred.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    * @param _userData bytes Data generated by the user to be sent to the recipient.\n    */\n  function transferPreSignedHashing(\n    address _operator,\n    address _to,\n    address _delegate,\n    uint256 _value,\n    uint256 _fee,\n    uint256 _nonce,\n    bytes _userData\n  )\n    public\n    pure\n    returns (bytes32)\n  {\n    return keccak256(abi.encodePacked(\n      _operator,\n      _to,\n      _delegate,\n      _value,\n      _fee,\n      _nonce,\n      _userData\n    ));\n  }\n\n  /**\n    * @notice Recover signer address from a message by using his signature\n    * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n    * @param sig bytes signature, the signature is generated using web3.eth.sign()\n    */\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 0x20))\n      s := mload(add(sig, 0x40))\n      v := byte(0, mload(add(sig, 0x60)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610a74833981016040525160018054600160a060020a031916600160a060020a03909216919091179055610a24806100506000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166319045a2581146100715780633e61e9dc146100eb57806355a373d61461011e5780635efd168214610133578063816413f814610183575b600080fd5b34801561007d57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100cf9583359536956044949193909101919081908401838280828437509497506102049650505050505050565b60408051600160a060020a039092168252519081900360200190f35b3480156100f757600080fd5b5061010c600160a060020a03600435166102d9565b60408051918252519081900360200190f35b34801561012a57600080fd5b506100cf6102eb565b34801561013f57600080fd5b50610181600160a060020a0360048035821691602480359091169160443591606435916084359160a43590810191013560c43560e43560ff61010435166102fa565b005b34801561018f57600080fd5b50604080516020600460c43581810135601f810184900484028501840190955284845261010c948235600160a060020a03908116956024803583169660443590931695606435956084359560a435953695939460e4949301919081908401838280828437509497506108959650505050505050565b6000806000808451604114151561021e57600093506102d0565b50505060208201516040830151606084015160001a601b60ff8216101561024357601b015b8060ff16601b1415801561025b57508060ff16601c14155b1561026957600093506102d0565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af11580156102c3573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b60006020819052908152604090205481565b600154600160a060020a031681565b6000600160a060020a038a16158061031a5750600160a060020a038a1633145b15156103ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f5f64656c65676174652073686f756c642062652061646472657373283029206f60448201527f72206d73672e73656e6465720000000000000000000000000000000000000000606482015290519081900360840190fd5b8160ff16601b141580156103c557508160ff16601c14155b61053f576001308c8c8c8c8c8c8c6040516020018089600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140188600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140187600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018681526020018581526020018481526020018383808284378201915050985050505050505050506040516020818303038152906040526040518082805190602001908083835b602083106104b45780518252601f199092019160209182019101610495565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008084528383018087529190915260ff8a1683860152606083018c9052608083018b9052935160a08084019750919550601f1981019492819003909101925090865af1158015610530573d6000803e3d6000fd5b50505060206040510351610542565b60005b9050600160a060020a03811615156105bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5f7369676e617475726520697320696e76616c69642e00000000000000000000604482015290519081900360640190fd5b600160a060020a038116600090815260208190526040902054871161068e57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f5f6e6f6e6365206d7573742062652067726561746572207468616e2074686520908201527f6c6173742075736564206e6f6e6365206f662074686520746f6b656e20686f6c60648201527f6465722e00000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b8660008083600160a060020a0316600160a060020a0316815260200190815260200160002081905550600160009054906101000a9004600160a060020a0316600160a060020a03166362ad1b83828d8c8a8a6040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018086600160a060020a0316600160a060020a0316815260200185600160a060020a0316600160a060020a03168152602001848152602001806020018060200183810383528585828181526020019250808284378201915050838103825260008152602001602001975050505050505050600060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b505050506000881115610888576001546040517f62ad1b83000000000000000000000000000000000000000000000000000000008152600160a060020a03838116600483019081523360248401819052604484018d905260a06064850190815260a485018b905292909416936362ad1b8393869391928e928d928d929190608481019060c4018585808284378201915050838103825260008152602001602001975050505050505050600060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b505050505b5050505050505050505050565b6000878787878787876040516020018088600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140187600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140186600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185815260200184815260200183815260200182805190602001908083835b602083106109575780518252601f199092019160209182019101610938565b6001836020036101000a0380198251168184511680821785525050505050509050019750505050505050506040516020818303038152906040526040518082805190602001908083835b602083106109c05780518252601f1990920191602091820191016109a1565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209b9a50505050505050505050505600a165627a7a72305820283dd8b1a64158f1778f429c523f8a11133863ad446c2f58c1e88eb8aa2172d1002900000000000000000000000067ab11058ef23d0a19178f61a050d3c38f81ae21",
  "constructorArguments": "00000000000000000000000067ab11058ef23d0a19178f61a050d3c38f81ae21"
}