{
  "address": "0x1affed30268fd7515c97c2c517bcf15b2fc539c0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DATACHAIN",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity 0.5.8;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract ERC1820Registry {\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address);\n    function setManager(address _addr, address _newManager) external;\n    function getManager(address _addr) public view returns (address);\n}\n\n\n/// Base client to interact with the registry.\ncontract ERC1820Client {\n    ERC1820Registry constant ERC1820REGISTRY = ERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    function setInterfaceImplementation(string memory _interfaceLabel, address _implementation) internal {\n        bytes32 interfaceHash = keccak256(abi.encodePacked(_interfaceLabel));\n        ERC1820REGISTRY.setInterfaceImplementer(address(this), interfaceHash, _implementation);\n    }\n\n    function interfaceAddr(address addr, string memory _interfaceLabel) internal view returns(address) {\n        bytes32 interfaceHash = keccak256(abi.encodePacked(_interfaceLabel));\n        return ERC1820REGISTRY.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        ERC1820REGISTRY.setManager(address(this), _newManager);\n    }\n}\n\ninterface ERC20Token {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n\ninterface ERC777Token {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function granularity() external view returns (uint256);\n\n    function defaultOperators() external view returns (address[] memory);\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n    function authorizeOperator(address operator) external;\n    function revokeOperator(address operator) external;\n\n    function send(address to, uint256 amount, bytes calldata data) external;\n    function operatorSend(\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    function burn(uint256 amount, bytes calldata data) external;\n    function operatorBurn(address from, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n\ninterface ERC777TokensSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n\ninterface ERC777TokensRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n\ncontract ERC777BaseToken is ERC777Token, ERC1820Client {\n    using SafeMath for uint256;\n\n    string internal mName;\n    string internal mSymbol;\n    uint256 internal mGranularity;\n    uint256 internal mTotalSupply;\n\n\n    mapping(address => uint) internal mBalances;\n\n    address[] internal mDefaultOperators;\n    mapping(address => bool) internal mIsDefaultOperator;\n    mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator;\n    mapping(address => mapping(address => bool)) internal mAuthorizedOperators;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _granularity,\n        address[] memory _defaultOperators\n    ) internal {\n        mName = _name;\n        mSymbol = _symbol;\n        mTotalSupply = 0;\n        require(_granularity >= 1, \"Granularity must be > 1\");\n        mGranularity = _granularity;\n\n        mDefaultOperators = _defaultOperators;\n        for (uint256 i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }\n\n        setInterfaceImplementation(\"ERC777Token\", address(this));\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public view returns (string memory) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public view returns (string memory) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public view returns (uint256) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public view returns (uint256) { return mTotalSupply; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public view returns (uint256) { return mBalances[_tokenHolder]; }\n\n    /// @notice Return the list of default operators\n    /// @return the list of all the default operators\n    function defaultOperators() public view returns (address[] memory) { return mDefaultOperators; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_data` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint256 _amount, bytes calldata _data) external {\n        doSend(msg.sender, msg.sender, _to, _amount, _data, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) external {\n        require(_operator != msg.sender, \"Cannot authorize yourself as an operator\");\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][msg.sender] = false;\n        } else {\n            mAuthorizedOperators[_operator][msg.sender] = true;\n        }\n        emit AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) external {\n        require(_operator != msg.sender, \"Cannot revoke yourself as an operator\");\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][msg.sender] = true;\n        } else {\n            mAuthorizedOperators[_operator][msg.sender] = false;\n        }\n        emit RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public view returns (bool) {\n        return (_operator == _tokenHolder // solium-disable-line operator-whitespace\n            || mAuthorizedOperators[_operator][_tokenHolder]\n            || (mIsDefaultOperator[_operator] && !mRevokedDefaultOperator[_operator][_tokenHolder]));\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data,\n        bytes calldata _operatorData\n    )\n        external\n    {\n        require(isOperatorFor(msg.sender, _from), \"Not an operator\");\n        doSend(msg.sender, _from, _to, _amount, _data, _operatorData, true);\n    }\n\n    function burn(uint256 _amount, bytes calldata _data) external {\n        doBurn(msg.sender, msg.sender, _amount, _data, \"\");\n    }\n\n    function operatorBurn(\n        address _tokenHolder,\n        uint256 _amount,\n        bytes calldata _data,\n        bytes calldata _operatorData\n    )\n        external\n    {\n        require(isOperatorFor(msg.sender, _tokenHolder), \"Not an operator\");\n        doBurn(msg.sender, _tokenHolder, _amount, _data, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n    //\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint256 _amount) internal view {\n        require(_amount % mGranularity == 0, \"Amount is not a multiple of granualrity\");\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    function isRegularAddress(address _addr) internal view returns(bool) {\n        if (_addr == address(0)) { return false; }\n        uint size;\n        assembly { size := extcodesize(_addr) } // solium-disable-line security/no-inline-assembly\n        return size == 0;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777tokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        // prevent sending if locked\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _data, _operatorData);\n\n        require(_to != address(0), \"Cannot send to 0x0\");\n        require(mBalances[_from] >= _amount, \"Not enough funds\");\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _data, _operatorData, _preventLocking);\n\n        emit Sent(_operator, _from, _to, _amount, _data, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _data Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(\n        address _operator,\n        address _tokenHolder,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData\n    )\n        internal\n    {\n        callSender(_operator, _tokenHolder, address(0), _amount, _data, _operatorData);\n\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount, \"Not enough funds\");\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        emit Burned(_operator, _tokenHolder, _amount, _data, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\n        if (recipientImplementation != address(0)) {\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _data, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to), \"Cannot send to contract without ERC777TokensRecipient\");\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ERC777TokensSender\");\n        if (senderImplementation == address(0)) { return; }\n        ERC777TokensSender(senderImplementation).tokensToSend(\n            _operator, _from, _to, _amount, _data, _operatorData);\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ERC777ERC20BaseToken is ERC20Token, ERC777BaseToken, Ownable {\n    bool internal mErc20compatible;\n\n    mapping(address => mapping(address => uint256)) internal mAllowed;\n\n    // allowedAddresses will be able to transfer even when locked\n    // lockedAddresses will *not* be able to transfer even when *not locked*\n    mapping(address => bool) public allowedAddresses;\n    mapping(address => bool) public lockedAddresses;\n    bool public locked = false;\n\n    function allowAddress(address _addr, bool _isallowed) public onlyOwner {\n      require(_addr != owner());\n      allowedAddresses[_addr] = _isallowed;\n    }\n\n    function lockAddress(address _addr, bool _locked) public onlyOwner {\n      require(_addr != owner());\n      lockedAddresses[_addr] = _locked;\n    }\n\n    function setLocked(bool _locked) public onlyOwner {\n      locked = _locked;\n    }\n\n    function canTransfer(address _addr) public view returns (bool) {\n      if (locked) {\n        if(!allowedAddresses[_addr] &&_addr != owner()) return false;\n      } else if (lockedAddresses[_addr]) return false;\n\n      return true;\n    }\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _granularity,\n        address[] memory _defaultOperators\n    )\n        internal ERC777BaseToken(_name, _symbol, _granularity, _defaultOperators)\n    {\n        mErc20compatible = true;\n        setInterfaceImplementation(\"ERC20Token\", address(this));\n    }\n\n    /// @notice This modifier is applied to erc20 obsolete methods that are\n    ///  implemented only to maintain backwards compatibility. When the erc20\n    ///  compatibility is disabled, this methods will fail.\n    modifier erc20 () {\n        require(mErc20compatible, \"ERC20 is disabled\");\n        _;\n    }\n\n    /// @notice For Backwards compatibility\n    /// @return The decimals of the token. Forced to 18 in ERC777.\n    function decimals() public erc20 view returns (uint8) { return uint8(18); }\n\n    /// @notice ERC20 backwards compatible transfer.\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint256 _amount) public erc20 returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible transferFrom.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender], \"Not enough funds allowed\");\n\n        // Cannot be after doSend because of tokensReceived re-entry\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible approve.\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint256 _amount) public erc20 returns (bool success) {\n        _approve(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        mAllowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public erc20 returns (bool) {\n        _approve(msg.sender, spender, mAllowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    \n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public erc20 returns (bool) {\n        _approve(msg.sender, spender, mAllowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible allowance.\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public erc20 view returns (uint256 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        require(canTransfer(_from), \"Not allowed to transfer right now!\");\n        super.doSend(_operator, _from, _to, _amount, _data, _operatorData, _preventLocking);\n        if (mErc20compatible) { emit Transfer(_from, _to, _amount); }\n    }\n\n    function doBurn(\n        address _operator,\n        address _tokenHolder,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData\n    )\n        internal\n    {\n        super.doBurn(_operator, _tokenHolder, _amount, _data, _operatorData);\n        if (mErc20compatible) { emit Transfer(_tokenHolder, address(0), _amount); }\n    }\n}\n\n\n\ncontract DATACHAIN is ERC777ERC20BaseToken {\n    string internal dName = \"DATACHAIN\";\n    string internal dSymbol = \"DC\";\n    uint256 internal dGranularity = 1;\n    uint256 internal dTotalSupply = 1000000000 * (10**18);\n\n    function dDefaultOperators() internal pure returns (address[] memory) {\n        address[] memory defaultOps = new address[](1);\n        \n        defaultOps[0] = 0xa6903375509A5F4f740aEC4Aa677b8C18D41027b;\n        \n        return defaultOps;\n    }\n\n    constructor() public \n        ERC777ERC20BaseToken(\n            dName, \n            dSymbol, \n            dGranularity, \n            dDefaultOperators()) \n    {\n        _mint(msg.sender, dTotalSupply);\n    }\n\n    function _mint(address to, uint256 value) internal returns (bool) {\n\n        require(to != address(0));\n\n        requireMultiple(value);\n\n        mTotalSupply = mTotalSupply.add(value);\n        mBalances[to] = mBalances[to].add(value);\n\n        callRecipient(msg.sender, address(0), to, value, \"\", \"\", true);\n\n\n        emit Minted(msg.sender, to, value, \"\", \"\");\n\n        emit Transfer(address(0), to, value);\n\n        return true;\n    }\n\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}",
  "bytecode": "60806040526000600d60006101000a81548160ff0219169083151502179055506040518060400160405280600981526020017f44415441434841494e0000000000000000000000000000000000000000000000815250600e90805190602001906200006c92919062000ea2565b506040518060400160405280600281526020017f4443000000000000000000000000000000000000000000000000000000000000815250600f9080519060200190620000ba92919062000ea2565b5060016010556b033b2e3c9fd0803ce8000000601155348015620000dd57600080fd5b50600e8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620001785780601f106200014c5761010080835404028352916020019162000178565b820191906000526020600020905b8154815290600101906020018083116200015a57829003601f168201915b5050505050600f8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620002175780601f10620001eb5761010080835404028352916020019162000217565b820191906000526020600020905b815481529060010190602001808311620001f957829003601f168201915b50505050506010546200022f6200054260201b60201c565b8383838383600090805190602001906200024b92919062000ea2565b5082600190805190602001906200026492919062000ea2565b5060006003819055506001821015620002e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4772616e756c6172697479206d757374206265203e203100000000000000000081525060200191505060405180910390fd5b8160028190555080600590805190602001906200030492919062000f29565b5060008090505b600580549050811015620003b757600160066000600584815481106200032d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506200030b565b50620003ff6040518060400160405280600b81526020017f455243373737546f6b656e00000000000000000000000000000000000000000081525030620005dd60201b60201c565b5050505033600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001600960146101000a81548160ff021916908315150217905550620005236040518060400160405280600a81526020017f4552433230546f6b656e0000000000000000000000000000000000000000000081525030620005dd60201b60201c565b505050506200053b336011546200074360201b60201c565b5062001026565b6060806001604051908082528060200260200182016040528015620005765781602001602082028038833980820191505090505b50905073a6903375509a5f4f740aec4aa677b8c18d41027b816000815181106200059c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508091505090565b6000826040516020018082805190602001908083835b60208310620006185780518252602082019150602081019050602083039250620005f3565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050731820a4b7618bde71dce8cdc73aab6c95905fad2473ffffffffffffffffffffffffffffffffffffffff166329965a1d3083856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1580156200072557600080fd5b505af11580156200073a573d6000803e3d6000fd5b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156200077f57600080fd5b62000790826200098260201b60201c565b620007ac82600354620009ec60201b620028a81790919060201c565b6003819055506200080b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620009ec60201b620028a81790919060201c565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200088533600085856040518060200160405280600081525060405180602001604052806000815250600162000a0c60201b60201c565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d84604051808281526020018060200180602001838103835260008152602001602001838103825260008152602001602001935050505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600060025482816200099057fe5b0614620009e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018062004b736027913960400191505060405180910390fd5b50565b60008082840190508381101562000a0257600080fd5b8091505092915050565b600062000a55866040518060400160405280601581526020017f455243373737546f6b656e73526563697069656e74000000000000000000000081525062000cf560201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000c7a578073ffffffffffffffffffffffffffffffffffffffff166223de298989898989896040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101562000b9e57808201518184015260208101905062000b81565b50505050905090810190601f16801562000bcc5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101562000c0757808201518184015260208101905062000bea565b50505050905090810190601f16801562000c355780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801562000c5b57600080fd5b505af115801562000c70573d6000803e3d6000fd5b5050505062000ceb565b811562000cea5762000c928662000e4e60201b60201c565b62000ce9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018062004b9a6035913960400191505060405180910390fd5b5b5b5050505050505050565b600080826040516020018082805190602001908083835b6020831062000d31578051825260208201915060208101905060208303925062000d0c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050731820a4b7618bde71dce8cdc73aab6c95905fad2473ffffffffffffffffffffffffffffffffffffffff1663aabbb8ca85836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801562000e0857600080fd5b505afa15801562000e1d573d6000803e3d6000fd5b505050506040513d602081101562000e3457600080fd5b810190808051906020019092919050505091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000e8f576000905062000e9d565b6000823b9050600081149150505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000ee557805160ff191683800117855562000f16565b8280016001018555821562000f16579182015b8281111562000f1557825182559160200191906001019062000ef8565b5b50905062000f25919062000fb8565b5090565b82805482825590600052602060002090810192821562000fa5579160200282015b8281111562000fa45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000f4a565b5b50905062000fb4919062000fe0565b5090565b62000fdd91905b8082111562000fd957600081600090555060010162000fbf565b5090565b90565b6200102391905b808211156200101f57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010162000fe7565b5090565b90565b613b3d80620010366000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638da5cb5b1161010f578063cf309012116100a2578063f2fde38b11610071578063f2fde38b14610c05578063fad8b32a14610c49578063fc673c4f14610c8d578063fe9d930314610d85576101f0565b8063cf30901214610a9f578063d95b637114610ac1578063dd62ed3e14610b3d578063f226003114610bb5576101f0565b80639bd9bbc6116100de5780639bd9bbc6146108d4578063a457c2d714610977578063a5bbd67a146109dd578063a9059cbb14610a39576101f0565b80638da5cb5b146107a15780638f32d59b146107eb578063959b8c3f1461080d57806395d89b4114610851576101f0565b806340c10f191161018757806362ad1b831161015657806362ad1b83146105cb57806370a08231146106e3578063715018a61461073b57806378fc3cb314610745576101f0565b806340c10f191461049b5780634120657a146105015780634edc689d1461055d578063556f0dc7146105ad576101f0565b8063211e28b6116101c3578063211e28b61461035b57806323b872dd1461038b578063313ce567146104115780633950935114610435576101f0565b806306e48538146101f557806306fdde0314610254578063095ea7b3146102d757806318160ddd1461033d575b600080fd5b6101fd610e08565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610240578082015181840152602081019050610225565b505050509050019250505060405180910390f35b61025c610e96565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029c578082015181840152602081019050610281565b50505050905090810190601f1680156102c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610323600480360360408110156102ed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f38565b604051808215151515815260200191505060405180910390f35b610345610fd1565b6040518082815260200191505060405180910390f35b6103896004803603602081101561037157600080fd5b81019080803515159060200190929190505050610fdb565b005b6103f7600480360360608110156103a157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611009565b604051808215151515815260200191505060405180910390f35b6104196112c7565b604051808260ff1660ff16815260200191505060405180910390f35b6104816004803603604081101561044b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611352565b604051808215151515815260200191505060405180910390f35b6104e7600480360360408110156104b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611479565b604051808215151515815260200191505060405180910390f35b6105436004803603602081101561051757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114a1565b604051808215151515815260200191505060405180910390f35b6105ab6004803603604081101561057357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506114c1565b005b6105b561156d565b6040518082815260200191505060405180910390f35b6106e1600480360360a08110156105e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561064857600080fd5b82018360208201111561065a57600080fd5b8035906020019184600183028401116401000000008311171561067c57600080fd5b90919293919293908035906020019064010000000081111561069d57600080fd5b8201836020820111156106af57600080fd5b803590602001918460018302840111640100000000831117156106d157600080fd5b9091929391929390505050611577565b005b610725600480360360208110156106f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611694565b6040518082815260200191505060405180910390f35b6107436116dd565b005b6107876004803603602081101561075b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117af565b604051808215151515815260200191505060405180910390f35b6107a96118cc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107f36118f6565b604051808215151515815260200191505060405180910390f35b61084f6004803603602081101561082357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061194e565b005b610859611bb2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561089957808201518184015260208101905061087e565b50505050905090810190601f1680156108c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610975600480360360608110156108ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561093157600080fd5b82018360208201111561094357600080fd5b8035906020019184600183028401116401000000008311171561096557600080fd5b9091929391929390505050611c54565b005b6109c36004803603604081101561098d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cbd565b604051808215151515815260200191505060405180910390f35b610a1f600480360360208110156109f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611de4565b604051808215151515815260200191505060405180910390f35b610a8560048036036040811015610a4f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e04565b604051808215151515815260200191505060405180910390f35b610aa7611ec0565b604051808215151515815260200191505060405180910390f35b610b2360048036036040811015610ad757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ed3565b604051808215151515815260200191505060405180910390f35b610b9f60048036036040811015610b5357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612084565b6040518082815260200191505060405180910390f35b610c0360048036036040811015610bcb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061218d565b005b610c4760048036036020811015610c1b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612239565b005b610c8b60048036036020811015610c5f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612256565b005b610d8360048036036080811015610ca357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610cea57600080fd5b820183602082011115610cfc57600080fd5b80359060200191846001830284011164010000000083111715610d1e57600080fd5b909192939192939080359060200190640100000000811115610d3f57600080fd5b820183602082011115610d5157600080fd5b80359060200191846001830284011164010000000083111715610d7357600080fd5b90919293919293905050506124ba565b005b610e0660048036036040811015610d9b57600080fd5b810190808035906020019092919080359060200190640100000000811115610dc257600080fd5b820183602082011115610dd457600080fd5b80359060200191846001830284011164010000000083111715610df657600080fd5b90919293919293905050506125d3565b005b60606005805480602002602001604051908101604052809291908181526020018280548015610e8c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e42575b5050505050905090565b606060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f2e5780601f10610f0357610100808354040283529160200191610f2e565b820191906000526020600020905b815481529060010190602001808311610f1157829003601f168201915b5050505050905090565b6000600960149054906101000a900460ff16610fbc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f45524332302069732064697361626c656400000000000000000000000000000081525060200191505060405180910390fd5b610fc7338484612638565b6001905092915050565b6000600354905090565b610fe36118f6565b610fec57600080fd5b80600d60006101000a81548160ff02191690831515021790555050565b6000600960149054906101000a900460ff1661108d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f45524332302069732064697361626c656400000000000000000000000000000081525060200191505060405180910390fd5b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561117f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4e6f7420656e6f7567682066756e647320616c6c6f776564000000000000000081525060200191505060405180910390fd5b61120e82600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461279790919063ffffffff16565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112bc33858585604051806020016040528060008152506040518060200160405280600081525060006127b7565b600190509392505050565b6000600960149054906101000a900460ff1661134b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f45524332302069732064697361626c656400000000000000000000000000000081525060200191505060405180910390fd5b6012905090565b6000600960149054906101000a900460ff166113d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f45524332302069732064697361626c656400000000000000000000000000000081525060200191505060405180910390fd5b61146f338461146a85600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128a890919063ffffffff16565b612638565b6001905092915050565b60006114836118f6565b61148c57600080fd5b61149683836128c7565b506001905092915050565b600b6020528060005260406000206000915054906101000a900460ff1681565b6114c96118f6565b6114d257600080fd5b6114da6118cc565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561151257600080fd5b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600254905090565b6115813388611ed3565b6115f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f7420616e206f70657261746f72000000000000000000000000000000000081525060200191505060405180910390fd5b61168b3388888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060016127b7565b50505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6116e56118f6565b6116ee57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600d60009054906101000a900460ff161561186657600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561185357506118236118cc565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561186157600090506118c7565b6118c2565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156118c157600090506118c7565b5b600190505b919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119d3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613a476028913960400191505060405180910390fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611abf576000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b55565b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f960405160405180910390a350565b606060018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c4a5780601f10611c1f57610100808354040283529160200191611c4a565b820191906000526020600020905b815481529060010190602001808311611c2d57829003601f168201915b5050505050905090565b611cb73333868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060200160405280600081525060016127b7565b50505050565b6000600960149054906101000a900460ff16611d41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f45524332302069732064697361626c656400000000000000000000000000000081525060200191505060405180910390fd5b611dda3384611dd585600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461279790919063ffffffff16565b612638565b6001905092915050565b600c6020528060005260406000206000915054906101000a900460ff1681565b6000600960149054906101000a900460ff16611e88576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f45524332302069732064697361626c656400000000000000000000000000000081525060200191505060405180910390fd5b611eb633338585604051806020016040528060008152506040518060200160405280600081525060006127b7565b6001905092915050565b600d60009054906101000a900460ff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611f955750600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b8061207c5750600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16801561207b5750600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b5b905092915050565b6000600960149054906101000a900460ff16612108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f45524332302069732064697361626c656400000000000000000000000000000081525060200191505060405180910390fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6121956118f6565b61219e57600080fd5b6121a66118cc565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121de57600080fd5b80600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6122416118f6565b61224a57600080fd5b61225381612ae7565b50565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122db576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613a6f6025913960400191505060405180910390fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156123c7576001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061245d565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a350565b6124c43387611ed3565b612536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f7420616e206f70657261746f72000000000000000000000000000000000081525060200191505060405180910390fd5b6125cb33878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612be1565b505050505050565b61263333338585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060405180602001604052806000815250612be1565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561267257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126ac57600080fd5b80600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b6000828211156127a657600080fd5b600082840390508091505092915050565b6127c0866117af565b612815576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613af06022913960400191505060405180910390fd5b61282487878787878787612c71565b600960149054906101000a900460ff161561289f578473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a35b50505050505050565b6000808284019050838110156128bd57600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561290257600080fd5b61290b82613078565b612920826003546128a890919063ffffffff16565b60038190555061297882600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128a890919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129ea3360008585604051806020016040528060008152506040518060200160405280600081525060016130df565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d84604051808281526020018060200180602001838103835260008152602001602001838103825260008152602001602001935050505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b2157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612bee85858585856133ab565b600960149054906101000a900460ff1615612c6a57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5050505050565b612c7a84613078565b612c88878787878787613637565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612d2b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f43616e6e6f742073656e6420746f20307830000000000000000000000000000081525060200191505060405180910390fd5b83600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612de0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b612e3284600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461279790919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ec784600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128a890919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f19878787878787876130df565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987878787604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015612fcc578082015181840152602081019050612fb1565b50505050905090810190601f168015612ff95780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015613032578082015181840152602081019050613017565b50505050905090810190601f16801561305f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a450505050505050565b6000600254828161308557fe5b06146130dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613a946027913960400191505060405180910390fd5b50565b6000613120866040518060400160405280601581526020017f455243373737546f6b656e73526563697069656e7400000000000000000000008152506138a0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461333b578073ffffffffffffffffffffffffffffffffffffffff166223de298989898989896040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561326657808201518184015260208101905061324b565b50505050905090810190601f1680156132935780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156132cc5780820151818401526020810190506132b1565b50505050905090810190601f1680156132f95780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561331e57600080fd5b505af1158015613332573d6000803e3d6000fd5b505050506133a1565b81156133a05761334a866139f4565b61339f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526035815260200180613abb6035913960400191505060405180910390fd5b5b5b5050505050505050565b6133ba85856000868686613637565b6133c383613078565b826133cd85611694565b1015613441576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b61349383600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461279790919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506134eb8360035461279790919063ffffffff16565b6003819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098858585604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561358d578082015181840152602081019050613572565b50505050905090810190601f1680156135ba5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156135f35780820151818401526020810190506135d8565b50505050905090810190601f1680156136205780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a35050505050565b6000613678866040518060400160405280601281526020017f455243373737546f6b656e7353656e64657200000000000000000000000000008152506138a0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156136b55750613898565b8073ffffffffffffffffffffffffffffffffffffffff166375ab97828888888888886040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156137c65780820151818401526020810190506137ab565b50505050905090810190601f1680156137f35780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561382c578082015181840152602081019050613811565b50505050905090810190601f1680156138595780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561387e57600080fd5b505af1158015613892573d6000803e3d6000fd5b50505050505b505050505050565b600080826040516020018082805190602001908083835b602083106138da57805182526020820191506020810190506020830392506138b7565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050731820a4b7618bde71dce8cdc73aab6c95905fad2473ffffffffffffffffffffffffffffffffffffffff1663aabbb8ca85836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156139b057600080fd5b505afa1580156139c4573d6000803e3d6000fd5b505050506040513d60208110156139da57600080fd5b810190808051906020019092919050505091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613a335760009050613a41565b6000823b9050600081149150505b91905056fe43616e6e6f7420617574686f72697a6520796f757273656c6620617320616e206f70657261746f7243616e6e6f74207265766f6b6520796f757273656c6620617320616e206f70657261746f72416d6f756e74206973206e6f742061206d756c7469706c65206f66206772616e75616c7269747943616e6e6f742073656e6420746f20636f6e747261637420776974686f757420455243373737546f6b656e73526563697069656e744e6f7420616c6c6f77656420746f207472616e73666572207269676874206e6f7721a165627a7a723058204e705ce9f2e5bd9ae76d379e9f35638fb6f196440f0281730d89a36632e083370029416d6f756e74206973206e6f742061206d756c7469706c65206f66206772616e75616c7269747943616e6e6f742073656e6420746f20636f6e747261637420776974686f757420455243373737546f6b656e73526563697069656e74",
  "constructorArguments": "416d6f756e74206973206e6f742061206d756c7469706c65206f66206772616e75616c7269747943616e6e6f742073656e6420746f20636f6e747261637420776974686f757420455243373737546f6b656e73526563697069656e74"
}