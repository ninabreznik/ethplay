{
  "address": "0x793ebbe21607e4f04788f89c7a9b97320773ec59",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Maker: Oasis Proxy",
  "contractName": "ProxyCreationAndExecute",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-16\n*/\n\npragma solidity ^0.4.16;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract OtcInterface {\n    function sellAllAmount(address, uint, address, uint) public returns (uint);\n    function buyAllAmount(address, uint, address, uint) public returns (uint);\n    function getPayAmount(address, address, uint) public constant returns (uint);\n}\n\ncontract TokenInterface {\n    function balanceOf(address) public returns (uint);\n    function allowance(address, address) public returns (uint);\n    function approve(address, uint) public;\n    function transfer(address,uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract OasisDirectProxy is DSMath {\n    function withdrawAndSend(TokenInterface wethToken, uint wethAmt) internal {\n        wethToken.withdraw(wethAmt);\n        require(msg.sender.call.value(wethAmt)());\n    }\n\n    function sellAllAmount(OtcInterface otc, TokenInterface payToken, uint payAmt, TokenInterface buyToken, uint minBuyAmt) public returns (uint buyAmt) {\n        require(payToken.transferFrom(msg.sender, this, payAmt));\n        if (payToken.allowance(this, otc) < payAmt) {\n            payToken.approve(otc, uint(-1));\n        }\n        buyAmt = otc.sellAllAmount(payToken, payAmt, buyToken, minBuyAmt);\n        require(buyToken.transfer(msg.sender, buyAmt));\n    }\n\n    function sellAllAmountPayEth(OtcInterface otc, TokenInterface wethToken, TokenInterface buyToken, uint minBuyAmt) public payable returns (uint buyAmt) {\n        wethToken.deposit.value(msg.value)();\n        if (wethToken.allowance(this, otc) < msg.value) {\n            wethToken.approve(otc, uint(-1));\n        }\n        buyAmt = otc.sellAllAmount(wethToken, msg.value, buyToken, minBuyAmt);\n        require(buyToken.transfer(msg.sender, buyAmt));\n    }\n\n    function sellAllAmountBuyEth(OtcInterface otc, TokenInterface payToken, uint payAmt, TokenInterface wethToken, uint minBuyAmt) public returns (uint wethAmt) {\n        require(payToken.transferFrom(msg.sender, this, payAmt));\n        if (payToken.allowance(this, otc) < payAmt) {\n            payToken.approve(otc, uint(-1));\n        }\n        wethAmt = otc.sellAllAmount(payToken, payAmt, wethToken, minBuyAmt);\n        withdrawAndSend(wethToken, wethAmt);\n    }\n\n    function buyAllAmount(OtcInterface otc, TokenInterface buyToken, uint buyAmt, TokenInterface payToken, uint maxPayAmt) public returns (uint payAmt) {\n        uint payAmtNow = otc.getPayAmount(payToken, buyToken, buyAmt);\n        require(payAmtNow <= maxPayAmt);\n        require(payToken.transferFrom(msg.sender, this, payAmtNow));\n        if (payToken.allowance(this, otc) < payAmtNow) {\n            payToken.approve(otc, uint(-1));\n        }\n        payAmt = otc.buyAllAmount(buyToken, buyAmt, payToken, payAmtNow);\n        require(buyToken.transfer(msg.sender, min(buyAmt, buyToken.balanceOf(this)))); // To avoid rounding issues we check the minimum value\n    }\n\n    function buyAllAmountPayEth(OtcInterface otc, TokenInterface buyToken, uint buyAmt, TokenInterface wethToken) public payable returns (uint wethAmt) {\n        // In this case user needs to send more ETH than a estimated value, then contract will send back the rest\n        wethToken.deposit.value(msg.value)();\n        if (wethToken.allowance(this, otc) < msg.value) {\n            wethToken.approve(otc, uint(-1));\n        }\n        wethAmt = otc.buyAllAmount(buyToken, buyAmt, wethToken, msg.value);\n        require(buyToken.transfer(msg.sender, min(buyAmt, buyToken.balanceOf(this)))); // To avoid rounding issues we check the minimum value\n        withdrawAndSend(wethToken, sub(msg.value, wethAmt));\n    }\n\n    function buyAllAmountBuyEth(OtcInterface otc, TokenInterface wethToken, uint wethAmt, TokenInterface payToken, uint maxPayAmt) public returns (uint payAmt) {\n        uint payAmtNow = otc.getPayAmount(payToken, wethToken, wethAmt);\n        require(payAmtNow <= maxPayAmt);\n        require(payToken.transferFrom(msg.sender, this, payAmtNow));\n        if (payToken.allowance(this, otc) < payAmtNow) {\n            payToken.approve(otc, uint(-1));\n        }\n        payAmt = otc.buyAllAmount(wethToken, wethAmt, payToken, payAmtNow);\n        withdrawAndSend(wethToken, wethAmt);\n    }\n\n    function() public payable {}\n}\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() public {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n// DSProxy\n// Allows code execution using a persistant identity This can be very\n// useful to execute a sequence of atomic actions. Since the owner of\n// the proxy can be changed, this allows for dynamic ownership models\n// i.e. a multisig\ncontract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache;  // global cache for contracts\n\n    function DSProxy(address _cacheAddr) public {\n        require(setCache(_cacheAddr));\n    }\n\n    function() public payable {\n    }\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes _code, bytes _data)\n        public\n        payable\n        returns (address target, bytes32 response)\n    {\n        target = cache.read(_code);\n        if (target == 0x0) {\n            // deploy contract & store its address in cache\n            target = cache.write(_code);\n        }\n\n        response = execute(target, _data);\n    }\n\n    function execute(address _target, bytes _data)\n        public\n        auth\n        note\n        payable\n        returns (bytes32 response)\n    {\n        require(_target != 0x0);\n\n        // call contract in current context\n        assembly {\n            let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 32)\n            response := mload(0)      // load delegatecall output\n            switch iszero(succeeded)\n            case 1 {\n                // throw if delegatecall failed\n                revert(0, 0)\n            }\n        }\n    }\n\n    //set new cache\n    function setCache(address _cacheAddr)\n        public\n        auth\n        note\n        returns (bool)\n    {\n        require(_cacheAddr != 0x0);        // invalid cache address\n        cache = DSProxyCache(_cacheAddr);  // overwrite cache\n        return true;\n    }\n}\n\n// DSProxyFactory\n// This factory deploys new proxy instances through build()\n// Deployed proxy addresses are logged\ncontract DSProxyFactory {\n    event Created(address indexed sender, address proxy, address cache);\n    mapping(address=>bool) public isProxy;\n    DSProxyCache public cache = new DSProxyCache();\n\n    // deploys a new proxy instance\n    // sets owner of proxy to caller\n    function build() public returns (DSProxy proxy) {\n        proxy = build(msg.sender);\n    }\n\n    // deploys a new proxy instance\n    // sets custom owner of proxy\n    function build(address owner) public returns (DSProxy proxy) {\n        proxy = new DSProxy(cache);\n        Created(owner, address(proxy), address(cache));\n        proxy.setOwner(owner);\n        isProxy[proxy] = true;\n    }\n}\n\n// DSProxyCache\n// This global cache stores addresses of contracts previously deployed\n// by a proxy. This saves gas from repeat deployment of the same\n// contracts and eliminates blockchain bloat.\n\n// By default, all proxies deployed from the same factory store\n// contracts in the same cache. The cache a proxy instance uses can be\n// changed.  The cache uses the sha3 hash of a contract's bytecode to\n// lookup the address\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n            case 1 {\n                // throw if contract failed to deploy\n                revert(0, 0)\n            }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\ncontract ProxyCreationAndExecute is OasisDirectProxy {\n    TokenInterface wethToken;\n\n    function ProxyCreationAndExecute(address wethToken_) {\n        wethToken = TokenInterface(wethToken_);\n    }\n\n    function createAndSellAllAmount(DSProxyFactory factory, OtcInterface otc, TokenInterface payToken, uint payAmt, TokenInterface buyToken, uint minBuyAmt) public returns (DSProxy proxy, uint buyAmt) {\n        proxy = factory.build(msg.sender);\n        buyAmt = sellAllAmount(otc, payToken, payAmt, buyToken, minBuyAmt);\n    }\n\n    function createAndSellAllAmountPayEth(DSProxyFactory factory, OtcInterface otc, TokenInterface buyToken, uint minBuyAmt) public payable returns (DSProxy proxy, uint buyAmt) {\n        proxy = factory.build(msg.sender);\n        buyAmt = sellAllAmountPayEth(otc, wethToken, buyToken, minBuyAmt);\n    }\n\n    function createAndSellAllAmountBuyEth(DSProxyFactory factory, OtcInterface otc, TokenInterface payToken, uint payAmt, uint minBuyAmt) public returns (DSProxy proxy, uint wethAmt) {\n        proxy = factory.build(msg.sender);\n        wethAmt = sellAllAmountBuyEth(otc, payToken, payAmt, wethToken, minBuyAmt);\n    }\n\n    function createAndBuyAllAmount(DSProxyFactory factory, OtcInterface otc, TokenInterface buyToken, uint buyAmt, TokenInterface payToken, uint maxPayAmt) public returns (DSProxy proxy, uint payAmt) {\n        proxy = factory.build(msg.sender);\n        payAmt = buyAllAmount(otc, buyToken, buyAmt, payToken, maxPayAmt);\n    }\n\n    function createAndBuyAllAmountPayEth(DSProxyFactory factory, OtcInterface otc, TokenInterface buyToken, uint buyAmt) public payable returns (DSProxy proxy, uint wethAmt) {\n        proxy = factory.build(msg.sender);\n        wethAmt = buyAllAmountPayEth(otc, buyToken, buyAmt, wethToken);\n    }\n\n    function createAndBuyAllAmountBuyEth(DSProxyFactory factory, OtcInterface otc, uint wethAmt, TokenInterface payToken, uint maxPayAmt) public returns (DSProxy proxy, uint payAmt) {\n        proxy = factory.build(msg.sender);\n        payAmt = buyAllAmountBuyEth(otc, wethToken, wethAmt, payToken, maxPayAmt);\n    }\n\n    function() public payable {\n        require(msg.sender == address(wethToken));\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516020806116148339810160405280805160008054600160a060020a03909216600160a060020a031990921691909117905550506115c0806100546000396000f3006060604052600436106100a05763ffffffff60e060020a60003504166303e1b3c681146100bd5780631ebf0d11146101015780633c0ab650146101335780633fa9baf1146101655780636c1210e8146101b95780636fc4a4a2146101ea578063793e39cd1461020d57806392eeee63146102305780639a22dec514610268578063b126d0e51461028c578063e50278a6146102c4578063f9a87d4f146102e7575b60005433600160a060020a039081169116146100bb57600080fd5b005b34156100c857600080fd5b6100ef600160a060020a036004358116906024358116906044359060643516608435610319565b60405190815260200160405180910390f35b341561010c57600080fd5b6100ef600160a060020a03600435811690602435811690604435906064351660843561050d565b341561013e57600080fd5b6100ef600160a060020a036004358116906024358116906044359060643516608435610763565b341561017057600080fd5b610197600160a060020a036004358116906024358116906044359060643516608435610aae565b604051600160a060020a03909216825260208201526040908101905180910390f35b34156101c457600080fd5b610197600160a060020a0360043581169060243581169060443516606435608435610b3e565b610197600160a060020a0360043581169060243581169060443516606435610bc4565b610197600160a060020a0360043581169060243581169060443516606435610c54565b341561023b57600080fd5b610197600160a060020a03600435811690602435811690604435811690606435906084351660a435610cd7565b6100ef600160a060020a036004358116906024358116906044359060643516610d5b565b341561029757600080fd5b610197600160a060020a03600435811690602435811690604435811690606435906084351660a435610fdf565b6100ef600160a060020a0360043581169060243581169060443516606435611056565b34156102f257600080fd5b6100ef600160a060020a036004358116906024358116906044359060643516608435611277565b600084600160a060020a03166323b872dd33308760405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561037c57600080fd5b5af1151561038957600080fd5b50505060405180519050151561039e57600080fd5b8385600160a060020a031663dd62ed3e308960405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156103f557600080fd5b5af1151561040257600080fd5b5050506040518051905010156104795784600160a060020a031663095ea7b38760001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561046857600080fd5b5af1151561047557600080fd5b5050505b85600160a060020a0316630621b4f68686868660405160e060020a63ffffffff8716028152600160a060020a0394851660048201526024810193909352921660448201526064810191909152608401602060405180830381600087803b15156104e157600080fd5b5af115156104ee57600080fd5b50505060405180519050905061050483826114e5565b95945050505050565b600084600160a060020a03166323b872dd33308760405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561057057600080fd5b5af1151561057d57600080fd5b50505060405180519050151561059257600080fd5b8385600160a060020a031663dd62ed3e308960405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156105e957600080fd5b5af115156105f657600080fd5b50505060405180519050101561066d5784600160a060020a031663095ea7b38760001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561065c57600080fd5b5af1151561066957600080fd5b5050505b85600160a060020a0316630621b4f68686868660405160e060020a63ffffffff8716028152600160a060020a0394851660048201526024810193909352921660448201526064810191909152608401602060405180830381600087803b15156106d557600080fd5b5af115156106e257600080fd5b5050506040518051915050600160a060020a03831663a9059cbb338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561074157600080fd5b5af1151561074e57600080fd5b50505060405180519050151561050457600080fd5b60008086600160a060020a031663ff1fd97485888860405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156107c757600080fd5b5af115156107d457600080fd5b5050506040518051915050828111156107ec57600080fd5b83600160a060020a03166323b872dd33308460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561084d57600080fd5b5af1151561085a57600080fd5b50505060405180519050151561086f57600080fd5b8084600160a060020a031663dd62ed3e308a60405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156108c657600080fd5b5af115156108d357600080fd5b50505060405180519050101561094a5783600160a060020a031663095ea7b38860001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561093957600080fd5b5af1151561094657600080fd5b5050505b86600160a060020a0316638185402b8787878560405160e060020a63ffffffff8716028152600160a060020a0394851660048201526024810193909352921660448201526064810191909152608401602060405180830381600087803b15156109b257600080fd5b5af115156109bf57600080fd5b5050506040518051925050600160a060020a03861663a9059cbb33610a3f88846370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610a2357600080fd5b5af11515610a3057600080fd5b50505060405180519050611569565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a8257600080fd5b5af11515610a8f57600080fd5b505050604051805190501515610aa457600080fd5b5095945050505050565b60008086600160a060020a031663f3701da23360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610aff57600080fd5b5af11515610b0c57600080fd5b5050506040518051600054909350610b3291508790600160a060020a0316878787611277565b90509550959350505050565b60008086600160a060020a031663f3701da23360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b8f57600080fd5b5af11515610b9c57600080fd5b5050506040518051600054909350610b329150879087908790600160a060020a031687610319565b60008085600160a060020a031663f3701da23360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c1557600080fd5b5af11515610c2257600080fd5b5050506040518051600054909350610c499150869086908690600160a060020a0316610d5b565b905094509492505050565b60008085600160a060020a031663f3701da23360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610ca557600080fd5b5af11515610cb257600080fd5b5050506040518051600054909350610c4991508690600160a060020a03168686611056565b60008087600160a060020a031663f3701da23360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d2857600080fd5b5af11515610d3557600080fd5b505050604051805190509150610d4e8787878787610763565b9050965096945050505050565b600081600160a060020a031663d0e30db0346040518263ffffffff1660e060020a0281526004016000604051808303818588803b1515610d9a57600080fd5b5af11515610da757600080fd5b505050503482600160a060020a031663dd62ed3e308860405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610e0257600080fd5b5af11515610e0f57600080fd5b505050604051805190501015610e865781600160a060020a031663095ea7b38660001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610e7557600080fd5b5af11515610e8257600080fd5b5050505b84600160a060020a0316638185402b8585853460405160e060020a63ffffffff8716028152600160a060020a0394851660048201526024810193909352921660448201526064810191909152608401602060405180830381600087803b1515610eee57600080fd5b5af11515610efb57600080fd5b5050506040518051915050600160a060020a03841663a9059cbb33610f5f86846370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610a2357600080fd5b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610fa257600080fd5b5af11515610faf57600080fd5b505050604051805190501515610fc457600080fd5b610fd782610fd23484611584565b6114e5565b949350505050565b60008087600160a060020a031663f3701da23360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561103057600080fd5b5af1151561103d57600080fd5b505050604051805190509150610d4e878787878761050d565b600083600160a060020a031663d0e30db0346040518263ffffffff1660e060020a0281526004016000604051808303818588803b151561109557600080fd5b5af115156110a257600080fd5b505050503484600160a060020a031663dd62ed3e308860405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156110fd57600080fd5b5af1151561110a57600080fd5b5050506040518051905010156111815783600160a060020a031663095ea7b38660001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561117057600080fd5b5af1151561117d57600080fd5b5050505b84600160a060020a0316630621b4f68534868660405160e060020a63ffffffff8716028152600160a060020a0394851660048201526024810193909352921660448201526064810191909152608401602060405180830381600087803b15156111e957600080fd5b5af115156111f657600080fd5b5050506040518051915050600160a060020a03831663a9059cbb338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561125557600080fd5b5af1151561126257600080fd5b505050604051805190501515610fd757600080fd5b60008086600160a060020a031663ff1fd97485888860405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156112db57600080fd5b5af115156112e857600080fd5b50505060405180519150508281111561130057600080fd5b83600160a060020a03166323b872dd33308460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561136157600080fd5b5af1151561136e57600080fd5b50505060405180519050151561138357600080fd5b8084600160a060020a031663dd62ed3e308a60405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156113da57600080fd5b5af115156113e757600080fd5b50505060405180519050101561145e5783600160a060020a031663095ea7b38860001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561144d57600080fd5b5af1151561145a57600080fd5b5050505b86600160a060020a0316638185402b8787878560405160e060020a63ffffffff8716028152600160a060020a0394851660048201526024810193909352921660448201526064810191909152608401602060405180830381600087803b15156114c657600080fd5b5af115156114d357600080fd5b505050604051805190509150610aa486865b81600160a060020a0316632e1a7d4d8260405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561152b57600080fd5b5af1151561153857600080fd5b50505033600160a060020a03168160405160006040518083038185875af192505050151561156557600080fd5b5050565b600081831115611579578161157b565b825b90505b92915050565b8082038281111561157e57600080fd00a165627a7a723058205e0896a71f48b6c42df9d3843ca60c3e5fad0463472b43c0236bfc26b30336990029000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
  "constructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
}