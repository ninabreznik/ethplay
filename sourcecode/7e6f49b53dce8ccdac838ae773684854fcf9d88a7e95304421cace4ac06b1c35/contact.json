{
  "address": "0xca57c5f1635294c4b85c09ab8a5ddeb984f41c66",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WinyDice",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-13\n*/\n\npragma solidity >= 0.5.0;\n\ncontract WinyDice {\n    address payable private OWNER;\n\n    // Each bet is deducted 0.98% in favour of the house, but no less than some minimum.\n    // The lower bound is dictated by gas costs of the settleBet transaction, providing\n    // headroom for up to 20 Gwei prices.\n    uint public constant HOUSE_EDGE_OF_TEN_THOUSAND = 98;\n    uint public constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether;\n\n    // Modulo is a number of equiprobable outcomes in a game:\n    //  - 2 for coin flip\n    //  - 6 for dice\n    //  - 6 * 6 = 36 for double dice\n    //  - 6 * 6 * 6 = 216 for triple dice\n    //  - 37 for rouletter\n    //  - 4, 13, 26, 52 for poker\n    //  - 100 for etheroll\n    //  etc.\n    // It's called so because 256-bit entropy is treated like a huge integer and\n    // the remainder of its division by modulo is considered bet outcome.\n    uint constant MAX_MODULO = 216;\n\n    // For modulos below this threshold rolls are checked against a bit mask,\n    // thus allowing betting on any combination of outcomes. For example, given\n    // modulo 6 for dice, 101000 mask (base-2, big endian) means betting on\n    // 4 and 6; for games with modulos higher than threshold (Etheroll), a simple\n    // limit is used, allowing betting on any outcome in [0, N) range.\n    //\n    // The specific value is dictated by the fact that 256-bit intermediate\n    // multiplication result allows implementing population count efficiently\n    // for numbers that are up to 42 bits.\n    uint constant MAX_MASK_MODULO = 216;\n\n    // This is a check on bet mask overflow.\n    uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO;\n\n    // Adjustable max bet profit. Used to cap bets against dynamic odds.\n    uint public MAX_PROFIT;\n    uint public MAX_PROFIT_PERCENT = 10;\n    bool public KILLED;\n\n    // Funds that are locked in potentially winning bets. Prevents contract from\n    // committing to bets it cannot pay out.\n    uint128 public LOCKED_IN_BETS;\n\n    uint256 public JACKPOT_BALANCE = 0;\n\n    bool public PAYOUT_PAUSED; \n    bool public GAME_PAUSED;\n\n    //Minimum amount that can have a chance to win jackpot\n    uint256 public constant MIN_JACKPOT_BET = 0.1 ether;\n    uint256 public JACKPOT_CHANCE = 1000;   //0.1%\n    uint256 public constant JACKPOT_FEE = 0.001 ether;\n\n    uint constant MIN_BET = 0.01 ether;\n    uint constant MAX_BET = 300000 ether;\n\n     // This are some constants making O(1) population count in placeBet possible.\n    // See whitepaper for intuition and proofs behind it.\n    uint constant POPCNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\n    uint constant POPCNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\n    uint constant POPCNT_MODULO = 0x3F;\n    uint constant MASK40 = 0xFFFFFFFFFF;\n    uint constant MASK_MODULO_40 = 40;\n\n    // A structure representing a single bet.\n    struct Bet {\n        // Wager amount in wei.\n        uint80 Amount;//10\n        // Modulo of a game.\n        uint8 Modulo;//1\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollUnder),\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\n        uint8 RollUnder;//1\n        // Address of a player, used to pay out winning bets.\n        address payable Player;//20\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\n        uint216 Mask;//27\n        uint40 PlaceBlockNumber;\n    }\n\n    // Mapping from commits to all currently active & processed bets.\n    mapping(uint => Bet) bets;\n    // Croupier account.\n    address private CROUPIER;\n\n    // Events that are issued to make statistic recovery easier.\n    event FailedPayment(address indexed playerAddress,uint indexed betId, uint amount,uint dice);\n    event Payment(address indexed playerAddress,uint indexed betId, uint amount,uint dice);\n    event JackpotPayment(address indexed playerAddress,uint indexed betId, uint amount);    \n    // This event is emitted in placeBet to record commit in the logs.\n    event BetPlaced(uint indexed betId, uint source);\n    event LogTransferEther(address indexed SentToAddress, uint256 AmountTransferred);\n\n    constructor (address payable _owner,address _croupier) public payable {\n        OWNER = _owner;                \n        CROUPIER = _croupier;\n        KILLED = false;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == OWNER,\"only owner can call this function.\");\n        _;\n    }\n\n    // Standard modifier on methods invokable only by Croupier.\n    modifier onlyCroupier {\n        require(msg.sender == CROUPIER, \"OnlyCroupier methods called by non-croupier.\");\n        _;\n    }\n\n    modifier payoutsAreActive {\n        if(PAYOUT_PAUSED == true) revert(\"payouts are currently paused.\");\n        _;\n    } \n\n    modifier gameIsActive {\n        if(GAME_PAUSED == true) revert(\"game is not active right now.\");\n        _;\n    } \n\n\n    function GetChoiceCountForLargeModulo(uint inputMask, uint n) private pure returns (uint choiceCount) {\n        choiceCount += (((inputMask & MASK40) * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n        for (uint i = 1; i < n; i++) {\n            inputMask = inputMask >> MASK_MODULO_40;\n            choiceCount += (((inputMask & MASK40) * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n        }\n        return choiceCount;\n    }\n\n    function GetChoiceCount(uint inputMask ,uint modulo) private pure returns (uint choiceCount,uint mask) {\n\n        if (modulo <= MASK_MODULO_40) {\n            // Small modulo games specify bet outcomes via bit mask.\n            // rollUnder is a number of 1 bits in this mask (population count).\n            // This magic looking formula is an efficient way to compute population\n            // count on EVM for numbers below 2**40.\n            choiceCount = ((inputMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n            mask = inputMask;\n        } else if (modulo <= MASK_MODULO_40 * 2) {\n            choiceCount = GetChoiceCountForLargeModulo(inputMask, 2);\n            mask = inputMask;\n        } else if (modulo == 100) {\n            require(inputMask > 0 && inputMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            choiceCount = inputMask;\n        } else if (modulo <= MASK_MODULO_40 * 3) {\n            choiceCount = GetChoiceCountForLargeModulo(inputMask, 3);\n            mask = inputMask;\n        } else if (modulo <= MASK_MODULO_40 * 4) {\n            choiceCount = GetChoiceCountForLargeModulo(inputMask, 4);\n            mask = inputMask;\n        } else if (modulo <= MASK_MODULO_40 * 5) {\n            choiceCount = GetChoiceCountForLargeModulo(inputMask, 5);\n            mask = inputMask;\n        } else if (modulo <= MAX_MASK_MODULO) {\n            choiceCount = GetChoiceCountForLargeModulo(inputMask, 6);\n            mask = inputMask;\n        } else {\n            // Larger modulos specify the right edge of half-open interval of\n            // winning bet outcomes.\n            require(inputMask > 0 && inputMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            choiceCount = inputMask;\n        }        \n    }\n\n    // Get the expected win amount after house edge is subtracted.\n    function GetDiceWinAmount(uint amount, uint modulo, uint choiceCount) private pure returns (uint winAmount, uint jackpotFee) {\n        require(0 < choiceCount && choiceCount <= modulo, \"Win probability out of range.\");\n\n        jackpotFee = amount >= MIN_JACKPOT_BET ? JACKPOT_FEE : 0;\n\n        uint houseEdge = amount * HOUSE_EDGE_OF_TEN_THOUSAND / 10000;\n\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\n            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\n        }\n\n        require(houseEdge + jackpotFee <= amount, \"Bet doesn't even cover house edge.\");\n\n        winAmount = (amount - houseEdge - jackpotFee) * modulo / choiceCount;\n    }    \n\n    /// *** Betting logic\n\n    // Bet states:\n    //  amount == 0 && player == 0 - 'clean' (can place a bet)\n    //  amount != 0 && player != 0 - 'active' (can be settled or refunded)\n    //  amount == 0 && player != 0 - 'processed' (can clean storage)\n    \n    function PlaceBet(uint mask, uint modulo, uint betId , uint source) public payable gameIsActive {        \n        if(KILLED == true) revert (\"Contract Killed\");\n        // Check that the bet is in 'clean' state.\n        MAX_PROFIT = (address(this).balance + msg.value - LOCKED_IN_BETS - JACKPOT_BALANCE) * MAX_PROFIT_PERCENT / 100;\n        Bet storage bet = bets[betId];\n        if(bet.Player != address(0)) revert(\"Bet should be in a 'clean' state.\");\n\n        // Validate input data ranges.\n        if(modulo < 2 && modulo > MAX_MODULO) revert(\"Modulo should be within range.\");\n        if(msg.value < MIN_BET && msg.value > MAX_BET) revert(\"Amount should be within range.\");\n        if(mask < 0 && mask > MAX_BET_MASK) revert(\"Mask should be within range.\");\n\n        uint choiceCount;\n        uint finalMask;\n        (choiceCount,finalMask) = GetChoiceCount(mask,modulo);        \n\n        // Winning amount and jackpot increase.\n        uint possibleWinAmount;\n        uint jackpotFee;\n\n        (possibleWinAmount, jackpotFee) = GetDiceWinAmount(msg.value, modulo, choiceCount);\n\n        // Enforce max profit limit.\n        if(possibleWinAmount > MAX_PROFIT) revert(\"maxProfit limit violation.\");\n\n        // Lock funds.\n        LOCKED_IN_BETS += uint128(possibleWinAmount);\n        JACKPOT_BALANCE += uint128(jackpotFee);\n\n        // Check whether contract has enough funds to process this bet.\n        if((JACKPOT_BALANCE + LOCKED_IN_BETS) > address(this).balance) revert( \"Cannot afford to lose this bet.\");        \n\n        // Record commit in logs.\n        emit BetPlaced(betId, source);\n\n        // Store bet parameters on blockchain.\n        bet.Amount = uint80(msg.value);\n        bet.Modulo = uint8(modulo);\n        bet.RollUnder = uint8(choiceCount);\n        bet.Mask = uint216(mask);\n        bet.Player = msg.sender;\n        bet.PlaceBlockNumber = uint40(block.number);\n    }\n\n    // Helper routine to process the payment.\n    function SendFunds(address payable beneficiary, uint amount, uint successLogAmount, uint betId,uint dice) private {\n        if (beneficiary.send(amount)) {\n            emit Payment(beneficiary,betId, successLogAmount,dice);\n            MAX_PROFIT = (address(this).balance - amount - JACKPOT_BALANCE - LOCKED_IN_BETS) * MAX_PROFIT_PERCENT / 100;\n        } else {\n            emit FailedPayment(beneficiary,betId,amount,dice);\n        }\n        \n    }\n\n    // Refund transaction - return the bet amount of a roll that was not processed in a\n    // due timeframe. \n    // in a situation like this, just contact us, however nothing\n    // precludes you from invoking this method yourself.\n    function RefundBet(uint betId) external onlyOwner {\n        // Check that bet is in 'active' state.\n        Bet storage bet = bets[betId];\n        uint amount = bet.Amount;\n\n        if(amount == 0) revert(\"Bet should be in an 'active' state\");\n\n        // Move bet into 'processed' state, release funds.\n        bet.Amount = 0;\n\n        uint diceWinAmount;\n        uint jackpotFee;\n        (diceWinAmount, jackpotFee) = GetDiceWinAmount(amount, bet.Modulo, bet.RollUnder);\n\n        LOCKED_IN_BETS -= uint128(diceWinAmount);\n        if (JACKPOT_BALANCE >= jackpotFee) {\n            JACKPOT_BALANCE -= uint128(jackpotFee);\n        }       \n\n        // Send the refund.\n        SendFunds(bet.Player, amount, amount, betId,0);\n        MAX_PROFIT = (address(this).balance - LOCKED_IN_BETS - JACKPOT_BALANCE - diceWinAmount) * MAX_PROFIT_PERCENT / 100;\n        delete bets[betId];\n    }\n\n     // This is the method used to settle bets. \n    function SettleBet(string memory betString,bytes32 blockHash) public onlyCroupier {\n        uint betId = uint(keccak256(abi.encodePacked(betString)));\n\n        Bet storage bet = bets[betId];\n\n         uint placeBlockNumber = bet.PlaceBlockNumber;\n\n        if(block.number <= placeBlockNumber) revert(\"settleBet in the same block as placeBet, or before.\");\n        if(blockhash(placeBlockNumber) != blockHash) revert(\"Invalid BlockHash\");        \n        \n        SettleBetCommon(bet,betId,blockHash);\n    }\n\n    // Common settlement code for settleBet.\n    function SettleBetCommon(Bet storage bet, uint betId,bytes32 blockHash) private {\n        uint amount = bet.Amount;\n        uint modulo = bet.Modulo;\n        uint rollUnder = bet.RollUnder;\n        address payable player = bet.Player;\n\n        // Check that bet is in 'active' state.        \n        if(amount == 0) revert(\"Bet should be in an 'active' state\");\n\n        // Move bet into 'processed' state already.\n        bet.Amount = 0;\n\n        // The RNG - combine \"betId\" and blockHash of placeBet using Keccak256.\n        bytes32 entropy = keccak256(abi.encodePacked(betId, blockHash));\n        \n        // Do a roll by taking a modulo of entropy. Compute winning amount.\n        uint dice = uint(entropy) % modulo;\n\n        uint diceWinAmount;\n        uint _jackpotFee;\n        (diceWinAmount, _jackpotFee) = GetDiceWinAmount(amount, modulo, rollUnder);\n\n        uint diceWin = 0;\n        uint jackpotWin = 0;\n\n        // Determine dice outcome.\n        if ((modulo != 100) && (modulo <= MAX_MASK_MODULO)) {\n            // For small modulo games, check the outcome against a bit mask.\n            if ((2 ** dice) & bet.Mask != 0) {\n                diceWin = diceWinAmount;\n            }\n        } else {\n            // For larger modulos, check inclusion into half-open interval.\n            if (dice < rollUnder) {\n                diceWin = diceWinAmount;\n            }\n        }\n\n        // Unlock the bet amount, regardless of the outcome.\n        LOCKED_IN_BETS -= uint128(diceWinAmount);\n\n        // Roll for a jackpot (if eligible).\n        if (amount >= MIN_JACKPOT_BET) {\n            // The second modulo, statistically independent from the \"main\" dice roll.\n            // Effectively you are playing two games at once!\n            uint jackpotRng = (uint(entropy) / modulo) % JACKPOT_CHANCE;\n\n            // Bingo!\n            if (jackpotRng == 0) {\n                jackpotWin = JACKPOT_BALANCE;\n                JACKPOT_BALANCE = 0;\n            }\n        }\n\n        // Log jackpot win.\n        if (jackpotWin > 0) {\n            emit JackpotPayment(player,betId,jackpotWin);\n        }        \n\n        // Send the funds to player.\n        SendFunds(player, diceWin + jackpotWin == 0 ? 1 wei : diceWin + jackpotWin, diceWin, betId,dice);\n        MAX_PROFIT = (address(this).balance - LOCKED_IN_BETS - JACKPOT_BALANCE - diceWin) * MAX_PROFIT_PERCENT / 100;\n        delete bets[betId];\n    }\n\n    function GetBetInfoByBetString(string memory betString) public view onlyOwner returns (uint _betId, uint amount, uint8 modulo, uint8 rollUnder, uint betId, uint mask, address player) {\n        _betId = uint(keccak256(abi.encodePacked(betString)));\n        (amount, modulo, rollUnder, betId, mask, player) = GetBetInfo(_betId);\n    }\n\n    function GetBetInfo(uint _betId) public view returns (uint amount, uint8 modulo, uint8 rollUnder, uint betId, uint mask, address player) {\n        Bet storage bet = bets[_betId];\n        amount = bet.Amount;\n        modulo = bet.Modulo;\n        rollUnder = bet.RollUnder;\n        betId = _betId;\n        mask = bet.Mask;\n        player = bet.Player;\n    }\n\n    /* only owner address can set emergency pause #1 */\n    function ownerPauseGame(bool newStatus) public onlyOwner {\n        GAME_PAUSED = newStatus;\n    }\n\n    /* only owner address can set emergency pause #2 */\n    function ownerPausePayouts(bool newPayoutStatus) public onlyOwner {\n        PAYOUT_PAUSED = newPayoutStatus;\n    }   \n\n    /* only owner address can set emergency pause #2 */\n    function ownerSetMaxProfit(uint _maxProfit) public onlyOwner {\n        MAX_PROFIT = _maxProfit;\n        MAX_PROFIT = (address(this).balance - LOCKED_IN_BETS - JACKPOT_BALANCE) * MAX_PROFIT_PERCENT / 100;\n    }\n\n     /* only owner address can set emergency pause #2 */\n    function ownerSetMaxProfitPercent(uint _maxProfitPercent) public onlyOwner {\n        MAX_PROFIT_PERCENT = _maxProfitPercent;\n        MAX_PROFIT = (address(this).balance - LOCKED_IN_BETS - JACKPOT_BALANCE) * MAX_PROFIT_PERCENT / 100;\n    }    \n\n    /* only owner address can transfer ether */\n    function TransferEther(address payable sendTo, uint amount) public onlyOwner {        \n        /* safely update contract balance when sending out funds*/              \n        if(!sendTo.send(amount)) \n            revert(\"owner transfer ether failed.\");\n        if(KILLED == false)\n        {\n            MAX_PROFIT = (address(this).balance - LOCKED_IN_BETS - JACKPOT_BALANCE) * MAX_PROFIT_PERCENT / 100;            \n        }\n        emit LogTransferEther(sendTo, amount); \n    }\n\n    //Add ether to contract by owner\n    function ChargeContract () external payable onlyOwner {\n        /* safely update contract balance */ \n        MAX_PROFIT = (address(this).balance - LOCKED_IN_BETS - JACKPOT_BALANCE) * MAX_PROFIT_PERCENT / 100;       \n    }\n\n    // Contract may be destroyed only when there are no ongoing bets,\n    // either settled or refunded. All funds are transferred to contract owner.\n    function kill() external onlyOwner {\n        require(LOCKED_IN_BETS == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n        KILLED = true;\n        JACKPOT_BALANCE = 0;        \n    }\n\n     function ownerSetNewOwner(address payable newOwner) external onlyOwner {\n        OWNER = newOwner;       \n    }\n\n    function ownerSetNewCroupier(address newCroupier) external onlyOwner {\n        CROUPIER =  newCroupier  ; \n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"MIN_JACKPOT_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"betString\",\"type\":\"string\"}],\"name\":\"GetBetInfoByBetString\",\"outputs\":[{\"name\":\"_betId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint8\"},{\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"name\":\"betId\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"betId\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPayoutStatus\",\"type\":\"bool\"}],\"name\":\"ownerPausePayouts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKED_IN_BETS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSE_EDGE_OF_TEN_THOUSAND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxProfitPercent\",\"type\":\"uint256\"}],\"name\":\"ownerSetMaxProfitPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"GetBetInfo\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint8\"},{\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"name\":\"betId\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betString\",\"type\":\"string\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"SettleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KILLED\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PROFIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ownerPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAYOUT_PAUSED\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"RefundBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerSetNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_CHANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ChargeContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sendTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSE_EDGE_MINIMUM_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PROFIT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_BALANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCroupier\",\"type\":\"address\"}],\"name\":\"ownerSetNewCroupier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxProfit\",\"type\":\"uint256\"}],\"name\":\"ownerSetMaxProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_PAUSED\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_croupier\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"uint256\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JackpotPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"source\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogTransferEther\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000e62c4b299c3818f700f8c27112f100411ee76c92000000000000000000000000e62c4b299c3818f700f8c27112f100411ee76c92"
}