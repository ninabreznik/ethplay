{
  "address": "0x3f1e4ef0b246eb95fc73f18f6613b799811a739b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DBETToVETDeposit",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-04\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// Intermediate deposit contract for DBET V1 and V2 tokens.\n// Token holders send tokens to this contract to in-turn receive DBET tokens on VET.\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n    public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract DBETToVETDeposit {\n\n    using SafeMath for uint256;\n\n    // DBET team address\n    address public dbetTeam;\n    // DBET V1 token contract\n    ERC20 public dbetV1;\n    // DBET V2 token contract\n    ERC20 public dbetV2;\n\n    // Emergency withdrawals incase something goes wrong\n    bool public emergencyWithdrawalsEnabled;\n    // If deposits are finalized, emergency withdrawals will cease to work\n    bool public finalizedDeposits;\n    // Number of deposits made\n    uint256 public depositIndex;\n\n    // Mapping of tokens deposited by addresses\n    // isV2 => (address => amount)\n    mapping(bool => mapping(address => uint256)) public depositedTokens;\n\n    event LogTokenDeposit(\n        bool isV2,\n        address _address,\n        address VETAddress,\n        uint256 amount,\n        uint256 index\n    );\n    event LogEmergencyWithdraw(\n        bool isV2,\n        address _address,\n        uint256 amount\n    );\n\n    constructor(address v1, address v2) public {\n        dbetTeam = msg.sender;\n        dbetV1 = ERC20(v1);\n        dbetV2 = ERC20(v2);\n    }\n\n    modifier isDbetTeam() {\n        require(msg.sender == dbetTeam);\n        _;\n    }\n\n    modifier areWithdrawalsEnabled() {\n        require(emergencyWithdrawalsEnabled && !finalizedDeposits);\n        _;\n    }\n\n    // Returns the appropriate token contract\n    function getToken(bool isV2) internal returns (ERC20) {\n        if (isV2)\n            return dbetV2;\n        else\n            return dbetV1;\n    }\n\n    // Deposit V1/V2 tokens into the contract\n    function depositTokens(\n        bool isV2,\n        uint256 amount,\n        address VETAddress\n    )\n    public {\n        require(amount > 0);\n        require(VETAddress != 0);\n        require(getToken(isV2).balanceOf(msg.sender) >= amount);\n        require(getToken(isV2).allowance(msg.sender, address(this)) >= amount);\n\n        depositedTokens[isV2][msg.sender] = depositedTokens[isV2][msg.sender].add(amount);\n\n        require(getToken(isV2).transferFrom(msg.sender, address(this), amount));\n\n        emit LogTokenDeposit(\n            isV2,\n            msg.sender,\n            VETAddress,\n            amount,\n            depositIndex++\n        );\n    }\n\n    function enableEmergencyWithdrawals () public\n    isDbetTeam {\n        emergencyWithdrawalsEnabled = true;\n    }\n\n    function finalizeDeposits () public\n    isDbetTeam {\n        finalizedDeposits = true;\n    }\n\n    // Withdraw deposited tokens if emergency withdrawals have been enabled\n    function emergencyWithdraw(bool isV2) public\n    areWithdrawalsEnabled {\n        require(depositedTokens[isV2][msg.sender] > 0);\n\n        uint256 amount = depositedTokens[isV2][msg.sender];\n\n        depositedTokens[isV2][msg.sender] = 0;\n\n        require(getToken(isV2).transfer(msg.sender, amount));\n\n        emit LogEmergencyWithdraw(isV2, msg.sender, amount);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"dbetTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyWithdrawalsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableEmergencyWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isV2\",\"type\":\"bool\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dbetV2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isV2\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"VETAddress\",\"type\":\"address\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dbetV1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"v1\",\"type\":\"address\"},{\"name\":\"v2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isV2\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"VETAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogTokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isV2\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogEmergencyWithdraw\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610e658339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610d55806101106000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a96fa20146100b4578063275160751461010b578063303b069f1461013a5780635b18e4a3146101515780635c12f040146101b45780637b898939146101e357806395f37d3f1461020e5780639d6d859814610265578063ac1258f6146102be578063ccebac8b14610315578063ffc85dc514610344575b600080fd5b3480156100c057600080fd5b506100c961035b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561011757600080fd5b50610120610380565b604051808215151515815260200191505060405180910390f35b34801561014657600080fd5b5061014f610393565b005b34801561015d57600080fd5b5061019e600480360381019080803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061040b565b6040518082815260200191505060405180910390f35b3480156101c057600080fd5b506101e1600480360381019080803515159060200190929190505050610430565b005b3480156101ef57600080fd5b506101f86106e6565b6040518082815260200191505060405180910390f35b34801561021a57600080fd5b506102236106ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027157600080fd5b506102bc60048036038101908080351515906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610712565b005b3480156102ca57600080fd5b506102d3610bff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032157600080fd5b5061032a610c25565b604051808215151515815260200191505060405180910390f35b34801561035057600080fd5b50610359610c38565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103ee57600080fd5b6001600260146101000a81548160ff021916908315150217905550565b6004602052816000526040600020602052806000526040600020600091509150505481565b6000600260149054906101000a900460ff16801561045b5750600260159054906101000a900460ff16155b151561046657600080fd5b6000600460008415151515815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156104c957600080fd5b600460008315151515815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460008415151515815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061058382610cb0565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b505050506040513d602081101561064f57600080fd5b8101908080519060200190929190505050151561066b57600080fd5b7fdd31cf8f28da0af3a044406f460023ca1f166b5d7781d385ad9d9ed2190c9be582338360405180841515151581526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008211151561072157600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561074757600080fd5b8161075184610cb0565b73ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156107eb57600080fd5b505af11580156107ff573d6000803e3d6000fd5b505050506040513d602081101561081557600080fd5b81019080805190602001909291905050501015151561083357600080fd5b8161083d84610cb0565b73ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561090b57600080fd5b505af115801561091f573d6000803e3d6000fd5b505050506040513d602081101561093557600080fd5b81019080805190602001909291905050501015151561095357600080fd5b6109ba82600460008615151515815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d0d90919063ffffffff16565b600460008515151515815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a1b83610cb0565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610af157600080fd5b505af1158015610b05573d6000803e3d6000fd5b505050506040513d6020811015610b1b57600080fd5b81019080805190602001909291905050501515610b3757600080fd5b7f9a6d412c720baf6e899a87cb72eae8fd30a046b8bd3955273e5462862218d0b483338385600360008154809291906001019190505560405180861515151581526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019550505050505060405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260159054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c9357600080fd5b6001600260156101000a81548160ff021916908315150217905550565b60008115610ce257600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610d08565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b60008183019050828110151515610d2057fe5b809050929150505600a165627a7a723058201c84c5f5a8771a49eeea33143962254c45e4fbca3e10996c62e9e7873cd0b4700029000000000000000000000000540449e4d172cd9491c76320440cd74933d5691a0000000000000000000000009b68bfae21df5a510931a262cecf63f41338f264",
  "constructorArguments": "000000000000000000000000540449e4d172cd9491c76320440cd74933d5691a0000000000000000000000009b68bfae21df5a510931a262cecf63f41338f264"
}