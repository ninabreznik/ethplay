{
  "address": "0xdc3c8a92b7a6e86c688caef87ffd08b2184c1456",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SolidifiedMain",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity 0.5.0;\n\ncontract OwnedI {\n    function getOwner() public view returns(address owner);\n    function changeOwner(address newOwner) public returns (bool success);\n}\n\ncontract Owned is OwnedI {\n\n    address private contractOwner;\n\n    event LogOwnerChanged(\n        address oldOwner,\n        address newOwner);\n\n    modifier onlyOwner {\n        require(msg.sender == contractOwner, \"Owned:sender should be owner\");\n        _;\n    }\n\n    constructor() public {\n        contractOwner = msg.sender;\n    }\n\n    function getOwner() public view returns(address owner) {\n        return contractOwner;\n    }\n\n    function changeOwner(address newOwner)\n        public\n        onlyOwner\n        returns(bool success)\n    {\n        require(newOwner != address(0), \"Owned:invalid address\");\n        emit LogOwnerChanged(contractOwner, newOwner);\n        contractOwner = newOwner;\n        return true;\n    }\n\n}\n\n\ncontract SolidifiedDepositableFactoryI {\n  function deployDepositableContract(address _userAddress, address _mainHub)\n   public\n   returns(address depositable);\n}\n\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal view returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal view returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal view returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal view returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract DeployerI {\n\n    mapping(address => uint) public deployedContractPointers;\n    address[] public deployedContracts;\n\n    function getDeployedContractsCount() public view returns(uint count);\n    function isDeployedContract(address deployed) public view returns(bool isIndeed);\n\n}\n\ncontract Deployer is DeployerI {\n\n    using SafeMath for uint;\n\n    mapping(address => uint) public deployedContractPointers;\n    address[] public deployedContracts;\n\n    event LogDeployedContract(address sender, address deployed);\n\n    modifier onlyDeployed {\n        require(isDeployedContract(msg.sender), \"Deployer:sender should be deployed contract\");\n        _;\n    }\n\n    function getDeployedContractsCount() public view returns(uint count) {\n        return deployedContracts.length;\n    }\n\n    function insertDeployedContract(address deployed) internal returns(bool success) {\n        require(!isDeployedContract(deployed), \"Deployer:deployed is already inserted\");\n        deployedContractPointers[deployed] = deployedContracts.push(deployed).sub(uint(1));\n        emit LogDeployedContract(msg.sender, deployed);\n        return true;\n    }\n\n    function isDeployedContract(address deployed) public view returns(bool isIndeed) {\n        if(deployedContracts.length == 0) return false;\n        return deployedContracts[deployedContractPointers[deployed]] == deployed;\n    }\n\n}\n\n\n\n\n\n/*\nManage a privileged user \"controllerAddress\" which is expected to be a centralized server.\n*/\n\ncontract ControlledI is OwnedI {\n\n    function getController() public view returns(address controller);\n    function changeController(address newController) public returns(bool success);\n}\n\ncontract Controlled is ControlledI, Owned {\n\n    address private controllerAddress;\n\n    event LogControllerChanged(\n        address sender,\n        address oldController,\n        address newController);\n\n    modifier onlyController {\n        require(msg.sender == controllerAddress, \"Controlled:Sender is not controller\");\n        _;\n    }\n\n    constructor(address controller) public {\n        controllerAddress = controller;\n        if(controllerAddress == address(0)) controllerAddress = msg.sender;\n    }\n\n    function getController() public view returns(address controller) {\n        return controllerAddress;\n    }\n\n    function changeController(address newController)\n        public\n        onlyOwner\n        returns(bool success)\n    {\n        require(newController != address(0), \"Controlled:Invalid address\");\n        require(newController != controllerAddress, \"Controlled:New controller should be different than controller\");\n        emit LogControllerChanged(msg.sender, controllerAddress, newController);\n        controllerAddress = newController;\n        return true;\n    }\n\n}\n\n\n\n\n\ncontract StoppableI is OwnedI {\n    function isRunning() public view returns(bool contractRunning);\n    function setRunSwitch(bool onOff) public returns(bool success);\n}\n\ncontract Stoppable is StoppableI, Owned {\n    bool private running;\n\n    modifier onlyIfRunning\n    {\n        require(running);\n        _;\n    }\n\n    event LogSetRunSwitch(address sender, bool isRunning);\n\n    constructor() public {\n        running = true;\n    }\n\n    function isRunning()\n        public\n        view\n        returns(bool contractRunning)\n    {\n        return running;\n    }\n\n    function setRunSwitch(bool onOff)\n        public\n        onlyOwner\n        returns(bool success)\n    {\n        emit LogSetRunSwitch(msg.sender, onOff);\n        running = onOff;\n        return true;\n    }\n\n}\n\n\n\n\n\n/** @title Solidified Vault\n    @author JG Carvalho\n **/\ncontract SolidifiedVault {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    /*\n     *  views\n     */\n    uint constant public MAX_OWNER_COUNT = 3;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyWallet() {\n        require(msg.sender == address(this), \"Vault: sender should be wallet\");\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner], \"Vault:sender shouldn't be owner\");\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner], \"Vault:sender should be owner\");\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != address(0),\"Vault:transaction should exist\");\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner], \"Vault:transaction should be confirmed\");\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner], \"Vault:transaction is already confirmed\");\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed, \"Vault:transaction has already executed\");\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != address(0), \"Vault:address shouldn't be null\");\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0, \"Vault:invalid requirement\");\n        _;\n    }\n\n    /**\n      @dev Fallback function allows to deposit ether.\n    **/\n    function()\n        external\n        payable\n    {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n     /**\n     @dev Contract constructor sets initial owners and required number of confirmations.\n     @param _owners List of initial owners.\n     @param _required Number of required confirmations.\n     **/\n    constructor(address[] memory _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != address(0), \"Vault:Invalid owner\");\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            (bool exec, bytes memory _) = txn.destination.call.value(txn.value)(\"\");\n            if (exec)\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        view\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        view\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        view\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        view\n        returns (address[] memory)\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        view\n        returns (address[] memory _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        view\n        returns (uint[] memory _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}\n\n\ncontract SolidifiedMain is Controlled, Deployer, Stoppable {\n\n  using SafeMath for uint;\n\n  // VARIABLES\n  address public depositableFactoryAddress;\n  address payable public vault;\n\n  mapping(address => UserStruct) public userStructs;\n  mapping(address => address) public depositAddresses; //maps user address to depositAddress\n\n  struct UserStruct {\n    uint balance;\n    uint pointer;\n  }\n  address[] public userList;\n\n  //EVENTS\n  event LogUserDeposit(address user, address depositAddress, uint amount);\n  event LogUserCreditCollected(address user, uint amount, bytes32 ref);\n  event LogUserCreditDeposit(address user, uint amount, bytes32 ref);\n  event LogDepositableDeployed(address user, address depositableAddress, uint id);\n  event LogRequestWithdraw(address user, uint amount);\n  event LogUserInserted(address user, uint userId);\n  event LogVaultAddressChanged(address newAddress, address sender);\n  event LogDepositableFactoryAddressChanged(address newAddress, address sender);\n\n  // CONSTRUCTOR\n  /**\n  @dev Constructor function\n  @param controller address Address of the controller\n  @param _depositableFactoryAddress address Address of the depositable factoryAddress\n  @param _vault address Address of the vault\n  **/\n  constructor(address controller,\n      address _depositableFactoryAddress,\n      address payable _vault)\n      public\n    Controlled(controller) {\n      vault = _vault;\n      depositableFactoryAddress = _depositableFactoryAddress;\n    }\n\n  //PUBLIC FUNCTIONS\n\n  /**\n  @dev Allows the contract to receive an deposit for specif user\n  @param _userAddress address Address of the user to be deposited\n  **/\n  function receiveDeposit(address _userAddress)\n    payable\n    public\n    onlyDeployed\n    onlyIfRunning\n  {\n    require(msg.sender == depositAddresses[_userAddress], \"Main:sender should be deposit address\");\n    userStructs[_userAddress].balance = userStructs[_userAddress].balance.add(msg.value);\n\n    vault.transfer(msg.value);\n    emit LogUserDeposit(_userAddress, msg.sender, msg.value);\n  }\n\n  /**\n  @dev Allows the controller to collect/lock user funds\n  @param _userAddress address Adress of the user to collect credit from\n  @param amount uint256 Amount to be collected\n  @param ref bytes32 Referece for the reason for collection\n  **/\n  function collectUserCredit(address _userAddress, uint256 amount, bytes32 ref)\n    public\n    onlyController\n    onlyIfRunning\n  {\n      require(userStructs[_userAddress].balance >= amount, \"Main:user does not have enough balance\");\n      userStructs[_userAddress].balance = userStructs[_userAddress].balance.sub(amount);\n      emit LogUserCreditCollected(_userAddress, amount, ref);\n  }\n\n  /**\n  @dev Allows controller to deposit funds for user\n  @param _userAddress address Adress of the user to collect credit from\n  @param amount uint256 Amount to be collected\n  @param ref bytes32 Referece for the reason for collection\n  **/\n  function depositUserCredit(address _userAddress, uint256 amount, bytes32 ref)\n    public\n    onlyController\n    onlyIfRunning\n  {\n      userStructs[_userAddress].balance = userStructs[_userAddress].balance.add(amount);\n      emit LogUserCreditDeposit(_userAddress, amount, ref);\n  }\n\n  /**\n  @dev Deploys a new depositable contract, which users can send ether to.\n  @param _userAddress address Address of the user that will be credited the money\n  @return An address of the new depositable address\n  **/\n  function deployDepositableContract(address _userAddress)\n    public\n    onlyController\n    onlyIfRunning\n    returns(address depositable)\n  {\n      if(!isUser(_userAddress)) require(insertNewUser(_userAddress), \"Main:inserting user has failed\");\n      require(depositAddresses[_userAddress] == address(0), \"Main:invalid address\");\n      SolidifiedDepositableFactoryI f = SolidifiedDepositableFactoryI(depositableFactoryAddress);\n      address d = f.deployDepositableContract(_userAddress, address(this));\n\n      require(insertDeployedContract(d), \"Main:insert contract failed\");\n      require(registerDepositAddress(_userAddress, d), \"Main:contract registration failed\");\n\n      emit LogDepositableDeployed(_userAddress, d,getDeployedContractsCount());\n\n      return d;\n  }\n\n  /**\n  @dev Request a eth withdraw in the vault for specif user\n  @param _userAddress address Adress of the user to withdraw\n  @param amount uint256 Amount to be withdrawn\n  **/\n  function requestWithdraw(address _userAddress, uint amount)\n    public\n    onlyController\n    onlyIfRunning\n  {\n    require(userStructs[_userAddress].balance >= amount,\"Main:user does not have enough balance\");\n    userStructs[_userAddress].balance = userStructs[_userAddress].balance.sub(amount);\n    (bool success, bytes memory _) = vault.call(abi.encodeWithSignature(\"submitTransaction(address,uint256)\",_userAddress,amount));\n    require(success, \"Main:low level call failed\");\n\n    emit LogRequestWithdraw(_userAddress, amount);\n  }\n\n  /**\n  @dev Register a deposit address for a specif user, so all Eth deposited in that\n  address will be credited only to the user.\n  @param _userAddress address Address of the user\n  @param _depositAddress address Address of the depositable contract\n  **/\n  function registerDepositAddress(address _userAddress, address _depositAddress)\n    public\n    onlyController\n    onlyIfRunning\n    returns(bool success)\n  {\n    depositAddresses[_userAddress] = _depositAddress;\n    return true;\n  }\n\n  /**\n  @dev Allows to disconnect an user address from a deposit address\n  @param _userAddress address Address of the user\n  **/\n  function deregisterUserDepositAddress(address _userAddress)\n    public\n    onlyController\n    onlyIfRunning\n  {\n    depositAddresses[_userAddress] = address(0);\n  }\n\n  /**\n  @dev Allows to register a new user into the system\n  @param user address Address of the user\n  **/\n  function insertNewUser(address user)\n    public\n    onlyController\n    onlyIfRunning\n    returns(bool success)\n  {\n    require(!isUser(user), \"Main:address is already user\");\n    userStructs[user].pointer = userList.push(user).sub(uint(1));\n    emit LogUserInserted(user, userStructs[user].pointer);\n    return true;\n  }\n\n  /**\n  @dev Change the vault address\n  @param _newVault address Address of the new vault\n  **/\n  function changeVaultAddress(address payable _newVault)\n    public\n    onlyOwner\n    onlyIfRunning\n  {\n    require(_newVault != address(0),\"Main:invalid address\");\n    vault = _newVault;\n    emit LogVaultAddressChanged(_newVault, msg.sender);\n  }\n\n  /**\n  @dev Change depositable factory address\n  @param _newAddress address Address of the new depositable factory\n  **/\n  function changeDespositableFactoryAddress(address _newAddress)\n    public\n    onlyController\n    onlyIfRunning\n  {\n    require(_newAddress != address(0),\"Main:invalid address\");\n    depositableFactoryAddress = _newAddress;\n\n    emit LogDepositableFactoryAddressChanged(_newAddress, msg.sender);\n  }\n\n  /**\n  @dev Check if an address is a registered user\n  @param user address Address of the user\n  @return true if address is user\n  **/\n  function isUser(address user) public view returns(bool isIndeed) {\n      if(userList.length ==0) return false;\n      return(userList[userStructs[user].pointer] == user);\n  }\n\n  /**\n  @dev Checks the depositable Factory address of a specif user\n  @return The depositable factory address\n  **/\n  function getDepositableFactoryAddress()\n    public\n    view\n    returns(address factoryAddress)\n  {\n    return depositableFactoryAddress;\n  }\n\n  /**\n  @dev Getter for the vault address\n  @return The address of the vault\n  **/\n  function getVaultAddress()\n    public\n    view\n    returns(address vaultAddress)\n  {\n    return vault;\n  }\n\n  /**\n  @dev Checks the depositable Factory address of a specif user\n  @param _userAddress address Address of the user\n  @return The depositable address of the user.\n  **/\n  function getDepositAddressForUser(address _userAddress)\n    public\n    view\n    returns(address depositAddress)\n  {\n    return depositAddresses[_userAddress];\n  }\n\n  /**\n  @dev Checks the balance of specif user\n  @param _userAddress address Address of the user\n  @return uint representing the balance\n  **/\n  function getUserBalance(address _userAddress)\n    public\n    view\n    returns(uint256 balance)\n  {\n    return userStructs[_userAddress].balance;\n  }\n\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000001096f5efabb3af0a796a305611e890f9f0fbcc87000000000000000000000000960caf296e593e9d9b204a7ad29e933e9be3e119000000000000000000000000b4d62dbbd72ed93dfd7af468bae0966d51c60bb4"
}