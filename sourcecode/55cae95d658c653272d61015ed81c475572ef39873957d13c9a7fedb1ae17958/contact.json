{
  "address": "0xc520f3ac303a107d8f4b08b326b6ea66a4f961cd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FreezableCoin",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-10\n*/\n\npragma solidity 0.4.23;\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n    public\n    auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n    public\n    auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed sig,\n        address  indexed guy,\n        bytes32  indexed foo,\n        bytes32  indexed bar,\n        uint wad,\n        bytes fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract DSStop is DSNote, DSAuth {\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped);\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n\n    function start() public auth note {\n        stopped = false;\n    }\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n}\n\ncontract ERC20 {\n    /// @return total amount of tokens\n    function totalSupply() constant public returns (uint256 supply);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant public returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract Coin is ERC20, DSStop {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 internal c_totalSupply;\n    mapping(address => uint256) internal c_balances;\n    mapping(address => mapping(address => uint256)) internal c_approvals;\n\n    function init(uint256 token_supply, string token_name, string token_symbol) internal {\n        c_balances[msg.sender] = token_supply;\n        c_totalSupply = token_supply;\n        name = token_name;\n        symbol = token_symbol;\n    }\n\n    function() public {\n        assert(false);\n    }\n\n    function setName(string _name) auth public {\n        name = _name;\n    }\n\n    function totalSupply() constant public returns (uint256) {\n        return c_totalSupply;\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return c_balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public stoppable returns (bool) {\n        require(msg.data.length >= (2 * 32) + 4);\n        require(_value == 0 || c_approvals[msg.sender][_spender] == 0);\n        // uint never less than 0. The negative number will become to a big positive number\n        require(_value < c_totalSupply);\n\n        c_approvals[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return c_approvals[_owner][_spender];\n    }\n}\n\ncontract FreezerAuthority is DSAuthority {\n    address[] internal c_freezers;\n    // sha3(\"setFreezing(address,uint256,uint256,uint8)\").slice(0,10)\n    bytes4 constant setFreezingSig = bytes4(0x51c3b8a6);\n    // sha3(\"transferAndFreezing(address,uint256,uint256,uint256,uint8)\").slice(0,10)\n    bytes4 constant transferAndFreezingSig = bytes4(0xb8a1fdb6);\n\n    function canCall(address caller, address, bytes4 sig) public view returns (bool) {\n        // freezer can call setFreezing, transferAndFreezing\n        if (isFreezer(caller) && (sig == setFreezingSig || sig == transferAndFreezingSig)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function addFreezer(address freezer) public {\n        int i = indexOf(c_freezers, freezer);\n        if (i < 0) {\n            c_freezers.push(freezer);\n        }\n    }\n\n    function removeFreezer(address freezer) public {\n        int index = indexOf(c_freezers, freezer);\n        if (index >= 0) {\n            uint i = uint(index);\n            while (i < c_freezers.length - 1) {\n                c_freezers[i] = c_freezers[i + 1];\n            }\n            c_freezers.length--;\n        }\n    }\n\n    /** Finds the index of a given value in an array. */\n    function indexOf(address[] values, address value) internal pure returns (int) {\n        uint i = 0;\n        while (i < values.length) {\n            if (values[i] == value) {\n                return int(i);\n            }\n            i++;\n        }\n        return int(- 1);\n    }\n\n    function isFreezer(address addr) public constant returns (bool) {\n        return indexOf(c_freezers, addr) >= 0;\n    }\n}\n\ncontract FreezableCoin is Coin, DSMath {\n    // freezing struct\n    struct FreezingNode {\n        uint end_stamp;\n        uint num_coins;\n        uint8 freezing_type;\n    }\n\n    // freezing account list\n    mapping(address => FreezingNode[]) internal c_freezing_list;\n\n    constructor(uint256 token_supply, string token_name, string token_symbol) public {\n        init(token_supply, token_name, token_symbol);\n        setAuthority(new FreezerAuthority());\n    }\n\n    function addFreezer(address freezer) auth public {\n        FreezerAuthority(authority).addFreezer(freezer);\n    }\n\n    function removeFreezer(address freezer) auth public {\n        FreezerAuthority(authority).removeFreezer(freezer);\n    }\n\n    event ClearExpiredFreezingEvent(address indexed addr);\n    event SetFreezingEvent(address indexed addr, uint end_stamp, uint num_coins, uint8 indexed freezing_type);\n\n    function clearExpiredFreezing(address addr) public {\n        FreezingNode[] storage nodes = c_freezing_list[addr];\n        uint length = nodes.length;\n\n        // find first expired index\n        uint left = 0;\n        while (left < length) {\n            // not freezing any more\n            if (nodes[left].end_stamp <= block.timestamp) {\n                break;\n            }\n            left++;\n        }\n\n        // next frozen index\n        uint right = left + 1;\n        while (left < length && right < length) {\n            // still freezing\n            if (nodes[right].end_stamp > block.timestamp) {\n                nodes[left] = nodes[right];\n                left++;\n            }\n            right++;\n        }\n        if (length != left) {\n            nodes.length = left;\n            emit ClearExpiredFreezingEvent(addr);\n        }\n    }\n\n    function validBalanceOf(address addr) constant public returns (uint) {\n        FreezingNode[] memory nodes = c_freezing_list[addr];\n        uint length = nodes.length;\n        uint total_coins = balanceOf(addr);\n\n        for (uint i = 0; i < length; ++i) {\n            if (nodes[i].end_stamp > block.timestamp) {\n                total_coins = sub(total_coins, nodes[i].num_coins);\n            }\n        }\n\n        return total_coins;\n    }\n\n    function freezingBalanceNumberOf(address addr) constant public returns (uint) {\n        return c_freezing_list[addr].length;\n    }\n\n    function freezingBalanceInfoOf(address addr, uint index) constant public returns (uint, uint, uint8) {\n        return (c_freezing_list[addr][index].end_stamp, c_freezing_list[addr][index].num_coins, uint8(c_freezing_list[addr][index].freezing_type));\n    }\n\n    function setFreezing(address addr, uint end_stamp, uint num_coins, uint8 freezing_type) auth stoppable public {\n        require(block.timestamp < end_stamp);\n        // uint never less than 0. The negative number will become to a big positive number\n        require(num_coins < c_totalSupply);\n        clearExpiredFreezing(addr);\n        uint valid_balance = validBalanceOf(addr);\n        require(valid_balance >= num_coins);\n\n        FreezingNode memory node = FreezingNode(end_stamp, num_coins, freezing_type);\n        c_freezing_list[addr].push(node);\n\n        emit SetFreezingEvent(addr, end_stamp, num_coins, freezing_type);\n    }\n\n    function transferAndFreezing(address _to, uint256 _value, uint256 freeze_amount, uint end_stamp, uint8 freezing_type) auth stoppable public returns (bool) {\n        // uint never less than 0. The negative number will become to a big positive number\n        require(_value < c_totalSupply);\n        require(freeze_amount <= _value);\n\n        transfer(_to, _value);\n        setFreezing(_to, end_stamp, freeze_amount, freezing_type);\n\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) stoppable public returns (bool) {\n        require(msg.data.length >= (2 * 32) + 4);\n        // uint never less than 0. The negative number will become to a big positive number\n        require(_value < c_totalSupply);\n        clearExpiredFreezing(msg.sender);\n        uint from_coins = validBalanceOf(msg.sender);\n\n        require(from_coins >= _value);\n\n        c_balances[msg.sender] = sub(c_balances[msg.sender], _value);\n        c_balances[_to] = add(c_balances[_to], _value);\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) stoppable public returns (bool) {\n        // uint never less than 0. The negative number will become to a big positive number\n        require(_value < c_totalSupply);\n        require(c_approvals[_from][msg.sender] >= _value);\n\n        clearExpiredFreezing(_from);\n        uint from_coins = validBalanceOf(_from);\n\n        require(from_coins >= _value);\n\n        c_approvals[_from][msg.sender] = sub(c_approvals[_from][msg.sender], _value);\n        c_balances[_from] = sub(c_balances[_from], _value);\n        c_balances[_to] = add(c_balances[_to], _value);\n\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"freezingBalanceNumberOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezer\",\"type\":\"address\"}],\"name\":\"removeFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"end_stamp\",\"type\":\"uint256\"},{\"name\":\"num_coins\",\"type\":\"uint256\"},{\"name\":\"freezing_type\",\"type\":\"uint8\"}],\"name\":\"setFreezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezer\",\"type\":\"address\"}],\"name\":\"addFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"freezingBalanceInfoOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"freeze_amount\",\"type\":\"uint256\"},{\"name\":\"end_stamp\",\"type\":\"uint256\"},{\"name\":\"freezing_type\",\"type\":\"uint8\"}],\"name\":\"transferAndFreezing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"validBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"clearExpiredFreezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token_supply\",\"type\":\"uint256\"},{\"name\":\"token_name\",\"type\":\"string\"},{\"name\":\"token_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ClearExpiredFreezingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"end_stamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"num_coins\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"freezing_type\",\"type\":\"uint8\"}],\"name\":\"SetFreezingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526004805460ff191660121790553480156200001e57600080fd5b5060405162001e2638038062001e26833981016040818152825160208401519184015160018054600160a060020a03191633600160a060020a03169081179091559194928301939201917fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2620000a4838383640100000000620000e8810204565b620000df620000b262000301565b604051809103906000f080158015620000cf573d6000803e3d6000fd5b506401000000006200013b810204565b505050620003b7565b600160a060020a0333166000908152600660209081526040909120849055600584905582516200011f916002919085019062000312565b5080516200013590600390602084019062000312565b50505050565b62000174337fffffffff0000000000000000000000000000000000000000000000000000000060003516640100000000620001cc810204565b15156200018057600080fd5b60008054600160a060020a031916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600030600160a060020a031683600160a060020a03161415620001f257506001620002fb565b600154600160a060020a03848116911614156200021257506001620002fb565b600054600160a060020a031615156200022e57506000620002fb565b60008054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015230811660248301527fffffffff00000000000000000000000000000000000000000000000000000000871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b158015620002ca57600080fd5b505af1158015620002df573d6000803e3d6000fd5b505050506040513d6020811015620002f657600080fd5b505190505b92915050565b604051610500806200192683390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200035557805160ff191683800117855562000385565b8280016001018555821562000385579182015b828111156200038557825182559160200191906001019062000368565b506200039392915062000397565b5090565b620003b491905b808211156200039357600081556001016200039e565b90565b61155f80620003c76000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461015957806307da68f5146101e3578063095ea7b3146101f857806313af40351461023057806318160ddd146102515780631a71d3db1461027857806323b872dd146102995780632acd2000146102c3578063313ce567146102e457806351c3b8a61461030f578063526606c91461033c57806370a082311461035d57806375f12b211461037e57806378b83360146103935780637a9e5e4b146103d85780638da5cb5b146103f957806395d89b411461042a578063a9059cbb1461043f578063b8a1fdb614610463578063be9a655514610493578063bf7e214f146104a8578063c47f0027146104bd578063c783fb1014610516578063dd62ed3e14610537578063ed8a9c0f1461055e575b34801561015457600080fd5b50fe5b005b34801561016557600080fd5b5061016e61057f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a8578181015183820152602001610190565b50505050905090810190601f1680156101d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ef57600080fd5b5061015761060a565b34801561020457600080fd5b5061021c600160a060020a03600435166024356106ad565b604080519115158252519081900360200190f35b34801561023c57600080fd5b50610157600160a060020a0360043516610785565b34801561025d57600080fd5b50610266610803565b60408051918252519081900360200190f35b34801561028457600080fd5b50610266600160a060020a036004351661080a565b3480156102a557600080fd5b5061021c600160a060020a0360043581169060243516604435610825565b3480156102cf57600080fd5b50610157600160a060020a03600435166109a6565b3480156102f057600080fd5b506102f9610a46565b6040805160ff9092168252519081900360200190f35b34801561031b57600080fd5b50610157600160a060020a036004351660243560443560ff60643516610a4f565b34801561034857600080fd5b50610157600160a060020a0360043516610b85565b34801561036957600080fd5b50610266600160a060020a0360043516610c0a565b34801561038a57600080fd5b5061021c610c25565b34801561039f57600080fd5b506103b7600160a060020a0360043516602435610c35565b60408051938452602084019290925260ff1682820152519081900360600190f35b3480156103e457600080fd5b50610157600160a060020a0360043516610cfb565b34801561040557600080fd5b5061040e610d75565b60408051600160a060020a039092168252519081900360200190f35b34801561043657600080fd5b5061016e610d84565b34801561044b57600080fd5b5061021c600160a060020a0360043516602435610ddf565b34801561046f57600080fd5b5061021c600160a060020a036004351660243560443560643560ff60843516610eec565b34801561049f57600080fd5b50610157610f64565b3480156104b457600080fd5b5061040e611001565b3480156104c957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101579436949293602493928401919081908401838280828437509497506110109650505050505050565b34801561052257600080fd5b50610266600160a060020a0360043516611048565b34801561054357600080fd5b50610266600160a060020a0360043581169060243516611160565b34801561056a57600080fd5b50610157600160a060020a036004351661118b565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106025780601f106105d757610100808354040283529160200191610602565b820191906000526020600020905b8154815290600101906020018083116105e557829003601f168201915b505050505081565b61062033600035600160e060020a0319166112e7565b151561062b57600080fd5b6040805134808252602082018381523693830184905260043593602435938493869333600160a060020a03169360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506001805474ff0000000000000000000000000000000000000000191660a060020a179055565b60015460009060a060020a900460ff16156106c757600080fd5b60443610156106d557600080fd5b8115806107055750600160a060020a03338116600090815260076020908152604080832093871683529290522054155b151561071057600080fd5b600554821061071e57600080fd5b600160a060020a03338116600081815260076020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b61079b33600035600160e060020a0319166112e7565b15156107a657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b6005545b90565b600160a060020a031660009081526008602052604090205490565b600154600090819060a060020a900460ff161561084157600080fd5b600554831061084f57600080fd5b600160a060020a038086166000908152600760209081526040808320339094168352929052205483111561088257600080fd5b61088b8561118b565b61089485611048565b9050828110156108a357600080fd5b600160a060020a03808616600090815260076020908152604080832033909416835292905220546108d490846113f9565b600160a060020a03808716600081815260076020908152604080832033909516835293815283822094909455908152600690925290205461091590846113f9565b600160a060020a0380871660009081526006602052604080822093909355908616815220546109449084611409565b600160a060020a0380861660008181526006602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b6109bc33600035600160e060020a0319166112e7565b15156109c757600080fd5b60008054604080517f2acd2000000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291519190921692632acd2000926024808201939182900301818387803b158015610a2b57600080fd5b505af1158015610a3f573d6000803e3d6000fd5b5050505050565b60045460ff1681565b6000610a59611419565b610a6f33600035600160e060020a0319166112e7565b1515610a7a57600080fd5b60015460a060020a900460ff1615610a9157600080fd5b428511610a9d57600080fd5b6005548410610aab57600080fd5b610ab48661118b565b610abd86611048565b915083821015610acc57600080fd5b5060408051606081018252858152602080820186815260ff868116848601818152600160a060020a038c1660008181526008875288812080546001808201835591835291889020895160039093020191825595519581019590955590516002909401805460ff19169490931693909317909155845189815292830188905284519394909391927f8353c9c8e6b29f14bab2183a16c2ffce362ad474a75fc1adfd390a554a9532d2929081900390910190a3505050505050565b610b9b33600035600160e060020a0319166112e7565b1515610ba657600080fd5b60008054604080517f526606c9000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169263526606c9926024808201939182900301818387803b158015610a2b57600080fd5b600160a060020a031660009081526006602052604090205490565b60015460a060020a900460ff1681565b600160a060020a038216600090815260086020526040812080548291829185908110610c5d57fe5b60009182526020808320600390920290910154600160a060020a038816835260089091526040909120805486908110610c9257fe5b9060005260206000209060030201600101546008600088600160a060020a0316600160a060020a0316815260200190815260200160002086815481101515610cd657fe5b6000918252602090912060026003909202010154919450925060ff1690509250925092565b610d1133600035600160e060020a0319166112e7565b1515610d1c57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600154600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106025780601f106105d757610100808354040283529160200191610602565b600154600090819060a060020a900460ff1615610dfb57600080fd5b6044361015610e0957600080fd5b6005548310610e1757600080fd5b610e203361118b565b610e2933611048565b905082811015610e3857600080fd5b600160a060020a033316600090815260066020526040902054610e5b90846113f9565b600160a060020a033381166000908152600660205260408082209390935590861681522054610e8a9084611409565b600160a060020a038086166000818152600660209081526040918290209490945580518781529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b6000610f0433600035600160e060020a0319166112e7565b1515610f0f57600080fd5b60015460a060020a900460ff1615610f2657600080fd5b6005548510610f3457600080fd5b84841115610f4157600080fd5b610f4b8686610ddf565b50610f5886848685610a4f565b50600195945050505050565b610f7a33600035600160e060020a0319166112e7565b1515610f8557600080fd5b6040805134808252602082018381523693830184905260043593602435938493869333600160a060020a03169360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506001805474ff000000000000000000000000000000000000000019169055565b600054600160a060020a031681565b61102633600035600160e060020a0319166112e7565b151561103157600080fd5b805161104490600290602084019061143e565b5050565b6000606060008060006008600087600160a060020a0316600160a060020a03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156110e55760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015460ff16918301919091529083529092019101611096565b505050509350835192506110f886610c0a565b9150600090505b828110156111575742848281518110151561111657fe5b6020908102909101015151111561114f5761114c82858381518110151561113957fe5b90602001906020020151602001516113f9565b91505b6001016110ff565b50949350505050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600160a060020a038116600090815260086020526040812080549091805b828210156111e6574284838154811015156111c057fe5b6000918252602090912060039091020154116111db576111e6565b6001909101906111a9565b50600181015b82821080156111fa57508281105b156112995742848281548110151561120e57fe5b906000526020600020906003020160000154111561129157838181548110151561123457fe5b9060005260206000209060030201848381548110151561125057fe5b6000918252602090912082546003909202019081556001808301548183015560029283015492909101805460ff191660ff9093169290921790915591909101905b6001016111ec565b828214610a3f57816112ab85826114bc565b50604051600160a060020a038616907f1349c273832f298de87bb3ef2d605b440b294c028baee20ea8711724452fde8590600090a25050505050565b600030600160a060020a031683600160a060020a0316141561130b5750600161077f565b600154600160a060020a03848116911614156113295750600161077f565b600054600160a060020a031615156113435750600061077f565b60008054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301523081166024830152600160e060020a0319871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d60208110156113f057600080fd5b5051905061077f565b8082038281111561077f57600080fd5b8082018281101561077f57600080fd5b6060604051908101604052806000815260200160008152602001600060ff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061147f57805160ff19168380011785556114ac565b828001600101855582156114ac579182015b828111156114ac578251825591602001919060010190611491565b506114b89291506114ed565b5090565b8154818355818111156114e8576003028160030283600052602060002091820191016114e89190611507565b505050565b61080791905b808211156114b857600081556001016114f3565b61080791905b808211156114b8576000808255600182015560028101805460ff1916905560030161150d5600a165627a7a723058209521b12b8d22fadf39c10df98bf5d8dd5b3a5a2c8eae97c9704f0b90dd4d1ecf0029608060405234801561001057600080fd5b506104e0806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632acd20008114610066578063526606c9146100895780636c65fd6a146100aa578063b7009613146100df575b600080fd5b34801561007257600080fd5b50610087600160a060020a0360043516610128565b005b34801561009557600080fd5b50610087600160a060020a036004351661022c565b3480156100b657600080fd5b506100cb600160a060020a03600435166102f7565b604080519115158252519081900360200190f35b3480156100eb57600080fd5b506100cb600160a060020a03600435811690602435167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960443516610364565b60008061018f600080548060200260200160405190810160405280929190818152602001828054801561018457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610166575b505050505084610419565b9150600082126102275750805b600054600019018110156102125760008054600183019081106101bb57fe5b60009182526020822001548154600160a060020a039091169190839081106101df57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061019c565b6000805490610225906000198301610474565b505b505050565b6000610292600080548060200260200160405190810160405280929190818152602001828054801561028757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610269575b505050505083610419565b905060008112156102f357600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b5050565b60008061035c600080548060200260200160405190810160405280929190818152602001828054801561018457602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161016657505050505084610419565b121592915050565b600061036f846102f7565b801561040157507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f51c3b8a600000000000000000000000000000000000000000000000000000000148061040157507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167fb8a1fdb600000000000000000000000000000000000000000000000000000000145b1561040e57506001610412565b5060005b9392505050565b6000805b83518110156104675782600160a060020a0316848281518110151561043e57fe5b90602001906020020151600160a060020a0316141561045f5780915061046d565b60010161041d565b60001991505b5092915050565b815481835581811115610227576000838152602090206102279181019083016104b191905b808211156104ad5760008155600101610499565b5090565b905600a165627a7a72305820b9403c5140d9968447976a65f006ad3848278d160f758bc867e5561bf311c3cc0029000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000024c4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024c47000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000024c4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024c47000000000000000000000000000000000000000000000000000000000000"
}