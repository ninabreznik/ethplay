{
  "address": "0xb44d36a18b18015c546f5efa37bb1e3db5f24063",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FishFarmer",
  "compilerVersion": "v0.4.24-nightly.2018.5.14+commit.7a669b39",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-18\n*/\n\npragma solidity ^0.4.18; // solhint-disable-line\n\n\ncontract FishFarmer{\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//for final version should be seconds in a day\n    uint256 public STARTING_SHRIMP=300;\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public hatcheryShrimp;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => address) public referrals;\n    uint256 public marketEggs;\n    function FishFarmer() public{\n        ceoAddress=msg.sender;\n    }\n    function hatchEggs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 eggsUsed=getMyEggs();\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        \n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        \n        //boost market to nerf shrimp hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n    }\n    function sellEggs() public{\n        require(initialized);\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        uint256 fee=devFee(eggValue);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n    }\n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function seedMarket(uint256 eggs) public payable{\n        require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n    }\n    function getFreeShrimp() public{\n        require(initialized);\n        require(hatcheryShrimp[msg.sender]==0);\n        lastHatch[msg.sender]=now;\n        hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyShrimp() public view returns(uint256){\n        return hatcheryShrimp[msg.sender];\n    }\n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526201518060005561012c6001556127106002556113886003556000600460006101000a81548160ff02191690831515021790555034801561004457600080fd5b5033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112f1806100956000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a0f81681461013857806312065fe01461018f578063158ef93e146101ba578063229824c4146101e957806323b3c7711461023e57806326fd8422146102555780632e9392bb146102a05780633955f0fe146102cb5780633b653755146102e25780633bc0461a146103025780633ec862a81461034357806343ce742214610386578063467ece79146103b15780634f74acfe146104085780637267036114610412578063732e77d0146104695780637e2cb974146104945780637e56fde5146104eb5780638e3163271461052c5780639ca423b31461056d578063c2127e03146105f0578063d7c8843b1461061b578063fb05594f14610672575b600080fd5b34801561014457600080fd5b5061014d61069d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019b57600080fd5b506101a46106c3565b6040518082815260200191505060405180910390f35b3480156101c657600080fd5b506101cf6106e2565b604051808215151515815260200191505060405180910390f35b3480156101f557600080fd5b506102286004803603810190808035906020019092919080359060200190929190803590602001909291905050506106f5565b6040518082815260200191505060405180910390f35b34801561024a57600080fd5b50610253610748565b005b34801561026157600080fd5b5061028a600480360381019080803590602001909291908035906020019092919050505061083d565b6040518082815260200191505060405180910390f35b3480156102ac57600080fd5b506102b5610854565b6040518082815260200191505060405180910390f35b3480156102d757600080fd5b506102e061085a565b005b610300600480360381019080803590602001909291905050506109f3565b005b34801561030e57600080fd5b5061032d60048036038101908080359060200190929190505050610a29565b6040518082815260200191505060405180910390f35b34801561034f57600080fd5b50610384600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a47565b005b34801561039257600080fd5b5061039b610e9b565b6040518082815260200191505060405180910390f35b3480156103bd57600080fd5b506103f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ef3565b6040518082815260200191505060405180910390f35b610410610f0b565b005b34801561041e57600080fd5b50610453600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611068565b6040518082815260200191505060405180910390f35b34801561047557600080fd5b5061047e611080565b6040518082815260200191505060405180910390f35b3480156104a057600080fd5b506104d5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611086565b6040518082815260200191505060405180910390f35b3480156104f757600080fd5b506105166004803603810190808035906020019092919050505061109e565b6040518082815260200191505060405180910390f35b34801561053857600080fd5b50610557600480360381019080803590602001909291905050506110c8565b6040518082815260200191505060405180910390f35b34801561057957600080fd5b506105ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110f5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105fc57600080fd5b50610605611128565b6040518082815260200191505060405180910390f35b34801561062757600080fd5b5061065c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061116f565b6040518082815260200191505060405180910390f35b34801561067e57600080fd5b50610687611219565b6040518082815260200191505060405180910390f35b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600460009054906101000a900460ff1681565b600061073f6107066002548461121f565b61073a60035461073561072f61071e6002548a61121f565b61072a6003548c61121f565b61125a565b89611278565b61125a565b611278565b90509392505050565b600460009054906101000a900460ff16151561076357600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156107b157600080fd5b42600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600154600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600061084c83836009546106f5565b905092915050565b60095481565b6000806000600460009054906101000a900460ff16151561087a57600080fd5b610882610e9b565b925061088d836110c8565b915061089882610a29565b90506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061092f6009548461125a565b600981905550600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561099d573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166108fc6109c28484611293565b9081150290604051600060405180830381858888f193505050501580156109ed573d6000803e3d6000fd5b50505050565b6000600954141515610a0457600080fd5b6001600460006101000a81548160ff0219169083151502179055508060098190555050565b6000610a40610a3983600461121f565b6064611278565b9050919050565b600080600460009054906101000a900460ff161515610a6557600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610b7557503373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610bf95782600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610c01610e9b565b9150610c0f82600054611278565b9050610c5a600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261125a565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dd860066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dd3846005611278565b61125a565b60066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e90600954610e8b84600a611278565b61125a565b600981905550505050565b6000610eee600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ee93361116f565b61125a565b905090565b60076020528060005260406000206000915090505481565b6000600460009054906101000a900460ff161515610f2857600080fd5b610f5234610f4d3073ffffffffffffffffffffffffffffffffffffffff163134611293565b61083d565b9050610f6681610f6183610a29565b611293565b9050600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc610fad34610a29565b9081150290604051600060405180830381858888f19350505050158015610fd8573d6000803e3d6000fd5b50611022600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261125a565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60066020528060005260406000206000915090505481565b60005481565b60056020528060005260406000206000915090505481565b60006110c1823073ffffffffffffffffffffffffffffffffffffffff163161083d565b9050919050565b60006110ee826009543073ffffffffffffffffffffffffffffffffffffffff16316106f5565b9050919050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000806111c66000546111c142600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611293565b6112ac565b905061121181600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461121f565b915050919050565b60015481565b60008060008414156112345760009150611253565b828402905082848281151561124557fe5b0414151561124f57fe5b8091505b5092915050565b600080828401905083811015151561126e57fe5b8091505092915050565b600080828481151561128657fe5b0490508091505092915050565b60008282111515156112a157fe5b818303905092915050565b60008183106112bb57816112bd565b825b9050929150505600a165627a7a72305820eefb1872e1fd49247c6d23dad3b1d8853fb76900cb7d154008a5032760e205eb0029"
}