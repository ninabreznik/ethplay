{
  "address": "0x4f2e42e35f8bf1ab1ec0509b6d481dacc933eadf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ParetoTreasuryLockup",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-01\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n/**\n * @title ParetoTreasuryLockup\n * @dev ParetoTreasuryLockup is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract ParetoTreasuryLockup {\n  using SafeERC20 for ERC20Basic;\n  using SafeMath for uint256;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n  \n  uint256 public month = 30 days;\n\n  uint256 public maxThreshold = 0;\n\n  function ParetoTreasuryLockup()public {\n    token = ERC20Basic(0xea5f88E54d982Cbb0c441cde4E79bC305e5b43Bc);\n    beneficiary = 0x005d85FE4fcf44C95190Cad3c1bbDA242A62EEB2;\n    releaseTime = now + month;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() public {\n    require(now >= releaseTime);\n    \n    uint diff = now - releaseTime;\n    if (diff > month){\n        releaseTime = now;\n    }else{\n        releaseTime = now.add(month.sub(diff));\n    }\n    \n    if(maxThreshold == 0){\n        \n        uint256 amount = token.balanceOf(this);\n        require(amount > 0);\n        \n        // calculate 5% of existing amount\n        maxThreshold = (amount.mul(5)).div(100);\n    }\n\n    token.safeTransfer(beneficiary, maxThreshold);\n    \n  }\n}",
  "bytecode": "606060405262278d006003556000600455341561001b57600080fd5b60008054600160a060020a031990811673ea5f88e54d982cbb0c441cde4e79bc305e5b43bc1790915560018054909116725d85fe4fcf44c95190cad3c1bbda242a62eeb21790556003544201600255610388806100796000396000f30060606040526004361061005e5763ffffffff60e060020a6000350416632e9501d6811461006357806338af3eed14610088578063702921f5146100b757806386d1a69f146100ca578063b91d4001146100df578063fc0c546a146100f2575b600080fd5b341561006e57600080fd5b610076610105565b60405190815260200160405180910390f35b341561009357600080fd5b61009b61010b565b604051600160a060020a03909116815260200160405180910390f35b34156100c257600080fd5b61007661011a565b34156100d557600080fd5b6100dd610120565b005b34156100ea57600080fd5b610076610254565b34156100fd57600080fd5b61009b61025a565b60045481565b600154600160a060020a031681565b60035481565b600080600254421015151561013457600080fd5b6002544203915060035482111561014e5742600255610176565b60035461017290610165908463ffffffff61026916565b429063ffffffff61027b16565b6002555b60045415156102295760008054600160a060020a0316906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156101da57600080fd5b6102c65a03f115156101eb57600080fd5b50505060405180519150506000811161020357600080fd5b610225606461021983600563ffffffff61029516565b9063ffffffff6102c016565b6004555b60015460045460005461025092600160a060020a039182169291169063ffffffff6102d716565b5050565b60025481565b600054600160a060020a031681565b60008282111561027557fe5b50900390565b60008282018381101561028a57fe5b8091505b5092915050565b6000808315156102a8576000915061028e565b508282028284828115156102b857fe5b041461028a57fe5b60008082848115156102ce57fe5b04949350505050565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561033457600080fd5b6102c65a03f1151561034557600080fd5b50505060405180519050151561035757fe5b5050505600a165627a7a72305820afaff7e9d4e634683ae2971ce55ae374e848321b216430f8f8931b6b77812ffa0029"
}