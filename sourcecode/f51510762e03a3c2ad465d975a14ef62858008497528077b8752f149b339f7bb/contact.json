{
  "address": "0x0af44e2784637218dd1d32a322d44e603a8f0c6a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Matryx Token",
  "contractName": "MatryxToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-06\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is Ownable {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function transfer(address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * Define interface for releasing the token transfer after a successful crowdsale.\n */\ncontract ReleasableToken is StandardToken {\n\n  /* The finalizer contract that allows unlift the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   *\n   */\n  modifier canTransfer(address _sender) {\n    require(released || transferAgents[_sender]);\n    _;\n  }\n\n  /** The function can be called only before or after the tokens have been releasesd */\n  modifier inReleaseState(bool releaseState) {\n    require(releaseState == released);\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    require(msg.sender == releaseAgent);\n    _;\n  }\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n    releaseAgent = addr;\n  }\n\n  /**\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    transferAgents[addr] = state;\n  }\n\n  /**\n   * One way function to release the tokens to the wild.\n   *\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    released = true;\n  }\n\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n    // Call StandardToken.transfer()\n   return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n    // Call StandardToken.transferForm()\n    return super.transferFrom(_from, _to, _value);\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is ReleasableToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n/**\n * Upgrade agent interface inspired by Lunyr.\n *\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  /** Interface marker */\n  function isUpgradeAgent() public constant returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\ncontract UpgradeableToken is StandardToken {\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint256 public totalUpgraded;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  function UpgradeableToken(address _upgradeMaster) {\n    upgradeMaster = _upgradeMaster;\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint256 value) public {\n\n      UpgradeState state = getUpgradeState();\n      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n        // Called in a bad state\n        throw;\n      }\n\n      // Validate input value.\n      if (value == 0) throw;\n\n      balances[msg.sender] = balances[msg.sender].sub(value);\n\n      // Take tokens out from circulation\n      totalSupply = totalSupply.sub(value);\n      totalUpgraded = totalUpgraded.add(value);\n\n      // Upgrade agent reissues the tokens\n      upgradeAgent.upgradeFrom(msg.sender, value);\n      Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles\n   */\n  function setUpgradeAgent(address agent) external {\n\n      if (agent == 0x0) throw;\n      // Only a master can designate the next agent\n      if (msg.sender != upgradeMaster) throw;\n      // Upgrade has already begun for an agent\n      if (getUpgradeState() == UpgradeState.Upgrading) throw;\n\n      upgradeAgent = UpgradeAgent(agent);\n\n      // Bad interface\n      if(!upgradeAgent.isUpgradeAgent()) throw;\n      // Make sure that token supplies match in source and target\n      if (upgradeAgent.originalSupply() != totalSupply) throw;\n\n      UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public constant returns(UpgradeState) {\n    if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function setUpgradeMaster(address master) public {\n      if (master == 0x0) throw;\n      if (msg.sender != upgradeMaster) throw;\n      upgradeMaster = master;\n  }\n\n\n}\n\n/**\n * Matryx Ethereum token.\n */\ncontract MatryxToken is MintableToken, UpgradeableToken{\n\n  string public name = \"MatryxToken\";\n  string public symbol = \"MTX\";\n  uint public decimals = 18;\n\n  // supply upgrade owner as the contract creation account\n  function MatryxToken() UpgradeableToken(msg.sender) {\n\n  }\n}",
  "bytecode": "606060409081526004805460a060020a60ff02191690556006805460ff191690558051908101604052600b81527f4d6174727978546f6b656e00000000000000000000000000000000000000000060208201526009908051620000679291602001906200010c565b5060408051908101604052600381527f4d545800000000000000000000000000000000000000000000000000000000006020820152600a908051620000b19291602001906200010c565b506012600b553415620000c357600080fd5b5b335b5b60008054600160a060020a03191633600160a060020a03161790555b6006805461010060a860020a031916610100600160a060020a038416021790555b505b620001b6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014f57805160ff19168380011785556200017f565b828001600101855582156200017f579182015b828111156200017f57825182559160200191906001019062000162565b5b506200018e92915062000192565b5090565b620001b391905b808211156200018e576000815560010162000199565b5090565b90565b61128f80620001c66000396000f300606060405236156101435763ffffffff60e060020a60003504166302f652a3811461014857806305d2035b1461016e57806306fdde0314610195578063095ea7b31461022057806318160ddd1461025657806323b872dd1461027b57806329ff4f53146102b7578063313ce567146102d857806340c10f19146102fd57806345977d03146103335780635de4ccb01461034b5780635f412d4f1461037a578063600440cb1461038f57806370a08231146103be5780637d64bcb4146103ef5780638444b39114610416578063867c28571461044d5780638da5cb5b1461048057806395d89b41146104af578063961325211461053a578063a9059cbb14610561578063c752ff6214610597578063d1f276d3146105bc578063d7e7088a146105eb578063dd62ed3e1461060c578063f2fde38b14610643578063ffeb7d7514610664575b600080fd5b341561015357600080fd5b61016c600160a060020a03600435166024351515610685565b005b341561017957600080fd5b6101816106e6565b604051901515815260200160405180910390f35b34156101a057600080fd5b6101a86106ef565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e55780820151818401525b6020016101cc565b50505050905090810190601f1680156102125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022b57600080fd5b610181600160a060020a036004351660243561078d565b604051901515815260200160405180910390f35b341561026157600080fd5b610269610834565b60405190815260200160405180910390f35b341561028657600080fd5b610181600160a060020a036004358116906024351660443561083a565b604051901515815260200160405180910390f35b34156102c257600080fd5b61016c600160a060020a0360043516610891565b005b34156102e357600080fd5b6102696108f5565b60405190815260200160405180910390f35b341561030857600080fd5b610181600160a060020a03600435166024356108fb565b604051901515815260200160405180910390f35b341561033e57600080fd5b61016c600435610a03565b005b341561035657600080fd5b61035e610b6e565b604051600160a060020a03909116815260200160405180910390f35b341561038557600080fd5b61016c610b7d565b005b341561039a57600080fd5b61035e610bc0565b604051600160a060020a03909116815260200160405180910390f35b34156103c957600080fd5b610269600160a060020a0360043516610bd4565b60405190815260200160405180910390f35b34156103fa57600080fd5b610181610bf3565b604051901515815260200160405180910390f35b341561042157600080fd5b610429610c50565b6040518082600481111561043957fe5b60ff16815260200191505060405180910390f35b341561045857600080fd5b610181600160a060020a0360043516610c8b565b604051901515815260200160405180910390f35b341561048b57600080fd5b61035e610ca0565b604051600160a060020a03909116815260200160405180910390f35b34156104ba57600080fd5b6101a8610caf565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e55780820151818401525b6020016101cc565b50505050905090810190601f1680156102125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561054557600080fd5b610181610d4d565b604051901515815260200160405180910390f35b341561056c57600080fd5b610181600160a060020a0360043516602435610d5d565b604051901515815260200160405180910390f35b34156105a257600080fd5b610269610db2565b60405190815260200160405180910390f35b34156105c757600080fd5b61035e610db8565b604051600160a060020a03909116815260200160405180910390f35b34156105f657600080fd5b61016c600160a060020a0360043516610dc7565b005b341561061757600080fd5b610269600160a060020a0360043581169060243516610f6d565b60405190815260200160405180910390f35b341561064e57600080fd5b61016c600160a060020a0360043516610f9a565b005b341561066f57600080fd5b61016c600160a060020a0360043516610ff7565b005b60005433600160a060020a039081169116146106a057600080fd5b60045460009060a060020a900460ff16156106ba57600080fd5b600160a060020a0383166000908152600560205260409020805460ff19168315151790555b5b505b5050565b60065460ff1681565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b505050505081565b60008115806107bf5750600160a060020a03338116600090815260036020908152604080832093871683529290522054155b15156107ca57600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60015481565b600454600090849060a060020a900460ff168061086f5750600160a060020a03811660009081526005602052604090205460ff165b151561087a57600080fd5b61088585858561105d565b91505b5b509392505050565b60005433600160a060020a039081169116146108ac57600080fd5b60045460009060a060020a900460ff16156108c657600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b5b505b50565b600b5481565b6000805433600160a060020a0390811691161461091757600080fd5b60065460ff161561092757600080fd5b60015461093a908363ffffffff61117216565b600155600160a060020a038316600090815260026020526040902054610966908363ffffffff61117216565b600160a060020a0384166000818152600260205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b5b92915050565b6000610a0d610c50565b905060035b816004811115610a1e57fe5b1480610a36575060045b816004811115610a3457fe5b145b1515610a4157600080fd5b811515610a4d57600080fd5b600160a060020a033316600090815260026020526040902054610a76908363ffffffff61118c16565b600160a060020a033316600090815260026020526040902055600154610aa2908363ffffffff61118c16565b600155600854610ab8908363ffffffff61117216565b600855600754600160a060020a031663753e88e5338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610b1157600080fd5b6102c65a03f11515610b2257600080fd5b5050600754600160a060020a03908116915033167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac8460405190815260200160405180910390a35b5050565b600754600160a060020a031681565b60045433600160a060020a03908116911614610b9857600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a1790555b5b565b6006546101009004600160a060020a031681565b600160a060020a0381166000908152600260205260409020545b919050565b6000805433600160a060020a03908116911614610c0f57600080fd5b6006805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600754600090600160a060020a03161515610c6d57506002610c4c565b6008541515610c7e57506003610c4c565b506004610c4c565b5b5b90565b60056020526000908152604090205460ff1681565b600054600160a060020a031681565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b505050505081565b60045460a060020a900460ff1681565b600454600090339060a060020a900460ff1680610d925750600160a060020a03811660009081526005602052604090205460ff165b1515610d9d57600080fd5b610da784846111a3565b91505b5b5092915050565b60085481565b600454600160a060020a031681565b600160a060020a0381161515610ddc57600080fd5b60065433600160a060020a039081166101009092041614610dfc57600080fd5b60045b610e07610c50565b6004811115610e1257fe5b1415610e1d57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055166361d3d7a66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610e8857600080fd5b6102c65a03f11515610e9957600080fd5b505050604051805190501515610eae57600080fd5b600154600754600160a060020a0316634b2ba0dd6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ef957600080fd5b6102c65a03f11515610f0a57600080fd5b50505060405180519050141515610f2057600080fd5b6007547f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc90600160a060020a0316604051600160a060020a03909116815260200160405180910390a15b50565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b92915050565b60005433600160a060020a03908116911614610fb557600080fd5b600160a060020a0381161515610fca57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600160a060020a038116151561100c57600080fd5b60065433600160a060020a03908116610100909204161461102c57600080fd5b6006805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a038416021790555b50565b600160a060020a0380841660009081526003602090815260408083203385168452825280832054938616835260029091528120549091906110a4908463ffffffff61117216565b600160a060020a0380861660009081526002602052604080822093909355908716815220546110d9908463ffffffff61118c16565b600160a060020a038616600090815260026020526040902055611102818463ffffffff61118c16565b600160a060020a03808716600081815260036020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b60008282018381101561118157fe5b8091505b5092915050565b60008282111561119857fe5b508082035b92915050565b600160a060020a0333166000908152600260205260408120546111cc908363ffffffff61118c16565b600160a060020a033381166000908152600260205260408082209390935590851681522054611201908363ffffffff61117216565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b929150505600a165627a7a723058208a2c9e4cdbb6754ac7da375bf16447178430b3a69f2ca23858f097bf2e1eeca70029"
}