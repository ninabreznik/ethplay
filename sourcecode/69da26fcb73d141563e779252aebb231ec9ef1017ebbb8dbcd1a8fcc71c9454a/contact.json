{
  "address": "0x2b4dd5851da6e7ea0bc2d2c814c229abecf5dc80",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-24\n*/\n\npragma solidity ^0.4.21;\n\n// Project: MOBU.io\n// v12, 2018-08-24\n// This code is the property of CryptoB2B.io\n// Copying in whole or in part is prohibited.\n// Authors: Ivan Fedorov and Dmitry Borodin\n// Do you want the same TokenSale platform? www.cryptob2b.io\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b>=a) return 0;\n        return a - b;\n    }\n}\n\ncontract MigrationAgent\n{\n    function migrateFrom(address _from, uint256 _value) public;\n}\n\ncontract ICreator{\n    IRightAndRoles public rightAndRoles;\n    function createAllocation(IToken _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (IAllocation);\n    function createFinancialStrategy() external returns(IFinancialStrategy);\n    function getRightAndRoles() external returns(IRightAndRoles);\n}\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract GuidedByRoles {\n    IRightAndRoles public rightAndRoles;\n    function GuidedByRoles(IRightAndRoles _rightAndRoles) public {\n        rightAndRoles = _rightAndRoles;\n    }\n}\n\ncontract Pausable is GuidedByRoles {\n\n    mapping (address => bool) public unpausedWallet;\n\n    event Pause();\n    event Unpause();\n\n    bool public paused = true;\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused(address _to) {\n        require(!paused||unpausedWallet[msg.sender]||unpausedWallet[_to]);\n        _;\n    }\n\n    function onlyAdmin() internal view {\n        require(rightAndRoles.onlyRoles(msg.sender,3));\n    }\n\n    // Add a wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\n    function setUnpausedWallet(address _wallet, bool mode) public {\n        onlyAdmin();\n        unpausedWallet[_wallet] = mode;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function setPause(bool mode)  public {\n        require(rightAndRoles.onlyRoles(msg.sender,1));\n        if (!paused && mode) {\n            paused = true;\n            emit Pause();\n        }else\n        if (paused && !mode) {\n            paused = false;\n            emit Unpause();\n        }\n    }\n\n}\n\ncontract ERC20Provider is GuidedByRoles {\n    function transferTokens(ERC20Basic _token, address _to, uint256 _value) public returns (bool){\n        require(rightAndRoles.onlyRoles(msg.sender,2));\n        return _token.transfer(_to,_value);\n    }\n}\n\ncontract IRightAndRoles {\n    address[][] public wallets;\n    mapping(address => uint16) public roles;\n\n    event WalletChanged(address indexed newWallet, address indexed oldWallet, uint8 indexed role);\n    event CloneChanged(address indexed wallet, uint8 indexed role, bool indexed mod);\n\n    function changeWallet(address _wallet, uint8 _role) external;\n    function setManagerPowerful(bool _mode) external;\n    function onlyRoles(address _sender, uint16 _roleMask) view external returns(bool);\n}\n\ncontract IToken{\n    function setUnpausedWallet(address _wallet, bool mode) public;\n    function mint(address _to, uint256 _amount) public returns (bool);\n    function totalSupply() public view returns (uint256);\n    function setPause(bool mode) public;\n    function setMigrationAgent(address _migrationAgent) public;\n    function migrateAll(address[] _holders) public;\n    function markTokens(address _beneficiary, uint256 _value) public;\n    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount);\n    function defrostDate(address _beneficiary) public view returns (uint256 Date);\n    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public;\n}\n\ncontract IFinancialStrategy{\n\n    enum State { Active, Refunding, Closed }\n    State public state = State.Active;\n\n    event Deposited(address indexed beneficiary, uint256 weiAmount);\n    event Receive(address indexed beneficiary, uint256 weiAmount);\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\n    event Started();\n    event Closed();\n    event RefundsEnabled();\n    function freeCash() view public returns(uint256);\n    function deposit(address _beneficiary) external payable;\n    function refund(address _investor) external;\n    function setup(uint8 _state, bytes32[] _params) external;\n    function getBeneficiaryCash() external;\n    function getPartnerCash(uint8 _user, address _msgsender) external;\n}\n\ncontract IAllocation {\n    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) external;\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\ncontract KycToken is BasicToken, GuidedByRoles {\n\n    event TokensMarked(address indexed beneficiary, uint256 value);\n\n    function markTokens(address _beneficiary, uint256 _value) public {\n        require(rightAndRoles.onlyRoles(msg.sender,1));\n        require(_value <= balances[_beneficiary]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_beneficiary] = balances[_beneficiary].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit TokensMarked(_beneficiary, _value);\n        emit Transfer(_beneficiary, address(0), _value);\n    }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\ncontract FreezingToken is PausableToken {\n    struct freeze {\n    uint256 amount;\n    uint256 when;\n    }\n\n\n    mapping (address => freeze) freezedTokens;\n\n    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount){\n        freeze storage _freeze = freezedTokens[_beneficiary];\n        if(_freeze.when < now) return 0;\n        return _freeze.amount;\n    }\n\n    function defrostDate(address _beneficiary) public view returns (uint256 Date) {\n        freeze storage _freeze = freezedTokens[_beneficiary];\n        if(_freeze.when < now) return 0;\n        return _freeze.when;\n    }\n\n    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public {\n        require(rightAndRoles.onlyRoles(msg.sender,1));\n        freeze storage _freeze = freezedTokens[_beneficiary];\n        _freeze.amount = _amount;\n        _freeze.when = _when;\n    }\n\n    function masFreezedTokens(address[] _beneficiary, uint256[] _amount, uint256[] _when) public {\n        onlyAdmin();\n        require(_beneficiary.length == _amount.length && _beneficiary.length == _when.length);\n        for(uint16 i = 0; i < _beneficiary.length; i++){\n            require(_when[i] < 1557486000); //TODO - check\n            freeze storage _freeze = freezedTokens[_beneficiary[i]];\n            _freeze.amount = _amount[i];\n            _freeze.when = _when[i];\n        }\n    }\n\n\n    function transferAndFreeze(address _to, uint256 _value, uint256 _when) external {\n        require(unpausedWallet[msg.sender]);\n        require(freezedTokenOf(_to) == 0);\n        if(_when > 0){\n            freeze storage _freeze = freezedTokens[_to];\n            _freeze.amount = _value;\n            _freeze.when = _when;\n        }\n        transfer(_to,_value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(balanceOf(msg.sender) >= freezedTokenOf(msg.sender).add(_value));\n        return super.transfer(_to,_value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(balanceOf(_from) >= freezedTokenOf(_from).add(_value));\n        return super.transferFrom( _from,_to,_value);\n    }\n}\n\ncontract MintableToken is StandardToken, GuidedByRoles {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) public returns (bool) {\n        require(rightAndRoles.onlyRoles(msg.sender,1));\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n}\n\ncontract MigratableToken is BasicToken,GuidedByRoles {\n\n    uint256 public totalMigrated;\n    address public migrationAgent;\n\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n\n    function setMigrationAgent(address _migrationAgent) public {\n        require(rightAndRoles.onlyRoles(msg.sender,6));\n        require(totalMigrated == 0);\n        migrationAgent = _migrationAgent;\n    }\n\n\n    function migrateInternal(address _holder) internal{\n        require(migrationAgent != 0x0);\n\n        uint256 value = balances[_holder];\n        balances[_holder] = 0;\n\n        totalSupply_ = totalSupply_.sub(value);\n        totalMigrated = totalMigrated.add(value);\n\n        MigrationAgent(migrationAgent).migrateFrom(_holder, value);\n        emit Migrate(_holder,migrationAgent,value);\n    }\n\n    function migrateAll(address[] _holders) public {\n        require(rightAndRoles.onlyRoles(msg.sender,6));\n        for(uint i = 0; i < _holders.length; i++){\n            migrateInternal(_holders[i]);\n        }\n    }\n\n    // Reissue your tokens.\n    function migrate() public\n    {\n        require(balances[msg.sender] > 0);\n        migrateInternal(msg.sender);\n    }\n\n}\n\ncontract Token is IToken, FreezingToken, MintableToken, MigratableToken, KycToken,ERC20Provider {\n    function Token(ICreator _creator) GuidedByRoles(_creator.rightAndRoles()) public {}\n    string public constant name = \"MOBU token\";\n    string public constant symbol = \"MOBU\";\n    uint8 public constant decimals = 18;\n}",
  "bytecode": "60806040526005805460ff1916600117905534801561001d57600080fd5b506040516020806119bf83398101604081815291517f61cdd2dc0000000000000000000000000000000000000000000000000000000082529151600160a060020a038316916361cdd2dc9160048083019260209291908290030181600087803b15801561008957600080fd5b505af115801561009d573d6000803e3d6000fd5b505050506040513d60208110156100b357600080fd5b505160038054600160a060020a031916600160a060020a03909216919091179055506118db806100e46000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610179578063095ea7b31461020357806311cfb19d1461023b57806318160ddd1461026e57806323b872dd1461028357806324db1f50146102ad578063264282f214610376578063313ce5671461039a57806340c10f19146103c557806350bb117a146103e95780635c975abb1461040a57806361cdd2dc1461041f5780636618846314610450578063680b3bdf1461047457806370a08231146104c957806375e2ff65146104ea5780638328dbcd1461050b578063852e9f46146105205780638fd3ab801461054757806395a0f5eb1461055c57806395d89b4114610571578063a64b6e5f14610586578063a9059cbb146105b0578063b3e1f523146105d4578063b8b3db4f146105fa578063bedb86fb1461061b578063d73dd62314610635578063dd62ed3e14610659578063f831ebab14610680575b600080fd5b34801561018557600080fd5b5061018e6106a7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c85781810151838201526020016101b0565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020f57600080fd5b50610227600160a060020a03600435166024356106de565b604080519115158252519081900360200190f35b34801561024757600080fd5b5061025c600160a060020a0360043516610744565b60408051918252519081900360200190f35b34801561027a57600080fd5b5061025c61077c565b34801561028f57600080fd5b50610227600160a060020a0360043581169060243516604435610782565b3480156102b957600080fd5b506040805160206004803580820135838102808601850190965280855261037495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506107c49650505050505050565b005b34801561038257600080fd5b50610374600160a060020a03600435166024356108c1565b3480156103a657600080fd5b506103af610a3e565b6040805160ff9092168252519081900360200190f35b3480156103d157600080fd5b50610227600160a060020a0360043516602435610a43565b3480156103f557600080fd5b5061025c600160a060020a0360043516610b97565b34801561041657600080fd5b50610227610bce565b34801561042b57600080fd5b50610434610bd7565b60408051600160a060020a039092168252519081900360200190f35b34801561045c57600080fd5b50610227600160a060020a0360043516602435610be6565b34801561048057600080fd5b506040805160206004803580820135838102808601850190965280855261037495369593946024949385019291829185019084908082843750949750610cd69650505050505050565b3480156104d557600080fd5b5061025c600160a060020a0360043516610d9c565b3480156104f657600080fd5b50610374600160a060020a0360043516610db7565b34801561051757600080fd5b50610434610e81565b34801561052c57600080fd5b50610374600160a060020a0360043516602435604435610e90565b34801561055357600080fd5b50610374610ef8565b34801561056857600080fd5b5061025c610f1d565b34801561057d57600080fd5b5061018e610f23565b34801561059257600080fd5b50610227600160a060020a0360043581169060243516604435610f5a565b3480156105bc57600080fd5b50610227600160a060020a0360043516602435611097565b3480156105e057600080fd5b50610374600160a060020a036004351660243515156110cb565b34801561060657600080fd5b50610227600160a060020a03600435166110fe565b34801561062757600080fd5b506103746004351515611113565b34801561064157600080fd5b50610227600160a060020a036004351660243561123d565b34801561066557600080fd5b5061025c600160a060020a03600435811690602435166112d6565b34801561068c57600080fd5b50610374600160a060020a0360043516602435604435611301565b60408051808201909152600a81527f4d4f425520746f6b656e00000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a038116600090815260066020526040812060018101544211156107715760009150610776565b805491505b50919050565b60015490565b600061079d8261079186610744565b9063ffffffff6113b116565b6107a685610d9c565b10156107b157600080fd5b6107bc8484846113c0565b949350505050565b6000806107cf611428565b835185511480156107e1575082518551145b15156107ec57600080fd5b600091505b84518261ffff1610156108ba57635cd559b0838361ffff1681518110151561081557fe5b602090810290910101511061082957600080fd5b60066000868461ffff1681518110151561083f57fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000209050838261ffff1681518110151561087d57fe5b6020908102909101015181558251839061ffff841690811061089b57fe5b90602001906020020151816001018190555081806001019250506107f1565b5050505050565b6003546040805160e160020a6358bc917b028152336004820152600160248201529051600160a060020a039092169163b17922f6916044808201926020929091908290030181600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b505050506040513d602081101561094257600080fd5b5051151561094f57600080fd5b600160a060020a03821660009081526020819052604090205481111561097457600080fd5b600160a060020a03821660009081526020819052604090205461099d908263ffffffff6114b616565b600160a060020a0383166000908152602081905260409020556001546109c9908263ffffffff6114b616565b600155604080518281529051600160a060020a038416917fbfea4ae087612ecb3372f21089f26aee5227a2010f2b6594cf69796639b16339919081900360200190a2604080518281529051600091600160a060020a038516916000805160206118908339815191529181900360200190a35050565b601281565b6003546040805160e160020a6358bc917b028152336004820152600160248201529051600092600160a060020a03169163b17922f691604480830192602092919082900301818787803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050506040513d6020811015610ac357600080fd5b50511515610ad057600080fd5b600154610ae3908363ffffffff6113b116565b600155600160a060020a038316600090815260208190526040902054610b0f908363ffffffff6113b116565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206118908339815191529181900360200190a350600192915050565b600160a060020a03811660009081526006602052604081206001810154421115610bc45760009150610776565b6001015492915050565b60055460ff1681565b600354600160a060020a031681565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610c3b57336000908152600260209081526040808320600160a060020a0388168452909152812055610c70565b610c4b818463ffffffff6114b616565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6003546040805160e160020a6358bc917b028152336004820152600660248201529051600092600160a060020a03169163b17922f691604480830192602092919082900301818787803b158015610d2c57600080fd5b505af1158015610d40573d6000803e3d6000fd5b505050506040513d6020811015610d5657600080fd5b50511515610d6357600080fd5b5060005b8151811015610d9857610d908282815181101515610d8157fe5b906020019060200201516114c8565b600101610d67565b5050565b600160a060020a031660009081526020819052604090205490565b6003546040805160e160020a6358bc917b028152336004820152600660248201529051600160a060020a039092169163b17922f6916044808201926020929091908290030181600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b505050506040513d6020811015610e3857600080fd5b50511515610e4557600080fd5b60075415610e5257600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600854600160a060020a031681565b3360009081526004602052604081205460ff161515610eae57600080fd5b610eb784610744565b15610ec157600080fd5b6000821115610eee5750600160a060020a0383166000908152600660205260409020828155600181018290555b6108ba8484611097565b3360009081526020819052604081205411610f1257600080fd5b610f1b336114c8565b565b60075481565b60408051808201909152600481527f4d4f425500000000000000000000000000000000000000000000000000000000602082015281565b6003546040805160e160020a6358bc917b028152336004820152600260248201529051600092600160a060020a03169163b17922f691604480830192602092919082900301818787803b158015610fb057600080fd5b505af1158015610fc4573d6000803e3d6000fd5b505050506040513d6020811015610fda57600080fd5b50511515610fe757600080fd5b83600160a060020a031663a9059cbb84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561106357600080fd5b505af1158015611077573d6000803e3d6000fd5b505050506040513d602081101561108d57600080fd5b5051949350505050565b60006110a68261079133610744565b6110af33610d9c565b10156110ba57600080fd5b6110c483836115fd565b9392505050565b6110d3611428565b600160a060020a03919091166000908152600460205260409020805460ff1916911515919091179055565b60046020526000908152604090205460ff1681565b6003546040805160e160020a6358bc917b028152336004820152600160248201529051600160a060020a039092169163b17922f6916044808201926020929091908290030181600087803b15801561116a57600080fd5b505af115801561117e573d6000803e3d6000fd5b505050506040513d602081101561119457600080fd5b505115156111a157600080fd5b60055460ff161580156111b15750805b156111f1576005805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a161123a565b60055460ff168015611201575080155b1561123a576005805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a15b50565b336000908152600260209081526040808320600160a060020a0386168452909152812054611271908363ffffffff6113b116565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6003546040805160e160020a6358bc917b028152336004820152600160248201529051600092600160a060020a03169163b17922f691604480830192602092919082900301818787803b15801561135757600080fd5b505af115801561136b573d6000803e3d6000fd5b505050506040513d602081101561138157600080fd5b5051151561138e57600080fd5b50600160a060020a03909216600090815260066020526040902090815560010155565b6000828201838110156110c457fe5b600554600090839060ff1615806113e657503360009081526004602052604090205460ff165b806114095750600160a060020a03811660009081526004602052604090205460ff165b151561141457600080fd5b61141f85858561165b565b95945050505050565b600380546040805160e160020a6358bc917b028152336004820152602481019390935251600160a060020a039091169163b17922f69160448083019260209291908290030181600087803b15801561147f57600080fd5b505af1158015611493573d6000803e3d6000fd5b505050506040513d60208110156114a957600080fd5b50511515610f1b57600080fd5b6000828211156114c257fe5b50900390565b600854600090600160a060020a031615156114e257600080fd5b50600160a060020a03811660009081526020819052604081208054919055600154611513908263ffffffff6114b616565b600155600754611529908263ffffffff6113b116565b600755600854604080517f7a3130e3000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820185905291519190921691637a3130e391604480830192600092919082900301818387803b15801561159a57600080fd5b505af11580156115ae573d6000803e3d6000fd5b5050600854604080518581529051600160a060020a03928316945091861692507f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a919081900360200190a35050565b600554600090839060ff16158061162357503360009081526004602052604090205460ff165b806116465750600160a060020a03811660009081526004602052604090205460ff165b151561165157600080fd5b6107bc84846117c0565b6000600160a060020a038316151561167257600080fd5b600160a060020a03841660009081526020819052604090205482111561169757600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156116c757600080fd5b600160a060020a0384166000908152602081905260409020546116f0908363ffffffff6114b616565b600160a060020a038086166000908152602081905260408082209390935590851681522054611725908363ffffffff6113b116565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611767908363ffffffff6114b616565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020611890833981519152929181900390910190a35060019392505050565b6000600160a060020a03831615156117d757600080fd5b336000908152602081905260409020548211156117f357600080fd5b33600090815260208190526040902054611813908363ffffffff6114b616565b3360009081526020819052604080822092909255600160a060020a03851681522054611845908363ffffffff6113b116565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206118908339815191529281900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820563162618deeaffb9309ef76ea3ae784d08b18e6504a875fdf60d9a2da4411780029000000000000000000000000987a4a425190f5edfee695db77a2c8212f6df16f",
  "constructorArguments": "000000000000000000000000987a4a425190f5edfee695db77a2c8212f6df16f"
}