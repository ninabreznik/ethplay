{
  "address": "0x00c8decc1ca373a99f1c2a341be50f03d35e03e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CustomToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-01\n*/\n\npragma solidity ^0.4.19;\n\ncontract BaseToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\ncontract BurnToken is BaseToken {\n    event Burn(address indexed from, uint256 value);\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(_from, _value);\n        return true;\n    }\n}\n\ncontract AirdropToken is BaseToken {\n    uint256 public airAmount;\n    uint256 public airBegintime;\n    uint256 public airEndtime;\n    address public airSender;\n    uint32 public airLimitCount;\n\n    mapping (address => uint32) public airCountOf;\n\n    event Airdrop(address indexed from, uint32 indexed count, uint256 tokenValue);\n\n    function airdrop() public payable {\n        require(now >= airBegintime && now <= airEndtime);\n        require(msg.value == 0);\n        if (airLimitCount > 0 && airCountOf[msg.sender] >= airLimitCount) {\n            revert();\n        }\n        _transfer(airSender, msg.sender, airAmount);\n        airCountOf[msg.sender] += 1;\n        Airdrop(msg.sender, airCountOf[msg.sender], airAmount);\n    }\n}\n\ncontract LockToken is BaseToken {\n    struct LockMeta {\n        uint256 amount;\n        uint256 endtime;\n    }\n    \n    mapping (address => LockMeta) public lockedAddresses;\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(balanceOf[_from] >= _value);\n        LockMeta storage meta = lockedAddresses[_from];\n        require(now >= meta.endtime || meta.amount <= balanceOf[_from] - _value);\n        super._transfer(_from, _to, _value);\n    }\n}\n\ncontract CustomToken is BaseToken, BurnToken, AirdropToken, LockToken {\n    function CustomToken() public {\n        totalSupply = 100000000000000000;\n        name = 'BitValue';\n        symbol = 'BV';\n        decimals = 8;\n        balanceOf[0xf35e3344cbb5ab8da4294b741f7e378212dc0e89] = totalSupply;\n        Transfer(address(0), 0xf35e3344cbb5ab8da4294b741f7e378212dc0e89, totalSupply);\n\n        airAmount = 1000000000;\n        airBegintime = 1546149600;\n        airEndtime = 2177388000;\n        airSender = 0x8efc62dbf088c556503470ddbea0b797d66cf45d;\n        airLimitCount = 1;\n\n        lockedAddresses[0x51d013c61026c2819ee7880164c5226654b2092d] = LockMeta({amount: 9000000000000000, endtime: 1551402000});\n        lockedAddresses[0x8efc62dbf088c556503470ddbea0b797d66cf45d] = LockMeta({amount: 9000000000000000, endtime: 1559350800});\n        lockedAddresses[0x061aa72cbe0e4c02bc53cd7b4edd789f9465344e] = LockMeta({amount: 9000000000000000, endtime: 1575162000});\n        lockedAddresses[0x0eb9f24e3b5a0684ee04a23cc90adfce067c4cf5] = LockMeta({amount: 9000000000000000, endtime: 1590973200});\n        lockedAddresses[0x92c5c5d223607028e519e694a16999b004e17d49] = LockMeta({amount: 9000000000000000, endtime: 1606784400});\n        lockedAddresses[0xcb9ee43e4e2096be331c5be13d0a9a38cac955dc] = LockMeta({amount: 9000000000000000, endtime: 1622509200});\n        lockedAddresses[0xba14daefca3575d5b2f0238bf04d4ba2e0bef7ac] = LockMeta({amount: 9000000000000000, endtime: 1638320400});\n        lockedAddresses[0x79e8086c0345448b6613e5700b9cae8e05d748a8] = LockMeta({amount: 9000000000000000, endtime: 1654045200});\n        lockedAddresses[0x7e1061345337f8cb320d2e08ca6de757d2382c17] = LockMeta({amount: 9000000000000000, endtime: 1669856400});\n        lockedAddresses[0xc83ae4bbd5186fcedee714cc841889a835cb97c5] = LockMeta({amount: 9000000000000000, endtime: 1685581200});\n    }\n\n    function() public payable {\n        airdrop();\n    }\n}",
  "bytecode": ""
}