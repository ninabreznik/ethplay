{
  "address": "0x8b88a39383c90000bf8be57b8abfd59a6256b2e2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NAKED",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-05\n*/\n\npragma solidity ^0.4.18;\n\n\n\n/**\n * Math operations with safety checks\n * By OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/contracts/SafeMath.sol\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n}\n\n\n\n contract ContractReceiver{\n    function tokenFallback(address _from, uint256 _value, bytes  _data) external;\n}\n\n\n//Basic ERC23 token, backward compatible with ERC20 transfer function.\n//Based in part on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\ncontract ERC23BasicToken {\n    using SafeMath for uint256;\n    uint256 public totalSupply;\n    mapping(address => uint256) balances;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n    function tokenFallback(address _from, uint256 _value, bytes  _data) external {\n        throw;\n    }\n\n    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\n\n        //Standard ERC23 transfer function\n\n        if(isContract(_to)) {\n            transferToContract(_to, _value, _data);\n        }\n        else {\n            transferToAddress(_to, _value, _data);\n        }\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) {\n\n        //standard function transfer similar to ERC20 transfer with no _data\n        //added due to backwards compatibility reasons\n\n        bytes memory empty;\n        if(isContract(_to)) {\n            transferToContract(_to, _value, empty);\n        }\n        else {\n            transferToAddress(_to, _value, empty);\n        }\n    }\n\n    function transferToAddress(address _to, uint256 _value, bytes _data) internal {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        Transfer(msg.sender, _to, _value, _data);\n    }\n\n    function transferToContract(address _to, uint256 _value, bytes _data) internal {\n        balances[msg.sender] = balances[msg.sender].sub( _value);\n        balances[_to] = balances[_to].add( _value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        Transfer(msg.sender, _to, _value, _data);\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) returns (bool is_contract) {\n          uint256 length;\n          assembly {\n              //retrieve the size of the code on target address, this needs assembly\n              length := extcodesize(_addr)\n          }\n          if(length>0) {\n              return true;\n          }\n          else {\n              return false;\n          }\n    }\n}\n\n\n // Standard ERC23 token, backward compatible with ERC20 standards.\n // Based on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\ncontract ERC23StandardToken is ERC23BasicToken {\n    mapping (address => mapping (address => uint256)) allowed;\n    event Approval (address indexed owner, address indexed spender, uint256 value);\n\n    function transferFrom(address _from, address _to, uint256 _value) {\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // if (_value > _allowance) throw;\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is ERC23StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  bool public mintingFinished = false;\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract NAKED is MintableToken { \n  string public name=\"NAKED\";\n  string public symbol=\"NKD\";\n  uint8 public decimals=18;\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052600581527f4e414b45440000000000000000000000000000000000000000000000000000006020820152600490805161005b9291602001906100d3565b5060408051908101604052600381527f4e4b440000000000000000000000000000000000000000000000000000000000602082015260059080516100a39291602001906100d3565b506006805460ff1916601217905560038054600160a060020a033316600160a060020a031990911617905561016e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011457805160ff1916838001178555610141565b82800160010185558215610141579182015b82811115610141578251825591602001919060010190610126565b5061014d929150610151565b5090565b61016b91905b8082111561014d5760008155600101610157565b90565b610e118061017d6000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100f557806306fdde031461011c578063095ea7b3146101a657806316279055146101ca57806318160ddd146101e957806323b872dd1461020e578063313ce5671461023657806340c10f191461025f57806370a08231146102815780637d64bcb4146102a05780638da5cb5b146102b357806395d89b41146102e2578063a9059cbb146102f5578063be45fd6214610317578063c0ee0b8a1461037c578063dd62ed3e146103ab578063f2fde38b146103d0575b600080fd5b341561010057600080fd5b6101086103ef565b604051901515815260200160405180910390f35b341561012757600080fd5b61012f610410565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016b578082015183820152602001610153565b50505050905090810190601f1680156101985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b157600080fd5b6101c8600160a060020a03600435166024356104ae565b005b34156101d557600080fd5b610108600160a060020a036004351661054f565b34156101f457600080fd5b6101fc61056f565b60405190815260200160405180910390f35b341561021957600080fd5b6101c8600160a060020a0360043581169060243516604435610575565b341561024157600080fd5b61024961066e565b60405160ff909116815260200160405180910390f35b341561026a57600080fd5b610108600160a060020a0360043516602435610677565b341561028c57600080fd5b6101fc600160a060020a0360043516610783565b34156102ab57600080fd5b61010861079e565b34156102be57600080fd5b6102c6610823565b604051600160a060020a03909116815260200160405180910390f35b34156102ed57600080fd5b61012f610832565b341561030057600080fd5b6101c8600160a060020a036004351660243561089d565b341561032257600080fd5b61010860048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506108d395505050505050565b341561038757600080fd5b6101c860048035600160a060020a03169060248035916044359182019101356100f0565b34156103b657600080fd5b6101fc600160a060020a0360043581169060243516610908565b34156103db57600080fd5b6101c8600160a060020a0360043516610933565b60035474010000000000000000000000000000000000000000900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104a65780601f1061047b576101008083540402835291602001916104a6565b820191906000526020600020905b81548152906001019060200180831161048957829003601f168201915b505050505081565b80158015906104e15750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b156104eb57600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b6000813b818111156105645760019150610569565b600091505b50919050565b60005481565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091529020546105b9908363ffffffff6109ce16565b600160a060020a0380851660009081526001602052604080822093909355908616815220546105ee908363ffffffff6109e416565b600160a060020a038516600090815260016020526040902055610617818363ffffffff6109e416565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610dc68339815191529085905190815260200160405180910390a350505050565b60065460ff1681565b60035460009033600160a060020a0390811691161461069557600080fd5b60035474010000000000000000000000000000000000000000900460ff16156106bd57600080fd5b6000546106d0908363ffffffff6109ce16565b6000908155600160a060020a0384168152600160205260409020546106fb908363ffffffff6109ce16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a03166000600080516020610dc68339815191528460405190815260200160405180910390a350600192915050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a039081169116146107bc57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104a65780601f1061047b576101008083540402835291602001916104a6565b6108a5610db3565b6108ae8361054f565b156108c3576108be8383836109f6565b6108ce565b6108ce838383610c56565b505050565b60006108de8461054f565b156108f3576108ee8484846109f6565b6108fe565b6108fe848484610c56565b5060019392505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461094e57600080fd5b600160a060020a038116151561096357600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828201838110156109dd57fe5b9392505050565b6000828211156109f057fe5b50900390565b600160a060020a033316600090815260016020526040812054610a1f908463ffffffff6109e416565b600160a060020a033381166000908152600160205260408082209390935590861681522054610a54908463ffffffff6109ce16565b600160a060020a03851660008181526001602052604090819020929092558592509063c0ee0b8a90339086908690518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b06578082015183820152602001610aee565b50505050905090810190601f168015610b335780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610b5357600080fd5b6102c65a03f11515610b6457600080fd5b50505083600160a060020a031633600160a060020a0316600080516020610dc68339815191528560405190815260200160405180910390a383600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16858560405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015610c15578082015183820152602001610bfd565b50505050905090810190601f168015610c425780820380516001836020036101000a031916815260200191505b50935050505060405180910390a350505050565b600160a060020a033316600090815260016020526040902054610c7f908363ffffffff6109e416565b600160a060020a033381166000908152600160205260408082209390935590851681522054610cb4908363ffffffff6109ce16565b600160a060020a038085166000818152600160205260409081902093909355913390911690600080516020610dc68339815191529085905190815260200160405180910390a382600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16848460405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015610d73578082015183820152602001610d5b565b50505050905090810190601f168015610da05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3505050565b602060405190810160405260008152905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820600a7e16ef3e94e2018bee7f35e40599eaab34a73aa04d802f287ae44b8e611c0029"
}