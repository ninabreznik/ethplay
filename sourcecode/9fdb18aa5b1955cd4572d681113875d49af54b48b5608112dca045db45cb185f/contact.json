{
  "address": "0xda5180086461ff6eeb09580181ac160522dcdcd4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BraziliexToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-21\n*/\n\npragma solidity ^0.4.11;\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n\n/// @title Abstract token contract - Functions to be implemented by token contracts.\n/// @author braziliex dev team - <[emailÂ protected]>\ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address owner) constant returns (uint256 balance);\n    function transfer(address to, uint256 value) returns (bool success);\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\n    function approve(address spender, uint256 value) returns (bool success);\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract StandardToken is Token {\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n}\n\n\ncontract BraziliexToken is StandardToken {\n\n    string constant public name = \"BraziliexToken\";\n    string constant public symbol = \"BRZX\";\n    uint8 constant public decimals = 8;\n\n\n    function () {\n        //if ether is sent to this address, send it back.\n        throw;\n    }\n\n\n    function BraziliexToken() {\n        balances[msg.sender] = 2100000000000000;\n        totalSupply = 2100000000000000; // 21M\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b600160a060020a0333166000908152600160205260408120660775f05a07400090819055905561054a806100446000396000f3006060604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016857806323b872dd1461018d578063313ce567146101b557806370a08231146101de57806395d89b41146101fd578063a9059cbb14610210578063dd62ed3e14610232575b34156100a357600080fd5b600080fd5b34156100b357600080fd5b6100bb610257565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f75780820151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013d57600080fd5b610154600160a060020a036004351660243561028e565b604051901515815260200160405180910390f35b341561017357600080fd5b61017b6102fb565b60405190815260200160405180910390f35b341561019857600080fd5b610154600160a060020a0360043581169060243516604435610301565b34156101c057600080fd5b6101c86103f9565b60405160ff909116815260200160405180910390f35b34156101e957600080fd5b61017b600160a060020a03600435166103fe565b341561020857600080fd5b6100bb610419565b341561021b57600080fd5b610154600160a060020a0360043516602435610450565b341561023d57600080fd5b61017b600160a060020a03600435811690602435166104f3565b60408051908101604052600e81527f4272617a696c696578546f6b656e000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a0383166000908152600160205260408120548290108015906103515750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b801561035d5750600082115b156103ee57600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529490915290819020805486900390559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016103f2565b5060005b9392505050565b600881565b600160a060020a031660009081526001602052604090205490565b60408051908101604052600481527f42525a5800000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600160205260408120548290108015906104795750600082115b156104eb57600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016102f5565b5060006102f5565b600160a060020a039182166000908152600260209081526040808320939094168252919091522054905600a165627a7a723058207263ee7ad9e0ad18c3ae61be99817455367bf2f2ba7ed08acb53676914cb3efa0029"
}