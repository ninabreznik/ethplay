{
  "address": "0xe2612b9bc5cc0abf3fd35400cc2e49b3d426c56f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BITOXAirdrop",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-26\n*/\n\npragma solidity 0.4.24;\n\n// File: contracts/commons/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: contracts/flavours/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// File: contracts/flavours/Lockable.sol\n\n/**\n * @title Lockable\n * @dev Base contract which allows children to\n *      implement main operations locking mechanism.\n */\ncontract Lockable is Ownable {\n    event Lock();\n    event Unlock();\n\n    bool public locked = false;\n\n    /**\n     * @dev Modifier to make a function callable\n    *       only when the contract is not locked.\n     */\n    modifier whenNotLocked() {\n        require(!locked);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable\n     *      only when the contract is locked.\n     */\n    modifier whenLocked() {\n        require(locked);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to lock, triggers locked state\n     */\n    function lock() public onlyOwner whenNotLocked {\n        locked = true;\n        emit Lock();\n    }\n\n    /**\n     * @dev called by the owner\n     *      to unlock, returns to unlocked state\n     */\n    function unlock() public onlyOwner whenLocked {\n        locked = false;\n        emit Unlock();\n    }\n}\n\n// File: contracts/base/ERC20Token.sol\n\ninterface ERC20Token {\n    function transferFrom(address from_, address to_, uint value_) external returns (bool);\n    function transfer(address to_, uint value_) external returns (bool);\n    function balanceOf(address owner_) external returns (uint);\n}\n\n// File: contracts/base/BaseAirdrop.sol\n\ncontract BaseAirdrop is Lockable {\n    using SafeMath for uint;\n\n    ERC20Token public token;\n\n    address public tokenHolder;\n\n    mapping(address => bool) public users;\n\n    event AirdropToken(address indexed to, uint amount);\n\n    constructor(address _token, address _tokenHolder) public {\n        require(_token != address(0) && _tokenHolder != address(0));\n        token = ERC20Token(_token);\n        tokenHolder = _tokenHolder;\n    }\n\n    function airdrop(uint8 v, bytes32 r, bytes32 s, uint amount) public whenNotLocked {\n        if (users[msg.sender] || ecrecover(prefixedHash(amount), v, r, s) != owner) {\n            revert();\n        }\n        users[msg.sender] = true;\n        token.transferFrom(tokenHolder, msg.sender, amount);\n        emit AirdropToken(msg.sender, amount);\n    }\n\n    function getAirdropStatus(address user) public constant returns (bool success) {\n        return users[user];\n    }\n\n    function originalHash(uint amount) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(\n                \"Signed for Airdrop\",\n                address(this),\n                address(token),\n                msg.sender,\n                amount\n            ));\n    }\n\n    function prefixedHash(uint amount) internal view returns (bytes32) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        return keccak256(abi.encodePacked(prefix, originalHash(amount)));\n    }\n}\n\n// File: contracts/BITOXAirdrop.sol\n\n/**\n * @title BITOX token airdrop contract.\n */\ncontract BITOXAirdrop is BaseAirdrop {\n\n    constructor(address _token, address _tokenHolder) public BaseAirdrop(_token, _tokenHolder) {\n        locked = true;\n    }\n\n    // Disable direct payments\n    function() external payable {\n        revert();\n    }\n\n    // withdraw funds only for owner\n    function withdraw() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n\n    // withdraw stuck tokens only for owner\n    function withdrawTokens(address _someToken) public onlyOwner {\n        ERC20Token someToken = ERC20Token(_someToken);\n        uint balance = someToken.balanceOf(this);\n        someToken.transfer(owner, balance);\n    }\n}",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b50604051604080610abe83398101604052805160209091015160008054600160a060020a031916331790558181600160a060020a0382161580159061006d5750600160a060020a03811615155b151561007857600080fd5b60018054600160a060020a03938416600160a060020a0319918216179091556002805492909316911617905550506000805460a060020a60ff021916740100000000000000000000000000000000000000001790556109e2806100dc6000396000f3006080604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633ccfd60b81146100be578063420a83e7146100d557806349df728c146101065780638da5cb5b14610127578063a69df4b51461013c578063a87430ba14610151578063caf91b3014610186578063cf309012146101aa578063eed7eaea146101bf578063f2fde38b146101e0578063f83d08ba14610201578063fc0c546a14610216575b600080fd5b3480156100ca57600080fd5b506100d361022b565b005b3480156100e157600080fd5b506100ea610280565b60408051600160a060020a039092168252519081900360200190f35b34801561011257600080fd5b506100d3600160a060020a036004351661028f565b34801561013357600080fd5b506100ea6103de565b34801561014857600080fd5b506100d36103ed565b34801561015d57600080fd5b50610172600160a060020a0360043516610474565b604080519115158252519081900360200190f35b34801561019257600080fd5b506100d360ff60043516602435604435606435610489565b3480156101b657600080fd5b50610172610650565b3480156101cb57600080fd5b50610172600160a060020a0360043516610671565b3480156101ec57600080fd5b506100d3600160a060020a036004351661068f565b34801561020d57600080fd5b506100d3610723565b34801561022257600080fd5b506100ea6107c0565b600054600160a060020a0316331461024257600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f1935050505015801561027d573d6000803e3d6000fd5b50565b600254600160a060020a031681565b600080548190600160a060020a031633146102a957600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b505050506040513d602081101561033757600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b1580156103ad57600080fd5b505af11580156103c1573d6000803e3d6000fd5b505050506040513d60208110156103d757600080fd5b5050505050565b600054600160a060020a031681565b600054600160a060020a0316331461040457600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561042d57600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e9190a1565b60036020526000908152604090205460ff1681565b60005474010000000000000000000000000000000000000000900460ff16156104b157600080fd5b3360009081526003602052604090205460ff168061054d5750600054600160a060020a031660016104e1836107cf565b60408051600080825260208083018085529490945260ff8a16828401526060820189905260808201889052915160a08083019493601f198301938390039091019190865af1158015610537573d6000803e3d6000fd5b50505060206040510351600160a060020a031614155b1561055757600080fd5b336000818152600360209081526040808320805460ff191660019081179091555460025482517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03918216600482015260248101969096526044860187905291519116936323b872dd9360648083019493928390030190829087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b505050506040513d602081101561061257600080fd5b505060408051828152905133917fb6b09d42fae5c5eedc2e2b4c72342ea7f76d69f00732b2183cf65d40b5afaeb3919081900360200190a250505050565b60005474010000000000000000000000000000000000000000900460ff1681565b600160a060020a031660009081526003602052604090205460ff1690565b600054600160a060020a031633146106a657600080fd5b600160a060020a03811615156106bb57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461073a57600080fd5b60005474010000000000000000000000000000000000000000900460ff161561076257600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f46620e39f4e119bf05f13544f8ef38338fc06c17f6b731c7f95bee356572db969190a1565b600154600160a060020a031681565b60408051808201909152601c81527f19457468657265756d205369676e6564204d6573736167653a0a333200000000602082015260009080610810846108d5565b6040516020018083805190602001908083835b602083106108425780518252601f199092019160209182019101610823565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106108a25780518252601f199092019160209182019101610883565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b600154604080517f5369676e656420666f722041697264726f7000000000000000000000000000006020808301919091526c010000000000000000000000003081026032840152600160a060020a03909416840260468301523393909302605a820152606e80820185905282518083039091018152608e9091019182905280516000939192918291908401908083835b602083106109845780518252601f199092019160209182019101610965565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120959450505050505600a165627a7a7230582039f99304fcee6a180ec49f6af953b6e7605656f91bb1305796681f57adbfffa10029000000000000000000000000bdda280ee7bccc68f3be60a369b6b1eaee02493c000000000000000000000000521aff68ac6f05f36ae75fc786eec3b310baf68b",
  "constructorArguments": "000000000000000000000000bdda280ee7bccc68f3be60a369b6b1eaee02493c000000000000000000000000521aff68ac6f05f36ae75fc786eec3b310baf68b"
}