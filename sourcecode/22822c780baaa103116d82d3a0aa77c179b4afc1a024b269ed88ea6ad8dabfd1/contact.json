{
  "address": "0xecc043b92834c1ebde65f2181b59597a6588d616",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RTCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-01\n*/\n\npragma solidity 0.4.24;\npragma experimental \"v0.5.0\";\n\ncontract Administration {\n\n    using SafeMath for uint256;\n\n    address public owner;\n    address public admin;\n\n    event AdminSet(address _admin);\n    event OwnershipTransferred(address _previousOwner, address _newOwner);\n\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == owner || msg.sender == admin);\n        _;\n    }\n\n    modifier nonZeroAddress(address _addr) {\n        require(_addr != address(0), \"must be non zero address\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        admin = msg.sender;\n    }\n\n    function setAdmin(\n        address _newAdmin\n    )\n        public\n        onlyOwner\n        nonZeroAddress(_newAdmin)\n        returns (bool)\n    {\n        require(_newAdmin != admin);\n        admin = _newAdmin;\n        emit AdminSet(_newAdmin);\n        return true;\n    }\n\n    function transferOwnership(\n        address _newOwner\n    )\n        public\n        onlyOwner\n        nonZeroAddress(_newOwner)\n        returns (bool)\n    {\n        owner = _newOwner;\n        emit OwnershipTransferred(msg.sender, _newOwner);\n        return true;\n    }\n\n}\n\n\nlibrary SafeMath {\n\n  // We use `pure` bbecause it promises that the value for the function depends ONLY\n  // on the function arguments\n    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n/*\n    ERC20 Standard Token interface\n*/\ninterface ERC20Interface {\n    function owner() external view returns (address);\n    function decimals() external view returns (uint8);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _amount) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n}\n\ninterface StakeInterface {\n    function activeStakes() external view returns (uint256);\n}\n\n/// @title RTC Token Contract\n/// @author Postables, RTrade Technologies Ltd\n/// @dev We able V5 for safety features, see https://solidity.readthedocs.io/en/v0.4.24/security-considerations.html#take-warnings-seriously\ncontract RTCoin is Administration {\n\n    using SafeMath for uint256;\n\n    // this is the initial supply of tokens, 61.6 Million\n    uint256 constant public INITIALSUPPLY = 61600000000000000000000000;\n    string  constant public VERSION = \"production\";\n\n    // this is the interface that allows interaction with the staking contract\n    StakeInterface public stake = StakeInterface(0);\n    // this is the address of the staking contract\n    address public  stakeContractAddress = address(0);\n    // This is the address of the merged mining contract, not yet developed\n    address public  mergedMinerValidatorAddress = address(0);\n    string  public  name = \"RTCoin\";\n    string  public  symbol = \"RTC\";\n    uint256 public  totalSupply = INITIALSUPPLY;\n    uint8   public  decimals = 18;\n    // allows transfers to be frozen, but enable them by default\n    bool    public  transfersFrozen = true;\n    bool    public  stakeFailOverRestrictionLifted = false;\n\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n    mapping (address => bool) public minters;\n\n    event Transfer(address indexed _sender, address indexed _recipient, uint256 _amount);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n    event TransfersFrozen(bool indexed _transfersFrozen);\n    event TransfersThawed(bool indexed _transfersThawed);\n    event ForeignTokenTransfer(address indexed _sender, address indexed _recipient, uint256 _amount);\n    event EthTransferOut(address indexed _recipient, uint256 _amount);\n    event MergedMinerValidatorSet(address _contractAddress);\n    event StakeContractSet(address _contractAddress);\n    event FailOverStakeContractSet(address _contractAddress);\n    event CoinsMinted(address indexed _stakeContract, address indexed _recipient, uint256 _mintAmount);\n\n    modifier transfersNotFrozen() {\n        require(!transfersFrozen, \"transfers must not be frozen\");\n        _;\n    }\n\n    modifier transfersAreFrozen() {\n        require(transfersFrozen, \"transfers must be frozen\");\n        _;\n    }\n\n    // makes sure that only the stake contract, or merged miner validator contract can mint coins\n    modifier onlyMinters() {\n        require(minters[msg.sender] == true, \"sender must be a valid minter\");\n        _;\n    }\n\n    modifier nonZeroAddress(address _addr) {\n        require(_addr != address(0), \"must be non zero address\");\n        _;\n    }\n\n    modifier nonAdminAddress(address _addr) {\n        require(_addr != owner && _addr != admin, \"addr cant be owner or admin\");\n        _;\n    }\n\n    constructor() public {\n        balances[msg.sender] = totalSupply;\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    /** @notice Used to transfer tokens\n        * @param _recipient This is the recipient of the transfer\n        * @param _amount This is the amount of tokens to send\n     */\n    function transfer(\n        address _recipient,\n        uint256 _amount\n    )\n        public\n        transfersNotFrozen\n        nonZeroAddress(_recipient)\n        returns (bool)\n    {\n        // check that the sender has a valid balance\n        require(balances[msg.sender] >= _amount, \"sender does not have enough tokens\");\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_recipient] = balances[_recipient].add(_amount);\n        emit Transfer(msg.sender, _recipient, _amount);\n        return true;\n    }\n\n    /** @notice Used to transfer tokens on behalf of someone else\n        * @param _recipient This is the recipient of the transfer\n        * @param _amount This is the amount of tokens to send\n     */\n    function transferFrom(\n        address _owner,\n        address _recipient,\n        uint256 _amount\n    )\n        public\n        transfersNotFrozen\n        nonZeroAddress(_recipient)\n        returns (bool)\n    {\n        // ensure owner has a valid balance\n        require(balances[_owner] >= _amount, \"owner does not have enough tokens\");\n        // ensure that the spender has a valid allowance\n        require(allowed[_owner][msg.sender] >= _amount, \"sender does not have enough allowance\");\n        // reduce the allowance\n        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_amount);\n        // reduce balance of owner\n        balances[_owner] = balances[_owner].sub(_amount);\n        // increase balance of recipient\n        balances[_recipient] = balances[_recipient].add(_amount);\n        emit Transfer(_owner, _recipient, _amount);\n        return true;\n    }\n\n    /** @notice This is used to approve someone to send tokens on your behalf\n        * @param _spender This is the person who can spend on your behalf\n        * @param _value This is the amount of tokens that they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // NON STANDARD FUNCTIONS //\n\n    /** @notice This is used to set the merged miner validator contract\n        * @param _mergedMinerValidator this is the address of the mergedmining contract\n     */\n    function setMergedMinerValidator(address _mergedMinerValidator) external onlyOwner nonAdminAddress(_mergedMinerValidator) returns (bool) {\n        mergedMinerValidatorAddress = _mergedMinerValidator;\n        minters[_mergedMinerValidator] = true;\n        emit MergedMinerValidatorSet(_mergedMinerValidator);\n        return true;\n    }\n\n    /** @notice This is used to set the staking contract\n        * @param _contractAddress this is the address of the staking contract\n    */\n    function setStakeContract(address _contractAddress) external onlyOwner nonAdminAddress(_contractAddress) returns (bool) {\n        // this prevents us from changing contracts while there are active stakes going on\n        if (stakeContractAddress != address(0)) {\n            require(stake.activeStakes() == 0, \"staking contract already configured, to change it must have 0 active stakes\");\n        }\n        stakeContractAddress = _contractAddress;\n        minters[_contractAddress] = true;\n        stake = StakeInterface(_contractAddress);\n        emit StakeContractSet(_contractAddress);\n        return true;\n    }\n\n    /** @notice Emergency use function designed to prevent stake deadlocks, allowing a fail-over stake contract to be implemented\n        * Requires 2 transaction, the first lifts the restriction, the second enables the restriction and sets the contract\n        * @dev We restrict to the owner address for security reasons, and don't update the stakeContractAddress variable to avoid breaking compatability\n        * @param _contractAddress This is the address of the stake contract\n     */\n    function setFailOverStakeContract(address _contractAddress) external onlyOwner nonAdminAddress(_contractAddress) returns (bool) {\n        if (stakeFailOverRestrictionLifted == false) {\n            stakeFailOverRestrictionLifted = true;\n            return true;\n        } else {\n            minters[_contractAddress] = true;\n            stakeFailOverRestrictionLifted = false;\n            emit FailOverStakeContractSet(_contractAddress);\n            return true;\n        }\n    }\n\n    /** @notice This is used to mint new tokens\n        * @dev Can only be executed by the staking, and merged miner validator contracts\n        * @param _recipient This is the person who will received the mint tokens\n        * @param _amount This is the amount of tokens that they will receive and which will be generated\n     */\n    function mint(\n        address _recipient,\n        uint256 _amount)\n        public\n        onlyMinters\n        returns (bool)\n    {\n        balances[_recipient] = balances[_recipient].add(_amount);\n        totalSupply = totalSupply.add(_amount);\n        emit Transfer(address(0), _recipient, _amount);\n        emit CoinsMinted(msg.sender, _recipient, _amount);\n        return true;\n    }\n\n    /** @notice Allow us to transfer tokens that someone might've accidentally sent to this contract\n        @param _tokenAddress this is the address of the token contract\n        @param _recipient This is the address of the person receiving the tokens\n        @param _amount This is the amount of tokens to send\n     */\n    function transferForeignToken(\n        address _tokenAddress,\n        address _recipient,\n        uint256 _amount)\n        public\n        onlyAdmin\n        nonZeroAddress(_recipient)\n        returns (bool)\n    {\n        // don't allow us to transfer RTC tokens\n        require(_tokenAddress != address(this), \"token address can't be this contract\");\n        ERC20Interface eI = ERC20Interface(_tokenAddress);\n        require(eI.transfer(_recipient, _amount), \"token transfer failed\");\n        emit ForeignTokenTransfer(msg.sender, _recipient, _amount);\n        return true;\n    }\n    \n    /** @notice Transfers eth that is stuck in this contract\n        * ETH can be sent to the address this contract resides at before the contract is deployed\n        * A contract can be suicided, forcefully sending ether to this contract\n     */\n    function transferOutEth()\n        public\n        onlyAdmin\n        returns (bool)\n    {\n        uint256 balance = address(this).balance;\n        msg.sender.transfer(address(this).balance);\n        emit EthTransferOut(msg.sender, balance);\n        return true;\n    }\n\n    /** @notice Used to freeze token transfers\n     */\n    function freezeTransfers()\n        public\n        onlyAdmin\n        returns (bool)\n    {\n        transfersFrozen = true;\n        emit TransfersFrozen(true);\n        return true;\n    }\n\n    /** @notice Used to thaw token transfers\n     */\n    function thawTransfers()\n        public\n        onlyAdmin\n        returns (bool)\n    {\n        transfersFrozen = false;\n        emit TransfersThawed(true);\n        return true;\n    }\n\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**GETTERS */\n\n    /** @notice Used to get the total supply\n     */\n    function totalSupply()\n        public\n        view\n        returns (uint256)\n    {\n        return totalSupply;\n    }\n\n    /** @notice Used to get the balance of a holder\n        * @param _holder The address of the token holder\n     */\n    function balanceOf(\n        address _holder\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return balances[_holder];\n    }\n\n    /** @notice Used to get the allowance of someone\n        * @param _owner The address of the token owner\n        * @param _spender The address of thhe person allowed to spend funds on behalf of the owner\n     */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n}",
  "bytecode": "60028054600160a060020a0319908116909155600380548216905560048054909116905560c0604052600660808190527f5254436f696e000000000000000000000000000000000000000000000000000060a090815262000064916005919062000159565b506040805180820190915260038082527f52544300000000000000000000000000000000000000000000000000000000006020909201918252620000ab9160069162000159565b506a32f44eb0f61c61240000006007556008805462ff00001961ff001960ff199092166012179190911661010017169055348015620000e957600080fd5b506000805433600160a060020a0319918216811783556001805490921681179091556007548183526009602090815260408085208390558051928352519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3620001fe565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019c57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cc578251825591602001919060010190620001af565b50620001da929150620001de565b5090565b620001fb91905b80821115620001da5760008155600101620001e5565b90565b611af6806200020e6000396000f3006080604052600436106101875763ffffffff60e060020a60003504166301502460811461018c57806306fdde03146101b5578063095ea7b31461023f57806318160ddd1461026357806323b872dd1461028a578063272caf69146102b457806327e235e3146102e5578063313ce567146103065780633a4b66f11461033157806340c10f1914610346578063509484d51461036a5780635c6581651461038b57806366188463146103b2578063704b6c02146103d657806370a08231146103f75780638da5cb5b146104185780638f87c84b1461042d57806395d89b41146104425780639e5fea8a14610457578063a9059cbb14610481578063c0da7e69146104a5578063ce8e120a146104c6578063d73dd623146104db578063db6900fa146104ff578063dd62ed3e14610520578063de6ab39c14610547578063dfeb34b61461055c578063e45b813414610571578063e695751414610586578063f2fde38b1461059b578063f46eccc4146105bc578063f851a440146105dd578063ffa1ad74146105f2575b600080fd5b34801561019857600080fd5b506101a1610607565b604080519115158252519081900360200190f35b3480156101c157600080fd5b506101ca610677565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102045781810151838201526020016101ec565b50505050905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024b57600080fd5b506101a1600160a060020a0360043516602435610705565b34801561026f57600080fd5b5061027861076b565b60408051918252519081900360200190f35b34801561029657600080fd5b506101a1600160a060020a0360043581169060243516604435610771565b3480156102c057600080fd5b506102c9610a66565b60408051600160a060020a039092168252519081900360200190f35b3480156102f157600080fd5b50610278600160a060020a0360043516610a75565b34801561031257600080fd5b5061031b610a87565b6040805160ff9092168252519081900360200190f35b34801561033d57600080fd5b506102c9610a90565b34801561035257600080fd5b506101a1600160a060020a0360043516602435610a9f565b34801561037657600080fd5b506101a1600160a060020a0360043516610bed565b34801561039757600080fd5b50610278600160a060020a0360043581169060243516610e48565b3480156103be57600080fd5b506101a1600160a060020a0360043516602435610e65565b3480156103e257600080fd5b506101a1600160a060020a0360043516610f54565b34801561040357600080fd5b50610278600160a060020a036004351661103d565b34801561042457600080fd5b506102c9611058565b34801561043957600080fd5b506101a1611067565b34801561044e57600080fd5b506101ca611108565b34801561046357600080fd5b506101a1600160a060020a0360043581169060243516604435611163565b34801561048d57600080fd5b506101a1600160a060020a036004351660243561139d565b3480156104b157600080fd5b506101a1600160a060020a036004351661158d565b3480156104d257600080fd5b506101a16116ab565b3480156104e757600080fd5b506101a1600160a060020a0360043516602435611717565b34801561050b57600080fd5b506101a1600160a060020a03600435166117b0565b34801561052c57600080fd5b50610278600160a060020a03600435811690602435166118e5565b34801561055357600080fd5b50610278611910565b34801561056857600080fd5b506101a161191f565b34801561057d57600080fd5b506101a161192e565b34801561059257600080fd5b506102c961193c565b3480156105a757600080fd5b506101a1600160a060020a036004351661194b565b3480156105c857600080fd5b506101a1600160a060020a0360043516611a21565b3480156105e957600080fd5b506102c9611a36565b3480156105fe57600080fd5b506101ca611a45565b60008054600160a060020a031633148061062b5750600154600160a060020a031633145b151561063657600080fd5b6008805461ff0019166101001790556040516001907fff7ea91c52ebd8c0d8018fdba50cb801e862f6795b1e17eeac882d4288b0934090600090a250600190565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b820191906000526020600020905b8154815290600101906020018083116106e057829003601f168201915b505050505081565b336000818152600a60209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60075490565b600854600090610100900460ff16156107d4576040805160e560020a62461bcd02815260206004820152601c60248201527f7472616e7366657273206d757374206e6f742062652066726f7a656e00000000604482015290519081900360640190fd5b82600160a060020a0381161515610823576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611aab833981519152604482015290519081900360640190fd5b600160a060020a0385166000908152600960205260409020548311156108b9576040805160e560020a62461bcd02815260206004820152602160248201527f6f776e657220646f6573206e6f74206861766520656e6f75676820746f6b656e60448201527f7300000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0385166000908152600a6020908152604080832033845290915290205483111561095a576040805160e560020a62461bcd02815260206004820152602560248201527f73656e64657220646f6573206e6f74206861766520656e6f75676820616c6c6f60448201527f77616e6365000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0385166000908152600a6020908152604080832033845290915290205461098e908463ffffffff611a7c16565b600160a060020a0386166000818152600a60209081526040808320338452825280832094909455918152600990915220546109cf908463ffffffff611a7c16565b600160a060020a038087166000908152600960205260408082209390935590861681522054610a04908463ffffffff611a9116565b600160a060020a0380861660008181526009602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b600354600160a060020a031681565b60096020526000908152604090205481565b60085460ff1681565b600254600160a060020a031681565b336000908152600b602052604081205460ff161515600114610b0b576040805160e560020a62461bcd02815260206004820152601d60248201527f73656e646572206d75737420626520612076616c6964206d696e746572000000604482015290519081900360640190fd5b600160a060020a038316600090815260096020526040902054610b34908363ffffffff611a9116565b600160a060020a038416600090815260096020526040902055600754610b60908363ffffffff611a9116565b600755604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518381529051600160a060020a0385169133917f601ace93afe864dd1288a16daad8ee79b21790c32c80d710b03cbae376e9e65f9181900360200190a350600192915050565b60008054600160a060020a03163314610c0557600080fd5b6000548290600160a060020a03808316911614801590610c335750600154600160a060020a03828116911614155b1515610c89576040805160e560020a62461bcd02815260206004820152601b60248201527f616464722063616e74206265206f776e6572206f722061646d696e0000000000604482015290519081900360640190fd5b600354600160a060020a031615610db857600260009054906101000a9004600160a060020a0316600160a060020a031663ed2f23696040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610ceb57600080fd5b505afa158015610cff573d6000803e3d6000fd5b505050506040513d6020811015610d1557600080fd5b505115610db8576040805160e560020a62461bcd02815260206004820152604b60248201527f7374616b696e6720636f6e747261637420616c726561647920636f6e6669677560448201527f7265642c20746f206368616e6765206974206d7573742068617665203020616360648201527f74697665207374616b6573000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60038054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff1991821681179092556000828152600b6020908152604091829020805460ff191660011790556002805490931684179092558051928352517fcf229ad20569d02c4a6cd3b3ae6130cb9e6257558e22a670804b6a6eb866b7149281900390910190a1600191505b50919050565b600a60209081526000928352604080842090915290825290205481565b336000908152600a60209081526040808320600160a060020a0386168452909152812054808310610eb957336000908152600a60209081526040808320600160a060020a0388168452909152812055610eee565b610ec9818463ffffffff611a7c16565b336000908152600a60209081526040808320600160a060020a03891684529091529020555b336000818152600a60209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60008054600160a060020a03163314610f6c57600080fd5b81600160a060020a0381161515610fbb576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611aab833981519152604482015290519081900360640190fd5b600154600160a060020a0384811691161415610fd657600080fd5b60018054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f8fe72c3e0020beb3234e76ae6676fa576fbfcae600af1c4fea44784cf0db329c9181900360200190a150600192915050565b600160a060020a031660009081526009602052604090205490565b600054600160a060020a031681565b600080548190600160a060020a031633148061108d5750600154600160a060020a031633145b151561109857600080fd5b506040513080319133913180156108fc02916000818181858888f193505050501580156110c9573d6000803e3d6000fd5b5060408051828152905133917ffed66b098dae795e8a862bb1a0d1883d488f015acc2cf25cd29091efa8d8fb6b919081900360200190a2600191505090565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b600080548190600160a060020a03163314806111895750600154600160a060020a031633145b151561119457600080fd5b83600160a060020a03811615156111e3576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611aab833981519152604482015290519081900360640190fd5b600160a060020a038616301415611269576040805160e560020a62461bcd028152602060048201526024808201527f746f6b656e20616464726573732063616e2774206265207468697320636f6e7460448201527f7261637400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b85915081600160a060020a031663a9059cbb86866040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156112cf57600080fd5b505af11580156112e3573d6000803e3d6000fd5b505050506040513d60208110156112f957600080fd5b50511515611351576040805160e560020a62461bcd02815260206004820152601560248201527f746f6b656e207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b604080518581529051600160a060020a0387169133917f10a46ed575affad8e954ae27853b1f89c6da90d8c35f619fc640f8a21bcb78579181900360200190a350600195945050505050565b600854600090610100900460ff1615611400576040805160e560020a62461bcd02815260206004820152601c60248201527f7472616e7366657273206d757374206e6f742062652066726f7a656e00000000604482015290519081900360640190fd5b82600160a060020a038116151561144f576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611aab833981519152604482015290519081900360640190fd5b336000908152600960205260409020548311156114dc576040805160e560020a62461bcd02815260206004820152602260248201527f73656e64657220646f6573206e6f74206861766520656e6f75676820746f6b6560448201527f6e73000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600960205260409020546114fc908463ffffffff611a7c16565b3360009081526009602052604080822092909255600160a060020a0386168152205461152e908463ffffffff611a9116565b600160a060020a0385166000818152600960209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b60008054600160a060020a031633146115a557600080fd5b6000548290600160a060020a038083169116148015906115d35750600154600160a060020a03828116911614155b1515611629576040805160e560020a62461bcd02815260206004820152601b60248201527f616464722063616e74206265206f776e6572206f722061646d696e0000000000604482015290519081900360640190fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385169081179091556000818152600b6020908152604091829020805460ff19166001179055815192835290517f09eeb152b2546a9b79b2896b1b207bd9d9e94f00c0fad15b068e84478511bd529281900390910190a150600192915050565b60008054600160a060020a03163314806116cf5750600154600160a060020a031633145b15156116da57600080fd5b6008805461ff00191690556040516001907fb36ea4d45a6246e5ea6da988f57a5bf9a9022c85940cc6fe92dd9e45bf632cf690600090a250600190565b336000908152600a60209081526040808320600160a060020a038616845290915281205461174b908363ffffffff611a9116565b336000818152600a60209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60008054600160a060020a031633146117c857600080fd5b6000548290600160a060020a038083169116148015906117f65750600154600160a060020a03828116911614155b151561184c576040805160e560020a62461bcd02815260206004820152601b60248201527f616464722063616e74206265206f776e6572206f722061646d696e0000000000604482015290519081900360640190fd5b60085462010000900460ff161515611878576008805462ff000019166201000017905560019150610e42565b600160a060020a0383166000818152600b6020908152604091829020805460ff191660011790556008805462ff000019169055815192835290517f540af0fc125e4047c03435dd52febc08726667f13f9c4ac5e8795a451be52f8b9281900390910190a160019150610e42565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b6a32f44eb0f61c612400000081565b60085462010000900460ff1681565b600854610100900460ff1681565b600454600160a060020a031681565b60008054600160a060020a0316331461196357600080fd5b81600160a060020a03811615156119b2576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611aab833981519152604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03851690811790915560408051338152602081019290925280517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09281900390910190a150600192915050565b600b6020526000908152604090205460ff1681565b600154600160a060020a031681565b60408051808201909152600a81527f70726f64756374696f6e00000000000000000000000000000000000000000000602082015281565b600082821115611a8b57600080fd5b50900390565b600082820183811015611aa357600080fd5b939250505056006d757374206265206e6f6e207a65726f20616464726573730000000000000000a165627a7a723058208f2f7d91b7c745255cce3442185ec32f0f3d35ba926c0ea86b94f4c13f0204290029"
}