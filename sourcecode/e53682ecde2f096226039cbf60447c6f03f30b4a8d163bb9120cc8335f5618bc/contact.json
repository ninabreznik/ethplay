{
  "address": "0x02c4c78c462e32cca4a90bc499bf411fb7bc6afb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "InvestDigital Token",
  "contractName": "IDCToken",
  "compilerVersion": "v0.4.20-nightly.2018.1.6+commit.2548228b",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-08\n*/\n\npragma solidity ^0.4.18;\n\n// Based on https://github.com/OpenZeppelin/zeppelin-solidity\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        Unpause();\n    }\n}\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\n\n/**\n * @title IDC Token\n * @dev IDC Mintable Token with migration from legacy contract\n */\ncontract IDCToken is PausableToken, MintableToken, BurnableToken {\n    using SafeMath for uint256;\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n\n    // start and end timestamps where investments are allowed (both inclusive)\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // how many token units a buyer gets per wei\n    uint256 public rate;\n\n    // amount of raised eth in wei\n    uint256 public weiRaised;\n\n    // amount of token selled\n    uint256 public tokenSelled;\n\n    // creator of contract\n    // will get init tokens when create contract\n    address public creator;\n\n    // address where funds are collected\n    address public wallet;\n\n    // whiteList of user who can buy tokens\n    mapping(address => address) whiteList;\n\n    // record of amount of tokens selled to user in white list\n    mapping(address => uint256) tokensBuyed;\n\n    // cap of tokens per address\n    uint256 public capPerAddress;\n\n    event SellTokens(address indexed recipient, uint sellTokens, uint payEther, uint ratio);\n\n    /**\n     * Set up the initialization parameter\n     */\n    function IDCToken (\n        string    _tokenName,\n        string    _tokenSymbol,\n        uint256   _tokenDecimals,\n        uint256   _startTime,\n        uint256   _endTime,\n        uint256   _totalSupply,\n        uint256   _rate,\n        uint256   _capPerAddress,\n        address   _wallet\n    ) public {\n\n        // simple check\n        require(_endTime >= _startTime);\n        require(_startTime >= now);\n        require(_totalSupply > 0);\n        require(_capPerAddress > 0);\n        require(_wallet != address(0));\n\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        decimals = _tokenDecimals;\n        startTime = _startTime;\n        endTime = _endTime;\n        totalSupply = _totalSupply;\n        rate = _rate;\n        capPerAddress = _capPerAddress;\n        wallet = _wallet;\n\n        // give all init tokens to creator\n        balances[msg.sender] = totalSupply;\n        creator = msg.sender;\n    }\n\n    /**\n     * @dev add user to whilteList(only people in whileList can buy tokens)\n     */\n    function addWhiteList(address user) public onlyOwner {\n        require(user != address(0));\n\n        // no need to check exist of user(will cover if exist)\n        whiteList[user] = user;\n    }\n\n    /**\n     * @dev check exist of user in whiteList\n     */\n    function checkExist(address user) public view returns(bool) {\n        return(whiteList[user] == user);\n    }\n\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     *\n     * sell tokens automatic\n     */\n    function () external payable whenNotPaused preSaleActive {\n        sellTokens();\n    }\n\n    /**\n     * @dev Sell tokens to msg.sender\n     *\n     */\n    function sellTokens() public payable whenNotPaused preSaleActive {\n\n        require(msg.value > 0);\n        // check user in whiteList or not\n        require(checkExist(msg.sender) == true);\n\n        uint256 amount = msg.value;\n        uint256 tokens =  calculateTokenAmount(amount);\n\n        // check the cap of per user in whiteList\n        require(tokensBuyed[msg.sender].add(tokens) <= calculateTokenAmount(capPerAddress));\n        // check there are tokens for sale;\n        require(tokens <= balances[creator]);\n\n        // record of tokens selled to buyer\n        // in case to user transfer IDC tokens to others, then buy tokens again\n        tokensBuyed[msg.sender] = tokensBuyed[msg.sender].add(tokens);\n\n        tokenSelled = tokenSelled.add(tokens);\n        weiRaised = weiRaised.add(amount);\n\n        // send tokens to buyer\n        // creator has all initSupply tokens\n        // no need to check address\n        balances[creator] = balances[creator].sub(tokens);\n        balances[msg.sender] = balances[msg.sender].add(tokens);\n\n        Transfer(creator, msg.sender, tokens);\n        SellTokens(msg.sender, tokens, amount, rate);\n\n        forwardFunds();\n    }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n\n    /**\n     * @dev check ico is active or not\n     */\n    modifier preSaleActive() {\n        require(now >= startTime);\n        require(now <= endTime);\n        _;\n    }\n\n    /**\n     * @dev return now time\n     */\n    function timeNow() public view returns(uint256) {\n        return now;\n    }\n\n    /**\n     * @dev calculate tokens should be send to buyer by rate which is setted when deploying\n     * @param amount eth send by buyer\n     */\n    function calculateTokenAmount(uint256 amount) public constant returns(uint256) {\n        return amount.mul(rate);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSelled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_capPerAddress\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"SellTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a61ffff021916905534156200002157600080fd5b6040516200166c3803806200166c8339810160405280805182019190602001805182019190602001805191906020018051919060200180519190602001805191906020018051919060200180519190602001805160038054600160a060020a03191633600160a060020a031617905591505085851015620000a157600080fd5b42861015620000af57600080fd5b60008411620000bd57600080fd5b60008211620000cb57600080fd5b600160a060020a0381161515620000e157600080fd5b6004898051620000f692916020019062000177565b5060058880516200010c92916020019062000177565b506006969096556007949094556008929092556000818155600992909255601092909255600d8054600160a060020a03948516600160a060020a031991821617909155339093168082526001602052604090912091909155600c8054909216179055506200021c9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ba57805160ff1916838001178555620001ea565b82800160010185558215620001ea579182015b82811115620001ea578251825591602001919060010190620001cd565b50620001f8929150620001fc565b5090565b6200021991905b80821115620001f8576000815560010162000203565b90565b611440806200022c6000396000f3006060604052600436106101a05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146101df57806305d2035b1461020e57806306fdde0314610235578063095ea7b3146102bf57806318160ddd146102e157806323b872dd146103065780632c4e722e1461032e578063313ce567146103415780633197cbb6146103545780633f4ba83a146103675780634042b66f1461037a57806340c10f191461038d57806342966c68146103af578063521eb273146103c55780635c975abb146103d857806366188463146103eb578063687cde1a1461040d57806370a082311461042057806378e979251461043f5780637d64bcb4146104525780638456cb59146104655780638da5cb5b1461047857806395d89b411461048b5780639904e174146101d5578063a01701dc1461049e578063a24bcf46146104b1578063a9059cbb146104c7578063d73dd623146104e9578063d95660be1461050b578063dd62ed3e1461051e578063e7cd4a0414610543578063eff26a3b14610562578063f2fde38b14610581575b60035460a060020a900460ff16156101b757600080fd5b6007544210156101c657600080fd5b6008544211156101d557600080fd5b6101dd6105a0565b005b34156101ea57600080fd5b6101f26107eb565b604051600160a060020a03909116815260200160405180910390f35b341561021957600080fd5b6102216107fa565b604051901515815260200160405180910390f35b341561024057600080fd5b61024861080a565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561028457808201518382015260200161026c565b50505050905090810190601f1680156102b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ca57600080fd5b610221600160a060020a03600435166024356108a8565b34156102ec57600080fd5b6102f46108d3565b60405190815260200160405180910390f35b341561031157600080fd5b610221600160a060020a03600435811690602435166044356108d9565b341561033957600080fd5b6102f4610906565b341561034c57600080fd5b6102f461090c565b341561035f57600080fd5b6102f4610912565b341561037257600080fd5b6101dd610918565b341561038557600080fd5b6102f4610997565b341561039857600080fd5b610221600160a060020a036004351660243561099d565b34156103ba57600080fd5b6101dd600435610a98565b34156103d057600080fd5b6101f2610b53565b34156103e357600080fd5b610221610b62565b34156103f657600080fd5b610221600160a060020a0360043516602435610b72565b341561041857600080fd5b6102f4610b96565b341561042b57600080fd5b6102f4600160a060020a0360043516610b9c565b341561044a57600080fd5b6102f4610bb7565b341561045d57600080fd5b610221610bbd565b341561047057600080fd5b6101dd610c49565b341561048357600080fd5b6101f2610ccd565b341561049657600080fd5b610248610cdc565b34156104a957600080fd5b6102f4610d47565b34156104bc57600080fd5b6102f4600435610d4d565b34156104d257600080fd5b610221600160a060020a0360043516602435610d6a565b34156104f457600080fd5b610221600160a060020a0360043516602435610d8e565b341561051657600080fd5b6102f4610db2565b341561052957600080fd5b6102f4600160a060020a0360043581169060243516610db6565b341561054e57600080fd5b6101dd600160a060020a0360043516610de1565b341561056d57600080fd5b610221600160a060020a0360043516610e48565b341561058c57600080fd5b6101dd600160a060020a0360043516610e69565b600354600090819060a060020a900460ff16156105bc57600080fd5b6007544210156105cb57600080fd5b6008544211156105da57600080fd5b600034116105e757600080fd5b6105f033610e48565b15156001146105fe57600080fd5b34915061060a82610d4d565b9050610617601054610d4d565b600160a060020a0333166000908152600f6020526040902054610640908363ffffffff610f0416565b111561064b57600080fd5b600c54600160a060020a031660009081526001602052604090205481111561067257600080fd5b600160a060020a0333166000908152600f602052604090205461069b908263ffffffff610f0416565b600160a060020a0333166000908152600f6020526040902055600b546106c7908263ffffffff610f0416565b600b55600a546106dd908363ffffffff610f0416565b600a55600c54600160a060020a031660009081526001602052604090205461070b908263ffffffff610f1e16565b600c54600160a060020a03908116600090815260016020526040808220939093553390911681522054610744908263ffffffff610f0416565b600160a060020a033381166000818152600160205260409081902093909355600c5490929116906000805160206113f58339815191529084905190815260200160405180910390a333600160a060020a03167f95ff24e35ad23e93c0738cee55f0903db5c47b23968d07627a68fe23ebd11b6d828460095460405180848152602001838152602001828152602001935050505060405180910390a26107e7610f30565b5050565b600c54600160a060020a031681565b60035460a860020a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108a05780601f10610875576101008083540402835291602001916108a0565b820191906000526020600020905b81548152906001019060200180831161088357829003601f168201915b505050505081565b60035460009060a060020a900460ff16156108c257600080fd5b6108cc8383610f66565b9392505050565b60005481565b60035460009060a060020a900460ff16156108f357600080fd5b6108fe848484610fd2565b949350505050565b60095481565b60065481565b60085481565b60035433600160a060020a0390811691161461093357600080fd5b60035460a060020a900460ff16151561094b57600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600a5481565b60035460009033600160a060020a039081169116146109bb57600080fd5b60035460a860020a900460ff16156109d257600080fd5b6000546109e5908363ffffffff610f0416565b6000908155600160a060020a038416815260016020526040902054610a10908363ffffffff610f0416565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660006000805160206113f58339815191528460405190815260200160405180910390a350600192915050565b600160a060020a033316600090815260016020526040812054821115610abd57600080fd5b5033600160a060020a038116600090815260016020526040902054610ae29083610f1e565b600160a060020a03821660009081526001602052604081209190915554610b0f908363ffffffff610f1e16565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600d54600160a060020a031681565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff1615610b8c57600080fd5b6108cc8383611142565b600b5481565b600160a060020a031660009081526001602052604090205490565b60075481565b60035460009033600160a060020a03908116911614610bdb57600080fd5b60035460a860020a900460ff1615610bf257600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b60035433600160a060020a03908116911614610c6457600080fd5b60035460a060020a900460ff1615610c7b57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108a05780601f10610875576101008083540402835291602001916108a0565b60105481565b6000610d646009548361123c90919063ffffffff16565b92915050565b60035460009060a060020a900460ff1615610d8457600080fd5b6108cc8383611267565b60035460009060a060020a900460ff1615610da857600080fd5b6108cc8383611350565b4290565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610dfc57600080fd5b600160a060020a0381161515610e1157600080fd5b600160a060020a03166000818152600e60205260409020805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b600160a060020a039081166000818152600e60205260409020549091161490565b60035433600160a060020a03908116911614610e8457600080fd5b600160a060020a0381161515610e9957600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820183811015610f1357fe5b8091505b5092915050565b600082821115610f2a57fe5b50900390565b600d54600160a060020a03163480156108fc0290604051600060405180830381858888f193505050501515610f6457600080fd5b565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a0383161515610fe957600080fd5b600160a060020a03841660009081526001602052604090205482111561100e57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561104157600080fd5b600160a060020a03841660009081526001602052604090205461106a908363ffffffff610f1e16565b600160a060020a03808616600090815260016020526040808220939093559085168152205461109f908363ffffffff610f0416565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546110e7908363ffffffff610f1e16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516916000805160206113f58339815191529085905190815260200160405180910390a35060019392505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561119f57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556111d6565b6111af818463ffffffff610f1e16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60008083151561124f5760009150610f17565b5082820282848281151561125f57fe5b0414610f1357fe5b6000600160a060020a038316151561127e57600080fd5b600160a060020a0333166000908152600160205260409020548211156112a357600080fd5b600160a060020a0333166000908152600160205260409020546112cc908363ffffffff610f1e16565b600160a060020a033381166000908152600160205260408082209390935590851681522054611301908363ffffffff610f0416565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206113f58339815191529085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054611388908363ffffffff610f0416565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820b975258362d36644457c23dea22f0495a3e08b73d318fcb1f3093dc90812cedb0029000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000005a50a1a4000000000000000000000000000000000000000000000000000000005a59d9c000000000000000000000000000000000000000000295be96e6406697200000000000000000000000000000000000000000000000000000000000000000001b580000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000006952b4e9304611866a8713518437bae869e2634a000000000000000000000000000000000000000000000000000000000000000a6669727374746f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036674310000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "5be96e6406697200000000000000000000000000000000000000000000000000000000000000000001b580000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000006952b4e9304611866a8713518437bae869e2634a000000000000000000000000000000000000000000000000000000000000000a6669727374746f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036674310000000000000000000000000000000000000000000000000000000000"
}