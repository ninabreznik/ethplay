{
  "address": "0x7be1a4d7ea5b1a9e74762f388a06912c3ea0935b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ATD",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-13\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract SignerRole {\n    using Roles for Roles.Role;\n\n    event SignerAdded(address indexed account);\n    event SignerRemoved(address indexed account);\n\n    Roles.Role private _signers;\n\n    constructor () internal {\n        _addSigner(msg.sender);\n    }\n\n    modifier onlySigner() {\n        require(isSigner(msg.sender));\n        _;\n    }\n\n    function isSigner(address account) public view returns (bool) {\n        return _signers.has(account);\n    }\n\n    function addSigner(address account) public onlySigner {\n        _addSigner(account);\n    }\n\n    function renounceSigner() public {\n        _removeSigner(msg.sender);\n    }\n\n    function _addSigner(address account) internal {\n        _signers.add(account);\n        emit SignerAdded(account);\n    }\n\n    function _removeSigner(address account) internal {\n        _signers.remove(account);\n        emit SignerRemoved(account);\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract DistributionConfigurable is PauserRole {\n\n  /**\n    Structures\n   */\n\n  struct DistributionConfig {\n    address lockedWallet;\n    address unlockWallet;\n    uint256 ratioDTV;\n    uint256 ratioDecimals;\n  }\n\n  /**\n    State variables\n   */\n\n  DistributionConfig[] public distributionConfigs;\n\n  /**\n    Events\n   */\n\n  event DistributionConfigAdded(\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  );\n\n  event DistributionConfigEdited(\n    uint256 indexed index,\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 previousRatioDTV,\n    uint256 previousRatioDecimals,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  );\n\n  event DistributionConfigDeleted(\n    uint256 indexed index,\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  );\n\n  /**\n    External views\n   */\n\n  function distributionConfigsLength()\n    external view\n    returns (uint256 length)\n  {\n    return distributionConfigs.length;\n  }\n\n  /**\n    Public\n   */\n\n  function addDistributionConfig(\n    address lockedWallet,\n    address unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  ) public onlyPauser {\n    require(lockedWallet != address(0), \"lockedWallet address cannot be zero\");\n    require(unlockWallet != address(0), \"unlockWallet address cannot be zero\");\n    require(lockedWallet != unlockWallet, \"lockedWallet and unlockWallet addresses cannot be the same\");\n    require(ratioDTV > 0, \"ratioDTV cannot be zero\");\n    require(ratioDecimals > 0, \"ratioDecimals cannot be zero\");\n    distributionConfigs.push(DistributionConfig({\n      lockedWallet: lockedWallet,\n      unlockWallet: unlockWallet,\n      ratioDTV: ratioDTV,\n      ratioDecimals: ratioDecimals\n    }));\n    emit DistributionConfigAdded(\n      lockedWallet,\n      unlockWallet,\n      ratioDTV,\n      ratioDecimals\n    );\n  }\n\n  function editDistributionConfig(\n    uint256 index,\n    uint256 ratioDTV,\n    uint256 ratioDecimals\n  ) public onlyPauser {\n    require(index < distributionConfigs.length, \"index is out of bound\");\n    require(ratioDTV > 0, \"ratioDTV cannot be zero\");\n    require(ratioDecimals > 0, \"ratioDecimals cannot be zero\");\n    emit DistributionConfigEdited(\n      index,\n      distributionConfigs[index].lockedWallet,\n      distributionConfigs[index].unlockWallet,\n      distributionConfigs[index].ratioDTV,\n      distributionConfigs[index].ratioDecimals,\n      ratioDTV,\n      ratioDecimals\n    );\n    distributionConfigs[index].ratioDTV = ratioDTV;\n    distributionConfigs[index].ratioDecimals = ratioDecimals;\n  }\n\n  function deleteDistributionConfig(\n    uint256 index\n  ) public onlyPauser {\n    require(index < distributionConfigs.length, \"index is out of bound\");\n    emit DistributionConfigDeleted(\n      index,\n      distributionConfigs[index].lockedWallet,\n      distributionConfigs[index].unlockWallet,\n      distributionConfigs[index].ratioDTV,\n      distributionConfigs[index].ratioDecimals\n    );\n    // Replace the element to delete and shift elements of the array.\n    for (uint i = index; i<distributionConfigs.length-1; i++){\n      distributionConfigs[i] = distributionConfigs[i+1];\n    }\n    distributionConfigs.length--;\n  }\n\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ATD is Ownable, Pausable, SignerRole, DistributionConfigurable {\n  using SafeMath for uint256;\n\n  /**\n    State variables\n   */\n\n  ERC20Detailed public token;\n\n  /**\n    Constructor\n   */\n\n  constructor(\n    ERC20Detailed _token\n  ) public {\n    token = _token;\n  }\n\n  /**\n    Events\n   */\n\n  event Distributed(\n    uint256 indexed date,\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals,\n    uint256 dailyTradedVolume,\n    uint256 amount\n  );\n\n  event TotalDistributed(\n    uint256 indexed date,\n    uint256 dailyTradedVolume,\n    uint256 amount\n  );\n\n  /**\n    Publics\n   */\n\n  function distribute(\n    uint256 dailyTradedVolume\n  ) public whenNotPaused onlySigner {\n    require(\n      dailyTradedVolume.div(10 ** uint256(token.decimals())) > 0,\n      \"dailyTradedVolume is not in token unit\"\n    );\n    uint256 total = 0;\n    for (uint256 i = 0; i < distributionConfigs.length; i++) {\n      DistributionConfig storage dc = distributionConfigs[i];\n      uint256 amount = dailyTradedVolume.mul(dc.ratioDTV).div(10 ** dc.ratioDecimals);\n      token.transferFrom(dc.lockedWallet, dc.unlockWallet, amount);\n      total = total.add(amount);\n      emit Distributed(\n        now,\n        dc.lockedWallet,\n        dc.unlockWallet,\n        dc.ratioDTV,\n        dc.ratioDecimals,\n        dailyTradedVolume,\n        amount\n      );\n    }\n    emit TotalDistributed(now, dailyTradedVolume, total);\n  }\n\n  function destroy() public onlyOwner {\n    selfdestruct(msg.sender);\n  }\n\n  function removePauser(address account) public onlyOwner {\n    _removePauser(account);\n  }\n\n  function removeSigner(address account) public onlyOwner {\n    _removeSigner(account);\n  }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062002411833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36200011a3362000197640100000000026401000000009004565b6000600260006101000a81548160ff0219169083151502179055506200014f3362000201640100000000026401000000009004565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620003c3565b620001bb8160016200026b6401000000000262001e0d179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b620002258160036200026b6401000000000262001e0d179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2460405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620002a857600080fd5b620002c382826200032e640100000000026401000000009004565b151515620002d057600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200036c57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61203e80620003d36000396000f3fe608060405234801561001057600080fd5b506004361061016a576000357c01000000000000000000000000000000000000000000000000000000009004806383197ef0116100e05780639c3e91d8116100995780639c3e91d814610500578063cf802e1e1461051e578063e5c8b03d14610596578063eb12d61e146105a0578063f2fde38b146105e4578063fc0c546a146106285761016a565b806383197ef0146104245780638456cb591461042e5780638d8e0acc146104385780638da5cb5b146104665780638f32d59b146104b057806391c05b0b146104d25761016a565b80636e1cd95f116101325780636e1cd95f1461027f5780636ef8d66d1461032e578063715018a614610338578063763b40b5146103425780637df73e271461038457806382dc1ec4146103e05761016a565b80630e316ab71461016f5780633f4ba83a146101b357806346fbf68e146101bd5780635c975abb146102195780636b2c0f551461023b575b600080fd5b6101b16004803603602081101561018557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610672565b005b6101bb610691565b005b6101ff600480360360208110156101d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610740565b604051808215151515815260200191505060405180910390f35b61022161075d565b604051808215151515815260200191505060405180910390f35b61027d6004803603602081101561025157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610774565b005b6102ab6004803603602081101561029557600080fd5b8101908080359060200190929190505050610793565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390f35b610336610812565b005b61034061081d565b005b6103826004803603606081101561035857600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506108ef565b005b6103c66004803603602081101561039a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bfc565b604051808215151515815260200191505060405180910390f35b610422600480360360208110156103f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c19565b005b61042c610c39565b005b610436610c65565b005b6104646004803603602081101561044e57600080fd5b8101908080359060200190929190505050610d15565b005b61046e611032565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104b861105b565b604051808215151515815260200191505060405180910390f35b6104fe600480360360208110156104e857600080fd5b81019080803590602001909291905050506110b2565b005b610508611534565b6040518082815260200191505060405180910390f35b6105946004803603608081101561053457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611541565b005b61059e61196f565b005b6105e2600480360360208110156105b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061197a565b005b610626600480360360208110156105fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061199a565b005b6106306119b9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61067a61105b565b151561068557600080fd5b61068e816119df565b50565b61069a33610740565b15156106a557600080fd5b600260009054906101000a900460ff1615156106c057600080fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000610756826001611a3990919063ffffffff16565b9050919050565b6000600260009054906101000a900460ff16905090565b61077c61105b565b151561078757600080fd5b61079081611acd565b50565b6004818154811015156107a257fe5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154905084565b61081b33611acd565b565b61082561105b565b151561083057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6108f833610740565b151561090357600080fd5b6004805490508310151561097f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f696e646578206973206f7574206f6620626f756e64000000000000000000000081525060200191505060405180910390fd5b6000821115156109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f726174696f4454562063616e6e6f74206265207a65726f00000000000000000081525060200191505060405180910390fd5b600081111515610a6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f726174696f446563696d616c732063616e6e6f74206265207a65726f0000000081525060200191505060405180910390fd5b600483815481101515610a7e57fe5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600484815481101515610ad557fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fee0eb5daf1e44595fa4c3dd68a2a475100c6c08435bed80599cfc2a0a353018e600487815481101515610b4e57fe5b906000526020600020906004020160020154600488815481101515610b6f57fe5b90600052602060002090600402016003015487876040518085815260200184815260200183815260200182815260200194505050505060405180910390a481600484815481101515610bbd57fe5b90600052602060002090600402016002018190555080600484815481101515610be257fe5b906000526020600020906004020160030181905550505050565b6000610c12826003611a3990919063ffffffff16565b9050919050565b610c2233610740565b1515610c2d57600080fd5b610c3681611b27565b50565b610c4161105b565b1515610c4c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b610c6e33610740565b1515610c7957600080fd5b600260009054906101000a900460ff16151515610c9557600080fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b610d1e33610740565b1515610d2957600080fd5b60048054905081101515610da5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f696e646578206973206f7574206f6620626f756e64000000000000000000000081525060200191505060405180910390fd5b600481815481101515610db457fe5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600482815481101515610e0b57fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16827fe9a043fd2807c21031fdccbb069758a045a57a96d8db6a60a0248cfad3bfb082600485815481101515610e8457fe5b906000526020600020906004020160020154600486815481101515610ea557fe5b906000526020600020906004020160030154604051808381526020018281526020019250505060405180910390a460008190505b60016004805490500381101561101857600460018201815481101515610efb57fe5b9060005260206000209060040201600482815481101515610f1857fe5b90600052602060002090600402016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201548160020155600382015481600301559050508080600101915050610ed9565b50600480548091906001900361102e9190611ebd565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600260009054906101000a900460ff161515156110ce57600080fd5b6110d733610bfc565b15156110e257600080fd5b60006111bb600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561116b57600080fd5b505afa15801561117f573d6000803e3d6000fd5b505050506040513d602081101561119557600080fd5b810190808051906020019092919050505060ff16600a0a83611b8190919063ffffffff16565b111515611213576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611fed6026913960400191505060405180910390fd5b600080905060008090505b6004805490508110156114ef57600060048281548110151561123c57fe5b90600052602060002090600402019050600061127e8260030154600a0a611270846002015488611bab90919063ffffffff16565b611b8190919063ffffffff16565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156113c157600080fd5b505af11580156113d5573d6000803e3d6000fd5b505050506040513d60208110156113eb57600080fd5b8101908080519060200190929190505050506114108185611be990919063ffffffff16565b93508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16427f4f8320e5423e7a248869328eacf23c5ccd0ca7ccc8b8223a149a74dec878ba8b856002015486600301548a876040518085815260200184815260200183815260200182815260200194505050505060405180910390a45050808060010191505061121e565b50427f47b6f7bd4d0829ff106b9f4d34205081e7cb05f95d22e5534608e5193954b3cd8383604051808381526020018281526020019250505060405180910390a25050565b6000600480549050905090565b61154a33610740565b151561155557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156115dd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180611fca6023913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611665576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180611fa76023913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156116ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180611f6d603a913960400191505060405180910390fd5b600082111515611764576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f726174696f4454562063616e6e6f74206265207a65726f00000000000000000081525060200191505060405180910390fd5b6000811115156117dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f726174696f446563696d616c732063616e6e6f74206265207a65726f0000000081525060200191505060405180910390fd5b60046080604051908101604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301555050508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f92e3a88d0298e1bab0fe2d47a7e225ed413ca154b371fbfda18c9b22a55b459d8484604051808381526020018281526020019250505060405180910390a350505050565b611978336119df565b565b61198333610bfc565b151561198e57600080fd5b61199781611c0a565b50565b6119a261105b565b15156119ad57600080fd5b6119b681611c64565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6119f3816003611d5e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b60405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a7657600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611ae1816001611d5e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b611b3b816001611e0d90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b60008082111515611b9157600080fd5b60008284811515611b9e57fe5b0490508091505092915050565b600080831415611bbe5760009050611be3565b60008284029050828482811515611bd157fe5b04141515611bde57600080fd5b809150505b92915050565b6000808284019050838110151515611c0057600080fd5b8091505092915050565b611c1e816003611e0d90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2460405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611ca057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d9a57600080fd5b611da48282611a39565b1515611daf57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e4957600080fd5b611e538282611a39565b151515611e5f57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b815481835581811115611eea57600402816004028360005260206000209182019101611ee99190611eef565b5b505050565b611f6991905b80821115611f6557600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905550600401611ef5565b5090565b9056fe6c6f636b656457616c6c657420616e6420756e6c6f636b57616c6c6574206164647265737365732063616e6e6f74206265207468652073616d65756e6c6f636b57616c6c657420616464726573732063616e6e6f74206265207a65726f6c6f636b656457616c6c657420616464726573732063616e6e6f74206265207a65726f6461696c79547261646564566f6c756d65206973206e6f7420696e20746f6b656e20756e6974a165627a7a72305820db542f69bfa89b7357f96c0f8be4897b08498574526f0bd5f341766cb6d85c6f0029000000000000000000000000420167d87d35c3a249b32ef6225872fbd9ab85d2",
  "constructorArguments": "000000000000000000000000420167d87d35c3a249b32ef6225872fbd9ab85d2"
}