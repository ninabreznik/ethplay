{
  "address": "0xac1c376b4b4bc19821d379ca5f96da3136a30385",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Coinage2",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-03\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;} uint256 c = a * b; assert(c / a == b); return c;}\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a / b; return c;}\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {assert(b <= a); return a - b;}\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b; assert(c >= a); return c;}}\n\ncontract Bitcoin {\n\n    // 図書館\n    using SafeMath for uint256;\n\n    // 変数\n    uint8 public decimals;uint256 public supplyCap;string public website;string public email = \"[email protected]\";address private oW;address public coinage;uint256 public totalSupply;mapping (address => uint256) private balances;mapping (address => mapping (address => uint256)) internal allowed;bool private mintable = true;\n\n    // コンストラクタ\n    function Bitcoin(uint256 cap, uint8 dec) public {oW = msg.sender; decimals=dec;supplyCap=cap * (10 ** uint256(decimals));}\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n\n\n    // 修飾語\n    modifier oO(){require(msg.sender == oW); _;}modifier oOOrContract(){require(msg.sender == oW || msg.sender == coinage); _;}modifier canMint() {require(mintable); _;}\n\n    // 機能\n    function transfer(address _to, uint256 _value) public returns (bool) {require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true;}\n    function balanceOf(address _owner) public view returns (uint256 balance) {return balances[_owner];}\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true;}\n    function approve(address _spender, uint256 _value) public returns (bool) {allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true;}\n    function allowance(address _owner, address _spender) public view returns (uint256) {return allowed[_owner][_spender];}\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue); Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true;}\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {uint oldValue = allowed[msg.sender][_spender]; if (_subtractedValue > oldValue) {allowed[msg.sender][_spender] = 0;} else {allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);} Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true;}\n    function mint(address _to, uint256 _amount) public oOOrContract canMint returns (bool) {require(totalSupply.add(_amount) <= supplyCap); totalSupply = totalSupply.add(_amount); balances[_to] = balances[_to].add(_amount); Mint(_to, _amount); Transfer(address(0), _to, _amount); return true;}\n    function burn(uint256 _value) public {require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply = totalSupply.sub(_value);}\n    //atoshima\n    function atoshima(string b, string t, address c) public oO {if(keccak256(b)==keccak256(\"web\")){sW(t);} if(keccak256(b)==keccak256(\"email\")){sE(t);} if(keccak256(b)==keccak256(\"contract\")){sC(c);} if(keccak256(b)==keccak256(\"own\")){sO(c);} if(keccak256(b)==keccak256(\"die\")){selfdestruct(oW);} if(keccak256(b)==keccak256(\"mint\")){mintable = (keccak256(t) == keccak256(\"true\"));}}\n    function sO(address nO) private oO {require(nO != address(0)); oW = nO;}\n    function sW(string info) private oO { website = info; }\n    function sE(string info) private oO { email = info; }\n    function sC(address tC) private oO {require(tC != address(0)); coinage = tC; }\n}\n\ncontract Faythe is Bitcoin(21000000,8) {\n    // トークン情報\n    string public constant name = \"Faythe\";string public constant symbol = \"FYE\";\n}\n\ncontract Trent is Bitcoin(1000000000,15) {\n    // トークン情報\n    string public constant name = \"Trent\";string public constant symbol = \"TTP\";\n}\n\ncontract Coinage {\n\n    // 図書館\n    using SafeMath for uint256;\n\n    // 変数\n    Trent public trent;Faythe public faythe;string public constant name = \"Atoshima Konsato\";address public wallet;address private oW;uint256 private pF = 0;uint8 public plot = 0;uint256 public eta;mapping (uint8 => uint256) public  plotTotal;mapping (uint8 => mapping (address => uint256)) public contribution;mapping (uint8 => mapping (address => bool)) public claimed;uint256 public fund;uint128 internal constant WAD = 10 ** 18;\n    uint32[313] public plotValuen\n    // コンストラクタ\n    function Coinage(address ttp, address fye) public {trent = Trent(ttp); faythe = Faythe(fye); oW = msg.sender;}\n\n    // 修飾語\n    modifier oO() {require(msg.sender == oW); _;}\n\n    // 機能\n    function cast(uint256 x) private pure returns (uint128 z) {assert((z = uint128(x)) == x);}\n    function wdiv(uint128 x, uint128 y) private pure returns (uint128 z) {z = cast((uint256(x) * WAD + y / 2) / y);}\n    function wmul(uint128 x, uint128 y) private pure returns (uint128 z) {z = cast((uint256(x) * y + WAD / 2) / WAD);}\n    function min(uint256 a, uint256 b) private pure returns (uint256) {return a < b ? a : b;}\n    function max(uint256 a, uint256 b) private pure returns (uint256) {return a > b ? a : b;}\n    function ttpf(uint32 t) private pure returns (uint256) { return uint256(t) * 10 ** 15; }\n    function () external payable {buyTokens(msg.sender);}\n    function buyTokens(address beneficiary) public payable {require(beneficiary != address(0)); require(msg.value != 0); if (plot == 0) {primeMovers(beneficiary);} else {contribute(beneficiary);}}\n    function primeMovers(address beneficiary) internal {uint256 wA = msg.value; uint256 cH = 0; uint256 maxTtp = ttpf(plotValue[0]); if(plotTotal[0] + wA >=  maxTtp){cH = wA.sub(maxTtp.sub(plotTotal[0])); wA = wA.sub(cH); plot = 1; eta = now.add(441 hours);} fund = fund.add(wA); plotTotal[0] = plotTotal[0].add(wA); uint256 fA = wA.div(10 ** 10).mul(21); if ( cH > 0 ){beneficiary.transfer(cH); wallet.transfer(wA);} else forwardFunds(); faythe.mint(beneficiary, fA); trent.mint(beneficiary, wA);}\n    function contribute(address beneficiary) internal {if ( now > eta ){plot += 1; eta = now.add(21 hours);} uint256 wA = msg.value; fund += wA; plotTotal[plot] += wA; contribution[plot][beneficiary] += wA; forwardFunds(); if(plot == 1 && wA >= 1 ether && pF < 137903 ){uint256 fte = 0; uint256 eA = wA.div(10 ** 18);uint256 c1 = 0; if(pF < 311){c1 = min(eA, 311 - pF); eA = eA.sub(c1); fte = c1.mul(7); pF = pF.add(c1);} if(pF < 752 && eA > 0){c1 = min(eA, 752 - pF); eA = eA.sub(c1); fte = c1.mul(5); pF = pF.add(c1);}if(pF < 137903 && eA > 0){c1 = min(eA, 137903 - pF); fte = c1.mul(1); pF = pF.add(c1);} faythe.mint(beneficiary, fte.mul(10 ** 8));}}\n    function claim(uint8 day, address beneficiary) public {assert(plot > day); if (claimed[day][beneficiary] || plotTotal[day] == 0) {return;} var dailyTotal = cast(plotTotal[day]); var userTotal = cast(contribution[day][beneficiary]); var price = wdiv(cast(uint256(plotValue[day]) * (10 ** uint256(15))), dailyTotal); var reward = wmul(price, userTotal); claimed[day][beneficiary] = true; trent.mint(beneficiary, reward);}\n    function claimAll(address beneficiary) public {for (uint8 i = 1; i < plot; i++) {claim(i, beneficiary);}}\n    function forwardFunds() internal {wallet.transfer(msg.value);}\n    function atoshima(string f, address a) public oO {if(keccak256(f) == keccak256(\"collect\")) collect(); if(keccak256(f) == keccak256(\"own\")) sO(a); if(keccak256(f) == keccak256(\"wallet\")) sT(a); if(keccak256(f) == keccak256(\"die\")) selfdestruct(oW);}\n    function sO(address nO) private oO {require(nO != address(0)); oW = nO;}\n    function sT(address nW) private oO {require(nW != address(0)); wallet = nW;}\n    function collect() private oO {wallet.transfer(this.balance);}\n}\n\n\ncontract CoinageCollector {Coinage public coinage;\n    function CoinageCollector(Coinage csAddress) public {coinage = csAddress;}\n    function () external payable {coinage.claimAll(msg.sender); if(msg.value > 0) msg.sender.transfer(msg.value);}}\n\n\ncontract Coinage2 {\n\n    // 図書館\n    using SafeMath for uint256;\n\n\n    // 変数\n    Trent public trent;\n    Faythe public faythe;\n    Coinage public coinage;\n    string public constant name = \"Atoshima Konsato\";\n    address public wallet;\n    address private oW;\n    uint256 private pF = 0;\n\n    uint16 public plot = 256;\n    uint256 public eta;\n    bool isRunning = false;\n    mapping (uint16 => uint256) public  plotTotal;\n    mapping (uint16 => mapping (address => uint256)) public contribution;\n    mapping (uint16 => mapping (address => bool)) public claimed;\n    uint256 public fund = 2684354599418369580399897;\n    uint128 internal constant WAD = 10 ** 18;\n\n    uint32[313] public plotValuen\n\n    // コンストラクタ\n    function Coinage2(address c, address ttp, address fye, address w) public {\n        trent = Trent(ttp);\n        faythe = Faythe(fye);\n        coinage = Coinage(c);\n        wallet = w;\n        oW = msg.sender;\n    }\n\n    // 修飾語\n    modifier oO() {require(msg.sender == oW); _;}\n    modifier iR() {require(isRunning); _;}\n\n    // 機能\n    function cast(uint256 x) private pure returns (uint128 z) {assert((z = uint128(x)) == x);}\n    function wdiv(uint128 x, uint128 y) private pure returns (uint128 z) {z = cast((uint256(x) * WAD + y / 2) / y);}\n    function wmul(uint128 x, uint128 y) private pure returns (uint128 z) {z = cast((uint256(x) * y + WAD / 2) / WAD);}\n    function min(uint256 a, uint256 b) private pure returns (uint256) {return a < b ? a : b;}\n    function max(uint256 a, uint256 b) private pure returns (uint256) {return a > b ? a : b;}\n    function ttpf(uint32 t) private pure returns (uint256) { return uint256(t) * 10 ** 15;}\n\n    function () external payable {buyTokens(msg.sender);}\n\n    function buyTokens(address beneficiary) public payable iR {\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        contribute(beneficiary);\n    }\n    \n    function contribute(address beneficiary) internal {\n        //round advancing\n        if ( now > eta ){plot += 1; eta = now.add(21 hours); } \n\n        if(plot > 312 || plot < 255){\n            isRunning = false;\n            beneficiary.transfer(msg.value);\n        } else {\n            uint256 wA = msg.value;\n            fund += wA;\n            plotTotal[plot] += wA;\n            contribution[plot][beneficiary] += wA;\n            wallet.transfer(msg.value);\n        }\n    }\n\n    function claim(uint16 day, address beneficiary) public {\n        require(plot > day);\n        if(claimed[day][beneficiary]) {return;}\n\n        var dailyTotal = cast(0);\n        var userTotal = cast(0);\n\n        if(day < 256){\n            if(coinage.claimed(uint8(day),beneficiary)){\n                claimed[day][beneficiary] = true;\n                return;\n            }\n            dailyTotal = cast(coinage.plotTotal(uint8(day)));\n            userTotal = cast(coinage.contribution(uint8(day),beneficiary));\n        } else {\n            dailyTotal = cast(plotTotal[day]);\n            userTotal = cast(contribution[day][beneficiary]);\n        }\n\n        var price = wdiv(cast(uint256(plotValue[day]) * (10 ** uint256(15))), dailyTotal);\n        var reward = wmul(price, userTotal);\n\n        claimed[day][beneficiary] = true;\n        trent.mint(beneficiary, reward);\n    }\n    \n    function claimAll(address beneficiary) public {\n        for (uint16 i = 2; i < plot; i++) {\n            claim(i, beneficiary);\n        }\n    }\n    \n    function atoshima(string f, address a) public oO {\n        if(keccak256(f) == keccak256(\"toggle\")) isRunning = !isRunning;\n        if(keccak256(f) == keccak256(\"collect\")) collect();\n        if(keccak256(f) == keccak256(\"own\")) sO(a);\n        if(keccak256(f) == keccak256(\"wallet\")) sT(a);\n        if(keccak256(f) == keccak256(\"die\")) selfdestruct(oW);\n    }\n    function sO(address nO) private oO {require(nO != address(0));oW = nO;}\n    function sT(address nW) private oO {require(nW != address(0));wallet = nW;}\n    function collect() private oO {wallet.transfer(this.balance);}\n}",
  "bytecode": "60606040526000600555610100600660006101000a81548161ffff021916908361ffff1602179055506000600860006101000a81548160ff0219169083151502179055506a02386f27881acc5c76fd19600c5561272060405190810160405280620f424063ffffffff1681526020016305ff77a963ffffffff1681526020016237155563ffffffff1681526020016237047d63ffffffff1681526020016236f1f763ffffffff1681526020016236e06563ffffffff1681526020016236cdcf63ffffffff1681526020016236bb5563ffffffff1681526020016236a99163ffffffff168152602001623696c763ffffffff168152602001623683e363ffffffff1681526020016236716563ffffffff16815260200162365fd563ffffffff16815260200162364dad63ffffffff16815260200162363b9b63ffffffff1681526020016236288763ffffffff168152602001623616bb63ffffffff1681526020016236039163ffffffff1681526020016235f0c363ffffffff1681526020016235df2963ffffffff1681526020016235cba563ffffffff1681526020016235b89b63ffffffff1681526020016235a55363ffffffff168152602001623593cf63ffffffff1681526020016235809963ffffffff16815260200162356f5d63ffffffff16815260200162355bf563ffffffff168152602001623549bf63ffffffff168152602001623536cf63ffffffff1681526020016235242d63ffffffff1681526020016235113363ffffffff1681526020016234fe2f63ffffffff1681526020016234eb8363ffffffff1681526020016234d8d563ffffffff1681526020016234c5a763ffffffff1681526020016234b34163ffffffff1681526020016234a0a563ffffffff16815260200162348e1d63ffffffff16815260200162347c3563ffffffff16815260200162346b5363ffffffff1681526020016234593d63ffffffff168152602001623446cf63ffffffff1681526020016234348963ffffffff1681526020016234223f63ffffffff16815260200162340f9163ffffffff1681526020016233fde563ffffffff1681526020016233ec2363ffffffff1681526020016233d99f63ffffffff1681526020016233c81b63ffffffff1681526020016233b57563ffffffff1681526020016233a3ff63ffffffff168152602001623390e363ffffffff16815260200162337f4f63ffffffff16815260200162336ca763ffffffff16815260200162335b6f63ffffffff1681526020016233494963ffffffff168152602001623335b163ffffffff1681526020016233229763ffffffff1681526020016233109d63ffffffff1681526020016232fdd763ffffffff1681526020016232ec9163ffffffff1681526020016232d98963ffffffff1681526020016232c71d63ffffffff1681526020016232b4b363ffffffff1681526020016232a27563ffffffff1681526020016232903f63ffffffff16815260200162327e2363ffffffff16815260200162326cd563ffffffff1681526020016232596763ffffffff168152602001623246c763ffffffff1681526020016232342f63ffffffff168152602001623222ad63ffffffff16815260200162320fed63ffffffff1681526020016231fddd63ffffffff1681526020016231ebf963ffffffff1681526020016231d95d63ffffffff1681526020016231c76963ffffffff1681526020016231b57563ffffffff1681526020016231a31563ffffffff1681526020016231906d63ffffffff16815260200162317e9d63ffffffff16815260200162316b1963ffffffff16815260200162315a0763ffffffff168152602001623147d163ffffffff1681526020016231362763ffffffff168152602001623123e563ffffffff168152602001623111cb63ffffffff1681526020016230ff7963ffffffff1681526020016230ee6f63ffffffff1681526020016230dbf763ffffffff1681526020016230cad963ffffffff1681526020016230b8c363ffffffff1681526020016230a71d63ffffffff168152602001623094df63ffffffff168152602001623082f963ffffffff1681526020016230704363ffffffff16815260200162305ebd63ffffffff16815260200162304cc163ffffffff16815260200162303a8563ffffffff1681526020016230281963ffffffff168152602001623016b763ffffffff1681526020016230046f63ffffffff168152602001622ff29d63ffffffff168152602001622fdfe363ffffffff168152602001622fcd4163ffffffff168152602001622fbae763ffffffff168152602001622fa8cb63ffffffff168152602001622f966363ffffffff168152602001622f853d63ffffffff168152602001622f72b163ffffffff168152602001622f60ef63ffffffff168152602001622f4ea763ffffffff168152602001622f3bff63ffffffff168152602001622f298b63ffffffff168152602001622f183563ffffffff168152602001622f05e163ffffffff168152602001622ef41763ffffffff168152602001622ee2ab63ffffffff168152602001622ed14763ffffffff168152602001622ebe7163ffffffff168152602001622eac9b63ffffffff168152602001622e99a363ffffffff168152602001622e87a563ffffffff168152602001622e74f563ffffffff168152602001622e635b63ffffffff168152602001622e504363ffffffff168152602001622e3dfb63ffffffff168152602001622e2c2b63ffffffff168152602001622e192d63ffffffff168152602001622e06cf63ffffffff168152602001622df47b63ffffffff168152602001622de2b763ffffffff168152602001622dd0a563ffffffff168152602001622dbe9963ffffffff168152602001622dacd363ffffffff168152602001622d9a5d63ffffffff168152602001622d883363ffffffff168152602001622d76f163ffffffff168152602001622d64ab63ffffffff168152602001622d522d63ffffffff168152602001622d402d63ffffffff168152602001622d2eab63ffffffff168152602001622d1c0963ffffffff168152602001622d09c163ffffffff168152602001622cf79163ffffffff168152602001622ce52963ffffffff168152602001622cd2a763ffffffff168152602001622cc0a763ffffffff168152602001622cae8f63ffffffff168152602001622c9bcf63ffffffff168152602001622c8a6563ffffffff168152602001622c783b63ffffffff168152602001622c659763ffffffff168152602001622c540b63ffffffff168152602001622c41c363ffffffff168152602001622c300963ffffffff168152602001622c1d2163ffffffff168152602001622c0b4363ffffffff168152602001622bf95163ffffffff168152602001622be6ef63ffffffff168152602001622bd47163ffffffff168152602001622bc17563ffffffff168152602001622bb00d63ffffffff168152602001622b9d9963ffffffff168152602001622b8b4b63ffffffff168152602001622b78ab63ffffffff168152602001622b669763ffffffff168152602001622b54d963ffffffff168152602001622b431563ffffffff168152602001622b324163ffffffff168152602001622b1f6b63ffffffff168152602001622b0da163ffffffff168152602001622afc6763ffffffff168152602001622aea7d63ffffffff168152602001622ad9f963ffffffff168152602001622ac7d963ffffffff168152602001622ab65363ffffffff168152602001622aa42d63ffffffff168152602001622a926963ffffffff168152602001622a7f6963ffffffff168152602001622a6de763ffffffff168152602001622a5b3363ffffffff168152602001622a495163ffffffff168152602001622a375563ffffffff168152602001622a254f63ffffffff168152602001622a13c963ffffffff168152602001622a014b63ffffffff1681526020016229eeb963ffffffff1681526020016229dccd63ffffffff1681526020016229cbb763ffffffff1681526020016229b86b63ffffffff1681526020016229a63d63ffffffff1681526020016229935f63ffffffff1681526020016229808b63ffffffff16815260200162296f8d63ffffffff16815260200162295db363ffffffff16815260200162294bed63ffffffff16815260200162293a2f63ffffffff1681526020016229285563ffffffff1681526020016229169b63ffffffff168152602001622904ef63ffffffff1681526020016228f31f63ffffffff1681526020016228e19f63ffffffff1681526020016228cf5b63ffffffff1681526020016228bc2363ffffffff1681526020016228a9e363ffffffff168152602001622897d763ffffffff1681526020016228869163ffffffff168152602001622874df63ffffffff1681526020016228633963ffffffff1681526020016228515163ffffffff16815260200162283f6963ffffffff16815260200162282ce963ffffffff16815260200162281c6963ffffffff168152602001622809e163ffffffff1681526020016227f77963ffffffff1681526020016227e5a363ffffffff1681526020016227d44163ffffffff1681526020016227c17f63ffffffff1681526020016227aeef63ffffffff16815260200162279d2563ffffffff16815260200162278b7963ffffffff1681526020016227794963ffffffff1681526020016227673363ffffffff168152602001622755fd63ffffffff168152602001622744f963ffffffff168152602001622732ed63ffffffff168152602001622720ed63ffffffff16815260200162270f7763ffffffff1681526020016226fd2363ffffffff1681526020016226ebd363ffffffff1681526020016226d95963ffffffff1681526020016226c7a763ffffffff1681526020016226b4f363ffffffff1681526020016226a28d63ffffffff1681526020016226910163ffffffff1681526020016226802563ffffffff16815260200162266e7363ffffffff16815260200162265baf63ffffffff16815260200162264a1963ffffffff1681526020016226380d63ffffffff1681526020016226264363ffffffff1681526020016226150563ffffffff1681526020016226023d63ffffffff1681526020016225f0f163ffffffff1681526020016225dee163ffffffff1681526020016225cce163ffffffff1681526020016225ba9f63ffffffff1681526020016225a87563ffffffff168152602001622596b563ffffffff168152602001622584d563ffffffff1681526020016225729163ffffffff1681526020016225619563ffffffff16815260200162254fb963ffffffff16815260200162253de963ffffffff16815260200162252b7563ffffffff168152602001622519b163ffffffff1681526020016225077b63ffffffff1681526020016224f54d63ffffffff1681526020016224e3c363ffffffff1681526020016224d2af63ffffffff1681526020016224c04163ffffffff1681526020016224ad7563ffffffff16815260200162249ba763ffffffff16815260200162248a3163ffffffff168152602001622477e963ffffffff1681526020016224677b63ffffffff1681526020016224555763ffffffff1681526020016224436f63ffffffff1681526020016224312763ffffffff16815260200162241f3963ffffffff16815260200162240dc363ffffffff1681526020016223fc3b63ffffffff1681526020016223ea9f63ffffffff1681526020016223d82d63ffffffff1681526020016223c5bb63ffffffff1681526020016223b45163ffffffff1681526020016223a1f363ffffffff1681526020016223908963ffffffff16815260200162237ec363ffffffff16815260200162236bf163ffffffff1681526020016223599963ffffffff168152602001622346c163ffffffff168152602001622335d563ffffffff1681526020016223234f63ffffffff1681526020016223121d63ffffffff1681526020016223003963ffffffff1681526020016222ee6f63ffffffff1681526020016222dd2563ffffffff1681526020016222c9a363ffffffff1681526020016222b77f63ffffffff1681526020016222a67763ffffffff1681526020016222958b63ffffffff168152602001622283e963ffffffff168152602001622272ab63ffffffff168152602001622261e163ffffffff16815260200162224f3b63ffffffff16815260200162223dfb63ffffffff16815260200162222b5f63ffffffff168152602001622219a563ffffffff168152602001622207cb63ffffffff1681526020016221f6c763ffffffff1681526020016221e55b63ffffffff1681526020016221d2a363ffffffff1681526020016221c04f63ffffffff1681526020016221ae7d63ffffffff16815260200162219d7563ffffffff16815260200162218b1563ffffffff168152602001622178bf63ffffffff1681526020016221675b63ffffffff168152602001622155a963ffffffff1681526020016221436363ffffffff1681526020016221320963ffffffff16815250600d90610139620012c89291906200145b565b503415620012d557600080fd5b60405160808062002df583398101604052808051906020019091908051906020019091908051906020019091908051906020019091905050826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200153c565b82610139600701600890048101928215620014f35791602002820160005b83821115620014bf57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030262001479565b8015620014f15782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620014bf565b505b50905062001502919062001506565b5090565b6200153991905b808211156200153557600081816101000a81549063ffffffff0219169055506001016200150d565b5090565b90565b6118a9806200154c6000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f1578063132438851461017f578063521eb273146101c2578063696709a81461021757806375f6703a1461025257806377329f35146102ce5780638ed084b7146103075780639bd2af0314610361578063ad1b3909146103b6578063b60d42881461040b578063b9b7e9a714610434578063da178cb01461047a578063ec8ac4d8146104ab578063ed09aacd146104d9578063f7992d8514610537578063fe95112c14610560575b6100ef336105b5565b005b34156100fc57600080fd5b610104610628565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610144578082015181840152602081019050610129565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018a57600080fd5b6101a06004808035906020019091905050610661565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34156101cd57600080fd5b6101d5610691565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561022257600080fd5b61023c600480803561ffff169060200190919050506106b7565b6040518082815260200191505060405180910390f35b341561025d57600080fd5b6102cc600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106cf565b005b34156102d957600080fd5b610305600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610af5565b005b341561031257600080fd5b61034b600480803561ffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b37565b6040518082815260200191505060405180910390f35b341561036c57600080fd5b610374610b5c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103c157600080fd5b6103c9610b81565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561041657600080fd5b61041e610ba7565b6040518082815260200191505060405180910390f35b341561043f57600080fd5b610478600480803561ffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bad565b005b341561048557600080fd5b61048d6111f2565b604051808261ffff1661ffff16815260200191505060405180910390f35b6104d7600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506105b5565b005b34156104e457600080fd5b61051d600480803561ffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611206565b604051808215151515815260200191505060405180910390f35b341561054257600080fd5b61054a611235565b6040518082815260200191505060405180910390f35b341561056b57600080fd5b61057361123b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600860009054906101000a900460ff1615156105d057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561060c57600080fd5b6000341415151561061c57600080fd5b61062581611261565b50565b6040805190810160405280601081526020017f41746f7368696d61204b6f6e7361746f0000000000000000000000000000000081525081565b600d816101398110151561067157fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561072b57600080fd5b60405180807f746f67676c6500000000000000000000000000000000000000000000000000008152506006019050604051809103902060001916826040518082805190602001908083835b60208310151561079b5780518252602082019150602081019050602083039250610776565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156107fd57600860009054906101000a900460ff1615600860006101000a81548160ff0219169083151502179055505b60405180807f636f6c6c656374000000000000000000000000000000000000000000000000008152506007019050604051809103902060001916826040518082805190602001908083835b60208310151561086d5780518252602082019150602081019050602083039250610848565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156108ad576108ac611481565b5b60405180807f6f776e00000000000000000000000000000000000000000000000000000000008152506003019050604051809103902060001916826040518082805190602001908083835b60208310151561091d57805182526020820191506020810190506020830392506108f8565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561095e5761095d81611558565b5b60405180807f77616c6c657400000000000000000000000000000000000000000000000000008152506006019050604051809103902060001916826040518082805190602001908083835b6020831015156109ce57805182526020820191506020810190506020830392506109a9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610a0f57610a0e81611634565b5b60405180807f64696500000000000000000000000000000000000000000000000000000000008152506003019050604051809103902060001916826040518082805190602001908083835b602083101515610a7f5780518252602082019150602081019050602083039250610a5a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610af157600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5050565b6000600290505b600660009054906101000a900461ffff1661ffff168161ffff161015610b3357610b268183610bad565b8080600101915050610afc565b5050565b600a602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b6000806000808561ffff16600660009054906101000a900461ffff1661ffff16111515610bd957600080fd5b600b60008761ffff1661ffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c49576111ea565b610c536000611710565b9350610c5f6000611710565b92506101008661ffff161015610f9957600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d07e5d8887876000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515610d4257600080fd5b6102c65a03f11515610d5357600080fd5b5050506040518051905015610dd8576001600b60008861ffff1661ffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111ea565b610e9a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5d1dbe4886000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff1660ff168152602001915050602060405180830381600087803b1515610e7a57600080fd5b6102c65a03f11515610e8b57600080fd5b50505060405180519050611710565b9350610f92600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663353243b488886000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515610f7257600080fd5b6102c65a03f11515610f8357600080fd5b50505060405180519050611710565b9250611023565b610fbd600960008861ffff1661ffff16815260200190815260200160002054611710565b9350611020600a60008861ffff1661ffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611710565b92505b61107061106a600f600a0a600d8961ffff166101398110151561104257fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff1602611710565b85611737565b915061107c82846117c7565b90506001600b60008861ffff1661ffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1986836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15156111cd57600080fd5b6102c65a03f115156111de57600080fd5b50505060405180519050505b505050505050565b600660009054906101000a900461ffff1681565b600b6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60075481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006007544211156112bb576001600660008282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055506112b4620127504261185f90919063ffffffff16565b6007819055505b610138600660009054906101000a900461ffff1661ffff1611806112f3575060ff600660009054906101000a900461ffff1661ffff16105b15611358576000600860006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561135357600080fd5b61147d565b34905080600c600082825401925050819055508060096000600660009054906101000a900461ffff1661ffff1661ffff1681526020019081526020016000206000828254019250508190555080600a6000600660009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561147c57600080fd5b5b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114dd57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561155657600080fd5b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115f057600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561169057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116cc57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081829150816fffffffffffffffffffffffffffffffff1614151561173257fe5b919050565b60006117bf826fffffffffffffffffffffffffffffffff166002846fffffffffffffffffffffffffffffffff1681151561176d57fe5b046fffffffffffffffffffffffffffffffff16670de0b6b3a76400006fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff1602018115156117b957fe5b04611710565b905092915050565b6000611857670de0b6b3a76400006fffffffffffffffffffffffffffffffff166002670de0b6b3a76400006fffffffffffffffffffffffffffffffff1681151561180d57fe5b046fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16020181151561185157fe5b04611710565b905092915050565b600080828401905083811015151561187357fe5b80915050929150505600a165627a7a723058205b8614878d6d62c58d7d29902a3b4cab88de62ef5a71f84db99a8b1ed158439200290000000000000000000000007415c7bf3e2415fa9a55f1fd8b6fccf2914c39a600000000000000000000000038f22479795a1a51ccd1e5a41f09c7525fb27318000000000000000000000000de9f3378969b482b2223b7ba9c6f9b5186f3124a000000000000000000000000ae065fdded2befce6b8cbd511ab977ca25e44c5f",
  "constructorArguments": "0000000000000000000000007415c7bf3e2415fa9a55f1fd8b6fccf2914c39a600000000000000000000000038f22479795a1a51ccd1e5a41f09c7525fb27318000000000000000000000000de9f3378969b482b2223b7ba9c6f9b5186f3124a000000000000000000000000ae065fdded2befce6b8cbd511ab977ca25e44c5f"
}