{
  "address": "0xcea67610efccf2ba4f06f65ebb2c056112fe165f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ASSET",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-16\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n/*\n*ERC20\n*\n*/\ncontract ASSET {\n\n        string public name;  \n        string public symbol;  \n        uint8 public decimals = 18; \n        uint256 public total = 1000000000;\n        uint256 public totalSupply; \n\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n        event Transfer(address indexed from, address indexed to, uint256 value);\n\n        event Burn(address indexed from, uint256 value);\n\n\n        function ASSET( ) public {\n\n                totalSupply = total * 10 ** uint256(decimals);\n\n                balanceOf[msg.sender] = totalSupply;\n\n                name = \"ASSET\"; \n\n                symbol = \"ASSET\";\n\n        }\n\n     function _transfer(address _from, address _to, uint _value) internal {\n    \n        require(_to != 0x0);\n     \n        require(balanceOf[_from] >= _value);\n     \n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n  \n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n   \n        balanceOf[_from] -= _value;\n    \n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n  \n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n \n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   \n        balanceOf[msg.sender] -= _value;            \n        totalSupply -= _value;                     \n        Burn(msg.sender, _value);\n        return true;\n    }\n\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                \n        require(_value <= allowance[_from][msg.sender]);    \n        balanceOf[_from] -= _value;                       \n        allowance[_from][msg.sender] -= _value;            \n        totalSupply -= _value;                            \n        Burn(_from, _value);\n        return true;\n    }   \n\n}",
  "bytecode": "60606040526012600260006101000a81548160ff021916908360ff160217905550633b9aca0060035534156200003457600080fd5b5b600260009054906101000a900460ff1660ff16600a0a60035402600481905550600454600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506040805190810160405280600581526020017f415353455400000000000000000000000000000000000000000000000000000081525060009080519060200190620000e89291906200013e565b506040805190810160405280600581526020017f415353455400000000000000000000000000000000000000000000000000000081525060019080519060200190620001369291906200013e565b505b620001ed565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018157805160ff1916838001178555620001b2565b82800160010185558215620001b2579182015b82811115620001b157825182559160200191906001019062000194565b5b509050620001c19190620001c5565b5090565b620001ea91905b80821115620001e6576000816000905550600101620001cc565b5090565b90565b6110ae80620001fd6000396000f300606060405236156100c3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100c8578063095ea7b31461015757806318160ddd146101b157806323b872dd146101da5780632ddbd13a14610253578063313ce5671461027c57806342966c68146102ab57806370a08231146102e657806379cc67901461033357806395d89b411461038d578063a9059cbb1461041c578063cae9ca511461045e578063dd62ed3e146104fb575b600080fd5b34156100d357600080fd5b6100db610567565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011c5780820151818401525b602081019050610100565b50505050905090810190601f1680156101495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016257600080fd5b610197600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610605565b604051808215151515815260200191505060405180910390f35b34156101bc57600080fd5b6101c4610693565b6040518082815260200191505060405180910390f35b34156101e557600080fd5b610239600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610699565b604051808215151515815260200191505060405180910390f35b341561025e57600080fd5b6102666107c7565b6040518082815260200191505060405180910390f35b341561028757600080fd5b61028f6107cd565b604051808260ff1660ff16815260200191505060405180910390f35b34156102b657600080fd5b6102cc60048080359060200190919050506107e0565b604051808215151515815260200191505060405180910390f35b34156102f157600080fd5b61031d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108e5565b6040518082815260200191505060405180910390f35b341561033e57600080fd5b610373600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108fd565b604051808215151515815260200191505060405180910390f35b341561039857600080fd5b6103a0610b18565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103e15780820151818401525b6020810190506103c5565b50505050905090810190601f16801561040e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042757600080fd5b61045c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bb6565b005b341561046957600080fd5b6104e1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610bc6565b604051808215151515815260200191505060405180910390f35b341561050657600080fd5b610551600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d45565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60045481565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561072657600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506107bb848484610d6a565b600190505b9392505050565b60035481565b600260009054906101000a900460ff1681565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561083057600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b919050565b60056020528060005260406000206000915090505481565b600081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561094d57600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156109d857600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b92915050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bae5780601f10610b8357610100808354040283529160200191610bae565b820191906000526020600020905b815481529060010190602001808311610b9157829003601f168201915b505050505081565b610bc1338383610d6a565b5b5050565b600080849050610bd68585610605565b15610d3c578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610cd15780820151818401525b602081019050610cb5565b50505050905090810190601f168015610cfe5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610d1f57600080fd5b6102c65a03f11515610d3057600080fd5b50505060019150610d3d565b5b509392505050565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610d9157600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610ddf57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610e6e57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540114151561107b57fe5b5b505050505600a165627a7a72305820befa4535741d3555d95bf79f69659c14d3cbcc4fc4761071434420d2d027973b0029"
}