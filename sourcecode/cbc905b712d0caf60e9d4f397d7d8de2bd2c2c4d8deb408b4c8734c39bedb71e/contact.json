{
  "address": "0xb4652321d9b04ae8a889431755e5507a4947bd0d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KakushinToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-23\n*/\n\npragma solidity 0.4.21;\n\n/// @title SafeMath\n/// @dev Math operations with safety checks that throw on error\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/// @title Kakushin Solidity Token\n/// @author PriusLabs\ncontract KakushinToken {\n   \n   using SafeMath for uint256 ;\n   \n    string public name ;\n    string public symbol ;\n    uint8 public decimals = 18;\n   \n   \n    uint256 public totalSupply = 2400000000;\n    \n    address public constant companyWallet = 0xd9240Ac690F7764fC53e151863b5f79105c50E3d ;\n    \n    address public constant founder1Wallet = 0xcE13BC6f7168B309584b70Ae996ec6168c296427 ;    \n    \n    address public constant founder2Wallet = 0xa520044662761ad83b8cfA8Cd63c156F64104B9E ;    \n    \n    address public constant founder3Wallet = 0xF9e2d35b4C23446929330EA327895D754E17784D ;    \n    \n    address public constant founder4Wallet = 0xcc3870Ec7Cc86Cd3f267f17c5d78467d49B9FA2b ;   \n    \n    address public constant owner1 = 0x9c27c3465a7dE3E653417234A60a51C51C9E978e;\n\t\n\taddress public constant owner2 = 0x36F7f9cD70b52f4b2b8Ca861fAa4A44D8C1E4Be3;   //Address of Admin Wallet---- //\n    \n    uint startDate;\n    \n    uint endDate = 1530403199 ;\n    \n    \n\n  \n  \n    mapping (address => uint256) public balances;\n\n   \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Function that implements SafeMath for exponent operations\n    /// @param a Value to be raised to the power of @param b\n    /// @return uint256 result of the operation\n    function safeExp(uint256 a, uint256 b) private pure returns(uint256){\n        if(a == 0) { return 0; }\n        uint256 c = a;\n        uint i;\n        if(b == 0) {\n            c = 1;\n        }\n        else if(b < 0) {\n            for(i = 0; i >= b; i--) {\n                c = c.div(a);\n            }\n        }\n        else {\n            for(i = 1; i < b; i++) {\n                c = c.mul(a);\n            }\n        }\n        return c;\n    }\n    \n   /// @dev constructor function for contract, initializes the totalSupply for the owners, sets name and symbol for smart contract token\n    function KakushinToken() public {\n        totalSupply = totalSupply.mul(safeExp(10, uint256(decimals)));  // Update total supply with the decimal amount\n                      // Give the creator all initial tokens\n        name = \"KAKUSHIN\";                                   // Set the name for display purposes\n        symbol = \"KKN\";                               // Set the symbol for display purposes\n        balances[owner1] = uint256(59).mul(totalSupply.div(100));\n        balances[companyWallet] = uint256(28).mul(totalSupply.div(100));  \n        balances[founder1Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\n        balances[founder2Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\n        balances[founder3Wallet] = uint256(124800000).mul(safeExp(10, uint256(decimals)));\n        balances[founder4Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\n        startDate = now;\n        \n    }\n    \n    /// @notice send `value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to , uint value) public returns (bool success){\n        \n        require(_to != 0x0);\n        \n        require(balances[msg.sender] >= value);\n        \n        startDate = now ;\n        \n       \n        if(msg.sender == owner1 || msg.sender == owner2){\n            \n            balances[_to] = balances[_to].add(value); \n            balances[msg.sender] = balances[msg.sender].sub(value);\n            \n        }else if(startDate > endDate){\n                  \n            balances[_to] = balances[_to].add(value) ; \n            balances[msg.sender] = balances[msg.sender].sub(value) ; \n                  \n        }\n              \n        emit Transfer(msg.sender, _to, value);\n              \n        return true ;\n        \n    }\n    \n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n    \n    /// @notice Checks sale is greater than end date\n    /// @return Boolean result of the checking\n    function checkSale() public view returns(bool success) {\n        \n        \n        if(startDate > endDate){\n            return true ;\n        } else {\n            return false;\n        }\n        \n    }\n\n  \n    \n}",
  "bytecode": "60606040526012600260006101000a81548160ff021916908360ff160217905550638f0d1800600355635b38197f60055534156200003c57600080fd5b6200009362000073600a600260009054906101000a900460ff1660ff16620005426401000000000262000c60176401000000009004565b600354620006136401000000000262000d07179091906401000000009004565b6003819055506040805190810160405280600881526020017f4b414b555348494e00000000000000000000000000000000000000000000000081525060009080519060200190620000e69291906200066e565b506040805190810160405280600381526020017f4b4b4e000000000000000000000000000000000000000000000000000000000081525060019080519060200190620001349291906200066e565b506200017e6200015f6064600354620006526401000000000262000d42179091906401000000009004565b603b620006136401000000000262000d07179091906401000000009004565b60066000739c27c3465a7de3e653417234a60a51c51c9e978e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200021e620001ff6064600354620006526401000000000262000d42179091906401000000009004565b601c620006136401000000000262000d07179091906401000000009004565b6006600073d9240ac690f7764fc53e151863b5f79105c50e3d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620002ce620002ac600a600260009054906101000a900460ff1660ff16620005426401000000000262000c60176401000000009004565b6303b82600620006136401000000000262000d07179091906401000000009004565b6006600073ce13bc6f7168b309584b70ae996ec6168c29642773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200037e6200035c600a600260009054906101000a900460ff1660ff16620005426401000000000262000c60176401000000009004565b6303b82600620006136401000000000262000d07179091906401000000009004565b6006600073a520044662761ad83b8cfa8cd63c156f64104b9e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200042e6200040c600a600260009054906101000a900460ff1660ff16620005426401000000000262000c60176401000000009004565b6307704c00620006136401000000000262000d07179091906401000000009004565b6006600073f9e2d35b4c23446929330ea327895d754e17784d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620004de620004bc600a600260009054906101000a900460ff1660ff16620005426401000000000262000c60176401000000009004565b6303b82600620006136401000000000262000d07179091906401000000009004565b6006600073cc3870ec7cc86cd3f267f17c5d78467d49b9fa2b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550426004819055506200071d565b6000806000808514156200055a57600092506200060b565b849150600084141562000571576001915062000607565b6000841015620005c457600090505b8381101515620005be57620005ad8583620006526401000000000262000d42179091906401000000009004565b915080806001900391505062000580565b62000606565b600190505b838110156200060557620005f58583620006136401000000000262000d07179091906401000000009004565b91508080600101915050620005c9565b5b5b8192505b505092915050565b60008060008414156200062a57600091506200064b565b82840290508284828115156200063c57fe5b041415156200064757fe5b8091505b5092915050565b60008082848115156200066157fe5b0490508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006b157805160ff1916838001178555620006e2565b82800160010185558215620006e2579182015b82811115620006e1578251825591602001919060010190620006c4565b5b509050620006f19190620006f5565b5090565b6200071a91905b8082111562000716576000816000905550600101620006fc565b5090565b90565b610d89806200072d6000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e057806318160ddd1461016e5780631ec32d151461019757806327e235e3146101ec578063313ce5671461023957806337a1c540146102685780633c2e671e146102bd578063527097251461031257806360fb4aa01461036757806370a08231146103bc5780637368891414610409578063939de8091461045e57806395d89b411461048b578063a9059cbb14610519578063f5023de914610573575b600080fd5b34156100eb57600080fd5b6100f36105c8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610133578082015181840152602081019050610118565b50505050905090810190601f1680156101605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017957600080fd5b610181610666565b6040518082815260200191505060405180910390f35b34156101a257600080fd5b6101aa61066c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101f757600080fd5b610223600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610684565b6040518082815260200191505060405180910390f35b341561024457600080fd5b61024c61069c565b604051808260ff1660ff16815260200191505060405180910390f35b341561027357600080fd5b61027b6106af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102c857600080fd5b6102d06106c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031d57600080fd5b6103256106df565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561037257600080fd5b61037a6106f7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103c757600080fd5b6103f3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061070f565b6040518082815260200191505060405180910390f35b341561041457600080fd5b61041c610758565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561046957600080fd5b610471610770565b604051808215151515815260200191505060405180910390f35b341561049657600080fd5b61049e61078f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104de5780820151818401526020810190506104c3565b50505050905090810190601f16801561050b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561052457600080fd5b610559600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061082d565b604051808215151515815260200191505060405180910390f35b341561057e57600080fd5b610586610c11565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561065e5780601f106106335761010080835404028352916020019161065e565b820191906000526020600020905b81548152906001019060200180831161064157829003601f168201915b505050505081565b60035481565b73d9240ac690f7764fc53e151863b5f79105c50e3d81565b60066020528060005260406000206000915090505481565b600260009054906101000a900460ff1681565b73ce13bc6f7168b309584b70ae996ec6168c29642781565b73f9e2d35b4c23446929330ea327895d754e17784d81565b7336f7f9cd70b52f4b2b8ca861faa4a44d8c1e4be381565b73cc3870ec7cc86cd3f267f17c5d78467d49b9fa2b81565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b739c27c3465a7de3e653417234a60a51c51c9e978e81565b60006005546004541115610787576001905061078c565b600090505b90565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108255780601f106107fa57610100808354040283529160200191610825565b820191906000526020600020905b81548152906001019060200180831161080857829003601f168201915b505050505081565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561085457600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156108a257600080fd5b42600481905550739c27c3465a7de3e653417234a60a51c51c9e978e73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061093657507336f7f9cd70b52f4b2b8ca861faa4a44d8c1e4be373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15610a6a5761098d82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c2990919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a2282600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c4790919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ba2565b6005546004541115610ba157610ac882600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c2990919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b5d82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c4790919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b73a520044662761ad83b8cfa8cd63c156f64104b9e81565b6000808284019050838110151515610c3d57fe5b8091505092915050565b6000828211151515610c5557fe5b818303905092915050565b600080600080851415610c765760009250610cff565b8491506000841415610c8b5760019150610cfb565b6000841015610cca57600090505b8381101515610cc557610cb58583610d4290919063ffffffff16565b9150808060019003915050610c99565b610cfa565b600190505b83811015610cf957610cea8583610d0790919063ffffffff16565b91508080600101915050610ccf565b5b5b8192505b505092915050565b6000806000841415610d1c5760009150610d3b565b8284029050828482811515610d2d57fe5b04141515610d3757fe5b8091505b5092915050565b6000808284811515610d5057fe5b04905080915050929150505600a165627a7a7230582018635278606987f7dc6d5c1a934c154ce85e6687cb913e21e8fc85462d1c1c190029"
}