{
  "address": "0x4211a7ff7e6e8aa12c99737c0b74de8577af57fd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Registry",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  constructor() public payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n}\n\ncontract Registry is Destructible {\n\n    // Authorized users in the system\n    mapping (address => bool) users;\n\n    // Authroized charities in the system\n    mapping (address => bool) charities;\n\n    /**\n     * Event for authorizations\n     * @param registrar address of the account to be authorized\n     * @param role type of account either \"user\" or \"charity\"\n     * @param enabled boolean value that denotes the authorization\n     */\n    event Authorize(address indexed registrar, string role, bool enabled);\n\n    modifier validAddress(address _addr) {\n        require(_addr != address(0), \"0x0 is not a valid address\");\n        require(_addr != address(this), \"Contract address is not a valid address\");\n        _;\n    }\n\n    /**\n     * @dev Checks to see if a user is authorized in the system\n     * @param _address the address of the user\n     * @return A boolean value of the users authorization status\n     */\n    function checkUser(address _address) public view validAddress(_address) returns (bool) {\n        return users[_address];\n    }\n\n    /**\n     * @dev Checks to see if a charity is authorized in the system\n     * @param _address the address of the charity\n     * @return A boolean value of the charity's authorization status\n     */\n    function checkCharity(address _address) public view validAddress(_address) returns (bool) {\n        return charities[_address];\n    }\n\n    /**\n     * @dev Sets the authorization status of a user\n     * @param _address the address of the user\n     * @param _enable the authorization status of a user\n     */\n    function authorizeUser(address _address, bool _enable) public onlyOwner validAddress(_address) {\n        users[_address] = _enable;\n        emit Authorize(_address, \"user\", _enable);\n    }\n\n    /**\n     * @dev Sets the authorization status of a charity\n     * @param _address the address of the charity\n     * @param _enable the authorization status of a charity\n     */\n    function authorizeCharity(address _address, bool _enable) public onlyOwner validAddress(_address) {\n        charities[_address] = _enable;\n        emit Authorize(_address, \"charity\", _enable);\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e7c806100536000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e047208146100935780631e9d48cf146100e25780632bad0b991461013d57806331c9751a1461018c57806383197ef0146101e75780638da5cb5b146101fe578063f2fde38b14610255578063f5074f4114610298575b600080fd5b34801561009f57600080fd5b506100e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506102db565b005b3480156100ee57600080fd5b50610123600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061058d565b604051808215151515815260200191505060405180910390f35b34801561014957600080fd5b5061018a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610754565b005b34801561019857600080fd5b506101cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a06565b604051808215151515815260200191505060405180910390f35b3480156101f357600080fd5b506101fc610bcd565b005b34801561020a57600080fd5b50610213610c62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026157600080fd5b50610296600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c87565b005b3480156102a457600080fd5b506102d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ddc565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561033657600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156103dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f307830206973206e6f7420612076616c6964206164647265737300000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156104a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f436f6e74726163742061646472657373206973206e6f7420612076616c69642081526020017f616464726573730000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f254d6a6dc81c08dc08b506af596cb63c2923a990956ccba447c2547e28b5a46883604051808060200183151515158152602001828103825260048152602001807f75736572000000000000000000000000000000000000000000000000000000008152506020019250505060405180910390a2505050565b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f307830206973206e6f7420612076616c6964206164647265737300000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f436f6e74726163742061646472657373206973206e6f7420612076616c69642081526020017f616464726573730000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107af57600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f307830206973206e6f7420612076616c6964206164647265737300000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561091f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f436f6e74726163742061646472657373206973206e6f7420612076616c69642081526020017f616464726573730000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f254d6a6dc81c08dc08b506af596cb63c2923a990956ccba447c2547e28b5a46883604051808060200183151515158152602001828103825260078152602001807f63686172697479000000000000000000000000000000000000000000000000008152506020019250505060405180910390a2505050565b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610aae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f307830206973206e6f7420612076616c6964206164647265737300000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f436f6e74726163742061646472657373206973206e6f7420612076616c69642081526020017f616464726573730000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c2857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ce257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d1e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e3757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff00a165627a7a72305820dba03af3f91a1a39eb836bb5a6140f552e7f03d6bc734d4174e8dd250b7c59560029"
}