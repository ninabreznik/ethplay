{
  "address": "0x3625fd10e2b4e6a81e57038756e39542fe4ca02f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LiquidLong",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-03\n*/\n\npragma solidity 0.4.25;\npragma experimental ABIEncoderV2;\npragma experimental \"v0.5.0\";\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n* https://github.com/OpenZeppelin/openzeppelin-solidity/blob/56515380452baad9fcd32c5d4502002af0183ce9/contracts/math/SafeMath.sol\n*/\nlibrary SafeMath {\n\n\t/**\n\t* @dev Multiplies two numbers, throws on overflow.\n\t*/\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Integer division of two numbers, truncating the quotient.\n\t*/\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t* @dev Adds two numbers, throws on overflow.\n\t*/\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n}\n\n/**\n* @title Convenience and rounding functions when dealing with numbers already factored by 10**18 or 10**27\n* @dev Math operations with safety checks that throw on error\n* https://github.com/dapphub/ds-math/blob/87bef2f67b043819b7195ce6df3058bd3c321107/src/math.sol\n*/\nlibrary SafeMathFixedPoint {\n\tusing SafeMath for uint256;\n\n\tfunction mul27(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\t\tz = x.mul(y).add(5 * 10**26).div(10**27);\n\t}\n\tfunction mul18(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\t\tz = x.mul(y).add(5 * 10**17).div(10**18);\n\t}\n\n\tfunction div18(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\t\tz = x.mul(10**18).add(y.div(2)).div(y);\n\t}\n\tfunction div27(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\t\tz = x.mul(10**27).add(y.div(2)).div(y);\n\t}\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Basic.sol\n */\ncontract ERC20Basic {\n\tfunction totalSupply() public view returns (uint256);\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol\n */\ncontract ERC20 is ERC20Basic {\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n */\ncontract Ownable {\n\taddress public owner;\n\n\tevent OwnershipRenounced(address indexed previousOwner);\n\tevent OwnershipTransferred(\n\t\taddress indexed previousOwner,\n\t\taddress indexed newOwner\n\t);\n\n\t/**\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t * account.\n\t */\n\tconstructor() public {\n\t\towner = msg.sender;\n\t}\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t * @param newOwner The address to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n\n\t/**\n\t * @dev Allows the current owner to relinquish control of the contract.\n\t */\n\tfunction renounceOwnership() public onlyOwner {\n\t\temit OwnershipRenounced(owner);\n\t\towner = address(0);\n\t}\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Claimable.sol\n */\ncontract Claimable is Ownable {\n\taddress public pendingOwner;\n\n\t/**\n\t * @dev Modifier throws if called by any account other than the pendingOwner.\n\t */\n\tmodifier onlyPendingOwner() {\n\t\trequire(msg.sender == pendingOwner);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows the current owner to set the pendingOwner address.\n\t * @param newOwner The address to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) onlyOwner public {\n\t\tpendingOwner = newOwner;\n\t}\n\n\t/**\n\t * @dev Allows the pendingOwner address to finalize the transfer.\n\t */\n\tfunction claimOwnership() onlyPendingOwner public {\n\t\temit OwnershipTransferred(owner, pendingOwner);\n\t\towner = pendingOwner;\n\t\tpendingOwner = address(0);\n\t}\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/lifecycle/Pausable.sol\n */\ncontract Pausable is Ownable {\n\tevent Pause();\n\tevent Unpause();\n\n\tbool public paused = false;\n\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is not paused.\n\t */\n\tmodifier whenNotPaused() {\n\t\trequire(!paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is paused.\n\t */\n\tmodifier whenPaused() {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev called by the owner to pause, triggers stopped state\n\t */\n\tfunction pause() onlyOwner whenNotPaused public {\n\t\tpaused = true;\n\t\temit Pause();\n\t}\n\n\t/**\n\t * @dev called by the owner to unpause, returns to normal state\n\t */\n\tfunction unpause() onlyOwner whenPaused public {\n\t\tpaused = false;\n\t\temit Unpause();\n\t}\n}\n\n/**\n * @title PullPayment\n * @dev Base contract supporting async send for pull payments. Inherit from this\n * contract and use asyncSend instead of send or transfer.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/payment/PullPayment.sol\n */\ncontract PullPayment {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) public payments;\n\tuint256 public totalPayments;\n\n\t/**\n\t* @dev Withdraw accumulated balance, called by payee.\n\t*/\n\tfunction withdrawPayments() public {\n\t\taddress payee = msg.sender;\n\t\tuint256 payment = payments[payee];\n\n\t\trequire(payment != 0);\n\t\trequire(address(this).balance >= payment);\n\n\t\ttotalPayments = totalPayments.sub(payment);\n\t\tpayments[payee] = 0;\n\n\t\tpayee.transfer(payment);\n\t}\n\n\t/**\n\t* @dev Called by the payer to store the sent amount as credit to be pulled.\n\t* @param dest The destination address of the funds.\n\t* @param amount The amount to transfer.\n\t*/\n\tfunction asyncSend(address dest, uint256 amount) internal {\n\t\tpayments[dest] = payments[dest].add(amount);\n\t\ttotalPayments = totalPayments.add(amount);\n\t}\n}\n\ncontract Dai is ERC20 {\n\n}\n\ncontract Weth is ERC20 {\n\tfunction deposit() public payable;\n\tfunction withdraw(uint wad) public;\n}\n\ncontract Mkr is ERC20 {\n\n}\n\ncontract Peth is ERC20 {\n\n}\n\ncontract Oasis {\n\tfunction getBuyAmount(ERC20 tokenToBuy, ERC20 tokenToPay, uint256 amountToPay) external view returns(uint256 amountBought);\n\tfunction getPayAmount(ERC20 tokenToPay, ERC20 tokenToBuy, uint amountToBuy) public constant returns (uint amountPaid);\n\tfunction getBestOffer(ERC20 sell_gem, ERC20 buy_gem) public constant returns(uint offerId);\n\tfunction getWorseOffer(uint id) public constant returns(uint offerId);\n\tfunction getOffer(uint id) public constant returns (uint pay_amt, ERC20 pay_gem, uint buy_amt, ERC20 buy_gem);\n\tfunction sellAllAmount(ERC20 pay_gem, uint pay_amt, ERC20 buy_gem, uint min_fill_amount) public returns (uint fill_amt);\n}\n\ncontract Medianizer {\n\tfunction read() external view returns(bytes32);\n}\n\ncontract Maker {\n\tfunction sai() external view returns(Dai);\n\tfunction gem() external view returns(Weth);\n\tfunction gov() external view returns(Mkr);\n\tfunction skr() external view returns(Peth);\n\tfunction pip() external view returns(Medianizer);\n\n\t// Join-Exit Spread\n\t uint256 public gap;\n\n\tstruct Cup {\n\t\t// CDP owner\n\t\taddress lad;\n\t\t// Locked collateral (in SKR)\n\t\tuint256 ink;\n\t\t// Outstanding normalised debt (tax only)\n\t\tuint256 art;\n\t\t// Outstanding normalised debt\n\t\tuint256 ire;\n\t}\n\n\tuint256 public cupi;\n\tmapping (bytes32 => Cup) public cups;\n\n\tfunction lad(bytes32 cup) public view returns (address);\n\tfunction per() public view returns (uint ray);\n\tfunction tab(bytes32 cup) public returns (uint);\n\tfunction ink(bytes32 cup) public returns (uint);\n\tfunction rap(bytes32 cup) public returns (uint);\n\tfunction chi() public returns (uint);\n\n\tfunction open() public returns (bytes32 cup);\n\tfunction give(bytes32 cup, address guy) public;\n\tfunction lock(bytes32 cup, uint wad) public;\n\tfunction draw(bytes32 cup, uint wad) public;\n\tfunction join(uint wad) public;\n\tfunction wipe(bytes32 cup, uint wad) public;\n}\n\ncontract LiquidLong is Ownable, Claimable, Pausable, PullPayment {\n\tusing SafeMath for uint256;\n\tusing SafeMathFixedPoint for uint256;\n\n\tuint256 public providerFeePerEth;\n\n\tOasis public oasis;\n\tMaker public maker;\n\tDai public dai;\n\tWeth public weth;\n\tPeth public peth;\n\tMkr public mkr;\n\n\tevent NewCup(address user, bytes32 cup);\n\n\tconstructor(Oasis _oasis, Maker _maker) public payable {\n\t\tproviderFeePerEth = 0.01 ether;\n\n\t\toasis = _oasis;\n\t\tmaker = _maker;\n\t\tdai = maker.sai();\n\t\tweth = maker.gem();\n\t\tpeth = maker.skr();\n\t\tmkr = maker.gov();\n\n\t\t// Oasis buy/sell\n\t\tdai.approve(address(_oasis), uint256(-1));\n\t\t// Wipe\n\t\tdai.approve(address(_maker), uint256(-1));\n\t\tmkr.approve(address(_maker), uint256(-1));\n\t\t// Join\n\t\tweth.approve(address(_maker), uint256(-1));\n\t\t// Lock\n\t\tpeth.approve(address(_maker), uint256(-1));\n\n\t\tif (msg.value > 0) {\n\t\t\tweth.deposit.value(msg.value)();\n\t\t}\n\t}\n\n\t// Receive ETH from WETH withdraw\n\tfunction () external payable {\n\t}\n\n\tfunction wethDeposit() public payable {\n\t\tweth.deposit.value(msg.value)();\n\t}\n\n\tfunction wethWithdraw(uint256 _amount) public onlyOwner {\n\t\tweth.withdraw(_amount);\n\t\towner.transfer(_amount);\n\t}\n\n\tfunction ethWithdraw() public onlyOwner {\n\t\t// Ensure enough ether is left for PullPayments\n\t\tuint256 _amount = address(this).balance.sub(totalPayments);\n\t\towner.transfer(_amount);\n\t}\n\n\t// Affiliates and provider are only ever due raw ether, all tokens are due to owner\n\tfunction transferTokens(ERC20 _token) public onlyOwner {\n\t\t_token.transfer(owner, _token.balanceOf(this));\n\t}\n\n\tfunction ethPriceInUsd() public view returns (uint256 _attousd) {\n\t\treturn uint256(maker.pip().read());\n\t}\n\n\tfunction estimateDaiSaleProceeds(uint256 _attodaiToSell) public view returns (uint256 _daiPaid, uint256 _wethBought) {\n\t\treturn getPayPriceAndAmount(dai, weth, _attodaiToSell);\n\t}\n\n\t// buy/pay are from the perspective of the taker/caller (Oasis contracts use buy/pay terminology from perspective of the maker)\n\tfunction getPayPriceAndAmount(ERC20 _payGem, ERC20 _buyGem, uint256 _payDesiredAmount) public view returns (uint256 _paidAmount, uint256 _boughtAmount) {\n\t\tuint256 _offerId = oasis.getBestOffer(_buyGem, _payGem);\n\t\twhile (_offerId != 0) {\n\t\t\tuint256 _payRemaining = _payDesiredAmount.sub(_paidAmount);\n\t\t\t(uint256 _buyAvailableInOffer, , uint256 _payAvailableInOffer,) = oasis.getOffer(_offerId);\n\t\t\tif (_payRemaining <= _payAvailableInOffer) {\n\t\t\t\tuint256 _buyRemaining = _payRemaining.mul(_buyAvailableInOffer).div(_payAvailableInOffer);\n\t\t\t\t_paidAmount = _paidAmount.add(_payRemaining);\n\t\t\t\t_boughtAmount = _boughtAmount.add(_buyRemaining);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_paidAmount = _paidAmount.add(_payAvailableInOffer);\n\t\t\t_boughtAmount = _boughtAmount.add(_buyAvailableInOffer);\n\t\t\t_offerId = oasis.getWorseOffer(_offerId);\n\t\t}\n\t\treturn (_paidAmount, _boughtAmount);\n\t}\n\n\tfunction openCdp(uint256 _leverage, uint256 _leverageSizeInAttoeth, uint256 _allowedFeeInAttoeth, uint256 _affiliateFeeInAttoeth, address _affiliateAddress) public payable returns (bytes32 _cdpId) {\n\t\trequire(_leverage >= 100 && _leverage <= 300);\n\t\tuint256 _lockedInCdpInAttoeth = _leverageSizeInAttoeth.mul(_leverage).div(100);\n\t\tuint256 _loanInAttoeth = _lockedInCdpInAttoeth.sub(_leverageSizeInAttoeth);\n\t\tuint256 _providerFeeInAttoeth = _loanInAttoeth.mul18(providerFeePerEth);\n\t\trequire(_providerFeeInAttoeth <= _allowedFeeInAttoeth);\n\t\tuint256 _drawInAttodai = _loanInAttoeth.mul18(uint256(maker.pip().read()));\n\t\tuint256 _pethLockedInCdp = _lockedInCdpInAttoeth.div27(maker.per());\n\n\t\t// Convert ETH to WETH (only the value amount, excludes loan amount which is already WETH)\n\t\tweth.deposit.value(_leverageSizeInAttoeth)();\n\t\t// Open CDP\n\t\t_cdpId = maker.open();\n\t\t// Convert WETH into PETH\n\t\tmaker.join(_pethLockedInCdp);\n\t\t// Store PETH in CDP\n\t\tmaker.lock(_cdpId, _pethLockedInCdp);\n\t\t// Withdraw DAI from CDP\n\t\tmaker.draw(_cdpId, _drawInAttodai);\n\n\t\t// Sell all drawn DAI\n\t\tuint256 _wethBoughtInAttoweth = oasis.sellAllAmount(dai, _drawInAttodai, weth, 0);\n\t\t// SafeMath failure below catches not enough eth provided\n\t\tuint256 _refundDue = msg.value.add(_wethBoughtInAttoweth).sub(_lockedInCdpInAttoeth).sub(_providerFeeInAttoeth).sub(_affiliateFeeInAttoeth);\n\n\t\tif (_loanInAttoeth > _wethBoughtInAttoweth) {\n\t\t\tweth.deposit.value(_loanInAttoeth - _wethBoughtInAttoweth)();\n\t\t}\n\n\t\tif (_providerFeeInAttoeth != 0) {\n\t\t\tasyncSend(owner, _providerFeeInAttoeth);\n\t\t}\n\t\tif (_affiliateFeeInAttoeth != 0) {\n\t\t\tasyncSend(_affiliateAddress, _affiliateFeeInAttoeth);\n\t\t}\n\n\t\temit NewCup(msg.sender, _cdpId);\n\t\t// Send the CDP to the user\n\t\tmaker.give(_cdpId, msg.sender);\n\n\t\tif (_refundDue > 0) {\n\t\t\trequire(msg.sender.call.value(_refundDue)());\n\t\t}\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_payGem\",\"type\":\"address\"},{\"name\":\"_buyGem\",\"type\":\"address\"},{\"name\":\"_payDesiredAmount\",\"type\":\"uint256\"}],\"name\":\"getPayPriceAndAmount\",\"outputs\":[{\"name\":\"_paidAmount\",\"type\":\"uint256\"},{\"name\":\"_boughtAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wethDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_attodaiToSell\",\"type\":\"uint256\"}],\"name\":\"estimateDaiSaleProceeds\",\"outputs\":[{\"name\":\"_daiPaid\",\"type\":\"uint256\"},{\"name\":\"_wethBought\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPriceInUsd\",\"outputs\":[{\"name\":\"_attousd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leverage\",\"type\":\"uint256\"},{\"name\":\"_leverageSizeInAttoeth\",\"type\":\"uint256\"},{\"name\":\"_allowedFeeInAttoeth\",\"type\":\"uint256\"},{\"name\":\"_affiliateFeeInAttoeth\",\"type\":\"uint256\"},{\"name\":\"_affiliateAddress\",\"type\":\"address\"}],\"name\":\"openCdp\",\"outputs\":[{\"name\":\"_cdpId\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mkr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wethWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oasis\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"providerFeePerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oasis\",\"type\":\"address\"},{\"name\":\"_maker\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"NewCup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060408181526001805460a060020a60ff021916905580620021f583398101806040526200003291908101906200076a565b6000805433600160a060020a031991821617909155662386f26fc100006004908155600580548316600160a060020a0386811691909117909155600680549093168482161792839055604080517f9166cba400000000000000000000000000000000000000000000000000000000815290519390911692639166cba492828101926020929190829003018186803b158015620000cd57600080fd5b505afa158015620000e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000108919081019062000749565b60078054600160a060020a031916600160a060020a03928316179055600654604080517f7bd2bea700000000000000000000000000000000000000000000000000000000815290519190921691637bd2bea7916004808301926020929190829003018186803b1580156200017b57600080fd5b505afa15801562000190573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001b6919081019062000749565b60088054600160a060020a031916600160a060020a03928316179055600654604080517f0f8a771e00000000000000000000000000000000000000000000000000000000815290519190921691630f8a771e916004808301926020929190829003018186803b1580156200022957600080fd5b505afa1580156200023e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000264919081019062000749565b60098054600160a060020a031916600160a060020a03928316179055600654604080517f12d43a51000000000000000000000000000000000000000000000000000000008152905191909216916312d43a51916004808301926020929190829003018186803b158015620002d757600080fd5b505afa158015620002ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000312919081019062000749565b600a8054600160a060020a031916600160a060020a039283161790556007546040517f095ea7b300000000000000000000000000000000000000000000000000000000815291169063095ea7b3906200037490859060001990600401620007c5565b602060405180830381600087803b1580156200038f57600080fd5b505af1158015620003a4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620003ca919081019062000720565b506007546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b3906200041a90849060001990600401620007c5565b602060405180830381600087803b1580156200043557600080fd5b505af11580156200044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000470919081019062000720565b50600a546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b390620004c090849060001990600401620007c5565b602060405180830381600087803b158015620004db57600080fd5b505af1158015620004f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000516919081019062000720565b506008546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b3906200056690849060001990600401620007c5565b602060405180830381600087803b1580156200058157600080fd5b505af115801562000596573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620005bc919081019062000720565b506009546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b3906200060c90849060001990600401620007c5565b602060405180830381600087803b1580156200062757600080fd5b505af11580156200063c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000662919081019062000720565b506000341115620006f557600860009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0346040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b158015620006da57600080fd5b505af1158015620006ef573d6000803e3d6000fd5b50505050505b50506200080b565b60006200070b8251620007f3565b9392505050565b60006200070b8251620007f8565b6000602082840312156200073357600080fd5b6000620007418484620006fd565b949350505050565b6000602082840312156200075c57600080fd5b600062000741848462000712565b600080604083850312156200077e57600080fd5b60006200078c858562000712565b92505060206200079f8582860162000712565b9150509250929050565b620007b481620007e4565b82525050565b620007b481620007f0565b60408101620007d58285620007a9565b6200070b6020830184620007ba565b600160a060020a031690565b90565b151590565b60006200080582620007e4565b92915050565b6119da806200081b6000396000f3006080604052600436106101395763ffffffff60e060020a6000350416625b4487811461013b5780630c89a0df146101665780631a2def781461018657806335cb1f07146101b45780633f4ba83a146101bc5780633fc8cef3146101d15780634e71e0c8146101f357806350655d8c14610208578063540c755f1461021d5780635988899c146102325780635c975abb146102525780636103d70b14610274578063683e0bcd14610289578063715018a61461029e57806379c30e49146102b35780637d211c75146102c65780637e992cb8146102db5780638456cb59146102f05780638da5cb5b146103055780639b121e7c14610327578063a3afda1a14610347578063e2982c211461035c578063e30c39781461037c578063f2fde38b14610391578063f4b9fa75146103b1578063fa72c53e146103c6575b005b34801561014757600080fd5b506101506103db565b60405161015d91906118d8565b60405180910390f35b34801561017257600080fd5b506101396101813660046116f1565b6103e1565b34801561019257600080fd5b506101a66101a136600461170f565b610512565b60405161015d929190611901565b610139610797565b3480156101c857600080fd5b50610139610805565b3480156101dd57600080fd5b506101e661088e565b60405161015d919061190f565b3480156101ff57600080fd5b5061013961089d565b34801561021457600080fd5b506101e6610925565b34801561022957600080fd5b50610139610934565b34801561023e57600080fd5b506101a661024d36600461177a565b61099c565b34801561025e57600080fd5b506102676109c7565b60405161015d91906118ca565b34801561028057600080fd5b506101396109e8565b34801561029557600080fd5b50610150610a71565b3480156102aa57600080fd5b50610139610b7f565b6101506102c13660046117f9565b610beb565b3480156102d257600080fd5b506101e66112f4565b3480156102e757600080fd5b506101e6611303565b3480156102fc57600080fd5b50610139611312565b34801561031157600080fd5b5061031a6113b1565b60405161015d91906118a1565b34801561033357600080fd5b5061013961034236600461177a565b6113c0565b34801561035357600080fd5b506101e661148b565b34801561036857600080fd5b5061015061037736600461168f565b61149a565b34801561038857600080fd5b5061031a6114ac565b34801561039d57600080fd5b506101396103ac36600461168f565b6114bb565b3480156103bd57600080fd5b506101e6611501565b3480156103d257600080fd5b50610150611510565b60035481565b600054600160a060020a031633146103f857600080fd5b6000546040517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038084169263a9059cbb9291169083906370a082319061044c90309060040161190f565b60206040518083038186803b15801561046457600080fd5b505afa158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061049c91908101906116d3565b6040518363ffffffff1660e060020a0281526004016104bc9291906118af565b602060405180830381600087803b1580156104d657600080fd5b505af11580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061050e91908101906116b5565b5050565b6005546040517f0374fc6f000000000000000000000000000000000000000000000000000000008152600091829182918291829182918291600160a060020a031690630374fc6f9061056a908c908e9060040161195b565b60206040518083038186803b15801561058257600080fd5b505afa158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105ba91908101906116d3565b94505b841561078a576105d3888863ffffffff61151616565b6005546040517f4579268a000000000000000000000000000000000000000000000000000000008152919550600160a060020a031690634579268a9061061d9088906004016118d8565b60806040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061066d9190810190611798565b50935050925081841115156106c75761069c82610690868663ffffffff61152d16565b9063ffffffff61155616565b90506106ae878563ffffffff61156b16565b96506106c0868263ffffffff61156b16565b955061078a565b6106d7878363ffffffff61156b16565b96506106e9868463ffffffff61156b16565b6005546040517f943911bc000000000000000000000000000000000000000000000000000000008152919750600160a060020a03169063943911bc906107339088906004016118d8565b60206040518083038186803b15801561074b57600080fd5b505afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061078391908101906116d3565b94506105bd565b5050505050935093915050565b600860009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0346040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156107ea57600080fd5b505af11580156107fe573d6000803e3d6000fd5b5050505050565b600054600160a060020a0316331461081c57600080fd5b60015474010000000000000000000000000000000000000000900460ff16151561084557600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600854600160a060020a031681565b600154600160a060020a031633146108b457600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600654600160a060020a031681565b60008054600160a060020a0316331461094c57600080fd5b6003546109619030319063ffffffff61151616565b60008054604051929350600160a060020a03169183156108fc0291849190818181858888f1935050505015801561050e573d6000803e3d6000fd5b60075460085460009182916109be91600160a060020a03908116911685610512565b91509150915091565b60015474010000000000000000000000000000000000000000900460ff1681565b33600081815260026020526040902054801515610a0457600080fd5b3031811115610a1257600080fd5b600354610a25908263ffffffff61151616565b600355600160a060020a0382166000818152600260205260408082208290555183156108fc0291849190818181858888f19350505050158015610a6c573d6000803e3d6000fd5b505050565b600654604080517fd741e2f90000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163d741e2f9916004808301926020929190829003018186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b07919081019061175c565b600160a060020a03166357de26a46040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b7a91908101906116d3565b905090565b600054600160a060020a03163314610b9657600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008060008060008060008060648d10158015610c0a575061012c8d11155b1515610c1557600080fd5b610c2d60646106908f8f61152d90919063ffffffff16565b9650610c3f878d63ffffffff61151616565b9550610c566004548761157890919063ffffffff16565b94508a851115610c6557600080fd5b600654604080517fd741e2f90000000000000000000000000000000000000000000000000000000081529051610d7c92600160a060020a03169163d741e2f9916004808301926020929190829003018186803b158015610cc457600080fd5b505afa158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cfc919081019061175c565b600160a060020a03166357de26a46040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610d3757600080fd5b505afa158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d6f91908101906116d3565b879063ffffffff61157816565b9350610e17600660009054906101000a9004600160a060020a0316600160a060020a0316637ec9c3b86040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610dd257600080fd5b505afa158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e0a91908101906116d3565b889063ffffffff6115b516565b9250600860009054906101000a9004600160a060020a0316600160a060020a031663d0e30db08d6040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b5050600654604080517ffcfff16f0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216945063fcfff16f935060048082019350602092918290030181600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1b91908101906116d3565b6006546040517f049878f3000000000000000000000000000000000000000000000000000000008152919950600160a060020a03169063049878f390610f659086906004016118d8565b600060405180830381600087803b158015610f7f57600080fd5b505af1158015610f93573d6000803e3d6000fd5b50506006546040517fb3b77a51000000000000000000000000000000000000000000000000000000008152600160a060020a03909116925063b3b77a519150610fe2908b908790600401611901565b600060405180830381600087803b158015610ffc57600080fd5b505af1158015611010573d6000803e3d6000fd5b50506006546040517f440f19ba000000000000000000000000000000000000000000000000000000008152600160a060020a03909116925063440f19ba915061105f908b908890600401611901565b600060405180830381600087803b15801561107957600080fd5b505af115801561108d573d6000803e3d6000fd5b50506005546007546008546040517f0621b4f6000000000000000000000000000000000000000000000000000000008152600160a060020a039384169550630621b4f694506110e993928316928a92169060009060040161191d565b602060405180830381600087803b15801561110357600080fd5b505af1158015611117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061113b91908101906116d3565b91506111618a61115587818b81348963ffffffff61156b16565b9063ffffffff61151616565b9050818611156111da57600860009054906101000a9004600160a060020a0316600160a060020a031663d0e30db08388036040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156111c057600080fd5b505af11580156111d4573d6000803e3d6000fd5b50505050505b84156111f6576000546111f690600160a060020a0316866115eb565b891561120657611206898b6115eb565b7f09d6d33a845fa3f52a386be17335b767ed30f5ea181dd01e2fbf678af3c2515733896040516112379291906118af565b60405180910390a16006546040517fbaa8529c000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063baa8529c9061128a908b9033906004016118e6565b600060405180830381600087803b1580156112a457600080fd5b505af11580156112b8573d6000803e3d6000fd5b5050505060008111156112e45760405133908290600081818185875af19250505015156112e457600080fd5b5050505050505095945050505050565b600954600160a060020a031681565b600a54600160a060020a031681565b600054600160a060020a0316331461132957600080fd5b60015474010000000000000000000000000000000000000000900460ff161561135157600080fd5b6001805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600054600160a060020a031681565b600054600160a060020a031633146113d757600080fd5b6008546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600160a060020a0390911690632e1a7d4d906114209084906004016118d8565b600060405180830381600087803b15801561143a57600080fd5b505af115801561144e573d6000803e3d6000fd5b505060008054604051600160a060020a03909116935084156108fc0292508491818181858888f1935050505015801561050e573d6000803e3d6000fd5b600554600160a060020a031681565b60026020526000908152604090205481565b600154600160a060020a031681565b600054600160a060020a031633146114d257600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600754600160a060020a031681565b60045481565b60008282111561152257fe5b508082035b92915050565b600082151561153e57506000611527565b5081810281838281151561154e57fe5b041461152757fe5b6000818381151561156357fe5b049392505050565b8181018281101561152757fe5b60006115ae670de0b6b3a76400006106906706f05b59d3b200006115a2878763ffffffff61152d16565b9063ffffffff61156b16565b9392505050565b60006115ae826106906115cf82600263ffffffff61155616565b6115a2876b033b2e3c9fd0803ce800000063ffffffff61152d16565b600160a060020a038216600090815260026020526040902054611614908263ffffffff61156b16565b600160a060020a038316600090815260026020526040902055600354611640908263ffffffff61156b16565b6003555050565b60006115ae8235611976565b60006115ae8251611982565b60006115ae8251611987565b60006115ae823561198a565b60006115ae825161198a565b60006115ae8235611987565b6000602082840312156116a157600080fd5b60006116ad8484611647565b949350505050565b6000602082840312156116c757600080fd5b60006116ad8484611653565b6000602082840312156116e557600080fd5b60006116ad848461165f565b60006020828403121561170357600080fd5b60006116ad848461166b565b60008060006060848603121561172457600080fd5b6000611730868661166b565b93505060206117418682870161166b565b925050604061175286828701611683565b9150509250925092565b60006020828403121561176e57600080fd5b60006116ad8484611677565b60006020828403121561178c57600080fd5b60006116ad8484611683565b600080600080608085870312156117ae57600080fd5b60006117ba878761165f565b94505060206117cb87828801611677565b93505060406117dc8782880161165f565b92505060606117ed87828801611677565b91505092959194509250565b600080600080600060a0868803121561181157600080fd5b600061181d8888611683565b955050602061182e88828901611683565b945050604061183f88828901611683565b935050606061185088828901611683565b925050608061186188828901611647565b9150509295509295909350565b61187781611976565b82525050565b61187781611982565b61187781611987565b6118778161198a565b61187781611995565b60208101611527828461186e565b604081016118bd828561186e565b6115ae6020830184611886565b60208101611527828461187d565b602081016115278284611886565b604081016118f48285611886565b6115ae602083018461186e565b604081016118bd8285611886565b60208101611527828461188f565b6080810161192b828761188f565b6119386020830186611886565b611945604083018561188f565b6119526060830184611898565b95945050505050565b60408101611969828561188f565b6115ae602083018461188f565b600160a060020a031690565b151590565b90565b600061152782611976565b6000611527826119875600a265627a7a7230582084091fe91f4f59572860550cbd29f21a8a05015c4f82e7a9bd199648641412e56c6578706572696d656e74616cf50037000000000000000000000000b7ac09c2c0217b07d7c103029b4918a2c401eecb000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af3",
  "constructorArguments": "000000000000000000000000b7ac09c2c0217b07d7c103029b4918a2c401eecb000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af3"
}