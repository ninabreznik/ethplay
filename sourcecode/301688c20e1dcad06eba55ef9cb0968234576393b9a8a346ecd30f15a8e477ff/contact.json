{
  "address": "0x7a41e0517a5eca4fdbc7fbeba4d4c47b9ff6dc63",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "ZeusShieldCoin Token",
  "contractName": "ZeusShieldCoin",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-09\n*/\n\npragma solidity ^0.4.11;\n\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\n// ----------------------------------------------------------------------------------------------\n// Original from:\n// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n// (c) BokkyPooBah 2017. The MIT Licence.\n// ----------------------------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/issues/20\ncontract ERC20Interface {\n    // Get the total token supply     function totalSupply() constant returns (uint256 totalSupply);\n \n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) constant returns (uint256 balance);\n \n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) returns (bool success);\n\n    // Send _value amount of token from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    // this function is required for some DEX functionality\n    function approve(address _spender, uint256 _value) returns (bool success); \n    \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n   // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n \n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n// Migration Agent interface\ncontract migration {\n    function migrateFrom(address _from, uint256 _value);\n}\n\n/// @title Zeus Shield Coin (ZSC)\ncontract ZeusShieldCoin is owned, ERC20Interface {\n    // Public variables of the token\n    string public constant standard = 'ERC20';\n    string public constant name = 'Zeus Shield Coin';  \n    string public constant symbol = 'ZSC';\n    uint8  public constant decimals = 18;\n    uint public registrationTime = 0;\n    bool public registered = false;\n\n    uint256 public totalMigrated = 0;\n    address public migrationAgent = 0;\n\n    uint256 totalTokens = 0; \n\n\n    // This creates an array with all balances \n    mapping (address => uint256) balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n   \n    // These are related to ZSC team members\n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint[3]) public frozenTokens;\n\n    // Variables of token frozen rules for ZSC team members.\n    uint[3] public unlockat;\n\n    event Migrate(address _from, address _to, uint256 _value);\n\n    // Constructor\n    function ZeusShieldCoin() \n    {\n    }\n\n    // This unnamed function is called whenever someone tries to send ether to it \n    function () \n    {\n        throw; // Prevents accidental sending of ether\n    }\n\n    function totalSupply() \n        constant \n        returns (uint256) \n    {\n        return totalTokens;\n    }\n\n    // What is the balance of a particular account?\n    function balanceOf(address _owner) \n        constant \n        returns (uint256) \n    {\n        return balances[_owner];\n    }\n\n    // Transfer the balance from owner's account to another account\n    function transfer(address _to, uint256 _amount) \n        returns (bool success) \n    {\n        if (!registered) return false;\n        if (_amount <= 0) return false;\n        if (frozenRules(msg.sender, _amount)) return false;\n\n        if (balances[msg.sender] >= _amount\n            && balances[_to] + _amount > balances[_to]) {\n\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }     \n    }\n \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address _from, address _to, uint256 _amount) \n        returns (bool success) \n    {\n        if (!registered) return false;\n        if (_amount <= 0) return false;\n        if (frozenRules(_from, _amount)) return false;\n\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && balances[_to] + _amount > balances[_to]) {\n\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.     \n    function approve(address _spender, uint256 _amount) \n        returns (bool success) \n    {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) \n        constant \n        returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender];\n    }\n\n    /// @dev Set address of migration agent contract and enable migration\n    /// @param _agent The address of the MigrationAgent contract\n    function setMigrationAgent(address _agent) \n        public\n        onlyOwner\n    {\n        if (!registered) throw;\n        if (migrationAgent != 0) throw;\n        migrationAgent = _agent;\n    }\n\n    /// @dev Buyer can apply for migrating tokens to the new token contract.\n    /// @param _value The amount of token to be migrated\n    function applyMigrate(uint256 _value) \n        public\n    {\n        if (!registered) throw;\n        if (migrationAgent == 0) throw;\n\n        // Validate input value.\n        if (_value == 0) throw;\n        if (_value > balances[msg.sender]) throw;\n\n        balances[msg.sender] -= _value;\n        totalTokens -= _value;\n        totalMigrated += _value;\n        migration(migrationAgent).migrateFrom(msg.sender, _value);\n        Migrate(msg.sender, migrationAgent, _value);\n    }\n\n\n    /// @dev Register for crowdsale and do the token pre-allocation.\n    /// @param _tokenFactory The address of ICO-sale contract\n    /// @param _congressAddress The address of multisig token contract\n    function registerSale(address _tokenFactory, address _congressAddress) \n        public\n        onlyOwner \n    {\n        // The token contract can be only registered once.\n        if (!registered) {\n            // Total supply\n            totalTokens  = 6100 * 1000 * 1000 * 10**18; \n\n            // (51%) of total supply to ico-sale contract\n            balances[_tokenFactory]    = 3111 * 1000 * 1000 * 10**18;\n\n            // (34%) of total supply to the congress address for congress and partners\n            balances[_congressAddress] = 2074 * 1000 * 1000 * 10**18;\n\n            // Allocate rest (15%) of total supply to development team and contributors\n            // 915,000,000 * 10**18;\n            teamAllocation();\n\n            registered = true;\n            registrationTime = now;\n\n            unlockat[0] = registrationTime +  6 * 30 days;\n            unlockat[1] = registrationTime + 12 * 30 days;\n            unlockat[2] = registrationTime + 24 * 30 days;\n        }\n    }\n\n    /// @dev Allocate 15% of total supply to ten team members.\n    /// @param _account The address of account to be frozen.\n    /// @param _totalAmount The amount of tokens to be frozen.\n    function freeze(address _account, uint _totalAmount) \n        public\n        onlyOwner \n    {\n        frozenAccount[_account] = true;  \n        frozenTokens[_account][0] = _totalAmount;            // 100% of locked token within 6 months\n        frozenTokens[_account][1] = _totalAmount * 80 / 100; //  80% of locked token within 12 months\n        frozenTokens[_account][2] = _totalAmount * 50 / 100; //  50% of locked token within 24 months\n    }\n\n    /// @dev Allocate 15% of total supply to the team members.\n    function teamAllocation() \n        internal \n    {\n        // 1.5% of total supply allocated to each team member.\n        uint individual = 91500 * 1000 * 10**18;\n\n        balances[0xCDc5BDEFC6Fddc66E73250fCc2F08339e091dDA3] = individual; // 1.5% \n        balances[0x8b47D27b085a661E6306Ac27A932a8c0b1C11b84] = individual; // 1.5% \n        balances[0x825f4977DB4cd48aFa51f8c2c9807Ee89120daB7] = individual; // 1.5% \n        balances[0xcDf5D7049e61b2F50642DF4cb5a005b1b4A5cfc2] = individual; // 1.5% \n        balances[0xab0461FB41326a960d3a2Fe2328DD9A65916181d] = individual; // 1.5% \n        balances[0xd2A131F16e4339B2523ca90431322f559ABC4C3d] = individual; // 1.5%\n        balances[0xCcB4d663E6b05AAda0e373e382628B9214932Fff] = individual; // 1.5% \n        balances[0x60284720542Ff343afCA6a6DBc542901942260f2] = individual; // 1.5% \n        balances[0xcb6d0e199081A489f45c73D1D22F6de58596a99C] = individual; // 1.5% \n        balances[0x928D99333C57D31DB917B4c67D4d8a033F2143A7] = individual; // 1.5% \n\n        // Freeze tokens allocated to the team for at most two years.\n        // Freeze tokens in three phases\n        // 91500 * 1000 * 10**18; 100% of locked tokens within 6 months\n        // 73200 * 1000 * 10**18;  80% of locked tokens within 12 months\n        // 45750 * 1000 * 10**18;  50% of locked tokens within 24 months\n        freeze(\"0xCDc5BDEFC6Fddc66E73250fCc2F08339e091dDA3\", individual);\n        freeze(\"0x8b47D27b085a661E6306Ac27A932a8c0b1C11b84\", individual);\n        freeze(\"0x825f4977DB4cd48aFa51f8c2c9807Ee89120daB7\", individual);\n        freeze(\"0xcDf5D7049e61b2F50642DF4cb5a005b1b4A5cfc2\", individual);\n        freeze(\"0xab0461FB41326a960d3a2Fe2328DD9A65916181d\", individual);\n        freeze(\"0xd2A131F16e4339B2523ca90431322f559ABC4C3d\", individual);\n        freeze(\"0xCcB4d663E6b05AAda0e373e382628B9214932Fff\", individual);\n        freeze(\"0x60284720542Ff343afCA6a6DBc542901942260f2\", individual);\n        freeze(\"0xcb6d0e199081A489f45c73D1D22F6de58596a99C\", individual);\n        freeze(\"0x928D99333C57D31DB917B4c67D4d8a033F2143A7\", individual);\n    }\n\n    /// @dev Token frozen rules for token holders.\n    /// @param _from The token sender.\n    /// @param _value The token amount.\n    function frozenRules(address _from, uint256 _value) \n        internal \n        returns (bool success) \n    {\n        if (frozenAccount[_from]) {\n            if (now < unlockat[0]) {\n               // 100% locked within the first 6 months.\n               if (balances[_from] - _value < frozenTokens[_from][0]) \n                    return true;  \n            } else if (now >= unlockat[0] && now < unlockat[1]) {\n               // 20% unlocked after 6 months.\n               if (balances[_from] - _value < frozenTokens[_from][1]) \n                    return true;  \n            } else if (now >= unlockat[1] && now < unlockat[2]) {\n               // 50% unlocked after 12 months. \n               if (balances[_from]- _value < frozenTokens[_from][2]) \n                   return true;  \n            } else {\n               // 100% unlocked after 24 months.\n               frozenAccount[_from] = false; \n            }\n        }\n        return false;\n    }   \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"_congressAddress\",\"type\":\"address\"}],\"name\":\"registerSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"applyMigrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockat\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}