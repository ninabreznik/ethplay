{
  "address": "0xa31b1767e09f842ecfd4bc471fe44f830e3891aa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "ROOBEE Token",
  "contractName": "RoobeeToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance.\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n\n    uint256 public maxSupply;\n    uint256 public tokensMinted;\n\n    constructor  (uint256 _maxSupply) public {\n        require(_maxSupply > 0);\n        maxSupply = _maxSupply;\n    }\n\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        require(tokensMinted.add(value) <= maxSupply);\n        tokensMinted = tokensMinted.add(value);\n        _mint(to, value);\n        return true;\n    }\n\n}\n\n\ncontract RoobeeToken is ERC20Burnable, ERC20Mintable {\n\n    string public constant name = \"ROOBEE\";\n    string public constant symbol = \"ROOBEE\";\n    uint8 public constant decimals = 18;\n\n    struct FreezeParams {\n        uint256 timestamp;\n        uint256 value;\n        bool subsequentUnlock;\n    }\n\n    mapping (address => FreezeParams) private _freezed;\n\n    constructor () public ERC20Mintable(5400000000 * 1e18) {\n    }\n\n    function freezeOf(address owner) public view returns (uint256) {\n        if (_freezed[owner].timestamp <= now){\n            if (_freezed[owner].subsequentUnlock){\n                uint256  monthsPassed;\n                monthsPassed = now.sub(_freezed[owner].timestamp).div(30 days);\n                if (monthsPassed >= 10)\n                {\n                    return 0;\n                }\n                else\n                {\n                    return _freezed[owner].value.mul(10-monthsPassed).div(10);\n                }\n            }\n            else {\n                return 0;\n            }\n        }\n        else\n        {\n            return _freezed[owner].value;\n        }\n    }\n\n    function freezeFor(address owner) public view returns (uint256) {\n        return _freezed[owner].timestamp;\n    }\n\n    function getAvailableBalance(address from) public view returns (uint256) {\n\n        return balanceOf(from).sub(freezeOf(from));\n    }\n\n    function mintWithFreeze(address _to, uint256 _value, uint256 _unfreezeTimestamp, bool _subsequentUnlock) public onlyMinter returns (bool) {\n        require(now < _unfreezeTimestamp);\n        _setHold(_to, _value, _unfreezeTimestamp, _subsequentUnlock);\n        mint(_to, _value);\n        return true;\n    }\n\n    function _setHold(address to, uint256 value, uint256 unfreezeTimestamp, bool subsequentUnlock) private {\n        FreezeParams memory freezeData;\n        freezeData = _freezed[to];\n        // freeze timestamp is unchangable\n        if (freezeData.timestamp == 0) {\n            freezeData.timestamp = unfreezeTimestamp;\n            freezeData.subsequentUnlock = subsequentUnlock;\n        }\n        freezeData.value = freezeData.value.add(value);\n        _freezed[to] = freezeData;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(getAvailableBalance(msg.sender) >= value);\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(getAvailableBalance(from) >= value);\n        return super.transferFrom(from, to, value);\n    }\n\n    function burn(uint256 value) public {\n        require(getAvailableBalance(msg.sender) >= value);\n        super.burn(value);\n    }\n\n    function burnFrom(address from, uint256 value) public  {\n        require(getAvailableBalance(from) >= value);\n        super.burnFrom(from, value);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, string memory _extraData\n    ) public returns (bool success) {\n        approve(_spender, _value);\n\n        // This portion is copied from ConsenSys's Standard Token Contract. It\n        //  calls the approvalFallback function that is part of the contract that\n        //  is being approved (`_spender`). The function should look like:\n        //  `approvalFallback(address _from, uint256 _value, address\n        //  _token, string memory _extraData)` It is assumed that the call\n        //  *should* succeed, otherwise the plain vanilla approve would be used\n        CallReceiver(_spender).approvalFallback(\n           msg.sender,\n           _value,\n           address(this),\n           _extraData\n        );\n        return true;\n    }\n\n}\n\ncontract CallReceiver {\n    function approvalFallback(address _from, uint256 _value, address _token, string memory _extraData) public ;\n}",
  "bytecode": "60806040523480156200001157600080fd5b506b1172c67a9232b47c18000000620000393362000057640100000000026401000000009004565b6000811115156200004957600080fd5b806004819055505062000219565b6200007b816003620000c16401000000000262001dc5179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620000fe57600080fd5b62000119828262000184640100000000026401000000009004565b1515156200012657600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620001c257600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611f7480620002296000396000f3fe60806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610143578063095ea7b3146101d357806318160ddd1461024657806323b872dd146102715780632fe97e3a14610304578063313ce5671461040e578063395093511461043f57806340c10f19146104b257806342966c68146105255780636c24a76f146105605780636de9f32b146105c557806370a08231146105f057806379cc67901461065557806395d89b41146106b0578063983b2d56146107405780639865027514610791578063a457c2d7146107a8578063a9059cbb1461081b578063aa271e1a1461088e578063bc9990f5146108f7578063cd4217c11461095c578063cf8e359b146109c1578063d5abeb0114610a4a578063dd62ed3e14610a75575b600080fd5b34801561014f57600080fd5b50610158610afa565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b5061022c600480360360408110156101f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b33565b604051808215151515815260200191505060405180910390f35b34801561025257600080fd5b5061025b610b4a565b6040518082815260200191505060405180910390f35b34801561027d57600080fd5b506102ea6004803603606081101561029457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b54565b604051808215151515815260200191505060405180910390f35b34801561031057600080fd5b506103f46004803603606081101561032757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561036e57600080fd5b82018360208201111561038057600080fd5b803590602001918460018302840111640100000000831117156103a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b81565b604051808215151515815260200191505060405180910390f35b34801561041a57600080fd5b50610423610cf5565b604051808260ff1660ff16815260200191505060405180910390f35b34801561044b57600080fd5b506104986004803603604081101561046257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cfa565b604051808215151515815260200191505060405180910390f35b3480156104be57600080fd5b5061050b600480360360408110156104d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d9f565b604051808215151515815260200191505060405180910390f35b34801561053157600080fd5b5061055e6004803603602081101561054857600080fd5b8101908080359060200190929190505050610e09565b005b34801561056c57600080fd5b506105af6004803603602081101561058357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e2c565b6040518082815260200191505060405180910390f35b3480156105d157600080fd5b506105da610e58565b6040518082815260200191505060405180910390f35b3480156105fc57600080fd5b5061063f6004803603602081101561061357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e5e565b6040518082815260200191505060405180910390f35b34801561066157600080fd5b506106ae6004803603604081101561067857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ea6565b005b3480156106bc57600080fd5b506106c5610ecb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107055780820151818401526020810190506106ea565b50505050905090810190601f1680156107325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561074c57600080fd5b5061078f6004803603602081101561076357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f04565b005b34801561079d57600080fd5b506107a6610f24565b005b3480156107b457600080fd5b50610801600480360360408110156107cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f2f565b604051808215151515815260200191505060405180910390f35b34801561082757600080fd5b506108746004803603604081101561083e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fd4565b604051808215151515815260200191505060405180910390f35b34801561089a57600080fd5b506108dd600480360360208110156108b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fff565b604051808215151515815260200191505060405180910390f35b34801561090357600080fd5b506109466004803603602081101561091a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061101c565b6040518082815260200191505060405180910390f35b34801561096857600080fd5b506109ab6004803603602081101561097f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611068565b6040518082815260200191505060405180910390f35b3480156109cd57600080fd5b50610a30600480360360808110156109e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190505050611253565b604051808215151515815260200191505060405180910390f35b348015610a5657600080fd5b50610a5f61129a565b6040518082815260200191505060405180910390f35b348015610a8157600080fd5b50610ae460048036036040811015610a9857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112a0565b6040518082815260200191505060405180910390f35b6040805190810160405280600681526020017f524f4f424545000000000000000000000000000000000000000000000000000081525081565b6000610b40338484611327565b6001905092915050565b6000600254905090565b600081610b6085610e2c565b10151515610b6d57600080fd5b610b7884848461148a565b90509392505050565b6000610b8d8484610b33565b508373ffffffffffffffffffffffffffffffffffffffff1663ad34c33b338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c83578082015181840152602081019050610c68565b50505050905090810190601f168015610cb05780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b50505050600190509392505050565b601281565b6000610d953384610d9085600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461153b90919063ffffffff16565b611327565b6001905092915050565b6000610daa33610fff565b1515610db557600080fd5b600454610dcd8360055461153b90919063ffffffff16565b11151515610dda57600080fd5b610def8260055461153b90919063ffffffff16565b600581905550610dff838361155c565b6001905092915050565b80610e1333610e2c565b10151515610e2057600080fd5b610e29816116b0565b50565b6000610e51610e3a83611068565b610e4384610e5e565b6116bd90919063ffffffff16565b9050919050565b60055481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80610eb083610e2c565b10151515610ebd57600080fd5b610ec782826116df565b5050565b6040805190810160405280600681526020017f524f4f424545000000000000000000000000000000000000000000000000000081525081565b610f0d33610fff565b1515610f1857600080fd5b610f21816116ed565b50565b610f2d33611747565b565b6000610fca3384610fc585600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116bd90919063ffffffff16565b611327565b6001905092915050565b600081610fe033610e2c565b10151515610fed57600080fd5b610ff783836117a1565b905092915050565b60006110158260036117b890919063ffffffff16565b9050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b600042600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411151561120857600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16156111ff57600061117662278d00611168600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154426116bd90919063ffffffff16565b61184c90919063ffffffff16565b9050600a8110151561118c57600091505061124e565b6111f7600a6111e983600a03600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461187690919063ffffffff16565b61184c90919063ffffffff16565b91505061124e565b6000905061124e565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490505b919050565b600061125e33610fff565b151561126957600080fd5b824210151561127757600080fd5b611283858585856118b4565b61128d8585610d9f565b5060019050949350505050565b60045481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561136357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561139f57600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b60006114978484846119fe565b611530843361152b85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116bd90919063ffffffff16565b611327565b600190509392505050565b600080828401905083811015151561155257600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561159857600080fd5b6115ad8160025461153b90919063ffffffff16565b600281905550611604816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461153b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6116ba3382611bca565b50565b60008282111515156116ce57600080fd5b600082840390508091505092915050565b6116e98282611d1e565b5050565b611701816003611dc590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61175b816003611e7590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60006117ae3384846119fe565b6001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156117f557600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000808211151561185c57600080fd5b6000828481151561186957fe5b0490508091505092915050565b60008083141561188957600090506118ae565b6000828402905082848281151561189c57fe5b041415156118a957600080fd5b809150505b92915050565b6118bc611f24565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16151515158152505090506000816000015114156119605782816000018181525050818160400190151590811515815250505b61197784826020015161153b90919063ffffffff16565b81602001818152505080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a3a57600080fd5b611a8b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116bd90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b1e816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461153b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611c0657600080fd5b611c1b816002546116bd90919063ffffffff16565b600281905550611c72816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116bd90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b611d288282611bca565b611dc18233611dbc84600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116bd90919063ffffffff16565b611327565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e0157600080fd5b611e0b82826117b8565b151515611e1757600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611eb157600080fd5b611ebb82826117b8565b1515611ec657600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6060604051908101604052806000815260200160008152602001600015158152509056fea165627a7a72305820b7e465e99c718b9625aa8516f0edde3e7d3a5aa66fe68835fa03a868eec7fc770029"
}