{
  "address": "0x4b94c8567763654101f690cf4d54957206383b75",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Neoworld Cash",
  "contractName": "NeoWorldCash",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-22\n*/\n\npragma solidity 0.4.21;\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\ncontract Pausable is Ownable {\n\tevent Pause();\n\tevent Unpause();\n\n\tbool public paused = false;\n\n\n\t/**\n\t * @dev modifier to allow actions only when the contract IS paused\n\t */\n\tmodifier whenNotPaused() {\n\t\trequire(!paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev modifier to allow actions only when the contract IS NOT paused\n\t */\n\tmodifier whenPaused {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev called by the owner to pause, triggers stopped state\n\t */\n\tfunction pause() onlyOwner whenNotPaused public returns (bool) {\n\t\tpaused = true;\n\t\temit Pause();\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev called by the owner to unpause, returns to normal state\n\t */\n\tfunction unpause() onlyOwner whenPaused public returns (bool) {\n\t\tpaused = false;\n\t\temit Unpause();\n\t\treturn true;\n\t}\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary ContractLib {\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n\tfunction isContract(address _addr) internal view returns (bool) {\n\t\tuint length;\n\t\tassembly {\n\t\t\t//retrieve the size of the code on target address, this needs assembly\n\t\t\tlength := extcodesize(_addr)\n\t\t}\n\t\treturn (length>0);\n\t}\n}\n\n/*\n* Contract that is working with ERC223 tokens\n*/\n \ncontract ContractReceiver {\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public pure;\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n\tfunction totalSupply() public constant returns (uint);\n\tfunction balanceOf(address tokenOwner) public constant returns (uint);\n\tfunction allowance(address tokenOwner, address spender) public constant returns (uint);\n\tfunction transfer(address to, uint tokens) public returns (bool);\n\tfunction approve(address spender, uint tokens) public returns (bool);\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool);\n\n\tfunction name() public constant returns (string);\n\tfunction symbol() public constant returns (string);\n\tfunction decimals() public constant returns (uint8);\n\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n /**\n * ERC223 token by Dexaran\n *\n * https://github.com/Dexaran/ERC223-token-standard\n */\n \n\n /* New ERC223 contract interface */\n \ncontract ERC223 is ERC20Interface {\n\tfunction transfer(address to, uint value, bytes data) public returns (bool);\n\t\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\n\tevent Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\n \ncontract NeoWorldCash is ERC223, Pausable {\n\n\tusing SafeMath for uint256;\n\tusing ContractLib for address;\n\n\tmapping(address => uint) balances;\n\tmapping(address => mapping(address => uint)) allowed;\n\t\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tuint256 public totalSupply;\n\n\tevent Burn(address indexed from, uint256 value);\n\t\n\t// ------------------------------------------------------------------------\n\t// Constructor\n\t// ------------------------------------------------------------------------\n\tfunction NeoWorldCash() public {\n\t\tsymbol = \"NASH\";\n\t\tname = \"NEOWORLD CASH\";\n\t\tdecimals = 18;\n\t\ttotalSupply = 100000000000 * 10**uint(decimals);\n\t\tbalances[msg.sender] = totalSupply;\n\t\temit Transfer(address(0), msg.sender, totalSupply);\n\t}\n\t\n\t\n\t// Function to access name of token .\n\tfunction name() public constant returns (string) {\n\t\treturn name;\n\t}\n\t// Function to access symbol of token .\n\tfunction symbol() public constant returns (string) {\n\t\treturn symbol;\n\t}\n\t// Function to access decimals of token .\n\tfunction decimals() public constant returns (uint8) {\n\t\treturn decimals;\n\t}\n\t// Function to access total supply of tokens .\n\tfunction totalSupply() public constant returns (uint256) {\n\t\treturn totalSupply;\n\t}\n\t\n\t// Function that is called when a user or another contract wants to transfer funds .\n\tfunction transfer(address _to, uint _value, bytes _data) public whenNotPaused returns (bool) {\n\t\trequire(_to != 0x0);\n\t\tif(_to.isContract()) {\n\t\t\treturn transferToContract(_to, _value, _data);\n\t\t}\n\t\telse {\n\t\t\treturn transferToAddress(_to, _value, _data);\n\t\t}\n\t}\n\t\n\t// Standard function transfer similar to ERC20 transfer with no _data .\n\t// Added due to backwards compatibility reasons .\n\tfunction transfer(address _to, uint _value) public whenNotPaused returns (bool) {\n\t\t//standard function transfer similar to ERC20 transfer with no _data\n\t\t//added due to backwards compatibility reasons\n\t\trequire(_to != 0x0);\n\n\t\tbytes memory empty;\n\t\tif(_to.isContract()) {\n\t\t\treturn transferToContract(_to, _value, empty);\n\t\t}\n\t\telse {\n\t\t\treturn transferToAddress(_to, _value, empty);\n\t\t}\n\t}\n\n\n\n\t//function that is called when transaction target is an address\n\tfunction transferToAddress(address _to, uint _value, bytes _data) private returns (bool) {\n\t\tbalances[msg.sender] = balanceOf(msg.sender).sub(_value);\n\t\tbalances[_to] = balanceOf(_to).add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\temit Transfer(msg.sender, _to, _value, _data);\n\t\treturn true;\n\t}\n\t\n  //function that is called when transaction target is a contract\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n\t    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n\t    balances[_to] = balanceOf(_to).add(_value);\n\t    ContractReceiver receiver = ContractReceiver(_to);\n\t    receiver.tokenFallback(msg.sender, _value, _data);\n\t    emit Transfer(msg.sender, _to, _value);\n\t    emit Transfer(msg.sender, _to, _value, _data);\n\t    return true;\n\t}\n\t\n\tfunction balanceOf(address _owner) public constant returns (uint) {\n\t\treturn balances[_owner];\n\t}  \n\n\tfunction burn(uint256 _value) public whenNotPaused returns (bool) {\n\t\trequire (_value > 0); \n\t\trequire (balanceOf(msg.sender) >= _value);            // Check if the sender has enough\n\t\tbalances[msg.sender] = balanceOf(msg.sender).sub(_value);                      // Subtract from the sender\n\t\ttotalSupply = totalSupply.sub(_value);                                // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\n\t// from the token owner's account\n\t//\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\t// recommends that there are no checks for the approval double-spend attack\n\t// as this should be implemented in user interfaces \n\t// ------------------------------------------------------------------------\n\tfunction approve(address spender, uint tokens) public whenNotPaused returns (bool) {\n\t\tallowed[msg.sender][spender] = tokens;\n\t\temit Approval(msg.sender, spender, tokens);\n\t\treturn true;\n\t}\n\n\tfunction increaseApproval (address _spender, uint _addedValue) public whenNotPaused\n\t    returns (bool success) {\n\t    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t    return true;\n\t}\n\n\tfunction decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused\n\t    returns (bool success) {\n\t    uint oldValue = allowed[msg.sender][_spender];\n\t    if (_subtractedValue > oldValue) {\n\t      allowed[msg.sender][_spender] = 0;\n\t    } else {\n\t      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t    }\n\t    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t    return true;\n\t}\t\n\n\t// ------------------------------------------------------------------------\n\t// Transfer `tokens` from the `from` account to the `to` account\n\t// \n\t// The calling account must already have sufficient tokens approve(...)-d\n\t// for spending from the `from` account and\n\t// - From account must have sufficient balance to transfer\n\t// - Spender must have sufficient allowance to transfer\n\t// - 0 value transfers are allowed\n\t// ------------------------------------------------------------------------\n\tfunction transferFrom(address from, address to, uint tokens) public whenNotPaused returns (bool) {\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\t\tbalances[from] = balances[from].sub(tokens);\n\t\tbalances[to] = balances[to].add(tokens);\n\t\temit Transfer(from, to, tokens);\n\t\treturn true;\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Returns the amount of tokens approved by the owner that can be\n\t// transferred to the spender's account\n\t// ------------------------------------------------------------------------\n\tfunction allowance(address tokenOwner, address spender) public constant returns (uint) {\n\t\treturn allowed[tokenOwner][spender];\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Don't accept ETH\n\t// ------------------------------------------------------------------------\n\tfunction () public payable {\n\t\trevert();\n\t}\n\n\t// ------------------------------------------------------------------------\n\t// Owner can transfer out any accidentally sent ERC20 tokens\n\t// ------------------------------------------------------------------------\n\tfunction transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool) {\n\t\treturn ERC20Interface(tokenAddress).transfer(owner, tokens);\n\t}\n\n\t/* RO Token 预售 */\n\t/*\n\t预售的操作流程：\n\t1. 发行需要的新的ERC20 Token\n\t2. 将此Token的预售份额转入本合约地址\n\t3. 设定预售时间和价格\n\t4. 用户可以用过 joinPreSale 函数参加预售，卖完，逾期或者主动结束为止\n\t5. 管理员把预售的到的Nash转出\n\tMISC：因为必须制作预售页面通过MetaMask调用函数所以不存在交易所地址转账的问题。\n\tMISC：外部项目无法自行使用本预售功能\n\t*/\n\taddress[] supportedERC20Token;\n\tmapping (address => bool) tokenSupported;\n\tmapping (address => uint256) prices;\n\tmapping (address => uint256) starttime;\n\tmapping (address => uint256) endtime;\n\n\tuint256 maxTokenCountPerTrans = 10000;\n\tuint256 nashInPool;\n\n\tevent AddSupportedToken(\n\t\taddress _address, \n\t\tuint256 _price, \n\t\tuint256 _startTime, \n\t\tuint256 _endTime);\n\n\tevent RemoveSupportedToken(\n\t\taddress _address\n\t);\n\n\tfunction addSupportedToken(\n\t\taddress _address, \n\t\tuint256 _price, \n\t\tuint256 _startTime, \n\t\tuint256 _endTime\n\t) public onlyOwner returns (bool) {\n\t\t\n\t\trequire(_address != 0x0);\n\t\trequire(_address.isContract());\n\t\trequire(_startTime < _endTime);\n\t\trequire(_price > 0);\n\t\trequire(_endTime > block.timestamp);\n\n\t\tfor (uint256 i = 0; i < supportedERC20Token.length; i++) {\n\t\t\trequire(supportedERC20Token[i] != _address);\n\t\t}\n\n\t\tsupportedERC20Token.push(_address);\n\t\ttokenSupported[_address] = true;\n\t\tprices[_address] = _price;\n\t\tstarttime[_address] = _startTime;\n\t\tendtime[_address] = _endTime;\n\n\t\temit AddSupportedToken(_address, _price, _startTime, _endTime);\n\n\t\treturn true;\n\t}\n\n\tfunction removeSupportedToken(address _address) public onlyOwner returns (bool) {\n\t\trequire(_address != 0x0);\n\t\tuint256 length = supportedERC20Token.length;\n\t\tfor (uint256 i = 0; i < length; i++) {\n\t\t\tif (supportedERC20Token[i] == _address) {\n\t\t\t\tif (i != length - 1) {\n\t\t\t\t\tsupportedERC20Token[i] = supportedERC20Token[length - 1];\n\t\t\t\t}\n                delete supportedERC20Token[length-1];\n\t\t\t\tsupportedERC20Token.length--;\n\n\t\t\t\tprices[_address] = 0;\n\t\t\t\tstarttime[_address] = 0;\n\t\t\t\tendtime[_address] = 0;\n\t\t\t\ttokenSupported[_address] = false;\n\n\t\t\t\temit RemoveSupportedToken(_address);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tmodifier canBuy(address _address) { \n\t\trequire(tokenSupported[_address]);\n\t\trequire(block.timestamp > starttime[_address]);\n\t\trequire(block.timestamp < endtime[_address]);\n\t\t_; \n\t}\n\n\tfunction joinPreSale(address _tokenAddress, uint256 _tokenCount) public canBuy(_tokenAddress) returns (bool) {\n\t\trequire(prices[_tokenAddress] > 0);\n\t\tuint256 total = _tokenCount.mul(prices[_tokenAddress]); // will not overflow here since the price will not be high\n\t\tbalances[msg.sender] = balances[msg.sender].sub(total);\n\t\tnashInPool = nashInPool.add(total);\n\n\t\trequire(ERC20Interface(_tokenAddress).transfer(msg.sender, _tokenCount));\n\t\temit Transfer(msg.sender, this, total);\n\n\t\treturn true;\n\t}\n\n\tfunction transferNashOut(address _to, uint256 count) public onlyOwner returns(bool) {\n\t\trequire(_to != 0x0);\n\t\tnashInPool = nashInPool.sub(count);\n\t\tbalances[_to] = balances[_to].add(count);\n\n\t\temit Transfer(this, _to, count);\n\n\t\treturn true;\n\t}\n\n\tfunction getSupportedTokens() public view returns (address[]) {\n\t\treturn supportedERC20Token;\n\t}\n\n\tfunction getTokenStatus(address _tokenAddress) public view returns (uint256 _starttime, uint256 _endtime, uint256 _price) {\n\t\t_starttime = starttime[_tokenAddress];\n\t\t_endtime = endtime[_tokenAddress];\n\t\t_price = prices[_tokenAddress];\n\t}\n\n\t/* end of 预售逻辑 */\n\n\t/* 锁币逻辑 */ \n\t// 此功能仅供项目组账号使用，使用后锁住自己的币且不能修改\n\n\tmapping(address => uint256) lockedBalanceTotal;\n\tmapping(address => uint256) lockedStartTime;\n\tmapping(address => uint256) unlockPeriod;\n\tmapping(address => uint256) unlockNumberOfCycles;\n\n\tmapping(address => uint256) lockedBalanceRemains;\n\tmapping(address => uint256) cyclesUnlocked;\n\n\tmapping(address => bool) addressAllowToLock;\n\n\tevent Locked (address _address, uint256 _count, uint256 _starttime, uint256 _unlockPeriodInSeconds, uint256 _unlockNumberOfCycles);\n\tevent Unlocked (address _address, uint256 _count);\n\n\tfunction allowToLock(address _address) public onlyOwner {\n\t\trequire(_address != 0x0);\n\t\taddressAllowToLock[_address] = true;\n\t}\n\n\tfunction disallowToLock(address _address) public onlyOwner {\n\t\trequire(_address != 0x0);\n\t\taddressAllowToLock[_address] = false;\n\t}\n\n\tfunction lock(uint256 _count, uint256 _starttime, uint256 _unlockPeriodInSeconds, uint256 _unlockNumberOfCycles) public returns (bool) {\n\t\trequire(addressAllowToLock[msg.sender]);\n\t\trequire(lockedStartTime[msg.sender] == 0);\n\t\trequire(0 < _unlockNumberOfCycles && _unlockNumberOfCycles <= 10); \n\t\trequire(_unlockPeriodInSeconds > 0); \n\t\trequire(_count > 10000);\n\t\trequire(_starttime > 0);\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_count);\n\n\t\tlockedBalanceTotal[msg.sender] = _count;\n\t\tlockedStartTime[msg.sender] = _starttime;\n\t\tunlockPeriod[msg.sender] = _unlockPeriodInSeconds;\n\t\tunlockNumberOfCycles[msg.sender] = _unlockNumberOfCycles;\n\n\t\tlockedBalanceRemains[msg.sender] = lockedBalanceTotal[msg.sender];\n\n\t\temit Locked (msg.sender, _count, _starttime, _unlockPeriodInSeconds, _unlockNumberOfCycles);\n\n\t\treturn true;\n\t}\n\n\tfunction tryUnlock() public returns (bool) {\n\t\trequire(lockedBalanceRemains[msg.sender] > 0);\n\t\tuint256 cycle = (block.timestamp.sub(lockedStartTime[msg.sender])) / unlockPeriod[msg.sender];\n\t\trequire(cycle > cyclesUnlocked[msg.sender]);\n\n\t\tif (cycle > unlockNumberOfCycles[msg.sender]) {\n\t\t\tcycle = unlockNumberOfCycles[msg.sender];\n\t\t}\n\n\t\tuint256 amount = lockedBalanceTotal[msg.sender].mul(cycle - cyclesUnlocked[msg.sender]) / unlockNumberOfCycles[msg.sender] ;\n\t\tlockedBalanceRemains[msg.sender] = lockedBalanceRemains[msg.sender].sub(amount);\n\t\tbalances[msg.sender] = balances[msg.sender].add(amount);\n\n\t\tif (cycle == unlockNumberOfCycles[msg.sender]) {\n\t\t\t// cleanup\n\t\t\tlockedBalanceTotal[msg.sender] = 0;\n\t\t\tlockedStartTime[msg.sender] = 0;\n\t\t\tunlockPeriod[msg.sender] = 0;\n\t\t\tunlockNumberOfCycles[msg.sender] = 0;\n\t\t\tcyclesUnlocked[msg.sender] = 0;\n\n\t\t\tif (lockedBalanceRemains[msg.sender] > 0) {\n\t\t\t\tbalances[msg.sender] = balances[msg.sender].add(lockedBalanceRemains[msg.sender]);\n\t\t\t\tlockedBalanceRemains[msg.sender] = 0;\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tcyclesUnlocked[msg.sender] = cycle;\n\t\t}\n\n\t\temit Unlocked(msg.sender, amount);\n\n\t\treturn true;\n\t}\n\n\tfunction getLockStatus(address _address) public view returns (\n\t\tuint256 _lockTotal, \n\t\tuint256 _starttime, \n\t\tuint256 _unlockPeriodInSeconds,\n\t\tuint256 _unlockNumberOfCycles,\n\t\tuint256 _lockedBalanceRemains,\n\t\tuint256 _cyclesUnlocked \n\t\t ) {\n\n\t\t_lockTotal = lockedBalanceTotal[_address];\n\t\t_starttime = lockedStartTime[_address];\n\t\t_unlockPeriodInSeconds = unlockPeriod[_address];\n\t\t_unlockNumberOfCycles = unlockNumberOfCycles[_address];\n\t\t_lockedBalanceRemains = lockedBalanceRemains[_address];\n\t\t_cyclesUnlocked = cyclesUnlocked[_address];\n\n\t}\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockStatus\",\"outputs\":[{\"name\":\"_lockTotal\",\"type\":\"uint256\"},{\"name\":\"_starttime\",\"type\":\"uint256\"},{\"name\":\"_unlockPeriodInSeconds\",\"type\":\"uint256\"},{\"name\":\"_unlockNumberOfCycles\",\"type\":\"uint256\"},{\"name\":\"_lockedBalanceRemains\",\"type\":\"uint256\"},{\"name\":\"_cyclesUnlocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_starttime\",\"type\":\"uint256\"},{\"name\":\"_unlockPeriodInSeconds\",\"type\":\"uint256\"},{\"name\":\"_unlockNumberOfCycles\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"joinPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"addSupportedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenStatus\",\"outputs\":[{\"name\":\"_starttime\",\"type\":\"uint256\"},{\"name\":\"_endtime\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"disallowToLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"transferNashOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"allowToLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tryUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"AddSupportedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemoveSupportedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_starttime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_unlockPeriodInSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_unlockNumberOfCycles\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526001805460a060020a60ff0219169055612710600d5534156200002657600080fd5b60008054600160a060020a03191633600160a060020a031617905560408051908101604052600481527f4e41534800000000000000000000000000000000000000000000000000000000602082015260059080516200008a92916020019062000150565b5060408051908101604052600d81527f4e454f574f524c4420434153480000000000000000000000000000000000000060208201526004908051620000d492916020019062000150565b5060068054601260ff19909116179081905560ff16600a0a64174876e80002600781905533600160a060020a0316600081815260026020526040808220849055919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a3620001f5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019357805160ff1916838001178555620001c3565b82800160010185558215620001c3579182015b82811115620001c3578251825591602001919060010190620001a6565b50620001d1929150620001d5565b5090565b620001f291905b80821115620001d15760008155600101620001dc565b90565b61201480620002056000396000f30060606040526004361061017c5763ffffffff60e060020a60003504166306fdde038114610181578063095ea7b31461020b5780630f36f6911461024157806318160ddd1461029957806323b872dd146102be578063260e9640146102e6578063313ce567146103055780633f4ba83a1461032e57806342966c68146103415780635ab01088146103575780635c975abb14610379578063661884631461038c57806370a08231146103ae57806376319190146103cd57806379ba5097146103ec5780638456cb59146104015780638da5cb5b1461041457806395d89b41146104435780639fca51bc14610456578063a3ff31b51461047e578063a9059cbb146104c1578063be45fd62146104e3578063c9d559b814610548578063d1195c4814610567578063d3c7c2c714610589578063d4ee1d90146105ef578063d73dd62314610602578063d7fb00f814610624578063dc39d06d14610643578063dd62ed3e14610665578063eabd94ba1461068a578063f2fde38b1461069d575b600080fd5b341561018c57600080fd5b6101946106bc565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101d05780820151838201526020016101b8565b50505050905090810190601f1680156101fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021657600080fd5b61022d600160a060020a0360043516602435610765565b604051901515815260200160405180910390f35b341561024c57600080fd5b610260600160a060020a03600435166107e9565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b34156102a457600080fd5b6102ac610837565b60405190815260200160405180910390f35b34156102c957600080fd5b61022d600160a060020a036004358116906024351660443561083d565b34156102f157600080fd5b61022d60043560243560443560643561095a565b341561031057600080fd5b610318610ad1565b60405160ff909116815260200160405180910390f35b341561033957600080fd5b61022d610ada565b341561034c57600080fd5b61022d600435610b5e565b341561036257600080fd5b61022d600160a060020a0360043516602435610c27565b341561038457600080fd5b61022d610df8565b341561039757600080fd5b61022d600160a060020a0360043516602435610e08565b34156103b957600080fd5b6102ac600160a060020a0360043516610f1f565b34156103d857600080fd5b61022d600160a060020a0360043516610f3a565b34156103f757600080fd5b6103ff611110565b005b341561040c57600080fd5b61022d61119e565b341561041f57600080fd5b610427611227565b604051600160a060020a03909116815260200160405180910390f35b341561044e57600080fd5b610194611236565b341561046157600080fd5b61022d600160a060020a03600435166024356044356064356112a9565b341561048957600080fd5b61049d600160a060020a036004351661145d565b60405180848152602001838152602001828152602001935050505060405180910390f35b34156104cc57600080fd5b61022d600160a060020a036004351660243561148f565b34156104ee57600080fd5b61022d60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506114f995505050505050565b341561055357600080fd5b6103ff600160a060020a036004351661155c565b341561057257600080fd5b61022d600160a060020a03600435166024356115ad565b341561059457600080fd5b61059c61166c565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156105db5780820151838201526020016105c3565b505050509050019250505060405180910390f35b34156105fa57600080fd5b6104276116d3565b341561060d57600080fd5b61022d600160a060020a03600435166024356116e2565b341561062f57600080fd5b6103ff600160a060020a036004351661179e565b341561064e57600080fd5b61022d600160a060020a03600435166024356117f2565b341561067057600080fd5b6102ac600160a060020a0360043581169060243516611885565b341561069557600080fd5b61022d6118b0565b34156106a857600080fd5b6103ff600160a060020a0360043516611b70565b6106c4611f6f565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561075a5780601f1061072f5761010080835404028352916020019161075a565b820191906000526020600020905b81548152906001019060200180831161073d57829003601f168201915b505050505090505b90565b60015460009060a060020a900460ff161561077f57600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600160a060020a03166000908152600f602090815260408083205460108352818420546011845282852054601285528386205460138652848720546014909652939095205491959094939190565b60075490565b60015460009060a060020a900460ff161561085757600080fd5b600160a060020a038085166000908152600360209081526040808320339094168352929052205461088e908363ffffffff611bba16565b600160a060020a0380861660008181526003602090815260408083203390951683529381528382209490945590815260029092529020546108d5908363ffffffff611bba16565b600160a060020a03808616600090815260026020526040808220939093559085168152205461090a908363ffffffff611bcc16565b600160a060020a0380851660008181526002602052604090819020939093559190861690600080516020611fc98339815191529085905190815260200160405180910390a35060015b9392505050565b600160a060020a03331660009081526015602052604081205460ff16151561098157600080fd5b600160a060020a033316600090815260106020526040902054156109a457600080fd5b8160001080156109b55750600a8211155b15156109c057600080fd5b600083116109cd57600080fd5b61271085116109db57600080fd5b600084116109e857600080fd5b600160a060020a033316600090815260026020526040902054610a11908663ffffffff611bba16565b33600160a060020a038116600090815260026020908152604080832094909455600f815283822089815560108252848320899055601182528483208890556012825284832087905554601390915290839020557fc1126f780558d178a12a5cf08c087496f33400d9b431b6530eb0001f3c34fa9991879087908790879051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a1506001949350505050565b60065460ff1690565b6000805433600160a060020a03908116911614610af657600080fd5b60015460a060020a900460ff161515610b0e57600080fd5b6001805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a150600190565b60015460009060a060020a900460ff1615610b7857600080fd5b60008211610b8557600080fd5b81610b8f33610f1f565b1015610b9a57600080fd5b610bb382610ba733610f1f565b9063ffffffff611bba16565b600160a060020a033316600090815260026020526040902055600754610bdf908363ffffffff611bba16565b600755600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b600160a060020a0382166000908152600960205260408120548190849060ff161515610c5257600080fd5b600160a060020a0381166000908152600b60205260409020544211610c7657600080fd5b600160a060020a0381166000908152600c60205260409020544210610c9a57600080fd5b600160a060020a0385166000908152600a602052604081205411610cbd57600080fd5b600160a060020a0385166000908152600a6020526040902054610ce790859063ffffffff611bd916565b600160a060020a033316600090815260026020526040902054909250610d13908363ffffffff611bba16565b600160a060020a033316600090815260026020526040902055600e54610d3f908363ffffffff611bcc16565b600e55600160a060020a03851663a9059cbb338660405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610d9657600080fd5b5af11515610da357600080fd5b505050604051805190501515610db857600080fd5b30600160a060020a031633600160a060020a0316600080516020611fc98339815191528460405190815260200160405180910390a3506001949350505050565b60015460a060020a900460ff1681565b600154600090819060a060020a900460ff1615610e2457600080fd5b50600160a060020a0333811660009081526003602090815260408083209387168352929052205480831115610e8057600160a060020a033381166000908152600360209081526040808320938816835292905290812055610eb7565b610e90818463ffffffff611bba16565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a031660009081526002602052604090205490565b600080548190819033600160a060020a03908116911614610f5a57600080fd5b600160a060020a0384161515610f6f57600080fd5b505060085460005b818110156111065783600160a060020a0316600882815481101515610f9857fe5b600091825260209091200154600160a060020a031614156110fe576000198201811461102d57600880546000198401908110610fd057fe5b60009182526020909120015460088054600160a060020a039092169183908110610ff657fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555b60088054600019840190811061103f57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff191690556008805490611078906000198301611f81565b50600160a060020a0384166000908152600a60209081526040808320839055600b8252808320839055600c8252808320839055600990915290819020805460ff191690557f54139126c26c011ab30f3af9c69f05a3903dce52aa3ee4c6a1270686b71e88bb90859051600160a060020a03909116815260200160405180910390a1611106565b600101610f77565b5060019392505050565b60015433600160a060020a0390811691161461112b57600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b6000805433600160a060020a039081169116146111ba57600080fd5b60015460a060020a900460ff16156111d157600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a150600190565b600054600160a060020a031681565b61123e611f6f565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561075a5780601f1061072f5761010080835404028352916020019161075a565b60008054819033600160a060020a039081169116146112c757600080fd5b600160a060020a03861615156112dc57600080fd5b6112ee86600160a060020a0316611c02565b15156112f957600080fd5b82841061130557600080fd5b6000851161131257600080fd5b42831161131e57600080fd5b5060005b60085481101561136d5785600160a060020a031660088281548110151561134557fe5b600091825260209091200154600160a060020a0316141561136557600080fd5b600101611322565b600880546001810161137f8382611f81565b506000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a169081179091558252600981526040808320805460ff19166001179055600a8252808320889055600b8252808320879055600c909152908190208490557f732ebff3028ee261ea2bcacbf4e0b96c0feef58835bff0d35126e9dd342387f1908790879087908790518085600160a060020a0316600160a060020a0316815260200184815260200183815260200182815260200194505050505060405180910390a150600195945050505050565b600160a060020a03166000908152600b6020908152604080832054600c835281842054600a9093529220549192909190565b6000611499611f6f565b60015460a060020a900460ff16156114b057600080fd5b600160a060020a03841615156114c557600080fd5b6114d784600160a060020a0316611c02565b156114ee576114e7848483611c0a565b9150610f18565b6114e7848483611e36565b60015460009060a060020a900460ff161561151357600080fd5b600160a060020a038416151561152857600080fd5b61153a84600160a060020a0316611c02565b156115515761154a848484611c0a565b9050610953565b61154a848484611e36565b60005433600160a060020a0390811691161461157757600080fd5b600160a060020a038116151561158c57600080fd5b600160a060020a03166000908152601560205260409020805460ff19169055565b6000805433600160a060020a039081169116146115c957600080fd5b600160a060020a03831615156115de57600080fd5b600e546115f1908363ffffffff611bba16565b600e55600160a060020a03831660009081526002602052604090205461161d908363ffffffff611bcc16565b600160a060020a038085166000818152600260205260409081902093909355913090911690600080516020611fc98339815191529085905190815260200160405180910390a350600192915050565b611674611f6f565b600880548060200260200160405190810160405280929190818152602001828054801561075a57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116116ac575050505050905090565b600154600160a060020a031681565b60015460009060a060020a900460ff16156116fc57600080fd5b600160a060020a03338116600090815260036020908152604080832093871683529290522054611732908363ffffffff611bcc16565b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b60005433600160a060020a039081169116146117b957600080fd5b600160a060020a03811615156117ce57600080fd5b600160a060020a03166000908152601560205260409020805460ff19166001179055565b6000805433600160a060020a0390811691161461180e57600080fd5b600054600160a060020a038085169163a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561186857600080fd5b5af1151561187557600080fd5b5050506040518051949350505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600160a060020a033316600090815260136020526040812054819081908190116118d957600080fd5b600160a060020a03331660009081526011602090815260408083205460109092529091205461190f90429063ffffffff611bba16565b81151561191857fe5b600160a060020a0333166000908152601460205260409020549190049250821161194157600080fd5b600160a060020a03331660009081526012602052604090205482111561197d57600160a060020a03331660009081526012602052604090205491505b600160a060020a0333166000908152601260209081526040808320546014835281842054600f9093529220546119ba91850363ffffffff611bd916565b8115156119c357fe5b600160a060020a03331660009081526013602052604090205491900491506119f1908263ffffffff611bba16565b600160a060020a033316600090815260136020908152604080832093909355600290522054611a26908263ffffffff611bcc16565b600160a060020a033316600090815260026020908152604080832093909355601290522054821415611b0757600160a060020a0333166000908152600f602090815260408083208390556010825280832083905560118252808320839055601282528083208390556014825280832083905560139091528120541115611b0257600160a060020a033316600090815260136020908152604080832054600290925290912054611ada9163ffffffff611bcc16565b600160a060020a03331660009081526002602090815260408083209390935560139052908120555b611b23565b600160a060020a03331660009081526014602052604090208290555b7f0f0bc5b519ddefdd8e5f9e6423433aa2b869738de2ae34d58ebc796fc749fa0d3382604051600160a060020a03909216825260208201526040908101905180910390a160019250505090565b60005433600160a060020a03908116911614611b8b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115611bc657fe5b50900390565b818101828110156107e357fe5b6000821515611bea575060006107e3565b50818102818382811515611bfa57fe5b04146107e357fe5b6000903b1190565b600080611c1a84610ba733610f1f565b600160a060020a033316600090815260026020526040902055611c4c84611c4087610f1f565b9063ffffffff611bcc16565b600160a060020a03861660008181526002602052604090819020929092558692509063c0ee0b8a90339087908790518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ce5578082015183820152602001611ccd565b50505050905090810190601f168015611d125780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515611d3257600080fd5b5af11515611d3f57600080fd5b50505084600160a060020a031633600160a060020a0316600080516020611fc98339815191528660405190815260200160405180910390a384600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16868660405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015611df0578082015183820152602001611dd8565b50505050905090810190601f168015611e1d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001949350505050565b6000611e4583610ba733610f1f565b600160a060020a033316600090815260026020526040902055611e6b83611c4086610f1f565b600160a060020a038086166000818152600260205260409081902093909355913390911690600080516020611fc98339815191529086905190815260200160405180910390a383600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16858560405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015611f2a578082015183820152602001611f12565b50505050905090810190601f168015611f575780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35060019392505050565b60206040519081016040526000815290565b815481835581811511611fa557600083815260209020611fa5918101908301611faa565b505050565b61076291905b80821115611fc45760008155600101611fb0565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058201ca32c1df520cdc4e6642e25dce6691435c732b6bb0e12027ae6e6237ab257e20029"
}