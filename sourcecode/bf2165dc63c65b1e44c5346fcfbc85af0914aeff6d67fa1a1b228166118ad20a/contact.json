{
  "address": "0xe5b21cf83f5e49aba4601e8d8cf182f889208cfd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ManualApprovalTransferManagerFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Utility contract to allow pausing and unpausing of certain functions\n */\ncontract Pausable {\n\n    event Pause(uint256 _timestammp);\n    event Unpause(uint256 _timestamp);\n\n    bool public paused = false;\n\n    /**\n    * @notice Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"Contract is paused\");\n        _;\n    }\n\n    /**\n    * @notice Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused, \"Contract is not paused\");\n        _;\n    }\n\n   /**\n    * @notice Called by the owner to pause, triggers stopped state\n    */\n    function _pause() internal whenNotPaused {\n        paused = true;\n        /*solium-disable-next-line security/no-block-members*/\n        emit Pause(now);\n    }\n\n    /**\n    * @notice Called by the owner to unpause, returns to normal state\n    */\n    function _unpause() internal whenPaused {\n        paused = false;\n        /*solium-disable-next-line security/no-block-members*/\n        emit Unpause(now);\n    }\n\n}\n\n/**\n * @title Interface that every module contract should implement\n */\ninterface IModule {\n\n    /**\n     * @notice This function returns the signature of configure function\n     */\n    function getInitFunction() external pure returns (bytes4);\n\n    /**\n     * @notice Return the permission flags that are associated with a module\n     */\n    function getPermissions() external view returns(bytes32[]);\n\n    /**\n     * @notice Used to withdraw the fee by the factory owner\n     */\n    function takeFee(uint256 _amount) external returns(bool);\n\n}\n\n/**\n * @title Interface for all security tokens\n */\ninterface ISecurityToken {\n\n    // Standard ERC20 interface\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    //transfer, transferFrom must respect the result of verifyTransfer\n    function verifyTransfer(address _from, address _to, uint256 _value) external returns (bool success);\n\n    /**\n     * @notice Mints new tokens and assigns them to the target _investor.\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n     * @param _investor Address the tokens will be minted to\n     * @param _value is the amount of tokens that will be minted to the investor\n     */\n    function mint(address _investor, uint256 _value) external returns (bool success);\n\n    /**\n     * @notice Mints new tokens and assigns them to the target _investor.\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n     * @param _investor Address the tokens will be minted to\n     * @param _value is The amount of tokens that will be minted to the investor\n     * @param _data Data to indicate validation\n     */\n    function mintWithData(address _investor, uint256 _value, bytes _data) external returns (bool success);\n\n    /**\n     * @notice Used to burn the securityToken on behalf of someone else\n     * @param _from Address for whom to burn tokens\n     * @param _value No. of tokens to be burned\n     * @param _data Data to indicate validation\n     */\n    function burnFromWithData(address _from, uint256 _value, bytes _data) external;\n\n    /**\n     * @notice Used to burn the securityToken\n     * @param _value No. of tokens to be burned\n     * @param _data Data to indicate validation\n     */\n    function burnWithData(uint256 _value, bytes _data) external;\n\n    event Minted(address indexed _to, uint256 _value);\n    event Burnt(address indexed _burner, uint256 _value);\n\n    // Permissions this to a Permission module, which has a key of 1\n    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\n    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns (bool);\n\n    /**\n     * @notice Returns module list for a module type\n     * @param _module Address of the module\n     * @return bytes32 Name\n     * @return address Module address\n     * @return address Module factory address\n     * @return bool Module archived\n     * @return uint8 Module type\n     * @return uint256 Module index\n     * @return uint256 Name index\n\n     */\n    function getModule(address _module) external view returns(bytes32, address, address, bool, uint8, uint256, uint256);\n\n    /**\n     * @notice Returns module list for a module name\n     * @param _name Name of the module\n     * @return address[] List of modules with this name\n     */\n    function getModulesByName(bytes32 _name) external view returns (address[]);\n\n    /**\n     * @notice Returns module list for a module type\n     * @param _type Type of the module\n     * @return address[] List of modules with this type\n     */\n    function getModulesByType(uint8 _type) external view returns (address[]);\n\n    /**\n     * @notice Queries totalSupply at a specified checkpoint\n     * @param _checkpointId Checkpoint ID to query as of\n     */\n    function totalSupplyAt(uint256 _checkpointId) external view returns (uint256);\n\n    /**\n     * @notice Queries balance at a specified checkpoint\n     * @param _investor Investor to query balance for\n     * @param _checkpointId Checkpoint ID to query as of\n     */\n    function balanceOfAt(address _investor, uint256 _checkpointId) external view returns (uint256);\n\n    /**\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\n     */\n    function createCheckpoint() external returns (uint256);\n\n    /**\n     * @notice Gets length of investors array\n     * NB - this length may differ from investorCount if the list has not been pruned of zero-balance investors\n     * @return Length\n     */\n    function getInvestors() external view returns (address[]);\n\n    /**\n     * @notice returns an array of investors at a given checkpoint\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\n     * @return list of investors\n     */\n    function getInvestorsAt(uint256 _checkpointId) external view returns(address[]);\n\n    /**\n     * @notice generates subset of investors\n     * NB - can be used in batches if investor list is large\n     * @param _start Position of investor to start iteration from\n     * @param _end Position of investor to stop iteration at\n     * @return list of investors\n     */\n    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[]);\n    \n    /**\n     * @notice Gets current checkpoint ID\n     * @return Id\n     */\n    function currentCheckpointId() external view returns (uint256);\n\n    /**\n    * @notice Gets an investor at a particular index\n    * @param _index Index to return address from\n    * @return Investor address\n    */\n    function investors(uint256 _index) external view returns (address);\n\n   /**\n    * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\n    * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\n    * @param _tokenContract Address of the ERC20Basic compliance token\n    * @param _value Amount of POLY to withdraw\n    */\n    function withdrawERC20(address _tokenContract, uint256 _value) external;\n\n    /**\n    * @notice Allows owner to approve more POLY to one of the modules\n    * @param _module Module address\n    * @param _budget New budget\n    */\n    function changeModuleBudget(address _module, uint256 _budget) external;\n\n    /**\n     * @notice Changes the tokenDetails\n     * @param _newTokenDetails New token details\n     */\n    function updateTokenDetails(string _newTokenDetails) external;\n\n    /**\n    * @notice Allows the owner to change token granularity\n    * @param _granularity Granularity level of the token\n    */\n    function changeGranularity(uint256 _granularity) external;\n\n    /**\n    * @notice Removes addresses with zero balances from the investors list\n    * @param _start Index in investors list at which to start removing zero balances\n    * @param _iters Max number of iterations of the for loop\n    * NB - pruning this list will mean you may not be able to iterate over investors on-chain as of a historical checkpoint\n    */\n    function pruneInvestors(uint256 _start, uint256 _iters) external;\n\n    /**\n     * @notice Freezes all the transfers\n     */\n    function freezeTransfers() external;\n\n    /**\n     * @notice Un-freezes all the transfers\n     */\n    function unfreezeTransfers() external;\n\n    /**\n     * @notice Ends token minting period permanently\n     */\n    function freezeMinting() external;\n\n    /**\n     * @notice Mints new tokens and assigns them to the target investors.\n     * Can only be called by the STO attached to the token or by the Issuer (Security Token contract owner)\n     * @param _investors A list of addresses to whom the minted tokens will be delivered\n     * @param _values A list of the amount of tokens to mint to corresponding addresses from _investor[] list\n     * @return Success\n     */\n    function mintMulti(address[] _investors, uint256[] _values) external returns (bool success);\n\n    /**\n     * @notice Function used to attach a module to the security token\n     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\n     * @dev to control restrictions on transfers.\n     * @dev You are allowed to add a new moduleType if:\n     * @dev - there is no existing module of that type yet added\n     * @dev - the last member of the module list is replacable\n     * @param _moduleFactory is the address of the module factory to be added\n     * @param _data is data packed into bytes used to further configure the module (See STO usage)\n     * @param _maxCost max amount of POLY willing to pay to module. (WIP)\n     */\n    function addModule(\n        address _moduleFactory,\n        bytes _data,\n        uint256 _maxCost,\n        uint256 _budget\n    ) external;\n\n    /**\n    * @notice Archives a module attached to the SecurityToken\n    * @param _module address of module to archive\n    */\n    function archiveModule(address _module) external;\n\n    /**\n    * @notice Unarchives a module attached to the SecurityToken\n    * @param _module address of module to unarchive\n    */\n    function unarchiveModule(address _module) external;\n\n    /**\n    * @notice Removes a module attached to the SecurityToken\n    * @param _module address of module to archive\n    */\n    function removeModule(address _module) external;\n\n    /**\n     * @notice Used by the issuer to set the controller addresses\n     * @param _controller address of the controller\n     */\n    function setController(address _controller) external;\n\n    /**\n     * @notice Used by a controller to execute a forced transfer\n     * @param _from address from which to take tokens\n     * @param _to address where to send tokens\n     * @param _value amount of tokens to transfer\n     * @param _data data to indicate validation\n     * @param _log data attached to the transfer by controller to emit in event\n     */\n    function forceTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _log) external;\n\n    /**\n     * @notice Used by a controller to execute a foced burn\n     * @param _from address from which to take tokens\n     * @param _value amount of tokens to transfer\n     * @param _data data to indicate validation\n     * @param _log data attached to the transfer by controller to emit in event\n     */\n    function forceBurn(address _from, uint256 _value, bytes _data, bytes _log) external;\n\n    /**\n     * @notice Used by the issuer to permanently disable controller functionality\n     * @dev enabled via feature switch \"disableControllerAllowed\"\n     */\n     function disableController() external;\n\n     /**\n     * @notice Used to get the version of the securityToken\n     */\n     function getVersion() external view returns(uint8[]);\n\n     /**\n     * @notice Gets the investor count\n     */\n     function getInvestorCount() external view returns(uint256);\n\n     /**\n      * @notice Overloaded version of the transfer function\n      * @param _to receiver of transfer\n      * @param _value value of transfer\n      * @param _data data to indicate validation\n      * @return bool success\n      */\n     function transferWithData(address _to, uint256 _value, bytes _data) external returns (bool success);\n\n     /**\n      * @notice Overloaded version of the transferFrom function\n      * @param _from sender of transfer\n      * @param _to receiver of transfer\n      * @param _value value of transfer\n      * @param _data data to indicate validation\n      * @return bool success\n      */\n     function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) external returns(bool);\n\n     /**\n      * @notice Provides the granularity of the token\n      * @return uint256\n      */\n     function granularity() external view returns(uint256);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Storage for Module contract\n * @notice Contract is abstract\n */\ncontract ModuleStorage {\n\n    /**\n     * @notice Constructor\n     * @param _securityToken Address of the security token\n     * @param _polyAddress Address of the polytoken\n     */\n    constructor (address _securityToken, address _polyAddress) public {\n        securityToken = _securityToken;\n        factory = msg.sender;\n        polyToken = IERC20(_polyAddress);\n    }\n    \n    address public factory;\n\n    address public securityToken;\n\n    bytes32 public constant FEE_ADMIN = \"FEE_ADMIN\";\n\n    IERC20 public polyToken;\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Interface that any module contract should implement\n * @notice Contract is abstract\n */\ncontract Module is IModule, ModuleStorage {\n\n    /**\n     * @notice Constructor\n     * @param _securityToken Address of the security token\n     * @param _polyAddress Address of the polytoken\n     */\n    constructor (address _securityToken, address _polyAddress) public\n    ModuleStorage(_securityToken, _polyAddress)\n    {\n    }\n\n    //Allows owner, factory or permissioned delegate\n    modifier withPerm(bytes32 _perm) {\n        bool isOwner = msg.sender == Ownable(securityToken).owner();\n        bool isFactory = msg.sender == factory;\n        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), \"Permission check failed\");\n        _;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == Ownable(securityToken).owner(), \"Sender is not owner\");\n        _;\n    }\n\n    modifier onlyFactory {\n        require(msg.sender == factory, \"Sender is not factory\");\n        _;\n    }\n\n    modifier onlyFactoryOwner {\n        require(msg.sender == Ownable(factory).owner(), \"Sender is not factory owner\");\n        _;\n    }\n\n    modifier onlyFactoryOrOwner {\n        require((msg.sender == Ownable(securityToken).owner()) || (msg.sender == factory), \"Sender is not factory or owner\");\n        _;\n    }\n\n    /**\n     * @notice used to withdraw the fee by the factory owner\n     */\n    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\n        require(polyToken.transferFrom(securityToken, Ownable(factory).owner(), _amount), \"Unable to take fee\");\n        return true;\n    }\n\n}\n\n/**\n * @title Interface to be implemented by all Transfer Manager modules\n * @dev abstract contract\n */\ncontract ITransferManager is Module, Pausable {\n\n    //If verifyTransfer returns:\n    //  FORCE_VALID, the transaction will always be valid, regardless of other TM results\n    //  INVALID, then the transfer should not be allowed regardless of other TM results\n    //  VALID, then the transfer is valid for this TM\n    //  NA, then the result from this TM is ignored\n    enum Result {INVALID, NA, VALID, FORCE_VALID}\n\n    function verifyTransfer(address _from, address _to, uint256 _amount, bytes _data, bool _isTransfer) public returns(Result);\n\n    function unpause() public onlyOwner {\n        super._unpause();\n    }\n\n    function pause() public onlyOwner {\n        super._pause();\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Transfer Manager module for manually approving transactions between accounts\n */\ncontract ManualApprovalTransferManager is ITransferManager {\n    using SafeMath for uint256;\n\n    bytes32 public constant TRANSFER_APPROVAL = \"TRANSFER_APPROVAL\";\n\n    //Manual approval is an allowance (that has been approved) with an expiry time\n    struct ManualApproval {\n        address from;\n        address to;\n        uint256 allowance;\n        uint256 expiryTime;\n        bytes32 description;\n    }\n\n    mapping (address => mapping (address => uint256)) public approvalIndex;\n\n    // An array to track all approvals. It is an unbounded array but it's not a problem as\n    // it is never looped through in an onchain call. It is defined as an Array instead of mapping\n    // just to make it easier for users to fetch list of all approvals through constant functions.\n    ManualApproval[] public approvals;\n\n    event AddManualApproval(\n        address indexed _from,\n        address indexed _to,\n        uint256 _allowance,\n        uint256 _expiryTime,\n        bytes32 _description,\n        address indexed _addedBy\n    );\n\n    event ModifyManualApproval(\n        address indexed _from,\n        address indexed _to,\n        uint256 _expiryTime,\n        uint256 _allowance,\n        bytes32 _description,\n        address indexed _edittedBy\n    );\n\n    event RevokeManualApproval(\n        address indexed _from,\n        address indexed _to,\n        address indexed _addedBy\n    );\n\n    /**\n     * @notice Constructor\n     * @param _securityToken Address of the security token\n     * @param _polyAddress Address of the polytoken\n     */\n    constructor (address _securityToken, address _polyAddress)\n    public\n    Module(_securityToken, _polyAddress)\n    {\n    }\n\n    /**\n     * @notice This function returns the signature of configure function\n     */\n    function getInitFunction() public pure returns (bytes4) {\n        return bytes4(0);\n    }\n\n    /**\n     * @notice Used to verify the transfer transaction and allow a manually approved transqaction to bypass other restrictions\n     * @param _from Address of the sender\n     * @param _to Address of the receiver\n     * @param _amount The amount of tokens to transfer\n     * @param _isTransfer Whether or not this is an actual transfer or just a test to see if the tokens would be transferrable\n     */\n    function verifyTransfer(address _from, address _to, uint256 _amount, bytes /* _data */, bool _isTransfer) public returns(Result) {\n        // function must only be called by the associated security token if _isTransfer == true\n        require(_isTransfer == false || msg.sender == securityToken, \"Sender is not the owner\");\n        uint256 index = approvalIndex[_from][_to];\n        if (!paused && index != 0) {\n            index--; //Actual index is stored index - 1.\n            ManualApproval storage approval = approvals[index];\n            uint256 allowance = approval.allowance;\n            if ((approval.expiryTime >= now) && (allowance >= _amount)) {\n                if (_isTransfer) {\n                    approval.allowance = allowance - _amount;\n                }\n                return Result.VALID;\n            }\n        }\n        return Result.NA;\n    }\n\n    /**\n    * @notice Adds a pair of addresses to manual approvals\n    * @param _from is the address from which transfers are approved\n    * @param _to is the address to which transfers are approved\n    * @param _allowance is the approved amount of tokens\n    * @param _expiryTime is the time until which the transfer is allowed\n    * @param _description Description about the manual approval\n    */\n    function addManualApproval(\n        address _from,\n        address _to,\n        uint256 _allowance,\n        uint256 _expiryTime,\n        bytes32 _description\n    )\n        external\n        withPerm(TRANSFER_APPROVAL)\n    {\n        _addManualApproval(_from, _to, _allowance, _expiryTime, _description);\n    }\n\n    function _addManualApproval(address _from, address _to, uint256 _allowance, uint256 _expiryTime, bytes32 _description) internal {\n        require(_to != address(0), \"Invalid to address\");\n        require(_expiryTime > now, \"Invalid expiry time\");\n        require(_allowance > 0, \"Invalid allowance\");\n        uint256 index = approvalIndex[_from][_to];\n        if (index != 0) {\n            index--; //Actual index is stored index - 1.\n            require(approvals[index].expiryTime < now || approvals[index].allowance == 0, \"Approval already exists\");\n            _revokeManualApproval(_from, _to);\n        }\n        approvals.push(ManualApproval(_from, _to, _allowance, _expiryTime, _description));\n        approvalIndex[_from][_to] = approvals.length;\n        emit AddManualApproval(_from, _to, _allowance, _expiryTime, _description, msg.sender);\n    }\n\n    /**\n    * @notice Adds mutiple manual approvals in batch\n    * @param _from is the address array from which transfers are approved\n    * @param _to is the address array to which transfers are approved\n    * @param _allowances is the array of approved amounts\n    * @param _expiryTimes is the array of the times until which eath transfer is allowed\n    * @param _descriptions is the description array for these manual approvals\n    */\n    function addManualApprovalMulti(\n        address[] _from,\n        address[] _to,\n        uint256[] _allowances,\n        uint256[] _expiryTimes,\n        bytes32[] _descriptions\n    )\n        external\n        withPerm(TRANSFER_APPROVAL)\n    {\n        _checkInputLengthArray(_from, _to, _allowances, _expiryTimes, _descriptions);\n        for (uint256 i = 0; i < _from.length; i++){\n            _addManualApproval(_from[i], _to[i], _allowances[i], _expiryTimes[i], _descriptions[i]);\n        }\n    }\n\n    /**\n    * @notice Modify the existing manual approvals\n    * @param _from is the address from which transfers are approved\n    * @param _to is the address to which transfers are approved\n    * @param _expiryTime is the time until which the transfer is allowed\n    * @param _changeInAllowance is the change in allowance\n    * @param _description Description about the manual approval\n    * @param _increase tells whether the allowances will be increased (true) or decreased (false).\n    * or any value when there is no change in allowances\n    */\n    function modifyManualApproval(\n        address _from,\n        address _to,\n        uint256 _expiryTime,\n        uint256 _changeInAllowance,\n        bytes32 _description,\n        bool _increase\n    )\n        external\n        withPerm(TRANSFER_APPROVAL)\n    {\n        _modifyManualApproval(_from, _to, _expiryTime, _changeInAllowance, _description, _increase);\n    }\n\n    function _modifyManualApproval(\n        address _from,\n        address _to,\n        uint256 _expiryTime,\n        uint256 _changeInAllowance,\n        bytes32 _description,\n        bool _increase\n    )\n        internal\n    {\n        require(_to != address(0), \"Invalid to address\");\n        /*solium-disable-next-line security/no-block-members*/\n        require(_expiryTime > now, \"Invalid expiry time\");\n        uint256 index = approvalIndex[_from][_to];\n        require(index != 0, \"Approval not present\");\n        index--; //Index is stored in an incremented form. 0 represnts non existant.\n        ManualApproval storage approval = approvals[index];\n        uint256 allowance = approval.allowance;\n        uint256 expiryTime = approval.expiryTime;\n        require(allowance != 0 && expiryTime > now, \"Not allowed\");\n\n        if (_changeInAllowance > 0) {\n            if (_increase) {\n                // Allowance get increased\n                allowance = allowance.add(_changeInAllowance);\n            } else {\n                // Allowance get decreased\n                if (_changeInAllowance >= allowance) {\n                    allowance = 0;\n                } else {\n                    allowance = allowance - _changeInAllowance;\n                }\n            }\n            approval.allowance = allowance;\n        }\n\n        // Greedy storage technique\n        if (expiryTime != _expiryTime) {\n            approval.expiryTime = _expiryTime;\n        }\n        if (approval.description != _description) {\n            approval.description = _description;\n        }\n\n        emit ModifyManualApproval(_from, _to, _expiryTime, allowance, _description, msg.sender);\n    }\n\n    /**\n     * @notice Adds mutiple manual approvals in batch\n     * @param _from is the address array from which transfers are approved\n     * @param _to is the address array to which transfers are approved\n     * @param _expiryTimes is the array of the times until which eath transfer is allowed\n     * @param _changedAllowances is the array of approved amounts\n     * @param _descriptions is the description array for these manual approvals\n     * @param _increase Array of bool values which tells whether the allowances will be increased (true) or decreased (false)\n     * or any value when there is no change in allowances\n     */\n    function modifyManualApprovalMulti(\n        address[] _from,\n        address[] _to,\n        uint256[] _expiryTimes,\n        uint256[] _changedAllowances,\n        bytes32[] _descriptions,\n        bool[] _increase\n    )\n        public\n        withPerm(TRANSFER_APPROVAL)\n    {\n        _checkInputLengthArray(_from, _to, _changedAllowances, _expiryTimes, _descriptions);\n        require(_increase.length == _changedAllowances.length, \"Input length array mismatch\");\n        for (uint256 i = 0; i < _from.length; i++) {\n            _modifyManualApproval(_from[i], _to[i], _expiryTimes[i], _changedAllowances[i], _descriptions[i], _increase[i]);\n        }\n    }\n\n    /**\n    * @notice Removes a pairs of addresses from manual approvals\n    * @param _from is the address from which transfers are approved\n    * @param _to is the address to which transfers are approved\n    */\n    function revokeManualApproval(address _from, address _to) external withPerm(TRANSFER_APPROVAL) {\n        _revokeManualApproval(_from, _to);\n    }\n\n    function _revokeManualApproval(address _from, address _to) internal {\n        uint256 index = approvalIndex[_from][_to];\n        require(index != 0, \"Approval does not exist\");\n        index--; //Actual index is stored index - 1.\n        uint256 lastApprovalIndex = approvals.length - 1;\n        // find the record in active approvals array & delete it\n        if (index != lastApprovalIndex) {\n            approvals[index] = approvals[lastApprovalIndex];\n            approvalIndex[approvals[index].from][approvals[index].to] = index + 1;\n        }\n        delete approvalIndex[_from][_to];\n        approvals.length--;\n        emit RevokeManualApproval(_from, _to, msg.sender);\n    }\n\n    /**\n    * @notice Removes mutiple pairs of addresses from manual approvals\n    * @param _from is the address array from which transfers are approved\n    * @param _to is the address array to which transfers are approved\n    */\n    function revokeManualApprovalMulti(address[] _from, address[] _to) external withPerm(TRANSFER_APPROVAL) {\n        require(_from.length == _to.length, \"Input array length mismatch\");\n        for(uint256 i = 0; i < _from.length; i++){\n            _revokeManualApproval(_from[i], _to[i]);\n        }\n    }\n\n    function _checkInputLengthArray(\n        address[] _from,\n        address[] _to,\n        uint256[] _expiryTimes,\n        uint256[] _allowances,\n        bytes32[] _descriptions\n    )\n        internal\n        pure\n    {\n        require(_from.length == _to.length &&\n        _to.length == _allowances.length &&\n        _allowances.length == _expiryTimes.length &&\n        _expiryTimes.length == _descriptions.length,\n        \"Input array length mismatch\"\n        );\n    }\n\n    /**\n     * @notice Returns the all active approvals corresponds to an address\n     * @param _user Address of the holder corresponds to whom list of manual approvals\n     * need to return\n     * @return address[] addresses from\n     * @return address[] addresses to\n     * @return uint256[] allowances provided to the approvals\n     * @return uint256[] expiry times provided to the approvals\n     * @return bytes32[] descriptions provided to the approvals\n     */\n    function getActiveApprovalsToUser(address _user) external view returns(address[], address[], uint256[], uint256[], bytes32[]) {\n        uint256 counter = 0;\n        uint256 approvalsLength = approvals.length;\n        for (uint256 i = 0; i < approvalsLength; i++) {\n            if ((approvals[i].from == _user || approvals[i].to == _user)\n                && approvals[i].expiryTime >= now)\n                counter ++;\n        }\n\n        address[] memory from = new address[](counter);\n        address[] memory to = new address[](counter);\n        uint256[] memory allowance = new uint256[](counter);\n        uint256[] memory expiryTime = new uint256[](counter);\n        bytes32[] memory description = new bytes32[](counter);\n\n        counter = 0;\n        for (i = 0; i < approvalsLength; i++) {\n            if ((approvals[i].from == _user || approvals[i].to == _user)\n                && approvals[i].expiryTime >= now) {\n\n                from[counter]=approvals[i].from;\n                to[counter]=approvals[i].to;\n                allowance[counter]=approvals[i].allowance;\n                expiryTime[counter]=approvals[i].expiryTime;\n                description[counter]=approvals[i].description;\n                counter ++;\n            }\n        }\n        return (from, to, allowance, expiryTime, description);\n    }\n\n    /**\n     * @notice Get the details of the approval corresponds to _from & _to addresses\n     * @param _from Address of the sender\n     * @param _to Address of the receiver\n     * @return uint256 expiryTime of the approval\n     * @return uint256 allowance provided to the approval\n     * @return uint256 Description provided to the approval\n     */\n    function getApprovalDetails(address _from, address _to) external view returns(uint256, uint256, bytes32) {\n        uint256 index = approvalIndex[_from][_to];\n        if (index != 0) {\n            index--;\n            if (index < approvals.length) {\n                ManualApproval storage approval = approvals[index];\n                return(\n                    approval.expiryTime,\n                    approval.allowance,\n                    approval.description\n                );\n            }\n        }\n    }\n\n    /**\n    * @notice Returns the current number of active approvals\n    */\n    function getTotalApprovalsLength() external view returns(uint256) {\n        return approvals.length;\n    }\n\n    /**\n     * @notice Get the details of all approvals\n     * @return address[] addresses from\n     * @return address[] addresses to\n     * @return uint256[] allowances provided to the approvals\n     * @return uint256[] expiry times provided to the approvals\n     * @return bytes32[] descriptions provided to the approvals\n     */\n    function getAllApprovals() external view returns(address[], address[], uint256[], uint256[], bytes32[]) {\n        address[] memory from = new address[](approvals.length);\n        address[] memory to = new address[](approvals.length);\n        uint256[] memory allowance = new uint256[](approvals.length);\n        uint256[] memory expiryTime = new uint256[](approvals.length);\n        bytes32[] memory description = new bytes32[](approvals.length);\n        uint256 approvalsLength = approvals.length;\n\n        for (uint256 i = 0; i < approvalsLength; i++) {\n\n            from[i]=approvals[i].from;\n            to[i]=approvals[i].to;\n            allowance[i]=approvals[i].allowance;\n            expiryTime[i]=approvals[i].expiryTime;\n            description[i]=approvals[i].description;\n\n        }\n\n        return (from, to, allowance, expiryTime, description);\n\n    }\n\n    /**\n     * @notice Returns the permissions flag that are associated with ManualApproval transfer manager\n     */\n    function getPermissions() public view returns(bytes32[]) {\n        bytes32[] memory allPermissions = new bytes32[](1);\n        allPermissions[0] = TRANSFER_APPROVAL;\n        return allPermissions;\n    }\n}\n\n/**\n * @title Interface that every module factory contract should implement\n */\ninterface IModuleFactory {\n\n    event ChangeFactorySetupFee(uint256 _oldSetupCost, uint256 _newSetupCost, address _moduleFactory);\n    event ChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\n    event ChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\n    event GenerateModuleFromFactory(\n        address _module,\n        bytes32 indexed _moduleName,\n        address indexed _moduleFactory,\n        address _creator,\n        uint256 _setupCost,\n        uint256 _timestamp\n    );\n    event ChangeSTVersionBound(string _boundType, uint8 _major, uint8 _minor, uint8 _patch);\n\n    //Should create an instance of the Module, or throw\n    function deploy(bytes _data) external returns(address);\n\n    /**\n     * @notice Type of the Module factory\n     */\n    function getTypes() external view returns(uint8[]);\n\n    /**\n     * @notice Get the name of the Module\n     */\n    function getName() external view returns(bytes32);\n\n    /**\n     * @notice Returns the instructions associated with the module\n     */\n    function getInstructions() external view returns (string);\n\n    /**\n     * @notice Get the tags related to the module factory\n     */\n    function getTags() external view returns (bytes32[]);\n\n    /**\n     * @notice Used to change the setup fee\n     * @param _newSetupCost New setup fee\n     */\n    function changeFactorySetupFee(uint256 _newSetupCost) external;\n\n    /**\n     * @notice Used to change the usage fee\n     * @param _newUsageCost New usage fee\n     */\n    function changeFactoryUsageFee(uint256 _newUsageCost) external;\n\n    /**\n     * @notice Used to change the subscription fee\n     * @param _newSubscriptionCost New subscription fee\n     */\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) external;\n\n    /**\n     * @notice Function use to change the lower and upper bound of the compatible version st\n     * @param _boundType Type of bound\n     * @param _newVersion New version array\n     */\n    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external;\n\n   /**\n     * @notice Get the setup cost of the module\n     */\n    function getSetupCost() external view returns (uint256);\n\n    /**\n     * @notice Used to get the lower bound\n     * @return Lower bound\n     */\n    function getLowerSTVersionBounds() external view returns(uint8[]);\n\n     /**\n     * @notice Used to get the upper bound\n     * @return Upper bound\n     */\n    function getUpperSTVersionBounds() external view returns(uint8[]);\n\n}\n\n/**\n * @title Helper library use to compare or validate the semantic versions\n */\n\nlibrary VersionUtils {\n\n    /**\n     * @notice This function is used to validate the version submitted\n     * @param _current Array holds the present version of ST\n     * @param _new Array holds the latest version of the ST\n     * @return bool\n     */\n    function isValidVersion(uint8[] _current, uint8[] _new) internal pure returns(bool) {\n        bool[] memory _temp = new bool[](_current.length);\n        uint8 counter = 0;\n        for (uint8 i = 0; i < _current.length; i++) {\n            if (_current[i] < _new[i])\n                _temp[i] = true;\n            else\n                _temp[i] = false;\n        }\n\n        for (i = 0; i < _current.length; i++) {\n            if (i == 0) {\n                if (_current[i] <= _new[i])\n                    if(_temp[0]) {\n                        counter = counter + 3;\n                        break;\n                    } else\n                        counter++;\n                else\n                    return false;\n            } else {\n                if (_temp[i-1])\n                    counter++;\n                else if (_current[i] <= _new[i])\n                    counter++;\n                else\n                    return false;\n            }\n        }\n        if (counter == _current.length)\n            return true;\n    }\n\n    /**\n     * @notice Used to compare the lower bound with the latest version\n     * @param _version1 Array holds the lower bound of the version\n     * @param _version2 Array holds the latest version of the ST\n     * @return bool\n     */\n    function compareLowerBound(uint8[] _version1, uint8[] _version2) internal pure returns(bool) {\n        require(_version1.length == _version2.length, \"Input length mismatch\");\n        uint counter = 0;\n        for (uint8 j = 0; j < _version1.length; j++) {\n            if (_version1[j] == 0)\n                counter ++;\n        }\n        if (counter != _version1.length) {\n            counter = 0;\n            for (uint8 i = 0; i < _version1.length; i++) {\n                if (_version2[i] > _version1[i])\n                    return true;\n                else if (_version2[i] < _version1[i])\n                    return false;\n                else\n                    counter++;\n            }\n            if (counter == _version1.length - 1)\n                return true;\n            else\n                return false;\n        } else\n            return true;\n    }\n\n    /**\n     * @notice Used to compare the upper bound with the latest version\n     * @param _version1 Array holds the upper bound of the version\n     * @param _version2 Array holds the latest version of the ST\n     * @return bool\n     */\n    function compareUpperBound(uint8[] _version1, uint8[] _version2) internal pure returns(bool) {\n        require(_version1.length == _version2.length, \"Input length mismatch\");\n        uint counter = 0;\n        for (uint8 j = 0; j < _version1.length; j++) {\n            if (_version1[j] == 0)\n                counter ++;\n        }\n        if (counter != _version1.length) {\n            counter = 0;\n            for (uint8 i = 0; i < _version1.length; i++) {\n                if (_version1[i] > _version2[i])\n                    return true;\n                else if (_version1[i] < _version2[i])\n                    return false;\n                else\n                    counter++;\n            }\n            if (counter == _version1.length - 1)\n                return true;\n            else\n                return false;\n        } else\n            return true;\n    }\n\n\n    /**\n     * @notice Used to pack the uint8[] array data into uint24 value\n     * @param _major Major version\n     * @param _minor Minor version\n     * @param _patch Patch version\n     */\n    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n        return (uint24(_major) << 16) | (uint24(_minor) << 8) | uint24(_patch);\n    }\n\n    /**\n     * @notice Used to convert packed data into uint8 array\n     * @param _packedVersion Packed data\n     */\n    function unpack(uint24 _packedVersion) internal pure returns (uint8[]) {\n        uint8[] memory _unpackVersion = new uint8[](3);\n        _unpackVersion[0] = uint8(_packedVersion >> 16);\n        _unpackVersion[1] = uint8(_packedVersion >> 8);\n        _unpackVersion[2] = uint8(_packedVersion);\n        return _unpackVersion;\n    }\n\n\n}\n\n/**\n * @title Interface that any module factory contract should implement\n * @notice Contract is abstract\n */\ncontract ModuleFactory is IModuleFactory, Ownable {\n\n    IERC20 public polyToken;\n    uint256 public usageCost;\n    uint256 public monthlySubscriptionCost;\n\n    uint256 public setupCost;\n    string public description;\n    string public version;\n    bytes32 public name;\n    string public title;\n\n    // @notice Allow only two variables to be stored\n    // 1. lowerBound \n    // 2. upperBound\n    // @dev (0.0.0 will act as the wildcard) \n    // @dev uint24 consists packed value of uint8 _major, uint8 _minor, uint8 _patch\n    mapping(string => uint24) compatibleSTVersionRange;\n\n    /**\n     * @notice Constructor\n     * @param _polyAddress Address of the polytoken\n     */\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\n        polyToken = IERC20(_polyAddress);\n        setupCost = _setupCost;\n        usageCost = _usageCost;\n        monthlySubscriptionCost = _subscriptionCost;\n    }\n\n    /**\n     * @notice Used to change the fee of the setup cost\n     * @param _newSetupCost new setup cost\n     */\n    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\n        emit ChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\n        setupCost = _newSetupCost;\n    }\n\n    /**\n     * @notice Used to change the fee of the usage cost\n     * @param _newUsageCost new usage cost\n     */\n    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\n        emit ChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\n        usageCost = _newUsageCost;\n    }\n\n    /**\n     * @notice Used to change the fee of the subscription cost\n     * @param _newSubscriptionCost new subscription cost\n     */\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\n        emit ChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\n        monthlySubscriptionCost = _newSubscriptionCost;\n\n    }\n\n    /**\n     * @notice Updates the title of the ModuleFactory\n     * @param _newTitle New Title that will replace the old one.\n     */\n    function changeTitle(string _newTitle) public onlyOwner {\n        require(bytes(_newTitle).length > 0, \"Invalid title\");\n        title = _newTitle;\n    }\n\n    /**\n     * @notice Updates the description of the ModuleFactory\n     * @param _newDesc New description that will replace the old one.\n     */\n    function changeDescription(string _newDesc) public onlyOwner {\n        require(bytes(_newDesc).length > 0, \"Invalid description\");\n        description = _newDesc;\n    }\n\n    /**\n     * @notice Updates the name of the ModuleFactory\n     * @param _newName New name that will replace the old one.\n     */\n    function changeName(bytes32 _newName) public onlyOwner {\n        require(_newName != bytes32(0),\"Invalid name\");\n        name = _newName;\n    }\n\n    /**\n     * @notice Updates the version of the ModuleFactory\n     * @param _newVersion New name that will replace the old one.\n     */\n    function changeVersion(string _newVersion) public onlyOwner {\n        require(bytes(_newVersion).length > 0, \"Invalid version\");\n        version = _newVersion;\n    }\n\n    /**\n     * @notice Function use to change the lower and upper bound of the compatible version st\n     * @param _boundType Type of bound\n     * @param _newVersion new version array\n     */\n    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external onlyOwner {\n        require(\n            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked(\"lowerBound\")) ||\n            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked(\"upperBound\")),\n            \"Must be a valid bound type\"\n        );\n        require(_newVersion.length == 3);\n        if (compatibleSTVersionRange[_boundType] != uint24(0)) { \n            uint8[] memory _currentVersion = VersionUtils.unpack(compatibleSTVersionRange[_boundType]);\n            require(VersionUtils.isValidVersion(_currentVersion, _newVersion), \"Failed because of in-valid version\");\n        }\n        compatibleSTVersionRange[_boundType] = VersionUtils.pack(_newVersion[0], _newVersion[1], _newVersion[2]);\n        emit ChangeSTVersionBound(_boundType, _newVersion[0], _newVersion[1], _newVersion[2]);\n    }\n\n    /**\n     * @notice Used to get the lower bound\n     * @return lower bound\n     */\n    function getLowerSTVersionBounds() external view returns(uint8[]) {\n        return VersionUtils.unpack(compatibleSTVersionRange[\"lowerBound\"]);\n    }\n\n    /**\n     * @notice Used to get the upper bound\n     * @return upper bound\n     */\n    function getUpperSTVersionBounds() external view returns(uint8[]) {\n        return VersionUtils.unpack(compatibleSTVersionRange[\"upperBound\"]);\n    }\n\n    /**\n     * @notice Get the setup cost of the module\n     */\n    function getSetupCost() external view returns (uint256) {\n        return setupCost;\n    }\n\n   /**\n    * @notice Get the name of the Module\n    */\n    function getName() public view returns(bytes32) {\n        return name;\n    }\n\n}\n\n/**\n * @title Factory for deploying ManualApprovalTransferManager module\n */\ncontract ManualApprovalTransferManagerFactory is ModuleFactory {\n\n    /**\n     * @notice Constructor\n     * @param _polyAddress Address of the polytoken\n     * @param _setupCost Setup cost of the module\n     * @param _usageCost Usage cost of the module\n     * @param _subscriptionCost Subscription cost of the module\n     */\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public\n    ModuleFactory(_polyAddress, _setupCost, _usageCost, _subscriptionCost)\n    {\n        version = \"2.1.0\";\n        name = \"ManualApprovalTransferManager\";\n        title = \"Manual Approval Transfer Manager\";\n        description = \"Manage transfers using single approvals\";\n        compatibleSTVersionRange[\"lowerBound\"] = VersionUtils.pack(uint8(0), uint8(0), uint8(0));\n        compatibleSTVersionRange[\"upperBound\"] = VersionUtils.pack(uint8(0), uint8(0), uint8(0));\n    }\n\n     /**\n     * @notice used to launch the Module with the help of factory\n     * @return address Contract address of the Module\n     */\n    function deploy(bytes /* _data */) external returns(address) {\n        if (setupCost > 0)\n            require(polyToken.transferFrom(msg.sender, owner, setupCost), \"Failed transferFrom because of sufficent Allowance is not provided\");\n        address manualTransferManager = new ManualApprovalTransferManager(msg.sender, address(polyToken));\n        /*solium-disable-next-line security/no-block-members*/\n        emit GenerateModuleFromFactory(address(manualTransferManager), getName(), address(this), msg.sender, setupCost, now);\n        return address(manualTransferManager);\n    }\n\n    /**\n     * @notice Type of the Module factory\n     */\n    function getTypes() external view returns(uint8[]) {\n        uint8[] memory res = new uint8[](1);\n        res[0] = 2;\n        return res;\n    }\n\n    /**\n     * @notice Returns the instructions associated with the module\n     */\n    function getInstructions() external view returns(string) {\n        /*solium-disable-next-line max-len*/\n        return \"Allows an issuer to set manual approvals for specific pairs of addresses and amounts. Init function takes no parameters.\";\n    }\n\n    /**\n     * @notice Get the tags related to the module factory\n     */\n    function getTags() external view returns(bytes32[]) {\n        bytes32[] memory availableTags = new bytes32[](2);\n        availableTags[0] = \"ManualApproval\";\n        availableTags[1] = \"Transfer Restriction\";\n        return availableTags;\n    }\n\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlySubscriptionCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTitle\",\"type\":\"string\"}],\"name\":\"changeTitle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSubscriptionCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySubscriptionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSetupCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySetupFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"string\"}],\"name\":\"changeVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLowerSTVersionBounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newName\",\"type\":\"bytes32\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTags\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSetupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUsageCost\",\"type\":\"uint256\"}],\"name\":\"changeFactoryUsageFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstructions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDesc\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpperSTVersionBounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boundType\",\"type\":\"string\"},{\"name\":\"_newVersion\",\"type\":\"uint8[]\"}],\"name\":\"changeSTVersionBounds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_polyAddress\",\"type\":\"address\"},{\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"name\":\"_usageCost\",\"type\":\"uint256\"},{\"name\":\"_subscriptionCost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactorySetupFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactoryUsageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newMonthlySubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactorySubscriptionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_moduleName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_moduleFactory\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"GenerateModuleFromFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_boundType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_major\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_minor\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_patch\",\"type\":\"uint8\"}],\"name\":\"ChangeSTVersionBound\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160808062004ac08339810160408181528251602080850151838601516060909601516000805433600160a060020a03199182161790915560018054909116600160a060020a03861617905560048290556002879055600381905584860190945260058086527f322e312e300000000000000000000000000000000000000000000000000000009290950191825291949193919291620000b79160069162000290565b507f4d616e75616c417070726f76616c5472616e736665724d616e616765720000006007556040805180820190915260208082527f4d616e75616c20417070726f76616c205472616e73666572204d616e61676572918101918252620001209160089162000290565b506040805160608101825260278082527f4d616e616765207472616e7366657273207573696e672073696e676c65206170602083019081527f70726f76616c730000000000000000000000000000000000000000000000000092909301919091526200018f9160059162000290565b50620001ac60008080640100000000620017736200027582021704565b604080517f6c6f776572426f756e640000000000000000000000000000000000000000000081526009600a820152905190819003602a019020805462ffffff9290921662ffffff199092169190911790556200021960008080640100000000620017736200027582021704565b604080517f7570706572426f756e640000000000000000000000000000000000000000000081526009600a820152905190819003602a019020805462ffffff9290921662ffffff19909216919091179055506200033592505050565b60ff9081169181166101000292166201000002919091171790565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d357805160ff191683800117855562000303565b8280016001018555821562000303579182015b8281111562000303578251825591602001919060010190620002e6565b506200031192915062000315565b5090565b6200033291905b808211156200031157600081556001016200031c565b90565b61477b80620003456000396000f30060806040526004361061015d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662774360811461016257806306184a251461019e57806306fdde03146101c557806317d7de7c146101da5780632dbe07c7146101ef5780633ae192bd1461024a5780634a79d50c1461026257806354fd4d50146102ec57806358a191c31461030157806364bb432c146103195780636faa22a514610372578063715018a6146103875780637284e4161461039c5780637e363ffa146103b15780638677768f146103c6578063898855ed1461042b5780638da5cb5b14610443578063995d9ab714610458578063a5e9d7c91461046d578063aac67b0514610482578063b4579d601461049a578063d54c4726146104af578063e0d54970146104c4578063e6120413146104d9578063f2fde38b14610532578063f786299914610553578063fb97245614610568575b600080fd5b34801561016e57600080fd5b506101826004803560248101910135610594565b60408051600160a060020a039092168252519081900360200190f35b3480156101aa57600080fd5b506101b361079f565b60408051918252519081900360200190f35b3480156101d157600080fd5b506101b36107a5565b3480156101e657600080fd5b506101b36107ab565b3480156101fb57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102489436949293602493928401919081908401838280828437509497506107b29650505050505050565b005b34801561025657600080fd5b50610248600435610839565b34801561026e57600080fd5b50610277610896565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102b1578181015183820152602001610299565b50505050905090810190601f1680156102de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102f857600080fd5b50610277610924565b34801561030d57600080fd5b5061024860043561097f565b34801561032557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102489436949293602493928401919081908401838280828437509497506109dc9650505050505050565b34801561037e57600080fd5b50610182610a5f565b34801561039357600080fd5b50610248610a6e565b3480156103a857600080fd5b50610277610ada565b3480156103bd57600080fd5b506101b3610b35565b3480156103d257600080fd5b506103db610b3b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104175781810151838201526020016103ff565b505050509050019250505060405180910390f35b34801561043757600080fd5b50610248600435610b8b565b34801561044f57600080fd5b50610182610bfe565b34801561046457600080fd5b506103db610c0d565b34801561047957600080fd5b506101b3610cae565b34801561048e57600080fd5b50610248600435610cb4565b3480156104a657600080fd5b506103db610d11565b3480156104bb57600080fd5b506101b3610d5d565b3480156104d057600080fd5b50610277610d63565b3480156104e557600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610248943694929360249392840191908190840183828082843750949750610e0e9650505050505050565b34801561053e57600080fd5b50610248600160a060020a0360043516610e91565b34801561055f57600080fd5b506103db610eb4565b34801561057457600080fd5b506102486024600480358281019290820135918135918201910135610eff565b600080600060045411156106f2576001546000805460048054604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523393810193909352600160a060020a03938416602484015260448301919091525191909316926323b872dd9260648083019360209390929083900390910190829087803b15801561062457600080fd5b505af1158015610638573d6000803e3d6000fd5b505050506040513d602081101561064e57600080fd5b505115156106f2576040805160e560020a62461bcd02815260206004820152604260248201527f4661696c6564207472616e7366657246726f6d2062656361757365206f66207360448201527f7566666963656e7420416c6c6f77616e6365206973206e6f742070726f76696460648201527f6564000000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6001543390600160a060020a031661070861178e565b600160a060020a03928316815291166020820152604080519182900301906000f08015801561073b573d6000803e3d6000fd5b509050306107476107ab565b60045460408051600160a060020a038616815233602082015280820192909252426060830152517fb68b4973fbce93f056103272c1f3f53b607527138d7e323b7b94f7ac169ebf779181900360800190a39392505050565b60035481565b60075481565b6007545b90565b600054600160a060020a031633146107c957600080fd5b8051600010610822576040805160e560020a62461bcd02815260206004820152600d60248201527f496e76616c6964207469746c6500000000000000000000000000000000000000604482015290519081900360640190fd5b805161083590600890602084019061179e565b5050565b600054600160a060020a0316331461085057600080fd5b60035460408051918252602082018390523082820152517fb14468ff50b0c356f5373be0ef0791de71449aaf8ac5ca096049b7ac79d0b1139181900360600190a1600355565b6008805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561091c5780601f106108f15761010080835404028352916020019161091c565b820191906000526020600020905b8154815290600101906020018083116108ff57829003601f168201915b505050505081565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561091c5780601f106108f15761010080835404028352916020019161091c565b600054600160a060020a0316331461099657600080fd5b60045460408051918252602082018390523082820152517f9672983540fb671cd7c0c946255b4dc769a3e557a25ef91ca7c98995c8d694b69181900360600190a1600455565b600054600160a060020a031633146109f357600080fd5b8051600010610a4c576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642076657273696f6e0000000000000000000000000000000000604482015290519081900360640190fd5b805161083590600690602084019061179e565b600154600160a060020a031681565b600054600160a060020a03163314610a8557600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561091c5780601f106108f15761010080835404028352916020019161091c565b60045481565b604080517f6c6f776572426f756e640000000000000000000000000000000000000000000081526009600a820152905190819003602a01902054606090610b869062ffffff1661143e565b905090565b600054600160a060020a03163314610ba257600080fd5b801515610bf9576040805160e560020a62461bcd02815260206004820152600c60248201527f496e76616c6964206e616d650000000000000000000000000000000000000000604482015290519081900360640190fd5b600755565b600054600160a060020a031681565b6040805160028082526060808301845292839291906020830190803883390190505090507f4d616e75616c417070726f76616c000000000000000000000000000000000000816000815181101515610c6157fe5b6020908102909101015280517f5472616e73666572205265737472696374696f6e0000000000000000000000009082906001908110610c9c57fe5b602090810290910101529050805b5090565b60045490565b600054600160a060020a03163314610ccb57600080fd5b60025460408051918252602082018390523082820152517fc39ec4e85127e00b5b203f9c40814616d5977d8de85e6e0717e5ca4b0896206c9181900360600190a1600255565b604080516001808252818301909252606091829190602080830190803883390190505090506002816000815181101515610d4757fe5b60ff909216602092830290910190910152905090565b60025481565b6040805160a081018252607881527f416c6c6f777320616e2069737375657220746f20736574206d616e75616c206160208201527f7070726f76616c7320666f72207370656369666963207061697273206f662061918101919091527f646472657373657320616e6420616d6f756e74732e20496e69742066756e637460608201527f696f6e2074616b6573206e6f20706172616d65746572732e0000000000000000608082015290565b600054600160a060020a03163314610e2557600080fd5b8051600010610e7e576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964206465736372697074696f6e00000000000000000000000000604482015290519081900360640190fd5b805161083590600590602084019061179e565b600054600160a060020a03163314610ea857600080fd5b610eb1816114e3565b50565b604080517f7570706572426f756e640000000000000000000000000000000000000000000081526009600a820152905190819003602a01902054606090610b869062ffffff1661143e565b600054606090600160a060020a03163314610f1957600080fd5b60405160200180807f6c6f776572426f756e6400000000000000000000000000000000000000000000815250600a0190506040516020818303038152906040526040518082805190602001908083835b60208310610f885780518252601f199092019160209182019101610f69565b51815160209384036101000a600019018019909216911617905260405191909301819003812094508993508892019050808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b602083106110065780518252601f199092019160209182019101610fe7565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916148061115e575060405160200180807f7570706572426f756e6400000000000000000000000000000000000000000000815250600a0190506040516020818303038152906040526040518082805190602001908083835b602083106110ad5780518252601f19909201916020918201910161108e565b51815160209384036101000a600019018019909216911617905260405191909301819003812094508993508892019050808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b6020831061112b5780518252601f19909201916020918201910161110c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b15156111b4576040805160e560020a62461bcd02815260206004820152601a60248201527f4d75737420626520612076616c696420626f756e642074797065000000000000604482015290519081900360640190fd5b600382146111c157600080fd5b600062ffffff1660098686604051808383808284379091019485525050604051928390036020019092205462ffffff169290921491506112e790505761123260098686604051808383808284379091019485525050604051928390036020019092205462ffffff16915061143e9050565b905061126b8184848080602002602001604051908101604052809392919081815260200183836020028082843750611560945050505050565b15156112e7576040805160e560020a62461bcd02815260206004820152602260248201527f4661696c65642062656361757365206f6620696e2d76616c696420766572736960448201527f6f6e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b611338838360008181106112f757fe5b9050602002013560ff1684846001818110151561131057fe5b9050602002013560ff1685856002818110151561132957fe5b9050602002013560ff16611773565b6009868660405180838380828437909101948552505060405192839003602001909220805462ffffff9490941662ffffff1990941693909317909255507f5b67e16edaf7fc70c8d065ea6e70b97ed944d98fe593b04d682216615a3b04db90508585858560008181106113a757fe5b9050602002013560ff168686600181811015156113c057fe5b9050602002013560ff168787600281811015156113d957fe5b9050602002013560ff1660405180806020018560ff1660ff1681526020018460ff1660ff1681526020018360ff1660ff168152602001828103825287878281815260200192508082843760405192018290039850909650505050505050a15050505050565b6040805160038082526080820190925260609182919060208201838038833950508151919250506201000062ffffff851604908290600090811061147e57fe5b60ff909216602092830290910190910152805161010062ffffff85160490829060019081106114a957fe5b60ff90921660209283029091019091015280518390829060029081106114cb57fe5b60ff9092166020928302909101909101529050919050565b600160a060020a03811615156114f857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600060606000808551604051908082528060200260200182016040528015611592578160200160208202803883390190505b50925060009150600090505b85518160ff16101561163e57848160ff168151811015156115bb57fe5b9060200190602002015160ff16868260ff168151811015156115d957fe5b9060200190602002015160ff161015611613576001838260ff168151811015156115ff57fe5b911515602092830290910190910152611636565b6000838260ff1681518110151561162657fe5b9115156020928302909101909101525b60010161159e565b5060005b85518160ff1610156117595760ff811615156116db57848160ff1681518110151561166957fe5b9060200190602002015160ff16868260ff1681518110151561168757fe5b6020908102909101015160ff16116116cd578260008151811015156116a857fe5b90602001906020020151156116c257816003019150611759565b6001909101906116d6565b6000935061176a565b611751565b826001820360ff168151811015156116ef57fe5b906020019060200201511561170957600190910190611751565b848160ff1681518110151561171a57fe5b9060200190602002015160ff16868260ff1681518110151561173857fe5b6020908102909101015160ff16116116cd576001909101905b600101611642565b85518260ff16141561176a57600193505b50505092915050565b60ff9081169181166101000292166201000002919091171790565b604051612f238061182d83390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106117df57805160ff191683800117855561180c565b8280016001018555821561180c579182015b8281111561180c5782518255916020019190600101906117f1565b50610caa926107af9250905b80821115610caa5760008155600101611818560060806040526002805460a060020a60ff021916905534801561002057600080fd5b50604051604080612f2383398101604052805160209091015160018054600160a060020a03938416600160a060020a0319918216179091556000805482163317905560028054939092169216919091179055612ea2806100816000396000f3006080604052600436106101245763ffffffff60e060020a6000350416631613ec9d81146101295780633f4ba83a1461017357806348637f081461018a5780635677829f146103075780635c975abb146103375780635e6ebfc5146103605780635f7619a41461039957806363035f66146103b15780636faa22a5146104005780637dc32b0b146104315780638456cb59146104585780639f7cd0ef1461046d578063b2b808d514610482578063b84dfbd2146104c7578063c3a07df6146104dc578063c3a55f3a14610541578063c45a015514610591578063d70afa96146105a6578063d786e3ff146105bb578063d9195a2a1461072d578063de6ee1bc14610762578063e0d9d749146107f9578063e3c6a72b1461081a578063e7529d0d14610846575b600080fd5b34801561013557600080fd5b5061013e61085b565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b34801561017f57600080fd5b50610188610861565b005b34801561019657600080fd5b5061019f610949565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b838110156101ef5781810151838201526020016101d7565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b8381101561022e578181015183820152602001610216565b50505050905001868103845289818151815260200191508051906020019060200280838360005b8381101561026d578181015183820152602001610255565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156102ac578181015183820152602001610294565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156102eb5781810151838201526020016102d3565b505050509050019a505050505050505050505060405180910390f35b34801561031357600080fd5b50610188600160a060020a0360043581169060243516604435606435608435610bc1565b34801561034357600080fd5b5061034c610d5e565b604080519115158252519081900360200190f35b34801561036c57600080fd5b50610387600160a060020a0360043581169060243516610d6e565b60408051918252519081900360200190f35b3480156103a557600080fd5b5061034c600435610d8b565b3480156103bd57600080fd5b506103c96004356110a7565b60408051600160a060020a039687168152949095166020850152838501929092526060830152608082015290519081900360a00190f35b34801561040c57600080fd5b506104156110f2565b60408051600160a060020a039092168252519081900360200190f35b34801561043d57600080fd5b50610188600160a060020a0360043581169060243516611101565b34801561046457600080fd5b50610188611298565b34801561047957600080fd5b5061038761137e565b34801561048e57600080fd5b506104a9600160a060020a0360043581169060243516611390565b60408051938452602084019290925282820152519081900360600190f35b3480156104d357600080fd5b50610415611411565b3480156104e857600080fd5b506104f1611420565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561052d578181015183820152602001610515565b505050509050019250505060405180910390f35b34801561054d57600080fd5b506101886024600480358281019290820135918135808301929082013591604435808301929082013591606435808301929082013591608435918201910135611475565b34801561059d57600080fd5b506104156117a0565b3480156105b257600080fd5b506103876117af565b3480156105c757600080fd5b506040805160206004803580820135838102808601850190965280855261018895369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506117d39650505050505050565b34801561073957600080fd5b50610188600160a060020a036004358116906024351660443560643560843560a4351515611a7e565b34801561076e57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526107d594600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750505050913515159250611c1d915050565b604051808260038111156107e557fe5b60ff16815260200191505060405180910390f35b34801561080557600080fd5b5061019f600160a060020a0360043516611d44565b34801561082657600080fd5b506101886024600480358281019290820135918135918201910135612120565b34801561085257600080fd5b50610387612359565b60005b90565b600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b505050506040513d60208110156108de57600080fd5b5051600160a060020a0316331461093f576040805160e560020a62461bcd02815260206004820152601360248201527f53656e646572206973206e6f74206f776e657200000000000000000000000000604482015290519081900360640190fd5b61094761235f565b565b60608060608060608060608060608060008060048054905060405190808252806020026020018201604052801561098a578160200160208202803883390190505b5060045460408051828152602080840282010190915291985080156109b9578160200160208202803883390190505b5060045460408051828152602080840282010190915291975080156109e8578160200160208202803883390190505b506004546040805182815260208084028201019091529196508015610a17578160200160208202803883390190505b506004546040805182815260208084028201019091529195508015610a46578160200160208202803883390190505b506004549093509150600090505b81811015610baf576004805482908110610a6a57fe5b60009182526020909120600590910201548751600160a060020a0390911690889083908110610a9557fe5b600160a060020a039092166020928302909101909101526004805482908110610aba57fe5b60009182526020909120600160059092020101548651600160a060020a0390911690879083908110610ae857fe5b600160a060020a039092166020928302909101909101526004805482908110610b0d57fe5b9060005260206000209060050201600201548582815181101515610b2d57fe5b602090810290910101526004805482908110610b4557fe5b9060005260206000209060050201600301548482815181101515610b6557fe5b602090810290910101526004805482908110610b7d57fe5b9060005260206000209060050201600401548382815181101515610b9d57fe5b60209081029091010152600101610a54565b50949a93995091975095509350915050565b600080516020612e37833981519152600080600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610c2657600080fd5b505af1158015610c3a573d6000803e3d6000fd5b505050506040513d6020811015610c5057600080fd5b505160005433600160a060020a039283168114945091161490508180610c735750805b80610d0357506001546040805160e060020a638658b8b9028152336004820152306024820152604481018690529051600160a060020a0390921691638658b8b9916064808201926020929091908290030181600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050506040513d6020811015610d0057600080fd5b50515b1515610d47576040805160e560020a62461bcd0281526020600482015260176024820152600080516020612e57833981519152604482015290519081900360640190fd5b610d548888888888612415565b5050505050505050565b60025460a060020a900460ff1681565b600360209081526000928352604080842090915290825290205481565b60007f4645455f41444d494e0000000000000000000000000000000000000000000000600080600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e0457600080fd5b505af1158015610e18573d6000803e3d6000fd5b505050506040513d6020811015610e2e57600080fd5b505160005433600160a060020a039283168114945091161490508180610e515750805b80610ee157506001546040805160e060020a638658b8b9028152336004820152306024820152604481018690529051600160a060020a0390921691638658b8b9916064808201926020929091908290030181600087803b158015610eb457600080fd5b505af1158015610ec8573d6000803e3d6000fd5b505050506040513d6020811015610ede57600080fd5b50515b1515610f25576040805160e560020a62461bcd0281526020600482015260176024820152600080516020612e57833981519152604482015290519081900360640190fd5b60025460015460008054604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600160a060020a03958616956323b872dd95811694931692638da5cb5b92600480820193602093909283900390910190829087803b158015610f9957600080fd5b505af1158015610fad573d6000803e3d6000fd5b505050506040513d6020811015610fc357600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039384166004820152929091166024830152604482018990525160648083019260209291908290030181600087803b15801561101a57600080fd5b505af115801561102e573d6000803e3d6000fd5b505050506040513d602081101561104457600080fd5b5051151561109c576040805160e560020a62461bcd02815260206004820152601260248201527f556e61626c6520746f2074616b65206665650000000000000000000000000000604482015290519081900360640190fd5b506001949350505050565b60048054829081106110b557fe5b600091825260209091206005909102018054600182015460028301546003840154600490940154600160a060020a03938416955091909216929085565b600254600160a060020a031681565b600080516020612e37833981519152600080600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050506040513d602081101561119057600080fd5b505160005433600160a060020a0392831681149450911614905081806111b35750805b8061124357506001546040805160e060020a638658b8b9028152336004820152306024820152604481018690529051600160a060020a0390921691638658b8b9916064808201926020929091908290030181600087803b15801561121657600080fd5b505af115801561122a573d6000803e3d6000fd5b505050506040513d602081101561124057600080fd5b50515b1515611287576040805160e560020a62461bcd0281526020600482015260176024820152600080516020612e57833981519152604482015290519081900360640190fd5b61129185856127a1565b5050505050565b600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156112eb57600080fd5b505af11580156112ff573d6000803e3d6000fd5b505050506040513d602081101561131557600080fd5b5051600160a060020a03163314611376576040805160e560020a62461bcd02815260206004820152601360248201527f53656e646572206973206e6f74206f776e657200000000000000000000000000604482015290519081900360640190fd5b6109476129c9565b600080516020612e3783398151915281565b600160a060020a0380831660009081526003602090815260408083209385168352929052908120548190819081811561140857600454600019909201918210156114085760048054839081106113e257fe5b906000526020600020906005020190508060030154816002015482600401549450945094505b50509250925092565b600154600160a060020a031681565b60408051600180825281830190925260609182919060208083019080388339019050509050600080516020612e3783398151915281600081518110151561146357fe5b602090810290910101529050805b5090565b6000600080516020612e37833981519152600080600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156114dc57600080fd5b505af11580156114f0573d6000803e3d6000fd5b505050506040513d602081101561150657600080fd5b505160005433600160a060020a0392831681149450911614905081806115295750805b806115b957506001546040805160e060020a638658b8b9028152336004820152306024820152604481018690529051600160a060020a0390921691638658b8b9916064808201926020929091908290030181600087803b15801561158c57600080fd5b505af11580156115a0573d6000803e3d6000fd5b505050506040513d60208110156115b657600080fd5b50515b15156115fd576040805160e560020a62461bcd0281526020600482015260176024820152600080516020612e57833981519152604482015290519081900360640190fd5b6116f38e8e808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508d8d808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508c8c808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508a8a8080602002602001604051908101604052809392919081815260200183836020028082843750612a84945050505050565b600093505b8c841015611790576117858e8e8681811061170f57fe5b90506020020135600160a060020a03168d8d87818110151561172d57fe5b90506020020135600160a060020a03168c8c88818110151561174b57fe5b905060200201358b8b89818110151561176057fe5b905060200201358a8a8a818110151561177557fe5b9050602002013560001916612415565b6001909301926116f8565b5050505050505050505050505050565b600054600160a060020a031681565b7f4645455f41444d494e000000000000000000000000000000000000000000000081565b6000600080516020612e37833981519152600080600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561183a57600080fd5b505af115801561184e573d6000803e3d6000fd5b505050506040513d602081101561186457600080fd5b505160005433600160a060020a0392831681149450911614905081806118875750805b8061191757506001546040805160e060020a638658b8b9028152336004820152306024820152604481018690529051600160a060020a0390921691638658b8b9916064808201926020929091908290030181600087803b1580156118ea57600080fd5b505af11580156118fe573d6000803e3d6000fd5b505050506040513d602081101561191457600080fd5b50515b151561195b576040805160e560020a62461bcd0281526020600482015260176024820152600080516020612e57833981519152604482015290519081900360640190fd5b6119688a8a898b8a612a84565b86518551146119c1576040805160e560020a62461bcd02815260206004820152601b60248201527f496e707574206c656e677468206172726179206d69736d617463680000000000604482015290519081900360640190fd5b600093505b8951841015611a7257611a678a858151811015156119e057fe5b906020019060200201518a868151811015156119f857fe5b906020019060200201518a87815181101515611a1057fe5b906020019060200201518a88815181101515611a2857fe5b906020019060200201518a89815181101515611a4057fe5b906020019060200201518a8a815181101515611a5857fe5b90602001906020020151612b06565b6001909301926119c6565b50505050505050505050565b600080516020612e37833981519152600080600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611ae357600080fd5b505af1158015611af7573d6000803e3d6000fd5b505050506040513d6020811015611b0d57600080fd5b505160005433600160a060020a039283168114945091161490508180611b305750805b80611bc057506001546040805160e060020a638658b8b9028152336004820152306024820152604481018690529051600160a060020a0390921691638658b8b9916064808201926020929091908290030181600087803b158015611b9357600080fd5b505af1158015611ba7573d6000803e3d6000fd5b505050506040513d6020811015611bbd57600080fd5b50515b1515611c04576040805160e560020a62461bcd0281526020600482015260176024820152600080516020612e57833981519152604482015290519081900360640190fd5b611c12898989898989612b06565b505050505050505050565b6000808080841580611c395750600154600160a060020a031633145b1515611c8f576040805160e560020a62461bcd02815260206004820152601760248201527f53656e646572206973206e6f7420746865206f776e6572000000000000000000604482015290519081900360640190fd5b600160a060020a038981166000908152600360209081526040808320938c168352929052205460025490935060a060020a900460ff16158015611cd157508215155b15611d3357600480546000199094019384908110611ceb57fe5b906000526020600020906005020191508160020154905042826003015410158015611d165750868110155b15611d33578415611d2a5786810360028301555b60029350611d38565b600193505b50505095945050505050565b60045460609081908190819081906000908183808080805b86861015611e19578d600160a060020a0316600487815481101515611d7d57fe5b6000918252602090912060059091020154600160a060020a03161480611dd657508d600160a060020a0316600487815481101515611db757fe5b6000918252602090912060016005909202010154600160a060020a0316145b8015611e02575042600487815481101515611ded57fe5b90600052602060002090600502016003015410155b15611e0e576001909701965b600190950194611d5c565b87604051908082528060200260200182016040528015611e43578160200160208202803883390190505b50945087604051908082528060200260200182016040528015611e70578160200160208202803883390190505b50935087604051908082528060200260200182016040528015611e9d578160200160208202803883390190505b50925087604051908082528060200260200182016040528015611eca578160200160208202803883390190505b50915087604051908082528060200260200182016040528015611ef7578160200160208202803883390190505b50905060009750600095505b8686101561210b578d600160a060020a0316600487815481101515611f2457fe5b6000918252602090912060059091020154600160a060020a03161480611f7d57508d600160a060020a0316600487815481101515611f5e57fe5b6000918252602090912060016005909202010154600160a060020a0316145b8015611fa9575042600487815481101515611f9457fe5b90600052602060002090600502016003015410155b15612100576004805487908110611fbc57fe5b60009182526020909120600590910201548551600160a060020a039091169086908a908110611fe757fe5b600160a060020a03909216602092830290910190910152600480548790811061200c57fe5b60009182526020909120600160059092020101548451600160a060020a039091169085908a90811061203a57fe5b600160a060020a03909216602092830290910190910152600480548790811061205f57fe5b906000526020600020906005020160020154838981518110151561207f57fe5b60209081029091010152600480548790811061209757fe5b90600052602060002090600502016003015482898151811015156120b757fe5b6020908102909101015260048054879081106120cf57fe5b90600052602060002090600502016004015481898151811015156120ef57fe5b602090810290910101526001909701965b600190950194611f03565b939d929c50909a509850909650945050505050565b6000600080516020612e37833981519152600080600160009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561218757600080fd5b505af115801561219b573d6000803e3d6000fd5b505050506040513d60208110156121b157600080fd5b505160005433600160a060020a0392831681149450911614905081806121d45750805b8061226457506001546040805160e060020a638658b8b9028152336004820152306024820152604481018690529051600160a060020a0390921691638658b8b9916064808201926020929091908290030181600087803b15801561223757600080fd5b505af115801561224b573d6000803e3d6000fd5b505050506040513d602081101561226157600080fd5b50515b15156122a8576040805160e560020a62461bcd0281526020600482015260176024820152600080516020612e57833981519152604482015290519081900360640190fd5b8685146122ff576040805160e560020a62461bcd02815260206004820152601b60248201527f496e707574206172726179206c656e677468206d69736d617463680000000000604482015290519081900360640190fd5b600093505b86841015610d545761234e88888681811061231b57fe5b90506020020135600160a060020a0316878787818110151561233957fe5b90506020020135600160a060020a03166127a1565b600190930192612304565b60045490565b60025460a060020a900460ff1615156123c2576040805160e560020a62461bcd02815260206004820152601660248201527f436f6e7472616374206973206e6f742070617573656400000000000000000000604482015290519081900360640190fd5b6002805474ff0000000000000000000000000000000000000000191690556040805142815290517faaa520fdd7d2c83061d632fa017b0432407e798818af63ea908589fceda39ab79181900360200190a1565b6000600160a060020a0385161515612477576040805160e560020a62461bcd02815260206004820152601260248201527f496e76616c696420746f20616464726573730000000000000000000000000000604482015290519081900360640190fd5b4283116124ce576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964206578706972792074696d6500000000000000000000000000604482015290519081900360640190fd5b60008411612526576040805160e560020a62461bcd02815260206004820152601160248201527f496e76616c696420616c6c6f77616e6365000000000000000000000000000000604482015290519081900360640190fd5b50600160a060020a0380861660009081526003602090815260408083209388168352929052205480156126085760048054600019909201914291908390811061256b57fe5b90600052602060002090600502016003015410806125a85750600480548290811061259257fe5b9060005260206000209060050201600201546000145b15156125fe576040805160e560020a62461bcd02815260206004820152601760248201527f417070726f76616c20616c726561647920657869737473000000000000000000604482015290519081900360640190fd5b61260886866127a1565b6040805160a081018252600160a060020a0380891680835288821660208085018281528587018b815260608088018c8152608089018c81526004805460018101825560008281529b5160059091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81018054928d1673ffffffffffffffffffffffffffffffffffffffff1993841617905596517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c8801805491909c1691161790995592517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d850155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e84015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90920191909155935483865260038252868620838752825294869020949094558451898152938401889052838501879052935133949391927f694086b7577eae5577f90c1aa90ff38280eacd0709a8c7be707a219e92a150c9928290030190a4505050505050565b600160a060020a03808316600090815260036020908152604080832093851683529290529081205490811515612821576040805160e560020a62461bcd02815260206004820152601760248201527f417070726f76616c20646f6573206e6f74206578697374000000000000000000604482015290519081900360640190fd5b50600454600019918201910180821461294c57600480548290811061284257fe5b906000526020600020906005020160048381548110151561285f57fe5b6000918252602082208354600590920201805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a0393841617825560018086015481840180549093169416939093179055600280850154908201556003808501548183015560049485015491850191909155835491860193909291869081106128e357fe5b60009182526020808320600590920290910154600160a060020a031683528201929092526040018120600480549192918690811061291d57fe5b6000918252602080832060016005909302019190910154600160a060020a031683528201929092526040019020555b600160a060020a0380851660009081526003602090815260408083209387168352929052908120556004805490612987906000198301612db2565b506040513390600160a060020a0385811691908716907fbe7baba984867cb2bb52a4035357b30f05c7e480fc9daf78a7b718ae6ee4a4fe90600090a450505050565b60025460a060020a900460ff1615612a2b576040805160e560020a62461bcd02815260206004820152601260248201527f436f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a1790556040805142815290517f68b095021b1f40fe513109f513c66692f0b3219aee674a69f4efc57badb8201d9181900360200190a1565b83518551148015612a96575081518451145b8015612aa3575082518251145b8015612ab0575080518351145b1515611291576040805160e560020a62461bcd02815260206004820152601b60248201527f496e707574206172726179206c656e677468206d69736d617463680000000000604482015290519081900360640190fd5b6000808080600160a060020a0389161515612b6b576040805160e560020a62461bcd02815260206004820152601260248201527f496e76616c696420746f20616464726573730000000000000000000000000000604482015290519081900360640190fd5b428811612bc2576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964206578706972792074696d6500000000000000000000000000604482015290519081900360640190fd5b600160a060020a03808b166000908152600360209081526040808320938d16835292905220549350831515612c41576040805160e560020a62461bcd02815260206004820152601460248201527f417070726f76616c206e6f742070726573656e74000000000000000000000000604482015290519081900360640190fd5b600480546000199095019485908110612c5657fe5b90600052602060002090600502019250826002015491508260030154905081600014158015612c8457504281115b1515612cda576040805160e560020a62461bcd02815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000871115612d1e578415612d0057612cf9828863ffffffff612d9f16565b9150612d16565b818710612d105760009150612d16565b86820391505b600283018290555b808814612d2d57600383018890555b60048301548614612d4057600483018690555b604080518981526020810184905280820188905290513391600160a060020a038c811692908e16917f0f3f478ce6278e66ad974b3190c8cb89c93292c1620c40408fee8b64c09ac52e919081900360600190a450505050505050505050565b81810182811015612dac57fe5b92915050565b815481835581811115612dde57600502816005028360005260206000209182019101612dde9190612de3565b505050565b61085e91905b8082111561147157805473ffffffffffffffffffffffffffffffffffffffff1990811682556001820180549091169055600060028201819055600382018190556004820155600501612de956005452414e534645525f415050524f56414c0000000000000000000000000000005065726d697373696f6e20636865636b206661696c6564000000000000000000a165627a7a72305820f281ddbc99afe60c047c7cbecc9bb3b50be406e2a286a58e364aaecfd19674ea0029a165627a7a723058208bf7e1f30edbbf283e2c9a379a8d2e8b3329a3b32767fad87449f8435fd92f1100290000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}