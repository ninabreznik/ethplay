{
  "address": "0x1dc994010375d1b6c0421f825c05c75f426031ec",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Grass",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-03\n*/\n\npragma solidity ^0.4.21;\n\ncontract Math\n{\n    /*\n    standard uint256 functions\n     */\n\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x * y) >= x);\n    }\n\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        z = x / y;\n    }\n\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n}\n\ncontract Grass is Math\n{\n  uint256 public availableTokens;\n  uint256 currentTokenPriceInDollar;\n\n  uint256 public lastUpdateEtherPrice;\n  uint256 public etherPriceInDollarIn;\n  uint256 public etherPriceInDollarOut;\n\n  function getCurrentTokenPrice() public constant returns (uint256)\n  {\n      uint256 today = getToday();\n      return (tokenPriceHistory[today] == 0)?currentTokenPriceInDollar:tokenPriceHistory[today];\n  }\n\n  mapping(uint256 => uint256) public tokenPriceHistory;\n  struct ExtraTokensInfo\n  {\n    uint256 timestamp;\n    uint256 extraTokens;\n    string  proofLink;\n    uint256 videoFileHash;\n  }\n\n  ExtraTokensInfo[] public extraTokens;\n\n  struct TokenInfo\n  {\n    uint256 amount;\n    bool isReturnedInPool;\n  }\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  // address => day => amount\n  mapping(address => mapping(uint256 => TokenInfo)) timeTable;\n  mapping(address => mapping(uint256 => uint256)) bonuses;\n  mapping (address => uint256) public balances;\n  uint256 public totalSupply;\n\n  string public name;\n  uint8 public decimals;\n  string public symbol;\n\n  bool isCanBuy = true;\n\n  modifier canBuy()\n  {\n      assert(isCanBuy);\n      _;\n  }\n\n  function changeState(bool bNewState) public onlyAdmin\n  {\n      isCanBuy = bNewState;\n  }\n\n  address owner;\n  mapping(address => bool) admins;\n  modifier onlyAdmin()\n  {\n      assert(admins[msg.sender] == true || msg.sender == owner);\n      _;\n  }\n\n  modifier onlyOwner()\n  {\n      assert(msg.sender == owner);\n      _;\n  }\n  function addAdmin(address addr) public onlyOwner\n  {\n      admins[addr] = true;\n  }\n  function removeAdmin(address addr) public onlyOwner\n  {\n      admins[addr] = false;\n  }\n\n  function Grass() public\n  {\n    // startTime = block.timestamp;\n    owner = msg.sender;\n    admins[msg.sender] = true;\n    totalSupply = 0;\n    name = 'GRASS Token';\n    decimals = 18;\n    symbol = 'GRASS';\n    availableTokens = 800 * 10**18;\n    currentTokenPriceInDollar = 35 * 100; // 35.00$ (price may change)\n\n    etherPriceInDollarIn = 388 * 100;\n    etherPriceInDollarOut = 450 * 100;\n    lastUpdateEtherPrice = block.timestamp;\n  }\n\n  function increaseMaxAvailableTokens(uint256 amount, string link, uint256 videoFileHash) onlyAdmin public\n  {\n    extraTokens.push(ExtraTokensInfo(block.timestamp, amount, link, videoFileHash));\n    availableTokens = add(availableTokens, amount);\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n      return balances[_owner];\n  }\n\n  function updateEtherPrice (uint256 newPriceIn, uint256 newPriceOut) onlyAdmin public\n  {\n    etherPriceInDollarIn = newPriceIn;\n    etherPriceInDollarOut = newPriceOut;\n    lastUpdateEtherPrice = block.timestamp;\n  }\n\n  modifier isEtherPriceUpdated()\n  {\n      require(now - lastUpdateEtherPrice < 24 hours);\n      _;\n  }\n\n  function updateTokenPrice (uint256 newPrice) onlyAdmin public\n  {\n    currentTokenPriceInDollar = newPrice;\n  }\n\n  function getToday() public constant returns (uint256)\n  {\n    return block.timestamp / 24 hours;\n  }\n\n  function() isEtherPriceUpdated canBuy isInitialized payable public\n  {\n    buyInternal(msg.sender);\n  }\n\n  function buyFor(address addr) isEtherPriceUpdated canBuy onlyAdmin isInitialized payable public\n  {\n    buyInternal(addr);\n  }\n\n  function buy() isEtherPriceUpdated canBuy payable isInitialized public\n  {\n    buyInternal(msg.sender);\n  }\n\n  function getPartnerBalance (address addr) public view returns(uint256)\n  {\n    return partners[addr];\n  }\n\n  function partnerWithdraw () isInitialized public\n  {\n    assert (partners[msg.sender] > 0);\n    uint256 ethToWidthdraw = partners[msg.sender];\n    partners[msg.sender] = 0;\n    msg.sender.transfer(ethToWidthdraw);\n  }\n\n  mapping(address => uint256) partners;\n  // refferal => partner\n  mapping(address => address) referrals;\n\n  function takeEther(address dest, uint256 amount) onlyAdmin public\n  {\n      dest.transfer(amount);\n  }\n\n  function addEther() payable onlyAdmin public\n  {\n  }\n\n  function buyWithPromo(address partner) isEtherPriceUpdated canBuy isInitialized payable public\n  {\n      if (referrals[msg.sender] == 0 && partner != msg.sender)\n      {\n        referrals[msg.sender] = partner;\n      }\n\n      buyInternal(msg.sender);\n  }\n\n  function buyInternal(address addr) internal\n  {\n    if (referrals[addr] != 0)\n    {\n        partners[referrals[addr]] += msg.value / 100; // 1% to partner\n    }\n\n    assert (isContract(addr) == false);\n\n    // проверка lastUpdateEtherPrice\n    uint256 today = getToday();\n    if (tokenPriceHistory[today] == 0) tokenPriceHistory[today] = currentTokenPriceInDollar;\n\n    // timeTable\n    uint256 amount = msg.value * etherPriceInDollarIn / tokenPriceHistory[today] ;\n    if (amount > availableTokens)\n    {\n       addr.transfer((amount - availableTokens) * tokenPriceHistory[today] / etherPriceInDollarIn);\n       amount = availableTokens;\n    }\n\n    assert(amount > 0);\n\n    availableTokens = sub(availableTokens, amount);\n\n    // is new day ?\n    if (timeTable[addr][today].amount == 0)\n    {\n      timeTable[addr][today] = TokenInfo(amount, false);\n    }\n    else\n    {\n      timeTable[addr][today].amount += amount;\n    }\n\n    //                  < 30.03.2018\n    if (block.timestamp < 1522357200 && bonuses[addr][today] == 0)\n    {\n      bonuses[addr][today] = 1;\n    }\n\n    balances[addr] = add(balances[addr], amount);\n    totalSupply = add(totalSupply, amount);\n    emit Transfer(0, addr, amount);\n  }\n\n  function calculateProfit (uint256 day) public constant returns(int256)\n  {\n    uint256 today = getToday();\n    assert(today >= day);\n    uint256 daysLeft = today - day;\n    int256 extraProfit = 0;\n\n    // is referral ?\n    if (referrals[msg.sender] != 0) extraProfit++;\n    // participant until March 30\n    if (bonuses[msg.sender][day] > 0) extraProfit++;\n\n    if (daysLeft <= 7) return -10;\n    if (daysLeft <= 14) return -5;\n    if (daysLeft <= 21) return 1 + extraProfit;\n    if (daysLeft <= 28) return 3 + extraProfit;\n    if (daysLeft <= 60) return 5 + extraProfit;\n    if (daysLeft <= 90) return 12 + extraProfit;\n    return 18 + extraProfit;\n  }\n\n  function getTokensPerDay(uint256 _day) public view returns (uint256)\n  {\n      return timeTable[msg.sender][_day].amount;\n  }\n\n  // returns amount, ether\n  function getProfitForDay(uint256 day, uint256 amount) isEtherPriceUpdated public constant returns(uint256, uint256)\n  {\n    assert (day <= getToday());\n\n    uint256 tokenPrice = tokenPriceHistory[day];\n    if (timeTable[msg.sender][day].amount < amount) amount = timeTable[msg.sender][day].amount;\n\n    assert (amount > 0);\n\n    return (amount, amount * tokenPrice * uint256(100 + calculateProfit(day)) / 100 / etherPriceInDollarOut);\n  }\n\n  function returnTokensInPool (address[] addr, uint256[] _days) public\n  {\n    assert (addr.length == _days.length);\n\n    TokenInfo storage info;\n    for(uint256 i = 0; i < addr.length;i++)\n    {\n      assert(_days[i] + 92 < getToday() && info.amount > 0);\n      info = timeTable[addr[i]][_days[i]];\n      info.isReturnedInPool = true;\n      availableTokens = add(availableTokens, info.amount);\n    }\n  }\n\n  function getInfo(address addr, uint256 start, uint256 end) public constant returns (uint256[30] _days, uint256[30] _amounts, int256[30] _profits, uint256[30] _etherAmounts)\n  {\n      if (addr == 0) addr = msg.sender;\n\n      uint256 j = 0;\n      for(uint256 iDay = start; iDay < end; iDay++)\n      {\n        if (timeTable[addr][iDay].amount > 0)\n        {\n          _days[j] = iDay;\n          _profits[j] = calculateProfit(iDay);\n          _amounts[j] = timeTable[addr][iDay].amount;\n          (_amounts[j], _etherAmounts[j]) = getProfitForDay(iDay, _amounts[j]);\n          j++;\n          if (j == 30) break;\n        }\n      }\n  }\n\n  function returnTokensForDay(uint256 day, uint256 userTokensAmount) isInitialized public\n  {\n    uint256 tokensAmount;\n    uint256 etherAmount;\n    (tokensAmount, etherAmount) = getProfitForDay(day, userTokensAmount);\n\n    require(day > 0);\n    require(balances[msg.sender] >= tokensAmount);\n\n    balances[msg.sender] = sub(balances[msg.sender], tokensAmount);\n    totalSupply = sub(totalSupply, tokensAmount);\n    timeTable[msg.sender][day].amount = sub(timeTable[msg.sender][day].amount, tokensAmount);\n\n    if (!timeTable[msg.sender][day].isReturnedInPool)\n    {\n      availableTokens = add(availableTokens, tokensAmount);\n    }\n\n    msg.sender.transfer(etherAmount);\n    emit Transfer(msg.sender, 0, tokensAmount);\n  }\n\n  function isContract(address addr) internal returns (bool)\n  {\n    uint256 size;\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n  bool public initialized = false;\n\n  modifier isInitialized()\n  {\n      assert(initialized);\n      _;\n  }\n\n  uint8 balancesTransferred = 0;\n  // restore tokens from previous contract \n  function restoreBalances(address[60] addr, uint256[60] _days, uint256[60] _amounts) external onlyAdmin\n  {\n    // call when contract is not initialized\n    assert(initialized == false);\n\n    if (totalSupply == 0)\n    {\n        balances[0x9d4f1d5c6da16f28405cb8b063500606e41b8279] = 151428571428571428571;\n        balances[0x35497d9c2beaa5debc48da2208d6b03222f5e753] = 75714285714285714285;\n        balances[0xb43f0c8ad004f7fdd50bc9b1c2ca06cad653f56d] = 60571428571428571428;\n        balances[0x006f2e159f3e3f2363a64b952122d27df1b307cd] = 49453400000000000000;\n        balances[0xb8c180dd09e611ac253ab321650b8b5393d6a00c] = 31972285714285714284;\n        balances[0xa209e963d089f03c26fff226a411028700fb6009] = 29281428571428571427;\n        balances[0xec185474a0c593f741cca00995aa22f078ec02e2] = 25000000000000000514;\n        balances[0x1c1a6b49bccb8b2c12ddf874fc69e14c4371343b] = 14655428571428571428;\n        balances[0x38aeeb7e8390632e45f44c01a7b982a9e03a1b10] = 11671422857142857142;\n        balances[0xfeff4cd1fc9273848c0cbabacc688c5e5707ddd5] = 9999999999999999428;\n        balances[0x1c0c4d7961c96576c21b63b0b892b88ec5b86742] = 8227208857142857142;\n        balances[0xdae0aca4b9b38199408ffab32562bf7b3b0495fe] = 5999999999999999957;\n        balances[0x2c46fb6e390d90f5742877728d81a5e354c2be0c] = 5990527428571428570;\n        balances[0x3c9e6d9a10956f29ec20d797c26ba720e4f0f327] = 5013159428571428571;\n        balances[0xb9621f1a9402fa3119fd6b011a23dd007e05b7af] = 5000108571428571427;\n        balances[0xae2856a1ea65093852b8828efcaabb16ac987d6b] = 4174942857142857142;\n        balances[0xb9507bfc17d6b70177d778ead1cd581c2572b6c1] = 3022857142857142857;\n        balances[0x2e983528f19633cf25eee2aa93c78542d660a20f] = 3000000000000000131;\n        balances[0xf4b733ff2f2eab631e2860bb60dc596074b9912d] = 3000000000000000131;\n        balances[0x431d78c14b570aafb4940c8df524b5a7f5373f46] = 2999999999999999851;\n        balances[0xda43b71d5ba11b61f315867ff8fc29db7d34ed31] = 3000000000000000131;\n        balances[0x7d9c012ea8e111cec46e89e01b7cd63687696862] = 2771866285714285714;\n        balances[0x1c1d8b576c7354dccd20d017b1cde68a942353b6] = 2490045714285714285;\n        balances[0x024c07e4e9631763d8db8294bfc8f4fd82113ef5] = 2109977142857142857;\n        balances[0x64f482e94e9781c42ada16742780709613ea7fe0] = 2031377142857142857;\n        balances[0x0c371ce4b7dcc1da7d68b004d5dea49667af7320] = 1999999999999999885;\n        balances[0x709b1599cfe4b06ff4fce1cc4fe8a72ac55c2f10] = 1999999999999999885;\n        balances[0xe217aee24b3181540d17f872d3d791b41224bc31] = 1999999999999999885;\n        balances[0x0d85570eef6baa41a8f918e48973ea54a9385ee7] = 2000000000000000120;\n        balances[0xcf1a033ae5b48def61c8ceb21d41c293a9e5d3c0] = 2000000000000000057;\n        balances[0xbc202f5082e403090d7dd483545f680a37efb7e5] = 1999999999999999885;\n        balances[0xdf18736dcafaa40b8880b481c5bfab5196089535] = 1999999999999999885;\n        balances[0x83da64ffdfe4f6c3a4cf9891d840096ee984b456] = 1271428571428571428;\n        balances[0x3babede4f2275762f1c6b4a8185a0056ceee4f5f] = 1051428571428571428;\n        balances[0x2f4f98d2489bec1c98515e0f75596e0b135a6023] = 1000480000000000000;\n        balances[0xe89156e5694f94b86fabfefab173cf6dd1f2ee00] = 1000000000000000125;\n        balances[0x890430d3dbc99846b72c77de7ec10e91ad956619] = 1000000000000000125;\n        balances[0x4ee63ad9a151d7c8360561bc00cbe9d7f81c4677] = 1000000000000000125;\n        balances[0xc5398714592750850693b56e74c8a5618ae14d38] = 1000000000000000125;\n        balances[0xab4a42f7a9ada127858c2e054778e000ea0b8325] = 1000000000000000125;\n        balances[0xfcc9b4658b296fe9d667c5a264f4da209dec13db] = 1000000000000000125;\n        balances[0x36a93d56e175947be686f0a65bb328d400c1a8b9] = 1000000000000000125;\n        balances[0x362a979afe6e5b6acb57d075be9e6f462acacc85] = 1000000000000000125;\n        balances[0xe50f079b8f9d67002c787cf9dbd456fc11bd5779] = 999999999999999942;\n        balances[0x68afff1424c27246647969dee18e7150124b2b28] = 999999999999999942;\n        balances[0x44aba76f01b6498a485dd8f8ee1615d422b8cbf8] = 999999999999999942;\n        balances[0x1d51752cd228c3d71714f16401ccdaecfe6d52c3] = 999999999999999942;\n        balances[0x5eb72c2bbd74d3e9cb61f5d43002104403a16b43] = 999999999999999942;\n        balances[0xa0a0d04bb08051780e5a6cba3080b623fc8404a6] = 999999999999999942;\n        balances[0xec49706126ae73db0ca54664d8b0feeb67c3c777] = 999999999999999942;\n        balances[0xa95413cd1bc9bdf336e9c2c074fb9ffa91bb89a6] = 999999999999999942;\n        balances[0x884a7cc58132ca80897d98bfae87ce72e0eaf461] = 999999999999999942;\n        balances[0xb6593630850c56aee328be42038fc6d347b37440] = 999999999999999942;\n        balances[0x324ddd8b98b23cb2b6ffaeb84b9bb99ec3de9db6] = 999999999999999942;\n        balances[0x1013809376254288325a7b49d60c395da80eeef5] = 1000000000000000028;\n        balances[0x3f6753388a491e958b2de57634060e28c7ff2c1e] = 1000000000000000062;\n        balances[0xe7800dc7166f11decd415c3a74ec9d0cfa3ceb06] = 431405714285714285;\n        totalSupply = 557335064857142857325;\n        availableTokens = availableTokens - totalSupply;\n        \n        uint256 today = getToday();\n        for(uint256 j=17614;j <= today;j++)\n        {\n            tokenPriceHistory[j] = currentTokenPriceInDollar;\n        }\n    }\n    else\n    {\n        uint8 start = balancesTransferred;\n        for(uint8 i=start; i < start+30; i++)\n        {\n            assert(addr[i] != 0 && _days[i] !=0 && _amounts[i] !=0);\n            timeTable[addr[i]][_days[i]] = TokenInfo(_amounts[i], false);\n            emit Transfer(0, addr[i], _amounts[i]);\n            if (_days[i] < 17620 && bonuses[addr[i]][_days[i]] == 0)\n            {\n                bonuses[addr[i]][_days[i]] = 1;\n            }\n        }\n        balancesTransferred += 30;\n\n        if (balancesTransferred == 60) initialized = true;\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPartnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceIn\",\"type\":\"uint256\"},{\"name\":\"newPriceOut\",\"type\":\"uint256\"}],\"name\":\"updateEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraTokens\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"extraTokens\",\"type\":\"uint256\"},{\"name\":\"proofLink\",\"type\":\"string\"},{\"name\":\"videoFileHash\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bNewState\",\"type\":\"bool\"}],\"name\":\"changeState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"_days\",\"type\":\"uint256[30]\"},{\"name\":\"_amounts\",\"type\":\"uint256[30]\"},{\"name\":\"_profits\",\"type\":\"int256[30]\"},{\"name\":\"_etherAmounts\",\"type\":\"uint256[30]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPriceHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"calculateProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateEtherPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInDollarOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInDollarIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"partnerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"buyWithPromo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getTokensPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"_days\",\"type\":\"uint256[]\"}],\"name\":\"returnTokensInPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[60]\"},{\"name\":\"_days\",\"type\":\"uint256[60]\"},{\"name\":\"_amounts\",\"type\":\"uint256[60]\"}],\"name\":\"restoreBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"userTokensAmount\",\"type\":\"uint256\"}],\"name\":\"returnTokensForDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"videoFileHash\",\"type\":\"uint256\"}],\"name\":\"increaseMaxAvailableTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProfitForDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052600e805460ff191660011790556012805461ffff1916905534156200002857600080fd5b600e805461010060a860020a03191661010033600160a060020a0316908102919091179091556000908152600f6020526040808220805460ff19166001179055600a919091558051908101604052600b8082527f475241535320546f6b656e0000000000000000000000000000000000000000006020830152908051620000b492916020019062000135565b50600c805460ff1916601217905560408051908101604052600581527f47524153530000000000000000000000000000000000000000000000000000006020820152600d9080516200010b92916020019062000135565b50682b5e3af16b18800000600055610dac60015561979060035561afc860045542600255620001da565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017857805160ff1916838001178555620001a8565b82800160010185558215620001a8579182015b82811115620001a85782518255916020019190600101906200018b565b50620001b6929150620001ba565b5090565b620001d791905b80821115620001b65760008155600101620001c1565b90565b61268380620001ea6000396000f3006060604052600436106101b65763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663016fa01881146101f257806306fdde031461022357806310a6fdc2146102ad578063158ef93e146102c65780631785f53c146102ed57806318160ddd1461030c5780631d6e077a1461031f5780631deb0a8f146103c257806327e235e3146103da578063313ce567146103f95780633c275e2414610422578063582e1ac9146105045780635b21ba6f1461051a57806361836b0e146105305780636300c76814610543578063676c0d771461056557806369bb4dc21461057b5780636f0b51801461058e57806370480275146105a257806370a08231146105c157806378186f51146105e0578063794ab0a8146105f35780638894dd2b1461060657806395d89b411461060e578063971362c914610621578063a2de5b5014610634578063a4f3fa1014610648578063a6f2ae3a1461065b578063a885dab614610663578063aec77b6314610679578063bc17991d14610708578063d6475c3a14610723578063ec12f1ef1461073c578063f751758b14610794578063fbe8dab9146107a7575b6201518060025442031015156101cb57600080fd5b600e5460ff1615156101d957fe5b60125460ff1615156101e757fe5b6101f0336107d8565b005b34156101fd57600080fd5b610211600160a060020a0360043516610aab565b60405190815260200160405180910390f35b341561022e57600080fd5b610236610ac6565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561027257808201518382015260200161025a565b50505050905090810190601f16801561029f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102b857600080fd5b6101f0600435602435610b64565b34156102d157600080fd5b6102d9610bba565b604051901515815260200160405180910390f35b34156102f857600080fd5b6101f0600160a060020a0360043516610bc3565b341561031757600080fd5b610211610c01565b341561032a57600080fd5b610335600435610c07565b6040518085815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561038457808201518382015260200161036c565b50505050905090810190601f1680156103b15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34156103cd57600080fd5b6101f06004351515610cdd565b34156103e557600080fd5b610211600160a060020a0360043516610d37565b341561040457600080fd5b61040c610d49565b60405160ff909116815260200160405180910390f35b341561042d57600080fd5b610447600160a060020a0360043516602435604435610d52565b60405180856103c080838360005b8381101561046d578082015183820152602001610455565b5050505090500184601e60200280838360005b83811015610498578082015183820152602001610480565b5050505090500183601e60200280838360005b838110156104c35780820151838201526020016104ab565b5050505090500182601e60200280838360005b838110156104ee5780820151838201526020016104d6565b5050505090500194505050505060405180910390f35b341561050f57600080fd5b610211600435610e8d565b341561052557600080fd5b610211600435610e9f565b341561053b57600080fd5b610211610f90565b341561054e57600080fd5b6101f0600160a060020a0360043516602435610f96565b341561057057600080fd5b6101f0600435611012565b341561058657600080fd5b61021161105e565b6101f0600160a060020a0360043516611064565b34156105ad57600080fd5b6101f0600160a060020a03600435166110e8565b34156105cc57600080fd5b610211600160a060020a0360043516611129565b34156105eb57600080fd5b610211611144565b34156105fe57600080fd5b61021161114a565b6101f0611150565b341561061957600080fd5b610236611199565b341561062c57600080fd5b6101f0611204565b6101f0600160a060020a036004351661127e565b341561065357600080fd5b610211611334565b6101f061133e565b341561066e57600080fd5b610211600435611378565b341561068457600080fd5b6101f060046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061139e95505050505050565b341561071357600080fd5b6101f06004610784610f04611486565b341561072e57600080fd5b6101f060043560243561215b565b341561074757600080fd5b6101f0600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050933593506122e392505050565b341561079f57600080fd5b6102116123bc565b34156107b257600080fd5b6107c06004356024356123fd565b60405191825260208201526040908101905180910390f35b600160a060020a0380821660009081526011602052604081205490918291161561082d57600160a060020a03838116600090815260116020908152604080832054909316825260109052208054606434040190555b610836836124c7565b1561083d57fe5b610845611334565b6000818152600560205260409020549092501515610870576001546000838152600560205260409020555b600082815260056020526040902054600354340281151561088d57fe5b0490506000548111156108f85782600160a060020a03166108fc60035460056000868152602001908152602001600020546000548503028115156108cd57fe5b049081150290604051600060405180830381858888f1935050505015156108f357600080fd5b506000545b6000811161090257fe5b61090e600054826124cf565b6000908155600160a060020a038416815260076020908152604080832085845290915290205415156109905760408051908101604090815282825260006020808401829052600160a060020a038716825260078152828220868352905220815181556020820151600191909101805460ff1916911515919091179055506109ba565b600160a060020a038316600090815260076020908152604080832085845290915290208054820190555b635abd53d0421080156109ee5750600160a060020a0383166000908152600860209081526040808320858452909152902054155b15610a1b57600160a060020a03831660009081526008602090815260408083208584529091529020600190555b600160a060020a038316600090815260096020526040902054610a3e90826124e2565b600160a060020a038416600090815260096020526040902055600a54610a6490826124e2565b600a55600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3505050565b600160a060020a031660009081526010602052604090205490565b600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b5c5780601f10610b3157610100808354040283529160200191610b5c565b820191906000526020600020905b815481529060010190602001808311610b3f57829003601f168201915b505050505081565b600160a060020a0333166000908152600f602052604090205460ff16151560011480610ba35750600e5433600160a060020a0390811661010090920416145b1515610bab57fe5b60039190915560045542600255565b60125460ff1681565b600e5433600160a060020a039081166101009092041614610be057fe5b600160a060020a03166000908152600f60205260409020805460ff19169055565b600a5481565b6006805482908110610c1557fe5b9060005260206000209060040201600091509050806000015490806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ccd5780601f10610ca257610100808354040283529160200191610ccd565b820191906000526020600020905b815481529060010190602001808311610cb057829003601f168201915b5050505050908060030154905084565b600160a060020a0333166000908152600f602052604090205460ff16151560011480610d1c5750600e5433600160a060020a0390811661010090920416145b1515610d2457fe5b600e805460ff1916911515919091179055565b60096020526000908152604090205481565b600c5460ff1681565b610d5a6124ef565b610d626124ef565b610d6a6124ef565b610d726124ef565b600080600160a060020a0389161515610d89573398505b5060009050865b86811015610e8257600160a060020a03891660009081526007602090815260408083208484529091528120541115610e7a57808683601e8110610dcf57fe5b6020020152610ddd81610e9f565b8483601e8110610de957fe5b60209081029190910191909152600160a060020a038a16600090815260078252604080822084835290925220548583601e8110610e2257fe5b6020020152610e41818684601e8110610e3757fe5b60200201516123fd565b8684601e8110610e4d57fe5b602002018585601e8110610e5d57fe5b602002019190915252600190910190601e821415610e7a57610e82565b600101610d90565b505093509350935093565b60056020526000908152604090205481565b600080600080610ead611334565b925084831015610eb957fe5b5050600160a060020a03338116600090815260116020526040812054858403921615610ee3576001015b600160a060020a03331660009081526008602090815260408083208884529091528120541115610f11576001015b60078211610f23576009199350610f88565b600e8211610f35576004199350610f88565b60158211610f4857806001019350610f88565b601c8211610f5b57806003019350610f88565b603c8211610f6e57806005019350610f88565b605a8211610f815780600c019350610f88565b8060120193505b505050919050565b60025481565b600160a060020a0333166000908152600f602052604090205460ff16151560011480610fd55750600e5433600160a060020a0390811661010090920416145b1515610fdd57fe5b600160a060020a03821681156108fc0282604051600060405180830381858888f19350505050151561100e57600080fd5b5050565b600160a060020a0333166000908152600f602052604090205460ff161515600114806110515750600e5433600160a060020a0390811661010090920416145b151561105957fe5b600155565b60005481565b62015180600254420310151561107957600080fd5b600e5460ff16151561108757fe5b600160a060020a0333166000908152600f602052604090205460ff161515600114806110c65750600e5433600160a060020a0390811661010090920416145b15156110ce57fe5b60125460ff1615156110dc57fe5b6110e5816107d8565b50565b600e5433600160a060020a03908116610100909204161461110557fe5b600160a060020a03166000908152600f60205260409020805460ff19166001179055565b600160a060020a031660009081526009602052604090205490565b60045481565b60035481565b600160a060020a0333166000908152600f602052604090205460ff1615156001148061118f5750600e5433600160a060020a0390811661010090920416145b151561119757fe5b565b600d8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b5c5780601f10610b3157610100808354040283529160200191610b5c565b60125460009060ff16151561121557fe5b600160a060020a0333166000908152601060205260408120541161123557fe5b50600160a060020a033316600081815260106020526040808220805492905590919082156108fc0290839051600060405180830381858888f1935050505015156110e557600080fd5b62015180600254420310151561129357600080fd5b600e5460ff1615156112a157fe5b60125460ff1615156112af57fe5b600160a060020a03338116600090815260116020526040902054161580156112e9575033600160a060020a031681600160a060020a031614155b1561132b5733600160a060020a039081166000908152601160205260409020805473ffffffffffffffffffffffffffffffffffffffff19169183169190911790555b6110e5336107d8565b6201518042045b90565b62015180600254420310151561135357600080fd5b600e5460ff16151561136157fe5b60125460ff16151561136f57fe5b611197336107d8565b33600160a060020a03166000908152600760209081526040808320938352929052205490565b60008082518451146113ac57fe5b5060005b8351811015611480576113c1611334565b8382815181106113cd57fe5b90602001906020020151605c011080156113e957508154600090115b15156113f157fe5b6007600085838151811061140157fe5b90602001906020020151600160a060020a0316600160a060020a03168152602001908152602001600020600084838151811061143957fe5b906020019060200201518152602081019190915260400160009081206001808201805460ff1916909117905590548154919350611475916124e2565b6000556001016113b0565b50505050565b600160a060020a0333166000908152600f602052604081205481908190819060ff161515600114806114cb5750600e5433600160a060020a0390811661010090920416145b15156114d357fe5b60125460ff16156114e057fe5b600a541515611e575760096020526808357e5b694cddb6db7fc2b15ec83e7263475a814b896e7c0e25e4b96e65abc9ead298488c52ab9470da5568041abf2db4a66edb6d7f20d2d81b98f879615e7d042a568c1ae3cd5557f06bd2e239e9ac2cab815725315568034898f15d51f249247f324e328c9d12e54d2b7a3e4fe5632d95118875d176e52dbb0d360198de67f997556802ae4dc548df4d80007f9db560dfdc3d962b75f4a558dd7e9484ca707e0bb3b7c28a2f4f1fa55b590f5b556801bbb46075f14bdb6c7f39700c27a056ddc22dace3be06cd4c0c9122840e927533d428110c46a37f190d556801965c882563f949237faddf2b2ea623a07674b49f804bf46bed91fe02d31918934040a11bbe46739e825568015af1d78b58c402027facb3f3273d29b9f9b87512f17b2dd5bf20350e957b29367d134ec8ab2aa35f435567cb628aa34f1c49247f716238c5711f9f0154ad6a696acc54d212e8d01736bbe817a78442f4192672555567a1f939402f5fedb67f650e01c2be11c2f661eaff26759fdf5c9e0e5dc57d5296f607a5d9fc4c26995e55678ac7230489e7fdc47fe6616dd0e1e006bf5ff76b45713df8a5ef139a5f28b23ea2dd55eccf3381a88f5567722ceaddaef28db67faf5fbd9650a3a7643a8d9f867847b300e6831b9f32828426aae942e581fe838d556753444835ec57ffd57f5106a927985e6a9911b42483a71b62ed5c165b6a9dae3fc98dfdae016cf0362355675322a0f5053bf6da7f3fb30cc0ccda4f2cad16cf7f557b35544cb5766fe3e16f0066e0e9948f79cf8c5567459251f07e6676db7fb1d27fc1ced167a9b6b4e17c566c5c22c2baad5318e9f15a1980027a20264a8655674563f4410662c9237fadfaaab683d5285f91c4a16a3f943fc2a8abcd9d0cf605087a1145fc67c34bf2556739f06068a58dedb67f7d297745301d2ba72ff5ecc2f90d989b40a7b830f1f8ecbabe0c856a67e924ec556729f3588e3ec092497fc69aed3725279041eec033a7c01c3b2465cafc328edf20457b80ea8e712b957a556729a2241af62c00837f8d26aac9dbdd3ef809197b89e36fb913d6a9759c9fc533ca0aafcaae5042ffd08190557fc655e1082b1fe39ca7ebe6ee9f305d6312194a4244c22cbc5cfd964e0cc5aeb88190556729a2241af62bff6b7fe7e0d218d7f206b9b326e4aaf801b64e23e5262c6b03b5ade7f1793803dfd5bc557f7d0ba2dcf48438e3e2a5207d5713c8b169a5f8bf29f753ca22231de3e079626455672677a5b36ce1a4927f80a4ea0b90f8ff196ef512b926f101ca72c3ac56f3437f35290c1a61925b53f25567228e6b62627bdb6d7f12254644a1485a5393d62066ad25a7d02404153ad4062105f8dbb6a043c3d0e055671d482508443192497f71e01e7dd0e52fe40e42df439b698a22da792aecf093b22b06a82b04789cc50f55671c30e6bfacd912497f213cf7ed0d5625bdf0061637a55633e20c2dfc08fb4f28bf628311926c23463e55671bc16d674ec7ff8d7ff8eb668e7ad42324bbc607644b5c30d18a5f839488b373bfe8add1a2eddfe74d8190557faae97fdd11ada64903ab51ef8db53baf38f1289213c6d1366b249946623790e88190557f1753f41d018fb1fb32e3420c6de582d3692e233f570cfad72bff4e8b2638fb4f819055671bc16d674ec800787f4b90e5259f336485075058a7dae06d16c68fe8ef6c61cc1b14fc54d760fd324755671bc16d674ec800397f7f88444cb2c1566e43038686dee231c9c505cec6a173353d1faf875613b19459557f4ee7b9e09e1dae627db7ab46fa5625dc001d11c64cea6c8387a2a7065e5a8b2a8190557f0675e0ad3193744256a3cd82aeb794d842ffa66cc2b7caa436157417f1740f61556711a5058ca54849247f9c50b41d5cd0dc392db891d31eca884c2636d85eeb68bcadf097d3ac0679c7fe55670e976cb70ab249247fc33f08ff25f078996d37d1a79e2c2ebdbb18b21e1d8bf4e8b0befe30d489012355670de26b425ce200007fd19aa9493eb587c7b19a4138de7980cad1378cc797a86be7bbe0c78ab1b4361e55670de0b6b3a764007d7f4dffdee2837e41ab59b312af408fa84098de31a23d82078ff1cf4bf485021bc58190557f17ad0bfcf5aad0db4b166e40b2d97ed6565e99e857f42354076a432496cab8ea8190557f8b6a96992eae20636d73f7a8dce88008c82245525421f40eb31158196735279f8190557fe084386a54e72a209967c0b387364f8a6910d64909a63a8da68556831ae3d89e8190557f421505fffcc331713bee8e2b016ca3a24d26865ef664d249dc3dc632859d19868190557fc71189ee0ceef26f7a5eccb1970af15b061fde73e69ba78523dea0208a9c51bb8190557fc0dc33866f34d16d8201c41cea4fd65509c87bb2da7abc3d5f49352272883b498190557f249840fc54ff7c26ae0d0aac7ea9a68fb64aa317ef68eb099a3978391611844855670de0b6b3a763ffc67fda51302efebb5c3ad916beef15f0f1ae1b35e8f1c25d04bfbc7d247b4be894de8190557fb7ff23052f331a0e7df728c614d830ed827f87d93cd4b46117c85bc6d9404bad8190557f7f1dd8789469d3f999d7b01961375cf4d25f6e1d336281e37d0b8feda41c28238190557f665e4cb04e35543b2d4cd84f825bff9e0099775969fcc7d5dc66baf5ac4008658190557f6d65a25dcf48401c4ba2ac0a1ecbed1c02a613cc4d9808b488311d9ca957c48f8190557f5502342bf7e200a553c61a1e7ff353031e8411898683b638195ecc1825aa000d8190557f22d26fb2b5944dfae048272bc0274e10d132753e8e1cac7eef6ff9eb1e2308bf8190557f5fe88c7b83d9aff4400c908b3177c2b0b9540c5a6292ca8a492a743a2076acb88190557fd446c74a58d578591bdb0d9b087dda480651d9270b4a80e3ee7347dd796146f58190557f9e7f8249df22c4b37763a7411afd8f783274224d8e3f5b39a45f62f657117f958190557f011bba4b63373c76522d1d0118aab8b810db24802feeee91fc08a874514df5f155670de0b6b3a764001c7f0f5faad45c8beec32343addd9d131b4cd984037b33444fcecd490788275a4af755670de0b6b3a764003e7fe92e076eb0aed5586a801ba1f2fb9955eb84e2684639744b39883fe567420d3d5573e7800dc7166f11decd415c3a74ec9d0cfa3ceb0660009081526705fca9362212db6d7fa0a286fb391dd6bf819179275989c5316997ae7825ba4039ecbc9b336785e4c855681e3693e8998f4b8e6d600a558054681e3693e8998f4b8e6c19019055611e26611334565b93506144ce92505b838311611e5257600180546000858152600560205260409020559290920191611e2e565b612152565b5050601254610100900460ff16805b81601e0160ff168160ff161015612111578660ff8216603c8110611e8657fe5b6020020135600160a060020a0316600160a060020a0316600014158015611ebf57508560ff8216603c8110611eb757fe5b602002013515155b8015611edd57508460ff8216603c8110611ed557fe5b602002013515155b1515611ee557fe5b60408051908101604052808660ff8416603c8110611eff57fe5b602002013581526020016000151581525060076000898460ff16603c81101515611f2557fe5b6020020135600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206000888460ff16603c81101515611f6657fe5b60200201358152602001908152602001600020600082015181556020820151600191909101805460ff1916911515919091179055508660ff8216603c8110611faa57fe5b6020020135600160a060020a0316600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef878460ff16603c81101515611ff557fe5b602002013560405190815260200160405180910390a36144d48660ff8316603c811061201d57fe5b60200201351080156120965750600860008860ff8416603c811061203d57fe5b6020020135600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206000878360ff16603c8110151561207e57fe5b60200201358152602001908152602001600020546000145b15612109576001600860008960ff8516603c81106120b057fe5b6020020135600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206000888460ff16603c811015156120f157fe5b60200201358152602001908152602001600020819055505b600101611e66565b6012805460ff6101008083048216601e018216810261ff00199093169290921792839055603c919092049091161415612152576012805460ff191660011790555b50505050505050565b601254600090819060ff16151561216e57fe5b61217884846123fd565b90925090506000841161218a57600080fd5b600160a060020a033316600090815260096020526040902054829010156121b057600080fd5b600160a060020a0333166000908152600960205260409020546121d390836124cf565b600160a060020a033316600090815260096020526040902055600a546121f990836124cf565b600a55600160a060020a033316600090815260076020908152604080832087845290915290205461222a90836124cf565b33600160a060020a0316600090815260076020908152604080832088845290915290209081556001015460ff16151561226d57612269600054836124e2565b6000555b600160a060020a03331681156108fc0282604051600060405180830381858888f19350505050151561229e57600080fd5b600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350505050565b600160a060020a0333166000908152600f602052604090205460ff161515600114806123225750600e5433600160a060020a0390811661010090920416145b151561232a57fe5b600680546001810161233c8382612517565b916000526020600020906004020160006080604051908101604090815242825260208201889052810186905260608101859052919050815181556020820151816001015560408201518160020190805161239a929160200190612548565b50606082015181600301555050506123b4600054846124e2565b600055505050565b6000806123c7611334565b600081815260056020526040902054909150156123f2576000818152600560205260409020546123f6565b6001545b91505b5090565b600080600062015180600254420310151561241757600080fd5b61241f611334565b85111561242857fe5b50600084815260056020908152604080832054600160a060020a033316845260078352818420888552909252909120548490101561248757600160a060020a033316600090815260076020908152604080832088845290915290205493505b6000841161249157fe5b8360045460646124a088610e9f565b606401848802028115156124b057fe5b048115156124ba57fe5b0492509250509250929050565b6000903b1190565b808203828111156124dc57fe5b92915050565b808201828110156124dc57fe5b6103c0604051908101604052601e815b60008152602001906001900390816124ff5790505090565b8154818355818115116125435760040281600402836000526020600020918201910161254391906125c2565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061258957805160ff19168380011785556125b6565b828001600101855582156125b6579182015b828111156125b657825182559160200191906001019061259b565b506123f99291506125f9565b61133b91905b808211156123f9576000808255600182018190556125e96002830182612613565b50600060038201556004016125c8565b61133b91905b808211156123f957600081556001016125ff565b50805460018160011615610100020316600290046000825580601f1061263957506110e5565b601f0160209004906000526020600020908101906110e591906125f95600a165627a7a72305820eeb2bdcce3f57337b8084b6add759ed63f2d069cb45121bf73eca6623ef808d90029"
}