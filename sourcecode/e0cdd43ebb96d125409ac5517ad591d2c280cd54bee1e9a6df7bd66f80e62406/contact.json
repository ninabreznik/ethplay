{
  "address": "0xd7e16112f5f9cfa0527ca355c9219f7056d8c2a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "AmaStar: Token Sale",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-14\n*/\n\npragma solidity ^0.4.24;\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return c;\n    }\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n        return c;\n    }\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n}\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _who) public view returns (uint256);\n    function allowance(address _owner, address _spender)\n    public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value)\n    public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n    function lock(address _victim, uint256 _value, uint256 _periodSec) public;\n    function unlock(address _luckier) external;\n    function transferOwnership(address _newOwner) public;\n}\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    address public multisig;\n    address public tokenHolder;\n    ERC20 public token;\n    uint256 rate;\n    uint256 rateInUsd;\n    uint256 priceETH;\n    uint256 startIco;\n    uint256 periodIco;\n    uint256 periodPreIco;\n    uint256 indCap;\n    mapping (address => uint256) tokens;\n    address[] addresses;\n    uint256 index;\n    event Purchased(address _buyer, uint256 _amount);\n    constructor(address _AS, address _multisig, address _tokenHolder, uint256 _priceETH, uint256 _startIcoUNIX, uint256 _periodPreIcoSEC, uint256 _periodIcoSEC) public {\n        require(_AS != 0 && _priceETH != 0);\n        token = ERC20(_AS);\n        multisig = _multisig;\n        tokenHolder = _tokenHolder;\n        startIco = _startIcoUNIX;\n        periodPreIco = _periodPreIcoSEC;\n        periodIco = _periodIcoSEC;\n        rateInUsd = 10;\n        setRate(_priceETH);\n    }\n    function setIndCap(uint256 _indCapETH) public onlyOwner {\n        indCap = _indCapETH;\n    }\n    function setPriceETH(uint256 _newPriceETH) external onlyOwner {\n        setRate(_newPriceETH);\n    }\n    function setRate(uint256 _priceETH) internal {\n        require(_priceETH != 0);\n        priceETH = _priceETH;\n        rate = rateInUsd.mul(1 ether).div(100).div(_priceETH);\n    }\n    function transferTokenOwnership(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0));\n        token.transferOwnership(_newOwner);\n    }\n    function _lock(address _address, uint256 _value, uint256 _period) internal {\n        token.lock(_address, _value, _period);\n    }\n    function lock(address _address, uint256 _value, uint256 _period) external onlyOwner {\n        _lock(_address, _value, _period);\n    }\n    function unlock(address _address) external onlyOwner {\n        token.unlock(_address);\n    }\n    function unlockList() external onlyOwner {\n        for (uint256 i = index; i < addresses.length; i++) {\n            token.unlock(addresses[i]);\n            if (gasleft() < 70000) {\n                index = i + 1;\n                return;\n            }\n        }\n        index = 0;\n    }\n    function extendPeriodPreICO(uint256 _days) external onlyOwner {\n        periodIco = periodPreIco.add(_days.mul(1 days));\n    }\n    function extendPeriodICO(uint256 _days) external onlyOwner {\n        periodIco = periodIco.add(_days.mul(1 days));\n    }\n    function() external payable {\n        buyTokens();\n    }\n    function buyTokens() public payable {\n        require(block.timestamp > startIco && block.timestamp < startIco.add(periodIco));\n        if (indCap > 0) {\n            require(msg.value <= indCap.mul(1 ether));\n        }\n        uint256 totalAmount = msg.value.mul(10**8).div(rate).add(msg.value.mul(10**8).mul(getBonuses()).div(100).div(rate));\n        uint256 balance = token.allowance(tokenHolder, address(this));\n        require(balance > 0);\n        if (totalAmount > balance) {\n            uint256 cash = balance.mul(rate).mul(100).div(100 + getBonuses()).div(10**8);\n            uint256 cashBack = msg.value.sub(cash);\n            totalAmount = balance;\n            msg.sender.transfer(cashBack);\n        }\n        multisig.transfer(msg.value + cash);\n        token.transferFrom(tokenHolder, msg.sender, totalAmount);\n        if (tokens[msg.sender] == 0) {\n            addresses.push(msg.sender);\n        }\n        tokens[msg.sender] = tokens[msg.sender].add(totalAmount);\n        _lock(msg.sender, tokens[msg.sender], startIco.add(periodIco).sub(block.timestamp));\n        emit Purchased(msg.sender, totalAmount);\n    }\n    function getBonuses() internal view returns(uint256) {\n        if (block.timestamp < startIco.add(periodPreIco)) {\n            return 20;\n        } else {\n            return 0;\n        }\n    }\n    function getIndCapInETH() public view returns(uint) {\n        return indCap;\n    }\n    function getPriceETH() public view returns(uint) {\n        return priceETH;\n    }\n    function tokenBalanceOf(address _address) external view returns(uint256) {\n        return token.balanceOf(_address);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160e08062000f3583398101604090815281516020830151918301516060840151608085015160a086015160c09096015160008054600160a060020a031916331790559395929391929091600160a060020a038716158015906200007757508315155b15156200008357600080fd5b60038054600160a060020a03808a16600160a060020a031992831617909255600180548984169083161790556002805492881692909116919091179055600783905560098290556008819055600a600555620000e884640100000000620000f5810204565b50505050505050620001b5565b8015156200010257600080fd5b60068190556005546200014d90829062000138906064908290670de0b6b3a764000064010000000062000b5e6200015382021704565b9064010000000062000bbc6200019082021704565b60045550565b60008083151562000168576000915062000189565b508282028284828115156200017957fe5b04146200018557600080fd5b8091505b5092915050565b600080808311620001a057600080fd5b8284811515620001ac57fe5b04949350505050565b610d7080620001c56000396000f3006080604052600436106100fb5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663039ba6be811461010557806321e6b53d1461012c57806329cb024e1461014d5780632f6c493c1461016557806332dd21b81461018657806333e569d11461019b578063420a83e7146101b057806344449fba146101e15780634783c35b146101f9578063715018a61461020e5780638da5cb5b1461022357806399a752d714610238578063d0febe4c146100fb578063db13ee6414610250578063e2ab691d14610268578063e42c08f21461028f578063f2fde38b146102b0578063fc0c546a146102d1575b6101036102e6565b005b34801561011157600080fd5b5061011a6106d3565b60408051918252519081900360200190f35b34801561013857600080fd5b50610103600160a060020a03600435166106da565b34801561015957600080fd5b50610103600435610788565b34801561017157600080fd5b50610103600160a060020a03600435166107ca565b34801561019257600080fd5b5061011a610848565b3480156101a757600080fd5b5061010361084e565b3480156101bc57600080fd5b506101c561093d565b60408051600160a060020a039092168252519081900360200190f35b3480156101ed57600080fd5b5061010360043561094c565b34801561020557600080fd5b506101c5610968565b34801561021a57600080fd5b50610103610977565b34801561022f57600080fd5b506101c56109e3565b34801561024457600080fd5b506101036004356109f2565b34801561025c57600080fd5b50610103600435610a12565b34801561027457600080fd5b50610103600160a060020a0360043516602435604435610a4e565b34801561029b57600080fd5b5061011a600160a060020a0360043516610a75565b3480156102bc57600080fd5b50610103600160a060020a0360043516610b12565b3480156102dd57600080fd5b506101c5610b32565b60008060008060075442118015610310575060085460075461030d9163ffffffff610b4116565b42105b151561031b57600080fd5b6000600a54111561034d57600a5461034190670de0b6b3a764000063ffffffff610b5e16565b34111561034d57600080fd5b6103b96103926004546103866064610386610366610b8c565b61037a346305f5e10063ffffffff610b5e16565b9063ffffffff610b5e16565b9063ffffffff610bbc16565b6004546103ad90610386346305f5e10063ffffffff610b5e16565b9063ffffffff610b4116565b600354600254604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152306024820152905193975091169163dd62ed3e916044808201926020929091908290030181600087803b15801561042c57600080fd5b505af1158015610440573d6000803e3d6000fd5b505050506040513d602081101561045657600080fd5b505192506000831161046757600080fd5b828411156104e85761049f6305f5e100610386610482610b8c565b606401610386606461037a6004548a610b5e90919063ffffffff16565b91506104b1348363ffffffff610bdf16565b6040519394508493909150339082156108fc029083906000818181858888f193505050501580156104e6573d6000803e3d6000fd5b505b600154604051600160a060020a039091169034840180156108fc02916000818181858888f19350505050158015610523573d6000803e3d6000fd5b50600354600254604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015233602482015260448101889052905191909216916323b872dd9160648083019260209291908290030181600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b505050506040513d60208110156105c657600080fd5b5050336000908152600b6020526040902054151561062e57600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701805473ffffffffffffffffffffffffffffffffffffffff1916331790555b336000908152600b602052604090205461064e908563ffffffff610b4116565b336000818152600b60205260409020829055600854600754610692939161068d914291610681919063ffffffff610b4116565b9063ffffffff610bdf16565b610bf6565b604080513381526020810186905281517fa512fb2532ca8587f236380171326ebb69670e86a2ba0c4412a3fcca4c3ada9b929181900390910190a150505050565b6006545b90565b600054600160a060020a031633146106f157600080fd5b600160a060020a038116151561070657600080fd5b600354604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561076d57600080fd5b505af1158015610781573d6000803e3d6000fd5b5050505050565b600054600160a060020a0316331461079f57600080fd5b6107c46107b5826201518063ffffffff610b5e16565b6009549063ffffffff610b4116565b60085550565b600054600160a060020a031633146107e157600080fd5b600354604080517f2f6c493c000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291519190921691632f6c493c91602480830192600092919082900301818387803b15801561076d57600080fd5b600a5490565b60008054600160a060020a0316331461086657600080fd5b50600d545b600c5481101561093457600354600c8054600160a060020a0390921691632f6c493c91908490811061089957fe5b6000918252602082200154604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a039092166004830152516024808301939282900301818387803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b50505050620111705a101561092c5760018101600d5561093a565b60010161086b565b6000600d555b50565b600254600160a060020a031681565b600054600160a060020a0316331461096357600080fd5b600a55565b600154600160a060020a031681565b600054600160a060020a0316331461098e57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600054600160a060020a03163314610a0957600080fd5b61093a81610c88565b600054600160a060020a03163314610a2957600080fd5b6107c4610a3f826201518063ffffffff610b5e16565b6008549063ffffffff610b4116565b600054600160a060020a03163314610a6557600080fd5b610a70838383610bf6565b505050565b600354604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915160009392909216916370a082319160248082019260209290919082900301818787803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050506040513d6020811015610b0a57600080fd5b505192915050565b600054600160a060020a03163314610b2957600080fd5b61093a81610cc7565b600354600160a060020a031681565b600082820183811015610b5357600080fd5b8091505b5092915050565b600080831515610b715760009150610b57565b50828202828482811515610b8157fe5b0414610b5357600080fd5b6000610ba5600954600754610b4190919063ffffffff16565b421015610bb4575060146106d7565b5060006106d7565b600080808311610bcb57600080fd5b8284811515610bd657fe5b04949350505050565b60008083831115610bef57600080fd5b5050900390565b600354604080517fe2ab691d000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052604482018590529151919092169163e2ab691d91606480830192600092919082900301818387803b158015610c6b57600080fd5b505af1158015610c7f573d6000803e3d6000fd5b50505050505050565b801515610c9457600080fd5b80600681905550610cc1816103866064610386670de0b6b3a7640000600554610b5e90919063ffffffff16565b60045550565b600160a060020a0381161515610cdc57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582042ed1a6d5f4d4ca720843c4004dce2de412bbca80a742b2d3b27654c32bdd8940029000000000000000000000000e719fd211b6c809496f2d6a92b8c94819b148b59000000000000000000000000e1e93195733b9413022954c3b5ac809dedded0bb0000000000000000000000000badf935df10a2a0da37043fb57f0c677418000900000000000000000000000000000000000000000000000000000000000000ce000000000000000000000000000000000000000000000000000000005bed6dd000000000000000000000000000000000000000000000000000000000003d3faf00000000000000000000000000000000000000000000000000000000008b0830",
  "constructorArguments": "000000000000000000000000e719fd211b6c809496f2d6a92b8c94819b148b59000000000000000000000000e1e93195733b9413022954c3b5ac809dedded0bb0000000000000000000000000badf935df10a2a0da37043fb57f0c677418000900000000000000000000000000000000000000000000000000000000000000ce000000000000000000000000000000000000000000000000000000005bed6dd000000000000000000000000000000000000000000000000000000000003d3faf00000000000000000000000000000000000000000000000000000000008b0830"
}