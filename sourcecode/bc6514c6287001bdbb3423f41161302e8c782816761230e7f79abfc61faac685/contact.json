{
  "address": "0x45afe0ff6a92bc9f346fc440a9d2a881d42094ff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Gig9",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-23\n*/\n\npragma solidity ^0.4.18;\n\n\n /*\n * Contract that is working with ERC223 tokens\n */\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n} \n contract ContractReceiver {\n     \n   struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n    \n    address [] public senders;\n    function tokenFallback(address _from, uint _value, bytes _data) public  {\n        require(_from != address(0));\n        require(_value>0);\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n        senders.push(_from);\n    }\n}\ncontract ERC223Interface {\n  function balanceOf(address who) public view returns (uint);\n  \n  function name() public view returns (string);\n  function symbol() public view returns (string);\n  function decimals() public view returns (uint);\n  function totalSupply() public view returns (uint256);\n\n  function transfer(address to, uint value) public returns (bool ok);\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC223Token  is ERC223Interface  {\n\n  mapping(address => uint) balances;\n  \n  string internal _name;\n  string internal _symbol;\n  uint internal _decimals;\n  uint256 internal _totalSupply;\n   using SafeMath for uint;\n  \n  \n  // Function to access name of token .\n  function name() public view returns (string) {\n      return _name;\n  }\n  // Function to access symbol of token .\n  function symbol() public view returns (string) {\n      return _symbol;\n  }\n  // Function to access decimals of token .\n  function decimals() public view returns (uint ) {\n      return _decimals;\n  }\n  // Function to access total supply of tokens .\n  function totalSupply() public view returns (uint256 ) {\n      return _totalSupply;\n  }\n  \n  \n  // Function that is called when a user or another contract wants to transfer funds .\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n     require(_to != address(0));\n    if(isContract(_to)) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add( _value);\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n  \n\n  // Function that is called when a user or another contract wants to transfer funds .\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n  \n  // Standard function transfer similar to ERC20 transfer with no _data .\n  // Added due to backwards compatibility reasons .\n  function transfer(address _to, uint _value) public returns (bool success) {\n      \n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private view returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n\n  //function that is called when transaction target is an address\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    require(_value>0);\n    require(balanceOf(msg.sender)>=_value);\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n    balances[_to] = balanceOf(_to).add( _value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    require(_value>0);\n    require(balanceOf(msg.sender)>=_value);\n    balances[msg.sender] = balanceOf(msg.sender).sub( _value);\n    balances[_to] = balanceOf(_to).add(_value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n}\n\n\n  function balanceOf(address _owner) public view returns (uint) {\n    return balances[_owner];\n  }\n}\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  \n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Balances is Ownable,\nERC223Token {\n    mapping(address => bool)public modules;\n    using SafeMath for uint256; \n    address public tokenTransferAddress;  \n     function Balances()public {\n        // constructor\n    }\n    // Address where funds are collected\n\n    function updateModuleStatus(address _module, bool status)public onlyOwner {\n        require(_module != address(0));\n        modules[_module] = status;\n    }\n\n    function updateTokenTransferAddress(address _tokenAddr)public onlyOwner {\n        require(_tokenAddr != address(0));\n        tokenTransferAddress = _tokenAddr;\n\n    }\n\n    modifier onlyModule() {\n        require(modules[msg.sender] == true);\n        _;\n    }\n\n    function increaseBalance(address recieverAddr, uint256 _tokens)onlyModule public returns(\n        bool\n    ) {\n        require(recieverAddr != address(0));\n        require(balances[tokenTransferAddress] >= _tokens);\n        balances[tokenTransferAddress] = balances[tokenTransferAddress].sub(_tokens);\n        balances[recieverAddr] = balances[recieverAddr].add(_tokens);\n        emit Transfer(tokenTransferAddress,recieverAddr,_tokens);\n        return true;\n    }\n    function decreaseBalance(address recieverAddr, uint256 _tokens)onlyModule public returns(\n        bool\n    ) {\n        require(recieverAddr != address(0));\n        require(balances[recieverAddr] >= _tokens);\n        balances[recieverAddr] = balances[recieverAddr].sub(_tokens);\n        balances[tokenTransferAddress] = balances[tokenTransferAddress].add(_tokens);\n        emit Transfer(tokenTransferAddress,recieverAddr,_tokens);\n        return true;\n    }\n\n   \n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  function Destructible() public payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n}\n\ncontract Gig9 is Balances,\nPausable,\nDestructible {\n    \n    function Gig9()public {\n        _name = \"GIG9\";\n        _symbol = \"GIG\";\n        _decimals = 8;\n        _totalSupply = 268000000 * (10 ** _decimals);\n        owner = msg.sender;\n        balances[0x0A35230Af852bc0C094978851640Baf796f1cC9D] = _totalSupply;\n        tokenTransferAddress = 0x0A35230Af852bc0C094978851640Baf796f1cC9D;\n    }\n\n    function ()public {\n        revert();\n\n    }\n\n   \n\n}",
  "bytecode": "60606040526000600760146101000a81548160ff02191690831515021790555034156200002b57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600481526020017f474947390000000000000000000000000000000000000000000000000000000081525060029080519060200190620000b892919062000216565b506040805190810160405280600381526020017f4749470000000000000000000000000000000000000000000000000000000000815250600390805190602001906200010692919062000216565b506008600481905550600454600a0a630ff95b0002600581905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060055460016000730a35230af852bc0c094978851640baf796f1cc9d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550730a35230af852bc0c094978851640baf796f1cc9d600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002c5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025957805160ff19168380011785556200028a565b828001600101855582156200028a579182015b82811115620002895782518255916020019190600101906200026c565b5b5090506200029991906200029d565b5090565b620002c291905b80821115620002be576000816000905550600101620002a4565b5090565b90565b611d9080620002d56000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d57806318160ddd146101bb578063313ce567146101e45780633f4ba83a1461020d5780634e91ca3a146102225780635a7cb38f146102665780635b86f599146102bb5780635c975abb1461031557806370a082311461034257806383197ef01461038f5780638456cb59146103a45780638da5cb5b146103b957806395d89b411461040e578063a8ee49fe1461049c578063a9059cbb146104ed578063aad7152b14610547578063be45fd6214610580578063f2fde38b1461061d578063f5074f4114610656578063f6368f8a1461068f578063ff0569491461076f575b341561012857600080fd5b600080fd5b341561013857600080fd5b6101406107c9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610180578082015181840152602081019050610165565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b6101ce610871565b6040518082815260200191505060405180910390f35b34156101ef57600080fd5b6101f761087b565b6040518082815260200191505060405180910390f35b341561021857600080fd5b610220610885565b005b341561022d57600080fd5b610264600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050610944565b005b341561027157600080fd5b610279610a36565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102c657600080fd5b6102fb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a5c565b604051808215151515815260200191505060405180910390f35b341561032057600080fd5b610328610d68565b604051808215151515815260200191505060405180910390f35b341561034d57600080fd5b610379600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d7b565b6040518082815260200191505060405180910390f35b341561039a57600080fd5b6103a2610dc4565b005b34156103af57600080fd5b6103b7610e59565b005b34156103c457600080fd5b6103cc610f19565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561041957600080fd5b610421610f3e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610461578082015181840152602081019050610446565b50505050905090810190601f16801561048e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a757600080fd5b6104d3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fe6565b604051808215151515815260200191505060405180910390f35b34156104f857600080fd5b61052d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611006565b604051808215151515815260200191505060405180910390f35b341561055257600080fd5b61057e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611045565b005b341561058b57600080fd5b610603600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611120565b604051808215151515815260200191505060405180910390f35b341561062857600080fd5b610654600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611157565b005b341561066157600080fd5b61068d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112ac565b005b341561069a57600080fd5b610755600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611320565b604051808215151515815260200191505060405180910390f35b341561077a57600080fd5b6107af600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061163d565b604051808215151515815260200191505060405180910390f35b6107d1611d3c565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108675780601f1061083c57610100808354040283529160200191610867565b820191906000526020600020905b81548152906001019060200180831161084a57829003601f168201915b5050505050905090565b6000600554905090565b6000600454905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108e057600080fd5b600760149054906101000a900460ff1615156108fb57600080fd5b6000600760146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561099f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156109db57600080fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060011515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610abd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610af957600080fd5b8160016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610b6957600080fd5b610bdd8260016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192790919063ffffffff16565b60016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c9482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461194090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600760149054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1f57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eb457600080fd5b600760149054906101000a900460ff16151515610ed057600080fd5b6001600760146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f46611d3c565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fdc5780601f10610fb157610100808354040283529160200191610fdc565b820191906000526020600020905b815481529060010190602001808311610fbf57829003601f168201915b5050505050905090565b60066020528060005260406000206000915054906101000a900460ff1681565b6000611010611d50565b6110198461195e565b1561103057611029848483611971565b915061103e565b61103b848483611be9565b91505b5092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110a057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156110dc57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061112b8461195e565b156111425761113b848484611971565b9050611150565b61114d848484611be9565b90505b9392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111b257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111ee57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561130757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561135d57600080fd5b6113668561195e565b15611627578361137533610d7b565b101561138057600080fd5b61139b8461138d33610d7b565b61192790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113f9846113eb87610d7b565b61194090919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b60208310151561148b5780518252602082019150602081019050602083039250611466565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b8381101561156c578082015181840152602081019050611551565b50505050905090810190601f1680156115995780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185885af1935050505015156115b957fe5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019050611635565b611632858585611be9565b90505b949350505050565b600060011515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561169e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156116da57600080fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561172857600080fd5b61177a82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118318260016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461194090919063ffffffff16565b60016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561193557fe5b818303905092915050565b600080828401905083811015151561195457fe5b8091505092915050565b600080823b905060008111915050919050565b60008060008411151561198357600080fd5b8361198d33610d7b565b1015151561199a57600080fd5b6119b5846119a733610d7b565b61192790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a1384611a0587610d7b565b61194090919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b1b578082015181840152602081019050611b00565b50505050905090810190601f168015611b485780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515611b6857600080fd5b5af11515611b7557600080fd5b5050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019150509392505050565b60008083111515611bf957600080fd5b82611c0333610d7b565b10151515611c1057600080fd5b611c2b83611c1d33610d7b565b61192790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c8983611c7b86610d7b565b61194090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600190509392505050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820d0a00c9881a5bb2ec95ad8b9a934738c4cf34dd9da0b8659bc85ac53b58080ae0029"
}