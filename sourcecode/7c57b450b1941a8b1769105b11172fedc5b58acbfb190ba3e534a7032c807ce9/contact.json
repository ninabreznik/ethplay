{
  "address": "0x7be25071cc1dd10d8b0fff2390c015354425eea0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETHedgeToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-28\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* http://ethedge.co\n* https://gosutech.github.io (backup)\n*\n* Decentralized token exchange concept\n* A sustainable business model (non-zero-sum game)\n*\n* [✓] 5% Withdraw fee\n* [✓] 5+9+1%=15% Deposit fee\n*       9% Trade capital fee. Use to do profit on different crypto assets and pay dividends back, if success.\n*       5% To token holders\n*       1% devs costs\n* [✓] 1% Token transfer.\n* [✓] 15% Referal link. Lifetime.\n*\n* ---How to use:\n*  1. Send from ETH wallet to the smart contract address any amount ETH.\n*  2.   1) Reinvest your profit by sending 0.00000001 ETH transaction to contract address\n*       2) Claim your profit by sending 0.00000002 ETH transaction to contract address\n*       3) Full exit (sell all and withdraw) by sending 0.00000003 ETH transaction to contract address\n*  3. If you have innactive period more than 1 year - your account can be burned. Funds divided for token holders.\n*  4. We use trade capital to invest to different crypto assets\n*  5. Top big token holders can request audit.\n*/\n\n    interface DevsInterface {\n    function payDividends(string _sourceDesc) public payable;\n}\n\n\ncontract ETHedgeToken {\n\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    //added section\n    //Modifier that only allows owner of the bag to Smart Contract AKA Good to use the function\n    modifier onlyOwner{\n        require(msg.sender == owner_, \"Only owner can do this!\");\n        _;\n    }\n    \n    event onPayDividends(\n        uint256 incomingDividends,\n        string sourceDescription,\n        address indexed customerAddress,\n        uint timestamp\n);\n\n    event onBurn(\n        uint256 DividentsFromNulled,\n        address indexed customerAddress,\n        address indexed senderAddress,\n        uint timestamp\n);\n\n    event onNewRefferal(\n        address indexed userAddress,\n        address indexed refferedByAddress,\n        uint timestamp\n);\n\n    event onTakeCapital(\n        address indexed capitalAddress,\n        address indexed devAddress,\n        uint256 capitalEth,\n        uint256 devEth,\n        address indexed senderAddress,\n        uint timestamp\n);\n\n    event Approval(\n        address indexed tokenOwner,\n        address indexed spender,\n        uint tokens\n);\n\n//end added section\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n);\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n);\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n);\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n);\n\n    string public name = \"ETH hedge token\";\n    string public symbol = \"EHT\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal entryFee_ = 15;//full costs\n    uint8 constant internal transferFee_ = 1;\n    uint8 constant internal exitFee_ = 5;\n    uint8 constant internal refferalFee_ = 15;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2 ** 64;\n    uint256 public stakingRequirement = 50e18;\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => address) internal refferals_;\n    // Owner of account approves the transfer of an amount to another account. ERC20 needed.\n    mapping(address => mapping (address => uint256)) allowed_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    //added section\n    address private owner_=msg.sender;\n    mapping(address => uint256) internal lastupdate_;\n    //time through your account cant be nulled\n    uint private constant timePassive_ = 365 days;\n    //uint private constant timePassive_ = 1 minutes; // for test\n    //Percents go to exchange bots\n    uint8 constant internal entryFeeCapital_ = 9;\n    //Admins reward percent\n    uint8 constant internal entryFeeReward_ = 1;\n    address public capital_=msg.sender;\n    address public devReward_=0xafC1D46163308c81BFb12d305CCb7deAbb39E1fE;//devs contract address\n    uint256 public capitalAmount_;\n    uint256 public AdminRewardAmount_;\n    \n    \n    //This function transfer ownership of contract from one entity to another\n    function transferOwnership(address _newOwner) public onlyOwner{\n        require(_newOwner != address(0));\n        owner_ = _newOwner;\n    }\n    \n    //This function change addresses for exchange capital and admin reward\n    function changeOuts(address _newCapital) public onlyOwner{\n        //check if not empty\n        require(_newCapital != address(0));\n        capital_ = _newCapital;\n    }\n\n    //Pay dividends\n    function payDividends(string _sourceDesc) public payable {\n        payDivsValue(msg.value,_sourceDesc);\n    }\n\n    //Pay dividends internal with value\n    function payDivsValue(uint256 _amountOfDivs,string _sourceDesc) internal {\n        address _customerAddress = msg.sender;\n        uint256 _dividends = _amountOfDivs;\n        if (tokenSupply_ > 0) {\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n        }\n        emit onPayDividends(_dividends,_sourceDesc,_customerAddress,now);\n    }\n\n    //If account dont have buy, sell, reinvest, transfer(from), trasfer(to, if more stakingRequirement) action for 1 year - it can be burned. All ETH go to dividends\n    function burn(address _checkForInactive) public {\n        address _customerAddress = _checkForInactive;\n        require(lastupdate_[_customerAddress]!=0 && now >= SafeMath.add(lastupdate_[_customerAddress],timePassive_), \"This account cant be nulled!\");\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n        \n        uint256 _dividends = dividendsOf(_customerAddress);\n        _dividends += referralBalance_[_customerAddress];\n        payDivsValue(_dividends,'Burn coins');\n\n        delete tokenBalanceLedger_[_customerAddress];\n        delete referralBalance_[_customerAddress];\n        delete payoutsTo_[_customerAddress];\n        delete lastupdate_[_customerAddress];\n        emit onBurn(_dividends,_customerAddress,msg.sender,now);\n    }\n  \n    //Owner can get trade capital and reward \n    function takeCapital() public{\n        require(capitalAmount_>0 && AdminRewardAmount_>0, \"No fundz, sorry!\");\n        uint256 capitalAmountTrans=capitalAmount_;\n        uint256 adminAmountTrans=AdminRewardAmount_;\n        capitalAmount_=0;\n        AdminRewardAmount_=0;\n//        capital_.transfer(capitalAmountTrans); // to trade capital\n        capital_.call.value(capitalAmountTrans)(); // to trade capital, can use another contract\n        DevsInterface devContract_ = DevsInterface(devReward_);\n        devContract_.payDividends.value(adminAmountTrans)('ethedge.co source');\n        emit onTakeCapital(capital_,devReward_,capitalAmountTrans,adminAmountTrans,msg.sender,now);\n    }\n    \n     // Send `tokens` amount of tokens from address `from` to address `to`\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed_[_from][_to];\n        uint256 _amountOfTokens=_value;\n        require(tokenBalanceLedger_[_from] >= _amountOfTokens && allowance >= _amountOfTokens);\n        if ((dividendsOf(_from) + referralBalance_[_from])>0){\n            withdrawAddr(_from);\n        }\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from],_amountOfTokens);\n        tokenBalanceLedger_[_to] =SafeMath.add(tokenBalanceLedger_[_to],_taxedTokens);\n        payoutsTo_[_from] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_to] += (int256) (profitPerShare_ * _taxedTokens);\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        allowed_[_from][_to] = SafeMath.sub(allowed_[_from][_to],_amountOfTokens);\n        emit Transfer(_from, _to, _amountOfTokens);\n        return true;\n    }\n \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed_[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed_[_owner][_spender];\n    }\n    //end added section\n    \n    function buy(address _referredBy) public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    function() payable public {\n        if (msg.value == 1e10) {\n            reinvest();\n        }\n        else if (msg.value == 2e10) {\n            withdraw();\n        }\n        else if (msg.value == 3e10) {\n            exit();\n        }\n        else {\n            purchaseTokens(msg.value, 0x0);\n        }\n    }\n\n    function reinvest() onlyStronghands public {\n        uint256 _dividends = myDividends(false);\n        address _customerAddress = msg.sender;\n        lastupdate_[_customerAddress] = now;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    function exit() public {\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n        withdraw();\n    }\n\n    function withdraw() onlyStronghands public {\n        address _customerAddress = msg.sender;\n        withdrawAddr(_customerAddress);\n    }\n\n    function withdrawAddr(address _fromAddress) onlyStronghands internal {\n        address _customerAddress = _fromAddress;\n        lastupdate_[_customerAddress] = now;\n        uint256 _dividends = myDividends(false);\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        _customerAddress.transfer(_dividends);\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        address _customerAddress = msg.sender;\n        lastupdate_[_customerAddress] = now;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        if (tokenSupply_ > 0) {\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        address _customerAddress = msg.sender;\n        lastupdate_[_customerAddress] = now;\n        if (_amountOfTokens>stakingRequirement) {\n            lastupdate_[_toAddress] = now;\n        }\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n        return true;\n    }\n\n\n    function totalEthereumBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    function refferedBy(address _customerAddress) public view returns (address) {\n        return refferals_[_customerAddress];\n    }\n\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function buyPrice() public view returns (uint256) {\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n        address _customerAddress = msg.sender;\n        lastupdate_[_customerAddress] = now;\n\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_-entryFeeCapital_-entryFeeReward_), 100);\n//        uint256 _fullTax = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _capitalTrade = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFeeCapital_), 100);\n        uint256 _adminReward = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFeeReward_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.div(SafeMath.mul(_incomingEthereum, 100-entryFee_), 100);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n//set refferal. lifetime\n        if (\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n            _referredBy != _customerAddress &&\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement &&\n            refferals_[_customerAddress] == 0x0\n        ) {\n            refferals_[_customerAddress] = _referredBy;\n            emit onNewRefferal(_customerAddress,_referredBy, now);\n        }\n\n//use refferal\n        if (\n            refferals_[_customerAddress] != 0x0 &&\n            tokenBalanceLedger_[refferals_[_customerAddress]] >= stakingRequirement\n        ) {\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        if (tokenSupply_ > 0) {\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        capitalAmount_=SafeMath.add(capitalAmount_,_capitalTrade);\n        AdminRewardAmount_=SafeMath.add(AdminRewardAmount_,_adminReward);\n        if (capitalAmount_>1e17){ //more than 0.1 ETH - send outs\n            takeCapital();\n        }\n\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n\n        return _amountOfTokens;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n            (\n                (\n                    SafeMath.sub(\n                        (sqrt\n                            (\n                                (_tokenPriceInitial ** 2)\n                                +\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                                +\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                                +\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                            )\n                        ), _tokenPriceInitial\n                    )\n                ) / (tokenPriceIncremental_)\n            ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n            (\n                SafeMath.sub(\n                    (\n                        (\n                            (\n                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                            ) - tokenPriceIncremental_\n                        ) * (tokens_ - 1e18)\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n                )\n                / 1e18);\n\n        return _etherReceived;\n    }\n\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60c0604052600f60808190527f45544820686564676520746f6b656e000000000000000000000000000000000060a0908152620000409160009190620000eb565b506040805180820190915260038082527f454854000000000000000000000000000000000000000000000000000000000060209092019182526200008791600191620000eb565b506802b5e3af16b1880000600255600a8054600160a060020a031990811633908117909255600c80548216909217909155600d805490911673afc1d46163308c81bfb12d305ccb7deabb39e1fe179055348015620000e457600080fd5b5062000190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012e57805160ff19168380011785556200015e565b828001600101855582156200015e579182015b828111156200015e57825182559160200191906001019062000141565b506200016c92915062000170565b5090565b6200018d91905b808211156200016c576000815560010162000177565b90565b611ce180620001a06000396000f30060806040526004361061019f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b81146101f257806306fdde0314610225578063095ea7b3146102af57806310d0ffdd146102e757806318160ddd146102ff578063226093731461031457806323b872dd1461032c578063313ce5671461035657806331bbb695146103815780633ccfd60b146103965780634b750334146103ab57806356d399e8146103c05780635b8fa846146103d5578063688abbf7146104215780636a85d12e1461043b5780636b2f46321461045c57806370a0823114610471578063730b26d61461049257806385785163146104c35780638620410b146104d857806389afcb44146104ed578063949e8acd1461050e57806395d89b4114610523578063a9059cbb14610538578063acd2e8751461055c578063c60d90d71461057d578063dacf85e314610592578063dd62ed3e146105a7578063e4849b32146105ce578063e9fad8ee146105e6578063f088d547146105fb578063f2fde38b1461060f578063fdb5a03e14610630575b346402540be40014156101b9576101b4610641565b6101f0565b346404a817c80014156101ce576101b4610701565b346406fc23ac0014156101e3576101b4610726565b6101ee346000610753565b505b005b3480156101fe57600080fd5b50610213600160a060020a0360043516610b49565b60408051918252519081900360200190f35b34801561023157600080fd5b5061023a610b84565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027457818101518382015260200161025c565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102bb57600080fd5b506102d3600160a060020a0360043516602435610c12565b604080519115158252519081900360200190f35b3480156102f357600080fd5b50610213600435610c78565b34801561030b57600080fd5b50610213610cab565b34801561032057600080fd5b50610213600435610cb1565b34801561033857600080fd5b506102d3600160a060020a0360043581169060243516604435610ced565b34801561036257600080fd5b5061036b610f15565b6040805160ff9092168252519081900360200190f35b34801561038d57600080fd5b506101f0610f1a565b3480156103a257600080fd5b506101f0610701565b3480156103b757600080fd5b506102136110cb565b3480156103cc57600080fd5b50610213611122565b6040805160206004803580820135601f81018490048402850184019095528484526101f09436949293602493928401919081908401838280828437509497506111289650505050505050565b34801561042d57600080fd5b506102136004351515611132565b34801561044757600080fd5b506101f0600160a060020a0360043516611175565b34801561046857600080fd5b5061021361121b565b34801561047d57600080fd5b50610213600160a060020a0360043516611220565b34801561049e57600080fd5b506104a761123b565b60408051600160a060020a039092168252519081900360200190f35b3480156104cf57600080fd5b5061021361124a565b3480156104e457600080fd5b50610213611250565b3480156104f957600080fd5b506101f0600160a060020a036004351661129b565b34801561051a57600080fd5b5061021361145f565b34801561052f57600080fd5b5061023a611471565b34801561054457600080fd5b506102d3600160a060020a03600435166024356114cb565b34801561056857600080fd5b506104a7600160a060020a03600435166116a9565b34801561058957600080fd5b506104a76116c7565b34801561059e57600080fd5b506102136116d6565b3480156105b357600080fd5b50610213600160a060020a03600435811690602435166116dc565b3480156105da57600080fd5b506101f0600435611707565b3480156105f257600080fd5b506101f0610726565b610213600160a060020a0360043516611880565b34801561061b57600080fd5b506101f0600160a060020a036004351661188c565b34801561063c57600080fd5b506101f05b6000806000806106516001611132565b1161065b57600080fd5b6106656000611132565b336000818152600b6020908152604080832042905560058252808320805468010000000000000000870201905560049091528120805490829055909201945092506106b1908490610753565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b60008061070e6001611132565b1161071857600080fd5b503361072381611932565b50565b33600081815260036020526040812054908111156107475761074781611707565b61074f610701565b5050565b336000818152600b602052604081204290559081808080808080808061078461077d8e6005611a20565b6064611a56565b985061079461077d8e6009611a20565b97506107a461077d8e6001611a20565b96506107b461077d8a600f611a20565b95506107c08987611a6d565b94506107d061077d8e6055611a20565b93506107db84611a7f565b9250680100000000000000008502915060008311801561080557506008546108038482611b17565b115b151561081057600080fd5b600160a060020a038c161580159061083a575089600160a060020a03168c600160a060020a031614155b80156108605750600254600160a060020a038d1660009081526003602052604090205410155b80156108845750600160a060020a03808b1660009081526006602052604090205416155b1561091f578b600660008c600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508b600160a060020a03168a600160a060020a03167f2bd72effc01d9e66e7aa95b8397cd67900af5eb8e1fe85e2dc5d0c3d6b4cdc41426040518082815260200191505060405180910390a35b600160a060020a03808b1660009081526006602052604090205416158015906109715750600254600160a060020a03808c16600090815260066020908152604080832054909316825260039052205410155b156109b757600160a060020a038c166000908152600460205260409020546109999087611b17565b600160a060020a038d166000908152600460205260409020556109d2565b6109c18587611b17565b945068010000000000000000850291505b60006008541115610a36576109e960085484611b17565b6008819055680100000000000000008602811515610a0357fe5b60098054929091049091019055600854680100000000000000008602811515610a2857fe5b048302820382039150610a3c565b60088390555b600160a060020a038a16600090815260036020526040902054610a5f9084611b17565b600160a060020a038b16600090815260036020908152604080832093909355600954600590915291902080549185028490039182019055600e54909150610aa69089611b17565b600e55600f54610ab69088611b17565b600f55600e5467016345785d8a00001015610ad357610ad3610f1a565b8b600160a060020a03168a600160a060020a03167f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8f8642610b13611250565b604080519485526020850193909352838301919091526060830152519081900360800190a350909b9a5050505050505050505050565b600160a060020a0316600090815260056020908152604080832054600390925290912054600954680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c0a5780601f10610bdf57610100808354040283529160200191610c0a565b820191906000526020600020905b815481529060010190602001808311610bed57829003601f168201915b505050505081565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000808080610c8b61077d86600f611a20565b9250610c978584611a6d565b9150610ca282611a7f565b95945050505050565b60085490565b6000806000806008548511151515610cc857600080fd5b610cd185611b26565b9250610ce161077d846005611a20565b9150610ca28383611a6d565b600160a060020a038084166000818152600760209081526040808320948716835293815283822054928252600390529182205483908390819081908411801590610d375750838510155b1515610d4257600080fd5b600160a060020a038916600090815260046020526040812054610d648b610b49565b011115610d7457610d7489611932565b610d8261077d856001611a20565b9250610d8e8484611a6d565b9150610d9983611b26565b9050610da760085484611a6d565b600855600160a060020a038916600090815260036020526040902054610dcd9085611a6d565b600160a060020a03808b1660009081526003602052604080822093909355908a1681522054610dfc9083611b17565b600160a060020a0389811660008181526003602090815260408083209590955560098054948f16835260059091528482208054948a02909403909355825491815292909220805492850290920190915554600854610e709190680100000000000000008402811515610e6a57fe5b04611b17565b600955600160a060020a03808a166000908152600760209081526040808320938c1683529290522054610ea39085611a6d565b600160a060020a03808b166000818152600760209081526040808320948e16808452948252918290209490945580518881529051929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600198975050505050505050565b601281565b600080600080600e54118015610f3257506000600f54115b1515610f88576040805160e560020a62461bcd02815260206004820152601060248201527f4e6f2066756e647a2c20736f7272792100000000000000000000000000000000604482015290519081900360640190fd5b600e8054600f805460009384905590839055600c54604051929650909450600160a060020a03169185919081818185875af15050600d54604080517f5b8fa84600000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f657468656467652e636f20736f7572636500000000000000000000000000000060448201529051600160a060020a039092169450849350635b8fa84692508591606480830192600092919082900301818588803b15801561105557600080fd5b505af1158015611069573d6000803e3d6000fd5b5050600d54600c54604080518981526020810189905242818301529051339650600160a060020a0393841695509190921692507fc2f6860e0b166e163bd51b2d5f3a1f5f00d007fdc3ddcfb2c52b3584db168f3a9181900360600190a4505050565b600080600080600854600014156110e9576414f46b0400935061111c565b6110fa670de0b6b3a7640000611b26565b925061110a61077d846005611a20565b91506111168383611a6d565b90508093505b50505090565b60025481565b6107233482611b92565b600033826111485761114381610b49565b61116c565b600160a060020a03811660009081526004602052604090205461116a82610b49565b015b91505b50919050565b600a54600160a060020a031633146111d7576040805160e560020a62461bcd02815260206004820152601760248201527f4f6e6c79206f776e65722063616e20646f207468697321000000000000000000604482015290519081900360640190fd5b600160a060020a03811615156111ec57600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b303190565b600160a060020a031660009081526003602052604090205490565b600d54600160a060020a031681565b600e5481565b6000806000806008546000141561126e5764199c82cc00935061111c565b61127f670de0b6b3a7640000611b26565b925061128f61077d84600f611a20565b91506111168383611b17565b600160a060020a0381166000908152600b60205260408120548291908190158015906112ed5750600160a060020a0383166000908152600b60205260409020546112e9906301e13380611b17565b4210155b1515611343576040805160e560020a62461bcd02815260206004820152601c60248201527f54686973206163636f756e742063616e74206265206e756c6c65642100000000604482015290519081900360640190fd5b600160a060020a038316600090815260036020526040812054925082111561136e5761136e82611707565b61137783610b49565b90506004600084600160a060020a0316600160a060020a0316815260200190815260200160002054810190506113e2816040805190810160405280600a81526020017f4275726e20636f696e7300000000000000000000000000000000000000000000815250611b92565b600160a060020a03831660008181526003602090815260408083208390556004825280832083905560058252808320839055600b8252808320929092558151848152429181019190915281513393927f1519d315535240932a3e2829b1d466f4d93725f2e8b73b728de895beda438ec1928290030190a350505050565b60003361146b81611220565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c0a5780601f10610bdf57610100808354040283529160200191610c0a565b6000806000806000806114dc61145f565b116114e657600080fd5b336000818152600b6020526040902042905560025490945086111561152157600160a060020a0387166000908152600b602052604090204290555b600160a060020a03841660009081526003602052604090205486111561154657600080fd5b60006115526001611132565b111561156057611560610701565b61156e61077d876001611a20565b925061157a8684611a6d565b915061158583611b26565b905061159360085484611a6d565b600855600160a060020a0384166000908152600360205260409020546115b99087611a6d565b600160a060020a0380861660009081526003602052604080822093909355908916815220546115e89083611b17565b600160a060020a0388811660008181526003602090815260408083209590955560098054948a16835260059091528482208054948c029094039093558254918152929092208054928502909201909155546008546116569190680100000000000000008402811515610e6a57fe5b600955604080518381529051600160a060020a03808a1692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019695505050505050565b600160a060020a039081166000908152600660205260409020541690565b600c54600160a060020a031681565b600f5481565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600080600080600080600061171a61145f565b1161172457600080fd5b336000818152600b60209081526040808320429055600390915290205490965087111561175057600080fd5b86945061175c85611b26565b935061176c61077d856005611a20565b92506117788484611a6d565b915061178660085486611a6d565b600855600160a060020a0386166000908152600360205260409020546117ac9086611a6d565b600160a060020a0387166000908152600360209081526040808320939093556009546005909152918120805492880268010000000000000000860201928390039055600854919250101561181c57611818600954600854680100000000000000008602811515610e6a57fe5b6009555b85600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e868442611852611250565b604080519485526020850193909352838301919091526060830152519081900360800190a250505050505050565b600061116f3483610753565b600a54600160a060020a031633146118ee576040805160e560020a62461bcd02815260206004820152601760248201527f4f6e6c79206f776e65722063616e20646f207468697321000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561190357600080fd5b600a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008060006119416001611132565b1161194b57600080fd5b600160a060020a0383166000908152600b6020526040812042905583925061197290611132565b600160a060020a038316600081815260056020908152604080832080546801000000000000000087020190556004909152808220805490839055905193019350909183156108fc0291849190818181858888f193505050501580156119db573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a2505050565b600080831515611a335760009150611a4f565b50828202828482811515611a4357fe5b0414611a4b57fe5b8091505b5092915050565b6000808284811515611a6457fe5b04949350505050565b600082821115611a7957fe5b50900390565b6008546000906c01431e0fae6d7217caa00000009082906402540be400611b04611afe730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e40000000000000001611c80565b85611a6d565b811515611b0d57fe5b0403949350505050565b600082820183811015611a4b57fe5b600854600090670de0b6b3a7640000838101918101908390611b7f6414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be40002811515611b7957fe5b04611a6d565b811515611b8857fe5b0495945050505050565b6008543390839060001015611bc757600854680100000000000000008202811515611bb957fe5b600980549290910490910190555b81600160a060020a03167f12de8d6e1aa2575ae32b1e652c194b212b3f3a7a4d1ebc3479dadbb65ca8d06c8285426040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611c3e578181015183820152602001611c26565b50505050905090810190601f168015611c6b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250505050565b80600260018201045b8181101561116f578091506002818285811515611ca257fe5b0401811515611cad57fe5b049050611c895600a165627a7a72305820db878a6ca2a623c60bd7b1228562345876f844a36c8658bc20c25906d042dd930029"
}