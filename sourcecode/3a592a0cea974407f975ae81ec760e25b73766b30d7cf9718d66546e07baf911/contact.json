{
  "address": "0x340085ed7d6c18dcf4c8b661fba6bd95916c8644",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BoostPax",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-26\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\t\n\n\tcontract owned {\n\t    address public owner;\n\t\n\n\t    constructor() public {\n\t        owner = msg.sender;\n\t    }\n\t\n\n\t    modifier onlyOwner {\n\t        require(msg.sender == owner);\n\t        _;\n\t    }\n\t\n\n\t    function transferOwnership(address newOwner) onlyOwner public {\n\t        owner = newOwner;\n\t    }\n\t}\n\t\n\n\tinterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \n\t\n\n\t}\n\tcontract BoostPax {\n\t    // Public variables of the token\n\t    string public name;\n\t    string public symbol;\n\t    uint8 public decimals = 18;\n\t    // 18 decimals is the strongly suggested default, avoid changing it\n\t    uint256 public totalSupply;\n\t\n\n\t    // This creates an array with all balances\n\t    mapping (address => uint256) public balanceOf;\n\t    mapping (address => mapping (address => uint256)) public allowance;\n\t    mapping (address => bool) public frozenAccount;\n\t\n\n\t    // This generates a public event on the blockchain that will notify clients\n\t    event Transfer(address indexed from, address indexed to, uint256 value);\n\t    \n\t    // This generates a public event on the blockchain that will notify clients\n\t    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\t\n\n\t    // This notifies clients about the amount burnt\n\t    event Burn(address indexed from, uint256 value);\n\t\n\n\t    /**\n\t     * Constructor function\n\t     *\n\t     * Initializes contract with initial supply tokens to the creator of the contract\n\t     */\n\t    constructor(\n\t\n\n\t    ) public {\n\t        totalSupply = 100000000 * 10 ** uint256(18);  // Update total supply with the decimal amount\n\t        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n\t        name = \"BoostPax\";                                       // Set the name for display purposes\n\t        symbol = \"BPX\";                                   // Set the symbol for display purposes\n\t    }\n\t\n\n\t    /**\n\t     * Internal transfer, only can be called by this contract\n\t     */\n\t    function _transfer(address _from, address _to, uint _value) internal {\n\t        // Prevent transfer to 0x0 address. Use burn() instead\n\t        require(_to != address(0x0));\n\t        // Check if the sender has enough\n\t        require(balanceOf[_from] >= _value);\n\t        // Check for overflows\n\t        require(balanceOf[_to] + _value > balanceOf[_to]);\n\t        // Save this for an assertion in the future\n\t        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t        // Subtract from the sender\n\t        balanceOf[_from] -= _value;\n\t        // Add the same to the recipient\n\t        balanceOf[_to] += _value;\n\t        emit Transfer(_from, _to, _value);\n\t        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t    }\n\t\n\n\t    /**\n\t     * Transfer tokens\n\t     *\n\t     * Send `_value` tokens to `_to` from your account\n\t     *\n\t     * @param _to The address of the recipient\n\t     * @param _value the amount to send\n\t     */\n\t    function transfer(address _to, uint256 _value) public returns (bool success) {\n\t        _transfer(msg.sender, _to, _value);\n\t        return true;\n\t    }\n\t\n\n\t    /**\n\t     * Transfer tokens from other address\n\t     *\n\t     * Send `_value` tokens to `_to` in behalf of `_from`\n\t     *\n\t     * @param _from The address of the sender\n\t     * @param _to The address of the recipient\n\t     * @param _value the amount to send\n\t     */\n\t    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t        allowance[_from][msg.sender] -= _value;\n\t        _transfer(_from, _to, _value);\n\t        return true;\n\t    }\n\t\n\n\t    /**\n\t     * Set allowance for other address\n\t     *\n\t     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t     *\n\t     * @param _spender The address authorized to spend\n\t     * @param _value the max amount they can spend\n\t     */\n\t    function approve(address _spender, uint256 _value) public\n\t        returns (bool success) {\n\t        allowance[msg.sender][_spender] = _value;\n\t        emit Approval(msg.sender, _spender, _value);\n\t        return true;\n\t    }\n\t\n\n\t    /**\n\t     * Set allowance for other address and notify\n\t     *\n\t     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t     *\n\t     * @param _spender The address authorized to spend\n\t     * @param _value the max amount they can spend\n\t     * @param _extraData some extra information to send to the approved contract\n\t     */\n\t    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n\t        public\n\t        returns (bool success) {\n\t        tokenRecipient spender = tokenRecipient(_spender);\n\t        if (approve(_spender, _value)) {\n\t            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t            return true;\n\t        }\n\t    }\n\t\n\n\t    /**\n\t     * Destroy tokens\n\t     *\n\t     * Remove `_value` tokens from the system irreversibly\n\t     *\n\t     * @param _value the amount of money to burn\n\t     */\n\t    function burn(uint256 _value) public returns (bool success) {\n\t        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t        totalSupply -= _value;                      // Updates totalSupply\n\t        emit Burn(msg.sender, _value);\n\t        return true;\n\t    }\n\t\n\t    /**\n\t     * Destroy tokens from other account\n\t     *\n\t     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t     *\n\t     * @param _from the address of the sender\n\t     * @param _value the amount of money to burn\n\t     */\n\t    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t        totalSupply -= _value;                              // Update totalSupply\n\t        emit Burn(_from, _value);\n\t        return true;\n\t    }\n\t}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60806040526002805460ff1916601217905534801561001d57600080fd5b506a52b7d2dcc80cd2e4000000600381905533600090815260046020908152604080832093909355825180840190935260088084527f426f6f73745061780000000000000000000000000000000000000000000000009390910192835261008492906100cf565b506040805180820190915260038082527f425058000000000000000000000000000000000000000000000000000000000060209092019182526100c9916001916100cf565b5061016a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011057805160ff191683800117855561013d565b8280016001018555821561013d579182015b8281111561013d578251825591602001919060010190610122565b5061014992915061014d565b5090565b61016791905b808211156101495760008155600101610153565b90565b610909806101796000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018b57806323b872dd146101b2578063313ce567146101dc57806342966c681461020757806370a082311461021f57806379cc67901461024057806395d89b4114610264578063a9059cbb14610279578063b414d4b61461029d578063cae9ca51146102be578063dd62ed3e14610327575b600080fd5b3480156100d557600080fd5b506100de61034e565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b50610177600160a060020a03600435166024356103dc565b604080519115158252519081900360200190f35b34801561019757600080fd5b506101a0610442565b60408051918252519081900360200190f35b3480156101be57600080fd5b50610177600160a060020a0360043581169060243516604435610448565b3480156101e857600080fd5b506101f16104b7565b6040805160ff9092168252519081900360200190f35b34801561021357600080fd5b506101776004356104c0565b34801561022b57600080fd5b506101a0600160a060020a0360043516610538565b34801561024c57600080fd5b50610177600160a060020a036004351660243561054a565b34801561027057600080fd5b506100de61061b565b34801561028557600080fd5b50610177600160a060020a0360043516602435610675565b3480156102a957600080fd5b50610177600160a060020a036004351661068b565b3480156102ca57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610177948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506106a09650505050505050565b34801561033357600080fd5b506101a0600160a060020a03600435811690602435166107b9565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103d45780601f106103a9576101008083540402835291602001916103d4565b820191906000526020600020905b8154815290600101906020018083116103b757829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035481565b600160a060020a038316600090815260056020908152604080832033845290915281205482111561047857600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020805483900390556104ad8484846107d6565b5060019392505050565b60025460ff1681565b336000908152600460205260408120548211156104dc57600080fd5b3360008181526004602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600160a060020a03821660009081526004602052604081205482111561056f57600080fd5b600160a060020a038316600090815260056020908152604080832033845290915290205482111561059f57600080fd5b600160a060020a0383166000818152600460209081526040808320805487900390556005825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103d45780601f106103a9576101008083540402835291602001916103d4565b60006106823384846107d6565b50600192915050565b60066020526000908152604090205460ff1681565b6000836106ad81856103dc565b156107b1576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b8381101561074557818101518382015260200161072d565b50505050905090810190601f1680156107725780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561079457600080fd5b505af11580156107a8573d6000803e3d6000fd5b50505050600191505b509392505050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a03831615156107ed57600080fd5b600160a060020a03841660009081526004602052604090205482111561081257600080fd5b600160a060020a0383166000908152600460205260409020548281011161083857600080fd5b50600160a060020a038083166000818152600460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a038084166000908152600460205260408082205492871682529020540181146108d757fe5b505050505600a165627a7a72305820e7251068c5ebd35d64709d1d6929983b318ac17c049fb22827676fd1bbf995090029"
}