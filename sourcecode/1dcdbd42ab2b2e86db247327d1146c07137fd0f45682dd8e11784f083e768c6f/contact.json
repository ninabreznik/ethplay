{
  "address": "0x2872dbacd21e658d0d4e75100fff47c3335b81b8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FGTToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-15\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// ERC20 Interface\ncontract ERC20 {\n    function totalSupply() public view returns (uint _totalSupply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    modifier onlyOwner { require(msg.sender == owner); _; }\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(owner==msg.sender);\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\n// ERC20Token\ncontract ERC20Token is ERC20 {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => mapping (address => uint256)) remainallowed;\n    mapping(address => uint256) distBalances;  \n    uint256 public totalToken; \n     uint256 public baseStartTime; //\n     //debug value \n     uint256 debug_totalallower;\n     uint256 debug_mondiff;\n     uint256 debug_now;\n     \n     \n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            distBalances[_to] = distBalances[_to].add(_value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n       \n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_from] = balances[_from].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            //allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n  \n            \n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalToken;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        remainallowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n//总的额度\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    // 剩余的额度\n\n  function remainallowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return remainallowed[_owner][_spender];\n    }\n}\n\n\n\n\n\ncontract FGTToken is ERC20Token, Owned {\n\n    string  public  name = \"Food&GoodsChain\";\n    string  public  symbol = \"FGT\";\n    uint256 public  decimals = 18;\n    uint256 public tokenDestroyed;\n      //list of distributed balance of each address to calculate restricted amount\n\n    event Burn(address indexed _from, uint256 _tokenDestroyed, uint256 _timestamp);\n\n    function FGTToken(string tokenName, string tokenSymbol,uint256 initialSupply) public {\n    name=tokenName;\n    symbol=tokenSymbol;\n    totalToken = initialSupply * 10 ** uint256(decimals);\n    \n    balances[msg.sender] = totalToken;\n    }\n   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n   //计算本期释放额度\n   uint256 calfreeamount=freeAmount(_from,msg.sender);\n    if(calfreeamount<_value){\n        _value=calfreeamount;\n    }\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_from] = balances[_from].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            //allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n            remainallowed[_from][msg.sender] = remainallowed[_from][msg.sender].sub(_value);\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function transferAnyERC20Token(address _tokenAddress, address _recipient, uint256 _amount) public onlyOwner returns (bool success) {\n        return ERC20(_tokenAddress).transfer(_recipient, _amount);\n    }\n\n    function burn (uint256 _burntAmount) public returns (bool success) {\n        require(balances[msg.sender] >= _burntAmount && _burntAmount > 0);\n        balances[msg.sender] = balances[msg.sender].sub(_burntAmount);\n        totalToken = totalToken.sub(_burntAmount);\n        tokenDestroyed = tokenDestroyed.add(_burntAmount);\n        require (tokenDestroyed <= totalToken);\n        Transfer(address(this), 0x0, _burntAmount);\n        Burn(msg.sender, _burntAmount, block.timestamp);\n        return true;\n    }\n    \n   \n        \n         function setStartTime(uint _startTime) public onlyOwner {\n            require (msg.sender==owner);\n            baseStartTime = _startTime;\n        }\n         /* 增发增发代币 */\n        function  addToken(address target, uint256 mintedAmount)  public onlyOwner {\n        require(target==owner);//仅仅对账户创建者增发\n        balances[target] += mintedAmount;\n        totalToken += mintedAmount;\n        emit Transfer(0, msg.sender, mintedAmount);\n        emit Transfer(msg.sender, target, mintedAmount);\n    }\n    \n     function freeAmount(address _from,address user) public returns (uint256 amount) {\n        uint256 totalallower= allowed[_from][user] ;\n        debug_totalallower=totalallower;\n        uint256 releseamount=0;\n            //0) no restriction for founder\n            if (user == owner) {\n                return balances[user];\n            }\n        debug_now=now;\n            //1) no free amount before base start time;\n            if (now < baseStartTime) {\n                return 0;\n            }\n \n            //2) calculate number of months passed since base start time;\n            uint256 monthDiff =  now.sub(baseStartTime) / (30 days);\n         debug_mondiff=monthDiff;\n            //3) 大于50个月，所有剩余额度一次释放\n            if (monthDiff > 50) {\n              releseamount=remainallowed[_from][user];\n                return releseamount;\n            }\n \n            //4) 到本期为止，总共允许释放额度\n            uint256 unrestricted =totalallower.div( 50).add( (totalallower.div(50)).mul( monthDiff));\n        \n            //5) 总释放额度 -已经释放额度  (已经释放额度=（总额度 - 剩余额度）)\n            if (unrestricted >remainallowed[_from][user]) {\n                releseamount =remainallowed[_from][user];\n            } else {\n                //本期为止总释放额度 减去 已经释放额度（总额度 - 剩余额度）\n                releseamount = unrestricted.sub(totalallower.sub(remainallowed[_from][user]));\n            \n            }\n            if(releseamount>balanceOf(_from)){\n                releseamount=balanceOf(_from);\n            }\n            return releseamount;\n        }\n       \n}",
  "bytecode": "60806040526040805190810160405280600f81526020017f466f6f6426476f6f6473436861696e0000000000000000000000000000000000815250600b908051906020019062000051929190620001bd565b506040805190810160405280600381526020017f4647540000000000000000000000000000000000000000000000000000000000815250600c90805190602001906200009f929190620001bd565b506012600d55348015620000b257600080fd5b50604051620023ff380380620023ff83398101806040528101908080518201929190602001805182019291906020018051906020019092919050505033600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600b908051906020019062000147929190620001bd565b5081600c908051906020019062000160929190620001bd565b50600d54600a0a81026004819055506004546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050506200026c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020057805160ff191683800117855562000231565b8280016001018555821562000231579182015b828111156200023057825182559160200191906001019062000213565b5b50905062000240919062000244565b5090565b6200026991905b80821115620002655760008160009055506001016200024b565b5090565b90565b612183806200027c6000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bd5780630f7503c91461022257806318160ddd1461024d57806323b872dd14610278578063313ce567146102fd5780633d1fa8ee146103285780633e0a322d1461039f57806342966c68146103cc578063626be5671461041157806370a082311461043c57806379ba5097146104935780638da5cb5b146104aa57806395d89b41146105015780639d784f7414610591578063a9059cbb14610608578063af81c5b91461066d578063d493b9ac146106ba578063d4ee1d901461073f578063d9aa188114610796578063dd62ed3e146107c1578063f2fde38b14610838575b600080fd5b34801561013957600080fd5b5061014261087b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610182578082015181840152602081019050610167565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c957600080fd5b50610208600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610919565b604051808215151515815260200191505060405180910390f35b34801561022e57600080fd5b50610237610b21565b6040518082815260200191505060405180910390f35b34801561025957600080fd5b50610262610b27565b6040518082815260200191505060405180910390f35b34801561028457600080fd5b506102e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b31565b604051808215151515815260200191505060405180910390f35b34801561030957600080fd5b50610312610ed7565b6040518082815260200191505060405180910390f35b34801561033457600080fd5b50610389600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610edd565b6040518082815260200191505060405180910390f35b3480156103ab57600080fd5b506103ca60048036038101908080359060200190929190505050610f64565b005b3480156103d857600080fd5b506103f760048036038101908080359060200190929190505050611026565b604051808215151515815260200191505060405180910390f35b34801561041d57600080fd5b5061042661120c565b6040518082815260200191505060405180910390f35b34801561044857600080fd5b5061047d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611212565b6040518082815260200191505060405180910390f35b34801561049f57600080fd5b506104a861125a565b005b3480156104b657600080fd5b506104bf611438565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050d57600080fd5b5061051661145e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561055657808201518184015260208101905061053b565b50505050905090810190601f1680156105835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561059d57600080fd5b506105f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114fc565b6040518082815260200191505060405180910390f35b34801561061457600080fd5b50610653600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611923565b604051808215151515815260200191505060405180910390f35b34801561067957600080fd5b506106b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bac565b005b3480156106c657600080fd5b50610725600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d79565b604051808215151515815260200191505060405180910390f35b34801561074b57600080fd5b50610754611ebe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107a257600080fd5b506107ab611ee4565b6040518082815260200191505060405180910390f35b3480156107cd57600080fd5b50610822600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611eea565b6040518082815260200191505060405180910390f35b34801561084457600080fd5b50610879600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f71565b005b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109115780601f106108e657610100808354040283529160200191610911565b820191906000526020600020905b8154815290600101906020018083116108f457829003601f168201915b505050505081565b6000808214806109a557506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156109b057600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60055481565b6000600454905090565b600080610b3e85336114fc565b905082811015610b4c578092505b826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610c16575082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610c225750600083115b15610eca57610c78836000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120ca90919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d0b836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120e390919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ddc83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120ca90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150610ecf565b600091505b509392505050565b600d5481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fc057600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561101c57600080fd5b8060058190555050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110765750600082115b151561108157600080fd5b6110d2826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120ca90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611129826004546120ca90919063ffffffff16565b60048190555061114482600e546120e390919063ffffffff16565b600e81905550600454600e541115151561115d57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff167f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a8342604051808381526020018281526020019250505060405180910390a260019050919050565b60045481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112b657600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114f45780601f106114c9576101008083540402835291602001916114f4565b820191906000526020600020905b8154815290600101906020018083116114d757829003601f168201915b505050505081565b6000806000806000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493508360068190555060009250600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561162a576000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450611919565b426008819055506005544210156116445760009450611919565b62278d0061165d600554426120ca90919063ffffffff16565b81151561166657fe5b04915081600781905550603282111561170057600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250829450611919565b61174b6117298361171b60328861210190919063ffffffff16565b61211c90919063ffffffff16565b61173d60328761210190919063ffffffff16565b6120e390919063ffffffff16565b9050600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561185557600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492506118f9565b6118f66118e7600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866120ca90919063ffffffff16565b826120ca90919063ffffffff16565b92505b61190287611212565b8311156119155761191287611212565b92505b8294505b5050505092915050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156119735750600082115b15611ba1576119c9826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120ca90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a5c826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120e390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3611b5582600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120e390919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019050611ba6565b600090505b92915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c0857600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515611c6457600080fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dd757600080fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e7a57600080fd5b505af1158015611e8e573d6000803e3d6000fd5b505050506040513d6020811015611ea457600080fd5b810190808051906020019092919050505090509392505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fcd57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561202957600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561208657600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111515156120d857fe5b818303905092915050565b60008082840190508381101515156120f757fe5b8091505092915050565b600080828481151561210f57fe5b0490508091505092915050565b60008060008414156121315760009150612150565b828402905082848281151561214257fe5b0414151561214c57fe5b8091505b50929150505600a165627a7a72305820be6cb2d4d48144e13d00ae94660c88756efbe2bebe0ad9f67cc5b0fa3f64ce950029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000000000010466f6f6426476f6f647320546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034647540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000000000010466f6f6426476f6f647320546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034647540000000000000000000000000000000000000000000000000000000000"
}