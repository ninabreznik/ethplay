{
  "address": "0x9488d07660eb7466b0269f043a19d9b5dfc914cc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KALCToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-28\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20 {\n\n    function totalSupply() public constant returns (uint);\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\ncontract BasicToken is ERC20 {\n\n    using SafeMath for uint256;\n\n    uint256  public totalSupply = 10*10**26;\n    uint8 constant public decimals = 18;\n    string constant public name = \"Koala life Coin\";\n    string constant public symbol = \"KALC\";\n\n\tmapping(address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) internal allowed;\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[_from]);\n\t\trequire(_value <= allowed[_from][msg.sender]);\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n\n   function totalSupply() public constant returns (uint256){\n        return totalSupply;\n   }\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t\temit  Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\t\tuint oldValue = allowed[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t}\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n}\n\ncontract Ownable {\n\n\taddress public owner;\n\t\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\tconstructor() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n\n}\n\ncontract Controlled is Ownable{\n\n    constructor() public {\n       setExclude(msg.sender);\n    }\n\n    bool public transferEnabled = false;\n\n    bool public lockFlag=true;\n    mapping(address => bool) locked;\n    mapping(address => bool) exclude;\n\n\tevent AddLock(address indexed _addr);\n\tevent RemoveLock(address indexed _addr);\n\n    function enableTransfer(bool _enable) public onlyOwner{\n        transferEnabled=_enable;\n    }\n\n    function disableLock(bool _enable) public onlyOwner returns (bool success){\n        lockFlag=_enable;\n        return true;\n    }\n\n\t\n    function addLock(address _addr) public onlyOwner returns (bool success){\n        require(_addr!=msg.sender);\n        locked[_addr]=true;\n\t\temit AddLock(_addr);\n        return true;\n    }\n\n    function setExclude(address _addr) public onlyOwner returns (bool success){\n        exclude[_addr]=true;\n        return true;\n    }\n\n    function removeLock(address _addr) public onlyOwner returns (bool success){\n        locked[_addr]=false;\n\t\temit RemoveLock(_addr);\n        return true;\n    }\n\n    modifier transferAllowed(address _addr) {\n        if (!exclude[_addr]) {\n            assert(transferEnabled);\n            if(lockFlag){\n                assert(!locked[_addr]);\n            }\n        }\n        _;\n    }\n\n}\n\ncontract BurnableToken is BasicToken {\n\n\n\tevent Burn(address indexed burner, uint256 value);\n\n\tfunction burn(uint256 _value) public {\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\taddress burner = msg.sender;\n\t\tbalances[burner] = balances[burner].sub(_value);\n\t\ttotalSupply = totalSupply.sub(_value);\n\t\temit Burn(burner, _value);\n\t}\n}\n\n\ncontract ControlledToken is BasicToken, Controlled {\n\n  function transfer(address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public transferAllowed(msg.sender) returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public transferAllowed(msg.sender) returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\ncontract  KALCToken is ControlledToken, BurnableToken {\n\n\n\n\tconstructor() public {\n        balances[msg.sender] = totalSupply;\n        emit Transfer(address(0), msg.sender, totalSupply);\n\t}\n\n\tevent LogRedeem(address beneficiary, uint256 amount);\n\n\tfunction redeem() public {\n\n\t\tuint256 balance = balanceOf(msg.sender);\n\t\tsuper.burn(balance);\n \t\temit LogRedeem(msg.sender, balance);\n\t}\n\n\n}\n\n\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}",
  "bytecode": ""
}