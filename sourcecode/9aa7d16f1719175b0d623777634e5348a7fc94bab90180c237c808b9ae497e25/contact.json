{
  "address": "0x339da9e0cb5a4f44e74cbcfdd394d707e6315545",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZENI",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-11\n*/\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization\n *      control functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the\n     *      sender account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n/**\n * @title ERC223\n * @dev ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n    using SafeMath for uint256;\n\n    // ERC223 and ERC20 functions and events\n    function balanceOf(address who) public view returns (uint256);\n    function totalSupply() public view returns (uint256);\n    function transfer(address to, uint value) public returns (bool);\n    function transfer(address to, uint value, bytes memory data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n\n    // ERC223 functions\n    function name() public view returns (string memory);\n    function symbol() public view returns (string memory);\n    function decimals() public view returns (uint8);\n\n    // ERC20 functions and events\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function allowance(address owner, address spender) public view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * @title ContractReceiver\n * @dev Contract that is working with ERC223 tokens\n */\ncontract ContractReceiver {\n    /**\n    * @dev Standard ERC223 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint _value, bytes memory _data) public;\n}\n\n/**\n * @title ZENI\n * @author ZENI\n * @dev ZENI is an ERC223 Token with ERC20 functions and events\n *      Fully backward compatible with ERC20\n */\ncontract ZENI is ERC223, Ownable {\n    using SafeMath for uint256;\n\n    string private _name = \"ZENI\";\n    string private _symbol = \"ZENI\";\n    uint8 private _decimals = 8;\n    uint256 private _initialSupply = 60e9 * 1e8;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n    uint private _totalSupply;\n\n    bool public mintingFinished = false;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint256) public unlockUnixTime;\n\n    event FrozenFunds(address indexed target, bool frozen);\n    event LockedFunds(address indexed target, uint256 locked);\n    event Burn(address indexed from, uint256 amount);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    /**\n     * @dev Constructor is called only once and can not be called again\n     */\n    constructor() public {\n        _totalSupply = _initialSupply;\n        _balances[msg.sender] = _totalSupply;\n    }\n\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return _balances[_owner];\n    }\n\n    /**\n     * @dev Prevent targets from sending or receiving tokens\n     * @param targets Addresses to be frozen\n     * @param isFrozen either to freeze it or not\n     */\n    function freezeAccounts(address[] memory targets, bool isFrozen) public onlyOwner {\n        require(targets.length > 0);\n\n        for (uint j = 0; j < targets.length; j++) {\n            require(targets[j] != address(0));\n            frozenAccount[targets[j]] = isFrozen;\n            emit FrozenFunds(targets[j], isFrozen);\n        }\n    }\n\n    /**\n     * @dev Prevent targets from sending or receiving tokens by setting Unix times\n     * @param targets Addresses to be locked funds\n     * @param unixTimes Unix times when locking up will be finished\n     */\n    function lockupAccounts(address[] memory targets, uint[] memory unixTimes) public onlyOwner {\n        require(\n            targets.length > 0 &&\n            targets.length == unixTimes.length\n        );\n\n        for(uint i = 0; i < targets.length; i++){\n            require(unlockUnixTime[targets[i]] < unixTimes[i]);\n            unlockUnixTime[targets[i]] = unixTimes[i];\n            emit LockedFunds(targets[i], unixTimes[i]);\n        }\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes memory _data) public returns (bool) {\n        require(\n            _value > 0 &&\n            frozenAccount[msg.sender] == false &&\n            frozenAccount[_to] == false &&\n            now > unlockUnixTime[msg.sender] &&\n            now > unlockUnixTime[_to]\n        );\n\n        if(isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        }\n        else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    /**\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\n     *      Added due to backwards compatibility reasons\n     */\n    function transfer(address _to, uint _value) public returns (bool) {\n        require(\n            _value > 0 &&\n            frozenAccount[msg.sender] == false &&\n            frozenAccount[_to] == false &&\n            now > unlockUnixTime[msg.sender] &&\n            now > unlockUnixTime[_to]\n        );\n\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    // function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes memory _data) private returns (bool) {\n        require(balanceOf(msg.sender) >= _value);\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n        _balances[_to] = _balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes memory _data) private returns (bool) {\n        require(balanceOf(msg.sender) >= _value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     *      Added due to backwards compatibility with ERC20\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(\n            _to != address(0) &&\n            _value > 0 &&\n            _balances[_from] >= _value &&\n            _allowed[_from][msg.sender] >= _value &&\n            frozenAccount[_from] == false &&\n            frozenAccount[_to] == false &&\n            now > unlockUnixTime[_from] &&\n            now > unlockUnixTime[_to]\n        );\n\n        _balances[_from] = _balances[_from].sub(_value);\n        _balances[_to] = _balances[_to].add(_value);\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\n     *      Added due to backwards compatibility with ERC20\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        _allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     *      Added due to backwards compatibility with ERC20\n     * @param _owner address The address which owns the funds\n     * @param _spender address The address which will spend the funds\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return _allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _from The address that will burn the tokens.\n     * @param _unitAmount The amount of token to be burned.\n     */\n    function burn(address _from, uint256 _unitAmount) public onlyOwner {\n        require(\n            _unitAmount > 0 &&\n            balanceOf(_from) >= _unitAmount\n        );\n\n        _balances[_from] = _balances[_from].sub(_unitAmount);\n        _totalSupply = _totalSupply.sub(_unitAmount);\n        emit Burn(_from, _unitAmount);\n    }\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _unitAmount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _unitAmount) public onlyOwner canMint returns (bool) {\n        require(_unitAmount > 0);\n\n        _totalSupply = _totalSupply.add(_unitAmount);\n        _balances[_to] = _balances[_to].add(_unitAmount);\n        emit Mint(_to, _unitAmount);\n        emit Transfer(address(0), _to, _unitAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() public onlyOwner canMint returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n    /**\n     * @dev Function to distribute tokens to the list of addresses by the provided amount\n     */\n    function distributeAirdrop(address[] memory addresses, uint256 amount) public returns (bool) {\n        require(\n            amount > 0 &&\n            addresses.length > 0 &&\n            frozenAccount[msg.sender] == false &&\n            now > unlockUnixTime[msg.sender]\n        );\n\n        uint256 mulAmount = amount.mul(1e8);\n        uint256 totalAmount = mulAmount.mul(addresses.length);\n        require(_balances[msg.sender] >= totalAmount);\n\n        for (uint i = 0; i < addresses.length; i++) {\n            require(\n                addresses[i] != address(0) &&\n                frozenAccount[addresses[i]] == false &&\n                now > unlockUnixTime[addresses[i]]\n            );\n\n            _balances[addresses[i]] = _balances[addresses[i]].add(mulAmount);\n            emit Transfer(msg.sender, addresses[i], mulAmount);\n        }\n        _balances[msg.sender] = _balances[msg.sender].sub(totalAmount);\n        return true;\n    }\n\n    function distributeAirdrop(address[] memory addresses, uint[] memory amounts) public returns (bool) {\n        require(\n            addresses.length > 0 &&\n            addresses.length == amounts.length &&\n            frozenAccount[msg.sender] == false &&\n            now > unlockUnixTime[msg.sender]\n        );\n\n        uint256 totalAmount = 0;\n\n        for(uint i = 0; i < addresses.length; i++){\n            require(\n                amounts[i] > 0 &&\n                addresses[i] != address(0) &&\n                frozenAccount[addresses[i]] == false &&\n                now > unlockUnixTime[addresses[i]]\n            );\n\n            amounts[i] = amounts[i].mul(1e8);\n            totalAmount = totalAmount.add(amounts[i]);\n        }\n        require(_balances[msg.sender] >= totalAmount);\n\n        for (uint j = 0; j < addresses.length; j++) {\n            _balances[addresses[j]] = _balances[addresses[j]].add(amounts[j]);\n            emit Transfer(msg.sender, addresses[j], amounts[j]);\n        }\n        _balances[msg.sender] = _balances[msg.sender].sub(totalAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to collect tokens from the list of addresses\n     */\n    function collectTokens(address[] memory addresses, uint[] memory amounts) public onlyOwner returns (bool) {\n        require(\n            addresses.length > 0 &&\n            addresses.length == amounts.length\n        );\n\n        uint256 totalAmount = 0;\n\n        for (uint i = 0; i < addresses.length; i++) {\n            require(\n                amounts[i] > 0 &&\n                addresses[i] != address(0) &&\n                frozenAccount[addresses[i]] == false &&\n                now > unlockUnixTime[addresses[i]]\n            );\n\n            amounts[i] = amounts[i].mul(1e8);\n            require(_balances[addresses[i]] >= amounts[i]);\n            _balances[addresses[i]] = _balances[addresses[i]].sub(amounts[i]);\n            totalAmount = totalAmount.add(amounts[i]);\n            emit Transfer(addresses[i], msg.sender, amounts[i]);\n        }\n        _balances[msg.sender] = _balances[msg.sender].add(totalAmount);\n        return true;\n    }\n\n    /**\n     * @dev fallback function\n     */\n    function() external {\n        revert();\n    }\n\n    /**\n     * @dev Reject all ERC223 compatible tokens\n     * @param from_ address The address that is transferring the tokens\n     * @param value_ uint256 the amount of the specified token\n     * @param data_ Bytes The data passed from the caller.\n     */\n    function tokenFallback(address from_, uint256 value_, bytes memory data_) public pure {\n        from_;\n        value_;\n        data_;\n        revert();\n    }\n}",
  "bytecode": "60806040526040805190810160405280600481526020017f5a454e4900000000000000000000000000000000000000000000000000000000815250600190805190602001906200005192919062000186565b506040805190810160405280600481526020017f5a454e4900000000000000000000000000000000000000000000000000000000815250600290805190602001906200009f92919062000186565b506008600360006101000a81548160ff021916908360ff1602179055506753444835ec5800006004556000600860006101000a81548160ff021916908315150217905550348015620000f057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600454600781905550600754600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000235565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c957805160ff1916838001178555620001fa565b82800160010185558215620001fa579182015b82811115620001f9578251825591602001919060010190620001dc565b5b5090506200020991906200020d565b5090565b6200023291905b808211156200022e57600081600090555060010162000214565b5090565b90565b6137f380620002456000396000f3fe608060405234801561001057600080fd5b5060043610610175576000357c01000000000000000000000000000000000000000000000000000000009004806395d89b41116100e0578063c341b9f611610099578063c341b9f614610a12578063cbbe974b14610ad6578063dd62ed3e14610b2e578063dd92459414610ba6578063f0dc417114610d0a578063f2fde38b14610e6e57610175565b806395d89b411461069d5780639dc29fac14610720578063a9059cbb1461076e578063b414d4b6146107d4578063be45fd6214610830578063c0ee0b8a1461092d57610175565b806340c10f191161013257806340c10f191461034d57806364ddc605146103b357806370a08231146104ff5780637d64bcb4146105575780638da5cb5b1461057957806394594625146105c357610175565b806305d2035b1461017a57806306fdde031461019c578063095ea7b31461021f57806318160ddd1461028557806323b872dd146102a3578063313ce56714610329575b600080fd5b610182610eb2565b604051808215151515815260200191505060405180910390f35b6101a4610ec5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61026b6004803603604081101561023557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f67565b604051808215151515815260200191505060405180910390f35b61028d611059565b6040518082815260200191505060405180910390f35b61030f600480360360608110156102b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611063565b604051808215151515815260200191505060405180910390f35b610331611574565b604051808260ff1660ff16815260200191505060405180910390f35b6103996004803603604081101561036357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061158b565b604051808215151515815260200191505060405180910390f35b6104fd600480360360408110156103c957600080fd5b81019080803590602001906401000000008111156103e657600080fd5b8201836020820111156103f857600080fd5b8035906020019184602083028401116401000000008311171561041a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561047a57600080fd5b82018360208201111561048c57600080fd5b803590602001918460208302840111640100000000831117156104ae57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611781565b005b6105416004803603602081101561051557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611983565b6040518082815260200191505060405180910390f35b61055f6119cc565b604051808215151515815260200191505060405180910390f35b610581611a93565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610683600480360360408110156105d957600080fd5b81019080803590602001906401000000008111156105f657600080fd5b82018360208201111561060857600080fd5b8035906020019184602083028401116401000000008311171561062a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611ab8565b604051808215151515815260200191505060405180910390f35b6106a5611f20565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106e55780820151818401526020810190506106ca565b50505050905090810190601f1680156107125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61076c6004803603604081101561073657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fc2565b005b6107ba6004803603604081101561078457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612142565b604051808215151515815260200191505060405180910390f35b610816600480360360208110156107ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122d6565b604051808215151515815260200191505060405180910390f35b6109136004803603606081101561084657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561088d57600080fd5b82018360208201111561089f57600080fd5b803590602001918460018302840111640100000000831117156108c157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506122f6565b604051808215151515815260200191505060405180910390f35b610a106004803603606081101561094357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561098a57600080fd5b82018360208201111561099c57600080fd5b803590602001918460018302840111640100000000831117156109be57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612487565b005b610ad460048036036040811015610a2857600080fd5b8101908080359060200190640100000000811115610a4557600080fd5b820183602082011115610a5757600080fd5b80359060200191846020830284011164010000000083111715610a7957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080351515906020019092919050505061248c565b005b610b1860048036036020811015610aec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612642565b6040518082815260200191505060405180910390f35b610b9060048036036040811015610b4457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061265a565b6040518082815260200191505060405180910390f35b610cf060048036036040811015610bbc57600080fd5b8101908080359060200190640100000000811115610bd957600080fd5b820183602082011115610beb57600080fd5b80359060200191846020830284011164010000000083111715610c0d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610c6d57600080fd5b820183602082011115610c7f57600080fd5b80359060200191846020830284011164010000000083111715610ca157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506126e1565b604051808215151515815260200191505060405180910390f35b610e5460048036036040811015610d2057600080fd5b8101908080359060200190640100000000811115610d3d57600080fd5b820183602082011115610d4f57600080fd5b80359060200191846020830284011164010000000083111715610d7157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610dd157600080fd5b820183602082011115610de357600080fd5b80359060200191846020830284011164010000000083111715610e0557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612bff565b604051808215151515815260200191505060405180910390f35b610eb060048036036020811015610e8457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130e4565b005b600860009054906101000a900460ff1681565b606060018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f5d5780601f10610f3257610100808354040283529160200191610f5d565b820191906000526020600020905b815481529060010190602001808311610f4057829003601f168201915b5050505050905090565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600754905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156110a15750600082115b80156110ec575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015611174575081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156111d0575060001515600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b801561122c575060001515600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156112765750600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b80156112c05750600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b15156112cb57600080fd5b61131d82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323990919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113b282600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325b90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061148482600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323990919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600360009054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115e857600080fd5b600860009054906101000a900460ff1615151561160457600080fd5b60008211151561161357600080fd5b6116288260075461325b90919063ffffffff16565b60078190555061168082600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325b90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117dc57600080fd5b600082511180156117ee575080518251145b15156117f957600080fd5b60008090505b825181101561197e57818181518110151561181657fe5b90602001906020020151600a6000858481518110151561183257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561188357600080fd5b818181518110151561189157fe5b90602001906020020151600a600085848151811015156118ad57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550828181518110151561190357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f1bd6fb9fa2c39ce5d0d2afa1eaba998963eb5f553fd862c94f131aa9e35c1577838381518110151561195257fe5b906020019060200201516040518082815260200191505060405180910390a280806001019150506117ff565b505050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a2957600080fd5b600860009054906101000a900460ff16151515611a4557600080fd5b6001600860006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082118015611aca575060008351115b8015611b26575060001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015611b705750600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b1515611b7b57600080fd5b6000611b946305f5e1008461327c90919063ffffffff16565b90506000611bac85518361327c90919063ffffffff16565b905080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611bfc57600080fd5b60008090505b8551811015611e7e57600073ffffffffffffffffffffffffffffffffffffffff168682815181101515611c3157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614158015611cc6575060001515600960008884815181101515611c7057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015611d275750600a60008783815181101515611cdf57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b1515611d3257600080fd5b611d9b83600560008985815181101515611d4857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325b90919063ffffffff16565b600560008884815181101515611dad57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581815181101515611e0357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a38080600101915050611c02565b50611ed181600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323990919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019250505092915050565b606060028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fb85780601f10611f8d57610100808354040283529160200191611fb8565b820191906000526020600020905b815481529060010190602001808311611f9b57829003601f168201915b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561201d57600080fd5b60008111801561203557508061203283611983565b10155b151561204057600080fd5b61209281600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323990919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120ea8160075461323990919063ffffffff16565b6007819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b600080821180156121a3575060001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156121ff575060001515600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156122495750600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b80156122935750600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b151561229e57600080fd5b60606122a9846132ba565b156122c1576122b98484836132cd565b9150506122d0565b6122cc84848361354c565b9150505b92915050565b60096020528060005260406000206000915054906101000a900460ff1681565b60008083118015612357575060001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156123b3575060001515600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156123fd5750600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b80156124475750600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b151561245257600080fd5b61245b846132ba565b156124725761246b8484846132cd565b9050612480565b61247d84848461354c565b90505b9392505050565b600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124e757600080fd5b600082511115156124f757600080fd5b60008090505b825181101561263d57600073ffffffffffffffffffffffffffffffffffffffff16838281518110151561252c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415151561255957600080fd5b8160096000858481518110151561256c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082818151811015156125d557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a583604051808215151515815260200191505060405180910390a280806001019150506124fd565b505050565b600a6020528060005260406000206000915090505481565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008083511180156126f4575081518351145b8015612750575060001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b801561279a5750600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b15156127a557600080fd5b600080905060008090505b845181101561298657600084828151811015156127c957fe5b906020019060200201511180156128245750600073ffffffffffffffffffffffffffffffffffffffff16858281518110151561280157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614155b801561289757506000151560096000878481518110151561284157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156128f85750600a600086838151811015156128b057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b151561290357600080fd5b6129316305f5e100858381518110151561291957fe5b9060200190602002015161327c90919063ffffffff16565b848281518110151561293f57fe5b9060200190602002018181525050612977848281518110151561295e57fe5b906020019060200201518361325b90919063ffffffff16565b915080806001019150506127b0565b5080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156129d557600080fd5b60008090505b8451811015612b5e57612a6484828151811015156129f557fe5b90602001906020020151600560008885815181101515612a1157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325b90919063ffffffff16565b600560008784815181101515612a7657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508481815181101515612acc57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8684815181101515612b3257fe5b906020019060200201516040518082815260200191505060405180910390a380806001019150506129db565b50612bb181600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323990919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c5c57600080fd5b60008351118015612c6e575081518351145b1515612c7957600080fd5b600080905060008090505b84518110156130435760008482815181101515612c9d57fe5b90602001906020020151118015612cf85750600073ffffffffffffffffffffffffffffffffffffffff168582815181101515612cd557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614155b8015612d6b575060001515600960008784815181101515612d1557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015612dcc5750600a60008683815181101515612d8457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b1515612dd757600080fd5b612e056305f5e1008583815181101515612ded57fe5b9060200190602002015161327c90919063ffffffff16565b8482815181101515612e1357fe5b90602001906020020181815250508381815181101515612e2f57fe5b90602001906020020151600560008784815181101515612e4b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612e9d57600080fd5b612f1d8482815181101515612eae57fe5b90602001906020020151600560008885815181101515612eca57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323990919063ffffffff16565b600560008784815181101515612f2f57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612fa18482815181101515612f8857fe5b906020019060200201518361325b90919063ffffffff16565b91503373ffffffffffffffffffffffffffffffffffffffff168582815181101515612fc857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef868481518110151561301757fe5b906020019060200201516040518082815260200191505060405180910390a38080600101915050612c84565b5061309681600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325b90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561313f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561317b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561324a57600080fd5b600082840390508091505092915050565b600080828401905083811015151561327257600080fd5b8091505092915050565b60008083141561328f57600090506132b4565b600082840290508284828115156132a257fe5b041415156132af57600080fd5b809150505b92915050565b600080823b905060008111915050919050565b6000826132d933611983565b101515156132e657600080fd5b60008490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156133ad578082015181840152602081019050613392565b50505050905090810190601f1680156133da5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156133fb57600080fd5b505af115801561340f573d6000803e3d6000fd5b50505050826040518082805190602001908083835b6020831015156134495780518252602082019150602081019050602083039250613424565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a48473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019150509392505050565b60008261355833611983565b1015151561356557600080fd5b6135b783600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323990919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061364c83600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325b90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816040518082805190602001908083835b6020831015156136c557805182526020820191506020810190506020830392506136a0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a48373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019050939250505056fea165627a7a723058202a8d3a96f546097ac2414643c2cc281cfd05555ebff16a74eb5240da457e3e0a0029"
}