{
  "address": "0x794e75431945d3d0c19281afbf2d595a2080b5a3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-29\n*/\n\npragma solidity ^0.4.24;\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ncontract MyToken is owned {\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(address target, bool freeze) public onlyOwner {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        address centralMinter\n        ) public {\n        if (centralMinter != 0) owner = centralMinter;      // 设置所有者\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);                // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` from your account\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require (_value < allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    /// @param _extraData some extra information to send to the approved contract\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /// @notice Remove `_value` tokens from the system irreversibly\n    /// @param _value the amount of money to burn\n    function burn(uint256 _value) public returns (bool success) {\n        require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n        totalSupply -= _value;                                // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051610ba7380380610ba783398101604090815281516020830151918301516060840151608085015160008054600160a060020a031916331790559294938401939192910190600160a060020a038116156100835760008054600160a060020a031916600160a060020a0383161790555b336000908152600560209081526040909120869055600486905584516100af91600191908701906100e3565b5081516100c39060029060208501906100e3565b50506003805460ff191660ff93909316929092179091555061017e915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012457805160ff1916838001178555610151565b82800160010185558215610151579182015b82811115610151578251825591602001919060010190610136565b5061015d929150610161565b5090565b61017b91905b8082111561015d5760008155600101610167565b90565b610a1a8061018d6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101ac57806323b872dd146101d3578063313ce567146101fd57806342966c681461022857806370a082311461024057806379cc6790146102615780638da5cb5b1461028557806395d89b41146102b6578063a9059cbb146102cb578063b414d4b6146102f1578063cae9ca5114610312578063dd62ed3e1461037b578063e724529c146103a2578063f2fde38b146103c8575b600080fd5b3480156100f657600080fd5b506100ff6103e9565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a0360043516602435610476565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c16104a3565b60408051918252519081900360200190f35b3480156101df57600080fd5b50610198600160a060020a03600435811690602435166044356104a9565b34801561020957600080fd5b50610212610517565b6040805160ff9092168252519081900360200190f35b34801561023457600080fd5b50610198600435610520565b34801561024c57600080fd5b506101c1600160a060020a0360043516610597565b34801561026d57600080fd5b50610198600160a060020a03600435166024356105a9565b34801561029157600080fd5b5061029a61067a565b60408051600160a060020a039092168252519081900360200190f35b3480156102c257600080fd5b506100ff610689565b3480156102d757600080fd5b506102ef600160a060020a03600435166024356106e1565b005b3480156102fd57600080fd5b50610198600160a060020a03600435166106f0565b34801561031e57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610198948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107059650505050505050565b34801561038757600080fd5b506101c1600160a060020a036004358116906024351661081e565b3480156103ae57600080fd5b506102ef600160a060020a0360043516602435151561083b565b3480156103d457600080fd5b506102ef600160a060020a03600435166108b6565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561046e5780601f106104435761010080835404028352916020019161046e565b820191906000526020600020905b81548152906001019060200180831161045157829003601f168201915b505050505081565b336000908152600660209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b600160a060020a038316600090815260066020908152604080832033845290915281205482106104d857600080fd5b600160a060020a038416600090815260066020908152604080832033845290915290208054839003905561050d8484846108fc565b5060019392505050565b60035460ff1681565b33600090815260056020526040812054821061053b57600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60056020526000908152604090205481565b600160a060020a0382166000908152600560205260408120548211156105ce57600080fd5b600160a060020a03831660009081526006602090815260408083203384529091529020548211156105fe57600080fd5b600160a060020a0383166000818152600560209081526040808320805487900390556006825280832033845282529182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561046e5780601f106104435761010080835404028352916020019161046e565b6106ec3383836108fc565b5050565b60076020526000908152604090205460ff1681565b6000836107128185610476565b15610816576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156107aa578181015183820152602001610792565b50505050905090810190601f1680156107d75780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156107f957600080fd5b505af115801561080d573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b600054600160a060020a0316331461085257600080fd5b600160a060020a038216600081815260076020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a031633146108cd57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216151561091157600080fd5b600160a060020a03831660009081526005602052604090205481111561093657600080fd5b600160a060020a0382166000908152600560205260409020548181011161095c57600080fd5b600160a060020a03831660009081526007602052604090205460ff161561098257600080fd5b600160a060020a03808416600081815260056020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050505600a165627a7a72305820700a69e8555a1584cc7c7a7e84970db70b08f3aba0b2c48b2deaaaa0dc5697e3002900000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000a24119451a66e1bfd7b2bdbd1a7991d9e616d3ae0000000000000000000000000000000000000000000000000000000000000003564258000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035642580000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000a24119451a66e1bfd7b2bdbd1a7991d9e616d3ae0000000000000000000000000000000000000000000000000000000000000003564258000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035642580000000000000000000000000000000000000000000000000000000000"
}