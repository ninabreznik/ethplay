{
  "address": "0xdbe5c9e19878fc49c08f2d90c9f22d0f1e601264",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WhooseWallet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.4.24;\n\nlibrary KeyHolderLibrary {\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    struct Key {\n        uint256[] purposes; //e.g., MANAGEMENT_KEY = 1, ACTION_KEY = 2, etc.\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\n        bytes32 key;\n    }\n\n    struct KeyHolderData {\n        uint256 executionNonce;\n        mapping (bytes32 => Key) keys;\n        mapping (uint256 => bytes32[]) keysByPurpose;\n        mapping (uint256 => Execution) executions;\n    }\n\n    struct Execution {\n        address to;\n        uint256 value;\n        bytes data;\n        bool approved;\n        bool executed;\n    }\n\n    function init(KeyHolderData storage _keyHolderData)\n        public\n    {\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n        _keyHolderData.keys[_key].key = _key;\n        _keyHolderData.keys[_key].purposes.push(1);\n        _keyHolderData.keys[_key].keyType = 1;\n        _keyHolderData.keysByPurpose[1].push(_key);\n        emit KeyAdded(_key, 1, 1);\n    }\n\n    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n    {\n        return (\n            _keyHolderData.keys[_key].purposes,\n            _keyHolderData.keys[_key].keyType,\n            _keyHolderData.keys[_key].key\n        );\n    }\n\n    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes)\n    {\n        return (_keyHolderData.keys[_key].purposes);\n    }\n\n    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n        public\n        view\n        returns(bytes32[] _keys)\n    {\n        return _keyHolderData.keysByPurpose[_purpose];\n    }\n\n    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        _keyHolderData.keys[_key].key = _key;\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n        _keyHolderData.keys[_key].keyType = _type;\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n        emit KeyAdded(_key, _purpose, _type);\n\n        return true;\n    }\n\n    function addKeys(KeyHolderData storage _keyHolderData, bytes32[] _keys, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        for (uint16 i = 0; i < _keys.length; i++) {\n            addKey(\n                _keyHolderData,\n                _keys[i],\n                _purpose,\n                _type\n            );\n        }\n\n        return true;\n    }\n\n    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n        public\n        returns (bool success)\n    {\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n        emit Approved(_id, _approve);\n\n        if (_approve == true) {\n            _keyHolderData.executions[_id].approved = true;\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n            if (success) {\n                _keyHolderData.executions[_id].executed = true;\n                emit Executed(\n                    _id,\n                    _keyHolderData.executions[_id].to,\n                    _keyHolderData.executions[_id].value,\n                    _keyHolderData.executions[_id].data\n                );\n                return;\n            } else {\n                emit ExecutionFailed(\n                    _id,\n                    _keyHolderData.executions[_id].to,\n                    _keyHolderData.executions[_id].value,\n                    _keyHolderData.executions[_id].data\n                );\n                return;\n            }\n        } else {\n            _keyHolderData.executions[_id].approved = false;\n        }\n        return true;\n    }\n\n    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n        public\n        returns (uint256 executionId)\n    {\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n        }\n\n        _keyHolderData.executionNonce++;\n        return _keyHolderData.executionNonce-1;\n    }\n\n    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        returns (bool success)\n    {\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n        // Remove purpose from key\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n        for (uint i = 0; i < purposes.length; i++) {\n            if (purposes[i] == _purpose) {\n                purposes[i] = purposes[purposes.length - 1];\n                delete purposes[purposes.length - 1];\n                purposes.length--;\n                break;\n            }\n        }\n\n        // If no more purposes, delete key\n        if (purposes.length == 0) {\n            delete _keyHolderData.keys[_key];\n        }\n\n        // Remove key from keysByPurpose\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n        for (uint j = 0; j < keys.length; j++) {\n            if (keys[j] == _key) {\n                keys[j] = keys[keys.length - 1];\n                delete keys[keys.length - 1];\n                keys.length--;\n                break;\n            }\n        }\n\n        return true;\n    }\n\n    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        view\n        returns(bool result)\n    {\n        bool isThere;\n        if (_keyHolderData.keys[_key].key == 0) {\n            return false;\n        }\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n        for (uint i = 0; i < purposes.length; i++) {\n            if (purposes[i] <= _purpose) {\n                isThere = true;\n                break;\n            }\n        }\n        return isThere;\n    }\n}\n\n\nlibrary ClaimHolderLibrary {\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer; // msg.sender\n        bytes signature; // this.address + topic + data\n        bytes data;\n        string uri;\n    }\n\n    struct Claims {\n        mapping (bytes32 => Claim) byId;\n        mapping (uint256 => bytes32[]) byTopic;\n    }\n\n    function addClaim(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256 _topic,\n        uint256 _scheme,\n        address _issuer,\n        bytes _signature,\n        bytes _data,\n        string _uri\n    )\n        public\n        returns (bytes32 claimRequestId)\n    {\n        if (msg.sender != address(this)) {\n            bytes32 sender = keccak256(abi.encodePacked(msg.sender));\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, sender, 1) ||\n                    KeyHolderLibrary.keyHasPurpose(_keyHolderData, sender, 3), \"Sender does not have claim signer key\");\n        }\n\n        bytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\n\n        if (_claims.byId[claimId].issuer != _issuer) {\n            _claims.byTopic[_topic].push(claimId);\n        }\n\n        _claims.byId[claimId].topic = _topic;\n        _claims.byId[claimId].scheme = _scheme;\n        _claims.byId[claimId].issuer = _issuer;\n        _claims.byId[claimId].signature = _signature;\n        _claims.byId[claimId].data = _data;\n        _claims.byId[claimId].uri = _uri;\n\n        emit ClaimAdded(\n            claimId,\n            _topic,\n            _scheme,\n            _issuer,\n            _signature,\n            _data,\n            _uri\n        );\n\n        return claimId;\n    }\n\n    function addClaims(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256[] _topic,\n        address[] _issuer,\n        bytes _signature,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        uint offset = 0;\n        for (uint16 i = 0; i < _topic.length; i++) {\n            addClaim(\n                _keyHolderData,\n                _claims,\n                _topic[i],\n                1,\n                _issuer[i],\n                getBytes(_signature, (i * 65), 65),\n                getBytes(_data, offset, _offsets[i]),\n                \"\"\n            );\n            offset += _offsets[i];\n        }\n    }\n\n    function removeClaim(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        bytes32 _claimId\n    )\n        public\n        returns (bool success)\n    {\n        if (msg.sender != address(this)) {\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n        }\n\n        emit ClaimRemoved(\n            _claimId,\n            _claims.byId[_claimId].topic,\n            _claims.byId[_claimId].scheme,\n            _claims.byId[_claimId].issuer,\n            _claims.byId[_claimId].signature,\n            _claims.byId[_claimId].data,\n            _claims.byId[_claimId].uri\n        );\n\n        delete _claims.byId[_claimId];\n        return true;\n    }\n\n    function getClaim(Claims storage _claims, bytes32 _claimId)\n        public\n        view\n        returns(\n          uint256 topic,\n          uint256 scheme,\n          address issuer,\n          bytes signature,\n          bytes data,\n          string uri\n        )\n    {\n        return (\n            _claims.byId[_claimId].topic,\n            _claims.byId[_claimId].scheme,\n            _claims.byId[_claimId].issuer,\n            _claims.byId[_claimId].signature,\n            _claims.byId[_claimId].data,\n            _claims.byId[_claimId].uri\n        );\n    }\n\n    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n        internal\n        pure\n        returns (bytes)\n    {\n        bytes memory sig = new bytes(_length);\n        uint256 j = 0;\n        for (uint256 k = _offset; k < _offset + _length; k++) {\n            sig[j] = _str[k];\n            j++;\n        }\n        return sig;\n    }\n}\n\n\ncontract ERC725 {\n    uint256 constant MANAGEMENT_KEY = 1;\n    uint256 constant ACTION_KEY = 2;\n    uint256 constant CLAIM_SIGNER_KEY = 3;\n    uint256 constant ENCRYPTION_KEY = 4;\n\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n    function approve(uint256 _id, bool _approve) public returns (bool success);\n}\n\n\ncontract ERC735 {\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer; // msg.sender\n        bytes signature; // this.address + topic + data\n        bytes data;\n        string uri;\n    }\n\n    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n    function removeClaim(bytes32 _claimId) public returns (bool success);\n}\n\n\ncontract KeyHolder is ERC725 {\n    KeyHolderLibrary.KeyHolderData keyHolderData;\n\n    constructor() public {\n        KeyHolderLibrary.init(keyHolderData);\n    }\n\n    function getKey(bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n    {\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n    }\n\n    function getKeyPurposes(bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes)\n    {\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n    }\n\n    function getKeysByPurpose(uint256 _purpose)\n        public\n        view\n        returns(bytes32[] _keys)\n    {\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n    }\n\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n    }\n\n    function addKeys(bytes32[] _keys, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.addKeys(keyHolderData, _keys, _purpose, _type);\n    }\n\n    function approve(uint256 _id, bool _approve)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n    }\n\n    function execute(address _to, uint256 _value, bytes _data)\n        public\n        returns (uint256 executionId)\n    {\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n    }\n\n    function removeKey(bytes32 _key, uint256 _purpose)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n    }\n\n    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n        public\n        view\n        returns(bool exists)\n    {\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n    }\n}\n\n\ncontract ClaimHolder is KeyHolder, ERC735 {\n    ClaimHolderLibrary.Claims claims;\n\n    function addClaim(\n        uint256 _topic,\n        uint256 _scheme,\n        address _issuer,\n        bytes _signature,\n        bytes _data,\n        string _uri\n    )\n        public\n        returns (bytes32 claimRequestId)\n    {\n        return ClaimHolderLibrary.addClaim(\n            keyHolderData,\n            claims,\n            _topic,\n            _scheme,\n            _issuer,\n            _signature,\n            _data,\n            _uri\n        );\n    }\n\n    function addClaims(\n        uint256[] _topic,\n        address[] _issuer,\n        bytes _signature,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        ClaimHolderLibrary.addClaims(\n            keyHolderData,\n            claims,\n            _topic,\n            _issuer,\n            _signature,\n            _data,\n            _offsets\n        );\n    }\n\n    function removeClaim(bytes32 _claimId) public returns (bool success) {\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\n    }\n\n    function getClaim(bytes32 _claimId)\n        public\n        view\n        returns(\n            uint256 topic,\n            uint256 scheme,\n            address issuer,\n            bytes signature,\n            bytes data,\n            string uri\n        )\n    {\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\n    }\n\n    function getClaimIdsByTopic(uint256 _topic)\n        public\n        view\n        returns(bytes32[] claimIds)\n    {\n        return claims.byTopic[_topic];\n    }\n}\n\n\ncontract managed {\n    address public admin;\n\n    constructor() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin {\n        require(msg.sender == admin);\n        _;\n    }\n\n    function transferOwnership(address newAdmin) onlyAdmin public {\n        admin = newAdmin;\n    }\n}\n\n\ncontract WhooseWalletAdmin is managed {\n    mapping(address => address) contracts;\n\n    function addContract(address addr) public returns(bool success) {\n        contracts[addr] = addr;\n        return true;\n    }\n    \n    function removeContract(address addr) public onlyAdmin returns(bool success) {\n        delete contracts[addr];\n        return true;\n    }\n    \n    function getContract(address addr) public view onlyAdmin returns(address addr_res) {\n        return contracts[addr];\n    }\n    \n    // ERC725\n    function getKey(address _walletAddress, bytes32 _key)\n        public view onlyAdmin returns(uint256[] purposes, uint256 keyType, bytes32 key) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.getKey(_key);\n    }\n    \n    function keyHasPurpose(address _walletAddress, bytes32 _key, uint256 _purpose)\n        public view onlyAdmin returns (bool exists) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.keyHasPurpose(_key, _purpose);\n    }\n    \n    function getKeysByPurpose(address _walletAddress, uint256 _purpose)\n        public view onlyAdmin returns(bytes32[] keys) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.getKeysByPurpose(_purpose);\n    }\n    \n    function addKey(address _walletAddress, bytes32 _key, uint256 _purpose, uint256 _keyType)\n        public onlyAdmin returns (bool success) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.addKey(_key, _purpose, _keyType);\n    }\n    \n    function addKeys(address _walletAddress, bytes32[] _keys, uint256 _purpose, uint256 _keyType)\n        public onlyAdmin returns (bool success) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.addKeys(_keys, _purpose, _keyType);\n    }\n    \n    function removeKey(address _walletAddress, bytes32 _key, uint256 _purpose)\n        public onlyAdmin returns (bool success) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.removeKey(_key, _purpose);\n    }\n    \n    function execute(address _walletAddress, address _to, uint256 _value, bytes _data)\n        public onlyAdmin returns (uint256 executionId) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.execute(_to, _value, _data);\n    }\n    \n    function approve(address _walletAddress, uint256 _id, bool _approve)\n        public onlyAdmin returns (bool success) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.approve(_id, _approve);\n    }\n    \n    // ERC735\n    function getClaim(address _walletAddress, bytes32 _claimId)\n        public onlyAdmin view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.getClaim(_claimId);\n    }\n    \n    function getClaimIdsByTopic(address _walletAddress, uint256 _topic)\n        public onlyAdmin view returns(bytes32[] claimIds) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.getClaimIdsByTopic(_topic);\n    }\n    \n    function addClaim(address _walletAddress, uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri)\n        public onlyAdmin returns (bytes32 claimRequestId) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.addClaim(_topic, _scheme, issuer, _signature, _data, _uri);\n    }\n    \n    function removeClaim(address _walletAddress, bytes32 _claimId)\n        public onlyAdmin returns (bool success) {\n        WhooseWallet _wallet = WhooseWallet(_walletAddress);\n        return _wallet.removeClaim(_claimId);\n    }\n}\n\n\ncontract WhooseWallet is ClaimHolder {\n    constructor() public {\n        address _addr = 0xFA0ed4CF54b7644CD4e9c19Af3809ec35AED9AD9;\n        bytes32 _admin = keccak256(abi.encodePacked(_addr));\n        addKey(_admin, 1, 1);\n        \n        WhooseWalletAdmin _walletAdmin = WhooseWalletAdmin(_addr);\n        _walletAdmin.addContract(address(this));\n    }\n}",
  "bytecode": ""
}