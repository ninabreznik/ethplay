{
  "address": "0xbdeD2fE371eB95Dc6b7f8f39326eB0369eB117fC",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ExampleTokenFactory",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/utils/Utils.sol\n\n/**\n * @title Utilities Contract\n * @author Validity Labs AG <[emailÂ protected]>\n */\n \npragma solidity ^0.5.7;\n\n\ncontract Utils {\n    /** MODIFIERS **/\n    /**\n     * @notice Check if the address is not zero\n     */\n    modifier onlyValidAddress(address _address) {\n        require(_address != address(0), \"Invalid address\");\n        _;\n    }\n\n    /**\n     * @notice Check if the address is not the sender's address\n    */\n    modifier isSenderNot(address _address) {\n        require(_address != msg.sender, \"Address is the same as the sender\");\n        _;\n    }\n\n    /**\n     * @notice Check if the address is the sender's address\n    */\n    modifier isSender(address _address) {\n        require(_address == msg.sender, \"Address is different from the sender\");\n        _;\n    }\n\n    /**\n     * @notice Controle if a boolean attribute (false by default) was updated to true.\n     * @dev This attribute is designed specifically for recording an action.\n     * @param criterion The boolean attribute that records if an action has taken place\n     */\n    modifier onlyOnce(bool criterion) {\n        require(criterion == false, \"Already been set\");\n        _;\n        criterion = true;\n    }\n}\n\n// File: contracts/utils/Managed.sol\n\npragma solidity ^0.5.7;\n\n\n\n\ncontract Managed is Utils, Ownable {\n    // managers can be set and altered by owner, multiple manager accounts are possible\n    mapping(address => bool) public isManager;\n    \n    /** EVENTS **/\n    event ChangedManager(address indexed manager, bool active);\n\n    /*** MODIFIERS ***/\n    modifier onlyManager() {\n        require(isManager[msg.sender], \"not manager\");\n        _;\n    }\n    \n    /**\n     * @dev Set / alter manager / whitelister \"account\". This can be done from owner only\n     * @param manager address address of the manager to create/alter\n     * @param active bool flag that shows if the manager account is active\n     */\n    function setManager(address manager, bool active) public onlyOwner onlyValidAddress(manager) {\n        isManager[manager] = active;\n        emit ChangedManager(manager, active);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.2;\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.2;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.2;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        require(address(token).isContract());\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success);\n\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n}\n\n// File: contracts/utils/Reclaimable.sol\n\n/**\n * @title Reclaimable\n * @dev This contract gives owner right to recover any ERC20 tokens accidentally sent to \n * the token contract. The recovered token will be sent to the owner of token. \n * @author Validity Labs AG <[emailÂ protected]>\n */\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\npragma solidity ^0.5.7;\n\n\n\n\n\ncontract Reclaimable is Ownable {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Let the owner to retrieve other tokens accidentally sent to this contract.\n     * @dev This function is suitable when no token of any kind shall be stored under\n     * the address of the inherited contract.\n     * @param tokenToBeRecovered address of the token to be recovered.\n     */\n    function reclaimToken(IERC20 tokenToBeRecovered) external onlyOwner {\n        uint256 balance = tokenToBeRecovered.balanceOf(address(this));\n        tokenToBeRecovered.safeTransfer(msg.sender, balance);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title WhitelistAdminRole\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n */\ncontract WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(msg.sender);\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(msg.sender));\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title WhitelistedRole\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n * it), and not Whitelisteds themselves.\n */\ncontract WhitelistedRole is WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    Roles.Role private _whitelisteds;\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(msg.sender));\n        _;\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\n        _addWhitelisted(account);\n    }\n\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n\n    function renounceWhitelisted() public {\n        _removeWhitelisted(msg.sender);\n    }\n\n    function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n\n    function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/Math.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Calculates the average of two numbers. Since these are integers,\n     * averages of an even and odd number cannot be represented, and will be\n     * rounded down.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// File: contracts/token/ERC20/library/Snapshots.sol\n\n/**\n * @title Snapshot\n * @dev Utility library of the Snapshot structure, including getting value.\n * @author Validity Labs AG <[emailÂ protected]>\n */\npragma solidity ^0.5.7;\n\n\n\n\nlibrary Snapshots {\n    using Math for uint256;\n    using SafeMath for uint256;\n\n    /**\n     * @notice This structure stores the historical value associate at a particular timestamp\n     * @param timestamp The timestamp of the creation of the snapshot\n     * @param value The value to be recorded\n     */\n    struct Snapshot {\n        uint256 timestamp;\n        uint256 value;\n    }\n\n    struct SnapshotList {\n        Snapshot[] history;\n    }\n\n    /** TODO: within 1 block: transfer w/ snapshot, then dividend distrubtion, transfer w/ snapshot\n     *\n     * @notice This function creates snapshots for certain value...\n     * @dev To avoid having two Snapshots with the same block.timestamp, we check if the last\n     * existing one is the current block.timestamp, we update the last Snapshot\n     * @param item The SnapshotList to be operated\n     * @param _value The value associated the the item that is going to have a snapshot\n     */\n    function createSnapshot(SnapshotList storage item, uint256 _value) internal {\n        uint256 length = item.history.length;\n        if (length == 0 || (item.history[length.sub(1)].timestamp < block.timestamp)) {\n            item.history.push(Snapshot(block.timestamp, _value));\n        } else {\n            // When the last existing snapshot is ready to be updated\n            item.history[length.sub(1)].value = _value;\n        }\n    }\n\n    /**\n     * @notice Find the index of the item in the SnapshotList that contains information\n     * corresponding to the timestamp. (FindLowerBond of the array)\n     * @dev The binary search logic is inspired by the Arrays.sol from Openzeppelin\n     * @param item The list of Snapshots to be queried\n     * @param timestamp The timestamp of the queried moment\n     * @return The index of the Snapshot array\n     */\n    function findBlockIndex(\n        SnapshotList storage item, \n        uint256 timestamp\n    ) \n        internal\n        view \n        returns (uint256)\n    {\n        // Find lower bound of the array\n        uint256 length = item.history.length;\n\n        // Return value for extreme cases: If no snapshot exists and/or the last snapshot\n        if (item.history[length.sub(1)].timestamp <= timestamp) {\n            return length.sub(1);\n        } else {\n            // Need binary search for the value\n            uint256 low = 0;\n            uint256 high = length.sub(1);\n\n            while (low < high.sub(1)) {\n                uint256 mid = Math.average(low, high);\n                // mid will always be strictly less than high and it rounds down\n                if (item.history[mid].timestamp <= timestamp) {\n                    low = mid;\n                } else {\n                    high = mid;\n                }\n            }\n            return low;\n        }   \n    }\n\n    /**\n     * @notice This function returns the value of the corresponding Snapshot\n     * @param item The list of Snapshots to be queried\n     * @param timestamp The timestamp of the queried moment\n     * @return The value of the queried moment\n     */\n    function getValueAt(\n        SnapshotList storage item, \n        uint256 timestamp\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        if (item.history.length == 0 || timestamp < item.history[0].timestamp) {\n            return 0;\n        } else {\n            uint256 index = findBlockIndex(item, timestamp);\n            return item.history[index].value;\n        }\n    }\n}\n\n// File: contracts/token/ERC20/ERC20Snapshot.sol\n\n/**\n * @title ERC20 Snapshot Token\n * @dev This is an ERC20 compatible token that takes snapshots of account balances.\n * @author Validity Labs AG <[emailÂ protected]>\n */\npragma solidity ^0.5.7;  \n\n\n\n\ncontract ERC20Snapshot is ERC20 {\n    using Snapshots for Snapshots.SnapshotList;\n\n    mapping(address => Snapshots.SnapshotList) private _snapshotBalances; \n    Snapshots.SnapshotList private _snapshotTotalSupply;   \n\n    event CreatedAccountSnapshot(address indexed account, uint256 indexed timestamp, uint256 value);\n    event CreatedTotalSupplySnapshot(uint256 indexed timestamp, uint256 value);\n\n    /**\n     * @notice Return the historical supply of the token at a certain time\n     * @param timestamp The block number of the moment when token supply is queried\n     * @return The total supply at \"timestamp\"\n     */\n    function totalSupplyAt(uint256 timestamp) public view returns (uint256) {\n        return _snapshotTotalSupply.getValueAt(timestamp);\n    }\n\n    /**\n     * @notice Return the historical balance of an account at a certain time\n     * @param owner The address of the token holder\n     * @param timestamp The block number of the moment when token supply is queried\n     * @return The balance of the queried token holder at \"timestamp\"\n     */\n    function balanceOfAt(address owner, uint256 timestamp) \n        public \n        view \n        returns (uint256) {\n            return _snapshotBalances[owner].getValueAt(timestamp);\n        }\n\n    /** OVERRIDE\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\n     * @param from The address to transfer from\n     * @param to The address to transfer to\n     * @param value The amount to be transferred\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        super._transfer(from, to, value); // ERC20 transfer\n\n        _createAccountSnapshot(from, balanceOf(from));\n        _createAccountSnapshot(to, balanceOf(to));\n    }\n\n    /** OVERRIDE\n     * @notice Mint tokens to one account while enforcing the update of Snapshots\n     * @param account The address that receives tokens\n     * @param value The amount of tokens to be created\n     */\n    function _mint(address account, uint256 value) internal {\n        super._mint(account, value);\n        \n        _createAccountSnapshot(account, balanceOf(account));\n        _createTotalSupplySnapshot(account, totalSupplyAt(block.timestamp).add(value));\n    }\n\n    /** OVERRIDE\n     * @notice Burn tokens of one account\n     * @param account The address whose tokens will be burnt\n     * @param value The amount of tokens to be burnt\n     */\n    function _burn(address account, uint256 value) internal {\n        super._burn(account, value);\n\n        _createAccountSnapshot(account, balanceOf(account));\n        _createTotalSupplySnapshot(account, totalSupplyAt(block.timestamp).sub(value));\n    }\n\n    /**\n    * @notice creates a total supply snapshot & emits event\n    * @param amount uint256 \n    * @param account address\n    */\n    function _createTotalSupplySnapshot(address account, uint256 amount) internal {\n        _snapshotTotalSupply.createSnapshot(amount);\n\n        emit CreatedTotalSupplySnapshot(block.timestamp, amount);\n    }\n\n    /**\n    * @notice creates an account snapshot & emits event\n    * @param amount uint256 \n    * @param account address\n    */\n    function _createAccountSnapshot(address account, uint256 amount) internal {\n        _snapshotBalances[account].createSnapshot(amount);\n\n        emit CreatedAccountSnapshot(account, block.timestamp, amount);\n    }\n\n    function _precheckSnapshot() internal {\n        // FILL LATER TODO: comment on how this is utilized\n        // Why it's not being abstract\n    }\n}\n\n// File: contracts/STO/token/WhitelistedSnapshot.sol\n\n/**\n * @title Whitelisted Snapshot Token\n * @author Validity Labs AG <[emailÂ protected]>\n */\npragma solidity ^0.5.7;\n\n\n\n\n/**\n* Whitelisted Snapshot repurposes the following 2 variables inherited from ERC20Snapshot:\n* _snapshotBalances: only whitelisted accounts get snapshots\n* _snapshotTotalSupply: only the total sum of whitelisted\n*/\ncontract WhitelistedSnapshot is ERC20Snapshot, WhitelistedRole {\n    /** OVERRIDE\n    * @notice add account to whitelist & create a snapshot of current balance\n    * @param account address\n    */\n    function addWhitelisted(address account) public {\n        super.addWhitelisted(account);\n\n        uint256 balance = balanceOf(account);\n        _createAccountSnapshot(account, balance);\n\n        uint256 newSupplyValue = totalSupplyAt(now).add(balance);\n        _createTotalSupplySnapshot(account, newSupplyValue);\n    }\n    \n    /** OVERRIDE\n    * @notice remove account from white & create a snapshot of 0 balance\n    * @param account address\n    */\n    function removeWhitelisted(address account) public {\n        super.removeWhitelisted(account);\n\n        _createAccountSnapshot(account, 0);\n\n        uint256 balance = balanceOf(account);\n        uint256 newSupplyValue = totalSupplyAt(now).sub(balance);\n        _createTotalSupplySnapshot(account, newSupplyValue);\n    }\n\n    /** OVERRIDE & call parent\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\n     * @dev the super._transfer call handles the snapshot of each account. See the internal functions \n     * below: _createTotalSupplySnapshot & _createAccountSnapshot\n     * @param from address The address to transfer from\n     * @param to address The address to transfer to\n     * @param value uint256 The amount to be transferred\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        // if available will call the sibiling's inherited function before calling the parent's\n        super._transfer(from, to, value);\n\n        /**\n        * Possibilities:\n        * Homogeneous Transfers:\n        *   0: _whitelist to _whitelist: 0 total supply snapshot\n        *   1: nonwhitelist to nonwhitelist: 0 total supply snapshot\n        * Heterogeneous Transfers:\n        *   2: _whitelist to nonwhitelist: 1 whitelisted total supply snapshot\n        *   3: nonwhitelist to _whitelist: 1 whitelisted total supply snapshot\n        */\n        // isWhitelistedHetero tells us to/from is a mix of whitelisted/not whitelisted accounts\n        // isAdding tell us whether or not to add or subtract from the whitelisted total supply value\n        (bool isWhitelistedHetero, bool isAdding) = _isWhitelistedHeterogeneousTransfer(from, to);\n\n        if (isWhitelistedHetero) { // one account is whitelisted, the other is not\n            uint256 newSupplyValue = totalSupplyAt(block.timestamp);\n            address account;\n\n            if (isAdding) { \n                newSupplyValue = newSupplyValue.add(value);\n                account = to;\n            } else { \n                newSupplyValue = newSupplyValue.sub(value);\n                account = from;\n            }\n\n            _createTotalSupplySnapshot(account, newSupplyValue);\n        }\n    }\n\n    /**\n    * @notice returns true (isHetero) for a mix-match of whitelisted & nonwhitelisted account transfers\n    * returns true (isAdding) if total supply is increasing or false for decreasing\n    * @param from address\n    * @param to address\n    * @return isHetero, isAdding. bool, bool\n    */\n    function _isWhitelistedHeterogeneousTransfer(address from, address to) \n        internal \n        view \n        returns (bool isHetero, bool isAdding) {\n            bool _isToWhitelisted = isWhitelisted(to);\n            bool _isFromWhitelisted = isWhitelisted(from);\n\n            if (!_isFromWhitelisted && _isToWhitelisted) {\n                isHetero = true;    \n                isAdding = true;    // increase whitelisted total supply\n            } else if (_isFromWhitelisted && !_isToWhitelisted) {\n                isHetero = true;    \n            }\n        }\n\n    /** OVERRIDE\n    * @notice creates a total supply snapshot & emits event\n    * @param amount uint256 \n    * @param account address\n    */\n    function _createTotalSupplySnapshot(address account, uint256 amount) internal {\n        if (isWhitelisted(account)) {\n            super._createTotalSupplySnapshot(account, amount);\n        }\n    }\n\n    /** OVERRIDE\n    * @notice only snapshot if account is whitelisted\n    * @param account address\n    * @param amount uint256 \n    */\n    function _createAccountSnapshot(address account, uint256 amount) internal {\n        if (isWhitelisted(account)) {\n            super._createAccountSnapshot(account, amount);\n        }\n    }\n\n    function _precheckSnapshot() internal onlyWhitelisted {}\n}\n\n// File: contracts/STO/BaseOptedIn.sol\n\n/**\n * @title Base Opt In\n * @author Validity Labs AG <[emailÂ protected]>\n * This allows accounts to \"opt out\" or \"opt in\"\n * Defaults everyone to opted in \n * Example: opt out from onchain dividend payments\n */\npragma solidity ^0.5.7;\n\n\ncontract BaseOptedIn {\n    // uint256 = timestamp. Default: 0 = opted in. > 0 = opted out\n    mapping(address => uint256) public optedOutAddresses; // whitelisters who've opted to receive offchain dividends\n\n    /** EVENTS **/\n    event OptedOut(address indexed account);\n    event OptedIn(address indexed account);\n\n    modifier onlyOptedBool(bool isIn) { // true for onlyOptedIn, false for onlyOptedOut\n        if (isIn) {\n            require(optedOutAddresses[msg.sender] > 0, \"already opted in\");\n        } else {\n            require(optedOutAddresses[msg.sender] == 0, \"already opted out\");\n        }\n        _;\n    }\n\n    /**\n    * @notice accounts who have opted out from onchain dividend payments\n    */\n    function optOut() public onlyOptedBool(false) {\n        optedOutAddresses[msg.sender] = block.timestamp;\n        \n        emit OptedOut(msg.sender);\n    }\n\n    /**\n    * @notice accounts who previously opted out, who opt back in\n    */\n    function optIn() public onlyOptedBool(true) {\n        optedOutAddresses[msg.sender] = 0;\n\n        emit OptedIn(msg.sender);\n    }\n\n    /**\n    * @notice returns true if opted in\n    * @param account address \n    * @return optedIn bool \n    */\n    function isOptedIn(address account) public view returns (bool optedIn) {\n        if (optedOutAddresses[account] == 0) {\n            optedIn = true;\n        }\n    }\n}\n\n// File: contracts/STO/token/OptedInSnapshot.sol\n\n/**\n * @title Opted In Snapshot\n * @author Validity Labs AG <[emailÂ protected]>\n */\npragma solidity ^0.5.7;\n\n\n\n\n/**\n* Opted In Snapshot repurposes the following 2 variables inherited from ERC20Snapshot:\n* _snapshotBalances: snapshots of opted in accounts\n* _snapshotTotalSupply: only the total sum of opted in accounts\n*/\ncontract OptedInSnapshot is ERC20Snapshot, BaseOptedIn {\n    /** OVERRIDE\n    * @notice accounts who previously opted out, who opt back in\n    */\n    function optIn() public {\n        // protects against TODO: Fill later\n        super._precheckSnapshot();\n        super.optIn();\n\n        address account = msg.sender;\n        uint256 balance = balanceOf(account);\n        _createAccountSnapshot(account, balance);\n\n        _createTotalSupplySnapshot(account, totalSupplyAt(now).add(balance));\n    }\n\n    /** OVERRIDE\n    * @notice call parent f(x) & \n    * create new snapshot for account: setting to 0\n    * create new shapshot for total supply: oldTotalSupply.sub(balance)\n    */\n    function optOut() public {\n        // protects against TODO: Fill later\n        super._precheckSnapshot();\n        super.optOut();\n\n        address account = msg.sender;\n        _createAccountSnapshot(account, 0);\n\n        _createTotalSupplySnapshot(account, totalSupplyAt(now).sub(balanceOf(account)));\n    }\n\n    /** OVERRIDE\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\n     * @param from The address to transfer from\n     * @param to The address to transfer to\n     * @param value The amount to be transferred\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        // if available will call the sibiling's inherited function before calling the parent's\n        super._transfer(from, to, value);\n\n        /**\n        * Possibilities:\n        * Homogeneous Transfers:\n        *   0: opted in to opted in: 0 total supply snapshot\n        *   1: opted out to opted out: 0 total supply snapshot\n        * Heterogeneous Transfers:\n        *   2: opted out to opted in: 1 whitelisted total supply snapshot\n        *   3: opted in to opted out: 1 whitelisted total supply snapshot\n        */\n        // isOptedHetero tells us to/from is a mix of opted in/out accounts\n        // isAdding tell us whether or not to add or subtract from the opted in total supply value\n        (bool isOptedHetero, bool isAdding) = _isOptedHeterogeneousTransfer(from, to);\n\n        if (isOptedHetero) { // one account is whitelisted, the other is not\n            uint256 newSupplyValue = totalSupplyAt(block.timestamp);\n            address account;\n\n            if (isAdding) {\n                newSupplyValue = newSupplyValue.add(value);\n                account = to;\n            } else {\n                newSupplyValue = newSupplyValue.sub(value);\n                account = from;\n            }\n\n            _createTotalSupplySnapshot(account, newSupplyValue);\n        }\n    }\n\n    /**\n    * @notice returns true for a mix-match of opted in & opted out transfers. \n    *         if true, returns true/false for increasing either optedIn or opetedOut total supply balances\n    * @dev should only be calling if both to and from accounts are whitelisted\n    * @param from address\n    * @param to address\n    * @return isOptedHetero, isOptedInIncrease. bool, bool\n    */\n    function _isOptedHeterogeneousTransfer(address from, address to) \n        internal \n        view \n        returns (bool isOptedHetero, bool isOptedInIncrease) {\n            bool _isToOptedIn = isOptedIn(to);\n            bool _isFromOptedIn = isOptedIn(from);\n            \n            if (!_isFromOptedIn && _isToOptedIn) {\n                isOptedHetero = true;    \n                isOptedInIncrease = true;    // increase opted in total supply\n            } else if (_isFromOptedIn && !_isToOptedIn) {\n                isOptedHetero = true; \n            }\n        }\n\n    /** OVERRIDE\n    * @notice creates a total supply snapshot & emits event\n    * @param amount uint256 \n    * @param account address\n    */\n    function _createTotalSupplySnapshot(address account, uint256 amount) internal {\n        if (isOptedIn(account)) {\n            super._createTotalSupplySnapshot(account, amount);\n        }\n    }\n\n    /** OVERRIDE\n    * @notice only snapshot if opted in\n    * @param account address\n    * @param amount uint256 \n    */\n    function _createAccountSnapshot(address account, uint256 amount) internal {\n        if (isOptedIn(account)) {\n            super._createAccountSnapshot(account, amount);\n        }\n    }\n}\n\n// File: contracts/STO/token/ERC20ForceTransfer.sol\n\n/**\n * @title ERC20 ForceTransfer\n * @author Validity Labs AG <[emailÂ protected]>\n */\npragma solidity ^0.5.7;  \n\n\n\n\n/**\n* @dev inherit contract, create external/public function that calls these internal functions\n* to activate the ability for one or both forceTransfer implementations\n*/\ncontract ERC20ForceTransfer is Ownable, ERC20 {\n    event ForcedTransfer(address indexed confiscatee, uint256 amount, address indexed receiver);\n\n    /**\n    * @notice takes all funds from confiscatee and sends them to receiver\n    * @param confiscatee address who's funds are being confiscated\n    * @param receiver address who's receiving the funds \n    */\n    function forceTransfer(address confiscatee, address receiver) external onlyOwner {\n        uint256 balance = balanceOf(confiscatee);\n        _transfer(confiscatee, receiver, balance);\n\n        emit ForcedTransfer(confiscatee, balance, receiver);\n    }\n\n    /**\n    * @notice takes an amount of funds from confiscatee and sends them to receiver\n    * @param confiscatee address who's funds are being confiscated\n    * @param receiver address who's receiving the funds \n    */\n    function forceTransfer(address confiscatee, address receiver, uint256 amount) external onlyOwner {\n        _transfer(confiscatee, receiver, amount);\n\n        emit ForcedTransfer(confiscatee, amount, receiver);\n    }\n}\n\n// File: contracts/STO/BaseDocumentRegistry.sol\n\n/**\n * @title Base Document Registry Contract\n * @author Validity Labs AG <[emailÂ protected]>\n * inspired by Neufund's iAgreement smart contract\n */\npragma solidity ^0.5.7;\n\n\n\n\n// solhint-disable not-rely-on-time\ncontract BaseDocumentRegistry is Ownable {\n    using SafeMath for uint256;\n    \n    struct HashedDocument {\n        uint256 timestamp;\n        string documentUri;\n    }\n\n    HashedDocument[] private _documents;\n\n    event AddedLogDocumented(string documentUri, uint256 documentIndex);\n\n    /**\n    * @notice adds a document's uri from IPFS to the array\n    * @param documentUri string\n    */\n    function addDocument(string calldata documentUri) external onlyOwner {\n        require(bytes(documentUri).length > 0, \"invalid documentUri\");\n\n        HashedDocument memory document = HashedDocument({\n            timestamp: block.timestamp,\n            documentUri: documentUri\n        });\n\n        _documents.push(document);\n\n        emit AddedLogDocumented(documentUri, _documents.length.sub(1));\n    }\n\n    /**\n    * @notice fetch the latest document on the array\n    * @return uint256, string, uint256 \n    */\n    function currentDocument() \n        public \n        view \n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\n            require(_documents.length > 0, \"no documents exist\");\n            uint256 last = _documents.length.sub(1);\n\n            HashedDocument storage document = _documents[last];\n            return (document.timestamp, document.documentUri, last);\n        }\n\n    /**\n    * @notice adds a document's uri from IPFS to the array\n    * @param documentIndex uint256\n    * @return uint256, string, uint256 \n    */\n    function getDocument(uint256 documentIndex) \n        public \n        view\n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\n            require(documentIndex < _documents.length, \"invalid index\");\n\n            HashedDocument storage document = _documents[documentIndex];\n            return (document.timestamp, document.documentUri, documentIndex);\n        }\n\n    /**\n    * @notice return the total amount of documents in the array\n    * @return uint256\n    */\n    function documentCount() public view returns (uint256) {\n        return _documents.length;\n    }\n}\n\n// File: contracts/examples/ExampleSecurityToken.sol\n\n/**\n * @title Example Security Token\n * @author Validity Labs AG <[emailÂ protected]>\n */\npragma solidity ^0.5.7;\n\n\n\n\n\n\n\n\n\n\n\n\ncontract ExampleSecurityToken is \n    Utils, \n    Reclaimable, \n    ERC20Detailed, \n    WhitelistedSnapshot, \n    OptedInSnapshot,\n    ERC20Mintable, \n    ERC20Burnable, \n    ERC20Pausable,\n    ERC20ForceTransfer,\n    BaseDocumentRegistry {\n    \n    bool private _isSetup;\n\n    /**\n    * @notice contructor for the token contract\n    */\n    constructor(string memory name, string memory symbol, address initialAccount, uint256 initialBalance) \n        public\n        ERC20Detailed(name, symbol, 0) {\n            // pause();\n            _mint(initialAccount, initialBalance);\n            roleSetup(initialAccount);\n        }\n\n    /**\n    * @notice setup roles and contract addresses for the new token\n    * @param board Address of the owner who is also a manager \n    */\n    function roleSetup(address board) internal onlyOwner onlyOnce(_isSetup) {   \n        addMinter(board);\n        addPauser(board);\n        _addWhitelistAdmin(board);\n    }\n\n    /** OVERRIDE - onlyOwner role (the board) can call \n     * @notice Burn tokens of one account\n     * @param account The address whose tokens will be burnt\n     * @param value The amount of tokens to be burnt\n     */\n    function _burn(address account, uint256 value) internal onlyOwner {\n        super._burn(account, value);\n    } \n}\n\n// File: contracts/STO/dividends/Dividends.sol\n\n/**\n * @title Dividend contract for STO\n * @author Validity Labs AG <[emailÂ protected]>\n */\npragma solidity ^0.5.7;\n\n\n\n\n\n\n\n\ncontract Dividends is Utils, Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public _wallet;  // set at deploy time\n    \n    struct Dividend {\n        uint256 recordDate;     // timestamp of the record date\n        uint256 claimPeriod;    // claim period, in seconds, of the claiming period\n        address payoutToken;    // payout token, which could be different each time.\n        uint256 payoutAmount;   // the total amount of tokens deposit\n        uint256 claimedAmount;  // the total amount of tokens being claimed\n        uint256 totalSupply;    // the total supply of sto token when deposit was made\n        bool reclaimed;          // If the unclaimed deposit was reclaimed by the team\n        mapping(address => bool) claimed; // If investors have claimed their dividends.\n    }\n\n    address public _token;\n    Dividend[] public dividends;\n\n    // Record the balance of each ERC20 token deposited to this contract as dividends.\n    mapping(address => uint256) public totalBalance;\n\n    // EVENTS\n    event DepositedDividend(uint256 indexed dividendIndex, address indexed payoutToken, uint256 payoutAmount, uint256 recordDate, uint256 claimPeriod);\n    event ReclaimedDividend(uint256 indexed dividendIndex, address indexed claimer, uint256 claimedAmount);\n    event RecycledDividend(uint256 indexed dividendIndex, uint256 timestamp, uint256 recycledAmount);\n\n    /**\n     * @notice Check if the index is valid\n     */\n    modifier validDividendIndex(uint256 _dividendIndex) {\n        require(_dividendIndex < dividends.length, \"Such dividend does not exist\");\n        _;\n    } \n\n    /**\n    * @notice initialize the Dividend contract with the STO Token contract and the new owner\n    * @param stoToken The token address, of which the holders could claim dividends.\n    * @param wallet the address of the wallet to receive the reclaimed funds\n    */\n    /* solhint-disable */\n    constructor(address stoToken, address wallet) public onlyValidAddress(stoToken) onlyValidAddress(wallet) {\n        _token = stoToken;\n        _wallet = wallet;\n        transferOwnership(wallet);\n    }\n    /* solhint-enable */\n\n    /**\n    * @notice deposit payoutDividend tokens (ERC20) into this contract\n    * @param payoutToken ERC20 address of the token used for payout the current dividend \n    * @param amount uint256 total amount of the ERC20 tokens deposited to payout to all \n    * token holders as of previous block from when this function is included\n    * @dev The owner should first call approve(STODividendsContractAddress, amount) \n    * in the payoutToken contract\n    */\n    function depositDividend(address payoutToken, uint256 recordDate, uint256 claimPeriod, uint256 amount)\n        public\n        onlyOwner\n        onlyValidAddress(payoutToken)\n    {\n        require(amount > 0, \"invalid deposit amount\");\n        require(recordDate > 0, \"invalid recordDate\");\n        require(claimPeriod > 0, \"invalid claimPeriod\");\n\n        IERC20(payoutToken).safeTransferFrom(msg.sender, address(this), amount);     // transfer ERC20 to this contract\n        totalBalance[payoutToken] = totalBalance[payoutToken].add(amount); // update global balance of ERC20 token\n\n        dividends.push(\n            Dividend(\n                recordDate,\n                claimPeriod,\n                payoutToken,\n                amount,\n                0,\n                ERC20Snapshot(_token).totalSupplyAt(block.timestamp), //eligible supply\n                false\n            )\n        );\n\n        emit DepositedDividend((dividends.length).sub(1), payoutToken, amount, block.timestamp, claimPeriod);\n    }\n\n    /** TODO: check for \"recycle\" or \"recycled\" - replace with reclaimed\n     * @notice Token holder claim their dividends\n     * @param dividendIndex The index of the deposit dividend to be claimed.\n     */\n    function claimDividend(uint256 dividendIndex) \n        public \n        validDividendIndex(dividendIndex) \n    {\n        Dividend storage dividend = dividends[dividendIndex];\n        require(dividend.claimed[msg.sender] == false, \"Dividend already claimed\");\n        require(dividend.reclaimed == false, \"Dividend already reclaimed\");\n        require((dividend.recordDate).add(dividend.claimPeriod) >= block.timestamp, \"No longer claimable\");\n\n        _claimDividend(dividendIndex, msg.sender);\n    }\n\n    /**\n     * @notice Claim dividends from a startingIndex to all possible dividends\n     * @param startingIndex The index from which the loop of claiming dividend starts\n     * @dev To claim all dividends from the beginning, set this value to 0.\n     * This parameter may help reducing the risk of running out-of-gas due to many loops\n     */\n    function claimAllDividends(uint256 startingIndex) \n        public \n        validDividendIndex(startingIndex) \n    {\n        for (uint256 i = startingIndex; i < dividends.length; i++) {\n            Dividend storage dividend = dividends[i];\n\n            if (dividend.claimed[msg.sender] == false \n                && (dividend.recordDate).add(dividend.claimPeriod) >= block.timestamp && dividend.reclaimed == false) {\n                _claimDividend(i, msg.sender);\n            }\n        }\n    }\n\n    /**\n     * @notice recycle the dividend. Transfer tokens back to the _wallet\n     * @param dividendIndex the storage index of the dividend in the pushed array.\n     */\n    function reclaimDividend(uint256 dividendIndex) \n        public\n        onlyOwner\n        validDividendIndex(dividendIndex)     \n    {\n        Dividend storage dividend = dividends[dividendIndex];\n        require(dividend.reclaimed == false, \"Dividend already reclaimed\");\n        require((dividend.recordDate).add(dividend.claimPeriod) < block.timestamp, \"Still claimable\");\n\n        dividend.reclaimed = true;\n        uint256 recycledAmount = (dividend.payoutAmount).sub(dividend.claimedAmount);\n        totalBalance[dividend.payoutToken] = totalBalance[dividend.payoutToken].sub(recycledAmount);\n        IERC20(dividend.payoutToken).safeTransfer(_wallet, recycledAmount);\n\n        emit RecycledDividend(dividendIndex, block.timestamp, recycledAmount);\n    }\n\n    /**\n    * @notice get dividend info at index\n    * @param dividendIndex the storage index of the dividend in the pushed array. \n    * @return recordDate (uint256) of the dividend\n    * @return claimPeriod (uint256) of the dividend\n    * @return payoutToken (address) of the dividend\n    * @return payoutAmount (uint256) of the dividend\n    * @return claimedAmount (uint256) of the dividend\n    * @return the total supply (uint256) of the dividend\n    * @return Whether this dividend was reclaimed (bool) of the dividend\n    */\n    function getDividend(uint256 dividendIndex) \n        public\n        view \n        validDividendIndex(dividendIndex)\n        returns (uint256, uint256, address, uint256, uint256, uint256, bool)\n    {\n        Dividend memory result = dividends[dividendIndex];\n        return (\n            result.recordDate,\n            result.claimPeriod,\n            address(result.payoutToken),\n            result.payoutAmount,\n            result.claimedAmount,\n            result.totalSupply,\n            result.reclaimed);\n    }\n\n    /**\n     * @notice Internal function that claim the dividend\n     * @param dividendIndex the index of the dividend to be claimed\n     * @param account address of the account to receive dividend\n     */\n    function _claimDividend(uint256 dividendIndex, address account) internal {\n        Dividend storage dividend = dividends[dividendIndex];\n\n        uint256 claimAmount = _calcClaim(dividendIndex, account);\n        \n        dividend.claimed[account] = true;\n        dividend.claimedAmount = (dividend.claimedAmount).add(claimAmount);\n        totalBalance[dividend.payoutToken] = totalBalance[dividend.payoutToken].sub(claimAmount);\n\n        IERC20(dividend.payoutToken).safeTransfer(account, claimAmount);\n        emit ReclaimedDividend(dividendIndex, account, claimAmount);\n    }\n\n    /**\n    * @notice calculate dividend claim amount\n    */\n    function _calcClaim(uint256 dividendIndex, address account) internal view returns (uint256) {\n        Dividend memory dividend = dividends[dividendIndex];\n\n        uint256 balance = ERC20Snapshot(_token).balanceOfAt(account, dividend.recordDate);\n        return balance.mul(dividend.payoutAmount).div(dividend.totalSupply);\n    }\n}\n\n// File: contracts/examples/ExampleTokenFactory.sol\n\n/**\n * @title Example Token Factory Contract\n * @author Validity Labs AG <[emailÂ protected]>\n */\n\npragma solidity 0.5.7;\n\n\n\n\n\n/* solhint-disable max-line-length */\n/* solhint-disable separate-by-one-line-in-contract */\ncontract ExampleTokenFactory is Managed {\n\n    mapping(address => address) public tokenToDividend;\n\n    /*** EVENTS ***/\n    event DeployedToken(address indexed contractAddress, string name, string symbol, address indexed clientOwner);\n    event DeployedDividend(address indexed contractAddress);\n   \n    /*** FUNCTIONS ***/\n    function newToken(string calldata _name, string calldata _symbol, address _clientOwner, uint256 _initialAmount) external onlyOwner {\n        address tokenAddress = _deployToken(_name, _symbol, _clientOwner, _initialAmount);\n    }\n\n    function newTokenAndDividend(string calldata _name, string calldata _symbol, address _clientOwner, uint256 _initialAmount) external onlyOwner {\n        address tokenAddress = _deployToken(_name, _symbol, _clientOwner, _initialAmount);\n        address dividendAddress = _deployDividend(tokenAddress, _clientOwner);\n        tokenToDividend[tokenAddress] = dividendAddress;\n    }\n    \n    /** MANGER FUNCTIONS **/\n    /**\n    * @notice Prospectus and Quarterly Reports \n    * @dev string null check is done at the token level - see ERC20DocumentRegistry\n    * @param _est address of the targeted EST\n    * @param _documentUri string IPFS URI to the document\n    */\n    function addDocument(address _est, string calldata _documentUri) external onlyValidAddress(_est) onlyManager {\n        ExampleSecurityToken(_est).addDocument(_documentUri);\n    }\n\n    /**\n    * @notice pause or unpause individual EST\n    * @param _est address of the targeted EST\n    */\n    function togglePauseEST(address _est) public onlyValidAddress(_est) onlyManager {\n        ExampleSecurityToken est = ExampleSecurityToken(_est);\n        bool result = est.paused();\n        result ? est.unpause() : est.pause();\n    }\n\n    /**\n    * @notice force the transfer of tokens from _confiscatee to _receiver\n    * @param _est address of the targeted EST\n    * @param _confiscatee address to confiscate tokens from\n    * @param _receiver address to receive the balance of tokens\n    * @param _amount uint256 amount to take away from _confiscatee\n    */\n    function forceTransferEST(address _est, address _confiscatee, address _receiver, uint256 _amount) \n        public \n        onlyValidAddress(_est) \n        onlyValidAddress(_confiscatee)\n        onlyValidAddress(_receiver)\n        onlyManager {\n            require(_amount > 0, \"invalid amount\");\n\n            ExampleSecurityToken est = ExampleSecurityToken(_est);\n            est.forceTransfer(_confiscatee, _receiver, _amount);\n        }\n\n    function _deployToken(string memory _name, string memory _symbol, address _clientOwner, uint256 _initialAmount) internal returns (address) {\n        require(bytes(_name).length > 0, \"name cannot be blank\");\n        require(bytes(_symbol).length > 0, \"symbol cannot be blank\");\n\n        ExampleSecurityToken tokenContract = new ExampleSecurityToken(_name, _symbol, _clientOwner, _initialAmount);\n        \n        emit DeployedToken(address(tokenContract), _name, _symbol, _clientOwner);\n        return address(tokenContract);\n    }\n\n    function _deployDividend(address tokenAddress, address wallet) internal returns (address) {\n        Dividends dividendContract = new Dividends(tokenAddress, wallet);\n\n        emit DeployedDividend(address(dividendContract));\n        return address(dividendContract);\n    }\n}",
  "bytecode": ""
}