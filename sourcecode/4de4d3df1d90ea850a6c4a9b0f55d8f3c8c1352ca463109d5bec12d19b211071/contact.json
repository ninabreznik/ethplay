{
  "address": "0x7b220ac85b7ae8af1ceccc44e183a862da2ed517",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OrderGateway",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-28\n*/\n\npragma solidity 0.5.5;\n\n/**\n * @dev Standard interface for a dex proxy contract.\n */\ninterface Proxy {\n\n  /**\n   * @dev Executes an action.\n   * @param _target Target of execution.\n   * @param _a Address usually representing from.\n   * @param _b Address usually representing to.\n   * @param _c Integer usually repersenting amount/value/id.\n   */\n  function execute(\n    address _target,\n    address _a,\n    address _b,\n    uint256 _c\n  )\n    external;\n    \n}\n\n/**\n * @dev Xcert interface.\n */\ninterface Xcert // is ERC721 metadata enumerable\n{\n\n  /**\n   * @dev Creates a new Xcert.\n   * @param _to The address that will own the created Xcert.\n   * @param _id The Xcert to be created by the msg.sender.\n   * @param _imprint Cryptographic asset imprint.\n   */\n  function create(\n    address _to,\n    uint256 _id,\n    bytes32 _imprint\n  )\n    external;\n\n  /**\n   * @dev Change URI base.\n   * @param _uriBase New uriBase.\n   */\n  function setUriBase(\n    string calldata _uriBase\n  )\n    external;\n\n  /**\n   * @dev Returns a bytes4 of keccak256 of json schema representing 0xcert Protocol convention.\n   * @return Schema id.\n   */\n  function schemaId()\n    external\n    view\n    returns (bytes32 _schemaId);\n\n  /**\n   * @dev Returns imprint for Xcert.\n   * @param _tokenId Id of the Xcert.\n   * @return Token imprint.\n   */\n  function tokenImprint(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns(bytes32 imprint);\n\n}\n\n/**\n * @dev Xcert burnable interface.\n */\ninterface XcertBurnable // is Xcert\n{\n\n  /**\n   * @dev Destroys a specified Xcert. Reverts if not called from Xcert owner or operator.\n   * @param _tokenId Id of the Xcert we want to destroy.\n   */\n  function destroy(\n    uint256 _tokenId\n  )\n    external;\n\n}\n\n/**\n * @dev Xcert nutable interface.\n */\ninterface XcertMutable // is Xcert\n{\n  \n  /**\n   * @dev Updates Xcert imprint.\n   * @param _tokenId Id of the Xcert.\n   * @param _imprint New imprint.\n   */\n  function updateTokenImprint(\n    uint256 _tokenId,\n    bytes32 _imprint\n  )\n    external;\n\n}\n\n/**\n * @dev Xcert pausable interface.\n */\ninterface XcertPausable // is Xcert\n{\n\n  /**\n   * @dev Sets if Xcerts transfers are paused (can be performed) or not.\n   * @param _isPaused Pause status.\n   */\n  function setPause(\n    bool _isPaused\n  )\n    external;\n    \n}\n\n/**\n * @dev Xcert revokable interface.\n */\ninterface XcertRevokable // is Xcert\n{\n  \n  /**\n   * @dev Revokes a specified Xcert. Reverts if not called from contract owner or authorized \n   * address.\n   * @param _tokenId Id of the Xcert we want to destroy.\n   */\n  function revoke(\n    uint256 _tokenId\n  )\n    external;\n\n}\n\n/**\n * @dev Math operations with safety checks that throw on error. This contract is based on the \n * source code at: \n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol.\n */\nlibrary SafeMath\n{\n\n  /**\n   * @dev Error constants.\n   */\n  string constant OVERFLOW = \"008001\";\n  string constant SUBTRAHEND_GREATER_THEN_MINUEND = \"008002\";\n  string constant DIVISION_BY_ZERO = \"008003\";\n\n  /**\n   * @dev Multiplies two numbers, reverts on overflow.\n   * @param _factor1 Factor number.\n   * @param _factor2 Factor number.\n   * @return The product of the two factors.\n   */\n  function mul(\n    uint256 _factor1,\n    uint256 _factor2\n  )\n    internal\n    pure\n    returns (uint256 product)\n  {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_factor1 == 0)\n    {\n      return 0;\n    }\n\n    product = _factor1 * _factor2;\n    require(product / _factor1 == _factor2, OVERFLOW);\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient, reverts on division by zero.\n   * @param _dividend Dividend number.\n   * @param _divisor Divisor number.\n   * @return The quotient.\n   */\n  function div(\n    uint256 _dividend,\n    uint256 _divisor\n  )\n    internal\n    pure\n    returns (uint256 quotient)\n  {\n    // Solidity automatically asserts when dividing by 0, using all gas.\n    require(_divisor > 0, DIVISION_BY_ZERO);\n    quotient = _dividend / _divisor;\n    // assert(_dividend == _divisor * quotient + _dividend % _divisor); // There is no case in which this doesn't hold.\n  }\n\n  /**\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n   * @param _minuend Minuend number.\n   * @param _subtrahend Subtrahend number.\n   * @return Difference.\n   */\n  function sub(\n    uint256 _minuend,\n    uint256 _subtrahend\n  )\n    internal\n    pure\n    returns (uint256 difference)\n  {\n    require(_subtrahend <= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\n    difference = _minuend - _subtrahend;\n  }\n\n  /**\n   * @dev Adds two numbers, reverts on overflow.\n   * @param _addend1 Number.\n   * @param _addend2 Number.\n   * @return Sum.\n   */\n  function add(\n    uint256 _addend1,\n    uint256 _addend2\n  )\n    internal\n    pure\n    returns (uint256 sum)\n  {\n    sum = _addend1 + _addend2;\n    require(sum >= _addend1, OVERFLOW);\n  }\n\n  /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo), reverts when\n    * dividing by zero.\n    * @param _dividend Number.\n    * @param _divisor Number.\n    * @return Remainder.\n    */\n  function mod(\n    uint256 _dividend,\n    uint256 _divisor\n  )\n    internal\n    pure\n    returns (uint256 remainder) \n  {\n    require(_divisor != 0, DIVISION_BY_ZERO);\n    remainder = _dividend % _divisor;\n  }\n\n}\n\n/**\n * @title Contract for setting abilities.\n * @dev For optimization purposes the abilities are represented as a bitfield. Maximum number of\n * abilities is therefore 256. This is an example(for simplicity is made for max 8 abilities) of how\n * this works. \n * 00000001 Ability A - number representation 1\n * 00000010 Ability B - number representation 2\n * 00000100 Ability C - number representation 4\n * 00001000 Ability D - number representation 8\n * 00010000 Ability E - number representation 16\n * etc ... \n * To grant abilities B and C, we would need a bitfield of 00000110 which is represented by number\n * 6, in other words, the sum of abilities B and C. The same concept works for revoking abilities\n * and checking if someone has multiple abilities.\n */\ncontract Abilitable\n{\n  using SafeMath for uint;\n\n  /**\n   * @dev Error constants.\n   */\n  string constant NOT_AUTHORIZED = \"017001\";\n  string constant CANNOT_REVOKE_OWN_SUPER_ABILITY = \"017002\";\n  string constant INVALID_INPUT = \"017003\";\n\n  /**\n   * @dev Ability 1 (00000001) is a reserved ability called super ability. It is an\n   * ability to grant or revoke abilities of other accounts. Other abilities are determined by the\n   * implementing contract.\n   */\n  uint8 constant SUPER_ABILITY = 1;\n\n  /**\n   * @dev Maps address to ability ids.\n   */\n  mapping(address => uint256) public addressToAbility;\n\n  /**\n   * @dev Emits when an address is granted an ability.\n   * @param _target Address to which we are granting abilities.\n   * @param _abilities Number representing bitfield of abilities we are granting.\n   */\n  event GrantAbilities(\n    address indexed _target,\n    uint256 indexed _abilities\n  );\n\n  /**\n   * @dev Emits when an address gets an ability revoked.\n   * @param _target Address of which we are revoking an ability.\n   * @param _abilities Number representing bitfield of abilities we are revoking.\n   */\n  event RevokeAbilities(\n    address indexed _target,\n    uint256 indexed _abilities\n  );\n\n  /**\n   * @dev Guarantees that msg.sender has certain abilities.\n   */\n  modifier hasAbilities(\n    uint256 _abilities\n  ) \n  {\n    require(_abilities > 0, INVALID_INPUT);\n    require(\n      addressToAbility[msg.sender] & _abilities == _abilities,\n      NOT_AUTHORIZED\n    );\n    _;\n  }\n\n  /**\n   * @dev Contract constructor.\n   * Sets SUPER_ABILITY ability to the sender account.\n   */\n  constructor()\n    public\n  {\n    addressToAbility[msg.sender] = SUPER_ABILITY;\n    emit GrantAbilities(msg.sender, SUPER_ABILITY);\n  }\n\n  /**\n   * @dev Grants specific abilities to specified address.\n   * @param _target Address to grant abilities to.\n   * @param _abilities Number representing bitfield of abilities we are granting.\n   */\n  function grantAbilities(\n    address _target,\n    uint256 _abilities\n  )\n    external\n    hasAbilities(SUPER_ABILITY)\n  {\n    addressToAbility[_target] |= _abilities;\n    emit GrantAbilities(_target, _abilities);\n  }\n\n  /**\n   * @dev Unassigns specific abilities from specified address.\n   * @param _target Address of which we revoke abilites.\n   * @param _abilities Number representing bitfield of abilities we are revoking.\n   * @param _allowSuperRevoke Additional check that prevents you from removing your own super\n   * ability by mistake.\n   */\n  function revokeAbilities(\n    address _target,\n    uint256 _abilities,\n    bool _allowSuperRevoke\n  )\n    external\n    hasAbilities(SUPER_ABILITY)\n  {\n    if (!_allowSuperRevoke && msg.sender == _target)\n    {\n      require((_abilities & 1) == 0, CANNOT_REVOKE_OWN_SUPER_ABILITY);\n    }\n    addressToAbility[_target] &= ~_abilities;\n    emit RevokeAbilities(_target, _abilities);\n  }\n\n  /**\n   * @dev Check if an address has a specific ability. Throws if checking for 0.\n   * @param _target Address for which we want to check if it has a specific abilities.\n   * @param _abilities Number representing bitfield of abilities we are checking.\n   */\n  function isAble(\n    address _target,\n    uint256 _abilities\n  )\n    external\n    view\n    returns (bool)\n  {\n    require(_abilities > 0, INVALID_INPUT);\n    return (addressToAbility[_target] & _abilities) == _abilities;\n  }\n  \n}\n\n/**\n * @dev ERC-721 non-fungible token standard. \n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\n */\ninterface ERC721\n{\n\n  /**\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\n   * transfer, the approved address for that NFT (if any) is reset to none.\n   */\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n   * address indicates there is no approved address. When a Transfer event emits, this also\n   * indicates that the approved address for that NFT (if any) is reset to none.\n   */\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n   * all NFTs of the owner.\n   */\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls\n   * `onERC721Received` on `_to` and throws if the return value is not \n   * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   * @param _data Additional data with no specified format, sent in call to `_to`.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes calldata _data\n  )\n    external;\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice This works identically to the other function with an extra data parameter, except this\n   * function just sets data to \"\"\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\n   * address. Throws if `_tokenId` is not a valid NFT.\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n   * they mayb be permanently lost.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Set or reaffirm the approved address for an NFT.\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\n   * the current NFT owner, or an authorized operator of the current owner.\n   * @param _approved The new approved NFT controller.\n   * @param _tokenId The NFT to approve.\n   */\n  function approve(\n    address _approved,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\n   * @notice The contract MUST allow multiple operators per owner.\n   * @param _operator Address to add to the set of authorized operators.\n   * @param _approved True if the operators is approved, false to revoke approval.\n   */\n  function setApprovalForAll(\n    address _operator,\n    bool _approved\n  )\n    external;\n\n  /**\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\n   * considered invalid, and this function throws for queries about the zero address.\n   * @param _owner Address for whom to query the balance.\n   * @return Balance of _owner.\n   */\n  function balanceOf(\n    address _owner\n  )\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\n   * invalid, and queries about them do throw.\n   * @param _tokenId The identifier for an NFT.\n   * @return Address of _tokenId owner.\n   */\n  function ownerOf(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address);\n    \n  /**\n   * @dev Get the approved address for a single NFT.\n   * @notice Throws if `_tokenId` is not a valid NFT.\n   * @param _tokenId The NFT to find the approved address for.\n   * @return Address that _tokenId is approved for. \n   */\n  function getApproved(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address);\n\n  /**\n   * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\n   * @param _owner The address that owns the NFTs.\n   * @param _operator The address that acts on behalf of the owner.\n   * @return True if approved for all, false otherwise.\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    external\n    view\n    returns (bool);\n\n}\n\n/**\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\n */\ninterface ERC721Metadata\n{\n\n  /**\n   * @dev Returns a descriptive name for a collection of NFTs in this contract.\n   * @return Representing name. \n   */\n  function name()\n    external\n    view\n    returns (string memory _name);\n\n  /**\n   * @dev Returns a abbreviated name for a collection of NFTs in this contract.\n   * @return Representing symbol. \n   */\n  function symbol()\n    external\n    view\n    returns (string memory _symbol);\n\n  /**\n   * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\n   * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\n   * that conforms to the \"ERC721 Metadata JSON Schema\".\n   * @return URI of _tokenId.\n   */\n  function tokenURI(uint256 _tokenId)\n    external\n    view\n    returns (string memory);\n\n}\n\n/**\n * @dev Optional enumeration extension for ERC-721 non-fungible token standard.\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\n */\ninterface ERC721Enumerable\n{\n\n  /**\n   * @dev Returns a count of valid NFTs tracked by this contract, where each one of them has an\n   * assigned and queryable owner not equal to the zero address.\n   * @return Total supply of NFTs.\n   */\n  function totalSupply()\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Returns the token identifier for the `_index`th NFT. Sort order is not specified.\n   * @param _index A counter less than `totalSupply()`.\n   * @return Token id.\n   */\n  function tokenByIndex(\n    uint256 _index\n  )\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Returns the token identifier for the `_index`th NFT assigned to `_owner`. Sort order is\n   * not specified. It throws if `_index` >= `balanceOf(_owner)` or if `_owner` is the zero address,\n   * representing invalid NFTs.\n   * @param _owner An address where we are interested in NFTs owned by them.\n   * @param _index A counter less than `balanceOf(_owner)`.\n   * @return Token id.\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    external\n    view\n    returns (uint256);\n\n}\n\n/**\n * @dev ERC-721 interface for accepting safe transfers. \n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\n */\ninterface ERC721TokenReceiver\n{\n\n  /**\n   * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\n   * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\n   * of other than the magic value MUST result in the transaction being reverted.\n   * Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless throwing.\n   * @notice The contract address is always the message sender. A wallet/broker/auction application\n   * MUST implement the wallet interface if it will accept safe transfers.\n   * @param _operator The address which called `safeTransferFrom` function.\n   * @param _from The address which previously owned the token.\n   * @param _tokenId The NFT identifier which is being transferred.\n   * @param _data Additional data with no specified format.\n   * @return Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes calldata _data\n  )\n    external\n    returns(bytes4);\n    \n}\n\n/**\n * @dev A standard for detecting smart contract interfaces.\n * See: https://eips.ethereum.org/EIPS/eip-165.\n */\ninterface ERC165\n{\n\n  /**\n   * @dev Checks if the smart contract implements a specific interface.\n   * @notice This function uses less than 30,000 gas.\n   * @param _interfaceID The interface identifier, as specified in ERC-165.\n   */\n  function supportsInterface(\n    bytes4 _interfaceID\n  )\n    external\n    view\n    returns (bool);\n\n}\n\n/**\n * @dev Implementation of standard to publish supported interfaces.\n */\ncontract SupportsInterface is\n  ERC165\n{\n\n  /**\n   * @dev Mapping of supported intefraces.\n   * @notice You must not set element 0xffffffff to true.\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev Contract constructor.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x01ffc9a7] = true; // ERC165\n  }\n\n  /**\n   * @dev Function to check which interfaces are suported by this contract.\n   * @param _interfaceID Id of the interface.\n   */\n  function supportsInterface(\n    bytes4 _interfaceID\n  )\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceID];\n  }\n\n}\n\n/**\n * @dev Utility library of inline functions on addresses.\n */\nlibrary AddressUtils\n{\n\n  /**\n   * @dev Returns whether the target address is a contract.\n   * @param _addr Address to check.\n   * @return True if _addr is a contract, false if not.\n   */\n  function isContract(\n    address _addr\n  )\n    internal\n    view\n    returns (bool addressCheck)\n  {\n    uint256 size;\n\n    /**\n     * XXX Currently there is no better way to check if there is a contract in an address than to\n     * check the size of the code at that address.\n     * See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\n     * TODO: Check this again before the Serenity release, because all addresses will be\n     * contracts then.\n     */\n    assembly { size := extcodesize(_addr) } // solhint-disable-line\n    addressCheck = size > 0;\n  }\n\n}\n\n/**\n * @dev Optional metadata enumerable implementation for ERC-721 non-fungible token standard.\n */\ncontract NFTokenMetadataEnumerable is\n  ERC721,\n  ERC721Metadata,\n  ERC721Enumerable,\n  SupportsInterface\n{\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  /**\n   * @dev Error constants.\n   */\n  string constant ZERO_ADDRESS = \"006001\";\n  string constant NOT_VALID_NFT = \"006002\";\n  string constant NOT_OWNER_OR_OPERATOR = \"006003\";\n  string constant NOT_OWNER_APPROWED_OR_OPERATOR = \"006004\";\n  string constant NOT_ABLE_TO_RECEIVE_NFT = \"006005\";\n  string constant NFT_ALREADY_EXISTS = \"006006\";\n  string constant INVALID_INDEX = \"006007\";\n\n  /**\n   * @dev Magic value of a smart contract that can recieve NFT.\n   * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\n   */\n  bytes4 constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @dev A descriptive name for a collection of NFTs.\n   */\n  string internal nftName;\n\n  /**\n   * @dev An abbreviated name for NFTs.\n   */\n  string internal nftSymbol;\n\n  /**\n   * @dev URI base for NFT metadata. NFT URI is made from base + NFT id.\n   */\n  string public uriBase;\n\n  /**\n   * @dev Array of all NFT IDs.\n   */\n  uint256[] internal tokens;\n\n  /**\n   * @dev Mapping from token ID its index in global tokens array.\n   */\n  mapping(uint256 => uint256) internal idToIndex;\n\n  /**\n   * @dev Mapping from owner to list of owned NFT IDs.\n   */\n  mapping(address => uint256[]) internal ownerToIds;\n\n  /**\n   * @dev Mapping from NFT ID to its index in the owner tokens list.\n   */\n  mapping(uint256 => uint256) internal idToOwnerIndex;\n\n  /**\n   * @dev A mapping from NFT ID to the address that owns it.\n   */\n  mapping (uint256 => address) internal idToOwner;\n\n  /**\n   * @dev Mapping from NFT ID to approved address.\n   */\n  mapping (uint256 => address) internal idToApproval;\n\n  /**\n   * @dev Mapping from owner address to mapping of operator addresses.\n   */\n  mapping (address => mapping (address => bool)) internal ownerToOperators;\n\n  /**\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\n   * transfer, the approved address for that NFT (if any) is reset to none.\n   * @param _from Sender of NFT (if address is zero address it indicates token creation).\n   * @param _to Receiver of NFT (if address is zero address it indicates token destruction).\n   * @param _tokenId The NFT that got transfered.\n   */\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n   * address indicates there is no approved address. When a Transfer event emits, this also\n   * indicates that the approved address for that NFT (if any) is reset to none.\n   * @param _owner Owner of NFT.\n   * @param _approved Address that we are approving.\n   * @param _tokenId NFT which we are approving.\n   */\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n   * all NFTs of the owner.\n   * @param _owner Owner of NFT.\n   * @param _operator Address to which we are setting operator rights.\n   * @param _approved Status of operator rights(true if operator rights are given and false if\n   * revoked).\n   */\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  /**\n   * @dev Contract constructor.\n   * @notice When implementing this contract don't forget to set nftName, nftSymbol and uriBase.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x80ac58cd] = true; // ERC721\n    supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\n    supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\n  }\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls \n   * `onERC721Received` on `_to` and throws if the return value is not \n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   * @param _data Additional data with no specified format, sent in call to `_to`.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes calldata _data\n  )\n    external\n  {\n    _safeTransferFrom(_from, _to, _tokenId, _data);\n  }\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice This works identically to the other function with an extra data parameter, except this\n   * function just sets data to \"\".\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external\n  {\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\n   * address. Throws if `_tokenId` is not a valid NFT.\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n   * they maybe be permanently lost.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external\n  {\n    _transferFrom(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Set or reaffirm the approved address for an NFT.\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\n   * the current NFT owner, or an authorized operator of the current owner.\n   * @param _approved Address to be approved for the given NFT ID.\n   * @param _tokenId ID of the token to be approved.\n   */\n  function approve(\n    address _approved,\n    uint256 _tokenId\n  )\n    external\n  {\n    // can operate\n    address tokenOwner = idToOwner[_tokenId];\n    require(\n      tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender],\n      NOT_OWNER_OR_OPERATOR\n    );\n\n    idToApproval[_tokenId] = _approved;\n    emit Approval(tokenOwner, _approved, _tokenId);\n  }\n\n  /**\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\n   * @notice This works even if sender doesn't own any tokens at the time.\n   * @param _operator Address to add to the set of authorized operators.\n   * @param _approved True if the operators is approved, false to revoke approval.\n   */\n  function setApprovalForAll(\n    address _operator,\n    bool _approved\n  )\n    external\n  {\n    ownerToOperators[msg.sender][_operator] = _approved;\n    emit ApprovalForAll(msg.sender, _operator, _approved);\n  }\n\n  /**\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\n   * considered invalid, and this function throws for queries about the zero address.\n   * @param _owner Address for whom to query the balance.\n   * @return Balance of _owner.\n   */\n  function balanceOf(\n    address _owner\n  )\n    external\n    view\n    returns (uint256)\n  {\n    require(_owner != address(0), ZERO_ADDRESS);\n    return ownerToIds[_owner].length;\n  }\n\n  /**\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\n   * invalid, and queries about them do throw.\n   * @param _tokenId The identifier for an NFT.\n   * @return Address of _tokenId owner.\n   */\n  function ownerOf(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address _owner)\n  {\n    _owner = idToOwner[_tokenId];\n    require(_owner != address(0), NOT_VALID_NFT);\n  }\n\n  /**\n   * @dev Get the approved address for a single NFT.\n   * @notice Throws if `_tokenId` is not a valid NFT.\n   * @param _tokenId ID of the NFT to query the approval of.\n   * @return Address that _tokenId is approved for. \n   */\n  function getApproved(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address)\n  {\n    require(idToOwner[_tokenId] != address(0), NOT_VALID_NFT);\n    return idToApproval[_tokenId];\n  }\n\n  /**\n   * @dev Checks if `_operator` is an approved operator for `_owner`.\n   * @param _owner The address that owns the NFTs.\n   * @param _operator The address that acts on behalf of the owner.\n   * @return True if approved for all, false otherwise.\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    external\n    view\n    returns (bool)\n  {\n    return ownerToOperators[_owner][_operator];\n  }\n\n  /**\n   * @dev Returns the count of all existing NFTs.\n   * @return Total supply of NFTs.\n   */\n  function totalSupply()\n    external\n    view\n    returns (uint256)\n  {\n    return tokens.length;\n  }\n\n  /**\n   * @dev Returns NFT ID by its index.\n   * @param _index A counter less than `totalSupply()`.\n   * @return Token id.\n   */\n  function tokenByIndex(\n    uint256 _index\n  )\n    external\n    view\n    returns (uint256)\n  {\n    require(_index < tokens.length, INVALID_INDEX);\n    return tokens[_index];\n  }\n\n  /**\n   * @dev returns the n-th NFT ID from a list of owner's tokens.\n   * @param _owner Token owner's address.\n   * @param _index Index number representing n-th token in owner's list of tokens.\n   * @return Token id.\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    external\n    view\n    returns (uint256)\n  {\n    require(_index < ownerToIds[_owner].length, INVALID_INDEX);\n    return ownerToIds[_owner][_index];\n  }\n\n  /**\n   * @dev Returns a descriptive name for a collection of NFTs.\n   * @return Representing name. \n   */\n  function name()\n    external\n    view\n    returns (string memory _name)\n  {\n    _name = nftName;\n  }\n\n  /**\n   * @dev Returns an abbreviated name for NFTs.\n   * @return Representing symbol. \n   */\n  function symbol()\n    external\n    view\n    returns (string memory _symbol)\n  {\n    _symbol = nftSymbol;\n  }\n  \n  /**\n   * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC 3986. The URI may point\n   * to a JSON file that conforms to the \"ERC721 Metadata JSON Schema\".\n   * @param _tokenId Id for which we want URI.\n   * @return URI of _tokenId.\n   */\n  function tokenURI(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (string memory)\n  {\n    require(idToOwner[_tokenId] != address(0), NOT_VALID_NFT);\n    if (bytes(uriBase).length > 0)\n    {\n      return string(abi.encodePacked(uriBase, _uint2str(_tokenId)));\n    }\n    return \"\";\n  }\n\n  /**\n   * @dev Set a distinct URI (RFC 3986) base for all nfts.\n   * @notice this is a internal function which should be called from user-implemented external\n   * function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _uriBase String representing RFC 3986 URI base.\n   */\n  function _setUriBase(\n    string memory _uriBase\n  )\n    internal\n  {\n    uriBase = _uriBase;\n  }\n\n  /**\n   * @dev Creates a new NFT.\n   * @notice This is a private function which should be called from user-implemented external\n   * function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _to The address that will own the created NFT.\n   * @param _tokenId of the NFT to be created by the msg.sender.\n   */\n  function _create(\n    address _to,\n    uint256 _tokenId\n  )\n    internal\n  {\n    require(_to != address(0), ZERO_ADDRESS);\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\n\n    // add NFT\n    idToOwner[_tokenId] = _to;\n\n    uint256 length = ownerToIds[_to].push(_tokenId);\n    idToOwnerIndex[_tokenId] = length - 1;\n\n    // add to tokens array\n    length = tokens.push(_tokenId);\n    idToIndex[_tokenId] = length - 1;\n\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Destroys a NFT.\n   * @notice This is a private function which should be called from user-implemented external\n   * destroy function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _tokenId ID of the NFT to be destroyed.\n   */\n  function _destroy(\n    uint256 _tokenId\n  )\n    internal\n  {\n    // valid NFT\n    address owner = idToOwner[_tokenId];\n    require(owner != address(0), NOT_VALID_NFT);\n\n    // clear approval\n    if (idToApproval[_tokenId] != address(0))\n    {\n      delete idToApproval[_tokenId];\n    }\n\n    // remove NFT\n    assert(ownerToIds[owner].length > 0);\n\n    uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\n    uint256 lastTokenIndex = ownerToIds[owner].length - 1;\n    uint256 lastToken;\n    if (lastTokenIndex != tokenToRemoveIndex)\n    {\n      lastToken = ownerToIds[owner][lastTokenIndex];\n      ownerToIds[owner][tokenToRemoveIndex] = lastToken;\n      idToOwnerIndex[lastToken] = tokenToRemoveIndex;\n    }\n\n    delete idToOwner[_tokenId];\n    delete idToOwnerIndex[_tokenId];\n    ownerToIds[owner].length--;\n\n    // remove from tokens array\n    assert(tokens.length > 0);\n\n    uint256 tokenIndex = idToIndex[_tokenId];\n    lastTokenIndex = tokens.length - 1;\n    lastToken = tokens[lastTokenIndex];\n\n    tokens[tokenIndex] = lastToken;\n\n    tokens.length--;\n    // Consider adding a conditional check for the last token in order to save GAS.\n    idToIndex[lastToken] = tokenIndex;\n    idToIndex[_tokenId] = 0;\n\n    emit Transfer(owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Helper methods that actually does the transfer.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function _transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    internal\n  {\n    // valid NFT\n    require(_from != address(0), ZERO_ADDRESS);\n    require(idToOwner[_tokenId] == _from, NOT_VALID_NFT);\n    require(_to != address(0), ZERO_ADDRESS);\n\n    // can transfer\n    require(\n      _from == msg.sender\n      || idToApproval[_tokenId] == msg.sender\n      || ownerToOperators[_from][msg.sender],\n      NOT_OWNER_APPROWED_OR_OPERATOR\n    );\n\n    // clear approval\n    if (idToApproval[_tokenId] != address(0))\n    {\n      delete idToApproval[_tokenId];\n    }\n\n    // remove NFT\n    assert(ownerToIds[_from].length > 0);\n\n    uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\n    uint256 lastTokenIndex = ownerToIds[_from].length - 1;\n\n    if (lastTokenIndex != tokenToRemoveIndex)\n    {\n      uint256 lastToken = ownerToIds[_from][lastTokenIndex];\n      ownerToIds[_from][tokenToRemoveIndex] = lastToken;\n      idToOwnerIndex[lastToken] = tokenToRemoveIndex;\n    }\n\n    ownerToIds[_from].length--;\n\n    // add NFT\n    idToOwner[_tokenId] = _to;\n    uint256 length = ownerToIds[_to].push(_tokenId);\n    idToOwnerIndex[_tokenId] = length - 1;\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Helper function that actually does the safeTransfer.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   * @param _data Additional data with no specified format, sent in call to `_to`.\n   */\n  function _safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    internal\n  {\n    if (_to.isContract())\n    {\n      require(\n        ERC721TokenReceiver(_to)\n          .onERC721Received(msg.sender, _from, _tokenId, _data) == MAGIC_ON_ERC721_RECEIVED,\n        NOT_ABLE_TO_RECEIVE_NFT\n      );\n    }\n\n    _transferFrom(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Helper function that changes uint to string representation.\n   * @return String representation.\n   */\n  function _uint2str(\n    uint256 _i\n  ) \n    internal\n    pure\n    returns (string memory str)\n  {\n    if (_i == 0)\n    {\n      return \"0\";\n    }\n    uint256 j = _i;\n    uint256 length;\n    while (j != 0)\n    {\n      length++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(length);\n    uint256 k = length - 1;\n    j = _i;\n    while (j != 0)\n    {\n      bstr[k--] = byte(uint8(48 + j % 10));\n      j /= 10;\n    }\n    str = string(bstr);\n  }\n  \n}\n\n/**\n * @dev Xcert implementation.\n */\ncontract XcertToken is \n  Xcert,\n  XcertBurnable,\n  XcertMutable,\n  XcertPausable,\n  XcertRevokable,\n  NFTokenMetadataEnumerable,\n  Abilitable\n{\n\n  /**\n   * @dev List of abilities (gathered from all extensions):\n   */\n  uint8 constant ABILITY_CREATE_ASSET = 2;\n  uint8 constant ABILITY_REVOKE_ASSET = 4;\n  uint8 constant ABILITY_TOGGLE_TRANSFERS = 8;\n  uint8 constant ABILITY_UPDATE_ASSET_IMPRINT = 16;\n  /// ABILITY_ALLOW_CREATE_ASSET = 32 - A specific ability that is bounded to atomic orders.\n  /// When creating a new Xcert trough `OrderGateway`, the order maker has to have this ability.\n  uint8 constant ABILITY_UPDATE_URI_BASE = 64;\n\n  /**\n   * @dev List of capabilities (supportInterface bytes4 representations).\n   */\n  bytes4 constant MUTABLE = 0xbda0e852;\n  bytes4 constant BURNABLE = 0x9d118770;\n  bytes4 constant PAUSABLE = 0xbedb86fb;\n  bytes4 constant REVOKABLE = 0x20c5429b;\n\n  /**\n   * @dev Error constants.\n   */\n  string constant CAPABILITY_NOT_SUPPORTED = \"007001\";\n  string constant TRANSFERS_DISABLED = \"007002\";\n  string constant NOT_VALID_XCERT = \"007003\";\n  string constant NOT_OWNER_OR_OPERATOR = \"007004\";\n\n  /**\n   * @dev This emits when ability of beeing able to transfer Xcerts changes (paused/unpaused).\n   */\n  event IsPaused(bool isPaused);\n\n  /**\n   * @dev Emits when imprint of a token is changed.\n   * @param _tokenId Id of the Xcert.\n   * @param _imprint Cryptographic asset imprint.\n   */\n  event TokenImprintUpdate(\n    uint256 indexed _tokenId,\n    bytes32 _imprint\n  );\n\n  /**\n   * @dev Unique ID which determines each Xcert smart contract type by its JSON convention.\n   * @notice Calculated as keccak256(jsonSchema).\n   */\n  bytes32 internal nftSchemaId;\n\n  /**\n   * @dev Maps NFT ID to imprint.\n   */\n  mapping (uint256 => bytes32) internal idToImprint;\n\n  /**\n   * @dev Maps address to authorization of contract.\n   */\n  mapping (address => bool) internal addressToAuthorized;\n\n  /**\n   * @dev Are Xcerts transfers paused (can be performed) or not.\n   */\n  bool public isPaused;\n\n  /**\n   * @dev Contract constructor.\n   * @notice When implementing this contract don't forget to set nftSchemaId, nftName, nftSymbol\n   * and uriBase.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0xe08725ee] = true; // Xcert\n  }\n\n  /**\n   * @dev Creates a new Xcert.\n   * @param _to The address that will own the created Xcert.\n   * @param _id The Xcert to be created by the msg.sender.\n   * @param _imprint Cryptographic asset imprint.\n   */\n  function create(\n    address _to,\n    uint256 _id,\n    bytes32 _imprint\n  )\n    external\n    hasAbilities(ABILITY_CREATE_ASSET)\n  {\n    super._create(_to, _id);\n    idToImprint[_id] = _imprint;\n  }\n\n  /**\n   * @dev Change URI base.\n   * @param _uriBase New uriBase.\n   */\n  function setUriBase(\n    string calldata _uriBase\n  )\n    external\n    hasAbilities(ABILITY_UPDATE_URI_BASE)\n  {\n    super._setUriBase(_uriBase);\n  }\n\n  /**\n   * @dev Revokes(destroys) a specified Xcert. Reverts if not called from contract owner or \n   * authorized address.\n   * @param _tokenId Id of the Xcert we want to destroy.\n   */\n  function revoke(\n    uint256 _tokenId\n  )\n    external\n    hasAbilities(ABILITY_REVOKE_ASSET)\n  {\n    require(supportedInterfaces[REVOKABLE], CAPABILITY_NOT_SUPPORTED);\n    super._destroy(_tokenId);\n    delete idToImprint[_tokenId];\n  }\n\n  /**\n   * @dev Sets if Xcerts transfers are paused (can be performed) or not.\n   * @param _isPaused Pause status.\n   */\n  function setPause(\n    bool _isPaused\n  )\n    external\n    hasAbilities(ABILITY_TOGGLE_TRANSFERS)\n  {\n    require(supportedInterfaces[PAUSABLE], CAPABILITY_NOT_SUPPORTED);\n    isPaused = _isPaused;\n    emit IsPaused(_isPaused);\n  }\n\n  /**\n   * @dev Updates Xcert imprint.\n   * @param _tokenId Id of the Xcert.\n   * @param _imprint New imprint.\n   */\n  function updateTokenImprint(\n    uint256 _tokenId,\n    bytes32 _imprint\n  )\n    external\n    hasAbilities(ABILITY_UPDATE_ASSET_IMPRINT)\n  {\n    require(supportedInterfaces[MUTABLE], CAPABILITY_NOT_SUPPORTED);\n    require(idToOwner[_tokenId] != address(0), NOT_VALID_XCERT);\n    idToImprint[_tokenId] = _imprint;\n    emit TokenImprintUpdate(_tokenId, _imprint);\n  }\n\n  /**\n   * @dev Destroys a specified Xcert. Reverts if not called from Xcert owner or operator.\n   * @param _tokenId Id of the Xcert we want to destroy.\n   */\n  function destroy(\n    uint256 _tokenId\n  )\n    external\n  {\n    require(supportedInterfaces[BURNABLE], CAPABILITY_NOT_SUPPORTED);\n    address tokenOwner = idToOwner[_tokenId];\n    super._destroy(_tokenId);\n    require(\n      tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender],\n      NOT_OWNER_OR_OPERATOR\n    );\n    delete idToImprint[_tokenId];\n  }\n\n  /**\n   * @dev Returns a bytes32 of sha256 of json schema representing 0xcert Protocol convention.\n   * @return Schema id.\n   */\n  function schemaId()\n    external\n    view\n    returns (bytes32 _schemaId)\n  {\n    _schemaId = nftSchemaId;\n  }\n\n  /**\n   * @dev Returns imprint for Xcert.\n   * @param _tokenId Id of the Xcert.\n   * @return Token imprint.\n   */\n  function tokenImprint(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns(bytes32 imprint)\n  {\n    imprint = idToImprint[_tokenId];\n  }\n\n  /**\n   * @dev Helper methods that actually does the transfer.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function _transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    internal\n  {\n    /**\n     * if (supportedInterfaces[0xbedb86fb])\n     * {\n     *   require(!isPaused, TRANSFERS_DISABLED);\n     * }\n     * There is no need to check for pausable capability here since by using logical deduction we \n     * can say based on code above that:\n     * !supportedInterfaces[0xbedb86fb] => !isPaused\n     * isPaused => supportedInterfaces[0xbedb86fb]\n     * (supportedInterfaces[0xbedb86fb] ∧ isPaused) <=> isPaused. \n     * This saves 200 gas.\n     */\n    require(!isPaused, TRANSFERS_DISABLED); \n    super._transferFrom(_from, _to, _tokenId);\n  }\n}\n\n/**\n * @title XcertCreateProxy - creates a token on behalf of contracts that have been approved via\n * decentralized governance.\n */\ncontract XcertCreateProxy is \n  Abilitable \n{\n\n  /**\n   * @dev List of abilities:\n   * 2 - Ability to execute create. \n   */\n  uint8 constant ABILITY_TO_EXECUTE = 2;\n\n  /**\n   * @dev Creates a new NFT.\n   * @param _xcert Address of the Xcert contract on which the creation will be perfomed.\n   * @param _to The address that will own the created NFT.\n   * @param _id The NFT to be created by the msg.sender.\n   * @param _imprint Cryptographic asset imprint.\n   */\n  function create(\n    address _xcert,\n    address _to,\n    uint256 _id,\n    bytes32 _imprint\n  )\n    external\n    hasAbilities(ABILITY_TO_EXECUTE)\n  {\n    Xcert(_xcert).create(_to, _id, _imprint);\n  }\n  \n}\n\npragma experimental ABIEncoderV2;\n\n\n\n\n/**\n * @dev Decentralize exchange, creating, updating and other actions for fundgible and non-fundgible \n * tokens powered by atomic swaps. \n */\ncontract OrderGateway is\n  Abilitable\n{\n\n  /**\n   * @dev List of abilities:\n   * 2 - Ability to set proxies.\n   */\n  uint8 constant ABILITY_TO_SET_PROXIES = 2;\n\n  /**\n   * @dev Xcert abilities.\n   */\n  uint8 constant ABILITY_ALLOW_CREATE_ASSET = 32;\n\n  /**\n   * @dev Error constants.\n   */\n  string constant INVALID_SIGNATURE_KIND = \"015001\";\n  string constant INVALID_PROXY = \"015002\";\n  string constant TAKER_NOT_EQUAL_TO_SENDER = \"015003\";\n  string constant SENDER_NOT_TAKER_OR_MAKER = \"015004\";\n  string constant CLAIM_EXPIRED = \"015005\";\n  string constant INVALID_SIGNATURE = \"015006\";\n  string constant ORDER_CANCELED = \"015007\";\n  string constant ORDER_ALREADY_PERFORMED = \"015008\";\n  string constant MAKER_NOT_EQUAL_TO_SENDER = \"015009\";\n  string constant SIGNER_NOT_AUTHORIZED = \"015010\";\n\n  /**\n   * @dev Enum of available signature kinds.\n   * @param eth_sign Signature using eth sign.\n   * @param trezor Signature from Trezor hardware wallet.\n   * It differs from web3.eth_sign in the encoding of message length\n   * (Bitcoin varint encoding vs ascii-decimal, the latter is not\n   * self-terminating which leads to ambiguities).\n   * See also:\n   * https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer\n   * https://github.com/trezor/trezor-mcu/blob/master/firmware/ethereum.c#L602\n   * https://github.com/trezor/trezor-mcu/blob/master/firmware/crypto.c#L36 \n   * @param eip721 Signature using eip721.\n   */\n  enum SignatureKind\n  {\n    eth_sign,\n    trezor,\n    eip712\n  }\n\n  /**\n   * Enum of available action kinds.\n   */\n  enum ActionKind\n  {\n    create,\n    transfer\n  }\n\n  /**\n   * @dev Structure representing what to send and where.\n   * @param kind Enum representing action kind. \n   * @param proxy Id representing approved proxy address.\n   * @param token Address of the token we are sending.\n   * @param param1 Address of the sender or imprint.\n   * @param to Address of the receiver.\n   * @param value Amount of ERC20 or ID of ERC721.\n   */\n  struct ActionData \n  {\n    ActionKind kind;\n    uint32 proxy;\n    address token;\n    bytes32 param1;\n    address to;\n    uint256 value;\n  }\n\n  /**\n   * @dev Structure representing the signature parts.\n   * @param r ECDSA signature parameter r.\n   * @param s ECDSA signature parameter s.\n   * @param v ECDSA signature parameter v.\n   * @param kind Type of signature. \n   */\n  struct SignatureData\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n    SignatureKind kind;\n  }\n\n  /**\n   * @dev Structure representing the data needed to do the order.\n   * @param maker Address of the one that made the claim.\n   * @param taker Address of the one that is executing the claim.\n   * @param actions Data of all the actions that should accure it this order.\n   * @param signature Data from the signed claim.\n   * @param seed Arbitrary number to facilitate uniqueness of the order's hash. Usually timestamp.\n   * @param expiration Timestamp of when the claim expires. 0 if indefinet. \n   */\n  struct OrderData \n  {\n    address maker;\n    address taker;\n    ActionData[] actions;\n    uint256 seed;\n    uint256 expiration;\n  }\n\n  /** \n   * @dev Valid proxy contract addresses.\n   */\n  address[] public proxies;\n\n  /**\n   * @dev Mapping of all cancelled orders.\n   */\n  mapping(bytes32 => bool) public orderCancelled;\n\n  /**\n   * @dev Mapping of all performed orders.\n   */\n  mapping(bytes32 => bool) public orderPerformed;\n\n  /**\n   * @dev This event emmits when tokens change ownership.\n   */\n  event Perform(\n    address indexed _maker,\n    address indexed _taker,\n    bytes32 _claim\n  );\n\n  /**\n   * @dev This event emmits when transfer order is cancelled.\n   */\n  event Cancel(\n    address indexed _maker,\n    address indexed _taker,\n    bytes32 _claim\n  );\n\n  /**\n   * @dev This event emmits when proxy address is changed..\n   */\n  event ProxyChange(\n    uint256 indexed _index,\n    address _proxy\n  );\n\n  /**\n   * @dev Adds a verified proxy address. \n   * @notice Can be done through a multisig wallet in the future.\n   * @param _proxy Proxy address.\n   */\n  function addProxy(\n    address _proxy\n  )\n    external\n    hasAbilities(ABILITY_TO_SET_PROXIES)\n  {\n    uint256 length = proxies.push(_proxy);\n    emit ProxyChange(length - 1, _proxy);\n  }\n\n  /**\n   * @dev Removes a proxy address. \n   * @notice Can be done through a multisig wallet in the future.\n   * @param _index Index of proxy we are removing.\n   */\n  function removeProxy(\n    uint256 _index\n  )\n    external\n    hasAbilities(ABILITY_TO_SET_PROXIES)\n  {\n    proxies[_index] = address(0);\n    emit ProxyChange(_index, address(0));\n  }\n\n  /**\n   * @dev Performs the atomic swap that can exchange, create, update and do other actions for\n   * fungible and non-fungible tokens.\n   * @param _data Data required to make the order.\n   * @param _signature Data from the signature. \n   */\n  function perform(\n    OrderData memory _data,\n    SignatureData memory _signature\n  )\n    public \n  {\n    require(_data.taker == msg.sender, TAKER_NOT_EQUAL_TO_SENDER);\n    require(_data.expiration >= now, CLAIM_EXPIRED);\n\n    bytes32 claim = getOrderDataClaim(_data);\n    require(\n      isValidSignature(\n        _data.maker,\n        claim,\n        _signature\n      ), \n      INVALID_SIGNATURE\n    );\n\n    require(!orderCancelled[claim], ORDER_CANCELED);\n    require(!orderPerformed[claim], ORDER_ALREADY_PERFORMED);\n\n    orderPerformed[claim] = true;\n\n    _doActions(_data);\n\n    emit Perform(\n      _data.maker,\n      _data.taker,\n      claim\n    );\n  }\n\n  /** \n   * @dev Cancels order.\n   * @notice You can cancel the same order multiple times. There is no check for whether the order\n   * was already canceled due to gas optimization. You should either check orderCancelled variable\n   * or listen to Cancel event if you want to check if an order is already canceled.\n   * @param _data Data of order to cancel.\n   */\n  function cancel(\n    OrderData memory _data\n  )\n    public\n  {\n    require(_data.maker == msg.sender, MAKER_NOT_EQUAL_TO_SENDER);\n\n    bytes32 claim = getOrderDataClaim(_data);\n    require(!orderPerformed[claim], ORDER_ALREADY_PERFORMED);\n\n    orderCancelled[claim] = true;\n    emit Cancel(\n      _data.maker,\n      _data.taker,\n      claim\n    );\n  }\n\n  /**\n   * @dev Calculates keccak-256 hash of OrderData from parameters.\n   * @param _orderData Data needed for atomic swap.\n   * @return keccak-hash of order data.\n   */\n  function getOrderDataClaim(\n    OrderData memory _orderData\n  )\n    public\n    view\n    returns (bytes32)\n  {\n    bytes32 temp = 0x0;\n\n    for(uint256 i = 0; i < _orderData.actions.length; i++)\n    {\n      temp = keccak256(\n        abi.encodePacked(\n          temp,\n          _orderData.actions[i].kind,\n          _orderData.actions[i].proxy,\n          _orderData.actions[i].token,\n          _orderData.actions[i].param1,\n          _orderData.actions[i].to,\n          _orderData.actions[i].value\n        )\n      );\n    }\n\n    return keccak256(\n      abi.encodePacked(\n        address(this),\n        _orderData.maker,\n        _orderData.taker,\n        temp,\n        _orderData.seed,\n        _orderData.expiration\n      )\n    );\n  }\n  \n  /**\n   * @dev Verifies if claim signature is valid.\n   * @param _signer address of signer.\n   * @param _claim Signed Keccak-256 hash.\n   * @param _signature Signature data.\n   */\n  function isValidSignature(\n    address _signer,\n    bytes32 _claim,\n    SignatureData memory _signature\n  )\n    public\n    pure\n    returns (bool)\n  {\n    if (_signature.kind == SignatureKind.eth_sign)\n    {\n      return _signer == ecrecover(\n        keccak256(\n          abi.encodePacked(\n            \"\\x19Ethereum Signed Message:\\n32\",\n            _claim\n          )\n        ),\n        _signature.v,\n        _signature.r,\n        _signature.s\n      );\n    } else if (_signature.kind == SignatureKind.trezor)\n    {\n      return _signer == ecrecover(\n        keccak256(\n          abi.encodePacked(\n            \"\\x19Ethereum Signed Message:\\n\\x20\",\n            _claim\n          )\n        ),\n        _signature.v,\n        _signature.r,\n        _signature.s\n      );\n    } else if (_signature.kind == SignatureKind.eip712)\n    {\n      return _signer == ecrecover(\n        _claim,\n        _signature.v,\n        _signature.r,\n        _signature.s\n      );\n    }\n\n    revert(INVALID_SIGNATURE_KIND);\n  }\n\n  /**\n   * @dev Helper function that makes transfes.\n   * @param _order Data needed for order.\n   */\n  function _doActions(\n    OrderData memory _order\n  )\n    private\n  {\n    for(uint256 i = 0; i < _order.actions.length; i++)\n    {\n      require(\n        proxies[_order.actions[i].proxy] != address(0),\n        INVALID_PROXY\n      );\n\n      if (_order.actions[i].kind == ActionKind.create)\n      {\n        require(\n          Abilitable(_order.actions[i].token).isAble(_order.maker, ABILITY_ALLOW_CREATE_ASSET),\n          SIGNER_NOT_AUTHORIZED\n        );\n        \n        XcertCreateProxy(proxies[_order.actions[i].proxy]).create(\n          _order.actions[i].token,\n          _order.actions[i].to,\n          _order.actions[i].value,\n          _order.actions[i].param1\n        );\n      } \n      else if (_order.actions[i].kind == ActionKind.transfer)\n      {\n        address from = address(uint160(bytes20(_order.actions[i].param1)));\n        require(\n          from == _order.maker\n          || from == _order.taker,\n          SENDER_NOT_TAKER_OR_MAKER\n        );\n        \n        Proxy(proxies[_order.actions[i].proxy]).execute(\n          _order.actions[i].token,\n          from,\n          _order.actions[i].to,\n          _order.actions[i].value\n        );\n      }\n    }\n  }\n  \n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"grantAbilities\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"addProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"name\":\"kind\",\"type\":\"uint8\"},{\"name\":\"proxy\",\"type\":\"uint32\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"param1\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"actions\",\"type\":\"tuple[]\"},{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAbility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderCancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"name\":\"kind\",\"type\":\"uint8\"},{\"name\":\"proxy\",\"type\":\"uint32\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"param1\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"actions\",\"type\":\"tuple[]\"},{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"_data\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"perform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_claim\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_abilities\",\"type\":\"uint256\"},{\"name\":\"_allowSuperRevoke\",\"type\":\"bool\"}],\"name\":\"revokeAbilities\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"isAble\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"name\":\"kind\",\"type\":\"uint8\"},{\"name\":\"proxy\",\"type\":\"uint32\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"param1\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"actions\",\"type\":\"tuple[]\"},{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"_orderData\",\"type\":\"tuple\"}],\"name\":\"getOrderDataClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderPerformed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"Perform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"ProxyChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"GrantAbilities\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_abilities\",\"type\":\"uint256\"}],\"name\":\"RevokeAbilities\",\"type\":\"event\"}]",
  "bytecode": "6080604081815233600081815260208190529182206001908190559290917fc4adfc5f00262a1ab9b2241c7e98408a91e58dc5777d786164bba34a7652f62f91a3611a608061004f6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638b1d83351161008c578063aca910e711610066578063aca910e7146101b1578063ba00a330146101c4578063d1c87f30146101d7578063d981e736146101ea576100cf565b80638b1d83351461016b5780638fa76d8d1461017e578063abd90f8514610191576100cf565b80630ab319e8146100d457806323b11d8d146100e957806336d63aca146100fc5780633ab7d8411461010f57806345a32c86146101225780635889bf5e1461014b575b600080fd5b6100e76100e236600461147d565b6101fd565b005b6100e76100f736600461140a565b6102d1565b6100e761010a366004611536565b6103d0565b6100e761011d366004611518565b6104f3565b61013561013036600461140a565b6105e5565b6040516101429190611897565b60405180910390f35b61015e610159366004611518565b6105f7565b6040516101429190611889565b6100e761017936600461156b565b61060c565b61015e61018c366004611430565b610836565b6101a461019f366004611518565b61099e565b60405161014291906117ec565b6100e76101bf3660046114b7565b6109c6565b61015e6101d236600461147d565b610aeb565b6101356101e5366004611536565b610b57565b61015e6101f8366004611518565b610ca8565b6040805180820190915260068152600160d01b6530313730303302602082015260019061022e565b60405180910390fd5b50336000908152602081815260409182902054825180840190935260068352600160d01b6530313730303102918301919091528216821461028557604051600160e51b62461bcd02815260040161022591906118c0565b506001600160a01b038316600081815260208190526040808220805486179055518492917fc4adfc5f00262a1ab9b2241c7e98408a91e58dc5777d786164bba34a7652f62f91a3505050565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b653031373030310291830191909152600291908216821461034657604051600160e51b62461bcd02815260040161022591906118c0565b50600180548082018083556000929092527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b0319166001600160a01b0386161790556040517f8edda873a8ad561ecebeb71ceb3ae6bcb70c2b76a3fcb869859895c4d4fc7416906103c39086906117ec565b60405180910390a2505050565b80516040805180820190915260068152600160d01b65303135303039026020820152906001600160a01b0316331461041e57604051600160e51b62461bcd02815260040161022591906118c0565b50600061042a82610b57565b60008181526003602090815260409182902054825180840190935260068352600160d31b65060626a6060702918301919091529192509060ff161561048557604051600160e51b62461bcd02815260040161022591906118c0565b50600081815260026020908152604091829020805460ff19166001179055830151835191516001600160a01b0391821692909116907f421b43caf093b5e58d1ea89ca0d80151eda923342cf3cfddf5eb6b30d4947ba0906104e7908590611897565b60405180910390a35050565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b653031373030310291830191909152600291908216821461056857604051600160e51b62461bcd02815260040161022591906118c0565b50600060018381548110151561057a57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550817f8edda873a8ad561ecebeb71ceb3ae6bcb70c2b76a3fcb869859895c4d4fc741660006040516105d991906117fa565b60405180910390a25050565b60006020819052908152604090205481565b60026020526000908152604090205460ff1681565b6020808301516040805180820190915260068152600160d01b6530313530303302928101929092526001600160a01b0316331461065f57604051600160e51b62461bcd02815260040161022591906118c0565b5060808201516040805180820190915260068152600160d01b65303135303035026020820152904211156106a957604051600160e51b62461bcd02815260040161022591906118c0565b5060006106b583610b57565b90506106c683600001518284610836565b604051806040016040528060068152602001600160d11b6518189a98181b0281525090151561070b57604051600160e51b62461bcd02815260040161022591906118c0565b5060008181526002602090815260409182902054825180840190935260068352600160d01b65303135303037029183019190915260ff161561076357604051600160e51b62461bcd02815260040161022591906118c0565b5060008181526003602090815260409182902054825180840190935260068352600160d31b65060626a60607029183019190915260ff16156107bb57604051600160e51b62461bcd02815260040161022591906118c0565b506000818152600360205260409020805460ff191660011790556107de83610cbd565b82602001516001600160a01b031683600001516001600160a01b03167fdd97b854c02f699ea0d8984479d0012fbbbd0f4f80fc2e099315f6c47a3da178836040516108299190611897565b60405180910390a3505050565b6000808260600151600281111561084957fe5b14156108eb5760018360405160200161086291906117c1565b60405160208183030381529060405280519060200120836040015184600001518560200151604051600081526020016040526040516108a494939291906118a5565b6020604051602081039080840390855afa1580156108c6573d6000803e3d6000fd5b505050602060405103516001600160a01b0316846001600160a01b0316149050610997565b6001826060015160028111156108fd57fe5b14156109165760018360405160200161086291906117e1565b60028260600151600281111561092857fe5b141561095d57600183836040015184600001518560200151604051600081526020016040526040516108a494939291906118a5565b60408051808201825260068152600160d01b653031353030310260208201529051600160e51b62461bcd02815261022591906004016118c0565b9392505050565b60018054829081106109ac57fe5b6000918252602090912001546001600160a01b0316905081565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b6530313730303102918301919091526001919082168214610a3b57604051600160e51b62461bcd02815260040161022591906118c0565b5081158015610a525750336001600160a01b038516145b15610a9e576040805180820190915260068152600160d11b6518189b9818190260208201526001841615610a9c57604051600160e51b62461bcd02815260040161022591906118c0565b505b6001600160a01b03841660008181526020819052604080822080548719169055518592917fbb71944f65b9a48cc7d835179fb5e874f29b60aa0195785fb54968d8dddef08a91a350505050565b6040805180820190915260068152600160d01b65303137303033026020820152600090821515610b3157604051600160e51b62461bcd02815260040161022591906118c0565b50506001600160a01b038216600090815260208190526040902054811681145b92915050565b600080805b836040015151811015610c5e5781846040015182815181101515610b7c57fe5b60209081029091010151516040860151805184908110610b9857fe5b9060200190602002015160200151866040015184815181101515610bb857fe5b9060200190602002015160400151876040015185815181101515610bd857fe5b9060200190602002015160600151886040015186815181101515610bf857fe5b9060200190602002015160800151896040015187815181101515610c1857fe5b9060200190602002015160a00151604051602001610c3c9796959493929190611746565b60408051601f1981840301815291905280516020909101209150600101610b5c565b5030836000015184602001518386606001518760800151604051602001610c8a969594939291906116dc565b60405160208183030381529060405280519060200120915050919050565b60036020526000908152604090205460ff1681565b60005b816040015151811015611184576040820151805160009160019184908110610ce457fe5b906020019060200201516020015163ffffffff16815481101515610d0457fe5b600091825260209182902001546040805180820190915260068152600160d11b6518189a981819029281019290925290916001600160a01b039091161415610d6257604051600160e51b62461bcd02815260040161022591906118c0565b5060006040830151805183908110610d7657fe5b60209081029091010151516001811115610d8c57fe5b1415610fa1576040820151805182908110610da357fe5b90602001906020020151604001516001600160a01b031663ba00a330836000015160206040518363ffffffff1660e01b8152600401610de392919061186e565b60206040518083038186803b158015610dfb57600080fd5b505afa158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e3391908101906114fa565b604051806040016040528060068152602001600160d41b6503031353031302815250901515610e7857604051600160e51b62461bcd02815260040161022591906118c0565b506001826040015182815181101515610e8d57fe5b906020019060200201516020015163ffffffff16815481101515610ead57fe5b600091825260209091200154604083015180516001600160a01b03909216916346009b0e919084908110610edd57fe5b9060200190602002015160400151846040015184815181101515610efd57fe5b9060200190602002015160800151856040015185815181101515610f1d57fe5b9060200190602002015160a00151866040015186815181101515610f3d57fe5b90602001906020020151606001516040518563ffffffff1660e01b8152600401610f6a9493929190611846565b600060405180830381600087803b158015610f8457600080fd5b505af1158015610f98573d6000803e3d6000fd5b5050505061117c565b60016040830151805183908110610fb457fe5b60209081029091010151516001811115610fca57fe5b141561117c576000826040015182815181101515610fe457fe5b906020019060200201516060015160601c905082600001516001600160a01b0316816001600160a01b03161480611030575082602001516001600160a01b0316816001600160a01b0316145b604051806040016040528060068152602001600160d21b650c0c4d4c0c0d0281525090151561107557604051600160e51b62461bcd02815260040161022591906118c0565b50600183604001518381518110151561108a57fe5b906020019060200201516020015163ffffffff168154811015156110aa57fe5b600091825260209091200154604084015180516001600160a01b039092169163239aee069190859081106110da57fe5b9060200190602002015160400151838660400151868151811015156110fb57fe5b906020019060200201516080015187604001518781518110151561111b57fe5b9060200190602002015160a001516040518563ffffffff1660e01b81526004016111489493929190611808565b600060405180830381600087803b15801561116257600080fd5b505af1158015611176573d6000803e3d6000fd5b50505050505b600101610cc0565b5050565b6000610997823561192b565b6000601f820183136111a557600080fd5b81356111b86111b3826118f8565b6118d1565b915081818352602084019350602081019050838560c08402820111156111dd57600080fd5b60005b8381101561120b57816111f38882611251565b84525060209092019160c091909101906001016111e0565b5050505092915050565b60006109978235611936565b60006109978251611936565b6000610997823561193b565b60006109978235611969565b60006109978235611978565b600060c0828403121561126357600080fd5b61126d60c06118d1565b9050600061127b8484611239565b825250602061128c848483016113f2565b60208301525060406112a084828501611188565b60408301525060606112b48482850161122d565b60608301525060806112c884828501611188565b60808301525060a06112dc8482850161122d565b60a08301525092915050565b600060a082840312156112fa57600080fd5b61130460a06118d1565b905060006113128484611188565b825250602061132384848301611188565b602083015250604082013567ffffffffffffffff81111561134357600080fd5b61134f84828501611194565b60408301525060606113638482850161122d565b60608301525060806113778482850161122d565b60808301525092915050565b60006080828403121561139557600080fd5b61139f60806118d1565b905060006113ad848461122d565b82525060206113be8484830161122d565b60208301525060406113d2848285016113fe565b60408301525060606113e684828501611245565b60608301525092915050565b6000610997823561195a565b60006109978235611963565b60006020828403121561141c57600080fd5b60006114288484611188565b949350505050565b600080600060c0848603121561144557600080fd5b60006114518686611188565b93505060206114628682870161122d565b925050604061147386828701611383565b9150509250925092565b6000806040838503121561149057600080fd5b600061149c8585611188565b92505060206114ad8582860161122d565b9150509250929050565b6000806000606084860312156114cc57600080fd5b60006114d88686611188565b93505060206114e98682870161122d565b925050604061147386828701611215565b60006020828403121561150c57600080fd5b60006114288484611221565b60006020828403121561152a57600080fd5b6000611428848461122d565b60006020828403121561154857600080fd5b813567ffffffffffffffff81111561155f57600080fd5b611428848285016112e8565b60008060a0838503121561157e57600080fd5b823567ffffffffffffffff81111561159557600080fd5b6115a1858286016112e8565b92505060206114ad85828601611383565b6115bb81611987565b82525050565b6115bb8161192b565b6115bb6115d68261192b565b6119e3565b6115bb81611936565b6115bb8161193b565b6115bb6115f98261193b565b61193b565b6115bb61160a82611992565b6119ff565b600061161a82611919565b611624818561191d565b93506116348185602086016119b3565b61163d81611a0a565b9093019392505050565b6000611654601c83611926565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0192915050565b600061168d601b83611926565b7f19457468657265756d205369676e6564204d6573736167653a0a2000000000008152601b0192915050565b6115bb6116c58261195a565b6119f4565b6115bb816119a8565b6115bb81611963565b60006116e882896115ca565b6014820191506116f882886115ca565b60148201915061170882876115ca565b60148201915061171882866115ed565b60208201915061172882856115ed565b60208201915061173882846115ed565b506020019695505050505050565b6000611752828a6115ed565b60208201915061176282896115fe565b60018201915061177282886116b9565b60048201915061178282876115ca565b60148201915061179282866115ed565b6020820191506117a282856115ca565b6014820191506117b282846115ed565b50602001979650505050505050565b60006117cc82611647565b91506117d882846115ed565b50602001919050565b60006117cc82611680565b60208101610b5182846115c1565b60208101610b5182846115b2565b6080810161181682876115c1565b61182360208301866115c1565b61183060408301856115c1565b61183d60608301846115e4565b95945050505050565b6080810161185482876115c1565b61186160208301866115c1565b61183060408301856115e4565b6040810161187c82856115c1565b61099760208301846116ca565b60208101610b5182846115db565b60208101610b5182846115e4565b608081016118b382876115e4565b61186160208301866116d3565b60208082528101610997818461160f565b60405181810167ffffffffffffffff811182821017156118f057600080fd5b604052919050565b600067ffffffffffffffff82111561190f57600080fd5b5060209081020190565b5190565b90815260200190565b919050565b6000610b518261194e565b151590565b90565b60006002821061194a57fe5b5090565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b60006002821061194a57600080fd5b60006003821061194a57600080fd5b6000610b518261199d565b6000610b518261193e565b6000610b518261192b565b6000610b5182611963565b60005b838110156119ce5781810151838201526020016119b6565b838111156119dd576000848401525b50505050565b6000610b51826000610b5182611a20565b6000610b5182611a14565b6000610b5182611a1a565b601f01601f191690565b60e01b90565b60f81b90565b60601b9056fea265627a7a7230582035d95e84b77938745f31baeaa0bed8c296c14afd93751ba5b8d062c559fa9d196c6578706572696d656e74616cf50037",
  "constructorArguments": ""
}