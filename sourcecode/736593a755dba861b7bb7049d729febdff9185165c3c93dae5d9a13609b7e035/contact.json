{
  "address": "0x288d045357ac63438278af0b5b84d677713e7c30",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PrivatePaymentProcessor",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-25\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Destructible.sol\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() public onlyOwner {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) public onlyOwner {\n    selfdestruct(_recipient);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Contactable.sol\n\n/**\n * @title Contactable token\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n * contact information.\n */\ncontract Contactable is Ownable {\n\n  string public contactInformation;\n\n  /**\n    * @dev Allows the owner to set a string with their contact information.\n    * @param _info The contact information to attach to the contract.\n    */\n  function setContactInformation(string _info) public onlyOwner {\n    contactInformation = _info;\n  }\n}\n\n// File: monetha-utility-contracts/contracts/Restricted.sol\n\n/** @title Restricted\n *  Exposes onlyMonetha modifier\n */\ncontract Restricted is Ownable {\n\n    //MonethaAddress set event\n    event MonethaAddressSet(\n        address _address,\n        bool _isMonethaAddress\n    );\n\n    mapping (address => bool) public isMonethaAddress;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n     */\n    modifier onlyMonetha() {\n        require(isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  Allows owner to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        emit MonethaAddressSet(_address, _isMonethaAddress);\n    }\n}\n\n// File: monetha-loyalty-contracts/contracts/IMonethaVoucher.sol\n\ninterface IMonethaVoucher {\n    /**\n    * @dev Total number of vouchers in shared pool\n    */\n    function totalInSharedPool() external view returns (uint256);\n\n    /**\n     * @dev Converts vouchers to equivalent amount of wei.\n     * @param _value amount of vouchers (vouchers) to convert to amount of wei\n     * @return A uint256 specifying the amount of wei.\n     */\n    function toWei(uint256 _value) external view returns (uint256);\n\n    /**\n     * @dev Converts amount of wei to equivalent amount of vouchers.\n     * @param _value amount of wei to convert to vouchers (vouchers)\n     * @return A uint256 specifying the amount of vouchers.\n     */\n    function fromWei(uint256 _value) external view returns (uint256);\n\n    /**\n     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\n     * @param _for address to apply discount for\n     * @param _vouchers amount of vouchers to return to shared pool\n     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\n     */\n    function applyDiscount(address _for, uint256 _vouchers) external returns (uint256 amountVouchers, uint256 amountWei);\n\n    /**\n     * @dev Applies payback by transferring vouchers from the shared pool to the user.\n     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\n     * @param _for address to apply payback for\n     * @param _amountWei amount of Ether to estimate the amount of vouchers\n     * @return The number of vouchers added\n     */\n    function applyPayback(address _for, uint256 _amountWei) external returns (uint256 amountVouchers);\n\n    /**\n     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\n     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\n     * a separate pool and may not be expired.\n     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\n     */\n    function buyVouchers(uint256 _vouchers) external payable;\n\n    /**\n     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\n     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\n     * @param _vouchers The amount of vouchers to sell.\n     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\n     */\n    function sellVouchers(uint256 _vouchers) external returns(uint256 weis);\n\n    /**\n     * @dev Function allows Monetha account to release the purchased vouchers to any address.\n     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\n     * it will be returned to shared pool. May be called only by Monetha.\n     * @param _to address to release vouchers to.\n     * @param _value the amount of vouchers to release.\n     */\n    function releasePurchasedTo(address _to, uint256 _value) external returns (bool);\n\n    /**\n     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\n     * @param owner The address which owns the funds.\n     * @return A uint256 specifying the amount of vouchers still available for the owner.\n     */\n    function purchasedBy(address owner) external view returns (uint256);\n}\n\n// File: contracts/GenericERC20.sol\n\n/**\n* @title GenericERC20 interface\n*/\ncontract GenericERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function decimals() public view returns(uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n        \n    // Return type not defined intentionally since not all ERC20 tokens return proper result type\n    function transfer(address _to, uint256 _value) public;\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/MonethaGateway.sol\n\n/**\n *  @title MonethaGateway\n *\n *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\n */\ncontract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\n\n    using SafeMath for uint256;\n\n    string constant VERSION = \"0.6\";\n\n    /**\n     *  Fee permille of Monetha fee.\n     *  1 permille (‰) = 0.1 percent (%)\n     *  15‰ = 1.5%\n     */\n    uint public constant FEE_PERMILLE = 15;\n\n\n    uint public constant PERMILLE_COEFFICIENT = 1000;\n\n    /**\n     *  Address of Monetha Vault for fee collection\n     */\n    address public monethaVault;\n\n    /**\n     *  Account for permissions managing\n     */\n    address public admin;\n\n    /**\n     * Monetha voucher contract\n     */\n    IMonethaVoucher public monethaVoucher;\n\n    /**\n     *  Max. discount permille.\n     *  10 permille = 1 %\n     */\n    uint public MaxDiscountPermille;\n\n    event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome);\n    event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome);\n    event MonethaVoucherChanged(\n        address indexed previousMonethaVoucher,\n        address indexed newMonethaVoucher\n    );\n    event MaxDiscountPermilleChanged(uint prevPermilleValue, uint newPermilleValue);\n\n    /**\n     *  @param _monethaVault Address of Monetha Vault\n     */\n    constructor(address _monethaVault, address _admin, IMonethaVoucher _monethaVoucher) public {\n        require(_monethaVault != 0x0);\n        monethaVault = _monethaVault;\n\n        setAdmin(_admin);\n        setMonethaVoucher(_monethaVoucher);\n        setMaxDiscountPermille(700); // 70%\n    }\n\n    /**\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     */\n    /**\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     */\n    function acceptPayment(address _merchantWallet,\n        uint _monethaFee,\n        address _customerAddress,\n        uint _vouchersApply,\n        uint _paybackPermille)\n    external payable onlyMonetha whenNotPaused returns (uint discountWei){\n        require(_merchantWallet != 0x0);\n        uint price = msg.value;\n        // Monetha fee cannot be greater than 1.5% of payment\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(price).div(1000));\n\n        discountWei = 0;\n        if (monethaVoucher != address(0)) {\n            if (_vouchersApply > 0 && MaxDiscountPermille > 0) {\n                uint maxDiscountWei = price.mul(MaxDiscountPermille).div(PERMILLE_COEFFICIENT);\n                uint maxVouchers = monethaVoucher.fromWei(maxDiscountWei);\n                // limit vouchers to apply\n                uint vouchersApply = _vouchersApply;\n                if (vouchersApply > maxVouchers) {\n                    vouchersApply = maxVouchers;\n                }\n\n                (, discountWei) = monethaVoucher.applyDiscount(_customerAddress, vouchersApply);\n            }\n\n            if (_paybackPermille > 0) {\n                uint paybackWei = price.sub(discountWei).mul(_paybackPermille).div(PERMILLE_COEFFICIENT);\n                if (paybackWei > 0) {\n                    monethaVoucher.applyPayback(_customerAddress, paybackWei);\n                }\n            }\n        }\n\n        uint merchantIncome = price.sub(_monethaFee);\n\n        _merchantWallet.transfer(merchantIncome);\n        monethaVault.transfer(_monethaFee);\n\n        emit PaymentProcessedEther(_merchantWallet, merchantIncome, _monethaFee);\n    }\n\n    /**\n     *  acceptTokenPayment accept token payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     *  @param _tokenAddress is the token address\n     *  @param _value is the order value\n     */\n    function acceptTokenPayment(\n        address _merchantWallet,\n        uint _monethaFee,\n        address _tokenAddress,\n        uint _value\n    )\n    external onlyMonetha whenNotPaused\n    {\n        require(_merchantWallet != 0x0);\n\n        // Monetha fee cannot be greater than 1.5% of payment\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(_value).div(1000));\n\n        uint merchantIncome = _value.sub(_monethaFee);\n\n        GenericERC20(_tokenAddress).transfer(_merchantWallet, merchantIncome);\n        GenericERC20(_tokenAddress).transfer(monethaVault, _monethaFee);\n\n        emit PaymentProcessedToken(_tokenAddress, _merchantWallet, merchantIncome, _monethaFee);\n    }\n\n    /**\n     *  changeMonethaVault allows owner to change address of Monetha Vault.\n     *  @param newVault New address of Monetha Vault\n     */\n    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\n        monethaVault = newVault;\n    }\n\n    /**\n     *  Allows other monetha account or contract to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\n        require(msg.sender == admin || msg.sender == owner);\n\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        emit MonethaAddressSet(_address, _isMonethaAddress);\n    }\n\n    /**\n     *  setAdmin allows owner to change address of admin.\n     *  @param _admin New address of admin\n     */\n    function setAdmin(address _admin) public onlyOwner {\n        require(_admin != address(0));\n        admin = _admin;\n    }\n\n    /**\n     *  setAdmin allows owner to change address of Monetha voucher contract. If set to 0x0 address, discounts and paybacks are disabled.\n     *  @param _monethaVoucher New address of Monetha voucher contract\n     */\n    function setMonethaVoucher(IMonethaVoucher _monethaVoucher) public onlyOwner {\n        if (monethaVoucher != _monethaVoucher) {\n            emit MonethaVoucherChanged(monethaVoucher, _monethaVoucher);\n            monethaVoucher = _monethaVoucher;\n        }\n    }\n\n    /**\n     *  setMaxDiscountPermille allows Monetha to change max.discount percentage\n     *  @param _maxDiscountPermille New value of max.discount (in permille)\n     */\n    function setMaxDiscountPermille(uint _maxDiscountPermille) public onlyOwner {\n        require(_maxDiscountPermille <= PERMILLE_COEFFICIENT);\n        emit MaxDiscountPermilleChanged(MaxDiscountPermille, _maxDiscountPermille);\n        MaxDiscountPermille = _maxDiscountPermille;\n    }\n}\n\n// File: monetha-utility-contracts/contracts/SafeDestructible.sol\n\n/**\n * @title SafeDestructible\n * Base contract that can be destroyed by owner.\n * Can be destructed if there are no funds on contract balance.\n */\ncontract SafeDestructible is Ownable {\n    function destroy() onlyOwner public {\n        require(address(this).balance == 0);\n        selfdestruct(owner);\n    }\n}\n\n// File: contracts/MerchantWallet.sol\n\n/**\n *  @title MerchantWallet\n *  Serves as a public Merchant profile with merchant profile info,\n *      payment settings and latest reputation value.\n *  Also MerchantWallet accepts payments for orders.\n */\n\ncontract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n\n    string constant VERSION = \"0.5\";\n\n    /// Address of merchant's account, that can withdraw from wallet\n    address public merchantAccount;\n\n    /// Address of merchant's fund address.\n    address public merchantFundAddress;\n\n    /// Unique Merchant identifier hash\n    bytes32 public merchantIdHash;\n\n    /// profileMap stores general information about the merchant\n    mapping (string=>string) profileMap;\n\n    /// paymentSettingsMap stores payment and order settings for the merchant\n    mapping (string=>string) paymentSettingsMap;\n\n    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n    mapping (string=>uint32) compositeReputationMap;\n\n    /// number of last digits in compositeReputation for fractional part\n    uint8 public constant REPUTATION_DECIMALS = 4;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by merchant account.\n     */\n    modifier onlyMerchant() {\n        require(msg.sender == merchantAccount);\n        _;\n    }\n\n    /**\n     *  Fund Address should always be Externally Owned Account and not a contract.\n     */\n    modifier isEOA(address _fundAddress) {\n        uint256 _codeLength;\n        assembly {_codeLength := extcodesize(_fundAddress)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by merchant account or by monethaAddress account.\n     */\n    modifier onlyMerchantOrMonetha() {\n        require(msg.sender == merchantAccount || isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\n     *  @param _merchantId Merchant identifier\n     *  @param _fundAddress Merchant's fund address, where amount will be transferred.\n     */\n    constructor(address _merchantAccount, string _merchantId, address _fundAddress) public isEOA(_fundAddress) {\n        require(_merchantAccount != 0x0);\n        require(bytes(_merchantId).length > 0);\n\n        merchantAccount = _merchantAccount;\n        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n\n        merchantFundAddress = _fundAddress;\n    }\n\n    /**\n     *  Accept payment from MonethaGateway\n     */\n    function () external payable {\n    }\n\n    /**\n     *  @return profile info by string key\n     */\n    function profile(string key) external constant returns (string) {\n        return profileMap[key];\n    }\n\n    /**\n     *  @return payment setting by string key\n     */\n    function paymentSettings(string key) external constant returns (string) {\n        return paymentSettingsMap[key];\n    }\n\n    /**\n     *  @return composite reputation value by string key\n     */\n    function compositeReputation(string key) external constant returns (uint32) {\n        return compositeReputationMap[key];\n    }\n\n    /**\n     *  Set profile info by string key\n     */\n    function setProfile(\n        string profileKey,\n        string profileValue,\n        string repKey,\n        uint32 repValue\n    )\n        external onlyOwner\n    {\n        profileMap[profileKey] = profileValue;\n\n        if (bytes(repKey).length != 0) {\n            compositeReputationMap[repKey] = repValue;\n        }\n    }\n\n    /**\n     *  Set payment setting by string key\n     */\n    function setPaymentSettings(string key, string value) external onlyOwner {\n        paymentSettingsMap[key] = value;\n    }\n\n    /**\n     *  Set composite reputation value by string key\n     */\n    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n        compositeReputationMap[key] = value;\n    }\n\n    /**\n     *  Allows withdrawal of funds to beneficiary address\n     */\n    function doWithdrawal(address beneficiary, uint amount) private {\n        require(beneficiary != 0x0);\n        beneficiary.transfer(amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to beneficiary address\n     */\n    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n        doWithdrawal(beneficiary, amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to it's own account\n     */\n    function withdraw(uint amount) external onlyMerchant {\n        withdrawTo(msg.sender, amount);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange\n     */\n    function withdrawToExchange(address depositAccount, uint amount) external onlyMerchantOrMonetha whenNotPaused {\n        doWithdrawal(depositAccount, amount);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing all funds to deposit address of the exchange\n     */\n    function withdrawAllToExchange(address depositAccount, uint min_amount) external onlyMerchantOrMonetha whenNotPaused {\n        require (address(this).balance >= min_amount);\n        doWithdrawal(depositAccount, address(this).balance);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of tokens by withdrawing all tokens to deposit address of the exchange\n     */\n    function withdrawAllTokensToExchange(address _tokenAddress, address _depositAccount, uint _minAmount) external onlyMerchantOrMonetha whenNotPaused {\n        require(_tokenAddress != address(0));\n        \n        uint balance = GenericERC20(_tokenAddress).balanceOf(address(this));\n        \n        require(balance >= _minAmount);\n        \n        GenericERC20(_tokenAddress).transfer(_depositAccount, balance);\n    }\n\n    /**\n     *  Allows merchant to change it's account address\n     */\n    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n        merchantAccount = newAccount;\n    }\n\n    /**\n     *  Allows merchant to change it's fund address.\n     */\n    function changeFundAddress(address newFundAddress) external onlyMerchant isEOA(newFundAddress) {\n        merchantFundAddress = newFundAddress;\n    }\n}\n\n// File: contracts/PrivatePaymentProcessor.sol\n\ncontract PrivatePaymentProcessor is Pausable, Destructible, Contactable, Restricted {\n\n    using SafeMath for uint256;\n\n    string constant VERSION = \"0.6\";\n\n    /**\n      *  Payback permille.\n      *  1 permille = 0.1 %\n      */\n    uint public constant PAYBACK_PERMILLE = 2; // 0.2%\n\n    // Order paid event\n    event OrderPaidInEther(\n        uint indexed _orderId,\n        address indexed _originAddress,\n        uint _price,\n        uint _monethaFee,\n        uint _discount\n    );\n\n    event OrderPaidInToken(\n        uint indexed _orderId,\n        address indexed _originAddress,\n        address indexed _tokenAddress,\n        uint _price,\n        uint _monethaFee\n    );\n\n    // Payments have been processed event\n    event PaymentsProcessed(\n        address indexed _merchantAddress,\n        uint _amount,\n        uint _fee\n    );\n\n    // PaymentRefunding is an event when refunding initialized\n    event PaymentRefunding(\n        uint indexed _orderId,\n        address indexed _clientAddress,\n        uint _amount,\n        string _refundReason\n    );\n\n    // PaymentWithdrawn event is fired when payment is withdrawn\n    event PaymentWithdrawn(\n        uint indexed _orderId,\n        address indexed _clientAddress,\n        uint amount\n    );\n\n    /// MonethaGateway contract for payment processing\n    MonethaGateway public monethaGateway;\n\n    /// Address of MerchantWallet, where merchant reputation and funds are stored\n    MerchantWallet public merchantWallet;\n\n    /// Merchant identifier hash, that associates with the acceptor\n    bytes32 public merchantIdHash;\n\n    enum WithdrawState {Null, Pending, Withdrawn}\n\n    struct Withdraw {\n        WithdrawState state;\n        uint amount;\n        address clientAddress;\n        address tokenAddress;\n    }\n\n    mapping(uint => Withdraw) public withdrawals;\n\n    /**\n     *  Private Payment Processor sets Monetha Gateway and Merchant Wallet.\n     *  @param _merchantId Merchant of the acceptor\n     *  @param _monethaGateway Address of MonethaGateway contract for payment processing\n     *  @param _merchantWallet Address of MerchantWallet, where merchant reputation and funds are stored\n     */\n    constructor(\n        string _merchantId,\n        MonethaGateway _monethaGateway,\n        MerchantWallet _merchantWallet\n    )\n    public\n    {\n        require(bytes(_merchantId).length > 0);\n\n        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n\n        setMonethaGateway(_monethaGateway);\n        setMerchantWallet(_merchantWallet);\n    }\n\n    /**\n     *  payForOrder is used by order wallet/client to pay for the order\n     *  @param _orderId Identifier of the order\n     *  @param _originAddress buyer address\n     *  @param _monethaFee is fee collected by Monetha\n     */\n    function payForOrder(\n        uint _orderId,\n        address _originAddress,\n        uint _monethaFee,\n        uint _vouchersApply\n    )\n    external payable whenNotPaused\n    {\n        require(_orderId > 0);\n        require(_originAddress != 0x0);\n        require(msg.value > 0);\n\n        address fundAddress;\n        fundAddress = merchantWallet.merchantFundAddress();\n\n        uint discountWei = 0;\n        if (fundAddress != address(0)) {\n            discountWei = monethaGateway.acceptPayment.value(msg.value)(\n                fundAddress,\n                _monethaFee,\n                _originAddress,\n                _vouchersApply,\n                PAYBACK_PERMILLE);\n        } else {\n            discountWei = monethaGateway.acceptPayment.value(msg.value)(\n                merchantWallet,\n                _monethaFee,\n                _originAddress,\n                _vouchersApply,\n                PAYBACK_PERMILLE);\n        }\n\n        // log payment event\n        emit OrderPaidInEther(_orderId, _originAddress, msg.value, _monethaFee, discountWei);\n    }\n\n    /**\n     *  payForOrderInTokens is used by order wallet/client to pay for the order\n     *  This call requires that token's approve method has been called prior to this.\n     *  @param _orderId Identifier of the order\n     *  @param _originAddress buyer address\n     *  @param _monethaFee is fee collected by Monetha\n     *  @param _tokenAddress is tokens address\n     *  @param _orderValue is order amount\n     */\n    function payForOrderInTokens(\n        uint _orderId,\n        address _originAddress,\n        uint _monethaFee,\n        address _tokenAddress,\n        uint _orderValue\n    )\n    external whenNotPaused\n    {\n        require(_orderId > 0);\n        require(_originAddress != 0x0);\n        require(_orderValue > 0);\n        require(_tokenAddress != address(0));\n\n        address fundAddress;\n        fundAddress = merchantWallet.merchantFundAddress();\n\n        GenericERC20(_tokenAddress).transferFrom(msg.sender, address(this), _orderValue);\n\n        GenericERC20(_tokenAddress).transfer(address(monethaGateway), _orderValue);\n\n        if (fundAddress != address(0)) {\n            monethaGateway.acceptTokenPayment(fundAddress, _monethaFee, _tokenAddress, _orderValue);\n        } else {\n            monethaGateway.acceptTokenPayment(merchantWallet, _monethaFee, _tokenAddress, _orderValue);\n        }\n\n        // log payment event\n        emit OrderPaidInToken(_orderId, _originAddress, _tokenAddress, _orderValue, _monethaFee);\n    }\n\n    /**\n     *  refundPayment used in case order cannot be processed and funds need to be returned\n     *  This function initiate process of funds refunding to the client.\n     *  @param _orderId Identifier of the order\n     *  @param _clientAddress is an address of client\n     *  @param _refundReason Order refund reason\n     */\n    function refundPayment(\n        uint _orderId,\n        address _clientAddress,\n        string _refundReason\n    )\n    external payable onlyMonetha whenNotPaused\n    {\n        require(_orderId > 0);\n        require(_clientAddress != 0x0);\n        require(msg.value > 0);\n        require(WithdrawState.Null == withdrawals[_orderId].state);\n\n        // create withdraw\n        withdrawals[_orderId] = Withdraw({\n            state : WithdrawState.Pending,\n            amount : msg.value,\n            clientAddress : _clientAddress,\n            tokenAddress: address(0)\n            });\n\n        // log refunding\n        emit PaymentRefunding(_orderId, _clientAddress, msg.value, _refundReason);\n    }\n\n    /**\n     *  refundTokenPayment used in case order cannot be processed and tokens need to be returned\n     *  This call requires that token's approve method has been called prior to this.\n     *  This function initiate process of refunding tokens to the client.\n     *  @param _orderId Identifier of the order\n     *  @param _clientAddress is an address of client\n     *  @param _refundReason Order refund reason\n     *  @param _tokenAddress is tokens address\n     *  @param _orderValue is order amount\n     */\n    function refundTokenPayment(\n        uint _orderId,\n        address _clientAddress,\n        string _refundReason,\n        uint _orderValue,\n        address _tokenAddress\n    )\n    external onlyMonetha whenNotPaused\n    {\n        require(_orderId > 0);\n        require(_clientAddress != 0x0);\n        require(_orderValue > 0);\n        require(_tokenAddress != address(0));\n        require(WithdrawState.Null == withdrawals[_orderId].state);\n\n        GenericERC20(_tokenAddress).transferFrom(msg.sender, address(this), _orderValue);\n\n        // create withdraw\n        withdrawals[_orderId] = Withdraw({\n            state : WithdrawState.Pending,\n            amount : _orderValue,\n            clientAddress : _clientAddress,\n            tokenAddress : _tokenAddress\n            });\n\n        // log refunding\n        emit PaymentRefunding(_orderId, _clientAddress, _orderValue, _refundReason);\n    }\n\n    /**\n     *  withdrawRefund performs fund transfer to the client's account.\n     *  @param _orderId Identifier of the order\n     */\n    function withdrawRefund(uint _orderId)\n    external whenNotPaused\n    {\n        Withdraw storage withdraw = withdrawals[_orderId];\n        require(WithdrawState.Pending == withdraw.state);\n        require(withdraw.tokenAddress == address(0));\n\n        address clientAddress = withdraw.clientAddress;\n        uint amount = withdraw.amount;\n\n        // changing withdraw state before transfer\n        withdraw.state = WithdrawState.Withdrawn;\n\n        // transfer fund to clients account\n        clientAddress.transfer(amount);\n\n        // log withdrawn\n        emit PaymentWithdrawn(_orderId, clientAddress, amount);\n    }\n\n    /**\n     *  withdrawTokenRefund performs token transfer to the client's account.\n     *  @param _orderId Identifier of the order\n     *  @param _tokenAddress token address\n     */\n    function withdrawTokenRefund(uint _orderId, address _tokenAddress)\n    external whenNotPaused\n    {\n        require(_tokenAddress != address(0));\n\n        Withdraw storage withdraw = withdrawals[_orderId];\n        require(WithdrawState.Pending == withdraw.state);\n        require(withdraw.tokenAddress == _tokenAddress);\n\n        address clientAddress = withdraw.clientAddress;\n        uint amount = withdraw.amount;\n\n        // changing withdraw state before transfer\n        withdraw.state = WithdrawState.Withdrawn;\n\n        // transfer fund to clients account\n        GenericERC20(_tokenAddress).transfer(clientAddress, amount);\n\n        // log withdrawn\n        emit PaymentWithdrawn(_orderId, clientAddress, amount);\n    }\n\n    /**\n     *  setMonethaGateway allows owner to change address of MonethaGateway.\n     *  @param _newGateway Address of new MonethaGateway contract\n     */\n    function setMonethaGateway(MonethaGateway _newGateway) public onlyOwner {\n        require(address(_newGateway) != 0x0);\n\n        monethaGateway = _newGateway;\n    }\n\n    /**\n     *  setMerchantWallet allows owner to change address of MerchantWallet.\n     *  @param _newWallet Address of new MerchantWallet contract\n     */\n    function setMerchantWallet(MerchantWallet _newWallet) public onlyOwner {\n        require(address(_newWallet) != 0x0);\n        require(_newWallet.merchantIdHash() == merchantIdHash);\n\n        merchantWallet = _newWallet;\n    }\n}",
  "bytecode": "60806040526000805460a060020a60ff02191690553480156200002157600080fd5b5060405162001ace38038062001ace833981016040908152815160208301519183015160008054600160a060020a03191633178155919093018051909391106200006a57600080fd5b826040516020018082805190602001908083835b602083106200009f5780518252601f1990920191602091820191016200007e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310620001045780518252601f199092019160209182019101620000e3565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091206005555062000149915083905064010000000062000166810204565b6200015d81640100000000620001b6810204565b5050506200029e565b600054600160a060020a031633146200017e57600080fd5b600160a060020a03811615156200019457600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a03163314620001ce57600080fd5b600160a060020a0381161515620001e457600080fd5b6005546000191681600160a060020a031663f0daba016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200024357600080fd5b505af115801562000258573d6000803e3d6000fd5b505050506040513d60208110156200026f57600080fd5b5051146200027c57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b61182080620002ae6000396000f3006080604052600436106101485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ee37896811461014d57806331d413251461016c57806331d4fad4146101a157806336f7ab5e146101c55780633f4ba83a1461024f5780634baf43e4146102645780635c975abb1461028b5780635cc07076146102a05780636137412c146102fd578063715018a61461032e57806383197ef0146103435780638456cb59146103585780638da5cb5b1461036d5780639600f294146103825780639d153495146103be5780639da30467146103d6578063b440bf3914610407578063b967a52e14610428578063bc85e06414610481578063c07e339114610496578063cee749bc146104bc578063ddda66db146104e0578063f0daba0114610501578063f2fde38b14610516578063f5074f4114610537575b600080fd5b61016a600435600160a060020a0360243516604435606435610558565b005b34801561017857600080fd5b5061018d600160a060020a0360043516610808565b604080519115158252519081900360200190f35b61016a600480359060248035600160a060020a03169160443591820191013561081d565b3480156101d157600080fd5b506101da6109c0565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102145781810151838201526020016101fc565b50505050905090810190601f1680156102415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025b57600080fd5b5061016a610a4d565b34801561027057600080fd5b50610279610ac3565b60408051918252519081900360200190f35b34801561029757600080fd5b5061018d610ac8565b3480156102ac57600080fd5b506102b8600435610ad8565b604051808560028111156102c857fe5b60ff168152602081019490945250600160a060020a039182166040808501919091529116606083015251908190036080019150f35b34801561030957600080fd5b50610312610b10565b60408051600160a060020a039092168252519081900360200190f35b34801561033a57600080fd5b5061016a610b1f565b34801561034f57600080fd5b5061016a610b8b565b34801561036457600080fd5b5061016a610bb0565b34801561037957600080fd5b50610312610c2b565b34801561038e57600080fd5b5061016a6004803590600160a060020a036024803582169260443591820192910135906064359060843516610c3a565b3480156103ca57600080fd5b5061016a600435610e8c565b3480156103e257600080fd5b5061016a600435600160a060020a036024358116906044359060643516608435610f86565b34801561041357600080fd5b5061016a600160a060020a036004351661132e565b34801561043457600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261016a9436949293602493928401919081908401838280828437509497506113899650505050505050565b34801561048d57600080fd5b506103126113b7565b3480156104a257600080fd5b5061016a600160a060020a036004351660243515156113c6565b3480156104c857600080fd5b5061016a600435600160a060020a0360243516611441565b3480156104ec57600080fd5b5061016a600160a060020a03600435166115a1565b34801561050d57600080fd5b50610279611690565b34801561052257600080fd5b5061016a600160a060020a0360043516611696565b34801561054357600080fd5b5061016a600160a060020a03600435166116b9565b60008054819060a060020a900460ff161561057257600080fd5b6000861161057f57600080fd5b600160a060020a038516151561059457600080fd5b600034116105a157600080fd5b60048054604080517f969596d60000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263969596d69282820192602092908290030181600087803b1580156105fe57600080fd5b505af1158015610612573d6000803e3d6000fd5b505050506040513d602081101561062857600080fd5b5051915060009050600160a060020a038216156106fa57600354604080517fd21c39a1000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201889052888116604483015260648201879052600260848301529151919092169163d21c39a191349160a48082019260209290919082900301818588803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b50505050506040513d60208110156106f157600080fd5b505190506107b3565b60035460048054604080517fd21c39a1000000000000000000000000000000000000000000000000000000008152600160a060020a039283169381019390935260248301889052888216604484015260648301879052600260848401525192169163d21c39a191349160a480830192602092919082900301818588803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b50505050506040513d60208110156107ae57600080fd5b505190505b60408051348152602081018690528082018390529051600160a060020a0387169188917ffb3b61c9f30df0c105c673af85f07796032c77c3bf21f256bce83ba0853f630f9181900360600190a3505050505050565b60026020526000908152604090205460ff1681565b3360009081526002602052604090205460ff16151561083b57600080fd5b60005460a060020a900460ff161561085257600080fd5b6000841161085f57600080fd5b600160a060020a038316151561087457600080fd5b6000341161088157600080fd5b60008481526006602052604090205460ff16600281111561089e57fe5b156108a857600080fd5b6040805160808101909152806001815234602080830191909152600160a060020a038616604080840191909152600060609093018390528783526006909152902081518154829060ff1916600183600281111561090157fe5b0217905550602082810151600183015560408084015160028401805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039384161790915560609586015160039095018054909116948216949094179093558051348082529281018281529181018690529287169388937f26e77179a69c2db5e1f39af4e228bc8c2205384ba14b8c1e3339049db4ee42c5939288928892919082018484808284376040519201829003965090945050505050a350505050565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b505050505081565b600054600160a060020a03163314610a6457600080fd5b60005460a060020a900460ff161515610a7c57600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b600281565b60005460a060020a900460ff1681565b600660205260009081526040902080546001820154600283015460039093015460ff909216929091600160a060020a03918216911684565b600354600160a060020a031681565b600054600160a060020a03163314610b3657600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610ba257600080fd5b600054600160a060020a0316ff5b600054600160a060020a03163314610bc757600080fd5b60005460a060020a900460ff1615610bde57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b3360009081526002602052604090205460ff161515610c5857600080fd5b60005460a060020a900460ff1615610c6f57600080fd5b60008611610c7c57600080fd5b600160a060020a0385161515610c9157600080fd5b60008211610c9e57600080fd5b600160a060020a0381161515610cb357600080fd5b60008681526006602052604090205460ff166002811115610cd057fe5b15610cda57600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a038316916323b872dd9160648083019260209291908290030181600087803b158015610d4857600080fd5b505af1158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b50506040805160808101825260018082526020808301869052600160a060020a03898116848601528516606084015260008a815260069091529290922081518154929391929091839160ff191690836002811115610dcc57fe5b0217905550602082810151600183015560408084015160028401805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a0393841617909155606095860151600390950180549091169482169490941790935580518681529182018181529082018790529188169289927f26e77179a69c2db5e1f39af4e228bc8c2205384ba14b8c1e3339049db4ee42c59287928a928a929182018484808284376040519201829003965090945050505050a3505050505050565b600080548190819060a060020a900460ff1615610ea857600080fd5b6000848152600660205260409020805490935060ff166002811115610ec957fe5b600114610ed557600080fd5b6003830154600160a060020a031615610eed57600080fd5b50506002818101546001830154835460ff19169092178355604051600160a060020a03909116919082906108fc8315029083906000818181858888f19350505050158015610f3f573d6000803e3d6000fd5b50604080518281529051600160a060020a0384169186917fbe85bf3b0a1e335a22c461f84cf759dfe589ec1539caf4dce60f999d72dd8e239181900360200190a350505050565b6000805460a060020a900460ff1615610f9e57600080fd5b60008611610fab57600080fd5b600160a060020a0385161515610fc057600080fd5b60008211610fcd57600080fd5b600160a060020a0383161515610fe257600080fd5b60048054604080517f969596d60000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263969596d69282820192602092908290030181600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050506040513d602081101561106957600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590529051919250600160a060020a038516916323b872dd916064808201926020929091908290030181600087803b1580156110dd57600080fd5b505af11580156110f1573d6000803e3d6000fd5b505050506040513d602081101561110757600080fd5b5050600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519185169163a9059cbb9160448082019260009290919082900301818387803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b50505050600160a060020a0381161561123857600354604080517fcc4fbc43000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018890528681166044830152606482018690529151919092169163cc4fbc4391608480830192600092919082900301818387803b15801561121b57600080fd5b505af115801561122f573d6000803e3d6000fd5b505050506112d2565b60035460048054604080517fcc4fbc43000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352602483018890528682166044840152606483018690525192169163cc4fbc439160848082019260009290919082900301818387803b1580156112b957600080fd5b505af11580156112cd573d6000803e3d6000fd5b505050505b82600160a060020a031685600160a060020a0316877fd6dc98331ad06baebe39c90f4fd554341ad121d55e4384bd046def391501a00f8588604051808381526020018281526020019250505060405180910390a4505050505050565b600054600160a060020a0316331461134557600080fd5b600160a060020a038116151561135a57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146113a057600080fd5b80516113b3906001906020840190611759565b5050565b600454600160a060020a031681565b600054600160a060020a031633146113dd57600080fd5b600160a060020a038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517fa551de8741dbb2092ce6bc142fd0ff3af5dfbf87d0aa594619fccddb0141e6929281900390910190a15050565b600080548190819060a060020a900460ff161561145d57600080fd5b600160a060020a038416151561147257600080fd5b6000858152600660205260409020805490935060ff16600281111561149357fe5b60011461149f57600080fd5b6003830154600160a060020a038581169116146114bb57600080fd5b50506002818101546001830154835460ff19169092178355604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820181905260248201859052915191939286169163a9059cbb9160448082019260009290919082900301818387803b15801561154257600080fd5b505af1158015611556573d6000803e3d6000fd5b5050604080518481529051600160a060020a03861693508892507fbe85bf3b0a1e335a22c461f84cf759dfe589ec1539caf4dce60f999d72dd8e239181900360200190a35050505050565b600054600160a060020a031633146115b857600080fd5b600160a060020a03811615156115cd57600080fd5b6005546000191681600160a060020a031663f0daba016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561162b57600080fd5b505af115801561163f573d6000803e3d6000fd5b505050506040513d602081101561165557600080fd5b50511461166157600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60055481565b600054600160a060020a031633146116ad57600080fd5b6116b6816116dc565b50565b600054600160a060020a031633146116d057600080fd5b80600160a060020a0316ff5b600160a060020a03811615156116f157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061179a57805160ff19168380011785556117c7565b828001600101855582156117c7579182015b828111156117c75782518255916020019190600101906117ac565b506117d39291506117d7565b5090565b6117f191905b808211156117d357600081556001016117dd565b905600a165627a7a72305820b5debb2623b86cd4f7ffd25775500238675501750ea0fe8648caeb063ff4d1ba002900000000000000000000000000000000000000000000000000000000000000600000000000000000000000004492604eefb7a59885a5b7cbe52d82a0b5614cac0000000000000000000000005d4c653f2c09c9d0bdae2b157061b440f53f26e600000000000000000000000000000000000000000000000000000000000000053132373030000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000600000000000000000000000004492604eefb7a59885a5b7cbe52d82a0b5614cac0000000000000000000000005d4c653f2c09c9d0bdae2b157061b440f53f26e600000000000000000000000000000000000000000000000000000000000000053132373030000000000000000000000000000000000000000000000000000000"
}