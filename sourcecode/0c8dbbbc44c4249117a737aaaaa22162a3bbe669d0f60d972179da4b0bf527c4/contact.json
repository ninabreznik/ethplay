{
  "address": "0xace024458674fe19c02c15624e4afefad71b60b6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Citizen",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity ^0.4.24;\n// pragma experimental ABIEncoderV2;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\nlibrary Helper {\n    using SafeMath for uint256;\n    \n        \n    function bytes32ToUint(bytes32 n) \n        public\n        pure\n        returns (uint256) \n    {\n        return uint256(n);\n    }\n    \n    function stringToBytes32(string memory source) \n        public\n        pure\n        returns (bytes32 result) \n    {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n    \n    function stringToUint(string memory source) \n        public\n        pure\n        returns (uint256)\n    {\n        return bytes32ToUint(stringToBytes32(source));\n    }\n    \n    function validUsername(string _username)\n        public\n        pure\n        returns(bool)\n    {\n        bytes memory b = bytes(_username);\n        // Im Raum [4, 18]\n        if ((b.length < 4) || (b.length > 18)) return false;\n        // Letzte Char != ' '\n        \n        for(uint i; i<b.length; i++){\n            bytes1 char = b[i];\n            if(\n                !(char >= 0x30 && char <= 0x39) &&\n                !(char >= 0x41 && char <= 0x5A) //A-Z\n            )\n                return false;\n        }\n        \n        if (b[0] >= 0x30 && b[0] <= 0x39) return false;\n        \n        return true;\n    }   \n}\n\ninterface DAAInterface {\n    function citizenMintToken(address _buyer, uint256 _buyPrice, int8 _is_win) external returns(uint256);\n    function transfer(address _to, uint256 _value) external returns(bool);\n    function transferFrom(address _from, address _to, uint256 _tokenAmount) external returns(bool);\n    function balanceOf(address _from) external returns(uint256);\n    function currentRoundDividend() external;\n    function getDividendView(address _sender) external returns(uint256);\n    function getDividendPull(address _sender, uint256 _value) external returns(uint256);\n    function payOut(address _winner, uint256 _unit, uint256 _value, uint256 _valuebet) external;\n    function getCitizenBalanceEth(address _sender) external returns(uint256);\n    function totalSupplyByAddress(address _sender) external returns(uint256);\n}\n\ninterface TicketInterface{\n    function getEarlyIncomePull(address _sender) external returns(uint256);\n    function getEarlyIncomeView(address _sender, bool _current) external returns(uint256); \n    function getEarlyIncomeByRound(address _buyer, uint256 _round) external returns(uint256);\n    function currentRound() external returns(uint256);\n    function ticketSumByAddress(address _sender) external returns(uint256);\n}\n\ncontract CitizenStorage{\n    using SafeMath for uint256;\n    \n    address controller; \n    modifier onlyCoreContract() {\n        require(msg.sender == controller, \"admin required\");\n        _;\n    }\n    \n    mapping (address => uint256) public citizenWinIncome;\n    mapping (address => uint256) public citizenGameWinIncome;\n    mapping (address => uint256) public citizenWithdrawed;\n    \n    function addWinIncome(address _citizen, uint256 _value) public onlyCoreContract() {\n         citizenWinIncome[_citizen] = _value.add(citizenWinIncome[_citizen]);\n         citizenWithdrawed[_citizen] = citizenWithdrawed[_citizen].add(_value);\n    }\n    function addGameWinIncome(address _citizen, uint256 _value, bool _enough) public onlyCoreContract() {\n        citizenGameWinIncome[_citizen] = _value.add(citizenGameWinIncome[_citizen]);\n        if (_enough){\n            citizenWithdrawed[_citizen] = citizenWithdrawed[_citizen].add(_value);\n        }\n    }\n    function pushCitizenWithdrawed(address _sender, uint256 _value) public onlyCoreContract(){\n        citizenWithdrawed[_sender] = citizenWithdrawed[_sender].add(_value);\n    }\n    constructor (address _contract)\n        public\n    {\n        require(controller== 0x0, \"require setup\");\n        controller = _contract;\n    }\n}\n\ncontract Citizen{\n    using SafeMath for uint256;\n    \n    // event Register(uint256 id, uint256 username, address indexed citizen, address indexed ref,\n    //                 uint256 ticket, uint256 ticketSpend, uint256 totalGameSpend, uint256 totalMined,\n    //                 uint256 dateJoin, uint256 totalWithdraw);\n                    \n    event Register(uint256 id, uint256 username, address indexed citizen, address indexed ref, uint256 ticketSpend, uint256 totalGameSpend, uint256 dateJoin);\n    modifier onlyAdmin() {\n        require(msg.sender == devTeam1, \"admin required\");\n        _;\n    }\n    \n    modifier onlyCoreContract() {\n        require(isCoreContract[msg.sender], \"admin required\");\n        _;\n    }\n\n    modifier notRegistered(){\n        require(!isCitizen[msg.sender], \"already exist\");\n        _;\n    }\n\n    modifier registered(){\n        require(isCitizen[msg.sender], \"must be a citizen\");\n        _;\n    }\n    \n    uint8[10] public TICKET_LEVEL_REF = [uint8(60),40,20,10,10,10,5,5,5,5];// 3 demical\n    uint8[10] public GAME_LEVEL_REF = [uint8(5),2,1,1,1,1,1,1,1,1];// 3 demical\n    \n    \n    struct Profile{\n        uint256 id;\n        uint256 username;\n        address ref;\n        mapping(uint => address[]) refTo;\n        mapping(address => uint256) payOut;\n        uint256 totalChild;\n        uint256 treeLevel;\n        \n        uint256 citizenBalanceEth;\n        uint256 citizenBalanceEthBackup;\n        \n        uint256 citizenTicketSpend;\n        uint256 citizenGameEthSpend;\n        uint256 citizenGameTokenSpend;\n        \n        \n        uint256 citizenEarlyIncomeRevenue;\n        uint256 citizenTicketRevenue;\n        uint256 citizenGameEthRevenue;\n        uint256 citizenGameTokenRevenue;\n    }\n\n\n    \n    mapping (address => uint256) public citizenEthDividend;\n\n    address[21] public mostTotalSpender;\n    mapping (address => uint256) public mostTotalSpenderId;\n    mapping (address => mapping(uint256 => uint256)) public payOutByLevel;\n    \n    mapping (address => Profile) public citizen;\n    mapping (address => bool) public isCitizen;\n    mapping (uint256 => address) public idAddress;\n    mapping (uint256 => address) public usernameAddress;\n    mapping (uint256 => address[]) public levelCitizen;\n\n\n    address devTeam1; \n    address devTeam2; \n    address devTeam3; \n    address devTeam4;\n    \n    uint256 public citizenNr;\n    uint256 lastLevel;\n    \n    uint256 earlyIncomeBalanceEth;\n    \n    DAAInterface public DAAContract;\n    TicketInterface public TicketContract;\n    CitizenStorage public CitizenStorageContract;\n    mapping (address => bool) public isCoreContract;\n    uint256 public coreContractSum;\n    address[] public coreContracts;\n    \n\n    constructor (address[4] _devTeam)\n        public\n    {\n        devTeam1 = _devTeam[0];\n        devTeam2 = _devTeam[1];\n        devTeam3 = _devTeam[2];\n        devTeam4 = _devTeam[3];\n\n        // first citizen is the development team\n        citizenNr = 1;\n        idAddress[1] = devTeam3;\n        isCitizen[devTeam3] = true;\n        //root => self ref\n        citizen[devTeam3].ref = devTeam3;\n        // username rules bypass\n        uint256 _username = Helper.stringToUint(\"GLOBAL\");\n        citizen[devTeam3].username = _username;\n        usernameAddress[_username] = devTeam3; \n        citizen[devTeam3].id = 1;\n        citizen[devTeam3].treeLevel = 1;\n        levelCitizen[1].push(devTeam3);\n        lastLevel = 1;\n    }\n    \n    // DAAContract, TicketContract, CitizenContract, CitizenStorage \n    function joinNetwork(address[4] _contract)\n        public\n    {\n        require(address(DAAContract) == 0x0,\"already setup\");\n        DAAContract = DAAInterface(_contract[0]);\n        TicketContract = TicketInterface(_contract[1]);\n        CitizenStorageContract = CitizenStorage(_contract[3]);\n        for(uint256 i =0; i<3; i++){\n            isCoreContract[_contract[i]]=true;\n            coreContracts.push(_contract[i]);\n        }\n        coreContractSum = 3;\n    }\n\n    function updateTotalChild(address _address)\n        private\n    {\n        address _member = _address;\n        while(_member != devTeam3) {\n            _member = getRef(_member);\n            citizen[_member].totalChild ++;\n        }\n    }\n    \n    function addCoreContract(address _address) public  // [dev1]\n        onlyAdmin()\n    {\n        require(_address!=0x0,\"Invalid address\");\n        isCoreContract[_address] = true;\n        coreContracts.push(_address);\n        coreContractSum+=1;\n    }\n    \n    function updateRefTo(address _address) private {\n        address _member = _address;\n        uint256 level =1;\n        while (_member != devTeam3 && level<11){\n            _member = getRef(_member);\n            citizen[_member].refTo[level].push(_address);\n            level = level+1;\n        }\n    }\n\n    function register(string _sUsername, address _ref)\n        public\n        notRegistered()\n    {\n        require(Helper.validUsername(_sUsername), \"invalid username\");\n        address sender = msg.sender;\n        uint256 _username = Helper.stringToUint(_sUsername);\n        require(usernameAddress[_username] == 0x0, \"username already exist\");\n        usernameAddress[_username] = sender;\n        //ref must be a citizen, else ref = devTeam\n        address validRef = isCitizen[_ref] ? _ref : devTeam3;\n\n        //Welcome new Citizen\n        isCitizen[sender] = true;\n        citizen[sender].username = _username;\n        citizen[sender].ref = validRef;\n        citizenNr++;\n\n        idAddress[citizenNr] = sender;\n        citizen[sender].id = citizenNr;\n        \n        uint256 refLevel = citizen[validRef].treeLevel;\n        if (refLevel == lastLevel) lastLevel++;\n        citizen[sender].treeLevel = refLevel + 1;\n        levelCitizen[refLevel + 1].push(sender);\n        //add child\n        updateRefTo(sender);\n        updateTotalChild(sender);\n        emit Register(citizenNr,_username, sender, validRef, citizen[sender].citizenTicketSpend, citizen[sender].citizenGameEthSpend, now);\n    }\n    \n    // function updateUsername(string _sNewUsername)\n    //     public\n    //     registered()\n    // {\n    //     require(Helper.validUsername(_sNewUsername), \"invalid username\");\n    //     address sender = msg.sender;\n    //     uint256 _newUsername = Helper.stringToUint(_sNewUsername);\n    //     require(usernameAddress[_newUsername] == 0x0, \"username already exist\");\n    //     uint256 _oldUsername = citizen[sender].username;\n    //     citizen[sender].username = _newUsername;\n    //     usernameAddress[_oldUsername] = 0x0;\n    //     usernameAddress[_newUsername] = sender;\n    // }\n\n    function getRef(address _address)\n        public\n        view\n        returns (address)\n    {\n        return citizen[_address].ref == 0x0 ? devTeam3 : citizen[_address].ref;\n    }\n    \n    function getUsername(address _address)\n        public\n        view\n        returns (uint256)\n    {\n        return citizen[_address].username;\n    }\n    \n    function isDev() public view returns(bool){\n        if (msg.sender == devTeam1) return true;\n        return false;\n    }\n    \n    function getAddressById(uint256 _id)\n        public\n        view\n        returns (address)\n    {\n        return idAddress[_id];\n    }\n\n    function getAddressByUserName(string _username)\n        public\n        view\n        returns (address)\n    {\n        return usernameAddress[Helper.stringToUint(_username)];\n    }\n    \n    function pushTicketRefIncome(address _sender)\n        public\n        payable\n        onlyCoreContract() \n    {\n        uint256 _amount = msg.value; // 17%\n        _amount = _amount.div(170);\n        address sender = _sender;\n        address ref = getRef(sender);\n        uint256 money;\n        uint8 level;\n        \n        for (level=0; level<10; level++){\n            money = _amount.mul(TICKET_LEVEL_REF[level]);\n            citizen[ref].citizenBalanceEth = money.add(citizen[ref].citizenBalanceEth);\n            citizen[ref].citizenTicketRevenue = money.add(citizen[ref].citizenTicketRevenue);\n            citizen[ref].payOut[_sender] = money.add(citizen[ref].payOut[_sender]);\n            payOutByLevel[ref][level+1] = money.add(payOutByLevel[ref][level+1]);\n            sender = ref;\n            ref = getRef(sender);\n        }\n    }    \n    \n    function pushGametRefIncome(address _sender)\n        public\n        payable\n        onlyCoreContract() \n    {\n        uint256 _amount =  msg.value; // 1.5%\n        _amount = _amount.div(15);\n        address sender = _sender;\n        address ref = getRef(sender);\n        uint256 level;\n        uint256 money;\n        uint256 forDaa;\n        for (level=0; level<10; level++){\n            forDaa=0;\n            money = _amount.mul(GAME_LEVEL_REF[level]);\n            if (citizen[ref].citizenGameEthRevenue<citizen[ref].citizenGameEthSpend.div(10)){\n                if (citizen[ref].citizenGameEthRevenue+money>citizen[ref].citizenGameEthSpend.div(10)){\n                    forDaa = citizen[ref].citizenGameEthRevenue+money-citizen[ref].citizenGameEthSpend.div(10);\n                    money = money.sub(forDaa);\n                }\n            } else {\n                forDaa = money;\n                money = 0;\n            }\n            \n            citizen[ref].citizenBalanceEth = money.add(citizen[ref].citizenBalanceEth);\n            citizen[ref].citizenGameEthRevenue = money.add(citizen[ref].citizenGameEthRevenue);\n            citizen[ref].payOut[_sender] = money.add(citizen[ref].payOut[_sender]);\n            payOutByLevel[ref][level+1] = money.add(payOutByLevel[ref][level+1]);\n            \n            citizen[devTeam3].citizenBalanceEth = forDaa.add(citizen[devTeam3].citizenBalanceEth);\n            citizen[devTeam3].citizenGameEthRevenue = forDaa.add(citizen[devTeam3].citizenGameEthRevenue);\n            \n            sender = ref;\n            ref = getRef(sender);\n        }\n    }    \n    function pushGametRefIncomeToken(address _sender, uint256 _amount)\n        public\n        payable\n        onlyCoreContract() \n    {\n        _amount = _amount.div(15);\n        address sender = _sender;\n        address ref = getRef(sender);\n        uint256 level;\n        uint256 money;\n        uint256 forDaa;\n        \n        for (level=0; level<10; level++){\n            forDaa=0;\n            money = _amount.mul(GAME_LEVEL_REF[level]);\n            if (citizen[ref].citizenGameTokenRevenue<citizen[ref].citizenGameTokenSpend.div(10)){\n                if (citizen[ref].citizenGameTokenRevenue+money>citizen[ref].citizenGameTokenSpend.div(10)){\n                    forDaa = citizen[ref].citizenGameTokenRevenue+money-citizen[ref].citizenGameTokenSpend.div(10);\n                    money = money.sub(forDaa);\n                }\n            } else {\n                forDaa = money;\n                money = 0;\n            }\n            \n            DAAContract.payOut(ref,1,money,0);\n            citizen[ref].citizenGameTokenRevenue=money.add(citizen[ref].citizenGameTokenRevenue);\n            \n            DAAContract.payOut(devTeam3,1,forDaa,0);\n            citizen[devTeam3].citizenGameTokenRevenue = forDaa.add(citizen[devTeam3].citizenGameTokenRevenue);\n            \n            sender = ref;\n            ref = getRef(sender);\n        }\n    }\n    \n    function pushEarlyIncome() public payable{\n        uint256 _value = msg.value;\n        earlyIncomeBalanceEth = earlyIncomeBalanceEth.add(_value);\n    }\n    \n    function sortMostSpend(address _citizen) private {\n        uint256 citizen_spender = getTotalSpend(_citizen);\n        uint256 i=1;\n        while (i<21) {\n            if (mostTotalSpender[i]==0x0||(mostTotalSpender[i]!=0x0&&getTotalSpend(mostTotalSpender[i])<citizen_spender)){\n                if (mostTotalSpenderId[_citizen]!=0&&mostTotalSpenderId[_citizen]<i){\n                    break;\n                }\n                if (mostTotalSpenderId[_citizen]!=0){\n                    mostTotalSpender[mostTotalSpenderId[_citizen]]=0x0;\n                }\n                address temp1 = mostTotalSpender[i];\n                address temp2;\n                uint256 j=i+1;\n                while (j<21&&temp1!=0x0){\n                    temp2 = mostTotalSpender[j];\n                    mostTotalSpender[j]=temp1;\n                    mostTotalSpenderId[temp1]=j;\n                    temp1 = temp2;\n                    j++;\n                }\n                mostTotalSpender[i]=_citizen;\n                mostTotalSpenderId[_citizen]=i;\n                break;\n            }\n            i++;\n        }\n    }\n    \n    function addTicketEthSpend(address _citizen, uint256 _value) onlyCoreContract() public {\n        citizen[_citizen].citizenTicketSpend = citizen[_citizen].citizenTicketSpend.add(_value);\n        DAAContract.citizenMintToken(_citizen,_value,0);// buy ticket 0, win 1, lose -1;\n        sortMostSpend(_citizen);\n    }   \n    \n    // Game spend \n    function addGameEthSpendWin(address _citizen, uint256 _value, uint256 _valuewin, bool _enough) onlyCoreContract() public {\n        citizen[_citizen].citizenGameEthSpend = citizen[_citizen].citizenGameEthSpend.add(_value);\n        // DAAContract.citizenMintToken(_citizen,_value,1);// buy ticket 0, win 1, lose -1;\n        CitizenStorageContract.addGameWinIncome(_citizen, _valuewin, _enough);\n        sortMostSpend(_citizen);\n    }     \n    function addGameEthSpendLose(address _citizen, uint256 _value) onlyCoreContract() public {\n        citizen[_citizen].citizenGameEthSpend = citizen[_citizen].citizenGameEthSpend.add(_value);\n        DAAContract.citizenMintToken(_citizen,_value,-1);// buy ticket 0, win 1, lose -1;\n        sortMostSpend(_citizen);\n    }    \n    function addGameTokenSpend(address _citizen, uint256 _value) onlyCoreContract() public {\n        citizen[_citizen].citizenGameTokenSpend = citizen[_citizen].citizenGameTokenSpend.add(_value);\n    }\n    \n    function withdrawEth() public registered() {\n        address _sender = msg.sender;\n        uint256 _earlyIncome = TicketContract.getEarlyIncomePull(_sender);\n        uint256 _devidend = DAAContract.getDividendView(msg.sender);\n        uint256 _citizenBalanceEth = citizen[_sender].citizenBalanceEth;\n        uint256 _total = _earlyIncome.add(_devidend).add(_citizenBalanceEth).add(DAAContract.getCitizenBalanceEth(_sender));\n        require(_total>0,\"Balance none\");\n        CitizenStorageContract.pushCitizenWithdrawed(_sender,_total);\n        DAAContract.getDividendPull(_sender,_citizenBalanceEth+_earlyIncome);\n        _sender.transfer(_citizenBalanceEth+_earlyIncome);\n        citizen[_sender].citizenBalanceEthBackup = citizen[_sender].citizenBalanceEthBackup.add(_citizenBalanceEth).add(_earlyIncome).add(_devidend);\n        citizen[_sender].citizenEarlyIncomeRevenue = citizen[_sender].citizenEarlyIncomeRevenue.add(_earlyIncome);\n        citizenEthDividend[_sender] = citizenEthDividend[_sender].add(_devidend);\n        earlyIncomeBalanceEth= earlyIncomeBalanceEth.sub(_earlyIncome);\n        citizen[_sender].citizenBalanceEth = 0;\n    }\n    \n    function addWinIncome(address _citizen, uint256 _value)  onlyCoreContract()  public {\n        CitizenStorageContract.addWinIncome(_citizen, _value); \n    }\n    // function addGameWinIncome(address _citizen, uint256 _value, bool _enough) public {\n    //     CitizenStorageContract.addGameWinIncome(_citizen, _value, _enough);\n    // }\n    \n    // function getInWallet() public view returns (uint256){\n    //     uint256 _sum;\n    //     address _sender = msg.sender;\n    //     _sum = _sum.add(citizen[_sender].citizenBalanceEth);\n    //     _sum = _sum.add(TicketContract.getEarlyIncomeView(_sender));\n    //     _sum = _sum.add(DAAContract.getDividendView(_sender));\n    //     _sum = _sum.add(DAAContract.getCitizenBalanceEth(_sender));\n    //     return _sum;\n    // }  \n    \n    function getTotalEth() public registered() view returns(uint256){\n        uint256 _sum;\n        address _sender = msg.sender;\n        _sum = _sum.add(citizen[_sender].citizenBalanceEth);\n        _sum = _sum.add(citizen[_sender].citizenBalanceEthBackup);\n        _sum = _sum.add(CitizenStorageContract.citizenWinIncome(_sender));\n        _sum = _sum.add(TicketContract.getEarlyIncomeView(_sender, false));\n        _sum = _sum.add(DAAContract.getDividendView(_sender));\n        return _sum;\n    }\n    \n    function getTotalDividend(address _sender) public registered() view returns(uint256){\n        return citizenEthDividend[_sender].add(DAAContract.getDividendView(_sender));\n    }\n    \n    function getTotalEarlyIncome(address _sender) public registered() view returns(uint256){\n        uint256 _sum;\n        _sum = citizen[_sender].citizenEarlyIncomeRevenue;\n        _sum = _sum.add(TicketContract.getEarlyIncomeView(_sender, true));\n        return _sum;\n    }\n    \n    function getTotalSpend(address _sender) public view returns(uint256){\n        return citizen[_sender].citizenGameEthSpend+citizen[_sender].citizenTicketSpend;\n    }\n    \n    function getMemberByLevelToTal(uint256 _level) public view returns(uint256, uint256){\n        address _sender = msg.sender;\n        return(citizen[_sender].refTo[_level].length,payOutByLevel[_sender][_level]);\n    }\n    \n    function getMemberByLevel(uint256 _level, address _sender, uint256 _id) public view returns(address){\n        return citizen[_sender].refTo[_level][_id];\n    }\n    \n    function citizenPayForRef(address _citizen, address _ref) public view returns(uint256){\n        return citizen[_ref].payOut[_citizen];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getMemberByLevelToTal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getTotalEarlyIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_citizen\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addGameTokenSpend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"citizenEthDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sUsername\",\"type\":\"string\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAAContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TicketContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_citizen\",\"type\":\"address\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"citizenPayForRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getTotalDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payOutByLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"getAddressByUserName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mostTotalSpenderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address[4]\"}],\"name\":\"joinNetwork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_citizen\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addGameEthSpendLose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CitizenStorageContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pushEarlyIncome\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coreContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMemberByLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"pushTicketRefIncome\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"pushGametRefIncome\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addCoreContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pushGametRefIncomeToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAddressById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_citizen\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addTicketEthSpend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_citizen\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_valuewin\",\"type\":\"uint256\"},{\"name\":\"_enough\",\"type\":\"bool\"}],\"name\":\"addGameEthSpendWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"citizen\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"username\",\"type\":\"uint256\"},{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"totalChild\",\"type\":\"uint256\"},{\"name\":\"treeLevel\",\"type\":\"uint256\"},{\"name\":\"citizenBalanceEth\",\"type\":\"uint256\"},{\"name\":\"citizenBalanceEthBackup\",\"type\":\"uint256\"},{\"name\":\"citizenTicketSpend\",\"type\":\"uint256\"},{\"name\":\"citizenGameEthSpend\",\"type\":\"uint256\"},{\"name\":\"citizenGameTokenSpend\",\"type\":\"uint256\"},{\"name\":\"citizenEarlyIncomeRevenue\",\"type\":\"uint256\"},{\"name\":\"citizenTicketRevenue\",\"type\":\"uint256\"},{\"name\":\"citizenGameEthRevenue\",\"type\":\"uint256\"},{\"name\":\"citizenGameTokenRevenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getTotalSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_citizen\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addWinIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usernameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCoreContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelCitizen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mostTotalSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"citizenNr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreContractSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDev\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCitizen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GAME_LEVEL_REF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TICKET_LEVEL_REF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_devTeam\",\"type\":\"address[4]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"citizen\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketSpend\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalGameSpend\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateJoin\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab78500000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab785000000000000000000000000a06cd23aa37c39095d8cfe3a0fd2654331e631230000000000000000000000001bdf504b2ecf7a43c3ec5847ae950292ca2883c1",
  "libraries": [
    {
      "name": "Helper",
      "address": "0x08f7f4d7ebeebe590162151934d4df1bad1bd619"
    }
  ]
}