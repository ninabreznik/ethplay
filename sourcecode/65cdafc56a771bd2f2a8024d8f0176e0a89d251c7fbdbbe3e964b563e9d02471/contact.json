{
  "address": "0xf58c5d4631484ada89a76efe5e6d44210fcda4ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Salvaging",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * \n * World War Goo - Competitive Idle Game\n * \n * https://ethergoo.io\n * \n */\n\ncontract Salvaging {\n    \n    Inventory constant inventory = Inventory(0xb545507080b0f63df02ff9bd9302c2bb2447b826);\n    Crafting constant crafting = Crafting(0x29789c9abebc185f1876af10c38ee47ee0c6ed48);\n    ClothMaterial constant clothMaterial = ClothMaterial(0x8a6014227138556a259e7b2bf1dce668f9bdfd06);\n    WoodMaterial constant woodMaterial = WoodMaterial(0x6804bbb708b8af0851e2980c8a5e9abb42adb179);\n    MetalMaterial constant metalMaterial = MetalMaterial(0xb334f68bf47c1f1c1556e7034954d389d7fbbf07);\n    \n    address owner;\n    mapping(uint256 => Recipe) public recipeList;\n    \n    struct Recipe {\n        uint256 itemRarity; // Serves as id [0,1,2,3]\n        uint256 clothRecieved;\n        uint256 woodRecieved;\n        uint256 metalRecieved;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function salvageItem(uint256 tokenId) external {\n        require(inventory.tokenOwner(tokenId) == msg.sender);\n\n        uint256 itemId = inventory.tokenItems(tokenId);\n        uint256 rarity = inventory.getItemRarity(itemId);\n        Recipe memory recipe = recipeList[rarity];\n        \n        uint256 clothRecieved = recipe.clothRecieved;\n        uint256 woodRecieved = recipe.woodRecieved;\n        uint256 metalRecieved = recipe.metalRecieved;\n        \n        // Common items return 50% crafting\n        if (rarity == 0) {\n            (uint256 id,,uint256 clothCost, uint256 woodCost, uint256 metalCost) = crafting.recipeList(itemId);\n            require(id > 0);\n            clothRecieved = clothCost / 2;\n            woodRecieved = woodCost / 2;\n            metalRecieved = metalCost / 2;\n        }\n        \n        // Grant materials\n        if (clothRecieved > 0) {\n            clothMaterial.mintCloth(clothRecieved, msg.sender);\n        }\n        \n        if (woodRecieved > 0) {\n            woodMaterial.mintWood(woodRecieved, msg.sender);\n        }\n        \n        if (metalRecieved > 0) {\n            metalMaterial.mintMetal(metalRecieved, msg.sender);\n        }\n        \n        // Finally burn item\n        inventory.burn(tokenId);\n    }\n    \n    function addRecipe(uint256 itemRarity, uint256 cloth, uint256 wood, uint256 metal) external {\n        require(msg.sender == owner);\n        recipeList[itemRarity] = Recipe(itemRarity, cloth, wood, metal);\n    }\n    \n}\n\n\ncontract Inventory {\n    mapping(uint256 => Item) public itemList;\n    mapping(uint256 => uint256) public tokenItems;\n    mapping(uint256 => address) public tokenOwner;\n    function getItemRarity(uint256 itemId) external view returns (uint256);\n    function burn(uint256 tokenId) external;\n    \n    struct Item {\n        uint256 itemId;\n        uint256 unitId;\n        uint256 rarity;\n        uint32[8] upgradeGains;\n    }\n}\n\ncontract ClothMaterial {\n    function mintCloth(uint256 amount, address player) external;\n}\n\ncontract WoodMaterial {\n    function mintWood(uint256 amount, address player) external;\n}\n\ncontract MetalMaterial {\n    function mintMetal(uint256 amount, address player) external;\n}\n\ncontract Crafting {\n    mapping(uint256 => Recipe) public recipeList;\n\n    struct Recipe {\n        uint256 id;\n        uint256 itemId;\n\n        uint256 clothRequired;\n        uint256 woodRequired;\n        uint256 metalRequired;\n    }\n    \n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"salvageItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"itemRarity\",\"type\":\"uint256\"},{\"name\":\"cloth\",\"type\":\"uint256\"},{\"name\":\"wood\",\"type\":\"uint256\"},{\"name\":\"metal\",\"type\":\"uint256\"}],\"name\":\"addRecipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipeList\",\"outputs\":[{\"name\":\"itemRarity\",\"type\":\"uint256\"},{\"name\":\"clothRecieved\",\"type\":\"uint256\"},{\"name\":\"woodRecieved\",\"type\":\"uint256\"},{\"name\":\"metalRecieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556106d1806100326000396000f30060806040526004361061003d5763ffffffff60e060020a6000350416632613704a81146100425780634737f8c31461005c578063995601871461007d575b600080fd5b34801561004e57600080fd5b5061005a6004356100bb565b005b34801561006857600080fd5b5061005a6004356024356044356064356105f0565b34801561008957600080fd5b50610095600435610654565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6000806100c661067c565b600080600080600080600033600160a060020a031673b545507080b0f63df02ff9bd9302c2bb2447b826600160a060020a0316631caaa4878d6040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b505050506040513d602081101561016257600080fd5b5051600160a060020a03161461017757600080fd5b73b545507080b0f63df02ff9bd9302c2bb2447b826600160a060020a031663599e23648c6040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b1580156101d457600080fd5b505af11580156101e8573d6000803e3d6000fd5b505050506040513d60208110156101fe57600080fd5b5051604080517f49ad12a5000000000000000000000000000000000000000000000000000000008152600481018390529051919b5073b545507080b0f63df02ff9bd9302c2bb2447b826916349ad12a5916024808201926020929091908290030181600087803b15801561027157600080fd5b505af1158015610285573d6000803e3d6000fd5b505050506040513d602081101561029b57600080fd5b50516000818152600160208181526040928390208351608081018552815481529281015491830182905260028101549383018490526003015460608301819052939c50909a509850965094508815156103b2577329789c9abebc185f1876af10c38ee47ee0c6ed48600160a060020a031663995601878b6040518263ffffffff1660e060020a0281526004018082815260200191505060a060405180830381600087803b15801561034b57600080fd5b505af115801561035f573d6000803e3d6000fd5b505050506040513d60a081101561037557600080fd5b50805160408201516060830151608090930151919650945090925090506000841161039f57600080fd5b6002830496506002820495506002810494505b600087111561044657604080517fb131da81000000000000000000000000000000000000000000000000000000008152600481018990523360248201529051738a6014227138556a259e7b2bf1dce668f9bdfd069163b131da8191604480830192600092919082900301818387803b15801561042d57600080fd5b505af1158015610441573d6000803e3d6000fd5b505050505b60008611156104da57604080517f56f6120e000000000000000000000000000000000000000000000000000000008152600481018890523360248201529051736804bbb708b8af0851e2980c8a5e9abb42adb179916356f6120e91604480830192600092919082900301818387803b1580156104c157600080fd5b505af11580156104d5573d6000803e3d6000fd5b505050505b600085111561056e57604080517fb577c45500000000000000000000000000000000000000000000000000000000815260048101879052336024820152905173b334f68bf47c1f1c1556e7034954d389d7fbbf079163b577c45591604480830192600092919082900301818387803b15801561055557600080fd5b505af1158015610569573d6000803e3d6000fd5b505050505b73b545507080b0f63df02ff9bd9302c2bb2447b826600160a060020a03166342966c688c6040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b1580156105cb57600080fd5b505af11580156105df573d6000803e3d6000fd5b505050505050505050505050505050565b600054600160a060020a0316331461060757600080fd5b604080516080810182528581526020808201958652818301948552606082019384526000968752600190819052919095209451855592519284019290925551600283015551600390910155565b6001602081905260009182526040909120805491810154600282015460039092015490919084565b6080604051908101604052806000815260200160008152602001600081526020016000815250905600a165627a7a72305820708e38991085e2a5c6be0a12641a70d713380a95beac2acdfd2ff6115313bcfb0029"
}