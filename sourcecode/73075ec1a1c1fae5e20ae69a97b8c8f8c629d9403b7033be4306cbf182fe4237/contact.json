{
  "address": "0x0be5e8f107279cc2d9c3a537ed4ea669b45e443d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Pomda Token",
  "contractName": "POMDA",
  "compilerVersion": "v0.4.25-nightly.2018.6.3+commit.ef8fb63b",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-21\n*/\n\npragma solidity ^0.4.20;\ncontract POMDA {\n/*=================================\n=            MODIFIERS            =\n=================================*/\n// only people with tokens\nmodifier onlyBagholders() {\nrequire(myTokens() > 0);\n_;\n}\n\n// only people with profits\nmodifier onlyStronghands() {\nrequire(myDividends(true) > 0);\n_;\n}\n\n/*==============================\n=            EVENTS            =\n==============================*/\nevent onTokenPurchase(\naddress indexed customerAddress,\nuint256 incomingEthereum,\nuint256 tokensMinted,\naddress indexed referredBy\n);\n\nevent onTokenSell(\naddress indexed customerAddress,\nuint256 tokensBurned,\nuint256 ethereumEarned\n);\n\nevent onReinvestment(\naddress indexed customerAddress,\nuint256 ethereumReinvested,\nuint256 tokensMinted\n);\n\nevent onWithdraw(\naddress indexed customerAddress,\nuint256 ethereumWithdrawn\n);\n\n// ERC20\nevent Transfer(\naddress indexed from,\naddress indexed to,\nuint256 tokens\n);\n\n\n/*=====================================\n=            CONFIGURABLES            =\n=====================================*/\nstring public name = \"POMDA\";\nstring public symbol = \"POMDA\";\nuint8 constant public decimals = 18;\nuint8 constant internal dividendFee_ = 10;\nuint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\nuint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\nuint256 constant internal magnitude = 2**64;\n\n// proof of stake (defaults at 100 tokens)\nuint256 public stakingRequirement = 100e18;\n\n// ambassador program\nmapping(address => bool) internal ambassadors_;\nuint256 constant internal ambassadorMaxPurchase_ = 1 ether;\nuint256 constant internal ambassadorQuota_ = 20 ether;\n\n\n\n/*================================\n=            DATASETS            =\n================================*/\n// amount of shares for each address (scaled number)\nmapping(address => uint256) internal tokenBalanceLedger_;\nmapping(address => uint256) internal referralBalance_;\nmapping(address => int256) internal payoutsTo_;\nuint256 internal tokenSupply_ = 0;\nuint256 internal profitPerShare_;\n\n\n\n\n\n/*=======================================\n=            PUBLIC FUNCTIONS            =\n=======================================*/\n/*\n* -- APPLICATION ENTRY POINTS --  \n*/\nfunction POMDA()\npublic\n{\n        \n}\nfunction buy(address _referredBy)\npublic\npayable\nreturns(uint256)\n{\npurchaseTokens(msg.value, _referredBy);\n}\n\n/**\n* Fallback function to handle ethereum that was send straight to the contract\n* Unfortunately we cannot use a referral address this way.\n*/\nfunction()\npayable\npublic\n{\npurchaseTokens(msg.value, 0x0);\n}\n\n/**\n* Converts all of caller's dividends to tokens.\n*/\nfunction reinvest()\nonlyStronghands()\npublic\n{\n// fetch dividends\nuint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n// pay out the dividends virtually\naddress _customerAddress = msg.sender;\npayoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n// retrieve ref. bonus\n_dividends += referralBalance_[_customerAddress];\nreferralBalance_[_customerAddress] = 0;\n\n// dispatch a buy order with the virtualized \"withdrawn dividends\"\nuint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n// fire event\nonReinvestment(_customerAddress, _dividends, _tokens);\n}\n\n/**\n* Alias of sell() and withdraw().\n*/\nfunction exit()\npublic\n{\n// get token count for caller & sell them all\naddress _customerAddress = msg.sender;\nuint256 _tokens = tokenBalanceLedger_[_customerAddress];\nif(_tokens > 0) sell(_tokens);\n\n// lambo delivery service\nwithdraw();\n}\n\n/**\n* Withdraws all of the callers earnings.\n*/\nfunction withdraw()\nonlyStronghands()\npublic\n{\n// setup data\naddress _customerAddress = msg.sender;\nuint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n// update dividend tracker\npayoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n// add ref. bonus\n_dividends += referralBalance_[_customerAddress];\nreferralBalance_[_customerAddress] = 0;\n\n// lambo delivery service\n_customerAddress.transfer(_dividends);\n\n// fire event\nonWithdraw(_customerAddress, _dividends);\n}\n\n/**\n* Liquifies tokens to ethereum.\n*/\nfunction sell(uint256 _amountOfTokens)\nonlyBagholders()\npublic\n{\n// setup data\naddress _customerAddress = msg.sender;\n// russian hackers BTFO\nrequire(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\nuint256 _tokens = _amountOfTokens;\nuint256 _ethereum = tokensToEthereum_(_tokens);\nuint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\nuint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n// burn the sold tokens\ntokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\ntokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n// update dividends tracker\nint256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\npayoutsTo_[_customerAddress] -= _updatedPayouts;       \n\n// dividing by zero is a bad idea\nif (tokenSupply_ > 0) {\n// update the amount of dividends per token\nprofitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n}\n\n// fire event\nonTokenSell(_customerAddress, _tokens, _taxedEthereum);\n}\n\n\n/**\n* Transfer tokens from the caller to a new holder.\n* Remember, there's a 10% fee here as well.\n*/\nfunction transfer(address _toAddress, uint256 _amountOfTokens)\nonlyBagholders()\npublic\nreturns(bool)\n{\n// setup\naddress _customerAddress = msg.sender;\n\n// make sure we have the requested tokens\n// also disables transfers until ambassador phase is over\n// ( we dont want whale premines )\n//require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n// withdraw all outstanding dividends first\nif(myDividends(true) > 0) withdraw();\n\n// liquify 10% of the tokens that are transfered\n// these are dispersed to shareholders\nuint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\nuint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\nuint256 _dividends = tokensToEthereum_(_tokenFee);\n\n// burn the fee tokens\ntokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n// exchange tokens\ntokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\ntokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n\n// update dividend trackers\npayoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\npayoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n\n// disperse dividends among holders\nprofitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n\n// fire event\nTransfer(_customerAddress, _toAddress, _taxedTokens);\n\n// ERC20\nreturn true;\n\n}\n\n\n/*----------  HELPERS AND CALCULATORS  ----------*/\n/**\n* Method to view the current Ethereum stored in the contract\n* Example: totalEthereumBalance()\n*/\nfunction totalEthereumBalance()\npublic\nview\nreturns(uint)\n{\nreturn this.balance;\n}\n\n/**\n* Retrieve the total token supply.\n*/\nfunction totalSupply()\npublic\nview\nreturns(uint256)\n{\nreturn tokenSupply_;\n}\n\n/**\n* Retrieve the tokens owned by the caller.\n*/\nfunction myTokens()\npublic\nview\nreturns(uint256)\n{\naddress _customerAddress = msg.sender;\nreturn balanceOf(_customerAddress);\n}\n\n/**\n* Retrieve the dividends owned by the caller.\n* If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n* The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n* But in the internal calculations, we want them separate. \n*/ \nfunction myDividends(bool _includeReferralBonus) \npublic \nview \nreturns(uint256)\n{\naddress _customerAddress = msg.sender;\nreturn _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n}\n\n/**\n* Retrieve the token balance of any single address.\n*/\nfunction balanceOf(address _customerAddress)\nview\npublic\nreturns(uint256)\n{\nreturn tokenBalanceLedger_[_customerAddress];\n}\n\n/**\n* Retrieve the dividend balance of any single address.\n*/\nfunction dividendsOf(address _customerAddress)\nview\npublic\nreturns(uint256)\n{\nreturn (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n}\n\n/**\n* Return the buy price of 1 individual token.\n*/\nfunction sellPrice() \npublic \nview \nreturns(uint256)\n{\n// our calculation relies on the token supply, so we need supply. Doh.\nif(tokenSupply_ == 0){\nreturn tokenPriceInitial_ - tokenPriceIncremental_;\n} else {\nuint256 _ethereum = tokensToEthereum_(1e18);\nuint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\nuint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\nreturn _taxedEthereum;\n}\n}\n\n/**\n* Return the sell price of 1 individual token.\n*/\nfunction buyPrice() \npublic \nview \nreturns(uint256)\n{\n// our calculation relies on the token supply, so we need supply. Doh.\nif(tokenSupply_ == 0){\nreturn tokenPriceInitial_ + tokenPriceIncremental_;\n} else {\nuint256 _ethereum = tokensToEthereum_(1e18);\nuint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\nuint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\nreturn _taxedEthereum;\n}\n}\n\n/**\n* Function for the frontend to dynamically retrieve the price scaling of buy orders.\n*/\nfunction calculateTokensReceived(uint256 _ethereumToSpend) \npublic \nview \nreturns(uint256)\n{\nuint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\nuint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\nuint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\nreturn _amountOfTokens;\n}\n\n/**\n* Function for the frontend to dynamically retrieve the price scaling of sell orders.\n*/\nfunction calculateEthereumReceived(uint256 _tokensToSell) \npublic \nview \nreturns(uint256)\n{\nrequire(_tokensToSell <= tokenSupply_);\nuint256 _ethereum = tokensToEthereum_(_tokensToSell);\nuint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\nuint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\nreturn _taxedEthereum;\n}\n\n\n/*==========================================\n=            INTERNAL FUNCTIONS            =\n==========================================*/\nfunction purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n//    antiEarlyWhale(_incomingEthereum)\ninternal\nreturns(uint256)\n{\n// data setup\naddress _customerAddress = msg.sender;\nuint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\nuint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\nuint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\nuint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\nuint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\nuint256 _fee = _dividends * magnitude;\n\n// no point in continuing execution if OP is a poorfag russian hacker\n// prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n// (or hackers)\n// and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\nrequire(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n\n// is the user referred by a masternode?\nif(\n// is this a referred purchase?\n_referredBy != 0x0000000000000000000000000000000000000000 &&\n\n// no cheating!\n_referredBy != _customerAddress &&\n\n// does the referrer have at least X whole tokens?\n// i.e is the referrer a godly chad masternode\ntokenBalanceLedger_[_referredBy] >= stakingRequirement\n){\n// wealth redistribution\nreferralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n} else {\n// no ref purchase\n// add the referral bonus back to the global dividends cake\n_dividends = SafeMath.add(_dividends, _referralBonus);\n_fee = _dividends * magnitude;\n}\n\n// we can't give people infinite ethereum\nif(tokenSupply_ > 0){\n\n// add tokens to the pool\ntokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n// take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\nprofitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n\n// calculate the amount of tokens the customer receives over his purchase \n_fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n\n} else {\n// add tokens to the pool\ntokenSupply_ = _amountOfTokens;\n}\n\n// update circulating supply & the ledger address for the customer\ntokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n// Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n//really i know you think you do but you don't\nint256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\npayoutsTo_[_customerAddress] += _updatedPayouts;\n\n// fire event\nonTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n\nreturn _amountOfTokens;\n}\n\n/**\n* Calculate Token price based on an amount of incoming ethereum\n* It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n* Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n*/\nfunction ethereumToTokens_(uint256 _ethereum)\ninternal\nview\nreturns(uint256)\n{\nuint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\nuint256 _tokensReceived = \n(\n(\n// underflow attempts BTFO\nSafeMath.sub(\n(sqrt\n(\n(_tokenPriceInitial**2)\n+\n(2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n+\n(((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n+\n(2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n)\n), _tokenPriceInitial\n)\n)/(tokenPriceIncremental_)\n)-(tokenSupply_)\n;\n\nreturn _tokensReceived;\n}\n\n/**\n* Calculate token sell value.\n* It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n* Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n*/\nfunction tokensToEthereum_(uint256 _tokens)\ninternal\nview\nreturns(uint256)\n{\n\nuint256 tokens_ = (_tokens + 1e18);\nuint256 _tokenSupply = (tokenSupply_ + 1e18);\nuint256 _etherReceived =\n(\n// underflow attempts BTFO\nSafeMath.sub(\n(\n(\n(\ntokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n)-tokenPriceIncremental_\n)*(tokens_ - 1e18)\n),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n)\n/1e18);\nreturn _etherReceived;\n}\n\n\n//This is where all your gas goes, sorry\n//Not sorry, you probably only paid 1 gwei\nfunction sqrt(uint x) internal pure returns (uint y) {\nuint z = (x + 1) / 2;\ny = x;\nwhile (z < y) {\ny = z;\nz = (x / z + z) / 2;\n}\n}\n}\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n/**\n* @dev Multiplies two numbers, throws on overflow.\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nassert(c / a == b);\nreturn c;\n}\n\n/**\n* @dev Integer division of two numbers, truncating the quotient.\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint256 c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n/**\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n*/\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\nassert(b <= a);\nreturn a - b;\n}\n\n/**\n* @dev Adds two numbers, throws on overflow.\n*/\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\nuint256 c = a + b;\nassert(c >= a);\nreturn c;\n}\n}",
  "bytecode": "60806040526040805190810160405280600581526020017f504f4d44410000000000000000000000000000000000000000000000000000008152506000908051906020019062000051929190620000c6565b506040805190810160405280600581526020017f504f4d4441000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620000c6565b5068056bc75e2d631000006002556000600755348015620000bf57600080fd5b5062000175565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010957805160ff19168380011785556200013a565b828001600101855582156200013a579182015b82811115620001395782518255916020019190600101906200011c565b5b5090506200014991906200014d565b5090565b6200017291905b808211156200016e57600081600090555060010162000154565b5090565b90565b61186a80620001856000396000f300608060405260043610610111576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806265318b1461011f57806306fdde031461017657806310d0ffdd1461020657806318160ddd146102475780632260937314610272578063313ce567146102b35780633ccfd60b146102e45780634b750334146102fb57806356d399e814610326578063688abbf7146103515780636b2f46321461039457806370a08231146103bf5780638620410b14610416578063949e8acd1461044157806395d89b411461046c578063a9059cbb146104fc578063e4849b3214610561578063e9fad8ee1461058e578063f088d547146105a5578063fdb5a03e146105ef575b61011c346000610606565b50005b34801561012b57600080fd5b50610160600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109c6565b6040518082815260200191505060405180910390f35b34801561018257600080fd5b5061018b610a68565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cb5780820151818401526020810190506101b0565b50505050905090810190601f1680156101f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021257600080fd5b5061023160048036038101908080359060200190929190505050610b06565b6040518082815260200191505060405180910390f35b34801561025357600080fd5b5061025c610b3e565b6040518082815260200191505060405180910390f35b34801561027e57600080fd5b5061029d60048036038101908080359060200190929190505050610b48565b6040518082815260200191505060405180910390f35b3480156102bf57600080fd5b506102c8610b91565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102f057600080fd5b506102f9610b96565b005b34801561030757600080fd5b50610310610d3a565b6040518082815260200191505060405180910390f35b34801561033257600080fd5b5061033b610d98565b6040518082815260200191505060405180910390f35b34801561035d57600080fd5b5061037e600480360381019080803515159060200190929190505050610d9e565b6040518082815260200191505060405180910390f35b3480156103a057600080fd5b506103a9610e0a565b6040518082815260200191505060405180910390f35b3480156103cb57600080fd5b50610400600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e29565b6040518082815260200191505060405180910390f35b34801561042257600080fd5b5061042b610e72565b6040518082815260200191505060405180910390f35b34801561044d57600080fd5b50610456610ed0565b6040518082815260200191505060405180910390f35b34801561047857600080fd5b50610481610ee5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104c15780820151818401526020810190506104a6565b50505050905090810190601f1680156104ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561050857600080fd5b50610547600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f83565b604051808215151515815260200191505060405180910390f35b34801561056d57600080fd5b5061058c6004803603810190808035906020019092919050505061124e565b005b34801561059a57600080fd5b506105a361147c565b005b6105d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e3565b6040518082815260200191505060405180910390f35b3480156105fb57600080fd5b506106046114f5565b005b60008060008060008060008060003397506106258b600a60ff16611669565b9650610632876003611669565b955061063e8787611684565b945061064a8b88611684565b93506106558461169d565b92506801000000000000000085029150600083118015610681575060075461067f8460075461172a565b115b151561068c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141580156106f557508773ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b80156107425750600254600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b156107d857610790600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548761172a565b600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f3565b6107e2858761172a565b945068010000000000000000850291505b6000600754111561085e5761080a6007548461172a565b60078190555060075468010000000000000000860281151561082857fe5b0460086000828254019250508190555060075468010000000000000000860281151561085057fe5b048302820382039150610866565b826007819055505b6108af600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461172a565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081836008540203905080600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508973ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58d86604051808381526020018281526020019250505060405180910390a3829850505050505050505092915050565b600068010000000000000000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546008540203811515610a6057fe5b049050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610afe5780601f10610ad357610100808354040283529160200191610afe565b820191906000526020600020905b815481529060010190602001808311610ae157829003601f168201915b505050505081565b600080600080610b1a85600a60ff16611669565b9250610b268584611684565b9150610b318261169d565b9050809350505050919050565b6000600754905090565b6000806000806007548511151515610b5f57600080fd5b610b6885611748565b9250610b7883600a60ff16611669565b9150610b848383611684565b9050809350505050919050565b601281565b6000806000610ba56001610d9e565b111515610bb157600080fd5b339150610bbe6000610d9e565b9050680100000000000000008102600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054810190506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ce7573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc826040518082815260200191505060405180910390a25050565b60008060008060006007541415610d5f576402540be40064174876e800039350610d92565b610d70670de0b6b3a7640000611748565b9250610d8083600a60ff16611669565b9150610d8c8383611684565b90508093505b50505090565b60025481565b60008033905082610db757610db2816109c6565b610e02565b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e00826109c6565b015b915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060006007541415610e97576402540be40064174876e800019350610eca565b610ea8670de0b6b3a7640000611748565b9250610eb883600a60ff16611669565b9150610ec4838361172a565b90508093505b50505090565b600080339050610edf81610e29565b91505090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f7b5780601f10610f5057610100808354040283529160200191610f7b565b820191906000526020600020905b815481529060010190602001808311610f5e57829003601f168201915b505050505081565b600080600080600080610f94610ed0565b111515610fa057600080fd5b3393506000610faf6001610d9e565b1115610fbe57610fbd610b96565b5b610fcc86600a60ff16611669565b9250610fd88684611684565b9150610fe383611748565b9050610ff160075484611684565b600781905550611040600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487611684565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110cc600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361172a565b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560085402600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508160085402600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506111d56008546007546801000000000000000084028115156111cf57fe5b0461172a565b6008819055508673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600194505050505092915050565b6000806000806000806000611261610ed0565b11151561126d57600080fd5b339550600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487111515156112be57600080fd5b8694506112ca85611748565b93506112da84600a60ff16611669565b92506112e68484611684565b91506112f460075486611684565b600781905550611343600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611684565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550680100000000000000008202856008540201905080600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000600754111561141d5761141660085460075468010000000000000000860281151561141057fe5b0461172a565b6008819055505b8573ffffffffffffffffffffffffffffffffffffffff167fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a311398684604051808381526020018281526020019250505060405180910390a250505050505050565b600080339150600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156114d7576114d68161124e565b5b6114df610b96565b5050565b60006114ef3483610606565b50919050565b6000806000806115056001610d9e565b11151561151157600080fd5b61151b6000610d9e565b9250339150680100000000000000008302600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054830192506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061160c836000610606565b90508173ffffffffffffffffffffffffffffffffffffffff167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080828481151561167757fe5b0490508091505092915050565b600082821115151561169257fe5b818303905092915050565b6000806000670de0b6b3a764000064174876e8000291506007546402540be40061171361170d600754866402540be400600202020260026007540a60026402540be4000a02670de0b6b3a76400008a02670de0b6b3a76400006402540be40002600202026002890a0101016117f3565b85611684565b81151561171c57fe5b040390508092505050919050565b600080828401905083811015151561173e57fe5b8091505092915050565b600080600080670de0b6b3a764000085019250670de0b6b3a7640000600754019150670de0b6b3a76400006117dc670de0b6b3a764000085036402540be400670de0b6b3a76400008681151561179a57fe5b046402540be4000264174876e8000103026002670de0b6b3a7640000876002890a038115156117c557fe5b046402540be400028115156117d657fe5b04611684565b8115156117e557fe5b049050809350505050919050565b60008060026001840181151561180557fe5b0490508291505b8181101561183857809150600281828581151561182557fe5b040181151561183057fe5b04905061180c565b509190505600a165627a7a723058205c36c9afd44851067d26b0ca1b5b1b5025bef5fbd2149bd8f192d659484be4fa0029"
}